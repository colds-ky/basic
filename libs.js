function _mergeNamespaces(n, m) {
	m.forEach(function (e) {
		e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
			if (k !== 'default' && !(k in n)) {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	});
	return Object.freeze(n);
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var dist$5 = {};

var dist$4 = {};

var types$5 = {};

var lib$1 = {};

var external$1 = {};

var errors = {};

var en = {};

var util$7 = {};

var hasRequiredUtil$7;
function requireUtil$7() {
  if (hasRequiredUtil$7) return util$7;
  hasRequiredUtil$7 = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = undefined;
    var util;
    (function (util) {
      util.assertEqual = val => val;
      function assertIs(_arg) {}
      util.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util.assertNever = assertNever;
      util.arrayToEnum = items => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util.getValidEnumValues = obj => {
        const validKeys = util.objectKeys(obj).filter(k => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
          filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
      };
      util.objectValues = obj => {
        return util.objectKeys(obj).map(function (e) {
          return obj[e];
        });
      };
      util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
      ? obj => Object.keys(obj) // eslint-disable-line ban/ban
      : object => {
        const keys = [];
        for (const key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item)) return item;
        }
        return undefined;
      };
      util.isInteger = typeof Number.isInteger === "function" ? val => Number.isInteger(val) // eslint-disable-line ban/ban
      : val => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
        return array.map(val => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util.joinValues = joinValues;
      util.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (exports.util = util = {}));
    var objectUtil;
    (function (objectUtil) {
      objectUtil.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second // second overwrites first
        };
      };
    })(objectUtil || (exports.objectUtil = objectUtil = {}));
    exports.ZodParsedType = util.arrayToEnum(["string", "nan", "number", "integer", "float", "boolean", "date", "bigint", "symbol", "function", "undefined", "null", "array", "object", "unknown", "promise", "void", "never", "map", "set"]);
    const getParsedType = data => {
      const t = typeof data;
      switch (t) {
        case "undefined":
          return exports.ZodParsedType.undefined;
        case "string":
          return exports.ZodParsedType.string;
        case "number":
          return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
        case "boolean":
          return exports.ZodParsedType.boolean;
        case "function":
          return exports.ZodParsedType.function;
        case "bigint":
          return exports.ZodParsedType.bigint;
        case "symbol":
          return exports.ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return exports.ZodParsedType.array;
          }
          if (data === null) {
            return exports.ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return exports.ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return exports.ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return exports.ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return exports.ZodParsedType.date;
          }
          return exports.ZodParsedType.object;
        default:
          return exports.ZodParsedType.unknown;
      }
    };
    exports.getParsedType = getParsedType;
  })(util$7);
  return util$7;
}

var ZodError = {};

var hasRequiredZodError;
function requireZodError() {
  if (hasRequiredZodError) return ZodError;
  hasRequiredZodError = 1;
  Object.defineProperty(ZodError, "__esModule", {
    value: true
  });
  ZodError.ZodError = ZodError.quotelessJson = ZodError.ZodIssueCode = undefined;
  const util_1 = /*@__PURE__*/requireUtil$7();
  ZodError.ZodIssueCode = util_1.util.arrayToEnum(["invalid_type", "invalid_literal", "custom", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "unrecognized_keys", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "too_small", "too_big", "invalid_intersection_types", "not_multiple_of", "not_finite"]);
  const quotelessJson = obj => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
  };
  ZodError.quotelessJson = quotelessJson;
  let ZodError$1 = class ZodError extends Error {
    get errors() {
      return this.issues;
    }
    constructor(issues) {
      super();
      this.issues = [];
      this.addIssue = sub => {
        this.issues = [...this.issues, sub];
      };
      this.addIssues = (subs = []) => {
        this.issues = [...this.issues, ...subs];
      };
      const actualProto = new.target.prototype;
      if (Object.setPrototypeOf) {
        // eslint-disable-next-line ban/ban
        Object.setPrototypeOf(this, actualProto);
      } else {
        this.__proto__ = actualProto;
      }
      this.name = "ZodError";
      this.issues = issues;
    }
    format(_mapper) {
      const mapper = _mapper || function (issue) {
        return issue.message;
      };
      const fieldErrors = {
        _errors: []
      };
      const processError = error => {
        for (const issue of error.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            let curr = fieldErrors;
            let i = 0;
            while (i < issue.path.length) {
              const el = issue.path[i];
              const terminal = i === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || {
                  _errors: []
                };
                // if (typeof el === "string") {
                //   curr[el] = curr[el] || { _errors: [] };
                // } else if (typeof el === "number") {
                //   const errorArray: any = [];
                //   errorArray._errors = [];
                //   curr[el] = curr[el] || errorArray;
                // }
              } else {
                curr[el] = curr[el] || {
                  _errors: []
                };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i++;
            }
          }
        }
      };
      processError(this);
      return fieldErrors;
    }
    static assert(value) {
      if (!(value instanceof ZodError)) {
        throw new Error(`Not a ZodError: ${value}`);
      }
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(mapper = issue => issue.message) {
      const fieldErrors = {};
      const formErrors = [];
      for (const sub of this.issues) {
        if (sub.path.length > 0) {
          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
          fieldErrors[sub.path[0]].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
      return {
        formErrors,
        fieldErrors
      };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  ZodError.ZodError = ZodError$1;
  ZodError$1.create = issues => {
    const error = new ZodError$1(issues);
    return error;
  };
  return ZodError;
}

var hasRequiredEn;
function requireEn() {
  if (hasRequiredEn) return en;
  hasRequiredEn = 1;
  Object.defineProperty(en, "__esModule", {
    value: true
  });
  const util_1 = /*@__PURE__*/requireUtil$7();
  const ZodError_1 = /*@__PURE__*/requireZodError();
  const errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
      case ZodError_1.ZodIssueCode.invalid_type:
        if (issue.received === util_1.ZodParsedType.undefined) {
          message = "Required";
        } else {
          message = `Expected ${issue.expected}, received ${issue.received}`;
        }
        break;
      case ZodError_1.ZodIssueCode.invalid_literal:
        message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
        break;
      case ZodError_1.ZodIssueCode.unrecognized_keys:
        message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
        break;
      case ZodError_1.ZodIssueCode.invalid_union:
        message = `Invalid input`;
        break;
      case ZodError_1.ZodIssueCode.invalid_union_discriminator:
        message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
        break;
      case ZodError_1.ZodIssueCode.invalid_enum_value:
        message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
        break;
      case ZodError_1.ZodIssueCode.invalid_arguments:
        message = `Invalid function arguments`;
        break;
      case ZodError_1.ZodIssueCode.invalid_return_type:
        message = `Invalid function return type`;
        break;
      case ZodError_1.ZodIssueCode.invalid_date:
        message = `Invalid date`;
        break;
      case ZodError_1.ZodIssueCode.invalid_string:
        if (typeof issue.validation === "object") {
          if ("includes" in issue.validation) {
            message = `Invalid input: must include "${issue.validation.includes}"`;
            if (typeof issue.validation.position === "number") {
              message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
            }
          } else if ("startsWith" in issue.validation) {
            message = `Invalid input: must start with "${issue.validation.startsWith}"`;
          } else if ("endsWith" in issue.validation) {
            message = `Invalid input: must end with "${issue.validation.endsWith}"`;
          } else {
            util_1.util.assertNever(issue.validation);
          }
        } else if (issue.validation !== "regex") {
          message = `Invalid ${issue.validation}`;
        } else {
          message = "Invalid";
        }
        break;
      case ZodError_1.ZodIssueCode.too_small:
        if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;else message = "Invalid input";
        break;
      case ZodError_1.ZodIssueCode.too_big:
        if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;else message = "Invalid input";
        break;
      case ZodError_1.ZodIssueCode.custom:
        message = `Invalid input`;
        break;
      case ZodError_1.ZodIssueCode.invalid_intersection_types:
        message = `Intersection results could not be merged`;
        break;
      case ZodError_1.ZodIssueCode.not_multiple_of:
        message = `Number must be a multiple of ${issue.multipleOf}`;
        break;
      case ZodError_1.ZodIssueCode.not_finite:
        message = "Number must be finite";
        break;
      default:
        message = _ctx.defaultError;
        util_1.util.assertNever(issue);
    }
    return {
      message
    };
  };
  en.default = errorMap;
  return en;
}

var hasRequiredErrors;
function requireErrors() {
  if (hasRequiredErrors) return errors;
  hasRequiredErrors = 1;
  var __importDefault = errors.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(errors, "__esModule", {
    value: true
  });
  errors.getErrorMap = errors.setErrorMap = errors.defaultErrorMap = undefined;
  const en_1 = __importDefault(/*@__PURE__*/requireEn());
  errors.defaultErrorMap = en_1.default;
  let overrideErrorMap = en_1.default;
  function setErrorMap(map) {
    overrideErrorMap = map;
  }
  errors.setErrorMap = setErrorMap;
  function getErrorMap() {
    return overrideErrorMap;
  }
  errors.getErrorMap = getErrorMap;
  return errors;
}

var parseUtil = {};

var hasRequiredParseUtil;
function requireParseUtil() {
  if (hasRequiredParseUtil) return parseUtil;
  hasRequiredParseUtil = 1;
  (function (exports) {

    var __importDefault = parseUtil.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = undefined;
    const errors_1 = /*@__PURE__*/requireErrors();
    const en_1 = __importDefault(/*@__PURE__*/requireEn());
    const makeIssue = params => {
      const {
        data,
        path,
        errorMaps,
        issueData
      } = params;
      const fullPath = [...path, ...(issueData.path || [])];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== undefined) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter(m => !!m).slice().reverse();
      for (const map of maps) {
        errorMessage = map(fullIssue, {
          data,
          defaultError: errorMessage
        }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    exports.makeIssue = makeIssue;
    exports.EMPTY_PATH = [];
    function addIssueToContext(ctx, issueData) {
      const overrideMap = (0, errors_1.getErrorMap)();
      const issue = (0, exports.makeIssue)({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap,
        // contextual error map is first priority
        ctx.schemaErrorMap,
        // then schema-bound map if available
        overrideMap,
        // then global override map
        overrideMap === en_1.default ? undefined : en_1.default // then global default map
        ].filter(x => !!x)
      });
      ctx.common.issues.push(issue);
    }
    exports.addIssueToContext = addIssueToContext;
    class ParseStatus {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid") this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted") this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
          if (s.status === "aborted") return exports.INVALID;
          if (s.status === "dirty") status.dirty();
          arrayValue.push(s.value);
        }
        return {
          status: status.value,
          value: arrayValue
        };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const {
            key,
            value
          } = pair;
          if (key.status === "aborted") return exports.INVALID;
          if (value.status === "aborted") return exports.INVALID;
          if (key.status === "dirty") status.dirty();
          if (value.status === "dirty") status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return {
          status: status.value,
          value: finalObject
        };
      }
    }
    exports.ParseStatus = ParseStatus;
    exports.INVALID = Object.freeze({
      status: "aborted"
    });
    const DIRTY = value => ({
      status: "dirty",
      value
    });
    exports.DIRTY = DIRTY;
    const OK = value => ({
      status: "valid",
      value
    });
    exports.OK = OK;
    const isAborted = x => x.status === "aborted";
    exports.isAborted = isAborted;
    const isDirty = x => x.status === "dirty";
    exports.isDirty = isDirty;
    const isValid = x => x.status === "valid";
    exports.isValid = isValid;
    const isAsync = x => typeof Promise !== "undefined" && x instanceof Promise;
    exports.isAsync = isAsync;
  })(parseUtil);
  return parseUtil;
}

var typeAliases = {};

var hasRequiredTypeAliases;
function requireTypeAliases() {
  if (hasRequiredTypeAliases) return typeAliases;
  hasRequiredTypeAliases = 1;
  Object.defineProperty(typeAliases, "__esModule", {
    value: true
  });
  return typeAliases;
}

var types$4 = {};

var errorUtil = {};

var hasRequiredErrorUtil;
function requireErrorUtil() {
  if (hasRequiredErrorUtil) return errorUtil;
  hasRequiredErrorUtil = 1;
  Object.defineProperty(errorUtil, "__esModule", {
    value: true
  });
  errorUtil.errorUtil = undefined;
  var errorUtil$1;
  (function (errorUtil) {
    errorUtil.errToObj = message => typeof message === "string" ? {
      message
    } : message || {};
    errorUtil.toString = message => typeof message === "string" ? message : message === null || message === undefined ? undefined : message.message;
  })(errorUtil$1 || (errorUtil.errorUtil = errorUtil$1 = {}));
  return errorUtil;
}

var hasRequiredTypes$5;
function requireTypes$5() {
  if (hasRequiredTypes$5) return types$4;
  hasRequiredTypes$5 = 1;
  var __classPrivateFieldGet = types$4.__classPrivateFieldGet || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var __classPrivateFieldSet = types$4.__classPrivateFieldSet || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var _ZodEnum_cache, _ZodNativeEnum_cache;
  Object.defineProperty(types$4, "__esModule", {
    value: true
  });
  types$4.boolean = types$4.bigint = types$4.array = types$4.any = types$4.coerce = types$4.ZodFirstPartyTypeKind = types$4.late = types$4.ZodSchema = types$4.Schema = types$4.custom = types$4.ZodReadonly = types$4.ZodPipeline = types$4.ZodBranded = types$4.BRAND = types$4.ZodNaN = types$4.ZodCatch = types$4.ZodDefault = types$4.ZodNullable = types$4.ZodOptional = types$4.ZodTransformer = types$4.ZodEffects = types$4.ZodPromise = types$4.ZodNativeEnum = types$4.ZodEnum = types$4.ZodLiteral = types$4.ZodLazy = types$4.ZodFunction = types$4.ZodSet = types$4.ZodMap = types$4.ZodRecord = types$4.ZodTuple = types$4.ZodIntersection = types$4.ZodDiscriminatedUnion = types$4.ZodUnion = types$4.ZodObject = types$4.ZodArray = types$4.ZodVoid = types$4.ZodNever = types$4.ZodUnknown = types$4.ZodAny = types$4.ZodNull = types$4.ZodUndefined = types$4.ZodSymbol = types$4.ZodDate = types$4.ZodBoolean = types$4.ZodBigInt = types$4.ZodNumber = types$4.ZodString = types$4.datetimeRegex = types$4.ZodType = undefined;
  types$4.NEVER = types$4.void = types$4.unknown = types$4.union = types$4.undefined = types$4.tuple = types$4.transformer = types$4.symbol = types$4.string = types$4.strictObject = types$4.set = types$4.record = types$4.promise = types$4.preprocess = types$4.pipeline = types$4.ostring = types$4.optional = types$4.onumber = types$4.oboolean = types$4.object = types$4.number = types$4.nullable = types$4.null = types$4.never = types$4.nativeEnum = types$4.nan = types$4.map = types$4.literal = types$4.lazy = types$4.intersection = types$4.instanceof = types$4.function = types$4.enum = types$4.effect = types$4.discriminatedUnion = types$4.date = undefined;
  const errors_1 = /*@__PURE__*/requireErrors();
  const errorUtil_1 = /*@__PURE__*/requireErrorUtil();
  const parseUtil_1 = /*@__PURE__*/requireParseUtil();
  const util_1 = /*@__PURE__*/requireUtil$7();
  const ZodError_1 = /*@__PURE__*/requireZodError();
  class ParseInputLazyPath {
    constructor(parent, value, path, key) {
      this._cachedPath = [];
      this.parent = parent;
      this.data = value;
      this._path = path;
      this._key = key;
    }
    get path() {
      if (!this._cachedPath.length) {
        if (this._key instanceof Array) {
          this._cachedPath.push(...this._path, ...this._key);
        } else {
          this._cachedPath.push(...this._path, this._key);
        }
      }
      return this._cachedPath;
    }
  }
  const handleResult = (ctx, result) => {
    if ((0, parseUtil_1.isValid)(result)) {
      return {
        success: true,
        data: result.value
      };
    } else {
      if (!ctx.common.issues.length) {
        throw new Error("Validation failed but no issues detected.");
      }
      return {
        success: false,
        get error() {
          if (this._error) return this._error;
          const error = new ZodError_1.ZodError(ctx.common.issues);
          this._error = error;
          return this._error;
        }
      };
    }
  };
  function processCreateParams(params) {
    if (!params) return {};
    const {
      errorMap,
      invalid_type_error,
      required_error,
      description
    } = params;
    if (errorMap && (invalid_type_error || required_error)) {
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap) return {
      errorMap: errorMap,
      description
    };
    const customMap = (iss, ctx) => {
      var _a, _b;
      const {
        message
      } = params;
      if (iss.code === "invalid_enum_value") {
        return {
          message: message !== null && message !== undefined ? message : ctx.defaultError
        };
      }
      if (typeof ctx.data === "undefined") {
        return {
          message: (_a = message !== null && message !== undefined ? message : required_error) !== null && _a !== undefined ? _a : ctx.defaultError
        };
      }
      if (iss.code !== "invalid_type") return {
        message: ctx.defaultError
      };
      return {
        message: (_b = message !== null && message !== undefined ? message : invalid_type_error) !== null && _b !== undefined ? _b : ctx.defaultError
      };
    };
    return {
      errorMap: customMap,
      description
    };
  }
  class ZodType {
    get description() {
      return this._def.description;
    }
    _getType(input) {
      return (0, util_1.getParsedType)(input.data);
    }
    _getOrReturnCtx(input, ctx) {
      return ctx || {
        common: input.parent.common,
        data: input.data,
        parsedType: (0, util_1.getParsedType)(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      };
    }
    _processInputParams(input) {
      return {
        status: new parseUtil_1.ParseStatus(),
        ctx: {
          common: input.parent.common,
          data: input.data,
          parsedType: (0, util_1.getParsedType)(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        }
      };
    }
    _parseSync(input) {
      const result = this._parse(input);
      if ((0, parseUtil_1.isAsync)(result)) {
        throw new Error("Synchronous parse encountered promise.");
      }
      return result;
    }
    _parseAsync(input) {
      const result = this._parse(input);
      return Promise.resolve(result);
    }
    parse(data, params) {
      const result = this.safeParse(data, params);
      if (result.success) return result.data;
      throw result.error;
    }
    safeParse(data, params) {
      var _a;
      const ctx = {
        common: {
          issues: [],
          async: (_a = params === null || params === undefined ? undefined : params.async) !== null && _a !== undefined ? _a : false,
          contextualErrorMap: params === null || params === undefined ? undefined : params.errorMap
        },
        path: (params === null || params === undefined ? undefined : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: (0, util_1.getParsedType)(data)
      };
      const result = this._parseSync({
        data,
        path: ctx.path,
        parent: ctx
      });
      return handleResult(ctx, result);
    }
    "~validate"(data) {
      var _a, _b;
      const ctx = {
        common: {
          issues: [],
          async: !!this["~standard"].async
        },
        path: [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: (0, util_1.getParsedType)(data)
      };
      if (!this["~standard"].async) {
        try {
          const result = this._parseSync({
            data,
            path: [],
            parent: ctx
          });
          return (0, parseUtil_1.isValid)(result) ? {
            value: result.value
          } : {
            issues: ctx.common.issues
          };
        } catch (err) {
          if ((_b = (_a = err === null || err === undefined ? undefined : err.message) === null || _a === undefined ? undefined : _a.toLowerCase()) === null || _b === undefined ? undefined : _b.includes("encountered")) {
            this["~standard"].async = true;
          }
          ctx.common = {
            issues: [],
            async: true
          };
        }
      }
      return this._parseAsync({
        data,
        path: [],
        parent: ctx
      }).then(result => (0, parseUtil_1.isValid)(result) ? {
        value: result.value
      } : {
        issues: ctx.common.issues
      });
    }
    async parseAsync(data, params) {
      const result = await this.safeParseAsync(data, params);
      if (result.success) return result.data;
      throw result.error;
    }
    async safeParseAsync(data, params) {
      const ctx = {
        common: {
          issues: [],
          contextualErrorMap: params === null || params === undefined ? undefined : params.errorMap,
          async: true
        },
        path: (params === null || params === undefined ? undefined : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: (0, util_1.getParsedType)(data)
      };
      const maybeAsyncResult = this._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
      const result = await ((0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
      return handleResult(ctx, result);
    }
    refine(check, message) {
      const getIssueProperties = val => {
        if (typeof message === "string" || typeof message === "undefined") {
          return {
            message
          };
        } else if (typeof message === "function") {
          return message(val);
        } else {
          return message;
        }
      };
      return this._refinement((val, ctx) => {
        const result = check(val);
        const setError = () => ctx.addIssue({
          code: ZodError_1.ZodIssueCode.custom,
          ...getIssueProperties(val)
        });
        if (typeof Promise !== "undefined" && result instanceof Promise) {
          return result.then(data => {
            if (!data) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        if (!result) {
          setError();
          return false;
        } else {
          return true;
        }
      });
    }
    refinement(check, refinementData) {
      return this._refinement((val, ctx) => {
        if (!check(val)) {
          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
          return false;
        } else {
          return true;
        }
      });
    }
    _refinement(refinement) {
      return new ZodEffects({
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: {
          type: "refinement",
          refinement
        }
      });
    }
    superRefine(refinement) {
      return this._refinement(refinement);
    }
    constructor(def) {
      /** Alias of safeParseAsync */
      this.spa = this.safeParseAsync;
      this._def = def;
      this.parse = this.parse.bind(this);
      this.safeParse = this.safeParse.bind(this);
      this.parseAsync = this.parseAsync.bind(this);
      this.safeParseAsync = this.safeParseAsync.bind(this);
      this.spa = this.spa.bind(this);
      this.refine = this.refine.bind(this);
      this.refinement = this.refinement.bind(this);
      this.superRefine = this.superRefine.bind(this);
      this.optional = this.optional.bind(this);
      this.nullable = this.nullable.bind(this);
      this.nullish = this.nullish.bind(this);
      this.array = this.array.bind(this);
      this.promise = this.promise.bind(this);
      this.or = this.or.bind(this);
      this.and = this.and.bind(this);
      this.transform = this.transform.bind(this);
      this.brand = this.brand.bind(this);
      this.default = this.default.bind(this);
      this.catch = this.catch.bind(this);
      this.describe = this.describe.bind(this);
      this.pipe = this.pipe.bind(this);
      this.readonly = this.readonly.bind(this);
      this.isNullable = this.isNullable.bind(this);
      this.isOptional = this.isOptional.bind(this);
      this["~standard"] = {
        version: 1,
        vendor: "zod",
        validate: data => this["~validate"](data)
      };
    }
    optional() {
      return ZodOptional.create(this, this._def);
    }
    nullable() {
      return ZodNullable.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return ZodArray.create(this);
    }
    promise() {
      return ZodPromise.create(this, this._def);
    }
    or(option) {
      return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
      return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
      return new ZodEffects({
        ...processCreateParams(this._def),
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: {
          type: "transform",
          transform
        }
      });
    }
    default(def) {
      const defaultValueFunc = typeof def === "function" ? def : () => def;
      return new ZodDefault({
        ...processCreateParams(this._def),
        innerType: this,
        defaultValue: defaultValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodDefault
      });
    }
    brand() {
      return new ZodBranded({
        typeName: ZodFirstPartyTypeKind.ZodBranded,
        type: this,
        ...processCreateParams(this._def)
      });
    }
    catch(def) {
      const catchValueFunc = typeof def === "function" ? def : () => def;
      return new ZodCatch({
        ...processCreateParams(this._def),
        innerType: this,
        catchValue: catchValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodCatch
      });
    }
    describe(description) {
      const This = this.constructor;
      return new This({
        ...this._def,
        description
      });
    }
    pipe(target) {
      return ZodPipeline.create(this, target);
    }
    readonly() {
      return ZodReadonly.create(this);
    }
    isOptional() {
      return this.safeParse(undefined).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  }
  types$4.ZodType = ZodType;
  types$4.Schema = ZodType;
  types$4.ZodSchema = ZodType;
  const cuidRegex = /^c[^\s-]{8,}$/i;
  const cuid2Regex = /^[0-9a-z]+$/;
  const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
  // const uuidRegex =
  //   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
  const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  const nanoidRegex = /^[a-z0-9_-]{21}$/i;
  const jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
  const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
  // from https://stackoverflow.com/a/46181/1550155
  // old version: too slow, didn't support unicode
  // const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
  //old email regex
  // const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
  // eslint-disable-next-line
  // const emailRegex =
  //   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
  // const emailRegex =
  //   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  // const emailRegex =
  //   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
  const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  // const emailRegex =
  //   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
  // from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
  const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
  let emojiRegex;
  // faster, simpler, safer
  const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
  const ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
  // const ipv6Regex =
  // /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
  const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
  const ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
  // https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript
  const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
  // https://base64.guru/standards/base64url
  const base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
  // simple
  // const dateRegexSource = `\\d{4}-\\d{2}-\\d{2}`;
  // no leap year validation
  // const dateRegexSource = `\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d))`;
  // with leap year validation
  const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
  const dateRegex = new RegExp(`^${dateRegexSource}$`);
  function timeRegexSource(args) {
    // let regex = `\\d{2}:\\d{2}:\\d{2}`;
    let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
    if (args.precision) {
      regex = `${regex}\\.\\d{${args.precision}}`;
    } else if (args.precision == null) {
      regex = `${regex}(\\.\\d+)?`;
    }
    return regex;
  }
  function timeRegex(args) {
    return new RegExp(`^${timeRegexSource(args)}$`);
  }
  // Adapted from https://stackoverflow.com/a/3143231
  function datetimeRegex(args) {
    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
    const opts = [];
    opts.push(args.local ? `Z?` : `Z`);
    if (args.offset) opts.push(`([+-]\\d{2}:?\\d{2})`);
    regex = `${regex}(${opts.join("|")})`;
    return new RegExp(`^${regex}$`);
  }
  types$4.datetimeRegex = datetimeRegex;
  function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
      return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
      return true;
    }
    return false;
  }
  function isValidJWT(jwt, alg) {
    if (!jwtRegex.test(jwt)) return false;
    try {
      const [header] = jwt.split(".");
      // Convert base64url to base64
      const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
      const decoded = JSON.parse(atob(base64));
      if (typeof decoded !== "object" || decoded === null) return false;
      if (!decoded.typ || !decoded.alg) return false;
      if (alg && decoded.alg !== alg) return false;
      return true;
    } catch (_a) {
      return false;
    }
  }
  function isValidCidr(ip, version) {
    if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
      return true;
    }
    if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
      return true;
    }
    return false;
  }
  class ZodString extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = String(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.string) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.string,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      const status = new parseUtil_1.ParseStatus();
      let ctx = undefined;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.length < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.length > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "length") {
          const tooBig = input.data.length > check.value;
          const tooSmall = input.data.length < check.value;
          if (tooBig || tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            if (tooBig) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            } else if (tooSmall) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            }
            status.dirty();
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "email",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "emoji") {
          if (!emojiRegex) {
            emojiRegex = new RegExp(_emojiRegex, "u");
          }
          if (!emojiRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "emoji",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "uuid",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "nanoid") {
          if (!nanoidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "nanoid",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid") {
          if (!cuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "cuid",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid2") {
          if (!cuid2Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "cuid2",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ulid") {
          if (!ulidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "ulid",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "url") {
          try {
            new URL(input.data);
          } catch (_a) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "url",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "regex") {
          check.regex.lastIndex = 0;
          const testResult = check.regex.test(input.data);
          if (!testResult) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "regex",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "trim") {
          input.data = input.data.trim();
        } else if (check.kind === "includes") {
          if (!input.data.includes(check.value, check.position)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_string,
              validation: {
                includes: check.value,
                position: check.position
              },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "toLowerCase") {
          input.data = input.data.toLowerCase();
        } else if (check.kind === "toUpperCase") {
          input.data = input.data.toUpperCase();
        } else if (check.kind === "startsWith") {
          if (!input.data.startsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_string,
              validation: {
                startsWith: check.value
              },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "endsWith") {
          if (!input.data.endsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_string,
              validation: {
                endsWith: check.value
              },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "datetime") {
          const regex = datetimeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_string,
              validation: "datetime",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "date") {
          const regex = dateRegex;
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_string,
              validation: "date",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "time") {
          const regex = timeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_string,
              validation: "time",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "duration") {
          if (!durationRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "duration",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ip") {
          if (!isValidIP(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "ip",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "jwt") {
          if (!isValidJWT(input.data, check.alg)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "jwt",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cidr") {
          if (!isValidCidr(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "cidr",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "base64") {
          if (!base64Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "base64",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "base64url") {
          if (!base64urlRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              validation: "base64url",
              code: ZodError_1.ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util_1.util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: input.data
      };
    }
    _regex(regex, validation, message) {
      return this.refinement(data => regex.test(data), {
        validation,
        code: ZodError_1.ZodIssueCode.invalid_string,
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    _addCheck(check) {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    email(message) {
      return this._addCheck({
        kind: "email",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    url(message) {
      return this._addCheck({
        kind: "url",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    emoji(message) {
      return this._addCheck({
        kind: "emoji",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    uuid(message) {
      return this._addCheck({
        kind: "uuid",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    nanoid(message) {
      return this._addCheck({
        kind: "nanoid",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    cuid(message) {
      return this._addCheck({
        kind: "cuid",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    cuid2(message) {
      return this._addCheck({
        kind: "cuid2",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    ulid(message) {
      return this._addCheck({
        kind: "ulid",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    base64(message) {
      return this._addCheck({
        kind: "base64",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    base64url(message) {
      // base64url encoding is a modification of base64 that can safely be used in URLs and filenames
      return this._addCheck({
        kind: "base64url",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    jwt(options) {
      return this._addCheck({
        kind: "jwt",
        ...errorUtil_1.errorUtil.errToObj(options)
      });
    }
    ip(options) {
      return this._addCheck({
        kind: "ip",
        ...errorUtil_1.errorUtil.errToObj(options)
      });
    }
    cidr(options) {
      return this._addCheck({
        kind: "cidr",
        ...errorUtil_1.errorUtil.errToObj(options)
      });
    }
    datetime(options) {
      var _a, _b;
      if (typeof options === "string") {
        return this._addCheck({
          kind: "datetime",
          precision: null,
          offset: false,
          local: false,
          message: options
        });
      }
      return this._addCheck({
        kind: "datetime",
        precision: typeof (options === null || options === undefined ? undefined : options.precision) === "undefined" ? null : options === null || options === undefined ? undefined : options.precision,
        offset: (_a = options === null || options === undefined ? undefined : options.offset) !== null && _a !== undefined ? _a : false,
        local: (_b = options === null || options === undefined ? undefined : options.local) !== null && _b !== undefined ? _b : false,
        ...errorUtil_1.errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
      });
    }
    date(message) {
      return this._addCheck({
        kind: "date",
        message
      });
    }
    time(options) {
      if (typeof options === "string") {
        return this._addCheck({
          kind: "time",
          precision: null,
          message: options
        });
      }
      return this._addCheck({
        kind: "time",
        precision: typeof (options === null || options === undefined ? undefined : options.precision) === "undefined" ? null : options === null || options === undefined ? undefined : options.precision,
        ...errorUtil_1.errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
      });
    }
    duration(message) {
      return this._addCheck({
        kind: "duration",
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    regex(regex, message) {
      return this._addCheck({
        kind: "regex",
        regex: regex,
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    includes(value, options) {
      return this._addCheck({
        kind: "includes",
        value: value,
        position: options === null || options === undefined ? undefined : options.position,
        ...errorUtil_1.errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
      });
    }
    startsWith(value, message) {
      return this._addCheck({
        kind: "startsWith",
        value: value,
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    endsWith(value, message) {
      return this._addCheck({
        kind: "endsWith",
        value: value,
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    min(minLength, message) {
      return this._addCheck({
        kind: "min",
        value: minLength,
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    max(maxLength, message) {
      return this._addCheck({
        kind: "max",
        value: maxLength,
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    length(len, message) {
      return this._addCheck({
        kind: "length",
        value: len,
        ...errorUtil_1.errorUtil.errToObj(message)
      });
    }
    /**
     * Equivalent to `.min(1)`
     */
    nonempty(message) {
      return this.min(1, errorUtil_1.errorUtil.errToObj(message));
    }
    trim() {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, {
          kind: "trim"
        }]
      });
    }
    toLowerCase() {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, {
          kind: "toLowerCase"
        }]
      });
    }
    toUpperCase() {
      return new ZodString({
        ...this._def,
        checks: [...this._def.checks, {
          kind: "toUpperCase"
        }]
      });
    }
    get isDatetime() {
      return !!this._def.checks.find(ch => ch.kind === "datetime");
    }
    get isDate() {
      return !!this._def.checks.find(ch => ch.kind === "date");
    }
    get isTime() {
      return !!this._def.checks.find(ch => ch.kind === "time");
    }
    get isDuration() {
      return !!this._def.checks.find(ch => ch.kind === "duration");
    }
    get isEmail() {
      return !!this._def.checks.find(ch => ch.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find(ch => ch.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find(ch => ch.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find(ch => ch.kind === "uuid");
    }
    get isNANOID() {
      return !!this._def.checks.find(ch => ch.kind === "nanoid");
    }
    get isCUID() {
      return !!this._def.checks.find(ch => ch.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find(ch => ch.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find(ch => ch.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find(ch => ch.kind === "ip");
    }
    get isCIDR() {
      return !!this._def.checks.find(ch => ch.kind === "cidr");
    }
    get isBase64() {
      return !!this._def.checks.find(ch => ch.kind === "base64");
    }
    get isBase64url() {
      // base64url encoding is a modification of base64 that can safely be used in URLs and filenames
      return !!this._def.checks.find(ch => ch.kind === "base64url");
    }
    get minLength() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min) min = ch.value;
        }
      }
      return min;
    }
    get maxLength() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max) max = ch.value;
        }
      }
      return max;
    }
  }
  types$4.ZodString = ZodString;
  ZodString.create = params => {
    var _a;
    return new ZodString({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodString,
      coerce: (_a = params === null || params === undefined ? undefined : params.coerce) !== null && _a !== undefined ? _a : false,
      ...processCreateParams(params)
    });
  };
  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
  function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
  }
  class ZodNumber extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
      this.step = this.multipleOf;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = Number(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.number) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.number,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      let ctx = undefined;
      const status = new parseUtil_1.ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "int") {
          if (!util_1.util.isInteger(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (floatSafeRemainder(input.data, check.value) !== 0) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "finite") {
          if (!Number.isFinite(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.not_finite,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util_1.util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: input.data
      };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new ZodNumber({
        ...this._def,
        checks: [...this._def.checks, {
          kind,
          value,
          inclusive,
          message: errorUtil_1.errorUtil.toString(message)
        }]
      });
    }
    _addCheck(check) {
      return new ZodNumber({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    int(message) {
      return this._addCheck({
        kind: "int",
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: false,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: false,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: true,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: true,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value: value,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    finite(message) {
      return this._addCheck({
        kind: "finite",
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    safe(message) {
      return this._addCheck({
        kind: "min",
        inclusive: true,
        value: Number.MIN_SAFE_INTEGER,
        message: errorUtil_1.errorUtil.toString(message)
      })._addCheck({
        kind: "max",
        inclusive: true,
        value: Number.MAX_SAFE_INTEGER,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min) min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max) max = ch.value;
        }
      }
      return max;
    }
    get isInt() {
      return !!this._def.checks.find(ch => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
    }
    get isFinite() {
      let max = null,
        min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
          return true;
        } else if (ch.kind === "min") {
          if (min === null || ch.value > min) min = ch.value;
        } else if (ch.kind === "max") {
          if (max === null || ch.value < max) max = ch.value;
        }
      }
      return Number.isFinite(min) && Number.isFinite(max);
    }
  }
  types$4.ZodNumber = ZodNumber;
  ZodNumber.create = params => {
    return new ZodNumber({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodNumber,
      coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  class ZodBigInt extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
    }
    _parse(input) {
      if (this._def.coerce) {
        try {
          input.data = BigInt(input.data);
        } catch (_a) {
          return this._getInvalidInput(input);
        }
      }
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.bigint) {
        return this._getInvalidInput(input);
      }
      let ctx = undefined;
      const status = new parseUtil_1.ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              type: "bigint",
              minimum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              type: "bigint",
              maximum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (input.data % check.value !== BigInt(0)) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util_1.util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: input.data
      };
    }
    _getInvalidInput(input) {
      const ctx = this._getOrReturnCtx(input);
      (0, parseUtil_1.addIssueToContext)(ctx, {
        code: ZodError_1.ZodIssueCode.invalid_type,
        expected: util_1.ZodParsedType.bigint,
        received: ctx.parsedType
      });
      return parseUtil_1.INVALID;
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new ZodBigInt({
        ...this._def,
        checks: [...this._def.checks, {
          kind,
          value,
          inclusive,
          message: errorUtil_1.errorUtil.toString(message)
        }]
      });
    }
    _addCheck(check) {
      return new ZodBigInt({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min) min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max) max = ch.value;
        }
      }
      return max;
    }
  }
  types$4.ZodBigInt = ZodBigInt;
  ZodBigInt.create = params => {
    var _a;
    return new ZodBigInt({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodBigInt,
      coerce: (_a = params === null || params === undefined ? undefined : params.coerce) !== null && _a !== undefined ? _a : false,
      ...processCreateParams(params)
    });
  };
  class ZodBoolean extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = Boolean(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.boolean) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.boolean,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      return (0, parseUtil_1.OK)(input.data);
    }
  }
  types$4.ZodBoolean = ZodBoolean;
  ZodBoolean.create = params => {
    return new ZodBoolean({
      typeName: ZodFirstPartyTypeKind.ZodBoolean,
      coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  class ZodDate extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = new Date(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.date) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.date,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      if (isNaN(input.data.getTime())) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_date
        });
        return parseUtil_1.INVALID;
      }
      const status = new parseUtil_1.ParseStatus();
      let ctx = undefined;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.getTime() < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              message: check.message,
              inclusive: true,
              exact: false,
              minimum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.getTime() > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              message: check.message,
              inclusive: true,
              exact: false,
              maximum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else {
          util_1.util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: new Date(input.data.getTime())
      };
    }
    _addCheck(check) {
      return new ZodDate({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    min(minDate, message) {
      return this._addCheck({
        kind: "min",
        value: minDate.getTime(),
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    max(maxDate, message) {
      return this._addCheck({
        kind: "max",
        value: maxDate.getTime(),
        message: errorUtil_1.errorUtil.toString(message)
      });
    }
    get minDate() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min) min = ch.value;
        }
      }
      return min != null ? new Date(min) : null;
    }
    get maxDate() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max) max = ch.value;
        }
      }
      return max != null ? new Date(max) : null;
    }
  }
  types$4.ZodDate = ZodDate;
  ZodDate.create = params => {
    return new ZodDate({
      checks: [],
      coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
      typeName: ZodFirstPartyTypeKind.ZodDate,
      ...processCreateParams(params)
    });
  };
  class ZodSymbol extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.symbol) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.symbol,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      return (0, parseUtil_1.OK)(input.data);
    }
  }
  types$4.ZodSymbol = ZodSymbol;
  ZodSymbol.create = params => {
    return new ZodSymbol({
      typeName: ZodFirstPartyTypeKind.ZodSymbol,
      ...processCreateParams(params)
    });
  };
  class ZodUndefined extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.undefined,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      return (0, parseUtil_1.OK)(input.data);
    }
  }
  types$4.ZodUndefined = ZodUndefined;
  ZodUndefined.create = params => {
    return new ZodUndefined({
      typeName: ZodFirstPartyTypeKind.ZodUndefined,
      ...processCreateParams(params)
    });
  };
  class ZodNull extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.null) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.null,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      return (0, parseUtil_1.OK)(input.data);
    }
  }
  types$4.ZodNull = ZodNull;
  ZodNull.create = params => {
    return new ZodNull({
      typeName: ZodFirstPartyTypeKind.ZodNull,
      ...processCreateParams(params)
    });
  };
  class ZodAny extends ZodType {
    constructor() {
      super(...arguments);
      // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
      this._any = true;
    }
    _parse(input) {
      return (0, parseUtil_1.OK)(input.data);
    }
  }
  types$4.ZodAny = ZodAny;
  ZodAny.create = params => {
    return new ZodAny({
      typeName: ZodFirstPartyTypeKind.ZodAny,
      ...processCreateParams(params)
    });
  };
  class ZodUnknown extends ZodType {
    constructor() {
      super(...arguments);
      // required
      this._unknown = true;
    }
    _parse(input) {
      return (0, parseUtil_1.OK)(input.data);
    }
  }
  types$4.ZodUnknown = ZodUnknown;
  ZodUnknown.create = params => {
    return new ZodUnknown({
      typeName: ZodFirstPartyTypeKind.ZodUnknown,
      ...processCreateParams(params)
    });
  };
  class ZodNever extends ZodType {
    _parse(input) {
      const ctx = this._getOrReturnCtx(input);
      (0, parseUtil_1.addIssueToContext)(ctx, {
        code: ZodError_1.ZodIssueCode.invalid_type,
        expected: util_1.ZodParsedType.never,
        received: ctx.parsedType
      });
      return parseUtil_1.INVALID;
    }
  }
  types$4.ZodNever = ZodNever;
  ZodNever.create = params => {
    return new ZodNever({
      typeName: ZodFirstPartyTypeKind.ZodNever,
      ...processCreateParams(params)
    });
  };
  class ZodVoid extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.void,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      return (0, parseUtil_1.OK)(input.data);
    }
  }
  types$4.ZodVoid = ZodVoid;
  ZodVoid.create = params => {
    return new ZodVoid({
      typeName: ZodFirstPartyTypeKind.ZodVoid,
      ...processCreateParams(params)
    });
  };
  class ZodArray extends ZodType {
    _parse(input) {
      const {
        ctx,
        status
      } = this._processInputParams(input);
      const def = this._def;
      if (ctx.parsedType !== util_1.ZodParsedType.array) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.array,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      if (def.exactLength !== null) {
        const tooBig = ctx.data.length > def.exactLength.value;
        const tooSmall = ctx.data.length < def.exactLength.value;
        if (tooBig || tooSmall) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
            minimum: tooSmall ? def.exactLength.value : undefined,
            maximum: tooBig ? def.exactLength.value : undefined,
            type: "array",
            inclusive: true,
            exact: true,
            message: def.exactLength.message
          });
          status.dirty();
        }
      }
      if (def.minLength !== null) {
        if (ctx.data.length < def.minLength.value) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            minimum: def.minLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.minLength.message
          });
          status.dirty();
        }
      }
      if (def.maxLength !== null) {
        if (ctx.data.length > def.maxLength.value) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_big,
            maximum: def.maxLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.maxLength.message
          });
          status.dirty();
        }
      }
      if (ctx.common.async) {
        return Promise.all([...ctx.data].map((item, i) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        })).then(result => {
          return parseUtil_1.ParseStatus.mergeArray(status, result);
        });
      }
      const result = [...ctx.data].map((item, i) => {
        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      });
      return parseUtil_1.ParseStatus.mergeArray(status, result);
    }
    get element() {
      return this._def.type;
    }
    min(minLength, message) {
      return new ZodArray({
        ...this._def,
        minLength: {
          value: minLength,
          message: errorUtil_1.errorUtil.toString(message)
        }
      });
    }
    max(maxLength, message) {
      return new ZodArray({
        ...this._def,
        maxLength: {
          value: maxLength,
          message: errorUtil_1.errorUtil.toString(message)
        }
      });
    }
    length(len, message) {
      return new ZodArray({
        ...this._def,
        exactLength: {
          value: len,
          message: errorUtil_1.errorUtil.toString(message)
        }
      });
    }
    nonempty(message) {
      return this.min(1, message);
    }
  }
  types$4.ZodArray = ZodArray;
  ZodArray.create = (schema, params) => {
    return new ZodArray({
      type: schema,
      minLength: null,
      maxLength: null,
      exactLength: null,
      typeName: ZodFirstPartyTypeKind.ZodArray,
      ...processCreateParams(params)
    });
  };
  function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
      const newShape = {};
      for (const key in schema.shape) {
        const fieldSchema = schema.shape[key];
        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
      }
      return new ZodObject({
        ...schema._def,
        shape: () => newShape
      });
    } else if (schema instanceof ZodArray) {
      return new ZodArray({
        ...schema._def,
        type: deepPartialify(schema.element)
      });
    } else if (schema instanceof ZodOptional) {
      return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
      return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
      return ZodTuple.create(schema.items.map(item => deepPartialify(item)));
    } else {
      return schema;
    }
  }
  class ZodObject extends ZodType {
    constructor() {
      super(...arguments);
      this._cached = null;
      /**
       * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
       * If you want to pass through unknown properties, use `.passthrough()` instead.
       */
      this.nonstrict = this.passthrough;
      // extend<
      //   Augmentation extends ZodRawShape,
      //   NewOutput extends util.flatten<{
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   }>,
      //   NewInput extends util.flatten<{
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }>
      // >(
      //   augmentation: Augmentation
      // ): ZodObject<
      //   extendShape<T, Augmentation>,
      //   UnknownKeys,
      //   Catchall,
      //   NewOutput,
      //   NewInput
      // > {
      //   return new ZodObject({
      //     ...this._def,
      //     shape: () => ({
      //       ...this._def.shape(),
      //       ...augmentation,
      //     }),
      //   }) as any;
      // }
      /**
       * @deprecated Use `.extend` instead
       *  */
      this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null) return this._cached;
      const shape = this._def.shape();
      const keys = util_1.util.objectKeys(shape);
      return this._cached = {
        shape,
        keys
      };
    }
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.object) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.object,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      const {
        status,
        ctx
      } = this._processInputParams(input);
      const {
        shape,
        keys: shapeKeys
      } = this._getCached();
      const extraKeys = [];
      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
        for (const key in ctx.data) {
          if (!shapeKeys.includes(key)) {
            extraKeys.push(key);
          }
        }
      }
      const pairs = [];
      for (const key of shapeKeys) {
        const keyValidator = shape[key];
        const value = ctx.data[key];
        pairs.push({
          key: {
            status: "valid",
            value: key
          },
          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (this._def.catchall instanceof ZodNever) {
        const unknownKeys = this._def.unknownKeys;
        if (unknownKeys === "passthrough") {
          for (const key of extraKeys) {
            pairs.push({
              key: {
                status: "valid",
                value: key
              },
              value: {
                status: "valid",
                value: ctx.data[key]
              }
            });
          }
        } else if (unknownKeys === "strict") {
          if (extraKeys.length > 0) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            });
            status.dirty();
          }
        } else if (unknownKeys === "strip") ; else {
          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        }
      } else {
        // run catchall validation
        const catchall = this._def.catchall;
        for (const key of extraKeys) {
          const value = ctx.data[key];
          pairs.push({
            key: {
              status: "valid",
              value: key
            },
            value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
            ),
            alwaysSet: key in ctx.data
          });
        }
      }
      if (ctx.common.async) {
        return Promise.resolve().then(async () => {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
              key,
              value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then(syncPairs => {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
        });
      } else {
        return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get shape() {
      return this._def.shape();
    }
    strict(message) {
      errorUtil_1.errorUtil.errToObj;
      return new ZodObject({
        ...this._def,
        unknownKeys: "strict",
        ...(message !== undefined ? {
          errorMap: (issue, ctx) => {
            var _a, _b, _c, _d;
            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === undefined ? undefined : _b.call(_a, issue, ctx).message) !== null && _c !== undefined ? _c : ctx.defaultError;
            if (issue.code === "unrecognized_keys") return {
              message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== undefined ? _d : defaultError
            };
            return {
              message: defaultError
            };
          }
        } : {})
      });
    }
    strip() {
      return new ZodObject({
        ...this._def,
        unknownKeys: "strip"
      });
    }
    passthrough() {
      return new ZodObject({
        ...this._def,
        unknownKeys: "passthrough"
      });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
      return new ZodObject({
        ...this._def,
        shape: () => ({
          ...this._def.shape(),
          ...augmentation
        })
      });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
      const merged = new ZodObject({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: () => ({
          ...this._def.shape(),
          ...merging._def.shape()
        }),
        typeName: ZodFirstPartyTypeKind.ZodObject
      });
      return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
      return this.augment({
        [key]: schema
      });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
      return new ZodObject({
        ...this._def,
        catchall: index
      });
    }
    pick(mask) {
      const shape = {};
      util_1.util.objectKeys(mask).forEach(key => {
        if (mask[key] && this.shape[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    omit(mask) {
      const shape = {};
      util_1.util.objectKeys(this.shape).forEach(key => {
        if (!mask[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    /**
     * @deprecated
     */
    deepPartial() {
      return deepPartialify(this);
    }
    partial(mask) {
      const newShape = {};
      util_1.util.objectKeys(this.shape).forEach(key => {
        const fieldSchema = this.shape[key];
        if (mask && !mask[key]) {
          newShape[key] = fieldSchema;
        } else {
          newShape[key] = fieldSchema.optional();
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    required(mask) {
      const newShape = {};
      util_1.util.objectKeys(this.shape).forEach(key => {
        if (mask && !mask[key]) {
          newShape[key] = this.shape[key];
        } else {
          const fieldSchema = this.shape[key];
          let newField = fieldSchema;
          while (newField instanceof ZodOptional) {
            newField = newField._def.innerType;
          }
          newShape[key] = newField;
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    keyof() {
      return createZodEnum(util_1.util.objectKeys(this.shape));
    }
  }
  types$4.ZodObject = ZodObject;
  ZodObject.create = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strict",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  class ZodUnion extends ZodType {
    _parse(input) {
      const {
        ctx
      } = this._processInputParams(input);
      const options = this._def.options;
      function handleResults(results) {
        // return first issue-free validation if it exists
        for (const result of results) {
          if (result.result.status === "valid") {
            return result.result;
          }
        }
        for (const result of results) {
          if (result.result.status === "dirty") {
            // add issues from dirty option
            ctx.common.issues.push(...result.ctx.common.issues);
            return result.result;
          }
        }
        // return invalid
        const unionErrors = results.map(result => new ZodError_1.ZodError(result.ctx.common.issues));
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_union,
          unionErrors
        });
        return parseUtil_1.INVALID;
      }
      if (ctx.common.async) {
        return Promise.all(options.map(async option => {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            }),
            ctx: childCtx
          };
        })).then(handleResults);
      } else {
        let dirty = undefined;
        const issues = [];
        for (const option of options) {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          const result = option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          });
          if (result.status === "valid") {
            return result;
          } else if (result.status === "dirty" && !dirty) {
            dirty = {
              result,
              ctx: childCtx
            };
          }
          if (childCtx.common.issues.length) {
            issues.push(childCtx.common.issues);
          }
        }
        if (dirty) {
          ctx.common.issues.push(...dirty.ctx.common.issues);
          return dirty.result;
        }
        const unionErrors = issues.map(issues => new ZodError_1.ZodError(issues));
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_union,
          unionErrors
        });
        return parseUtil_1.INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  }
  types$4.ZodUnion = ZodUnion;
  ZodUnion.create = (types, params) => {
    return new ZodUnion({
      options: types,
      typeName: ZodFirstPartyTypeKind.ZodUnion,
      ...processCreateParams(params)
    });
  };
  /////////////////////////////////////////////////////
  /////////////////////////////////////////////////////
  //////////                                 //////////
  //////////      ZodDiscriminatedUnion      //////////
  //////////                                 //////////
  /////////////////////////////////////////////////////
  /////////////////////////////////////////////////////
  const getDiscriminator = type => {
    if (type instanceof ZodLazy) {
      return getDiscriminator(type.schema);
    } else if (type instanceof ZodEffects) {
      return getDiscriminator(type.innerType());
    } else if (type instanceof ZodLiteral) {
      return [type.value];
    } else if (type instanceof ZodEnum) {
      return type.options;
    } else if (type instanceof ZodNativeEnum) {
      // eslint-disable-next-line ban/ban
      return util_1.util.objectValues(type.enum);
    } else if (type instanceof ZodDefault) {
      return getDiscriminator(type._def.innerType);
    } else if (type instanceof ZodUndefined) {
      return [undefined];
    } else if (type instanceof ZodNull) {
      return [null];
    } else if (type instanceof ZodOptional) {
      return [undefined, ...getDiscriminator(type.unwrap())];
    } else if (type instanceof ZodNullable) {
      return [null, ...getDiscriminator(type.unwrap())];
    } else if (type instanceof ZodBranded) {
      return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodReadonly) {
      return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodCatch) {
      return getDiscriminator(type._def.innerType);
    } else {
      return [];
    }
  };
  class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
      const {
        ctx
      } = this._processInputParams(input);
      if (ctx.parsedType !== util_1.ZodParsedType.object) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.object,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      const discriminator = this.discriminator;
      const discriminatorValue = ctx.data[discriminator];
      const option = this.optionsMap.get(discriminatorValue);
      if (!option) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
          options: Array.from(this.optionsMap.keys()),
          path: [discriminator]
        });
        return parseUtil_1.INVALID;
      }
      if (ctx.common.async) {
        return option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      } else {
        return option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
      // Get all the valid discriminator values
      const optionsMap = new Map();
      // try {
      for (const type of options) {
        const discriminatorValues = getDiscriminator(type.shape[discriminator]);
        if (!discriminatorValues.length) {
          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
        }
        for (const value of discriminatorValues) {
          if (optionsMap.has(value)) {
            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
          }
          optionsMap.set(value, type);
        }
      }
      return new ZodDiscriminatedUnion({
        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
        discriminator,
        options,
        optionsMap,
        ...processCreateParams(params)
      });
    }
  }
  types$4.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
  function mergeValues(a, b) {
    const aType = (0, util_1.getParsedType)(a);
    const bType = (0, util_1.getParsedType)(b);
    if (a === b) {
      return {
        valid: true,
        data: a
      };
    } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
      const bKeys = util_1.util.objectKeys(b);
      const sharedKeys = util_1.util.objectKeys(a).filter(key => bKeys.indexOf(key) !== -1);
      const newObj = {
        ...a,
        ...b
      };
      for (const key of sharedKeys) {
        const sharedValue = mergeValues(a[key], b[key]);
        if (!sharedValue.valid) {
          return {
            valid: false
          };
        }
        newObj[key] = sharedValue.data;
      }
      return {
        valid: true,
        data: newObj
      };
    } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
      if (a.length !== b.length) {
        return {
          valid: false
        };
      }
      const newArray = [];
      for (let index = 0; index < a.length; index++) {
        const itemA = a[index];
        const itemB = b[index];
        const sharedValue = mergeValues(itemA, itemB);
        if (!sharedValue.valid) {
          return {
            valid: false
          };
        }
        newArray.push(sharedValue.data);
      }
      return {
        valid: true,
        data: newArray
      };
    } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a === +b) {
      return {
        valid: true,
        data: a
      };
    } else {
      return {
        valid: false
      };
    }
  }
  class ZodIntersection extends ZodType {
    _parse(input) {
      const {
        status,
        ctx
      } = this._processInputParams(input);
      const handleParsed = (parsedLeft, parsedRight) => {
        if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
          return parseUtil_1.INVALID;
        }
        const merged = mergeValues(parsedLeft.value, parsedRight.value);
        if (!merged.valid) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_intersection_types
          });
          return parseUtil_1.INVALID;
        }
        if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
          status.dirty();
        }
        return {
          status: status.value,
          value: merged.data
        };
      };
      if (ctx.common.async) {
        return Promise.all([this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })]).then(([left, right]) => handleParsed(left, right));
      } else {
        return handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    }
  }
  types$4.ZodIntersection = ZodIntersection;
  ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
      left: left,
      right: right,
      typeName: ZodFirstPartyTypeKind.ZodIntersection,
      ...processCreateParams(params)
    });
  };
  class ZodTuple extends ZodType {
    _parse(input) {
      const {
        status,
        ctx
      } = this._processInputParams(input);
      if (ctx.parsedType !== util_1.ZodParsedType.array) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.array,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      if (ctx.data.length < this._def.items.length) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        return parseUtil_1.INVALID;
      }
      const rest = this._def.rest;
      if (!rest && ctx.data.length > this._def.items.length) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        status.dirty();
      }
      const items = [...ctx.data].map((item, itemIndex) => {
        const schema = this._def.items[itemIndex] || this._def.rest;
        if (!schema) return null;
        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      }).filter(x => !!x); // filter nulls
      if (ctx.common.async) {
        return Promise.all(items).then(results => {
          return parseUtil_1.ParseStatus.mergeArray(status, results);
        });
      } else {
        return parseUtil_1.ParseStatus.mergeArray(status, items);
      }
    }
    get items() {
      return this._def.items;
    }
    rest(rest) {
      return new ZodTuple({
        ...this._def,
        rest
      });
    }
  }
  types$4.ZodTuple = ZodTuple;
  ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
      items: schemas,
      typeName: ZodFirstPartyTypeKind.ZodTuple,
      rest: null,
      ...processCreateParams(params)
    });
  };
  class ZodRecord extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const {
        status,
        ctx
      } = this._processInputParams(input);
      if (ctx.parsedType !== util_1.ZodParsedType.object) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.object,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      const pairs = [];
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      for (const key in ctx.data) {
        pairs.push({
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (ctx.common.async) {
        return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
      } else {
        return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get element() {
      return this._def.valueType;
    }
    static create(first, second, third) {
      if (second instanceof ZodType) {
        return new ZodRecord({
          keyType: first,
          valueType: second,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(third)
        });
      }
      return new ZodRecord({
        keyType: ZodString.create(),
        valueType: first,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(second)
      });
    }
  }
  types$4.ZodRecord = ZodRecord;
  class ZodMap extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const {
        status,
        ctx
      } = this._processInputParams(input);
      if (ctx.parsedType !== util_1.ZodParsedType.map) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.map,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      const pairs = [...ctx.data.entries()].map(([key, value], index) => {
        return {
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
        };
      });
      if (ctx.common.async) {
        const finalMap = new Map();
        return Promise.resolve().then(async () => {
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return parseUtil_1.INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return {
            status: status.value,
            value: finalMap
          };
        });
      } else {
        const finalMap = new Map();
        for (const pair of pairs) {
          const key = pair.key;
          const value = pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return parseUtil_1.INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return {
          status: status.value,
          value: finalMap
        };
      }
    }
  }
  types$4.ZodMap = ZodMap;
  ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind.ZodMap,
      ...processCreateParams(params)
    });
  };
  class ZodSet extends ZodType {
    _parse(input) {
      const {
        status,
        ctx
      } = this._processInputParams(input);
      if (ctx.parsedType !== util_1.ZodParsedType.set) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.set,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      const def = this._def;
      if (def.minSize !== null) {
        if (ctx.data.size < def.minSize.value) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            minimum: def.minSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.minSize.message
          });
          status.dirty();
        }
      }
      if (def.maxSize !== null) {
        if (ctx.data.size > def.maxSize.value) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_big,
            maximum: def.maxSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.maxSize.message
          });
          status.dirty();
        }
      }
      const valueType = this._def.valueType;
      function finalizeSet(elements) {
        const parsedSet = new Set();
        for (const element of elements) {
          if (element.status === "aborted") return parseUtil_1.INVALID;
          if (element.status === "dirty") status.dirty();
          parsedSet.add(element.value);
        }
        return {
          status: status.value,
          value: parsedSet
        };
      }
      const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
      if (ctx.common.async) {
        return Promise.all(elements).then(elements => finalizeSet(elements));
      } else {
        return finalizeSet(elements);
      }
    }
    min(minSize, message) {
      return new ZodSet({
        ...this._def,
        minSize: {
          value: minSize,
          message: errorUtil_1.errorUtil.toString(message)
        }
      });
    }
    max(maxSize, message) {
      return new ZodSet({
        ...this._def,
        maxSize: {
          value: maxSize,
          message: errorUtil_1.errorUtil.toString(message)
        }
      });
    }
    size(size, message) {
      return this.min(size, message).max(size, message);
    }
    nonempty(message) {
      return this.min(1, message);
    }
  }
  types$4.ZodSet = ZodSet;
  ZodSet.create = (valueType, params) => {
    return new ZodSet({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind.ZodSet,
      ...processCreateParams(params)
    });
  };
  class ZodFunction extends ZodType {
    constructor() {
      super(...arguments);
      this.validate = this.implement;
    }
    _parse(input) {
      const {
        ctx
      } = this._processInputParams(input);
      if (ctx.parsedType !== util_1.ZodParsedType.function) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.function,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      function makeArgsIssue(args, error) {
        return (0, parseUtil_1.makeIssue)({
          data: args,
          path: ctx.path,
          errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_1.getErrorMap)(), errors_1.defaultErrorMap].filter(x => !!x),
          issueData: {
            code: ZodError_1.ZodIssueCode.invalid_arguments,
            argumentsError: error
          }
        });
      }
      function makeReturnsIssue(returns, error) {
        return (0, parseUtil_1.makeIssue)({
          data: returns,
          path: ctx.path,
          errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0, errors_1.getErrorMap)(), errors_1.defaultErrorMap].filter(x => !!x),
          issueData: {
            code: ZodError_1.ZodIssueCode.invalid_return_type,
            returnTypeError: error
          }
        });
      }
      const params = {
        errorMap: ctx.common.contextualErrorMap
      };
      const fn = ctx.data;
      if (this._def.returns instanceof ZodPromise) {
        // Would love a way to avoid disabling this rule, but we need
        // an alias (using an arrow function was what caused 2651).
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const me = this;
        return (0, parseUtil_1.OK)(async function (...args) {
          const error = new ZodError_1.ZodError([]);
          const parsedArgs = await me._def.args.parseAsync(args, params).catch(e => {
            error.addIssue(makeArgsIssue(args, e));
            throw error;
          });
          const result = await Reflect.apply(fn, this, parsedArgs);
          const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch(e => {
            error.addIssue(makeReturnsIssue(result, e));
            throw error;
          });
          return parsedReturns;
        });
      } else {
        // Would love a way to avoid disabling this rule, but we need
        // an alias (using an arrow function was what caused 2651).
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const me = this;
        return (0, parseUtil_1.OK)(function (...args) {
          const parsedArgs = me._def.args.safeParse(args, params);
          if (!parsedArgs.success) {
            throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
          }
          const result = Reflect.apply(fn, this, parsedArgs.data);
          const parsedReturns = me._def.returns.safeParse(result, params);
          if (!parsedReturns.success) {
            throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
          }
          return parsedReturns.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...items) {
      return new ZodFunction({
        ...this._def,
        args: ZodTuple.create(items).rest(ZodUnknown.create())
      });
    }
    returns(returnType) {
      return new ZodFunction({
        ...this._def,
        returns: returnType
      });
    }
    implement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    strictImplement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    static create(args, returns, params) {
      return new ZodFunction({
        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params)
      });
    }
  }
  types$4.ZodFunction = ZodFunction;
  class ZodLazy extends ZodType {
    get schema() {
      return this._def.getter();
    }
    _parse(input) {
      const {
        ctx
      } = this._processInputParams(input);
      const lazySchema = this._def.getter();
      return lazySchema._parse({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  types$4.ZodLazy = ZodLazy;
  ZodLazy.create = (getter, params) => {
    return new ZodLazy({
      getter: getter,
      typeName: ZodFirstPartyTypeKind.ZodLazy,
      ...processCreateParams(params)
    });
  };
  class ZodLiteral extends ZodType {
    _parse(input) {
      if (input.data !== this._def.value) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          received: ctx.data,
          code: ZodError_1.ZodIssueCode.invalid_literal,
          expected: this._def.value
        });
        return parseUtil_1.INVALID;
      }
      return {
        status: "valid",
        value: input.data
      };
    }
    get value() {
      return this._def.value;
    }
  }
  types$4.ZodLiteral = ZodLiteral;
  ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
      value: value,
      typeName: ZodFirstPartyTypeKind.ZodLiteral,
      ...processCreateParams(params)
    });
  };
  function createZodEnum(values, params) {
    return new ZodEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodEnum,
      ...processCreateParams(params)
    });
  }
  class ZodEnum extends ZodType {
    constructor() {
      super(...arguments);
      _ZodEnum_cache.set(this, undefined);
    }
    _parse(input) {
      if (typeof input.data !== "string") {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        (0, parseUtil_1.addIssueToContext)(ctx, {
          expected: util_1.util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodError_1.ZodIssueCode.invalid_type
        });
        return parseUtil_1.INVALID;
      }
      if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
        __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
      }
      if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        (0, parseUtil_1.addIssueToContext)(ctx, {
          received: ctx.data,
          code: ZodError_1.ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return parseUtil_1.INVALID;
      }
      return (0, parseUtil_1.OK)(input.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Values() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    extract(values, newDef = this._def) {
      return ZodEnum.create(values, {
        ...this._def,
        ...newDef
      });
    }
    exclude(values, newDef = this._def) {
      return ZodEnum.create(this.options.filter(opt => !values.includes(opt)), {
        ...this._def,
        ...newDef
      });
    }
  }
  types$4.ZodEnum = ZodEnum;
  _ZodEnum_cache = new WeakMap();
  ZodEnum.create = createZodEnum;
  class ZodNativeEnum extends ZodType {
    constructor() {
      super(...arguments);
      _ZodNativeEnum_cache.set(this, undefined);
    }
    _parse(input) {
      const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
      const ctx = this._getOrReturnCtx(input);
      if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
        const expectedValues = util_1.util.objectValues(nativeEnumValues);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          expected: util_1.util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodError_1.ZodIssueCode.invalid_type
        });
        return parseUtil_1.INVALID;
      }
      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
        __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util_1.util.getValidEnumValues(this._def.values)), "f");
      }
      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
        const expectedValues = util_1.util.objectValues(nativeEnumValues);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          received: ctx.data,
          code: ZodError_1.ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return parseUtil_1.INVALID;
      }
      return (0, parseUtil_1.OK)(input.data);
    }
    get enum() {
      return this._def.values;
    }
  }
  types$4.ZodNativeEnum = ZodNativeEnum;
  _ZodNativeEnum_cache = new WeakMap();
  ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
      values: values,
      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
      ...processCreateParams(params)
    });
  };
  class ZodPromise extends ZodType {
    unwrap() {
      return this._def.type;
    }
    _parse(input) {
      const {
        ctx
      } = this._processInputParams(input);
      if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.promise,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
      return (0, parseUtil_1.OK)(promisified.then(data => {
        return this._def.type.parseAsync(data, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        });
      }));
    }
  }
  types$4.ZodPromise = ZodPromise;
  ZodPromise.create = (schema, params) => {
    return new ZodPromise({
      type: schema,
      typeName: ZodFirstPartyTypeKind.ZodPromise,
      ...processCreateParams(params)
    });
  };
  class ZodEffects extends ZodType {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
      const {
        status,
        ctx
      } = this._processInputParams(input);
      const effect = this._def.effect || null;
      const checkCtx = {
        addIssue: arg => {
          (0, parseUtil_1.addIssueToContext)(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        },
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      if (effect.type === "preprocess") {
        const processed = effect.transform(ctx.data, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(processed).then(async processed => {
            if (status.value === "aborted") return parseUtil_1.INVALID;
            const result = await this._def.schema._parseAsync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted") return parseUtil_1.INVALID;
            if (result.status === "dirty") return (0, parseUtil_1.DIRTY)(result.value);
            if (status.value === "dirty") return (0, parseUtil_1.DIRTY)(result.value);
            return result;
          });
        } else {
          if (status.value === "aborted") return parseUtil_1.INVALID;
          const result = this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted") return parseUtil_1.INVALID;
          if (result.status === "dirty") return (0, parseUtil_1.DIRTY)(result.value);
          if (status.value === "dirty") return (0, parseUtil_1.DIRTY)(result.value);
          return result;
        }
      }
      if (effect.type === "refinement") {
        const executeRefinement = acc => {
          const result = effect.refinement(acc, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(result);
          }
          if (result instanceof Promise) {
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          }
          return acc;
        };
        if (ctx.common.async === false) {
          const inner = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inner.status === "aborted") return parseUtil_1.INVALID;
          if (inner.status === "dirty") status.dirty();
          // return value is ignored
          executeRefinement(inner.value);
          return {
            status: status.value,
            value: inner.value
          };
        } else {
          return this._def.schema._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }).then(inner => {
            if (inner.status === "aborted") return parseUtil_1.INVALID;
            if (inner.status === "dirty") status.dirty();
            return executeRefinement(inner.value).then(() => {
              return {
                status: status.value,
                value: inner.value
              };
            });
          });
        }
      }
      if (effect.type === "transform") {
        if (ctx.common.async === false) {
          const base = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (!(0, parseUtil_1.isValid)(base)) return base;
          const result = effect.transform(base.value, checkCtx);
          if (result instanceof Promise) {
            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
          }
          return {
            status: status.value,
            value: result
          };
        } else {
          return this._def.schema._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }).then(base => {
            if (!(0, parseUtil_1.isValid)(base)) return base;
            return Promise.resolve(effect.transform(base.value, checkCtx)).then(result => ({
              status: status.value,
              value: result
            }));
          });
        }
      }
      util_1.util.assertNever(effect);
    }
  }
  types$4.ZodEffects = ZodEffects;
  types$4.ZodTransformer = ZodEffects;
  ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
      schema,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect,
      ...processCreateParams(params)
    });
  };
  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
      schema,
      effect: {
        type: "preprocess",
        transform: preprocess
      },
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      ...processCreateParams(params)
    });
  };
  class ZodOptional extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === util_1.ZodParsedType.undefined) {
        return (0, parseUtil_1.OK)(undefined);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  types$4.ZodOptional = ZodOptional;
  ZodOptional.create = (type, params) => {
    return new ZodOptional({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodOptional,
      ...processCreateParams(params)
    });
  };
  class ZodNullable extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === util_1.ZodParsedType.null) {
        return (0, parseUtil_1.OK)(null);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  types$4.ZodNullable = ZodNullable;
  ZodNullable.create = (type, params) => {
    return new ZodNullable({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodNullable,
      ...processCreateParams(params)
    });
  };
  class ZodDefault extends ZodType {
    _parse(input) {
      const {
        ctx
      } = this._processInputParams(input);
      let data = ctx.data;
      if (ctx.parsedType === util_1.ZodParsedType.undefined) {
        data = this._def.defaultValue();
      }
      return this._def.innerType._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  }
  types$4.ZodDefault = ZodDefault;
  ZodDefault.create = (type, params) => {
    return new ZodDefault({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
      defaultValue: typeof params.default === "function" ? params.default : () => params.default,
      ...processCreateParams(params)
    });
  };
  class ZodCatch extends ZodType {
    _parse(input) {
      const {
        ctx
      } = this._processInputParams(input);
      // newCtx is used to not collect issues from inner types in ctx
      const newCtx = {
        ...ctx,
        common: {
          ...ctx.common,
          issues: []
        }
      };
      const result = this._def.innerType._parse({
        data: newCtx.data,
        path: newCtx.path,
        parent: {
          ...newCtx
        }
      });
      if ((0, parseUtil_1.isAsync)(result)) {
        return result.then(result => {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError_1.ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        });
      } else {
        return {
          status: "valid",
          value: result.status === "valid" ? result.value : this._def.catchValue({
            get error() {
              return new ZodError_1.ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      }
    }
    removeCatch() {
      return this._def.innerType;
    }
  }
  types$4.ZodCatch = ZodCatch;
  ZodCatch.create = (type, params) => {
    return new ZodCatch({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodCatch,
      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
      ...processCreateParams(params)
    });
  };
  class ZodNaN extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== util_1.ZodParsedType.nan) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.nan,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      return {
        status: "valid",
        value: input.data
      };
    }
  }
  types$4.ZodNaN = ZodNaN;
  ZodNaN.create = params => {
    return new ZodNaN({
      typeName: ZodFirstPartyTypeKind.ZodNaN,
      ...processCreateParams(params)
    });
  };
  types$4.BRAND = Symbol("zod_brand");
  class ZodBranded extends ZodType {
    _parse(input) {
      const {
        ctx
      } = this._processInputParams(input);
      const data = ctx.data;
      return this._def.type._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    unwrap() {
      return this._def.type;
    }
  }
  types$4.ZodBranded = ZodBranded;
  class ZodPipeline extends ZodType {
    _parse(input) {
      const {
        status,
        ctx
      } = this._processInputParams(input);
      if (ctx.common.async) {
        const handleAsync = async () => {
          const inResult = await this._def.in._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted") return parseUtil_1.INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return (0, parseUtil_1.DIRTY)(inResult.value);
          } else {
            return this._def.out._parseAsync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        };
        return handleAsync();
      } else {
        const inResult = this._def.in._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted") return parseUtil_1.INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return {
            status: "dirty",
            value: inResult.value
          };
        } else {
          return this._def.out._parseSync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      }
    }
    static create(a, b) {
      return new ZodPipeline({
        in: a,
        out: b,
        typeName: ZodFirstPartyTypeKind.ZodPipeline
      });
    }
  }
  types$4.ZodPipeline = ZodPipeline;
  class ZodReadonly extends ZodType {
    _parse(input) {
      const result = this._def.innerType._parse(input);
      const freeze = data => {
        if ((0, parseUtil_1.isValid)(data)) {
          data.value = Object.freeze(data.value);
        }
        return data;
      };
      return (0, parseUtil_1.isAsync)(result) ? result.then(data => freeze(data)) : freeze(result);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  types$4.ZodReadonly = ZodReadonly;
  ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodReadonly,
      ...processCreateParams(params)
    });
  };
  function custom(check, params = {},
  /**
   * @deprecated
   *
   * Pass `fatal` into the params object instead:
   *
   * ```ts
   * z.string().custom((val) => val.length > 5, { fatal: false })
   * ```
   *
   */
  fatal) {
    if (check) return ZodAny.create().superRefine((data, ctx) => {
      var _a, _b;
      if (!check(data)) {
        const p = typeof params === "function" ? params(data) : typeof params === "string" ? {
          message: params
        } : params;
        const _fatal = (_b = (_a = p.fatal) !== null && _a !== undefined ? _a : fatal) !== null && _b !== undefined ? _b : true;
        const p2 = typeof p === "string" ? {
          message: p
        } : p;
        ctx.addIssue({
          code: "custom",
          ...p2,
          fatal: _fatal
        });
      }
    });
    return ZodAny.create();
  }
  types$4.custom = custom;
  types$4.late = {
    object: ZodObject.lazycreate
  };
  var ZodFirstPartyTypeKind;
  (function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (types$4.ZodFirstPartyTypeKind = ZodFirstPartyTypeKind = {}));
  const instanceOfType = (
  // const instanceOfType = <T extends new (...args: any[]) => any>(
  cls, params = {
    message: `Input not instance of ${cls.name}`
  }) => custom(data => data instanceof cls, params);
  types$4.instanceof = instanceOfType;
  const stringType = ZodString.create;
  types$4.string = stringType;
  const numberType = ZodNumber.create;
  types$4.number = numberType;
  const nanType = ZodNaN.create;
  types$4.nan = nanType;
  const bigIntType = ZodBigInt.create;
  types$4.bigint = bigIntType;
  const booleanType = ZodBoolean.create;
  types$4.boolean = booleanType;
  const dateType = ZodDate.create;
  types$4.date = dateType;
  const symbolType = ZodSymbol.create;
  types$4.symbol = symbolType;
  const undefinedType = ZodUndefined.create;
  types$4.undefined = undefinedType;
  const nullType = ZodNull.create;
  types$4.null = nullType;
  const anyType = ZodAny.create;
  types$4.any = anyType;
  const unknownType = ZodUnknown.create;
  types$4.unknown = unknownType;
  const neverType = ZodNever.create;
  types$4.never = neverType;
  const voidType = ZodVoid.create;
  types$4.void = voidType;
  const arrayType = ZodArray.create;
  types$4.array = arrayType;
  const objectType = ZodObject.create;
  types$4.object = objectType;
  const strictObjectType = ZodObject.strictCreate;
  types$4.strictObject = strictObjectType;
  const unionType = ZodUnion.create;
  types$4.union = unionType;
  const discriminatedUnionType = ZodDiscriminatedUnion.create;
  types$4.discriminatedUnion = discriminatedUnionType;
  const intersectionType = ZodIntersection.create;
  types$4.intersection = intersectionType;
  const tupleType = ZodTuple.create;
  types$4.tuple = tupleType;
  const recordType = ZodRecord.create;
  types$4.record = recordType;
  const mapType = ZodMap.create;
  types$4.map = mapType;
  const setType = ZodSet.create;
  types$4.set = setType;
  const functionType = ZodFunction.create;
  types$4.function = functionType;
  const lazyType = ZodLazy.create;
  types$4.lazy = lazyType;
  const literalType = ZodLiteral.create;
  types$4.literal = literalType;
  const enumType = ZodEnum.create;
  types$4.enum = enumType;
  const nativeEnumType = ZodNativeEnum.create;
  types$4.nativeEnum = nativeEnumType;
  const promiseType = ZodPromise.create;
  types$4.promise = promiseType;
  const effectsType = ZodEffects.create;
  types$4.effect = effectsType;
  types$4.transformer = effectsType;
  const optionalType = ZodOptional.create;
  types$4.optional = optionalType;
  const nullableType = ZodNullable.create;
  types$4.nullable = nullableType;
  const preprocessType = ZodEffects.createWithPreprocess;
  types$4.preprocess = preprocessType;
  const pipelineType = ZodPipeline.create;
  types$4.pipeline = pipelineType;
  const ostring = () => stringType().optional();
  types$4.ostring = ostring;
  const onumber = () => numberType().optional();
  types$4.onumber = onumber;
  const oboolean = () => booleanType().optional();
  types$4.oboolean = oboolean;
  types$4.coerce = {
    string: arg => ZodString.create({
      ...arg,
      coerce: true
    }),
    number: arg => ZodNumber.create({
      ...arg,
      coerce: true
    }),
    boolean: arg => ZodBoolean.create({
      ...arg,
      coerce: true
    }),
    bigint: arg => ZodBigInt.create({
      ...arg,
      coerce: true
    }),
    date: arg => ZodDate.create({
      ...arg,
      coerce: true
    })
  };
  types$4.NEVER = parseUtil_1.INVALID;
  return types$4;
}

var hasRequiredExternal$1;
function requireExternal$1() {
  if (hasRequiredExternal$1) return external$1;
  hasRequiredExternal$1 = 1;
  (function (exports) {

    var __createBinding = external$1.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = external$1.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    __exportStar(/*@__PURE__*/requireErrors(), exports);
    __exportStar(/*@__PURE__*/requireParseUtil(), exports);
    __exportStar(/*@__PURE__*/requireTypeAliases(), exports);
    __exportStar(/*@__PURE__*/requireUtil$7(), exports);
    __exportStar(/*@__PURE__*/requireTypes$5(), exports);
    __exportStar(/*@__PURE__*/requireZodError(), exports);
  })(external$1);
  return external$1;
}

var hasRequiredLib$1;
function requireLib$1() {
  if (hasRequiredLib$1) return lib$1;
  hasRequiredLib$1 = 1;
  (function (exports) {

    var __createBinding = lib$1.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = lib$1.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });
    var __importStar = lib$1.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = lib$1.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.z = undefined;
    const z = __importStar(/*@__PURE__*/requireExternal$1());
    exports.z = z;
    __exportStar(/*@__PURE__*/requireExternal$1(), exports);
    exports.default = z;
  })(lib$1);
  return lib$1;
}

var dist$3 = {};

var handle = {};

var hasRequiredHandle;
function requireHandle() {
  if (hasRequiredHandle) return handle;
  hasRequiredHandle = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DisallowedDomainError = exports.UnsupportedDomainError = exports.ReservedHandleError = exports.InvalidHandleError = exports.isValidTld = exports.isValidHandle = exports.normalizeAndEnsureValidHandle = exports.normalizeHandle = exports.ensureValidHandleRegex = exports.ensureValidHandle = exports.DISALLOWED_TLDS = exports.INVALID_HANDLE = undefined;
    exports.INVALID_HANDLE = 'handle.invalid';
    // Currently these are registration-time restrictions, not protocol-level
    // restrictions. We have a couple accounts in the wild that we need to clean up
    // before hard-disallow.
    // See also: https://en.wikipedia.org/wiki/Top-level_domain#Reserved_domains
    exports.DISALLOWED_TLDS = ['.local', '.arpa', '.invalid', '.localhost', '.internal', '.example', '.alt',
    // policy could concievably change on ".onion" some day
    '.onion'
    // NOTE: .test is allowed in testing and devopment. In practical terms
    // "should" "never" actually resolve and get registered in production
    ];
    // Handle constraints, in English:
    //  - must be a possible domain name
    //    - RFC-1035 is commonly referenced, but has been updated. eg, RFC-3696,
    //      section 2. and RFC-3986, section 3. can now have leading numbers (eg,
    //      4chan.org)
    //    - "labels" (sub-names) are made of ASCII letters, digits, hyphens
    //    - can not start or end with a hyphen
    //    - TLD (last component) should not start with a digit
    //    - can't end with a hyphen (can end with digit)
    //    - each segment must be between 1 and 63 characters (not including any periods)
    //    - overall length can't be more than 253 characters
    //    - separated by (ASCII) periods; does not start or end with period
    //    - case insensitive
    //    - domains (handles) are equal if they are the same lower-case
    //    - punycode allowed for internationalization
    //  - no whitespace, null bytes, joining chars, etc
    //  - does not validate whether domain or TLD exists, or is a reserved or
    //    special TLD (eg, .onion or .local)
    //  - does not validate punycode
    const ensureValidHandle = handle => {
      // check that all chars are boring ASCII
      if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {
        throw new InvalidHandleError('Disallowed characters in handle (ASCII letters, digits, dashes, periods only)');
      }
      if (handle.length > 253) {
        throw new InvalidHandleError('Handle is too long (253 chars max)');
      }
      const labels = handle.split('.');
      if (labels.length < 2) {
        throw new InvalidHandleError('Handle domain needs at least two parts');
      }
      for (let i = 0; i < labels.length; i++) {
        const l = labels[i];
        if (l.length < 1) {
          throw new InvalidHandleError('Handle parts can not be empty');
        }
        if (l.length > 63) {
          throw new InvalidHandleError('Handle part too long (max 63 chars)');
        }
        if (l.endsWith('-') || l.startsWith('-')) {
          throw new InvalidHandleError('Handle parts can not start or end with hyphens');
        }
        if (i + 1 === labels.length && !/^[a-zA-Z]/.test(l)) {
          throw new InvalidHandleError('Handle final component (TLD) must start with ASCII letter');
        }
      }
    };
    exports.ensureValidHandle = ensureValidHandle;
    // simple regex translation of above constraints
    const ensureValidHandleRegex = handle => {
      if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(handle)) {
        throw new InvalidHandleError("Handle didn't validate via regex");
      }
      if (handle.length > 253) {
        throw new InvalidHandleError('Handle is too long (253 chars max)');
      }
    };
    exports.ensureValidHandleRegex = ensureValidHandleRegex;
    const normalizeHandle = handle => {
      return handle.toLowerCase();
    };
    exports.normalizeHandle = normalizeHandle;
    const normalizeAndEnsureValidHandle = handle => {
      const normalized = (0, exports.normalizeHandle)(handle);
      (0, exports.ensureValidHandle)(normalized);
      return normalized;
    };
    exports.normalizeAndEnsureValidHandle = normalizeAndEnsureValidHandle;
    const isValidHandle = handle => {
      try {
        (0, exports.ensureValidHandle)(handle);
      } catch (err) {
        if (err instanceof InvalidHandleError) {
          return false;
        }
        throw err;
      }
      return true;
    };
    exports.isValidHandle = isValidHandle;
    const isValidTld = handle => {
      return !exports.DISALLOWED_TLDS.some(domain => handle.endsWith(domain));
    };
    exports.isValidTld = isValidTld;
    class InvalidHandleError extends Error {}
    exports.InvalidHandleError = InvalidHandleError;
    class ReservedHandleError extends Error {}
    exports.ReservedHandleError = ReservedHandleError;
    class UnsupportedDomainError extends Error {}
    exports.UnsupportedDomainError = UnsupportedDomainError;
    class DisallowedDomainError extends Error {}
    exports.DisallowedDomainError = DisallowedDomainError;
  })(handle);
  return handle;
}

var did = {};

var hasRequiredDid;
function requireDid() {
  if (hasRequiredDid) return did;
  hasRequiredDid = 1;
  Object.defineProperty(did, "__esModule", {
    value: true
  });
  did.InvalidDidError = did.ensureValidDidRegex = did.ensureValidDid = undefined;
  // Human-readable constraints:
  //   - valid W3C DID (https://www.w3.org/TR/did-core/#did-syntax)
  //      - entire URI is ASCII: [a-zA-Z0-9._:%-]
  //      - always starts "did:" (lower-case)
  //      - method name is one or more lower-case letters, followed by ":"
  //      - remaining identifier can have any of the above chars, but can not end in ":"
  //      - it seems that a bunch of ":" can be included, and don't need spaces between
  //      - "%" is used only for "percent encoding" and must be followed by two hex characters (and thus can't end in "%")
  //      - query ("?") and fragment ("#") stuff is defined for "DID URIs", but not as part of identifier itself
  //      - "The current specification does not take a position on the maximum length of a DID"
  //   - in current atproto, only allowing did:plc and did:web. But not *forcing* this at lexicon layer
  //   - hard length limit of 8KBytes
  //   - not going to validate "percent encoding" here
  const ensureValidDid = did => {
    if (!did.startsWith('did:')) {
      throw new InvalidDidError('DID requires "did:" prefix');
    }
    // check that all chars are boring ASCII
    if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {
      throw new InvalidDidError('Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)');
    }
    const {
      length,
      1: method
    } = did.split(':');
    if (length < 3) {
      throw new InvalidDidError('DID requires prefix, method, and method-specific content');
    }
    if (!/^[a-z]+$/.test(method)) {
      throw new InvalidDidError('DID method must be lower-case letters');
    }
    if (did.endsWith(':') || did.endsWith('%')) {
      throw new InvalidDidError('DID can not end with ":" or "%"');
    }
    if (did.length > 2 * 1024) {
      throw new InvalidDidError('DID is too long (2048 chars max)');
    }
  };
  did.ensureValidDid = ensureValidDid;
  const ensureValidDidRegex = did => {
    // simple regex to enforce most constraints via just regex and length.
    // hand wrote this regex based on above constraints
    if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {
      throw new InvalidDidError("DID didn't validate via regex");
    }
    if (did.length > 2 * 1024) {
      throw new InvalidDidError('DID is too long (2048 chars max)');
    }
  };
  did.ensureValidDidRegex = ensureValidDidRegex;
  class InvalidDidError extends Error {}
  did.InvalidDidError = InvalidDidError;
  return did;
}

var nsid = {};

var hasRequiredNsid;
function requireNsid() {
  if (hasRequiredNsid) return nsid;
  hasRequiredNsid = 1;
  (function (exports) {

    /*
    Grammar:
    	alpha     = "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z" / "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" / "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" / "Y" / "Z"
    number    = "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" / "0"
    delim     = "."
    segment   = alpha *( alpha / number / "-" )
    authority = segment *( delim segment )
    name      = alpha *( alpha )
    nsid      = authority delim name
    	*/
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.InvalidNsidError = exports.ensureValidNsidRegex = exports.ensureValidNsid = exports.NSID = undefined;
    class NSID {
      static parse(nsid) {
        return new NSID(nsid);
      }
      static create(authority, name) {
        const segments = [...authority.split('.').reverse(), name].join('.');
        return new NSID(segments);
      }
      static isValid(nsid) {
        try {
          NSID.parse(nsid);
          return true;
        } catch (e) {
          return false;
        }
      }
      constructor(nsid) {
        Object.defineProperty(this, "segments", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        (0, exports.ensureValidNsid)(nsid);
        this.segments = nsid.split('.');
      }
      get authority() {
        return this.segments.slice(0, this.segments.length - 1).reverse().join('.');
      }
      get name() {
        return this.segments.at(this.segments.length - 1);
      }
      toString() {
        return this.segments.join('.');
      }
    }
    exports.NSID = NSID;
    // Human readable constraints on NSID:
    // - a valid domain in reversed notation
    // - followed by an additional period-separated name, which is camel-case letters
    const ensureValidNsid = nsid => {
      const toCheck = nsid;
      // check that all chars are boring ASCII
      if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
        throw new InvalidNsidError('Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)');
      }
      if (toCheck.length > 253 + 1 + 63) {
        throw new InvalidNsidError('NSID is too long (317 chars max)');
      }
      const labels = toCheck.split('.');
      if (labels.length < 3) {
        throw new InvalidNsidError('NSID needs at least three parts');
      }
      for (let i = 0; i < labels.length; i++) {
        const l = labels[i];
        if (l.length < 1) {
          throw new InvalidNsidError('NSID parts can not be empty');
        }
        if (l.length > 63) {
          throw new InvalidNsidError('NSID part too long (max 63 chars)');
        }
        if (l.endsWith('-') || l.startsWith('-')) {
          throw new InvalidNsidError('NSID parts can not start or end with hyphen');
        }
        if (/^[0-9]/.test(l) && i === 0) {
          throw new InvalidNsidError('NSID first part may not start with a digit');
        }
        if (!/^[a-zA-Z]+$/.test(l) && i + 1 === labels.length) {
          throw new InvalidNsidError('NSID name part must be only letters');
        }
      }
    };
    exports.ensureValidNsid = ensureValidNsid;
    const ensureValidNsidRegex = nsid => {
      // simple regex to enforce most constraints via just regex and length.
      // hand wrote this regex based on above constraints
      if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(nsid)) {
        throw new InvalidNsidError("NSID didn't validate via regex");
      }
      if (nsid.length > 253 + 1 + 63) {
        throw new InvalidNsidError('NSID is too long (317 chars max)');
      }
    };
    exports.ensureValidNsidRegex = ensureValidNsidRegex;
    class InvalidNsidError extends Error {}
    exports.InvalidNsidError = InvalidNsidError;
  })(nsid);
  return nsid;
}

var aturi = {};

var aturi_validation = {};

var hasRequiredAturi_validation;
function requireAturi_validation() {
  if (hasRequiredAturi_validation) return aturi_validation;
  hasRequiredAturi_validation = 1;
  Object.defineProperty(aturi_validation, "__esModule", {
    value: true
  });
  aturi_validation.ensureValidAtUriRegex = aturi_validation.ensureValidAtUri = undefined;
  const handle_1 = requireHandle();
  const did_1 = requireDid();
  const nsid_1 = requireNsid();
  // Human-readable constraints on ATURI:
  //   - following regular URLs, a 8KByte hard total length limit
  //   - follows ATURI docs on website
  //      - all ASCII characters, no whitespace. non-ASCII could be URL-encoded
  //      - starts "at://"
  //      - "authority" is a valid DID or a valid handle
  //      - optionally, follow "authority" with "/" and valid NSID as start of path
  //      - optionally, if NSID given, follow that with "/" and rkey
  //      - rkey path component can include URL-encoded ("percent encoded"), or:
  //          ALPHA / DIGIT / "-" / "." / "_" / "~" / ":" / "@" / "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
  //          [a-zA-Z0-9._~:@!$&'\(\)*+,;=-]
  //      - rkey must have at least one char
  //      - regardless of path component, a fragment can follow  as "#" and then a JSON pointer (RFC-6901)
  const ensureValidAtUri = uri => {
    // JSON pointer is pretty different from rest of URI, so split that out first
    const uriParts = uri.split('#');
    if (uriParts.length > 2) {
      throw new Error('ATURI can have at most one "#", separating fragment out');
    }
    const fragmentPart = uriParts[1] || null;
    uri = uriParts[0];
    // check that all chars are boring ASCII
    if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {
      throw new Error('Disallowed characters in ATURI (ASCII)');
    }
    const parts = uri.split('/');
    if (parts.length >= 3 && (parts[0] !== 'at:' || parts[1].length !== 0)) {
      throw new Error('ATURI must start with "at://"');
    }
    if (parts.length < 3) {
      throw new Error('ATURI requires at least method and authority sections');
    }
    try {
      if (parts[2].startsWith('did:')) {
        (0, did_1.ensureValidDid)(parts[2]);
      } else {
        (0, handle_1.ensureValidHandle)(parts[2]);
      }
    } catch {
      throw new Error('ATURI authority must be a valid handle or DID');
    }
    if (parts.length >= 4) {
      if (parts[3].length === 0) {
        throw new Error('ATURI can not have a slash after authority without a path segment');
      }
      try {
        (0, nsid_1.ensureValidNsid)(parts[3]);
      } catch {
        throw new Error('ATURI requires first path segment (if supplied) to be valid NSID');
      }
    }
    if (parts.length >= 5) {
      if (parts[4].length === 0) {
        throw new Error('ATURI can not have a slash after collection, unless record key is provided');
      }
      // would validate rkey here, but there are basically no constraints!
    }
    if (parts.length >= 6) {
      throw new Error('ATURI path can have at most two parts, and no trailing slash');
    }
    if (uriParts.length >= 2 && fragmentPart == null) {
      throw new Error('ATURI fragment must be non-empty and start with slash');
    }
    if (fragmentPart != null) {
      if (fragmentPart.length === 0 || fragmentPart[0] !== '/') {
        throw new Error('ATURI fragment must be non-empty and start with slash');
      }
      // NOTE: enforcing *some* checks here for sanity. Eg, at least no whitespace
      if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
        throw new Error('Disallowed characters in ATURI fragment (ASCII)');
      }
    }
    if (uri.length > 8 * 1024) {
      throw new Error('ATURI is far too long');
    }
  };
  aturi_validation.ensureValidAtUri = ensureValidAtUri;
  const ensureValidAtUriRegex = uri => {
    // simple regex to enforce most constraints via just regex and length.
    // hand wrote this regex based on above constraints. whew!
    const aturiRegex = /^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/;
    const rm = uri.match(aturiRegex);
    if (!rm || !rm.groups) {
      throw new Error("ATURI didn't validate via regex");
    }
    const groups = rm.groups;
    try {
      (0, handle_1.ensureValidHandleRegex)(groups.authority);
    } catch {
      try {
        (0, did_1.ensureValidDidRegex)(groups.authority);
      } catch {
        throw new Error('ATURI authority must be a valid handle or DID');
      }
    }
    if (groups.collection) {
      try {
        (0, nsid_1.ensureValidNsidRegex)(groups.collection);
      } catch {
        throw new Error('ATURI collection path segment must be a valid NSID');
      }
    }
    if (uri.length > 8 * 1024) {
      throw new Error('ATURI is far too long');
    }
  };
  aturi_validation.ensureValidAtUriRegex = ensureValidAtUriRegex;
  return aturi_validation;
}

var hasRequiredAturi;
function requireAturi() {
  if (hasRequiredAturi) return aturi;
  hasRequiredAturi = 1;
  (function (exports) {

    var __createBinding = aturi.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = aturi.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AtUri = exports.ATP_URI_REGEX = undefined;
    __exportStar(requireAturi_validation(), exports);
    exports.ATP_URI_REGEX =
    // proto-    --did--------------   --name----------------   --path----   --query--   --hash--
    /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
    //                       --path-----   --query--  --hash--
    const RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
    class AtUri {
      constructor(uri, base) {
        Object.defineProperty(this, "hash", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        Object.defineProperty(this, "host", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        Object.defineProperty(this, "pathname", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        Object.defineProperty(this, "searchParams", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        let parsed;
        if (base) {
          parsed = parse(base);
          if (!parsed) {
            throw new Error(`Invalid at uri: ${base}`);
          }
          const relativep = parseRelative(uri);
          if (!relativep) {
            throw new Error(`Invalid path: ${uri}`);
          }
          Object.assign(parsed, relativep);
        } else {
          parsed = parse(uri);
          if (!parsed) {
            throw new Error(`Invalid at uri: ${uri}`);
          }
        }
        this.hash = parsed.hash;
        this.host = parsed.host;
        this.pathname = parsed.pathname;
        this.searchParams = parsed.searchParams;
      }
      static make(handleOrDid, collection, rkey) {
        let str = handleOrDid;
        if (collection) str += '/' + collection;
        if (rkey) str += '/' + rkey;
        return new AtUri(str);
      }
      get protocol() {
        return 'at:';
      }
      get origin() {
        return `at://${this.host}`;
      }
      get hostname() {
        return this.host;
      }
      set hostname(v) {
        this.host = v;
      }
      get search() {
        return this.searchParams.toString();
      }
      set search(v) {
        this.searchParams = new URLSearchParams(v);
      }
      get collection() {
        return this.pathname.split('/').filter(Boolean)[0] || '';
      }
      set collection(v) {
        const parts = this.pathname.split('/').filter(Boolean);
        parts[0] = v;
        this.pathname = parts.join('/');
      }
      get rkey() {
        return this.pathname.split('/').filter(Boolean)[1] || '';
      }
      set rkey(v) {
        const parts = this.pathname.split('/').filter(Boolean);
        if (!parts[0]) parts[0] = 'undefined';
        parts[1] = v;
        this.pathname = parts.join('/');
      }
      get href() {
        return this.toString();
      }
      toString() {
        let path = this.pathname || '/';
        if (!path.startsWith('/')) {
          path = `/${path}`;
        }
        let qs = this.searchParams.toString();
        if (qs && !qs.startsWith('?')) {
          qs = `?${qs}`;
        }
        let hash = this.hash;
        if (hash && !hash.startsWith('#')) {
          hash = `#${hash}`;
        }
        return `at://${this.host}${path}${qs}${hash}`;
      }
    }
    exports.AtUri = AtUri;
    function parse(str) {
      const match = exports.ATP_URI_REGEX.exec(str);
      if (match) {
        return {
          hash: match[5] || '',
          host: match[2] || '',
          pathname: match[3] || '',
          searchParams: new URLSearchParams(match[4] || '')
        };
      }
      return undefined;
    }
    function parseRelative(str) {
      const match = RELATIVE_REGEX.exec(str);
      if (match) {
        return {
          hash: match[3] || '',
          pathname: match[1] || '',
          searchParams: new URLSearchParams(match[2] || '')
        };
      }
      return undefined;
    }
  })(aturi);
  return aturi;
}

var tid$1 = {};

var hasRequiredTid$1;
function requireTid$1() {
  if (hasRequiredTid$1) return tid$1;
  hasRequiredTid$1 = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.InvalidTidError = exports.isValidTid = exports.ensureValidTid = undefined;
    const ensureValidTid = tid => {
      if (tid.length !== 13) {
        throw new InvalidTidError('TID must be 13 characters');
      }
      // simple regex to enforce most constraints via just regex and length.
      if (!/^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/.test(tid)) {
        throw new InvalidTidError('TID syntax not valid (regex)');
      }
    };
    exports.ensureValidTid = ensureValidTid;
    const isValidTid = tid => {
      try {
        (0, exports.ensureValidTid)(tid);
      } catch (err) {
        if (err instanceof InvalidTidError) {
          return false;
        }
        throw err;
      }
      return true;
    };
    exports.isValidTid = isValidTid;
    class InvalidTidError extends Error {}
    exports.InvalidTidError = InvalidTidError;
  })(tid$1);
  return tid$1;
}

var recordkey = {};

var hasRequiredRecordkey;
function requireRecordkey() {
  if (hasRequiredRecordkey) return recordkey;
  hasRequiredRecordkey = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.InvalidRecordKeyError = exports.isValidRecordKey = exports.ensureValidRecordKey = undefined;
    const ensureValidRecordKey = rkey => {
      if (rkey.length > 512 || rkey.length < 1) {
        throw new InvalidRecordKeyError('record key must be 1 to 512 characters');
      }
      // simple regex to enforce most constraints via just regex and length.
      if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(rkey)) {
        throw new InvalidRecordKeyError('record key syntax not valid (regex)');
      }
      if (rkey === '.' || rkey === '..') throw new InvalidRecordKeyError('record key can not be "." or ".."');
    };
    exports.ensureValidRecordKey = ensureValidRecordKey;
    const isValidRecordKey = rkey => {
      try {
        (0, exports.ensureValidRecordKey)(rkey);
      } catch (err) {
        if (err instanceof InvalidRecordKeyError) {
          return false;
        }
        throw err;
      }
      return true;
    };
    exports.isValidRecordKey = isValidRecordKey;
    class InvalidRecordKeyError extends Error {}
    exports.InvalidRecordKeyError = InvalidRecordKeyError;
  })(recordkey);
  return recordkey;
}

var datetime = {};

var hasRequiredDatetime;
function requireDatetime() {
  if (hasRequiredDatetime) return datetime;
  hasRequiredDatetime = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.InvalidDatetimeError = exports.normalizeDatetimeAlways = exports.normalizeDatetime = exports.isValidDatetime = exports.ensureValidDatetime = undefined;
    /* Validates datetime string against atproto Lexicon 'datetime' format.
     * Syntax is described at: https://atproto.com/specs/lexicon#datetime
     */
    const ensureValidDatetime = dtStr => {
      const date = new Date(dtStr);
      // must parse as ISO 8601; this also verifies semantics like month is not 13 or 00
      if (isNaN(date.getTime())) {
        throw new InvalidDatetimeError('datetime did not parse as ISO 8601');
      }
      if (date.toISOString().startsWith('-')) {
        throw new InvalidDatetimeError('datetime normalized to a negative time');
      }
      // regex and other checks for RFC-3339
      if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(dtStr)) {
        throw new InvalidDatetimeError("datetime didn't validate via regex");
      }
      if (dtStr.length > 64) {
        throw new InvalidDatetimeError('datetime is too long (64 chars max)');
      }
      if (dtStr.endsWith('-00:00')) {
        throw new InvalidDatetimeError('datetime can not use "-00:00" for UTC timezone');
      }
      if (dtStr.startsWith('000')) {
        throw new InvalidDatetimeError('datetime so close to year zero not allowed');
      }
    };
    exports.ensureValidDatetime = ensureValidDatetime;
    /* Same logic as ensureValidDatetime(), but returns a boolean instead of throwing an exception.
     */
    const isValidDatetime = dtStr => {
      try {
        (0, exports.ensureValidDatetime)(dtStr);
      } catch (err) {
        if (err instanceof InvalidDatetimeError) {
          return false;
        }
        throw err;
      }
      return true;
    };
    exports.isValidDatetime = isValidDatetime;
    /* Takes a flexible datetime string and normalizes representation.
     *
     * This function will work with any valid atproto datetime (eg, anything which isValidDatetime() is true for). It *additionally* is more flexible about accepting datetimes that don't comply to RFC 3339, or are missing timezone information, and normalizing them to a valid datetime.
     *
     * One use-case is a consistent, sortable string. Another is to work with older invalid createdAt datetimes.
     *
     * Successful output will be a valid atproto datetime with millisecond precision (3 sub-second digits) and UTC timezone with trailing 'Z' syntax. Throws `InvalidDatetimeError` if the input string could not be parsed as a datetime, even with permissive parsing.
     *
     * Expected output format: YYYY-MM-DDTHH:mm:ss.sssZ
     */
    const normalizeDatetime = dtStr => {
      if ((0, exports.isValidDatetime)(dtStr)) {
        const outStr = new Date(dtStr).toISOString();
        if ((0, exports.isValidDatetime)(outStr)) {
          return outStr;
        }
      }
      // check if this permissive datetime is missing a timezone
      if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(dtStr)) {
        const date = new Date(dtStr + 'Z');
        if (!isNaN(date.getTime())) {
          const tzStr = date.toISOString();
          if ((0, exports.isValidDatetime)(tzStr)) {
            return tzStr;
          }
        }
      }
      // finally try parsing as simple datetime
      const date = new Date(dtStr);
      if (isNaN(date.getTime())) {
        throw new InvalidDatetimeError('datetime did not parse as any timestamp format');
      }
      const isoStr = date.toISOString();
      if ((0, exports.isValidDatetime)(isoStr)) {
        return isoStr;
      } else {
        throw new InvalidDatetimeError('datetime normalized to invalid timestamp string');
      }
    };
    exports.normalizeDatetime = normalizeDatetime;
    /* Variant of normalizeDatetime() which always returns a valid datetime strings.
     *
     * If a InvalidDatetimeError is encountered, returns the UNIX epoch time as a UTC datetime (1970-01-01T00:00:00.000Z).
     */
    const normalizeDatetimeAlways = dtStr => {
      try {
        return (0, exports.normalizeDatetime)(dtStr);
      } catch (err) {
        if (err instanceof InvalidDatetimeError) {
          return new Date(0).toISOString();
        }
        throw err;
      }
    };
    exports.normalizeDatetimeAlways = normalizeDatetimeAlways;
    /* Indicates a datetime string did not pass full atproto Lexicon datetime string format checks.
     */
    class InvalidDatetimeError extends Error {}
    exports.InvalidDatetimeError = InvalidDatetimeError;
  })(datetime);
  return datetime;
}

var hasRequiredDist$5;
function requireDist$5() {
  if (hasRequiredDist$5) return dist$3;
  hasRequiredDist$5 = 1;
  (function (exports) {

    var __createBinding = dist$3.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = dist$3.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    __exportStar(requireHandle(), exports);
    __exportStar(requireDid(), exports);
    __exportStar(requireNsid(), exports);
    __exportStar(requireAturi(), exports);
    __exportStar(requireTid$1(), exports);
    __exportStar(requireRecordkey(), exports);
    __exportStar(requireDatetime(), exports);
  })(dist$3);
  return dist$3;
}

var util$6 = {};

var hasRequiredUtil$6;
function requireUtil$6() {
  if (hasRequiredUtil$6) return util$6;
  hasRequiredUtil$6 = 1;
  Object.defineProperty(util$6, "__esModule", {
    value: true
  });
  util$6.toLexUri = toLexUri;
  util$6.toConcreteTypes = toConcreteTypes;
  util$6.requiredPropertiesRefinement = requiredPropertiesRefinement;
  const zod_1 = /*@__PURE__*/requireLib$1();
  function toLexUri(str, baseUri) {
    if (str.split('#').length > 2) {
      throw new Error('Uri can only have one hash segment');
    }
    if (str.startsWith('lex:')) {
      return str;
    }
    if (str.startsWith('#')) {
      if (!baseUri) {
        throw new Error(`Unable to resolve uri without anchor: ${str}`);
      }
      return `${baseUri}${str}`;
    }
    return `lex:${str}`;
  }
  function toConcreteTypes(lexicons, def) {
    if (def.type === 'ref') {
      return [lexicons.getDefOrThrow(def.ref)];
    } else if (def.type === 'union') {
      return def.refs.map(ref => lexicons.getDefOrThrow(ref)).flat();
    } else {
      return [def];
    }
  }
  function requiredPropertiesRefinement(object, ctx) {
    // Required fields check
    if (object.required === undefined) {
      return;
    }
    if (!Array.isArray(object.required)) {
      ctx.addIssue({
        code: zod_1.z.ZodIssueCode.invalid_type,
        received: typeof object.required,
        expected: 'array'
      });
      return;
    }
    if (object.properties === undefined) {
      if (object.required.length > 0) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: `Required fields defined but no properties defined`
        });
      }
      return;
    }
    for (const field of object.required) {
      if (object.properties[field] === undefined) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: `Required field "${field}" not defined`
        });
      }
    }
  }
  return util$6;
}

var hasRequiredTypes$4;
function requireTypes$4() {
  if (hasRequiredTypes$4) return types$5;
  hasRequiredTypes$4 = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LexiconDefNotFoundError = exports.InvalidLexiconError = exports.ValidationError = exports.discriminatedObject = exports.lexiconDoc = exports.lexUserType = exports.lexRecord = exports.lexXrpcSubscription = exports.lexXrpcProcedure = exports.lexXrpcQuery = exports.lexXrpcError = exports.lexXrpcSubscriptionMessage = exports.lexXrpcBody = exports.lexXrpcParameters = exports.lexObject = exports.lexToken = exports.lexPrimitiveArray = exports.lexArray = exports.lexBlob = exports.lexRefVariant = exports.lexRefUnion = exports.lexRef = exports.lexIpldType = exports.lexCidLink = exports.lexBytes = exports.lexPrimitive = exports.lexUnknown = exports.lexString = exports.lexStringFormat = exports.lexInteger = exports.lexBoolean = undefined;
    exports.isValidLexiconDoc = isValidLexiconDoc;
    exports.isObj = isObj;
    exports.hasProp = hasProp;
    exports.isDiscriminatedObject = isDiscriminatedObject;
    exports.parseLexiconDoc = parseLexiconDoc;
    const zod_1 = /*@__PURE__*/requireLib$1();
    const syntax_1 = requireDist$5();
    const util_1 = requireUtil$6();
    // primitives
    // =
    exports.lexBoolean = zod_1.z.object({
      type: zod_1.z.literal('boolean'),
      description: zod_1.z.string().optional(),
      default: zod_1.z.boolean().optional(),
      const: zod_1.z.boolean().optional()
    }).strict();
    exports.lexInteger = zod_1.z.object({
      type: zod_1.z.literal('integer'),
      description: zod_1.z.string().optional(),
      default: zod_1.z.number().int().optional(),
      minimum: zod_1.z.number().int().optional(),
      maximum: zod_1.z.number().int().optional(),
      enum: zod_1.z.number().int().array().optional(),
      const: zod_1.z.number().int().optional()
    }).strict();
    exports.lexStringFormat = zod_1.z.enum(['datetime', 'uri', 'at-uri', 'did', 'handle', 'at-identifier', 'nsid', 'cid', 'language', 'tid', 'record-key']);
    exports.lexString = zod_1.z.object({
      type: zod_1.z.literal('string'),
      format: exports.lexStringFormat.optional(),
      description: zod_1.z.string().optional(),
      default: zod_1.z.string().optional(),
      minLength: zod_1.z.number().int().optional(),
      maxLength: zod_1.z.number().int().optional(),
      minGraphemes: zod_1.z.number().int().optional(),
      maxGraphemes: zod_1.z.number().int().optional(),
      enum: zod_1.z.string().array().optional(),
      const: zod_1.z.string().optional(),
      knownValues: zod_1.z.string().array().optional()
    }).strict();
    exports.lexUnknown = zod_1.z.object({
      type: zod_1.z.literal('unknown'),
      description: zod_1.z.string().optional()
    }).strict();
    exports.lexPrimitive = zod_1.z.discriminatedUnion('type', [exports.lexBoolean, exports.lexInteger, exports.lexString, exports.lexUnknown]);
    // ipld types
    // =
    exports.lexBytes = zod_1.z.object({
      type: zod_1.z.literal('bytes'),
      description: zod_1.z.string().optional(),
      maxLength: zod_1.z.number().optional(),
      minLength: zod_1.z.number().optional()
    }).strict();
    exports.lexCidLink = zod_1.z.object({
      type: zod_1.z.literal('cid-link'),
      description: zod_1.z.string().optional()
    }).strict();
    exports.lexIpldType = zod_1.z.discriminatedUnion('type', [exports.lexBytes, exports.lexCidLink]);
    // references
    // =
    exports.lexRef = zod_1.z.object({
      type: zod_1.z.literal('ref'),
      description: zod_1.z.string().optional(),
      ref: zod_1.z.string()
    }).strict();
    exports.lexRefUnion = zod_1.z.object({
      type: zod_1.z.literal('union'),
      description: zod_1.z.string().optional(),
      refs: zod_1.z.string().array(),
      closed: zod_1.z.boolean().optional()
    }).strict();
    exports.lexRefVariant = zod_1.z.discriminatedUnion('type', [exports.lexRef, exports.lexRefUnion]);
    // blobs
    // =
    exports.lexBlob = zod_1.z.object({
      type: zod_1.z.literal('blob'),
      description: zod_1.z.string().optional(),
      accept: zod_1.z.string().array().optional(),
      maxSize: zod_1.z.number().optional()
    }).strict();
    // complex types
    // =
    exports.lexArray = zod_1.z.object({
      type: zod_1.z.literal('array'),
      description: zod_1.z.string().optional(),
      items: zod_1.z.discriminatedUnion('type', [
      // lexPrimitive
      exports.lexBoolean, exports.lexInteger, exports.lexString, exports.lexUnknown,
      // lexIpldType
      exports.lexBytes, exports.lexCidLink,
      // lexRefVariant
      exports.lexRef, exports.lexRefUnion,
      // other
      exports.lexBlob]),
      minLength: zod_1.z.number().int().optional(),
      maxLength: zod_1.z.number().int().optional()
    }).strict();
    exports.lexPrimitiveArray = exports.lexArray.merge(zod_1.z.object({
      items: exports.lexPrimitive
    }).strict());
    exports.lexToken = zod_1.z.object({
      type: zod_1.z.literal('token'),
      description: zod_1.z.string().optional()
    }).strict();
    exports.lexObject = zod_1.z.object({
      type: zod_1.z.literal('object'),
      description: zod_1.z.string().optional(),
      required: zod_1.z.string().array().optional(),
      nullable: zod_1.z.string().array().optional(),
      properties: zod_1.z.record(zod_1.z.discriminatedUnion('type', [exports.lexArray,
      // lexPrimitive
      exports.lexBoolean, exports.lexInteger, exports.lexString, exports.lexUnknown,
      // lexIpldType
      exports.lexBytes, exports.lexCidLink,
      // lexRefVariant
      exports.lexRef, exports.lexRefUnion,
      // other
      exports.lexBlob]))
    }).strict().superRefine(util_1.requiredPropertiesRefinement);
    // xrpc
    // =
    exports.lexXrpcParameters = zod_1.z.object({
      type: zod_1.z.literal('params'),
      description: zod_1.z.string().optional(),
      required: zod_1.z.string().array().optional(),
      properties: zod_1.z.record(zod_1.z.discriminatedUnion('type', [exports.lexPrimitiveArray,
      // lexPrimitive
      exports.lexBoolean, exports.lexInteger, exports.lexString, exports.lexUnknown]))
    }).strict().superRefine(util_1.requiredPropertiesRefinement);
    exports.lexXrpcBody = zod_1.z.object({
      description: zod_1.z.string().optional(),
      encoding: zod_1.z.string(),
      // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
      schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
    }).strict();
    exports.lexXrpcSubscriptionMessage = zod_1.z.object({
      description: zod_1.z.string().optional(),
      // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
      schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
    }).strict();
    exports.lexXrpcError = zod_1.z.object({
      name: zod_1.z.string(),
      description: zod_1.z.string().optional()
    }).strict();
    exports.lexXrpcQuery = zod_1.z.object({
      type: zod_1.z.literal('query'),
      description: zod_1.z.string().optional(),
      parameters: exports.lexXrpcParameters.optional(),
      output: exports.lexXrpcBody.optional(),
      errors: exports.lexXrpcError.array().optional()
    }).strict();
    exports.lexXrpcProcedure = zod_1.z.object({
      type: zod_1.z.literal('procedure'),
      description: zod_1.z.string().optional(),
      parameters: exports.lexXrpcParameters.optional(),
      input: exports.lexXrpcBody.optional(),
      output: exports.lexXrpcBody.optional(),
      errors: exports.lexXrpcError.array().optional()
    }).strict();
    exports.lexXrpcSubscription = zod_1.z.object({
      type: zod_1.z.literal('subscription'),
      description: zod_1.z.string().optional(),
      parameters: exports.lexXrpcParameters.optional(),
      message: exports.lexXrpcSubscriptionMessage.optional(),
      errors: exports.lexXrpcError.array().optional()
    }).strict();
    // database
    // =
    exports.lexRecord = zod_1.z.object({
      type: zod_1.z.literal('record'),
      description: zod_1.z.string().optional(),
      key: zod_1.z.string().optional(),
      record: exports.lexObject
    }).strict();
    // core
    // =
    // We need to use `z.custom` here because
    // lexXrpcProperty and lexObject are refined
    // `z.union` would work, but it's too slow
    // see #915 for details
    exports.lexUserType = zod_1.z.custom(val => {
      if (!val || typeof val !== 'object') {
        return;
      }
      if (val['type'] === undefined) {
        return;
      }
      switch (val['type']) {
        case 'record':
          return exports.lexRecord.parse(val);
        case 'query':
          return exports.lexXrpcQuery.parse(val);
        case 'procedure':
          return exports.lexXrpcProcedure.parse(val);
        case 'subscription':
          return exports.lexXrpcSubscription.parse(val);
        case 'blob':
          return exports.lexBlob.parse(val);
        case 'array':
          return exports.lexArray.parse(val);
        case 'token':
          return exports.lexToken.parse(val);
        case 'object':
          return exports.lexObject.parse(val);
        case 'boolean':
          return exports.lexBoolean.parse(val);
        case 'integer':
          return exports.lexInteger.parse(val);
        case 'string':
          return exports.lexString.parse(val);
        case 'bytes':
          return exports.lexBytes.parse(val);
        case 'cid-link':
          return exports.lexCidLink.parse(val);
        case 'unknown':
          return exports.lexUnknown.parse(val);
      }
    }, val => {
      if (!val || typeof val !== 'object') {
        return {
          message: 'Must be an object',
          fatal: true
        };
      }
      if (val['type'] === undefined) {
        return {
          message: 'Must have a type',
          fatal: true
        };
      }
      if (typeof val['type'] !== 'string') {
        return {
          message: 'Type property must be a string',
          fatal: true
        };
      }
      return {
        message: `Invalid type: ${val['type']} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
        fatal: true
      };
    });
    exports.lexiconDoc = zod_1.z.object({
      lexicon: zod_1.z.literal(1),
      id: zod_1.z.string().refine(v => syntax_1.NSID.isValid(v), {
        message: 'Must be a valid NSID'
      }),
      revision: zod_1.z.number().optional(),
      description: zod_1.z.string().optional(),
      defs: zod_1.z.record(exports.lexUserType)
    }).strict().superRefine((doc, ctx) => {
      for (const defId in doc.defs) {
        const def = doc.defs[defId];
        if (defId !== 'main' && (def.type === 'record' || def.type === 'procedure' || def.type === 'query' || def.type === 'subscription')) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `Records, procedures, queries, and subscriptions must be the main definition.`
          });
        }
      }
    });
    // helpers
    // =
    function isValidLexiconDoc(v) {
      return exports.lexiconDoc.safeParse(v).success;
    }
    function isObj(obj) {
      return obj !== null && typeof obj === 'object';
    }
    function hasProp(data, prop) {
      return prop in data;
    }
    exports.discriminatedObject = zod_1.z.object({
      $type: zod_1.z.string()
    });
    function isDiscriminatedObject(value) {
      return exports.discriminatedObject.safeParse(value).success;
    }
    function parseLexiconDoc(v) {
      exports.lexiconDoc.parse(v);
      return v;
    }
    class ValidationError extends Error {}
    exports.ValidationError = ValidationError;
    class InvalidLexiconError extends Error {}
    exports.InvalidLexiconError = InvalidLexiconError;
    class LexiconDefNotFoundError extends Error {}
    exports.LexiconDefNotFoundError = LexiconDefNotFoundError;
  })(types$5);
  return types$5;
}

var lexicons$1 = {};

var validation = {};

var complex = {};

var blob = {};

var blobRefs = {};

var dist$2 = {};

var check = {};

var hasRequiredCheck;
function requireCheck() {
  if (hasRequiredCheck) return check;
  hasRequiredCheck = 1;
  // Explicitly not using "zod" types here to avoid mismatching types due to
  // version differences.
  Object.defineProperty(check, "__esModule", {
    value: true
  });
  check.isObject = check.assure = check.create = check.is = undefined;
  const is = (obj, def) => {
    return def.safeParse(obj).success;
  };
  check.is = is;
  const create = def => v => def.safeParse(v).success;
  check.create = create;
  const assure = (def, obj) => {
    return def.parse(obj);
  };
  check.assure = assure;
  const isObject = obj => {
    return typeof obj === 'object' && obj !== null;
  };
  check.isObject = isObject;
  return check;
}

var util$5 = {};

var hasRequiredUtil$5;
function requireUtil$5() {
  if (hasRequiredUtil$5) return util$5;
  hasRequiredUtil$5 = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseIntWithFallback = exports.dedupeStrs = exports.range = exports.chunkArray = exports.errHasMsg = exports.isErrnoException = exports.asyncFilter = exports.s32decode = exports.s32encode = exports.streamToBuffer = exports.flattenUint8Arrays = exports.bailableWait = exports.wait = exports.jitter = exports.noUndefinedVals = undefined;
    exports.omit = omit;
    const noUndefinedVals = obj => {
      Object.keys(obj).forEach(k => {
        if (obj[k] === undefined) {
          delete obj[k];
        }
      });
      return obj;
    };
    exports.noUndefinedVals = noUndefinedVals;
    function omit(src, rejectedKeys) {
      // Hot path
      if (!src) return src;
      const dst = {};
      const srcKeys = Object.keys(src);
      for (let i = 0; i < srcKeys.length; i++) {
        const key = srcKeys[i];
        if (!rejectedKeys.includes(key)) {
          dst[key] = src[key];
        }
      }
      return dst;
    }
    const jitter = maxMs => {
      return Math.round((Math.random() - 0.5) * maxMs * 2);
    };
    exports.jitter = jitter;
    const wait = ms => {
      return new Promise(res => setTimeout(res, ms));
    };
    exports.wait = wait;
    const bailableWait = ms => {
      let bail;
      const waitPromise = new Promise(res => {
        const timeout = setTimeout(res, ms);
        bail = () => {
          clearTimeout(timeout);
          res();
        };
      });
      return {
        bail,
        wait: () => waitPromise
      };
    };
    exports.bailableWait = bailableWait;
    const flattenUint8Arrays = arrs => {
      const length = arrs.reduce((acc, cur) => {
        return acc + cur.length;
      }, 0);
      const flattened = new Uint8Array(length);
      let offset = 0;
      arrs.forEach(arr => {
        flattened.set(arr, offset);
        offset += arr.length;
      });
      return flattened;
    };
    exports.flattenUint8Arrays = flattenUint8Arrays;
    const streamToBuffer = async stream => {
      const arrays = [];
      for await (const chunk of stream) {
        arrays.push(chunk);
      }
      return (0, exports.flattenUint8Arrays)(arrays);
    };
    exports.streamToBuffer = streamToBuffer;
    const S32_CHAR = '234567abcdefghijklmnopqrstuvwxyz';
    const s32encode = i => {
      let s = '';
      while (i) {
        const c = i % 32;
        i = Math.floor(i / 32);
        s = S32_CHAR.charAt(c) + s;
      }
      return s;
    };
    exports.s32encode = s32encode;
    const s32decode = s => {
      let i = 0;
      for (const c of s) {
        i = i * 32 + S32_CHAR.indexOf(c);
      }
      return i;
    };
    exports.s32decode = s32decode;
    const asyncFilter = async (arr, fn) => {
      const results = await Promise.all(arr.map(t => fn(t)));
      return arr.filter((_, i) => results[i]);
    };
    exports.asyncFilter = asyncFilter;
    const isErrnoException = err => {
      return !!err && err['code'];
    };
    exports.isErrnoException = isErrnoException;
    const errHasMsg = (err, msg) => {
      return !!err && typeof err === 'object' && err['message'] === msg;
    };
    exports.errHasMsg = errHasMsg;
    const chunkArray = (arr, chunkSize) => {
      return arr.reduce((acc, cur, i) => {
        const chunkI = Math.floor(i / chunkSize);
        if (!acc[chunkI]) {
          acc[chunkI] = [];
        }
        acc[chunkI].push(cur);
        return acc;
      }, []);
    };
    exports.chunkArray = chunkArray;
    const range = num => {
      const nums = [];
      for (let i = 0; i < num; i++) {
        nums.push(i);
      }
      return nums;
    };
    exports.range = range;
    const dedupeStrs = strs => {
      return [...new Set(strs)];
    };
    exports.dedupeStrs = dedupeStrs;
    const parseIntWithFallback = (value, fallback) => {
      const parsed = parseInt(value || '', 10);
      return isNaN(parsed) ? fallback : parsed;
    };
    exports.parseIntWithFallback = parseIntWithFallback;
  })(util$5);
  return util$5;
}

var arrays = {};

var hasRequiredArrays;
function requireArrays() {
  if (hasRequiredArrays) return arrays;
  hasRequiredArrays = 1;
  Object.defineProperty(arrays, "__esModule", {
    value: true
  });
  arrays.mapDefined = arrays.keyBy = undefined;
  const keyBy = (arr, key) => {
    return arr.reduce((acc, cur) => {
      acc[cur[key]] = cur;
      return acc;
    }, {});
  };
  arrays.keyBy = keyBy;
  const mapDefined = (arr, fn) => {
    const output = [];
    for (const item of arr) {
      const val = fn(item);
      if (val !== undefined) {
        output.push(val);
      }
    }
    return output;
  };
  arrays.mapDefined = mapDefined;
  return arrays;
}

var async = {};

var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async;
  hasRequiredAsync = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AsyncBufferFullError = exports.AsyncBuffer = exports.allComplete = exports.createDeferrables = exports.createDeferrable = exports.readFromGenerator = undefined;
    exports.allFulfilled = allFulfilled;
    exports.handleAllSettledErrors = handleAllSettledErrors;
    exports.isRejectedResult = isRejectedResult;
    exports.isFulfilledResult = isFulfilledResult;
    const util_1 = requireUtil$5();
    // reads values from a generator into a list
    // breaks when isDone signals `true` AND `waitFor` completes OR when a max length is reached
    // NOTE: does not signal generator to close. it *will* continue to produce values
    const readFromGenerator = async (gen, isDone, waitFor = Promise.resolve(), maxLength = Number.MAX_SAFE_INTEGER) => {
      const evts = [];
      let bail;
      let hasBroke = false;
      const awaitDone = async () => {
        if (await isDone(evts.at(-1))) {
          return true;
        }
        const bailable = (0, util_1.bailableWait)(20);
        await bailable.wait();
        bail = bailable.bail;
        if (hasBroke) return false;
        return await awaitDone();
      };
      const breakOn = new Promise(resolve => {
        waitFor.then(() => {
          awaitDone().then(() => resolve());
        });
      });
      try {
        while (evts.length < maxLength) {
          const maybeEvt = await Promise.race([gen.next(), breakOn]);
          if (!maybeEvt) break;
          const evt = maybeEvt;
          if (evt.done) break;
          evts.push(evt.value);
        }
      } finally {
        hasBroke = true;
        bail && bail();
      }
      return evts;
    };
    exports.readFromGenerator = readFromGenerator;
    const createDeferrable = () => {
      let resolve;
      const promise = new Promise(res => {
        resolve = () => res();
      });
      return {
        resolve,
        complete: promise
      };
    };
    exports.createDeferrable = createDeferrable;
    const createDeferrables = count => {
      const list = [];
      for (let i = 0; i < count; i++) {
        list.push((0, exports.createDeferrable)());
      }
      return list;
    };
    exports.createDeferrables = createDeferrables;
    const allComplete = async deferrables => {
      await Promise.all(deferrables.map(d => d.complete));
    };
    exports.allComplete = allComplete;
    class AsyncBuffer {
      constructor(maxSize) {
        Object.defineProperty(this, "maxSize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: maxSize
        });
        Object.defineProperty(this, "buffer", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        Object.defineProperty(this, "promise", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        Object.defineProperty(this, "resolve", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        Object.defineProperty(this, "closed", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: false
        });
        Object.defineProperty(this, "toThrow", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        // Initializing to satisfy types/build, immediately reset by resetPromise()
        this.promise = Promise.resolve();
        this.resolve = () => null;
        this.resetPromise();
      }
      get curr() {
        return this.buffer;
      }
      get size() {
        return this.buffer.length;
      }
      get isClosed() {
        return this.closed;
      }
      resetPromise() {
        this.promise = new Promise(r => this.resolve = r);
      }
      push(item) {
        this.buffer.push(item);
        this.resolve();
      }
      pushMany(items) {
        items.forEach(i => this.buffer.push(i));
        this.resolve();
      }
      async *events() {
        while (true) {
          if (this.closed && this.buffer.length === 0) {
            if (this.toThrow) {
              throw this.toThrow;
            } else {
              return;
            }
          }
          await this.promise;
          if (this.toThrow) {
            throw this.toThrow;
          }
          if (this.maxSize && this.size > this.maxSize) {
            throw new AsyncBufferFullError(this.maxSize);
          }
          const [first, ...rest] = this.buffer;
          if (first) {
            this.buffer = rest;
            yield first;
          } else {
            this.resetPromise();
          }
        }
      }
      throw(err) {
        this.toThrow = err;
        this.closed = true;
        this.resolve();
      }
      close() {
        this.closed = true;
        this.resolve();
      }
    }
    exports.AsyncBuffer = AsyncBuffer;
    class AsyncBufferFullError extends Error {
      constructor(maxSize) {
        super(`ReachedMaxBufferSize: ${maxSize}`);
      }
    }
    exports.AsyncBufferFullError = AsyncBufferFullError;
    function allFulfilled(promises) {
      return Promise.allSettled(promises).then(handleAllSettledErrors);
    }
    function handleAllSettledErrors(results) {
      const errors = results.filter(isRejectedResult).map(extractReason);
      if (errors.length === 0) {
        // No need to filter here, it is safe to assume that all promises are fulfilled
        return results.map(extractValue);
      }
      if (errors.length === 1) {
        throw errors[0];
      }
      throw new AggregateError(errors, `Multiple errors: ${errors.map(stringifyReason).join('\n')}`);
    }
    function isRejectedResult(result) {
      return result.status === 'rejected';
    }
    function extractReason(result) {
      return result.reason;
    }
    function isFulfilledResult(result) {
      return result.status === 'fulfilled';
    }
    function extractValue(result) {
      return result.value;
    }
    function stringifyReason(reason) {
      if (reason instanceof Error) {
        return reason.message;
      }
      return String(reason);
    }
  })(async);
  return async;
}

var tid = {};

var hasRequiredTid;
function requireTid() {
  if (hasRequiredTid) return tid;
  hasRequiredTid = 1;
  Object.defineProperty(tid, "__esModule", {
    value: true
  });
  tid.TID = undefined;
  const util_1 = requireUtil$5();
  const TID_LEN = 13;
  let lastTimestamp = 0;
  let timestampCount = 0;
  let clockid = null;
  function dedash(str) {
    return str.replaceAll('-', '');
  }
  class TID {
    constructor(str) {
      Object.defineProperty(this, "str", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      const noDashes = dedash(str);
      if (noDashes.length !== TID_LEN) {
        throw new Error(`Poorly formatted TID: ${noDashes.length} length`);
      }
      this.str = noDashes;
    }
    static next(prev) {
      // javascript does not have microsecond precision
      // instead, we append a counter to the timestamp to indicate if multiple timestamps were created within the same millisecond
      // take max of current time & last timestamp to prevent tids moving backwards if system clock drifts backwards
      const time = Math.max(Date.now(), lastTimestamp);
      if (time === lastTimestamp) {
        timestampCount++;
      }
      lastTimestamp = time;
      const timestamp = time * 1000 + timestampCount;
      // the bottom 32 clock ids can be randomized & are not guaranteed to be collision resistant
      // we use the same clockid for all tids coming from this machine
      if (clockid === null) {
        clockid = Math.floor(Math.random() * 32);
      }
      const tid = TID.fromTime(timestamp, clockid);
      if (!prev || tid.newerThan(prev)) {
        return tid;
      }
      return TID.fromTime(prev.timestamp() + 1, clockid);
    }
    static nextStr(prev) {
      return TID.next(prev ? new TID(prev) : undefined).toString();
    }
    static fromTime(timestamp, clockid) {
      // base32 encode with encoding variant sort (s32)
      const str = `${(0, util_1.s32encode)(timestamp)}${(0, util_1.s32encode)(clockid).padStart(2, '2')}`;
      return new TID(str);
    }
    static fromStr(str) {
      return new TID(str);
    }
    static oldestFirst(a, b) {
      return a.compareTo(b);
    }
    static newestFirst(a, b) {
      return b.compareTo(a);
    }
    static is(str) {
      return dedash(str).length === TID_LEN;
    }
    timestamp() {
      return (0, util_1.s32decode)(this.str.slice(0, 11));
    }
    clockid() {
      return (0, util_1.s32decode)(this.str.slice(11, 13));
    }
    formatted() {
      const str = this.toString();
      return `${str.slice(0, 4)}-${str.slice(4, 7)}-${str.slice(7, 11)}-${str.slice(11, 13)}`;
    }
    toString() {
      return this.str;
    }
    // newer > older
    compareTo(other) {
      if (this.str > other.str) return 1;
      if (this.str < other.str) return -1;
      return 0;
    }
    equals(other) {
      return this.str === other.str;
    }
    newerThan(other) {
      return this.compareTo(other) > 0;
    }
    olderThan(other) {
      return this.compareTo(other) < 0;
    }
  }
  tid.TID = TID;
  tid.default = TID;
  return tid;
}

var ipld = {};

var encode_1$3 = encode$6;
var MSB$3 = 128,
  MSBALL$2 = -128,
  INT$2 = Math.pow(2, 31);
function encode$6(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT$2) {
    out[offset++] = num & 255 | MSB$3;
    num /= 128;
  }
  while (num & MSBALL$2) {
    out[offset++] = num & 255 | MSB$3;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode$6.bytes = offset - oldOffset + 1;
  return out;
}
var decode$g = read$3;
var MSB$1$2 = 128,
  REST$1$2 = 127;
function read$3(buf, offset) {
  var res = 0,
    offset = offset || 0,
    shift = 0,
    counter = offset,
    b,
    l = buf.length;
  do {
    if (counter >= l) {
      read$3.bytes = 0;
      throw new RangeError('Could not decode varint');
    }
    b = buf[counter++];
    res += shift < 28 ? (b & REST$1$2) << shift : (b & REST$1$2) * Math.pow(2, shift);
    shift += 7;
  } while (b >= MSB$1$2);
  read$3.bytes = counter - offset;
  return res;
}
var N1$2 = Math.pow(2, 7);
var N2$2 = Math.pow(2, 14);
var N3$2 = Math.pow(2, 21);
var N4$2 = Math.pow(2, 28);
var N5$2 = Math.pow(2, 35);
var N6$2 = Math.pow(2, 42);
var N7$2 = Math.pow(2, 49);
var N8$2 = Math.pow(2, 56);
var N9$2 = Math.pow(2, 63);
var length$3 = function (value) {
  return value < N1$2 ? 1 : value < N2$2 ? 2 : value < N3$2 ? 3 : value < N4$2 ? 4 : value < N5$2 ? 5 : value < N6$2 ? 6 : value < N7$2 ? 7 : value < N8$2 ? 8 : value < N9$2 ? 9 : 10;
};
var varint$4 = {
  encode: encode_1$3,
  decode: decode$g,
  encodingLength: length$3
};
var _brrp_varint$2 = varint$4;

const decode$f = (data, offset = 0) => {
  const code = _brrp_varint$2.decode(data, offset);
  return [code, _brrp_varint$2.decode.bytes];
};
const encodeTo$2 = (int, target, offset = 0) => {
  _brrp_varint$2.encode(int, target, offset);
  return target;
};
const encodingLength$2 = int => {
  return _brrp_varint$2.encodingLength(int);
};

const equals$6 = (aa, bb) => {
  if (aa === bb) return true;
  if (aa.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii = 0; ii < aa.byteLength; ii++) {
    if (aa[ii] !== bb[ii]) {
      return false;
    }
  }
  return true;
};
const coerce$2 = o => {
  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;
  if (o instanceof ArrayBuffer) return new Uint8Array(o);
  if (ArrayBuffer.isView(o)) {
    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
  }
  throw new Error('Unknown type, must be binary type');
};
const fromString$2 = str => new TextEncoder().encode(str);
const toString$3 = b => new TextDecoder().decode(b);

const create$2 = (code, digest) => {
  const size = digest.byteLength;
  const sizeOffset = encodingLength$2(code);
  const digestOffset = sizeOffset + encodingLength$2(size);
  const bytes = new Uint8Array(digestOffset + size);
  encodeTo$2(code, bytes, 0);
  encodeTo$2(size, bytes, sizeOffset);
  bytes.set(digest, digestOffset);
  return new Digest$2(code, size, digest, bytes);
};
const decode$e = multihash => {
  const bytes = coerce$2(multihash);
  const [code, sizeOffset] = decode$f(bytes);
  const [size, digestOffset] = decode$f(bytes.subarray(sizeOffset));
  const digest = bytes.subarray(sizeOffset + digestOffset);
  if (digest.byteLength !== size) {
    throw new Error('Incorrect length');
  }
  return new Digest$2(code, size, digest, bytes);
};
const equals$5 = (a, b) => {
  if (a === b) {
    return true;
  } else {
    return a.code === b.code && a.size === b.size && equals$6(a.bytes, b.bytes);
  }
};
let Digest$2 = class Digest {
  constructor(code, size, digest, bytes) {
    this.code = code;
    this.size = size;
    this.digest = digest;
    this.bytes = bytes;
  }
};

function base$2(ALPHABET, name) {
  if (ALPHABET.length >= 255) {
    throw new TypeError('Alphabet too long');
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x + ' is ambiguous');
    }
    BASE_MAP[xc] = i;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode(source) {
    if (source instanceof Uint8Array) ;else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError('Expected Uint8Array');
    }
    if (source.length === 0) {
      return '';
    }
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i = 0;
      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }
      length = i;
      pbegin++;
    }
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) {
      str += ALPHABET.charAt(b58[it2]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== 'string') {
      throw new TypeError('Expected String');
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === ' ') {
      return;
    }
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i = 0;
      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }
      length = i;
      psz++;
    }
    if (source[psz] === ' ') {
      return;
    }
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size - it4));
    var j = zeroes;
    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }
    return vch;
  }
  function decode(string) {
    var buffer = decodeUnsafe(string);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name} character`);
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
}
var src$4 = base$2;
var _brrp__multiformats_scope_baseX$2 = src$4;

let Encoder$3 = class Encoder {
  constructor(name, prefix, baseEncode) {
    this.name = name;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error('Unknown type, must be binary type');
    }
  }
};
let Decoder$3 = class Decoder {
  constructor(name, prefix, baseDecode) {
    this.name = name;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === undefined) {
      throw new Error('Invalid prefix character');
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === 'string') {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error('Can only multibase decode strings');
    }
  }
  or(decoder) {
    return or$2(this, decoder);
  }
};
let ComposedDecoder$2 = class ComposedDecoder {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or$2(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
const or$2 = (left, right) => new ComposedDecoder$2({
  ...(left.decoders || {
    [left.prefix]: left
  }),
  ...(right.decoders || {
    [right.prefix]: right
  })
});
let Codec$2 = class Codec {
  constructor(name, prefix, baseEncode, baseDecode) {
    this.name = name;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder$3(name, prefix, baseEncode);
    this.decoder = new Decoder$3(name, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
const from$2 = ({
  name,
  prefix,
  encode,
  decode
}) => new Codec$2(name, prefix, encode, decode);
const baseX$2 = ({
  prefix,
  name,
  alphabet
}) => {
  const {
    encode,
    decode
  } = _brrp__multiformats_scope_baseX$2(alphabet, name);
  return from$2({
    prefix,
    name,
    encode,
    decode: text => coerce$2(decode(text))
  });
};
const decode$d = (string, alphabet, bitsPerChar, name) => {
  const codes = {};
  for (let i = 0; i < alphabet.length; ++i) {
    codes[alphabet[i]] = i;
  }
  let end = string.length;
  while (string[end - 1] === '=') {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer = 0;
  let written = 0;
  for (let i = 0; i < end; ++i) {
    const value = codes[string[i]];
    if (value === undefined) {
      throw new SyntaxError(`Non-${name} character`);
    }
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
    throw new SyntaxError('Unexpected end of data');
  }
  return out;
};
const encode$5 = (data, alphabet, bitsPerChar) => {
  const pad = alphabet[alphabet.length - 1] === '=';
  const mask = (1 << bitsPerChar) - 1;
  let out = '';
  let bits = 0;
  let buffer = 0;
  for (let i = 0; i < data.length; ++i) {
    buffer = buffer << 8 | data[i];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet[mask & buffer >> bits];
    }
  }
  if (bits) {
    out += alphabet[mask & buffer << bitsPerChar - bits];
  }
  if (pad) {
    while (out.length * bitsPerChar & 7) {
      out += '=';
    }
  }
  return out;
};
const rfc4648$2 = ({
  name,
  prefix,
  bitsPerChar,
  alphabet
}) => {
  return from$2({
    prefix,
    name,
    encode(input) {
      return encode$5(input, alphabet, bitsPerChar);
    },
    decode(input) {
      return decode$d(input, alphabet, bitsPerChar, name);
    }
  });
};

const base58btc$2 = baseX$2({
  name: 'base58btc',
  prefix: 'z',
  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
});
const base58flickr = baseX$2({
  name: 'base58flickr',
  prefix: 'Z',
  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
});

var base58 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base58btc: base58btc$2,
	base58flickr: base58flickr
});

const base32$2 = rfc4648$2({
  prefix: 'b',
  name: 'base32',
  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
  bitsPerChar: 5
});
const base32upper = rfc4648$2({
  prefix: 'B',
  name: 'base32upper',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
  bitsPerChar: 5
});
const base32pad = rfc4648$2({
  prefix: 'c',
  name: 'base32pad',
  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
  bitsPerChar: 5
});
const base32padupper = rfc4648$2({
  prefix: 'C',
  name: 'base32padupper',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
  bitsPerChar: 5
});
const base32hex = rfc4648$2({
  prefix: 'v',
  name: 'base32hex',
  alphabet: '0123456789abcdefghijklmnopqrstuv',
  bitsPerChar: 5
});
const base32hexupper = rfc4648$2({
  prefix: 'V',
  name: 'base32hexupper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
  bitsPerChar: 5
});
const base32hexpad = rfc4648$2({
  prefix: 't',
  name: 'base32hexpad',
  alphabet: '0123456789abcdefghijklmnopqrstuv=',
  bitsPerChar: 5
});
const base32hexpadupper = rfc4648$2({
  prefix: 'T',
  name: 'base32hexpadupper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
  bitsPerChar: 5
});
const base32z = rfc4648$2({
  prefix: 'h',
  name: 'base32z',
  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
  bitsPerChar: 5
});

var base32$3 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base32: base32$2,
	base32hex: base32hex,
	base32hexpad: base32hexpad,
	base32hexpadupper: base32hexpadupper,
	base32hexupper: base32hexupper,
	base32pad: base32pad,
	base32padupper: base32padupper,
	base32upper: base32upper,
	base32z: base32z
});

let CID$2 = class CID {
  constructor(version, code, multihash, bytes) {
    this.code = code;
    this.version = version;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0:
        {
          return this;
        }
      default:
        {
          const {
            code,
            multihash
          } = this;
          if (code !== DAG_PB_CODE$2) {
            throw new Error('Cannot convert a non dag-pb CID to CIDv0');
          }
          if (multihash.code !== SHA_256_CODE$2) {
            throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
          }
          return CID.createV0(multihash);
        }
    }
  }
  toV1() {
    switch (this.version) {
      case 0:
        {
          const {
            code,
            digest
          } = this.multihash;
          const multihash = create$2(code, digest);
          return CID.createV1(this.code, multihash);
        }
      case 1:
        {
          return this;
        }
      default:
        {
          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals$5(this.multihash, other.multihash);
  }
  toString(base) {
    const {
      bytes,
      version,
      _baseCache
    } = this;
    switch (version) {
      case 0:
        return toStringV0$2(bytes, _baseCache, base || base58btc$2.encoder);
      default:
        return toStringV1$2(bytes, _baseCache, base || base32$2.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return 'CID';
  }
  [Symbol.for('nodejs.util.inspect.custom')]() {
    return 'CID(' + this.toString() + ')';
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol$2] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error('Deprecated, use .toString()');
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const {
        version,
        code,
        multihash,
        bytes
      } = value;
      return new CID(version, code, multihash, bytes || encodeCID$2(version, code, multihash.bytes));
    } else if (value != null && value[cidSymbol$2] === true) {
      const {
        version,
        multihash,
        code
      } = value;
      const digest = decode$e(multihash);
      return CID.create(version, code, digest);
    } else {
      return null;
    }
  }
  static create(version, code, digest) {
    if (typeof code !== 'number') {
      throw new Error('String codecs are no longer supported');
    }
    switch (version) {
      case 0:
        {
          if (code !== DAG_PB_CODE$2) {
            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE$2}) block encoding`);
          } else {
            return new CID(version, code, digest, digest.bytes);
          }
        }
      case 1:
        {
          const bytes = encodeCID$2(version, code, digest.bytes);
          return new CID(version, code, digest, bytes);
        }
      default:
        {
          throw new Error('Invalid version');
        }
    }
  }
  static createV0(digest) {
    return CID.create(0, DAG_PB_CODE$2, digest);
  }
  static createV1(code, digest) {
    return CID.create(1, code, digest);
  }
  static decode(bytes) {
    const [cid, remainder] = CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error('Incorrect length');
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce$2(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error('Incorrect length');
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest = new Digest$2(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);
    return [cid, bytes.subarray(specs.size)];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i, length] = decode$f(initialBytes.subarray(offset));
      offset += length;
      return i;
    };
    let version = next();
    let codec = DAG_PB_CODE$2;
    if (version === 18) {
      version = 0;
      offset = 0;
    } else if (version === 1) {
      codec = next();
    }
    if (version !== 0 && version !== 1) {
      throw new RangeError(`Invalid CID version ${version}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size = offset + digestSize;
    const multihashSize = size - prefixSize;
    return {
      version,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size
    };
  }
  static parse(source, base) {
    const [prefix, bytes] = parseCIDtoBytes$2(source, base);
    const cid = CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
const parseCIDtoBytes$2 = (source, base) => {
  switch (source[0]) {
    case 'Q':
      {
        const decoder = base || base58btc$2;
        return [base58btc$2.prefix, decoder.decode(`${base58btc$2.prefix}${source}`)];
      }
    case base58btc$2.prefix:
      {
        const decoder = base || base58btc$2;
        return [base58btc$2.prefix, decoder.decode(source)];
      }
    case base32$2.prefix:
      {
        const decoder = base || base32$2;
        return [base32$2.prefix, decoder.decode(source)];
      }
    default:
      {
        if (base == null) {
          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');
        }
        return [source[0], base.decode(source)];
      }
  }
};
const toStringV0$2 = (bytes, cache, base) => {
  const {
    prefix
  } = base;
  if (prefix !== base58btc$2.prefix) {
    throw Error(`Cannot string encode V0 in ${base.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid = base.encode(bytes).slice(1);
    cache.set(prefix, cid);
    return cid;
  } else {
    return cid;
  }
};
const toStringV1$2 = (bytes, cache, base) => {
  const {
    prefix
  } = base;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid = base.encode(bytes);
    cache.set(prefix, cid);
    return cid;
  } else {
    return cid;
  }
};
const DAG_PB_CODE$2 = 112;
const SHA_256_CODE$2 = 18;
const encodeCID$2 = (version, code, multihash) => {
  const codeOffset = encodingLength$2(version);
  const hashOffset = codeOffset + encodingLength$2(code);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo$2(version, bytes, 0);
  encodeTo$2(code, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
const cidSymbol$2 = Symbol.for('@ipld/js-cid/CID');
const readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
const hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
const version$1 = '0.0.0-dev';
const deprecate = (range, message) => {
  if (range.test(version$1)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

var cid = /*#__PURE__*/Object.freeze({
	__proto__: null,
	CID: CID$2
});

var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(cid);

function compare$1(a, b) {
  for (let i = 0; i < a.byteLength; i++) {
    if (a[i] < b[i]) {
      return -1;
    }
    if (a[i] > b[i]) {
      return 1;
    }
  }
  if (a.byteLength > b.byteLength) {
    return 1;
  }
  if (a.byteLength < b.byteLength) {
    return -1;
  }
  return 0;
}

function concat(arrays, length) {
  if (!length) {
    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = new Uint8Array(length);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return output;
}

function equals$4(a, b) {
  if (a === b) {
    return true;
  }
  if (a.byteLength !== b.byteLength) {
    return false;
  }
  for (let i = 0; i < a.byteLength; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
}

const identity = from$2({
  prefix: '\0',
  name: 'identity',
  encode: buf => toString$3(buf),
  decode: str => fromString$2(str)
});

var identityBase = /*#__PURE__*/Object.freeze({
	__proto__: null,
	identity: identity
});

const base2 = rfc4648$2({
  prefix: '0',
  name: 'base2',
  alphabet: '01',
  bitsPerChar: 1
});

var base2$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base2: base2
});

const base8 = rfc4648$2({
  prefix: '7',
  name: 'base8',
  alphabet: '01234567',
  bitsPerChar: 3
});

var base8$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base8: base8
});

const base10 = baseX$2({
  prefix: '9',
  name: 'base10',
  alphabet: '0123456789'
});

var base10$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base10: base10
});

const base16 = rfc4648$2({
  prefix: 'f',
  name: 'base16',
  alphabet: '0123456789abcdef',
  bitsPerChar: 4
});
const base16upper = rfc4648$2({
  prefix: 'F',
  name: 'base16upper',
  alphabet: '0123456789ABCDEF',
  bitsPerChar: 4
});

var base16$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base16: base16,
	base16upper: base16upper
});

const base36$2 = baseX$2({
  prefix: 'k',
  name: 'base36',
  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
});
const base36upper = baseX$2({
  prefix: 'K',
  name: 'base36upper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
});

var base36$3 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base36: base36$2,
	base36upper: base36upper
});

const base64 = rfc4648$2({
  prefix: 'm',
  name: 'base64',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
  bitsPerChar: 6
});
const base64pad = rfc4648$2({
  prefix: 'M',
  name: 'base64pad',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
  bitsPerChar: 6
});
const base64url = rfc4648$2({
  prefix: 'u',
  name: 'base64url',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
  bitsPerChar: 6
});
const base64urlpad = rfc4648$2({
  prefix: 'U',
  name: 'base64urlpad',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
  bitsPerChar: 6
});

var base64$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base64: base64,
	base64pad: base64pad,
	base64url: base64url,
	base64urlpad: base64urlpad
});

const alphabet = Array.from('\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42');
const alphabetBytesToChars = alphabet.reduce((p, c, i) => {
  p[i] = c;
  return p;
}, []);
const alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
  p[c.codePointAt(0)] = i;
  return p;
}, []);
function encode$4(data) {
  return data.reduce((p, c) => {
    p += alphabetBytesToChars[c];
    return p;
  }, '');
}
function decode$c(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === undefined) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
const base256emoji = from$2({
  prefix: '\uD83D\uDE80',
  name: 'base256emoji',
  encode: encode$4,
  decode: decode$c
});

var base256emoji$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	base256emoji: base256emoji
});

new TextEncoder();
new TextDecoder();

const bases = {
  ...identityBase,
  ...base2$1,
  ...base8$1,
  ...base10$1,
  ...base16$1,
  ...base32$3,
  ...base36$3,
  ...base58,
  ...base64$1,
  ...base256emoji$1
};

function createCodec(name, prefix, encode, decode) {
  return {
    name,
    prefix,
    encoder: {
      name,
      prefix,
      encode
    },
    decoder: {
      decode
    }
  };
}
const string = createCodec('utf8', 'u', buf => {
  const decoder = new TextDecoder('utf8');
  return 'u' + decoder.decode(buf);
}, str => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
const ascii = createCodec('ascii', 'a', buf => {
  let string = 'a';
  for (let i = 0; i < buf.length; i++) {
    string += String.fromCharCode(buf[i]);
  }
  return string;
}, str => {
  str = str.substring(1);
  const buf = new Uint8Array(str.length);
  for (let i = 0; i < str.length; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
});
const BASES = {
  utf8: string,
  'utf-8': string,
  hex: bases.base16,
  latin1: ascii,
  ascii: ascii,
  binary: ascii,
  ...bases
};

function fromString$1(string, encoding = 'utf8') {
  const base = BASES[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  return base.decoder.decode(`${base.prefix}${string}`);
}

function toString$2(array, encoding = 'utf8') {
  const base = BASES[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  return base.encoder.encode(array).substring(1);
}

function xor(a, b) {
  if (a.length !== b.length) {
    throw new Error('Inputs should have the same length');
  }
  const result = new Uint8Array(a.length);
  for (let i = 0; i < a.length; i++) {
    result[i] = a[i] ^ b[i];
  }
  return result;
}

var src$3 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	compare: compare$1,
	concat: concat,
	equals: equals$4,
	fromString: fromString$1,
	toString: toString$2,
	xor: xor
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(src$3);

var hasRequiredIpld;
function requireIpld() {
  if (hasRequiredIpld) return ipld;
  hasRequiredIpld = 1;
  (function (exports) {

    var __createBinding = ipld.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = ipld.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });
    var __importStar = ipld.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ipldEquals = exports.ipldToJson = exports.jsonToIpld = undefined;
    const cid_1 = require$$1$1;
    const ui8 = __importStar(require$$1);
    // @NOTE avoiding use of check.is() here only because it makes
    // these implementations slow, and they often live in hot paths.
    const jsonToIpld = val => {
      // walk arrays
      if (Array.isArray(val)) {
        return val.map(item => (0, exports.jsonToIpld)(item));
      }
      // objects
      if (val && typeof val === 'object') {
        // check for dag json values
        if (typeof val['$link'] === 'string' && Object.keys(val).length === 1) {
          return cid_1.CID.parse(val['$link']);
        }
        if (typeof val['$bytes'] === 'string' && Object.keys(val).length === 1) {
          return ui8.fromString(val['$bytes'], 'base64');
        }
        // walk plain objects
        const toReturn = {};
        for (const key of Object.keys(val)) {
          toReturn[key] = (0, exports.jsonToIpld)(val[key]);
        }
        return toReturn;
      }
      // pass through
      return val;
    };
    exports.jsonToIpld = jsonToIpld;
    const ipldToJson = val => {
      // walk arrays
      if (Array.isArray(val)) {
        return val.map(item => (0, exports.ipldToJson)(item));
      }
      // objects
      if (val && typeof val === 'object') {
        // convert bytes
        if (val instanceof Uint8Array) {
          return {
            $bytes: ui8.toString(val, 'base64')
          };
        }
        // convert cids
        if (cid_1.CID.asCID(val)) {
          return {
            $link: val.toString()
          };
        }
        // walk plain objects
        const toReturn = {};
        for (const key of Object.keys(val)) {
          toReturn[key] = (0, exports.ipldToJson)(val[key]);
        }
        return toReturn;
      }
      // pass through
      return val;
    };
    exports.ipldToJson = ipldToJson;
    const ipldEquals = (a, b) => {
      // walk arrays
      if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) return false;
        for (let i = 0; i < a.length; i++) {
          if (!(0, exports.ipldEquals)(a[i], b[i])) return false;
        }
        return true;
      }
      // objects
      if (a && b && typeof a === 'object' && typeof b === 'object') {
        // check bytes
        if (a instanceof Uint8Array && b instanceof Uint8Array) {
          return ui8.equals(a, b);
        }
        // check cids
        if (cid_1.CID.asCID(a) && cid_1.CID.asCID(b)) {
          return cid_1.CID.asCID(a)?.equals(cid_1.CID.asCID(b));
        }
        // walk plain objects
        if (Object.keys(a).length !== Object.keys(b).length) return false;
        for (const key of Object.keys(a)) {
          if (!(0, exports.ipldEquals)(a[key], b[key])) return false;
        }
        return true;
      }
      return a === b;
    };
    exports.ipldEquals = ipldEquals;
  })(ipld);
  return ipld;
}

var retry = {};

var hasRequiredRetry;
function requireRetry() {
  if (hasRequiredRetry) return retry;
  hasRequiredRetry = 1;
  Object.defineProperty(retry, "__esModule", {
    value: true
  });
  retry.retry = retry$1;
  retry.createRetryable = createRetryable;
  retry.backoffMs = backoffMs;
  const util_1 = requireUtil$5();
  async function retry$1(fn, opts = {}) {
    const {
      maxRetries = 3,
      retryable = () => true,
      getWaitMs = backoffMs
    } = opts;
    let retries = 0;
    let doneError;
    while (!doneError) {
      try {
        return await fn();
      } catch (err) {
        const waitMs = getWaitMs(retries);
        const willRetry = retries < maxRetries && waitMs !== null && retryable(err);
        if (willRetry) {
          retries += 1;
          if (waitMs !== 0) {
            await (0, util_1.wait)(waitMs);
          }
        } else {
          doneError = err;
        }
      }
    }
    throw doneError;
  }
  function createRetryable(retryable) {
    return async (fn, opts) => retry$1(fn, {
      ...opts,
      retryable
    });
  }
  // Waits exponential backoff with max and jitter: ~100, ~200, ~400, ~800, ~1000, ~1000, ...
  function backoffMs(n, multiplier = 100, max = 1000) {
    const exponentialMs = Math.pow(2, n) * multiplier;
    const ms = Math.min(exponentialMs, max);
    return jitter(ms);
  }
  // Adds randomness +/-15% of value
  function jitter(value) {
    const delta = value * 0.15;
    return value + randomRange(-delta, delta);
  }
  function randomRange(from, to) {
    const rand = Math.random() * (to - from);
    return rand + from;
  }
  return retry;
}

var types$3 = {};

var hasRequiredTypes$3;
function requireTypes$3() {
  if (hasRequiredTypes$3) return types$3;
  hasRequiredTypes$3 = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.def = exports.schema = undefined;
    const cid_1 = require$$1$1;
    const zod_1 = /*@__PURE__*/requireLib$1();
    const cidSchema = zod_1.z.any().refine(obj => cid_1.CID.asCID(obj) !== null, {
      message: 'Not a CID'
    }).transform(obj => cid_1.CID.asCID(obj));
    exports.schema = {
      cid: cidSchema,
      bytes: zod_1.z.instanceof(Uint8Array),
      string: zod_1.z.string(),
      array: zod_1.z.array(zod_1.z.unknown()),
      map: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()),
      unknown: zod_1.z.unknown()
    };
    exports.def = {
      cid: {
        name: 'cid',
        schema: exports.schema.cid
      },
      bytes: {
        name: 'bytes',
        schema: exports.schema.bytes
      },
      string: {
        name: 'string',
        schema: exports.schema.string
      },
      map: {
        name: 'map',
        schema: exports.schema.map
      },
      unknown: {
        name: 'unknown',
        schema: exports.schema.unknown
      }
    };
  })(types$3);
  return types$3;
}

var times = {};

var hasRequiredTimes;
function requireTimes() {
  if (hasRequiredTimes) return times;
  hasRequiredTimes = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.addHoursToDate = exports.lessThanAgoMs = exports.DAY = exports.HOUR = exports.MINUTE = exports.SECOND = undefined;
    exports.SECOND = 1000;
    exports.MINUTE = exports.SECOND * 60;
    exports.HOUR = exports.MINUTE * 60;
    exports.DAY = exports.HOUR * 24;
    const lessThanAgoMs = (time, range) => {
      return Date.now() < time.getTime() + range;
    };
    exports.lessThanAgoMs = lessThanAgoMs;
    const addHoursToDate = (hours, startingDate) => {
      // When date is passed, clone before calling `setHours()` so that we are not mutating the original date
      const currentDate = startingDate ? new Date(startingDate) : new Date();
      currentDate.setHours(currentDate.getHours() + hours);
      return currentDate;
    };
    exports.addHoursToDate = addHoursToDate;
  })(times);
  return times;
}

var strings = {};

var lib = {};

var Graphemer = {};

var boundaries = {};

var hasRequiredBoundaries;
function requireBoundaries() {
  if (hasRequiredBoundaries) return boundaries;
  hasRequiredBoundaries = 1;
  (function (exports) {

    /**
     * The Grapheme_Cluster_Break property value
     * @see https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table
     */
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = undefined;
    (function (CLUSTER_BREAK) {
      CLUSTER_BREAK[CLUSTER_BREAK["CR"] = 0] = "CR";
      CLUSTER_BREAK[CLUSTER_BREAK["LF"] = 1] = "LF";
      CLUSTER_BREAK[CLUSTER_BREAK["CONTROL"] = 2] = "CONTROL";
      CLUSTER_BREAK[CLUSTER_BREAK["EXTEND"] = 3] = "EXTEND";
      CLUSTER_BREAK[CLUSTER_BREAK["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
      CLUSTER_BREAK[CLUSTER_BREAK["SPACINGMARK"] = 5] = "SPACINGMARK";
      CLUSTER_BREAK[CLUSTER_BREAK["L"] = 6] = "L";
      CLUSTER_BREAK[CLUSTER_BREAK["V"] = 7] = "V";
      CLUSTER_BREAK[CLUSTER_BREAK["T"] = 8] = "T";
      CLUSTER_BREAK[CLUSTER_BREAK["LV"] = 9] = "LV";
      CLUSTER_BREAK[CLUSTER_BREAK["LVT"] = 10] = "LVT";
      CLUSTER_BREAK[CLUSTER_BREAK["OTHER"] = 11] = "OTHER";
      CLUSTER_BREAK[CLUSTER_BREAK["PREPEND"] = 12] = "PREPEND";
      CLUSTER_BREAK[CLUSTER_BREAK["E_BASE"] = 13] = "E_BASE";
      CLUSTER_BREAK[CLUSTER_BREAK["E_MODIFIER"] = 14] = "E_MODIFIER";
      CLUSTER_BREAK[CLUSTER_BREAK["ZWJ"] = 15] = "ZWJ";
      CLUSTER_BREAK[CLUSTER_BREAK["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
      CLUSTER_BREAK[CLUSTER_BREAK["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
    })(exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
    /**
     * The Emoji character property is an extension of UCD but shares the same namespace and structure
     * @see http://www.unicode.org/reports/tr51/tr51-14.html#Emoji_Properties_and_Data_Files
     *
     * Here we model Extended_Pictograhpic only to implement UAX #29 GB11
     * \p{Extended_Pictographic} Extend* ZWJ	×	\p{Extended_Pictographic}
     *
     * The Emoji character property should not be mixed with Grapheme_Cluster_Break since they are not exclusive
     */
    exports.EXTENDED_PICTOGRAPHIC = 101;
  })(boundaries);
  return boundaries;
}

var GraphemerHelper = {};

var hasRequiredGraphemerHelper;
function requireGraphemerHelper() {
  if (hasRequiredGraphemerHelper) return GraphemerHelper;
  hasRequiredGraphemerHelper = 1;
  Object.defineProperty(GraphemerHelper, "__esModule", {
    value: true
  });
  const boundaries_1 = requireBoundaries();
  // BreakTypes
  // @type {BreakType}
  const NotBreak = 0;
  const BreakStart = 1;
  const Break = 2;
  const BreakLastRegional = 3;
  const BreakPenultimateRegional = 4;
  let GraphemerHelper$1 = class GraphemerHelper {
    /**
     * Check if the the character at the position {pos} of the string is surrogate
     * @param str {string}
     * @param pos {number}
     * @returns {boolean}
     */
    static isSurrogate(str, pos) {
      return 0xd800 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 0xdbff && 0xdc00 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 0xdfff;
    }
    /**
     * The String.prototype.codePointAt polyfill
     * Private function, gets a Unicode code point from a JavaScript UTF-16 string
     * handling surrogate pairs appropriately
     * @param str {string}
     * @param idx {number}
     * @returns {number}
     */
    static codePointAt(str, idx) {
      if (idx === undefined) {
        idx = 0;
      }
      const code = str.charCodeAt(idx);
      // if a high surrogate
      if (0xd800 <= code && code <= 0xdbff && idx < str.length - 1) {
        const hi = code;
        const low = str.charCodeAt(idx + 1);
        if (0xdc00 <= low && low <= 0xdfff) {
          return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
        }
        return hi;
      }
      // if a low surrogate
      if (0xdc00 <= code && code <= 0xdfff && idx >= 1) {
        const hi = str.charCodeAt(idx - 1);
        const low = code;
        if (0xd800 <= hi && hi <= 0xdbff) {
          return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
        }
        return low;
      }
      // just return the char if an unmatched surrogate half or a
      // single-char codepoint
      return code;
    }
    //
    /**
     * Private function, returns whether a break is allowed between the two given grapheme breaking classes
     * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
     * @param start {number}
     * @param mid {Array<number>}
     * @param end {number}
     * @param startEmoji {number}
     * @param midEmoji {Array<number>}
     * @param endEmoji {number}
     * @returns {number}
     */
    static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
      const all = [start].concat(mid).concat([end]);
      const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);
      const previous = all[all.length - 2];
      const next = end;
      const nextEmoji = endEmoji;
      // Lookahead terminator for:
      // GB12. ^ (RI RI)* RI ? RI
      // GB13. [^RI] (RI RI)* RI ? RI
      const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
      if (rIIndex > 0 && all.slice(1, rIIndex).every(function (c) {
        return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
      }) && [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {
        if (all.filter(function (c) {
          return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
        }).length % 2 === 1) {
          return BreakLastRegional;
        } else {
          return BreakPenultimateRegional;
        }
      }
      // GB3. CR × LF
      if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {
        return NotBreak;
      }
      // GB4. (Control|CR|LF) ÷
      else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) {
        return BreakStart;
      }
      // GB5. ÷ (Control|CR|LF)
      else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) {
        return BreakStart;
      }
      // GB6. L × (L|V|LV|LVT)
      else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) {
        return NotBreak;
      }
      // GB7. (LV|V) × (V|T)
      else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {
        return NotBreak;
      }
      // GB8. (LVT|T) × (T)
      else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) {
        return NotBreak;
      }
      // GB9. × (Extend|ZWJ)
      else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {
        return NotBreak;
      }
      // GB9a. × SpacingMark
      else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {
        return NotBreak;
      }
      // GB9b. Prepend ×
      else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {
        return NotBreak;
      }
      // GB11. \p{Extended_Pictographic} Extend* ZWJ × \p{Extended_Pictographic}
      const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
      if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function (c) {
        return c === boundaries_1.CLUSTER_BREAK.EXTEND;
      }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {
        return NotBreak;
      }
      // GB12. ^ (RI RI)* RI × RI
      // GB13. [^RI] (RI RI)* RI × RI
      if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {
        return Break;
      }
      if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {
        return NotBreak;
      }
      // GB999. Any ? Any
      return BreakStart;
    }
  };
  GraphemerHelper.default = GraphemerHelper$1;
  return GraphemerHelper;
}

var GraphemerIterator = {};

var hasRequiredGraphemerIterator;
function requireGraphemerIterator() {
  if (hasRequiredGraphemerIterator) return GraphemerIterator;
  hasRequiredGraphemerIterator = 1;
  Object.defineProperty(GraphemerIterator, "__esModule", {
    value: true
  });
  /**
   * GraphemerIterator
   *
   * Takes a string and a "BreakHandler" method during initialisation
   * and creates an iterable object that returns individual graphemes.
   *
   * @param str {string}
   * @return GraphemerIterator
   */
  let GraphemerIterator$1 = class GraphemerIterator {
    constructor(str, nextBreak) {
      this._index = 0;
      this._str = str;
      this._nextBreak = nextBreak;
    }
    [Symbol.iterator]() {
      return this;
    }
    next() {
      let brk;
      if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
        const value = this._str.slice(this._index, brk);
        this._index = brk;
        return {
          value: value,
          done: false
        };
      }
      if (this._index < this._str.length) {
        const value = this._str.slice(this._index);
        this._index = this._str.length;
        return {
          value: value,
          done: false
        };
      }
      return {
        value: undefined,
        done: true
      };
    }
  };
  GraphemerIterator.default = GraphemerIterator$1;
  return GraphemerIterator;
}

var hasRequiredGraphemer;function requireGraphemer(){if(hasRequiredGraphemer)return Graphemer;hasRequiredGraphemer=1;var __importDefault=Graphemer.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod};};Object.defineProperty(Graphemer,"__esModule",{value:true});const boundaries_1=requireBoundaries();const GraphemerHelper_1=__importDefault(requireGraphemerHelper());const GraphemerIterator_1=__importDefault(requireGraphemerIterator());let Graphemer$1 = class Graphemer{/**
	     * Returns the next grapheme break in the string after the given index
	     * @param string {string}
	     * @param index {number}
	     * @returns {number}
	     */static nextBreak(string,index){if(index===undefined){index=0;}if(index<0){return 0;}if(index>=string.length-1){return string.length;}const prevCP=GraphemerHelper_1.default.codePointAt(string,index);const prev=Graphemer.getGraphemeBreakProperty(prevCP);const prevEmoji=Graphemer.getEmojiProperty(prevCP);const mid=[];const midEmoji=[];for(let i=index+1;i<string.length;i++){// check for already processed low surrogates
if(GraphemerHelper_1.default.isSurrogate(string,i-1)){continue;}const nextCP=GraphemerHelper_1.default.codePointAt(string,i);const next=Graphemer.getGraphemeBreakProperty(nextCP);const nextEmoji=Graphemer.getEmojiProperty(nextCP);if(GraphemerHelper_1.default.shouldBreak(prev,mid,next,prevEmoji,midEmoji,nextEmoji)){return i;}mid.push(next);midEmoji.push(nextEmoji);}return string.length;}/**
	     * Breaks the given string into an array of grapheme clusters
	     * @param str {string}
	     * @returns {string[]}
	     */splitGraphemes(str){const res=[];let index=0;let brk;while((brk=Graphemer.nextBreak(str,index))<str.length){res.push(str.slice(index,brk));index=brk;}if(index<str.length){res.push(str.slice(index));}return res;}/**
	     * Returns an iterator of grapheme clusters in the given string
	     * @param str {string}
	     * @returns {GraphemerIterator}
	     */iterateGraphemes(str){return new GraphemerIterator_1.default(str,Graphemer.nextBreak);}/**
	     * Returns the number of grapheme clusters in the given string
	     * @param str {string}
	     * @returns {number}
	     */countGraphemes(str){let count=0;let index=0;let brk;while((brk=Graphemer.nextBreak(str,index))<str.length){index=brk;count++;}if(index<str.length){count++;}return count;}/**
	     * Given a Unicode code point, determines this symbol's grapheme break property
	     * @param code {number} Unicode code point
	     * @returns {number}
	     */static getGraphemeBreakProperty(code){// Grapheme break property taken from:
// https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt
// and generated by
// node ./scripts/generate-grapheme-break.js
if(code<0xbf09){if(code<0xac54){if(code<0x102d){if(code<0xb02){if(code<0x93b){if(code<0x6df){if(code<0x5bf){if(code<0x7f){if(code<0xb){if(code<0xa){// Cc  [10] <control-0000>..<control-0009>
if(0x0<=code&&code<=0x9){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Cc       <control-000A>
if(0xa===code){return boundaries_1.CLUSTER_BREAK.LF;}}}else {if(code<0xd){// Cc   [2] <control-000B>..<control-000C>
if(0xb<=code&&code<=0xc){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0xe){// Cc       <control-000D>
if(0xd===code){return boundaries_1.CLUSTER_BREAK.CR;}}else {// Cc  [18] <control-000E>..<control-001F>
if(0xe<=code&&code<=0x1f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}}}else {if(code<0x300){if(code<0xad){// Cc  [33] <control-007F>..<control-009F>
if(0x7f<=code&&code<=0x9f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Cf       SOFT HYPHEN
if(0xad===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}else {if(code<0x483){// Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
if(0x300<=code&&code<=0x36f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x591){// Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
// Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
if(0x483<=code&&code<=0x489){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG
if(0x591<=code&&code<=0x5bd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x610){if(code<0x5c4){if(code<0x5c1){// Mn       HEBREW POINT RAFE
if(0x5bf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT
if(0x5c1<=code&&code<=0x5c2){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x5c7){// Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT
if(0x5c4<=code&&code<=0x5c5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x600){// Mn       HEBREW POINT QAMATS QATAN
if(0x5c7===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
if(0x600<=code&&code<=0x605){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}}else {if(code<0x670){if(code<0x61c){// Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
if(0x610<=code&&code<=0x61a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x64b){// Cf       ARABIC LETTER MARK
if(0x61c===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW
if(0x64b<=code&&code<=0x65f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x6d6){// Mn       ARABIC LETTER SUPERSCRIPT ALEF
if(0x670===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x6dd){// Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN
if(0x6d6<=code&&code<=0x6dc){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       ARABIC END OF AYAH
if(0x6dd===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}}}}else {if(code<0x81b){if(code<0x730){if(code<0x6ea){if(code<0x6e7){// Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA
if(0x6df<=code&&code<=0x6e4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON
if(0x6e7<=code&&code<=0x6e8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x70f){// Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM
if(0x6ea<=code&&code<=0x6ed){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       SYRIAC ABBREVIATION MARK
if(0x70f===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}// Mn       SYRIAC LETTER SUPERSCRIPT ALAPH
if(0x711===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x7eb){if(code<0x7a6){// Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH
if(0x730<=code&&code<=0x74a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [11] THAANA ABAFILI..THAANA SUKUN
if(0x7a6<=code&&code<=0x7b0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x7fd){// Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE
if(0x7eb<=code&&code<=0x7f3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x816){// Mn       NKO DANTAYALAN
if(0x7fd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH
if(0x816<=code&&code<=0x819){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x898){if(code<0x829){if(code<0x825){// Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A
if(0x81b<=code&&code<=0x823){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U
if(0x825<=code&&code<=0x827){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x859){// Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA
if(0x829<=code&&code<=0x82d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x890){// Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK
if(0x859<=code&&code<=0x85b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE
if(0x890<=code&&code<=0x891){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}}else {if(code<0x8e3){if(code<0x8ca){// Mn   [8] ARABIC SMALL HIGH WORD AL-JUZ..ARABIC HALF MADDA OVER MADDA
if(0x898<=code&&code<=0x89f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x8e2){// Mn  [24] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH SIGN SAFHA
if(0x8ca<=code&&code<=0x8e1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       ARABIC DISPUTED END OF AYAH
if(0x8e2===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}else {if(code<0x903){// Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA
if(0x8e3<=code&&code<=0x902){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       DEVANAGARI SIGN VISARGA
if(0x903===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       DEVANAGARI VOWEL SIGN OE
if(0x93a===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0xa01){if(code<0x982){if(code<0x94d){if(code<0x93e){// Mc       DEVANAGARI VOWEL SIGN OOE
if(0x93b===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       DEVANAGARI SIGN NUKTA
if(0x93c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x941){// Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II
if(0x93e<=code&&code<=0x940){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x949){// Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI
if(0x941<=code&&code<=0x948){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU
if(0x949<=code&&code<=0x94c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x951){if(code<0x94e){// Mn       DEVANAGARI SIGN VIRAMA
if(0x94d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW
if(0x94e<=code&&code<=0x94f){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x962){// Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE
if(0x951<=code&&code<=0x957){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x981){// Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL
if(0x962<=code&&code<=0x963){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       BENGALI SIGN CANDRABINDU
if(0x981===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x9c7){if(code<0x9be){if(code<0x9bc){// Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA
if(0x982<=code&&code<=0x983){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BENGALI SIGN NUKTA
if(0x9bc===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x9bf){// Mc       BENGALI VOWEL SIGN AA
if(0x9be===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x9c1){// Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II
if(0x9bf<=code&&code<=0x9c0){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR
if(0x9c1<=code&&code<=0x9c4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x9d7){if(code<0x9cb){// Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI
if(0x9c7<=code&&code<=0x9c8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x9cd){// Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU
if(0x9cb<=code&&code<=0x9cc){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BENGALI SIGN VIRAMA
if(0x9cd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x9e2){// Mc       BENGALI AU LENGTH MARK
if(0x9d7===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x9fe){// Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL
if(0x9e2<=code&&code<=0x9e3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       BENGALI SANDHI MARK
if(0x9fe===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0xa83){if(code<0xa47){if(code<0xa3c){if(code<0xa03){// Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
if(0xa01<=code&&code<=0xa02){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       GURMUKHI SIGN VISARGA
if(0xa03===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0xa3e){// Mn       GURMUKHI SIGN NUKTA
if(0xa3c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa41){// Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II
if(0xa3e<=code&&code<=0xa40){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU
if(0xa41<=code&&code<=0xa42){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xa70){if(code<0xa4b){// Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
if(0xa47<=code&&code<=0xa48){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa51){// Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
if(0xa4b<=code&&code<=0xa4d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       GURMUKHI SIGN UDAAT
if(0xa51===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xa75){// Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK
if(0xa70<=code&&code<=0xa71){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa81){// Mn       GURMUKHI SIGN YAKASH
if(0xa75===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
if(0xa81<=code&&code<=0xa82){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xac9){if(code<0xabe){// Mc       GUJARATI SIGN VISARGA
if(0xa83===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       GUJARATI SIGN NUKTA
if(0xabc===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xac1){// Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II
if(0xabe<=code&&code<=0xac0){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xac7){// Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E
if(0xac1<=code&&code<=0xac5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI
if(0xac7<=code&&code<=0xac8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xae2){if(code<0xacb){// Mc       GUJARATI VOWEL SIGN CANDRA O
if(0xac9===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xacd){// Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU
if(0xacb<=code&&code<=0xacc){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       GUJARATI SIGN VIRAMA
if(0xacd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xafa){// Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL
if(0xae2<=code&&code<=0xae3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xb01){// Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE
if(0xafa<=code&&code<=0xaff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       ORIYA SIGN CANDRABINDU
if(0xb01===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}}else {if(code<0xcf3){if(code<0xc04){if(code<0xb82){if(code<0xb47){if(code<0xb3e){if(code<0xb3c){// Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA
if(0xb02<=code&&code<=0xb03){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       ORIYA SIGN NUKTA
if(0xb3c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xb40){// Mc       ORIYA VOWEL SIGN AA
// Mn       ORIYA VOWEL SIGN I
if(0xb3e<=code&&code<=0xb3f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xb41){// Mc       ORIYA VOWEL SIGN II
if(0xb40===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR
if(0xb41<=code&&code<=0xb44){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xb4d){if(code<0xb4b){// Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI
if(0xb47<=code&&code<=0xb48){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU
if(0xb4b<=code&&code<=0xb4c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0xb55){// Mn       ORIYA SIGN VIRAMA
if(0xb4d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xb62){// Mn   [2] ORIYA SIGN OVERLINE..ORIYA AI LENGTH MARK
// Mc       ORIYA AU LENGTH MARK
if(0xb55<=code&&code<=0xb57){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL
if(0xb62<=code&&code<=0xb63){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xbc6){if(code<0xbbf){// Mn       TAMIL SIGN ANUSVARA
if(0xb82===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       TAMIL VOWEL SIGN AA
if(0xbbe===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xbc0){// Mc       TAMIL VOWEL SIGN I
if(0xbbf===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xbc1){// Mn       TAMIL VOWEL SIGN II
if(0xbc0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU
if(0xbc1<=code&&code<=0xbc2){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xbd7){if(code<0xbca){// Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI
if(0xbc6<=code&&code<=0xbc8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xbcd){// Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU
if(0xbca<=code&&code<=0xbcc){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       TAMIL SIGN VIRAMA
if(0xbcd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xc00){// Mc       TAMIL AU LENGTH MARK
if(0xbd7===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xc01){// Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE
if(0xc00===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA
if(0xc01<=code&&code<=0xc03){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}else {if(code<0xcbe){if(code<0xc4a){if(code<0xc3e){// Mn       TELUGU SIGN COMBINING ANUSVARA ABOVE
if(0xc04===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       TELUGU SIGN NUKTA
if(0xc3c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xc41){// Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II
if(0xc3e<=code&&code<=0xc40){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xc46){// Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR
if(0xc41<=code&&code<=0xc44){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI
if(0xc46<=code&&code<=0xc48){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xc81){if(code<0xc55){// Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA
if(0xc4a<=code&&code<=0xc4d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xc62){// Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK
if(0xc55<=code&&code<=0xc56){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL
if(0xc62<=code&&code<=0xc63){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xc82){// Mn       KANNADA SIGN CANDRABINDU
if(0xc81===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xcbc){// Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA
if(0xc82<=code&&code<=0xc83){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       KANNADA SIGN NUKTA
if(0xcbc===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xcc6){if(code<0xcc0){// Mc       KANNADA VOWEL SIGN AA
if(0xcbe===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       KANNADA VOWEL SIGN I
if(0xcbf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xcc2){// Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U
if(0xcc0<=code&&code<=0xcc1){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xcc3){// Mc       KANNADA VOWEL SIGN UU
if(0xcc2===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR
if(0xcc3<=code&&code<=0xcc4){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xccc){if(code<0xcc7){// Mn       KANNADA VOWEL SIGN E
if(0xcc6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xcca){// Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI
if(0xcc7<=code&&code<=0xcc8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO
if(0xcca<=code&&code<=0xccb){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0xcd5){// Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA
if(0xccc<=code&&code<=0xccd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xce2){// Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK
if(0xcd5<=code&&code<=0xcd6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL
if(0xce2<=code&&code<=0xce3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0xddf){if(code<0xd4e){if(code<0xd3f){if(code<0xd02){if(code<0xd00){// Mc       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT
if(0xcf3===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU
if(0xd00<=code&&code<=0xd01){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xd3b){// Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA
if(0xd02<=code&&code<=0xd03){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xd3e){// Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA
if(0xd3b<=code&&code<=0xd3c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       MALAYALAM VOWEL SIGN AA
if(0xd3e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xd46){if(code<0xd41){// Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II
if(0xd3f<=code&&code<=0xd40){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR
if(0xd41<=code&&code<=0xd44){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xd4a){// Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI
if(0xd46<=code&&code<=0xd48){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xd4d){// Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU
if(0xd4a<=code&&code<=0xd4c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MALAYALAM SIGN VIRAMA
if(0xd4d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xdca){if(code<0xd62){// Lo       MALAYALAM LETTER DOT REPH
if(0xd4e===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}// Mc       MALAYALAM AU LENGTH MARK
if(0xd57===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xd81){// Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL
if(0xd62<=code&&code<=0xd63){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xd82){// Mn       SINHALA SIGN CANDRABINDU
if(0xd81===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
if(0xd82<=code&&code<=0xd83){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xdd2){if(code<0xdcf){// Mn       SINHALA SIGN AL-LAKUNA
if(0xdca===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xdd0){// Mc       SINHALA VOWEL SIGN AELA-PILLA
if(0xdcf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA
if(0xdd0<=code&&code<=0xdd1){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0xdd6){// Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA
if(0xdd2<=code&&code<=0xdd4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xdd8){// Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA
if(0xdd6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA
if(0xdd8<=code&&code<=0xdde){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}else {if(code<0xf35){if(code<0xe47){if(code<0xe31){if(code<0xdf2){// Mc       SINHALA VOWEL SIGN GAYANUKITTA
if(0xddf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA
if(0xdf2<=code&&code<=0xdf3){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0xe33){// Mn       THAI CHARACTER MAI HAN-AKAT
if(0xe31===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xe34){// Lo       THAI CHARACTER SARA AM
if(0xe33===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
if(0xe34<=code&&code<=0xe3a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xeb4){if(code<0xeb1){// Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
if(0xe47<=code&&code<=0xe4e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       LAO VOWEL SIGN MAI KAN
if(0xeb1===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Lo       LAO VOWEL SIGN AM
if(0xeb3===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0xec8){// Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO
if(0xeb4<=code&&code<=0xebc){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xf18){// Mn   [7] LAO TONE MAI EK..LAO YAMAKKAN
if(0xec8<=code&&code<=0xece){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
if(0xf18<=code&&code<=0xf19){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xf7f){if(code<0xf39){// Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
if(0xf35===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
if(0xf37===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xf3e){// Mn       TIBETAN MARK TSA -PHRU
if(0xf39===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xf71){// Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
if(0xf3e<=code&&code<=0xf3f){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
if(0xf71<=code&&code<=0xf7e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xf8d){if(code<0xf80){// Mc       TIBETAN SIGN RNAM BCAD
if(0xf7f===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xf86){// Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
if(0xf80<=code&&code<=0xf84){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
if(0xf86<=code&&code<=0xf87){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xf99){// Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
if(0xf8d<=code&&code<=0xf97){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xfc6){// Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
if(0xf99<=code&&code<=0xfbc){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       TIBETAN SYMBOL PADMA GDAN
if(0xfc6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}}}else {if(code<0x1c24){if(code<0x1930){if(code<0x1732){if(code<0x1082){if(code<0x103d){if(code<0x1032){if(code<0x1031){// Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
if(0x102d<=code&&code<=0x1030){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       MYANMAR VOWEL SIGN E
if(0x1031===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1039){// Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
if(0x1032<=code&&code<=0x1037){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x103b){// Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
if(0x1039<=code&&code<=0x103a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
if(0x103b<=code&&code<=0x103c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1058){if(code<0x1056){// Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
if(0x103d<=code&&code<=0x103e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
if(0x1056<=code&&code<=0x1057){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x105e){// Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
if(0x1058<=code&&code<=0x1059){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1071){// Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
if(0x105e<=code&&code<=0x1060){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
if(0x1071<=code&&code<=0x1074){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x1100){if(code<0x1085){// Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
if(0x1082===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       MYANMAR VOWEL SIGN SHAN E
if(0x1084===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x108d){// Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
if(0x1085<=code&&code<=0x1086){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
if(0x108d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       MYANMAR VOWEL SIGN AITON AI
if(0x109d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x135d){if(code<0x1160){// Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
if(0x1100<=code&&code<=0x115f){return boundaries_1.CLUSTER_BREAK.L;}}else {if(code<0x11a8){// Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
if(0x1160<=code&&code<=0x11a7){return boundaries_1.CLUSTER_BREAK.V;}}else {// Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
if(0x11a8<=code&&code<=0x11ff){return boundaries_1.CLUSTER_BREAK.T;}}}}else {if(code<0x1712){// Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
if(0x135d<=code&&code<=0x135f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1715){// Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
if(0x1712<=code&&code<=0x1714){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       TAGALOG SIGN PAMUDPOD
if(0x1715===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}else {if(code<0x17c9){if(code<0x17b6){if(code<0x1752){if(code<0x1734){// Mn   [2] HANUNOO VOWEL SIGN I..HANUNOO VOWEL SIGN U
if(0x1732<=code&&code<=0x1733){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       HANUNOO SIGN PAMUDPOD
if(0x1734===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1772){// Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
if(0x1752<=code&&code<=0x1753){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x17b4){// Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
if(0x1772<=code&&code<=0x1773){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
if(0x17b4<=code&&code<=0x17b5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x17be){if(code<0x17b7){// Mc       KHMER VOWEL SIGN AA
if(0x17b6===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
if(0x17b7<=code&&code<=0x17bd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x17c6){// Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
if(0x17be<=code&&code<=0x17c5){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x17c7){// Mn       KHMER SIGN NIKAHIT
if(0x17c6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
if(0x17c7<=code&&code<=0x17c8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0x1885){if(code<0x180b){if(code<0x17dd){// Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
if(0x17c9<=code&&code<=0x17d3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       KHMER SIGN ATTHACAN
if(0x17dd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x180e){// Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
if(0x180b<=code&&code<=0x180d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       MONGOLIAN VOWEL SEPARATOR
if(0x180e===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}// Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR
if(0x180f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1923){if(code<0x18a9){// Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA
if(0x1885<=code&&code<=0x1886){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1920){// Mn       MONGOLIAN LETTER ALI GALI DAGALGA
if(0x18a9===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
if(0x1920<=code&&code<=0x1922){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1927){// Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
if(0x1923<=code&&code<=0x1926){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1929){// Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
if(0x1927<=code&&code<=0x1928){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
if(0x1929<=code&&code<=0x192b){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}}else {if(code<0x1b3b){if(code<0x1a58){if(code<0x1a19){if(code<0x1933){if(code<0x1932){// Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
if(0x1930<=code&&code<=0x1931){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       LIMBU SMALL LETTER ANUSVARA
if(0x1932===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1939){// Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
if(0x1933<=code&&code<=0x1938){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1a17){// Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
if(0x1939<=code&&code<=0x193b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
if(0x1a17<=code&&code<=0x1a18){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1a55){if(code<0x1a1b){// Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
if(0x1a19<=code&&code<=0x1a1a){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BUGINESE VOWEL SIGN AE
if(0x1a1b===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1a56){// Mc       TAI THAM CONSONANT SIGN MEDIAL RA
if(0x1a55===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       TAI THAM CONSONANT SIGN MEDIAL LA
if(0x1a56===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       TAI THAM CONSONANT SIGN LA TANG LAI
if(0x1a57===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1a73){if(code<0x1a62){if(code<0x1a60){// Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
if(0x1a58<=code&&code<=0x1a5e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       TAI THAM SIGN SAKOT
if(0x1a60===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1a65){// Mn       TAI THAM VOWEL SIGN MAI SAT
if(0x1a62===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1a6d){// Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
if(0x1a65<=code&&code<=0x1a6c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
if(0x1a6d<=code&&code<=0x1a72){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1b00){if(code<0x1a7f){// Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
if(0x1a73<=code&&code<=0x1a7c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1ab0){// Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
if(0x1a7f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
// Me       COMBINING PARENTHESES OVERLAY
// Mn  [16] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER INSULAR T
if(0x1ab0<=code&&code<=0x1ace){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1b04){// Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
if(0x1b00<=code&&code<=0x1b03){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1b34){// Mc       BALINESE SIGN BISAH
if(0x1b04===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BALINESE SIGN REREKAN
// Mc       BALINESE VOWEL SIGN TEDUNG
// Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
if(0x1b34<=code&&code<=0x1b3a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0x1ba8){if(code<0x1b6b){if(code<0x1b3d){// Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
if(0x1b3b===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       BALINESE VOWEL SIGN LA LENGA
if(0x1b3c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1b42){// Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
if(0x1b3d<=code&&code<=0x1b41){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1b43){// Mn       BALINESE VOWEL SIGN PEPET
if(0x1b42===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
if(0x1b43<=code&&code<=0x1b44){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1ba1){if(code<0x1b80){// Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
if(0x1b6b<=code&&code<=0x1b73){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1b82){// Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
if(0x1b80<=code&&code<=0x1b81){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       SUNDANESE SIGN PANGWISAD
if(0x1b82===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1ba2){// Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
if(0x1ba1===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1ba6){// Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
if(0x1ba2<=code&&code<=0x1ba5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
if(0x1ba6<=code&&code<=0x1ba7){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0x1be8){if(code<0x1bab){if(code<0x1baa){// Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
if(0x1ba8<=code&&code<=0x1ba9){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       SUNDANESE SIGN PAMAAEH
if(0x1baa===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1be6){// Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
if(0x1bab<=code&&code<=0x1bad){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       BATAK SIGN TOMPI
if(0x1be6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       BATAK VOWEL SIGN E
if(0x1be7===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1bee){if(code<0x1bea){// Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
if(0x1be8<=code&&code<=0x1be9){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1bed){// Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
if(0x1bea<=code&&code<=0x1bec){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       BATAK VOWEL SIGN KARO O
if(0x1bed===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1bef){// Mc       BATAK VOWEL SIGN U
if(0x1bee===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1bf2){// Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
if(0x1bef<=code&&code<=0x1bf1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
if(0x1bf2<=code&&code<=0x1bf3){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}}}else {if(code<0xa952){if(code<0x2d7f){if(code<0x1cf7){if(code<0x1cd4){if(code<0x1c34){if(code<0x1c2c){// Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
if(0x1c24<=code&&code<=0x1c2b){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
if(0x1c2c<=code&&code<=0x1c33){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1c36){// Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
if(0x1c34<=code&&code<=0x1c35){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1cd0){// Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
if(0x1c36<=code&&code<=0x1c37){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
if(0x1cd0<=code&&code<=0x1cd2){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1ce2){if(code<0x1ce1){// Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
if(0x1cd4<=code&&code<=0x1ce0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
if(0x1ce1===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1ced){// Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
if(0x1ce2<=code&&code<=0x1ce8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       VEDIC SIGN TIRYAK
if(0x1ced===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       VEDIC TONE CANDRA ABOVE
if(0x1cf4===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x200d){if(code<0x1dc0){if(code<0x1cf8){// Mc       VEDIC SIGN ATIKRAMA
if(0x1cf7===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
if(0x1cf8<=code&&code<=0x1cf9){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x200b){// Mn  [64] COMBINING DOTTED GRAVE ACCENT..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
if(0x1dc0<=code&&code<=0x1dff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cf       ZERO WIDTH SPACE
if(0x200b===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}// Cf       ZERO WIDTH NON-JOINER
if(0x200c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x2060){if(code<0x200e){// Cf       ZERO WIDTH JOINER
if(0x200d===code){return boundaries_1.CLUSTER_BREAK.ZWJ;}}else {if(code<0x2028){// Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
if(0x200e<=code&&code<=0x200f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Zl       LINE SEPARATOR
// Zp       PARAGRAPH SEPARATOR
// Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
if(0x2028<=code&&code<=0x202e){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}}else {if(code<0x20d0){// Cf   [5] WORD JOINER..INVISIBLE PLUS
// Cn       <reserved-2065>
// Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
if(0x2060<=code&&code<=0x206f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0x2cef){// Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
// Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
// Mn       COMBINING LEFT RIGHT ARROW ABOVE
// Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
// Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
if(0x20d0<=code&&code<=0x20f0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS
if(0x2cef<=code&&code<=0x2cf1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0xa823){if(code<0xa674){if(code<0x302a){if(code<0x2de0){// Mn       TIFINAGH CONSONANT JOINER
if(0x2d7f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS
if(0x2de0<=code&&code<=0x2dff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x3099){// Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
// Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK
if(0x302a<=code&&code<=0x302f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa66f){// Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
if(0x3099<=code&&code<=0x309a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       COMBINING CYRILLIC VZMET
// Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN
if(0xa66f<=code&&code<=0xa672){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xa802){if(code<0xa69e){// Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK
if(0xa674<=code&&code<=0xa67d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa6f0){// Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E
if(0xa69e<=code&&code<=0xa69f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS
if(0xa6f0<=code&&code<=0xa6f1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xa806){// Mn       SYLOTI NAGRI SIGN DVISVARA
if(0xa802===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       SYLOTI NAGRI SIGN HASANTA
if(0xa806===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       SYLOTI NAGRI SIGN ANUSVARA
if(0xa80b===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0xa8b4){if(code<0xa827){if(code<0xa825){// Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I
if(0xa823<=code&&code<=0xa824){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E
if(0xa825<=code&&code<=0xa826){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xa82c){// Mc       SYLOTI NAGRI VOWEL SIGN OO
if(0xa827===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xa880){// Mn       SYLOTI NAGRI SIGN ALTERNATE HASANTA
if(0xa82c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA
if(0xa880<=code&&code<=0xa881){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xa8ff){if(code<0xa8c4){// Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU
if(0xa8b4<=code&&code<=0xa8c3){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xa8e0){// Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU
if(0xa8c4<=code&&code<=0xa8c5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA
if(0xa8e0<=code&&code<=0xa8f1){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xa926){// Mn       DEVANAGARI VOWEL SIGN AY
if(0xa8ff===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xa947){// Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU
if(0xa926<=code&&code<=0xa92d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R
if(0xa947<=code&&code<=0xa951){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0xaab2){if(code<0xa9e5){if(code<0xa9b4){if(code<0xa980){if(code<0xa960){// Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA
if(0xa952<=code&&code<=0xa953){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH
if(0xa960<=code&&code<=0xa97c){return boundaries_1.CLUSTER_BREAK.L;}}}else {if(code<0xa983){// Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR
if(0xa980<=code&&code<=0xa982){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       JAVANESE SIGN WIGNYAN
if(0xa983===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       JAVANESE SIGN CECAK TELU
if(0xa9b3===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xa9ba){if(code<0xa9b6){// Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG
if(0xa9b4<=code&&code<=0xa9b5){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT
if(0xa9b6<=code&&code<=0xa9b9){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xa9bc){// Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE
if(0xa9ba<=code&&code<=0xa9bb){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xa9be){// Mn   [2] JAVANESE VOWEL SIGN PEPET..JAVANESE CONSONANT SIGN KERET
if(0xa9bc<=code&&code<=0xa9bd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE PANGKON
if(0xa9be<=code&&code<=0xa9c0){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0xaa35){if(code<0xaa2f){if(code<0xaa29){// Mn       MYANMAR SIGN SHAN SAW
if(0xa9e5===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE
if(0xaa29<=code&&code<=0xaa2e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xaa31){// Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI
if(0xaa2f<=code&&code<=0xaa30){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0xaa33){// Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE
if(0xaa31<=code&&code<=0xaa32){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA
if(0xaa33<=code&&code<=0xaa34){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0xaa4d){if(code<0xaa43){// Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA
if(0xaa35<=code&&code<=0xaa36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       CHAM CONSONANT SIGN FINAL NG
if(0xaa43===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       CHAM CONSONANT SIGN FINAL M
if(0xaa4c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xaa7c){// Mc       CHAM CONSONANT SIGN FINAL H
if(0xaa4d===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MYANMAR SIGN TAI LAING TONE-2
if(0xaa7c===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       TAI VIET MAI KANG
if(0xaab0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xabe6){if(code<0xaaec){if(code<0xaabe){if(code<0xaab7){// Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U
if(0xaab2<=code&&code<=0xaab4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
if(0xaab7<=code&&code<=0xaab8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xaac1){// Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
if(0xaabe<=code&&code<=0xaabf){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       TAI VIET TONE MAI THO
if(0xaac1===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       MEETEI MAYEK VOWEL SIGN II
if(0xaaeb===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0xaaf6){if(code<0xaaee){// Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
if(0xaaec<=code&&code<=0xaaed){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xaaf5){// Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
if(0xaaee<=code&&code<=0xaaef){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc       MEETEI MAYEK VOWEL SIGN VISARGA
if(0xaaf5===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0xabe3){// Mn       MEETEI MAYEK VIRAMA
if(0xaaf6===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xabe5){// Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
if(0xabe3<=code&&code<=0xabe4){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MEETEI MAYEK VOWEL SIGN ANAP
if(0xabe5===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0xac00){if(code<0xabe9){if(code<0xabe8){// Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
if(0xabe6<=code&&code<=0xabe7){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MEETEI MAYEK VOWEL SIGN UNAP
if(0xabe8===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0xabec){// Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
if(0xabe9<=code&&code<=0xabea){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc       MEETEI MAYEK LUM IYEK
if(0xabec===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       MEETEI MAYEK APUN IYEK
if(0xabed===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xac1d){if(code<0xac01){// Lo       HANGUL SYLLABLE GA
if(0xac00===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xac1c){// Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
if(0xac01<=code&&code<=0xac1b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GAE
if(0xac1c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xac38){// Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
if(0xac1d<=code&&code<=0xac37){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xac39){// Lo       HANGUL SYLLABLE GYA
if(0xac38===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
if(0xac39<=code&&code<=0xac53){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}}}else {if(code<0xb5a1){if(code<0xb0ed){if(code<0xaea0){if(code<0xad6d){if(code<0xace0){if(code<0xac8d){if(code<0xac70){if(code<0xac55){// Lo       HANGUL SYLLABLE GYAE
if(0xac54===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
if(0xac55<=code&&code<=0xac6f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xac71){// Lo       HANGUL SYLLABLE GEO
if(0xac70===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xac8c){// Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
if(0xac71<=code&&code<=0xac8b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GE
if(0xac8c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xaca9){if(code<0xaca8){// Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
if(0xac8d<=code&&code<=0xaca7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GYEO
if(0xaca8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xacc4){// Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
if(0xaca9<=code&&code<=0xacc3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xacc5){// Lo       HANGUL SYLLABLE GYE
if(0xacc4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
if(0xacc5<=code&&code<=0xacdf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xad19){if(code<0xacfc){if(code<0xace1){// Lo       HANGUL SYLLABLE GO
if(0xace0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
if(0xace1<=code&&code<=0xacfb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xacfd){// Lo       HANGUL SYLLABLE GWA
if(0xacfc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xad18){// Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
if(0xacfd<=code&&code<=0xad17){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GWAE
if(0xad18===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xad50){if(code<0xad34){// Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
if(0xad19<=code&&code<=0xad33){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xad35){// Lo       HANGUL SYLLABLE GOE
if(0xad34===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
if(0xad35<=code&&code<=0xad4f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xad51){// Lo       HANGUL SYLLABLE GYO
if(0xad50===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xad6c){// Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
if(0xad51<=code&&code<=0xad6b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GU
if(0xad6c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xadf9){if(code<0xadc0){if(code<0xad89){if(code<0xad88){// Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
if(0xad6d<=code&&code<=0xad87){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GWEO
if(0xad88===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xada4){// Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
if(0xad89<=code&&code<=0xada3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xada5){// Lo       HANGUL SYLLABLE GWE
if(0xada4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
if(0xada5<=code&&code<=0xadbf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xaddc){if(code<0xadc1){// Lo       HANGUL SYLLABLE GWI
if(0xadc0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
if(0xadc1<=code&&code<=0xaddb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xaddd){// Lo       HANGUL SYLLABLE GYU
if(0xaddc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xadf8){// Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
if(0xaddd<=code&&code<=0xadf7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GEU
if(0xadf8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xae4c){if(code<0xae15){if(code<0xae14){// Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
if(0xadf9<=code&&code<=0xae13){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GYI
if(0xae14===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xae30){// Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
if(0xae15<=code&&code<=0xae2f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xae31){// Lo       HANGUL SYLLABLE GI
if(0xae30===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
if(0xae31<=code&&code<=0xae4b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xae69){if(code<0xae4d){// Lo       HANGUL SYLLABLE GGA
if(0xae4c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xae68){// Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
if(0xae4d<=code&&code<=0xae67){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGAE
if(0xae68===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xae84){// Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
if(0xae69<=code&&code<=0xae83){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xae85){// Lo       HANGUL SYLLABLE GGYA
if(0xae84===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
if(0xae85<=code&&code<=0xae9f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xafb9){if(code<0xaf2c){if(code<0xaed9){if(code<0xaebc){if(code<0xaea1){// Lo       HANGUL SYLLABLE GGYAE
if(0xaea0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
if(0xaea1<=code&&code<=0xaebb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xaebd){// Lo       HANGUL SYLLABLE GGEO
if(0xaebc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xaed8){// Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
if(0xaebd<=code&&code<=0xaed7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGE
if(0xaed8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xaef5){if(code<0xaef4){// Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
if(0xaed9<=code&&code<=0xaef3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGYEO
if(0xaef4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xaf10){// Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
if(0xaef5<=code&&code<=0xaf0f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xaf11){// Lo       HANGUL SYLLABLE GGYE
if(0xaf10===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
if(0xaf11<=code&&code<=0xaf2b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xaf65){if(code<0xaf48){if(code<0xaf2d){// Lo       HANGUL SYLLABLE GGO
if(0xaf2c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
if(0xaf2d<=code&&code<=0xaf47){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xaf49){// Lo       HANGUL SYLLABLE GGWA
if(0xaf48===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xaf64){// Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
if(0xaf49<=code&&code<=0xaf63){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGWAE
if(0xaf64===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xaf9c){if(code<0xaf80){// Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
if(0xaf65<=code&&code<=0xaf7f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xaf81){// Lo       HANGUL SYLLABLE GGOE
if(0xaf80===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
if(0xaf81<=code&&code<=0xaf9b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xaf9d){// Lo       HANGUL SYLLABLE GGYO
if(0xaf9c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xafb8){// Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
if(0xaf9d<=code&&code<=0xafb7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGU
if(0xafb8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xb060){if(code<0xb00c){if(code<0xafd5){if(code<0xafd4){// Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
if(0xafb9<=code&&code<=0xafd3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGWEO
if(0xafd4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xaff0){// Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
if(0xafd5<=code&&code<=0xafef){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xaff1){// Lo       HANGUL SYLLABLE GGWE
if(0xaff0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
if(0xaff1<=code&&code<=0xb00b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb029){if(code<0xb00d){// Lo       HANGUL SYLLABLE GGWI
if(0xb00c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb028){// Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
if(0xb00d<=code&&code<=0xb027){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE GGYU
if(0xb028===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb044){// Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
if(0xb029<=code&&code<=0xb043){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb045){// Lo       HANGUL SYLLABLE GGEU
if(0xb044===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
if(0xb045<=code&&code<=0xb05f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xb099){if(code<0xb07c){if(code<0xb061){// Lo       HANGUL SYLLABLE GGYI
if(0xb060===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
if(0xb061<=code&&code<=0xb07b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb07d){// Lo       HANGUL SYLLABLE GGI
if(0xb07c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb098){// Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
if(0xb07d<=code&&code<=0xb097){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NA
if(0xb098===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb0d0){if(code<0xb0b4){// Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
if(0xb099<=code&&code<=0xb0b3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb0b5){// Lo       HANGUL SYLLABLE NAE
if(0xb0b4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
if(0xb0b5<=code&&code<=0xb0cf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb0d1){// Lo       HANGUL SYLLABLE NYA
if(0xb0d0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb0ec){// Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
if(0xb0d1<=code&&code<=0xb0eb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NYAE
if(0xb0ec===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}else {if(code<0xb354){if(code<0xb220){if(code<0xb179){if(code<0xb140){if(code<0xb109){if(code<0xb108){// Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
if(0xb0ed<=code&&code<=0xb107){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NEO
if(0xb108===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb124){// Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
if(0xb109<=code&&code<=0xb123){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb125){// Lo       HANGUL SYLLABLE NE
if(0xb124===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
if(0xb125<=code&&code<=0xb13f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb15c){if(code<0xb141){// Lo       HANGUL SYLLABLE NYEO
if(0xb140===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
if(0xb141<=code&&code<=0xb15b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb15d){// Lo       HANGUL SYLLABLE NYE
if(0xb15c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb178){// Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
if(0xb15d<=code&&code<=0xb177){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NO
if(0xb178===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xb1cc){if(code<0xb195){if(code<0xb194){// Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
if(0xb179<=code&&code<=0xb193){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NWA
if(0xb194===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb1b0){// Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
if(0xb195<=code&&code<=0xb1af){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb1b1){// Lo       HANGUL SYLLABLE NWAE
if(0xb1b0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
if(0xb1b1<=code&&code<=0xb1cb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb1e9){if(code<0xb1cd){// Lo       HANGUL SYLLABLE NOE
if(0xb1cc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb1e8){// Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
if(0xb1cd<=code&&code<=0xb1e7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NYO
if(0xb1e8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb204){// Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
if(0xb1e9<=code&&code<=0xb203){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb205){// Lo       HANGUL SYLLABLE NU
if(0xb204===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
if(0xb205<=code&&code<=0xb21f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xb2ad){if(code<0xb259){if(code<0xb23c){if(code<0xb221){// Lo       HANGUL SYLLABLE NWEO
if(0xb220===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
if(0xb221<=code&&code<=0xb23b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb23d){// Lo       HANGUL SYLLABLE NWE
if(0xb23c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb258){// Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
if(0xb23d<=code&&code<=0xb257){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NWI
if(0xb258===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb290){if(code<0xb274){// Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
if(0xb259<=code&&code<=0xb273){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb275){// Lo       HANGUL SYLLABLE NYU
if(0xb274===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
if(0xb275<=code&&code<=0xb28f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb291){// Lo       HANGUL SYLLABLE NEU
if(0xb290===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb2ac){// Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
if(0xb291<=code&&code<=0xb2ab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NYI
if(0xb2ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xb300){if(code<0xb2c9){if(code<0xb2c8){// Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
if(0xb2ad<=code&&code<=0xb2c7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE NI
if(0xb2c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb2e4){// Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
if(0xb2c9<=code&&code<=0xb2e3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb2e5){// Lo       HANGUL SYLLABLE DA
if(0xb2e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
if(0xb2e5<=code&&code<=0xb2ff){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb31d){if(code<0xb301){// Lo       HANGUL SYLLABLE DAE
if(0xb300===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb31c){// Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
if(0xb301<=code&&code<=0xb31b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DYA
if(0xb31c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb338){// Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
if(0xb31d<=code&&code<=0xb337){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb339){// Lo       HANGUL SYLLABLE DYAE
if(0xb338===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
if(0xb339<=code&&code<=0xb353){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xb46d){if(code<0xb3e0){if(code<0xb38d){if(code<0xb370){if(code<0xb355){// Lo       HANGUL SYLLABLE DEO
if(0xb354===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
if(0xb355<=code&&code<=0xb36f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb371){// Lo       HANGUL SYLLABLE DE
if(0xb370===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb38c){// Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
if(0xb371<=code&&code<=0xb38b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DYEO
if(0xb38c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb3a9){if(code<0xb3a8){// Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
if(0xb38d<=code&&code<=0xb3a7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DYE
if(0xb3a8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb3c4){// Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
if(0xb3a9<=code&&code<=0xb3c3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb3c5){// Lo       HANGUL SYLLABLE DO
if(0xb3c4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
if(0xb3c5<=code&&code<=0xb3df){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xb419){if(code<0xb3fc){if(code<0xb3e1){// Lo       HANGUL SYLLABLE DWA
if(0xb3e0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
if(0xb3e1<=code&&code<=0xb3fb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb3fd){// Lo       HANGUL SYLLABLE DWAE
if(0xb3fc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb418){// Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
if(0xb3fd<=code&&code<=0xb417){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DOE
if(0xb418===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb450){if(code<0xb434){// Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
if(0xb419<=code&&code<=0xb433){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb435){// Lo       HANGUL SYLLABLE DYO
if(0xb434===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
if(0xb435<=code&&code<=0xb44f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb451){// Lo       HANGUL SYLLABLE DU
if(0xb450===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb46c){// Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
if(0xb451<=code&&code<=0xb46b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DWEO
if(0xb46c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xb514){if(code<0xb4c0){if(code<0xb489){if(code<0xb488){// Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
if(0xb46d<=code&&code<=0xb487){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DWE
if(0xb488===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb4a4){// Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
if(0xb489<=code&&code<=0xb4a3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb4a5){// Lo       HANGUL SYLLABLE DWI
if(0xb4a4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
if(0xb4a5<=code&&code<=0xb4bf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb4dd){if(code<0xb4c1){// Lo       HANGUL SYLLABLE DYU
if(0xb4c0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb4dc){// Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
if(0xb4c1<=code&&code<=0xb4db){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DEU
if(0xb4dc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb4f8){// Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
if(0xb4dd<=code&&code<=0xb4f7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb4f9){// Lo       HANGUL SYLLABLE DYI
if(0xb4f8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
if(0xb4f9<=code&&code<=0xb513){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xb54d){if(code<0xb530){if(code<0xb515){// Lo       HANGUL SYLLABLE DI
if(0xb514===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
if(0xb515<=code&&code<=0xb52f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb531){// Lo       HANGUL SYLLABLE DDA
if(0xb530===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb54c){// Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
if(0xb531<=code&&code<=0xb54b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDAE
if(0xb54c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb584){if(code<0xb568){// Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
if(0xb54d<=code&&code<=0xb567){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb569){// Lo       HANGUL SYLLABLE DDYA
if(0xb568===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
if(0xb569<=code&&code<=0xb583){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb585){// Lo       HANGUL SYLLABLE DDYAE
if(0xb584===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb5a0){// Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
if(0xb585<=code&&code<=0xb59f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDEO
if(0xb5a0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}}else {if(code<0xba55){if(code<0xb808){if(code<0xb6d4){if(code<0xb62d){if(code<0xb5f4){if(code<0xb5bd){if(code<0xb5bc){// Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
if(0xb5a1<=code&&code<=0xb5bb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDE
if(0xb5bc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb5d8){// Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
if(0xb5bd<=code&&code<=0xb5d7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb5d9){// Lo       HANGUL SYLLABLE DDYEO
if(0xb5d8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
if(0xb5d9<=code&&code<=0xb5f3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb610){if(code<0xb5f5){// Lo       HANGUL SYLLABLE DDYE
if(0xb5f4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
if(0xb5f5<=code&&code<=0xb60f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb611){// Lo       HANGUL SYLLABLE DDO
if(0xb610===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb62c){// Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
if(0xb611<=code&&code<=0xb62b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDWA
if(0xb62c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xb680){if(code<0xb649){if(code<0xb648){// Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
if(0xb62d<=code&&code<=0xb647){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDWAE
if(0xb648===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb664){// Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
if(0xb649<=code&&code<=0xb663){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb665){// Lo       HANGUL SYLLABLE DDOE
if(0xb664===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
if(0xb665<=code&&code<=0xb67f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb69d){if(code<0xb681){// Lo       HANGUL SYLLABLE DDYO
if(0xb680===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb69c){// Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
if(0xb681<=code&&code<=0xb69b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDU
if(0xb69c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb6b8){// Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
if(0xb69d<=code&&code<=0xb6b7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb6b9){// Lo       HANGUL SYLLABLE DDWEO
if(0xb6b8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
if(0xb6b9<=code&&code<=0xb6d3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xb761){if(code<0xb70d){if(code<0xb6f0){if(code<0xb6d5){// Lo       HANGUL SYLLABLE DDWE
if(0xb6d4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
if(0xb6d5<=code&&code<=0xb6ef){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb6f1){// Lo       HANGUL SYLLABLE DDWI
if(0xb6f0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb70c){// Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
if(0xb6f1<=code&&code<=0xb70b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDYU
if(0xb70c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb744){if(code<0xb728){// Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
if(0xb70d<=code&&code<=0xb727){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb729){// Lo       HANGUL SYLLABLE DDEU
if(0xb728===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
if(0xb729<=code&&code<=0xb743){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb745){// Lo       HANGUL SYLLABLE DDYI
if(0xb744===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb760){// Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
if(0xb745<=code&&code<=0xb75f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE DDI
if(0xb760===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xb7b4){if(code<0xb77d){if(code<0xb77c){// Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
if(0xb761<=code&&code<=0xb77b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RA
if(0xb77c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb798){// Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
if(0xb77d<=code&&code<=0xb797){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb799){// Lo       HANGUL SYLLABLE RAE
if(0xb798===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
if(0xb799<=code&&code<=0xb7b3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb7d1){if(code<0xb7b5){// Lo       HANGUL SYLLABLE RYA
if(0xb7b4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb7d0){// Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
if(0xb7b5<=code&&code<=0xb7cf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RYAE
if(0xb7d0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb7ec){// Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
if(0xb7d1<=code&&code<=0xb7eb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb7ed){// Lo       HANGUL SYLLABLE REO
if(0xb7ec===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
if(0xb7ed<=code&&code<=0xb807){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xb921){if(code<0xb894){if(code<0xb841){if(code<0xb824){if(code<0xb809){// Lo       HANGUL SYLLABLE RE
if(0xb808===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
if(0xb809<=code&&code<=0xb823){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb825){// Lo       HANGUL SYLLABLE RYEO
if(0xb824===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb840){// Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
if(0xb825<=code&&code<=0xb83f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RYE
if(0xb840===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb85d){if(code<0xb85c){// Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
if(0xb841<=code&&code<=0xb85b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RO
if(0xb85c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb878){// Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
if(0xb85d<=code&&code<=0xb877){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb879){// Lo       HANGUL SYLLABLE RWA
if(0xb878===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
if(0xb879<=code&&code<=0xb893){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xb8cd){if(code<0xb8b0){if(code<0xb895){// Lo       HANGUL SYLLABLE RWAE
if(0xb894===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
if(0xb895<=code&&code<=0xb8af){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb8b1){// Lo       HANGUL SYLLABLE ROE
if(0xb8b0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb8cc){// Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
if(0xb8b1<=code&&code<=0xb8cb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RYO
if(0xb8cc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xb904){if(code<0xb8e8){// Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
if(0xb8cd<=code&&code<=0xb8e7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb8e9){// Lo       HANGUL SYLLABLE RU
if(0xb8e8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
if(0xb8e9<=code&&code<=0xb903){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xb905){// Lo       HANGUL SYLLABLE RWEO
if(0xb904===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb920){// Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
if(0xb905<=code&&code<=0xb91f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RWE
if(0xb920===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xb9c8){if(code<0xb974){if(code<0xb93d){if(code<0xb93c){// Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
if(0xb921<=code&&code<=0xb93b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RWI
if(0xb93c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xb958){// Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
if(0xb93d<=code&&code<=0xb957){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb959){// Lo       HANGUL SYLLABLE RYU
if(0xb958===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
if(0xb959<=code&&code<=0xb973){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xb991){if(code<0xb975){// Lo       HANGUL SYLLABLE REU
if(0xb974===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xb990){// Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
if(0xb975<=code&&code<=0xb98f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE RYI
if(0xb990===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xb9ac){// Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
if(0xb991<=code&&code<=0xb9ab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xb9ad){// Lo       HANGUL SYLLABLE RI
if(0xb9ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
if(0xb9ad<=code&&code<=0xb9c7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xba01){if(code<0xb9e4){if(code<0xb9c9){// Lo       HANGUL SYLLABLE MA
if(0xb9c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
if(0xb9c9<=code&&code<=0xb9e3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xb9e5){// Lo       HANGUL SYLLABLE MAE
if(0xb9e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xba00){// Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
if(0xb9e5<=code&&code<=0xb9ff){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MYA
if(0xba00===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xba38){if(code<0xba1c){// Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
if(0xba01<=code&&code<=0xba1b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xba1d){// Lo       HANGUL SYLLABLE MYAE
if(0xba1c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
if(0xba1d<=code&&code<=0xba37){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xba39){// Lo       HANGUL SYLLABLE MEO
if(0xba38===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xba54){// Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
if(0xba39<=code&&code<=0xba53){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE ME
if(0xba54===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}else {if(code<0xbcbc){if(code<0xbb88){if(code<0xbae1){if(code<0xbaa8){if(code<0xba71){if(code<0xba70){// Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
if(0xba55<=code&&code<=0xba6f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MYEO
if(0xba70===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xba8c){// Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
if(0xba71<=code&&code<=0xba8b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xba8d){// Lo       HANGUL SYLLABLE MYE
if(0xba8c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
if(0xba8d<=code&&code<=0xbaa7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbac4){if(code<0xbaa9){// Lo       HANGUL SYLLABLE MO
if(0xbaa8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
if(0xbaa9<=code&&code<=0xbac3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbac5){// Lo       HANGUL SYLLABLE MWA
if(0xbac4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbae0){// Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
if(0xbac5<=code&&code<=0xbadf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MWAE
if(0xbae0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xbb34){if(code<0xbafd){if(code<0xbafc){// Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
if(0xbae1<=code&&code<=0xbafb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MOE
if(0xbafc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbb18){// Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
if(0xbafd<=code&&code<=0xbb17){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbb19){// Lo       HANGUL SYLLABLE MYO
if(0xbb18===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
if(0xbb19<=code&&code<=0xbb33){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbb51){if(code<0xbb35){// Lo       HANGUL SYLLABLE MU
if(0xbb34===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbb50){// Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
if(0xbb35<=code&&code<=0xbb4f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MWEO
if(0xbb50===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xbb6c){// Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
if(0xbb51<=code&&code<=0xbb6b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbb6d){// Lo       HANGUL SYLLABLE MWE
if(0xbb6c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
if(0xbb6d<=code&&code<=0xbb87){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xbc15){if(code<0xbbc1){if(code<0xbba4){if(code<0xbb89){// Lo       HANGUL SYLLABLE MWI
if(0xbb88===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
if(0xbb89<=code&&code<=0xbba3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbba5){// Lo       HANGUL SYLLABLE MYU
if(0xbba4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbbc0){// Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
if(0xbba5<=code&&code<=0xbbbf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE MEU
if(0xbbc0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xbbf8){if(code<0xbbdc){// Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
if(0xbbc1<=code&&code<=0xbbdb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbbdd){// Lo       HANGUL SYLLABLE MYI
if(0xbbdc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
if(0xbbdd<=code&&code<=0xbbf7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xbbf9){// Lo       HANGUL SYLLABLE MI
if(0xbbf8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbc14){// Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
if(0xbbf9<=code&&code<=0xbc13){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BA
if(0xbc14===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xbc68){if(code<0xbc31){if(code<0xbc30){// Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
if(0xbc15<=code&&code<=0xbc2f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BAE
if(0xbc30===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbc4c){// Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
if(0xbc31<=code&&code<=0xbc4b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbc4d){// Lo       HANGUL SYLLABLE BYA
if(0xbc4c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
if(0xbc4d<=code&&code<=0xbc67){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbc85){if(code<0xbc69){// Lo       HANGUL SYLLABLE BYAE
if(0xbc68===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbc84){// Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
if(0xbc69<=code&&code<=0xbc83){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BEO
if(0xbc84===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xbca0){// Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
if(0xbc85<=code&&code<=0xbc9f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbca1){// Lo       HANGUL SYLLABLE BE
if(0xbca0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
if(0xbca1<=code&&code<=0xbcbb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xbdd5){if(code<0xbd48){if(code<0xbcf5){if(code<0xbcd8){if(code<0xbcbd){// Lo       HANGUL SYLLABLE BYEO
if(0xbcbc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
if(0xbcbd<=code&&code<=0xbcd7){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbcd9){// Lo       HANGUL SYLLABLE BYE
if(0xbcd8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbcf4){// Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
if(0xbcd9<=code&&code<=0xbcf3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BO
if(0xbcf4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xbd11){if(code<0xbd10){// Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
if(0xbcf5<=code&&code<=0xbd0f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BWA
if(0xbd10===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbd2c){// Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
if(0xbd11<=code&&code<=0xbd2b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbd2d){// Lo       HANGUL SYLLABLE BWAE
if(0xbd2c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
if(0xbd2d<=code&&code<=0xbd47){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xbd81){if(code<0xbd64){if(code<0xbd49){// Lo       HANGUL SYLLABLE BOE
if(0xbd48===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
if(0xbd49<=code&&code<=0xbd63){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbd65){// Lo       HANGUL SYLLABLE BYO
if(0xbd64===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbd80){// Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
if(0xbd65<=code&&code<=0xbd7f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BU
if(0xbd80===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xbdb8){if(code<0xbd9c){// Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
if(0xbd81<=code&&code<=0xbd9b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbd9d){// Lo       HANGUL SYLLABLE BWEO
if(0xbd9c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
if(0xbd9d<=code&&code<=0xbdb7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xbdb9){// Lo       HANGUL SYLLABLE BWE
if(0xbdb8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbdd4){// Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
if(0xbdb9<=code&&code<=0xbdd3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BWI
if(0xbdd4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xbe7c){if(code<0xbe28){if(code<0xbdf1){if(code<0xbdf0){// Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
if(0xbdd5<=code&&code<=0xbdef){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BYU
if(0xbdf0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbe0c){// Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
if(0xbdf1<=code&&code<=0xbe0b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbe0d){// Lo       HANGUL SYLLABLE BEU
if(0xbe0c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
if(0xbe0d<=code&&code<=0xbe27){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbe45){if(code<0xbe29){// Lo       HANGUL SYLLABLE BYI
if(0xbe28===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbe44){// Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
if(0xbe29<=code&&code<=0xbe43){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BI
if(0xbe44===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xbe60){// Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
if(0xbe45<=code&&code<=0xbe5f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbe61){// Lo       HANGUL SYLLABLE BBA
if(0xbe60===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
if(0xbe61<=code&&code<=0xbe7b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xbeb5){if(code<0xbe98){if(code<0xbe7d){// Lo       HANGUL SYLLABLE BBAE
if(0xbe7c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
if(0xbe7d<=code&&code<=0xbe97){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbe99){// Lo       HANGUL SYLLABLE BBYA
if(0xbe98===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbeb4){// Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
if(0xbe99<=code&&code<=0xbeb3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYAE
if(0xbeb4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xbeec){if(code<0xbed0){// Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
if(0xbeb5<=code&&code<=0xbecf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbed1){// Lo       HANGUL SYLLABLE BBEO
if(0xbed0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
if(0xbed1<=code&&code<=0xbeeb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xbeed){// Lo       HANGUL SYLLABLE BBE
if(0xbeec===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbf08){// Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
if(0xbeed<=code&&code<=0xbf07){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYEO
if(0xbf08===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}}}}else {if(code<0xd1d8){if(code<0xc870){if(code<0xc3bc){if(code<0xc155){if(code<0xc03c){if(code<0xbf95){if(code<0xbf5c){if(code<0xbf25){if(code<0xbf24){// Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
if(0xbf09<=code&&code<=0xbf23){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYE
if(0xbf24===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbf40){// Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
if(0xbf25<=code&&code<=0xbf3f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbf41){// Lo       HANGUL SYLLABLE BBO
if(0xbf40===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
if(0xbf41<=code&&code<=0xbf5b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xbf78){if(code<0xbf5d){// Lo       HANGUL SYLLABLE BBWA
if(0xbf5c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
if(0xbf5d<=code&&code<=0xbf77){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xbf79){// Lo       HANGUL SYLLABLE BBWAE
if(0xbf78===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xbf94){// Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
if(0xbf79<=code&&code<=0xbf93){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBOE
if(0xbf94===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xbfe8){if(code<0xbfb1){if(code<0xbfb0){// Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
if(0xbf95<=code&&code<=0xbfaf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYO
if(0xbfb0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xbfcc){// Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
if(0xbfb1<=code&&code<=0xbfcb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xbfcd){// Lo       HANGUL SYLLABLE BBU
if(0xbfcc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
if(0xbfcd<=code&&code<=0xbfe7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc005){if(code<0xbfe9){// Lo       HANGUL SYLLABLE BBWEO
if(0xbfe8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc004){// Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
if(0xbfe9<=code&&code<=0xc003){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBWE
if(0xc004===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc020){// Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
if(0xc005<=code&&code<=0xc01f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc021){// Lo       HANGUL SYLLABLE BBWI
if(0xc020===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
if(0xc021<=code&&code<=0xc03b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xc0c8){if(code<0xc075){if(code<0xc058){if(code<0xc03d){// Lo       HANGUL SYLLABLE BBYU
if(0xc03c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
if(0xc03d<=code&&code<=0xc057){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc059){// Lo       HANGUL SYLLABLE BBEU
if(0xc058===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc074){// Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
if(0xc059<=code&&code<=0xc073){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBYI
if(0xc074===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc091){if(code<0xc090){// Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
if(0xc075<=code&&code<=0xc08f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE BBI
if(0xc090===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc0ac){// Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
if(0xc091<=code&&code<=0xc0ab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc0ad){// Lo       HANGUL SYLLABLE SA
if(0xc0ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
if(0xc0ad<=code&&code<=0xc0c7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xc101){if(code<0xc0e4){if(code<0xc0c9){// Lo       HANGUL SYLLABLE SAE
if(0xc0c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
if(0xc0c9<=code&&code<=0xc0e3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc0e5){// Lo       HANGUL SYLLABLE SYA
if(0xc0e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc100){// Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
if(0xc0e5<=code&&code<=0xc0ff){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYAE
if(0xc100===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc138){if(code<0xc11c){// Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
if(0xc101<=code&&code<=0xc11b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc11d){// Lo       HANGUL SYLLABLE SEO
if(0xc11c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
if(0xc11d<=code&&code<=0xc137){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc139){// Lo       HANGUL SYLLABLE SE
if(0xc138===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc154){// Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
if(0xc139<=code&&code<=0xc153){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYEO
if(0xc154===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}else {if(code<0xc288){if(code<0xc1e1){if(code<0xc1a8){if(code<0xc171){if(code<0xc170){// Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
if(0xc155<=code&&code<=0xc16f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYE
if(0xc170===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc18c){// Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
if(0xc171<=code&&code<=0xc18b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc18d){// Lo       HANGUL SYLLABLE SO
if(0xc18c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
if(0xc18d<=code&&code<=0xc1a7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc1c4){if(code<0xc1a9){// Lo       HANGUL SYLLABLE SWA
if(0xc1a8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
if(0xc1a9<=code&&code<=0xc1c3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc1c5){// Lo       HANGUL SYLLABLE SWAE
if(0xc1c4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc1e0){// Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
if(0xc1c5<=code&&code<=0xc1df){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SOE
if(0xc1e0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xc234){if(code<0xc1fd){if(code<0xc1fc){// Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
if(0xc1e1<=code&&code<=0xc1fb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYO
if(0xc1fc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc218){// Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
if(0xc1fd<=code&&code<=0xc217){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc219){// Lo       HANGUL SYLLABLE SU
if(0xc218===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
if(0xc219<=code&&code<=0xc233){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc251){if(code<0xc235){// Lo       HANGUL SYLLABLE SWEO
if(0xc234===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc250){// Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
if(0xc235<=code&&code<=0xc24f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SWE
if(0xc250===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc26c){// Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
if(0xc251<=code&&code<=0xc26b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc26d){// Lo       HANGUL SYLLABLE SWI
if(0xc26c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
if(0xc26d<=code&&code<=0xc287){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xc315){if(code<0xc2c1){if(code<0xc2a4){if(code<0xc289){// Lo       HANGUL SYLLABLE SYU
if(0xc288===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
if(0xc289<=code&&code<=0xc2a3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc2a5){// Lo       HANGUL SYLLABLE SEU
if(0xc2a4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc2c0){// Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
if(0xc2a5<=code&&code<=0xc2bf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SYI
if(0xc2c0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc2f8){if(code<0xc2dc){// Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
if(0xc2c1<=code&&code<=0xc2db){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc2dd){// Lo       HANGUL SYLLABLE SI
if(0xc2dc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
if(0xc2dd<=code&&code<=0xc2f7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc2f9){// Lo       HANGUL SYLLABLE SSA
if(0xc2f8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc314){// Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
if(0xc2f9<=code&&code<=0xc313){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSAE
if(0xc314===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xc368){if(code<0xc331){if(code<0xc330){// Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
if(0xc315<=code&&code<=0xc32f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSYA
if(0xc330===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc34c){// Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
if(0xc331<=code&&code<=0xc34b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc34d){// Lo       HANGUL SYLLABLE SSYAE
if(0xc34c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
if(0xc34d<=code&&code<=0xc367){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc385){if(code<0xc369){// Lo       HANGUL SYLLABLE SSEO
if(0xc368===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc384){// Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
if(0xc369<=code&&code<=0xc383){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSE
if(0xc384===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc3a0){// Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
if(0xc385<=code&&code<=0xc39f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc3a1){// Lo       HANGUL SYLLABLE SSYEO
if(0xc3a0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
if(0xc3a1<=code&&code<=0xc3bb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}else {if(code<0xc609){if(code<0xc4d5){if(code<0xc448){if(code<0xc3f5){if(code<0xc3d8){if(code<0xc3bd){// Lo       HANGUL SYLLABLE SSYE
if(0xc3bc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
if(0xc3bd<=code&&code<=0xc3d7){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc3d9){// Lo       HANGUL SYLLABLE SSO
if(0xc3d8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc3f4){// Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
if(0xc3d9<=code&&code<=0xc3f3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSWA
if(0xc3f4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc411){if(code<0xc410){// Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
if(0xc3f5<=code&&code<=0xc40f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSWAE
if(0xc410===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc42c){// Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
if(0xc411<=code&&code<=0xc42b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc42d){// Lo       HANGUL SYLLABLE SSOE
if(0xc42c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
if(0xc42d<=code&&code<=0xc447){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xc481){if(code<0xc464){if(code<0xc449){// Lo       HANGUL SYLLABLE SSYO
if(0xc448===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
if(0xc449<=code&&code<=0xc463){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc465){// Lo       HANGUL SYLLABLE SSU
if(0xc464===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc480){// Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
if(0xc465<=code&&code<=0xc47f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSWEO
if(0xc480===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc4b8){if(code<0xc49c){// Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
if(0xc481<=code&&code<=0xc49b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc49d){// Lo       HANGUL SYLLABLE SSWE
if(0xc49c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
if(0xc49d<=code&&code<=0xc4b7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc4b9){// Lo       HANGUL SYLLABLE SSWI
if(0xc4b8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc4d4){// Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
if(0xc4b9<=code&&code<=0xc4d3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSYU
if(0xc4d4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xc57c){if(code<0xc528){if(code<0xc4f1){if(code<0xc4f0){// Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
if(0xc4d5<=code&&code<=0xc4ef){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE SSEU
if(0xc4f0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc50c){// Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
if(0xc4f1<=code&&code<=0xc50b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc50d){// Lo       HANGUL SYLLABLE SSYI
if(0xc50c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
if(0xc50d<=code&&code<=0xc527){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc545){if(code<0xc529){// Lo       HANGUL SYLLABLE SSI
if(0xc528===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc544){// Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
if(0xc529<=code&&code<=0xc543){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE A
if(0xc544===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc560){// Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
if(0xc545<=code&&code<=0xc55f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc561){// Lo       HANGUL SYLLABLE AE
if(0xc560===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
if(0xc561<=code&&code<=0xc57b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xc5b5){if(code<0xc598){if(code<0xc57d){// Lo       HANGUL SYLLABLE YA
if(0xc57c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
if(0xc57d<=code&&code<=0xc597){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc599){// Lo       HANGUL SYLLABLE YAE
if(0xc598===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc5b4){// Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
if(0xc599<=code&&code<=0xc5b3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE EO
if(0xc5b4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc5ec){if(code<0xc5d0){// Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
if(0xc5b5<=code&&code<=0xc5cf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc5d1){// Lo       HANGUL SYLLABLE E
if(0xc5d0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
if(0xc5d1<=code&&code<=0xc5eb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc5ed){// Lo       HANGUL SYLLABLE YEO
if(0xc5ec===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc608){// Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
if(0xc5ed<=code&&code<=0xc607){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE YE
if(0xc608===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}else {if(code<0xc73c){if(code<0xc695){if(code<0xc65c){if(code<0xc625){if(code<0xc624){// Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
if(0xc609<=code&&code<=0xc623){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE O
if(0xc624===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc640){// Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
if(0xc625<=code&&code<=0xc63f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc641){// Lo       HANGUL SYLLABLE WA
if(0xc640===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
if(0xc641<=code&&code<=0xc65b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc678){if(code<0xc65d){// Lo       HANGUL SYLLABLE WAE
if(0xc65c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
if(0xc65d<=code&&code<=0xc677){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc679){// Lo       HANGUL SYLLABLE OE
if(0xc678===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc694){// Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
if(0xc679<=code&&code<=0xc693){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE YO
if(0xc694===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xc6e8){if(code<0xc6b1){if(code<0xc6b0){// Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
if(0xc695<=code&&code<=0xc6af){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE U
if(0xc6b0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc6cc){// Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
if(0xc6b1<=code&&code<=0xc6cb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc6cd){// Lo       HANGUL SYLLABLE WEO
if(0xc6cc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
if(0xc6cd<=code&&code<=0xc6e7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc705){if(code<0xc6e9){// Lo       HANGUL SYLLABLE WE
if(0xc6e8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc704){// Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
if(0xc6e9<=code&&code<=0xc703){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE WI
if(0xc704===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc720){// Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
if(0xc705<=code&&code<=0xc71f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc721){// Lo       HANGUL SYLLABLE YU
if(0xc720===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
if(0xc721<=code&&code<=0xc73b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xc7c9){if(code<0xc775){if(code<0xc758){if(code<0xc73d){// Lo       HANGUL SYLLABLE EU
if(0xc73c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
if(0xc73d<=code&&code<=0xc757){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc759){// Lo       HANGUL SYLLABLE YI
if(0xc758===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc774){// Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
if(0xc759<=code&&code<=0xc773){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE I
if(0xc774===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc7ac){if(code<0xc790){// Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
if(0xc775<=code&&code<=0xc78f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc791){// Lo       HANGUL SYLLABLE JA
if(0xc790===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
if(0xc791<=code&&code<=0xc7ab){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc7ad){// Lo       HANGUL SYLLABLE JAE
if(0xc7ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc7c8){// Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
if(0xc7ad<=code&&code<=0xc7c7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JYA
if(0xc7c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xc81c){if(code<0xc7e5){if(code<0xc7e4){// Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
if(0xc7c9<=code&&code<=0xc7e3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JYAE
if(0xc7e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc800){// Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
if(0xc7e5<=code&&code<=0xc7ff){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc801){// Lo       HANGUL SYLLABLE JEO
if(0xc800===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
if(0xc801<=code&&code<=0xc81b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc839){if(code<0xc81d){// Lo       HANGUL SYLLABLE JE
if(0xc81c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc838){// Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
if(0xc81d<=code&&code<=0xc837){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JYEO
if(0xc838===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xc854){// Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
if(0xc839<=code&&code<=0xc853){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc855){// Lo       HANGUL SYLLABLE JYE
if(0xc854===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
if(0xc855<=code&&code<=0xc86f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}}else {if(code<0xcd24){if(code<0xcabd){if(code<0xc989){if(code<0xc8fc){if(code<0xc8a9){if(code<0xc88c){if(code<0xc871){// Lo       HANGUL SYLLABLE JO
if(0xc870===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
if(0xc871<=code&&code<=0xc88b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc88d){// Lo       HANGUL SYLLABLE JWA
if(0xc88c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc8a8){// Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
if(0xc88d<=code&&code<=0xc8a7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JWAE
if(0xc8a8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc8c5){if(code<0xc8c4){// Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
if(0xc8a9<=code&&code<=0xc8c3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JOE
if(0xc8c4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc8e0){// Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
if(0xc8c5<=code&&code<=0xc8df){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc8e1){// Lo       HANGUL SYLLABLE JYO
if(0xc8e0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
if(0xc8e1<=code&&code<=0xc8fb){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xc935){if(code<0xc918){if(code<0xc8fd){// Lo       HANGUL SYLLABLE JU
if(0xc8fc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
if(0xc8fd<=code&&code<=0xc917){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xc919){// Lo       HANGUL SYLLABLE JWEO
if(0xc918===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc934){// Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
if(0xc919<=code&&code<=0xc933){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JWE
if(0xc934===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xc96c){if(code<0xc950){// Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
if(0xc935<=code&&code<=0xc94f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc951){// Lo       HANGUL SYLLABLE JWI
if(0xc950===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
if(0xc951<=code&&code<=0xc96b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xc96d){// Lo       HANGUL SYLLABLE JYU
if(0xc96c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc988){// Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
if(0xc96d<=code&&code<=0xc987){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JEU
if(0xc988===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xca30){if(code<0xc9dc){if(code<0xc9a5){if(code<0xc9a4){// Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
if(0xc989<=code&&code<=0xc9a3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JYI
if(0xc9a4===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xc9c0){// Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
if(0xc9a5<=code&&code<=0xc9bf){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xc9c1){// Lo       HANGUL SYLLABLE JI
if(0xc9c0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
if(0xc9c1<=code&&code<=0xc9db){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xc9f9){if(code<0xc9dd){// Lo       HANGUL SYLLABLE JJA
if(0xc9dc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xc9f8){// Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
if(0xc9dd<=code&&code<=0xc9f7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJAE
if(0xc9f8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xca14){// Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
if(0xc9f9<=code&&code<=0xca13){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xca15){// Lo       HANGUL SYLLABLE JJYA
if(0xca14===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
if(0xca15<=code&&code<=0xca2f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xca69){if(code<0xca4c){if(code<0xca31){// Lo       HANGUL SYLLABLE JJYAE
if(0xca30===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
if(0xca31<=code&&code<=0xca4b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xca4d){// Lo       HANGUL SYLLABLE JJEO
if(0xca4c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xca68){// Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
if(0xca4d<=code&&code<=0xca67){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJE
if(0xca68===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xcaa0){if(code<0xca84){// Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
if(0xca69<=code&&code<=0xca83){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xca85){// Lo       HANGUL SYLLABLE JJYEO
if(0xca84===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
if(0xca85<=code&&code<=0xca9f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xcaa1){// Lo       HANGUL SYLLABLE JJYE
if(0xcaa0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcabc){// Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
if(0xcaa1<=code&&code<=0xcabb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJO
if(0xcabc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}else {if(code<0xcbf0){if(code<0xcb49){if(code<0xcb10){if(code<0xcad9){if(code<0xcad8){// Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
if(0xcabd<=code&&code<=0xcad7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJWA
if(0xcad8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xcaf4){// Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
if(0xcad9<=code&&code<=0xcaf3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcaf5){// Lo       HANGUL SYLLABLE JJWAE
if(0xcaf4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
if(0xcaf5<=code&&code<=0xcb0f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcb2c){if(code<0xcb11){// Lo       HANGUL SYLLABLE JJOE
if(0xcb10===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
if(0xcb11<=code&&code<=0xcb2b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcb2d){// Lo       HANGUL SYLLABLE JJYO
if(0xcb2c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcb48){// Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
if(0xcb2d<=code&&code<=0xcb47){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJU
if(0xcb48===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xcb9c){if(code<0xcb65){if(code<0xcb64){// Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
if(0xcb49<=code&&code<=0xcb63){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJWEO
if(0xcb64===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xcb80){// Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
if(0xcb65<=code&&code<=0xcb7f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcb81){// Lo       HANGUL SYLLABLE JJWE
if(0xcb80===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
if(0xcb81<=code&&code<=0xcb9b){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcbb9){if(code<0xcb9d){// Lo       HANGUL SYLLABLE JJWI
if(0xcb9c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcbb8){// Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
if(0xcb9d<=code&&code<=0xcbb7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE JJYU
if(0xcbb8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xcbd4){// Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
if(0xcbb9<=code&&code<=0xcbd3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcbd5){// Lo       HANGUL SYLLABLE JJEU
if(0xcbd4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
if(0xcbd5<=code&&code<=0xcbef){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xcc7d){if(code<0xcc29){if(code<0xcc0c){if(code<0xcbf1){// Lo       HANGUL SYLLABLE JJYI
if(0xcbf0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
if(0xcbf1<=code&&code<=0xcc0b){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcc0d){// Lo       HANGUL SYLLABLE JJI
if(0xcc0c===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcc28){// Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
if(0xcc0d<=code&&code<=0xcc27){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CA
if(0xcc28===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xcc60){if(code<0xcc44){// Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
if(0xcc29<=code&&code<=0xcc43){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcc45){// Lo       HANGUL SYLLABLE CAE
if(0xcc44===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
if(0xcc45<=code&&code<=0xcc5f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xcc61){// Lo       HANGUL SYLLABLE CYA
if(0xcc60===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcc7c){// Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
if(0xcc61<=code&&code<=0xcc7b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CYAE
if(0xcc7c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xccd0){if(code<0xcc99){if(code<0xcc98){// Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
if(0xcc7d<=code&&code<=0xcc97){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CEO
if(0xcc98===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xccb4){// Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
if(0xcc99<=code&&code<=0xccb3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xccb5){// Lo       HANGUL SYLLABLE CE
if(0xccb4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
if(0xccb5<=code&&code<=0xcccf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcced){if(code<0xccd1){// Lo       HANGUL SYLLABLE CYEO
if(0xccd0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xccec){// Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
if(0xccd1<=code&&code<=0xcceb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CYE
if(0xccec===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xcd08){// Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
if(0xcced<=code&&code<=0xcd07){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcd09){// Lo       HANGUL SYLLABLE CO
if(0xcd08===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
if(0xcd09<=code&&code<=0xcd23){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}else {if(code<0xcf71){if(code<0xce3d){if(code<0xcdb0){if(code<0xcd5d){if(code<0xcd40){if(code<0xcd25){// Lo       HANGUL SYLLABLE CWA
if(0xcd24===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
if(0xcd25<=code&&code<=0xcd3f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcd41){// Lo       HANGUL SYLLABLE CWAE
if(0xcd40===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcd5c){// Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
if(0xcd41<=code&&code<=0xcd5b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE COE
if(0xcd5c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xcd79){if(code<0xcd78){// Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
if(0xcd5d<=code&&code<=0xcd77){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CYO
if(0xcd78===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xcd94){// Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
if(0xcd79<=code&&code<=0xcd93){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcd95){// Lo       HANGUL SYLLABLE CU
if(0xcd94===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
if(0xcd95<=code&&code<=0xcdaf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xcde9){if(code<0xcdcc){if(code<0xcdb1){// Lo       HANGUL SYLLABLE CWEO
if(0xcdb0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
if(0xcdb1<=code&&code<=0xcdcb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcdcd){// Lo       HANGUL SYLLABLE CWE
if(0xcdcc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcde8){// Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
if(0xcdcd<=code&&code<=0xcde7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CWI
if(0xcde8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xce20){if(code<0xce04){// Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
if(0xcde9<=code&&code<=0xce03){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xce05){// Lo       HANGUL SYLLABLE CYU
if(0xce04===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
if(0xce05<=code&&code<=0xce1f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xce21){// Lo       HANGUL SYLLABLE CEU
if(0xce20===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xce3c){// Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
if(0xce21<=code&&code<=0xce3b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CYI
if(0xce3c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xcee4){if(code<0xce90){if(code<0xce59){if(code<0xce58){// Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
if(0xce3d<=code&&code<=0xce57){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE CI
if(0xce58===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xce74){// Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
if(0xce59<=code&&code<=0xce73){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xce75){// Lo       HANGUL SYLLABLE KA
if(0xce74===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
if(0xce75<=code&&code<=0xce8f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcead){if(code<0xce91){// Lo       HANGUL SYLLABLE KAE
if(0xce90===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xceac){// Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
if(0xce91<=code&&code<=0xceab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KYA
if(0xceac===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xcec8){// Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
if(0xcead<=code&&code<=0xcec7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcec9){// Lo       HANGUL SYLLABLE KYAE
if(0xcec8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
if(0xcec9<=code&&code<=0xcee3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xcf1d){if(code<0xcf00){if(code<0xcee5){// Lo       HANGUL SYLLABLE KEO
if(0xcee4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
if(0xcee5<=code&&code<=0xceff){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcf01){// Lo       HANGUL SYLLABLE KE
if(0xcf00===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcf1c){// Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
if(0xcf01<=code&&code<=0xcf1b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KYEO
if(0xcf1c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xcf54){if(code<0xcf38){// Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
if(0xcf1d<=code&&code<=0xcf37){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcf39){// Lo       HANGUL SYLLABLE KYE
if(0xcf38===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
if(0xcf39<=code&&code<=0xcf53){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xcf55){// Lo       HANGUL SYLLABLE KO
if(0xcf54===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcf70){// Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
if(0xcf55<=code&&code<=0xcf6f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KWA
if(0xcf70===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}else {if(code<0xd0a4){if(code<0xcffd){if(code<0xcfc4){if(code<0xcf8d){if(code<0xcf8c){// Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
if(0xcf71<=code&&code<=0xcf8b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KWAE
if(0xcf8c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xcfa8){// Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
if(0xcf8d<=code&&code<=0xcfa7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xcfa9){// Lo       HANGUL SYLLABLE KOE
if(0xcfa8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
if(0xcfa9<=code&&code<=0xcfc3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xcfe0){if(code<0xcfc5){// Lo       HANGUL SYLLABLE KYO
if(0xcfc4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
if(0xcfc5<=code&&code<=0xcfdf){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xcfe1){// Lo       HANGUL SYLLABLE KU
if(0xcfe0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xcffc){// Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
if(0xcfe1<=code&&code<=0xcffb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KWEO
if(0xcffc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xd050){if(code<0xd019){if(code<0xd018){// Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
if(0xcffd<=code&&code<=0xd017){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KWE
if(0xd018===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd034){// Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
if(0xd019<=code&&code<=0xd033){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd035){// Lo       HANGUL SYLLABLE KWI
if(0xd034===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
if(0xd035<=code&&code<=0xd04f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd06d){if(code<0xd051){// Lo       HANGUL SYLLABLE KYU
if(0xd050===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd06c){// Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
if(0xd051<=code&&code<=0xd06b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE KEU
if(0xd06c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd088){// Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
if(0xd06d<=code&&code<=0xd087){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd089){// Lo       HANGUL SYLLABLE KYI
if(0xd088===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
if(0xd089<=code&&code<=0xd0a3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0xd131){if(code<0xd0dd){if(code<0xd0c0){if(code<0xd0a5){// Lo       HANGUL SYLLABLE KI
if(0xd0a4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
if(0xd0a5<=code&&code<=0xd0bf){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd0c1){// Lo       HANGUL SYLLABLE TA
if(0xd0c0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd0dc){// Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
if(0xd0c1<=code&&code<=0xd0db){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TAE
if(0xd0dc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd114){if(code<0xd0f8){// Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
if(0xd0dd<=code&&code<=0xd0f7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd0f9){// Lo       HANGUL SYLLABLE TYA
if(0xd0f8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
if(0xd0f9<=code&&code<=0xd113){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xd115){// Lo       HANGUL SYLLABLE TYAE
if(0xd114===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd130){// Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
if(0xd115<=code&&code<=0xd12f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TEO
if(0xd130===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xd184){if(code<0xd14d){if(code<0xd14c){// Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
if(0xd131<=code&&code<=0xd14b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TE
if(0xd14c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd168){// Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
if(0xd14d<=code&&code<=0xd167){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd169){// Lo       HANGUL SYLLABLE TYEO
if(0xd168===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
if(0xd169<=code&&code<=0xd183){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd1a1){if(code<0xd185){// Lo       HANGUL SYLLABLE TYE
if(0xd184===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd1a0){// Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
if(0xd185<=code&&code<=0xd19f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TO
if(0xd1a0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd1bc){// Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
if(0xd1a1<=code&&code<=0xd1bb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd1bd){// Lo       HANGUL SYLLABLE TWA
if(0xd1bc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
if(0xd1bd<=code&&code<=0xd1d7){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}}}}else {if(code<0x1133b){if(code<0xd671){if(code<0xd424){if(code<0xd2f1){if(code<0xd264){if(code<0xd211){if(code<0xd1f4){if(code<0xd1d9){// Lo       HANGUL SYLLABLE TWAE
if(0xd1d8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
if(0xd1d9<=code&&code<=0xd1f3){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd1f5){// Lo       HANGUL SYLLABLE TOE
if(0xd1f4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd210){// Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
if(0xd1f5<=code&&code<=0xd20f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TYO
if(0xd210===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd22d){if(code<0xd22c){// Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
if(0xd211<=code&&code<=0xd22b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TU
if(0xd22c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd248){// Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
if(0xd22d<=code&&code<=0xd247){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd249){// Lo       HANGUL SYLLABLE TWEO
if(0xd248===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
if(0xd249<=code&&code<=0xd263){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xd29d){if(code<0xd280){if(code<0xd265){// Lo       HANGUL SYLLABLE TWE
if(0xd264===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
if(0xd265<=code&&code<=0xd27f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd281){// Lo       HANGUL SYLLABLE TWI
if(0xd280===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd29c){// Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
if(0xd281<=code&&code<=0xd29b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TYU
if(0xd29c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd2d4){if(code<0xd2b8){// Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
if(0xd29d<=code&&code<=0xd2b7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd2b9){// Lo       HANGUL SYLLABLE TEU
if(0xd2b8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
if(0xd2b9<=code&&code<=0xd2d3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xd2d5){// Lo       HANGUL SYLLABLE TYI
if(0xd2d4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd2f0){// Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
if(0xd2d5<=code&&code<=0xd2ef){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE TI
if(0xd2f0===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xd37d){if(code<0xd344){if(code<0xd30d){if(code<0xd30c){// Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
if(0xd2f1<=code&&code<=0xd30b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PA
if(0xd30c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd328){// Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
if(0xd30d<=code&&code<=0xd327){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd329){// Lo       HANGUL SYLLABLE PAE
if(0xd328===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
if(0xd329<=code&&code<=0xd343){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd360){if(code<0xd345){// Lo       HANGUL SYLLABLE PYA
if(0xd344===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
if(0xd345<=code&&code<=0xd35f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd361){// Lo       HANGUL SYLLABLE PYAE
if(0xd360===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd37c){// Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
if(0xd361<=code&&code<=0xd37b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PEO
if(0xd37c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xd3d0){if(code<0xd399){if(code<0xd398){// Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
if(0xd37d<=code&&code<=0xd397){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PE
if(0xd398===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd3b4){// Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
if(0xd399<=code&&code<=0xd3b3){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd3b5){// Lo       HANGUL SYLLABLE PYEO
if(0xd3b4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
if(0xd3b5<=code&&code<=0xd3cf){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd3ed){if(code<0xd3d1){// Lo       HANGUL SYLLABLE PYE
if(0xd3d0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd3ec){// Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
if(0xd3d1<=code&&code<=0xd3eb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PO
if(0xd3ec===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd408){// Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
if(0xd3ed<=code&&code<=0xd407){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd409){// Lo       HANGUL SYLLABLE PWA
if(0xd408===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
if(0xd409<=code&&code<=0xd423){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}}else {if(code<0xd53d){if(code<0xd4b0){if(code<0xd45d){if(code<0xd440){if(code<0xd425){// Lo       HANGUL SYLLABLE PWAE
if(0xd424===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
if(0xd425<=code&&code<=0xd43f){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd441){// Lo       HANGUL SYLLABLE POE
if(0xd440===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd45c){// Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
if(0xd441<=code&&code<=0xd45b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PYO
if(0xd45c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd479){if(code<0xd478){// Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
if(0xd45d<=code&&code<=0xd477){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PU
if(0xd478===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd494){// Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
if(0xd479<=code&&code<=0xd493){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd495){// Lo       HANGUL SYLLABLE PWEO
if(0xd494===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
if(0xd495<=code&&code<=0xd4af){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xd4e9){if(code<0xd4cc){if(code<0xd4b1){// Lo       HANGUL SYLLABLE PWE
if(0xd4b0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
if(0xd4b1<=code&&code<=0xd4cb){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd4cd){// Lo       HANGUL SYLLABLE PWI
if(0xd4cc===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd4e8){// Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
if(0xd4cd<=code&&code<=0xd4e7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PYU
if(0xd4e8===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd520){if(code<0xd504){// Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
if(0xd4e9<=code&&code<=0xd503){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd505){// Lo       HANGUL SYLLABLE PEU
if(0xd504===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
if(0xd505<=code&&code<=0xd51f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xd521){// Lo       HANGUL SYLLABLE PYI
if(0xd520===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd53c){// Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
if(0xd521<=code&&code<=0xd53b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE PI
if(0xd53c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}else {if(code<0xd5e4){if(code<0xd590){if(code<0xd559){if(code<0xd558){// Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
if(0xd53d<=code&&code<=0xd557){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HA
if(0xd558===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd574){// Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
if(0xd559<=code&&code<=0xd573){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd575){// Lo       HANGUL SYLLABLE HAE
if(0xd574===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
if(0xd575<=code&&code<=0xd58f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd5ad){if(code<0xd591){// Lo       HANGUL SYLLABLE HYA
if(0xd590===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd5ac){// Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
if(0xd591<=code&&code<=0xd5ab){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HYAE
if(0xd5ac===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd5c8){// Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
if(0xd5ad<=code&&code<=0xd5c7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd5c9){// Lo       HANGUL SYLLABLE HEO
if(0xd5c8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
if(0xd5c9<=code&&code<=0xd5e3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}else {if(code<0xd61d){if(code<0xd600){if(code<0xd5e5){// Lo       HANGUL SYLLABLE HE
if(0xd5e4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
if(0xd5e5<=code&&code<=0xd5ff){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd601){// Lo       HANGUL SYLLABLE HYEO
if(0xd600===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd61c){// Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
if(0xd601<=code&&code<=0xd61b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HYE
if(0xd61c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}else {if(code<0xd654){if(code<0xd638){// Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
if(0xd61d<=code&&code<=0xd637){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd639){// Lo       HANGUL SYLLABLE HO
if(0xd638===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
if(0xd639<=code&&code<=0xd653){return boundaries_1.CLUSTER_BREAK.LVT;}}}}else {if(code<0xd655){// Lo       HANGUL SYLLABLE HWA
if(0xd654===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd670){// Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
if(0xd655<=code&&code<=0xd66f){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HWAE
if(0xd670===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}}}}else {if(code<0x11000){if(code<0xd7b0){if(code<0xd6fd){if(code<0xd6c4){if(code<0xd68d){if(code<0xd68c){// Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
if(0xd671<=code&&code<=0xd68b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HOE
if(0xd68c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd6a8){// Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
if(0xd68d<=code&&code<=0xd6a7){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd6a9){// Lo       HANGUL SYLLABLE HYO
if(0xd6a8===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
if(0xd6a9<=code&&code<=0xd6c3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd6e0){if(code<0xd6c5){// Lo       HANGUL SYLLABLE HU
if(0xd6c4===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
if(0xd6c5<=code&&code<=0xd6df){return boundaries_1.CLUSTER_BREAK.LVT;}}}else {if(code<0xd6e1){// Lo       HANGUL SYLLABLE HWEO
if(0xd6e0===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd6fc){// Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
if(0xd6e1<=code&&code<=0xd6fb){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HWE
if(0xd6fc===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}}}else {if(code<0xd750){if(code<0xd719){if(code<0xd718){// Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
if(0xd6fd<=code&&code<=0xd717){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HWI
if(0xd718===code){return boundaries_1.CLUSTER_BREAK.LV;}}}else {if(code<0xd734){// Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
if(0xd719<=code&&code<=0xd733){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd735){// Lo       HANGUL SYLLABLE HYU
if(0xd734===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
if(0xd735<=code&&code<=0xd74f){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}else {if(code<0xd76d){if(code<0xd751){// Lo       HANGUL SYLLABLE HEU
if(0xd750===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {if(code<0xd76c){// Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
if(0xd751<=code&&code<=0xd76b){return boundaries_1.CLUSTER_BREAK.LVT;}}else {// Lo       HANGUL SYLLABLE HYI
if(0xd76c===code){return boundaries_1.CLUSTER_BREAK.LV;}}}}else {if(code<0xd788){// Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
if(0xd76d<=code&&code<=0xd787){return boundaries_1.CLUSTER_BREAK.LVT;}}else {if(code<0xd789){// Lo       HANGUL SYLLABLE HI
if(0xd788===code){return boundaries_1.CLUSTER_BREAK.LV;}}else {// Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
if(0xd789<=code&&code<=0xd7a3){return boundaries_1.CLUSTER_BREAK.LVT;}}}}}}}else {if(code<0x10a01){if(code<0xfeff){if(code<0xfb1e){if(code<0xd7cb){// Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
if(0xd7b0<=code&&code<=0xd7c6){return boundaries_1.CLUSTER_BREAK.V;}}else {// Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
if(0xd7cb<=code&&code<=0xd7fb){return boundaries_1.CLUSTER_BREAK.T;}}}else {if(code<0xfe00){// Mn       HEBREW POINT JUDEO-SPANISH VARIKA
if(0xfb1e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xfe20){// Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
if(0xfe00<=code&&code<=0xfe0f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
if(0xfe20<=code&&code<=0xfe2f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x101fd){if(code<0xff9e){// Cf       ZERO WIDTH NO-BREAK SPACE
if(0xfeff===code){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0xfff0){// Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
if(0xff9e<=code&&code<=0xff9f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cn   [9] <reserved-FFF0>..<reserved-FFF8>
// Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
if(0xfff0<=code&&code<=0xfffb){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}}else {if(code<0x102e0){// Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
if(0x101fd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x10376){// Mn       COPTIC EPACT THOUSANDS MARK
if(0x102e0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
if(0x10376<=code&&code<=0x1037a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x10ae5){if(code<0x10a0c){if(code<0x10a05){// Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
if(0x10a01<=code&&code<=0x10a03){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
if(0x10a05<=code&&code<=0x10a06){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x10a38){// Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
if(0x10a0c<=code&&code<=0x10a0f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x10a3f){// Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
if(0x10a38<=code&&code<=0x10a3a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       KHAROSHTHI VIRAMA
if(0x10a3f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x10efd){if(code<0x10d24){// Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
if(0x10ae5<=code&&code<=0x10ae6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x10eab){// Mn   [4] HANIFI ROHINGYA SIGN HARBAHAY..HANIFI ROHINGYA SIGN TASSI
if(0x10d24<=code&&code<=0x10d27){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] YEZIDI COMBINING HAMZA MARK..YEZIDI COMBINING MADDA MARK
if(0x10eab<=code&&code<=0x10eac){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x10f46){// Mn   [3] ARABIC SMALL LOW WORD SAKTA..ARABIC SMALL LOW WORD MADDA
if(0x10efd<=code&&code<=0x10eff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x10f82){// Mn  [11] SOGDIAN COMBINING DOT BELOW..SOGDIAN COMBINING STROKE BELOW
if(0x10f46<=code&&code<=0x10f50){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [4] OLD UYGHUR COMBINING DOT ABOVE..OLD UYGHUR COMBINING TWO DOTS BELOW
if(0x10f82<=code&&code<=0x10f85){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0x11180){if(code<0x110b7){if(code<0x11073){if(code<0x11002){// Mc       BRAHMI SIGN CANDRABINDU
if(0x11000===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       BRAHMI SIGN ANUSVARA
if(0x11001===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11038){// Mc       BRAHMI SIGN VISARGA
if(0x11002===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11070){// Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
if(0x11038<=code&&code<=0x11046){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       BRAHMI SIGN OLD TAMIL VIRAMA
if(0x11070===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x11082){if(code<0x1107f){// Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O
if(0x11073<=code&&code<=0x11074){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
if(0x1107f<=code&&code<=0x11081){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x110b0){// Mc       KAITHI SIGN VISARGA
if(0x11082===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x110b3){// Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
if(0x110b0<=code&&code<=0x110b2){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
if(0x110b3<=code&&code<=0x110b6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11100){if(code<0x110bd){if(code<0x110b9){// Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
if(0x110b7<=code&&code<=0x110b8){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
if(0x110b9<=code&&code<=0x110ba){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x110c2){// Cf       KAITHI NUMBER SIGN
if(0x110bd===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {// Mn       KAITHI VOWEL SIGN VOCALIC R
if(0x110c2===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Cf       KAITHI NUMBER SIGN ABOVE
if(0x110cd===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}}}else {if(code<0x1112d){if(code<0x11127){// Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
if(0x11100<=code&&code<=0x11102){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1112c){// Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
if(0x11127<=code&&code<=0x1112b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       CHAKMA VOWEL SIGN E
if(0x1112c===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x11145){// Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
if(0x1112d<=code&&code<=0x11134){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11173){// Mc   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI
if(0x11145<=code&&code<=0x11146){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       MAHAJANI SIGN NUKTA
if(0x11173===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0x11232){if(code<0x111c2){if(code<0x111b3){if(code<0x11182){// Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
if(0x11180<=code&&code<=0x11181){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       SHARADA SIGN VISARGA
if(0x11182===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x111b6){// Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
if(0x111b3<=code&&code<=0x111b5){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x111bf){// Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
if(0x111b6<=code&&code<=0x111be){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
if(0x111bf<=code&&code<=0x111c0){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x111cf){if(code<0x111c9){// Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA
if(0x111c2<=code&&code<=0x111c3){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {if(code<0x111ce){// Mn   [4] SHARADA SANDHI MARK..SHARADA EXTRA SHORT VOWEL MARK
if(0x111c9<=code&&code<=0x111cc){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       SHARADA VOWEL SIGN PRISHTHAMATRA E
if(0x111ce===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1122c){// Mn       SHARADA SIGN INVERTED CANDRABINDU
if(0x111cf===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1122f){// Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
if(0x1122c<=code&&code<=0x1122e){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
if(0x1122f<=code&&code<=0x11231){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11241){if(code<0x11235){if(code<0x11234){// Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
if(0x11232<=code&&code<=0x11233){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       KHOJKI SIGN ANUSVARA
if(0x11234===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11236){// Mc       KHOJKI SIGN VIRAMA
if(0x11235===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1123e){// Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
if(0x11236<=code&&code<=0x11237){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       KHOJKI SIGN SUKUN
if(0x1123e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x112e3){if(code<0x112df){// Mn       KHOJKI VOWEL SIGN VOCALIC R
if(0x11241===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x112e0){// Mn       KHUDAWADI SIGN ANUSVARA
if(0x112df===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
if(0x112e0<=code&&code<=0x112e2){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x11300){// Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
if(0x112e3<=code&&code<=0x112ea){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11302){// Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
if(0x11300<=code&&code<=0x11301){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
if(0x11302<=code&&code<=0x11303){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}}}}else {if(code<0x11a97){if(code<0x116ab){if(code<0x114b9){if(code<0x11370){if(code<0x11347){if(code<0x1133f){if(code<0x1133e){// Mn   [2] COMBINING BINDU BELOW..GRANTHA SIGN NUKTA
if(0x1133b<=code&&code<=0x1133c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       GRANTHA VOWEL SIGN AA
if(0x1133e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11340){// Mc       GRANTHA VOWEL SIGN I
if(0x1133f===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11341){// Mn       GRANTHA VOWEL SIGN II
if(0x11340===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
if(0x11341<=code&&code<=0x11344){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x11357){if(code<0x1134b){// Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
if(0x11347<=code&&code<=0x11348){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
if(0x1134b<=code&&code<=0x1134d){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11362){// Mc       GRANTHA AU LENGTH MARK
if(0x11357===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11366){// Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
if(0x11362<=code&&code<=0x11363){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
if(0x11366<=code&&code<=0x1136c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11445){if(code<0x11438){if(code<0x11435){// Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
if(0x11370<=code&&code<=0x11374){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II
if(0x11435<=code&&code<=0x11437){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11440){// Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI
if(0x11438<=code&&code<=0x1143f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11442){// Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU
if(0x11440<=code&&code<=0x11441){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA
if(0x11442<=code&&code<=0x11444){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x114b0){if(code<0x11446){// Mc       NEWA SIGN VISARGA
if(0x11445===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       NEWA SIGN NUKTA
if(0x11446===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mn       NEWA SANDHI MARK
if(0x1145e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x114b1){// Mc       TIRHUTA VOWEL SIGN AA
if(0x114b0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x114b3){// Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
if(0x114b1<=code&&code<=0x114b2){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
if(0x114b3<=code&&code<=0x114b8){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0x115b8){if(code<0x114bf){if(code<0x114bb){// Mc       TIRHUTA VOWEL SIGN E
if(0x114b9===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       TIRHUTA VOWEL SIGN SHORT E
if(0x114ba===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x114bd){// Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
if(0x114bb<=code&&code<=0x114bc){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc       TIRHUTA VOWEL SIGN SHORT O
if(0x114bd===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       TIRHUTA VOWEL SIGN AU
if(0x114be===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x115af){if(code<0x114c1){// Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
if(0x114bf<=code&&code<=0x114c0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x114c2){// Mc       TIRHUTA SIGN VISARGA
if(0x114c1===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
if(0x114c2<=code&&code<=0x114c3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x115b0){// Mc       SIDDHAM VOWEL SIGN AA
if(0x115af===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x115b2){// Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
if(0x115b0<=code&&code<=0x115b1){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
if(0x115b2<=code&&code<=0x115b5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11630){if(code<0x115be){if(code<0x115bc){// Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
if(0x115b8<=code&&code<=0x115bb){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
if(0x115bc<=code&&code<=0x115bd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x115bf){// Mc       SIDDHAM SIGN VISARGA
if(0x115be===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x115dc){// Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
if(0x115bf<=code&&code<=0x115c0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
if(0x115dc<=code&&code<=0x115dd){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1163d){if(code<0x11633){// Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
if(0x11630<=code&&code<=0x11632){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x1163b){// Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
if(0x11633<=code&&code<=0x1163a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
if(0x1163b<=code&&code<=0x1163c){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1163e){// Mn       MODI SIGN ANUSVARA
if(0x1163d===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1163f){// Mc       MODI SIGN VISARGA
if(0x1163e===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
if(0x1163f<=code&&code<=0x11640){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0x1193f){if(code<0x11727){if(code<0x116b6){if(code<0x116ad){// Mn       TAKRI SIGN ANUSVARA
if(0x116ab===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       TAKRI SIGN VISARGA
if(0x116ac===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x116ae){// Mn       TAKRI VOWEL SIGN AA
if(0x116ad===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x116b0){// Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
if(0x116ae<=code&&code<=0x116af){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
if(0x116b0<=code&&code<=0x116b5){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1171d){// Mc       TAKRI SIGN VIRAMA
if(0x116b6===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       TAKRI SIGN NUKTA
if(0x116b7===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11722){// Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
if(0x1171d<=code&&code<=0x1171f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11726){// Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
if(0x11722<=code&&code<=0x11725){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       AHOM VOWEL SIGN E
if(0x11726===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0x11930){if(code<0x1182f){if(code<0x1182c){// Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
if(0x11727<=code&&code<=0x1172b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II
if(0x1182c<=code&&code<=0x1182e){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11838){// Mn   [9] DOGRA VOWEL SIGN U..DOGRA SIGN ANUSVARA
if(0x1182f<=code&&code<=0x11837){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11839){// Mc       DOGRA SIGN VISARGA
if(0x11838===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] DOGRA SIGN VIRAMA..DOGRA SIGN NUKTA
if(0x11839<=code&&code<=0x1183a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1193b){if(code<0x11931){// Mc       DIVES AKURU VOWEL SIGN AA
if(0x11930===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11937){// Mc   [5] DIVES AKURU VOWEL SIGN I..DIVES AKURU VOWEL SIGN E
if(0x11931<=code&&code<=0x11935){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O
if(0x11937<=code&&code<=0x11938){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x1193d){// Mn   [2] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN CANDRABINDU
if(0x1193b<=code&&code<=0x1193c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       DIVES AKURU SIGN HALANTA
if(0x1193d===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       DIVES AKURU VIRAMA
if(0x1193e===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11a01){if(code<0x119d1){if(code<0x11941){// Lo       DIVES AKURU PREFIXED NASAL SIGN
if(0x1193f===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}// Mc       DIVES AKURU MEDIAL YA
if(0x11940===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11942){// Lo       DIVES AKURU INITIAL RA
if(0x11941===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {// Mc       DIVES AKURU MEDIAL RA
if(0x11942===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       DIVES AKURU SIGN NUKTA
if(0x11943===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x119dc){if(code<0x119d4){// Mc   [3] NANDINAGARI VOWEL SIGN AA..NANDINAGARI VOWEL SIGN II
if(0x119d1<=code&&code<=0x119d3){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x119da){// Mn   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR
if(0x119d4<=code&&code<=0x119d7){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI
if(0x119da<=code&&code<=0x119db){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x119e0){// Mc   [4] NANDINAGARI VOWEL SIGN O..NANDINAGARI SIGN VISARGA
if(0x119dc<=code&&code<=0x119df){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn       NANDINAGARI SIGN VIRAMA
if(0x119e0===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       NANDINAGARI VOWEL SIGN PRISHTHAMATRA E
if(0x119e4===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x11a47){if(code<0x11a39){if(code<0x11a33){// Mn  [10] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL LENGTH MARK
if(0x11a01<=code&&code<=0x11a0a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA
if(0x11a33<=code&&code<=0x11a38){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11a3a){// Mc       ZANABAZAR SQUARE SIGN VISARGA
if(0x11a39===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11a3b){// Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA
if(0x11a3a===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {// Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA
if(0x11a3b<=code&&code<=0x11a3e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x11a59){if(code<0x11a51){// Mn       ZANABAZAR SQUARE SUBJOINER
if(0x11a47===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11a57){// Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE
if(0x11a51<=code&&code<=0x11a56){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU
if(0x11a57<=code&&code<=0x11a58){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}else {if(code<0x11a84){// Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK
if(0x11a59<=code&&code<=0x11a5b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11a8a){// Lo   [6] SOYOMBO SIGN JIHVAMULIYA..SOYOMBO CLUSTER-INITIAL LETTER SA
if(0x11a84<=code&&code<=0x11a89){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {// Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA
if(0x11a8a<=code&&code<=0x11a96){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}}else {if(code<0x16f51){if(code<0x11d90){if(code<0x11cb1){if(code<0x11c3e){if(code<0x11c2f){if(code<0x11a98){// Mc       SOYOMBO SIGN VISARGA
if(0x11a97===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER
if(0x11a98<=code&&code<=0x11a99){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11c30){// Mc       BHAIKSUKI VOWEL SIGN AA
if(0x11c2f===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11c38){// Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L
if(0x11c30<=code&&code<=0x11c36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA
if(0x11c38<=code&&code<=0x11c3d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x11c92){// Mc       BHAIKSUKI SIGN VISARGA
if(0x11c3e===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       BHAIKSUKI SIGN VIRAMA
if(0x11c3f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11ca9){// Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA
if(0x11c92<=code&&code<=0x11ca7){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11caa){// Mc       MARCHEN SUBJOINED LETTER YA
if(0x11ca9===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA
if(0x11caa<=code&&code<=0x11cb0){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x11d3a){if(code<0x11cb4){if(code<0x11cb2){// Mc       MARCHEN VOWEL SIGN I
if(0x11cb1===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E
if(0x11cb2<=code&&code<=0x11cb3){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x11cb5){// Mc       MARCHEN VOWEL SIGN O
if(0x11cb4===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {if(code<0x11d31){// Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU
if(0x11cb5<=code&&code<=0x11cb6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R
if(0x11d31<=code&&code<=0x11d36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x11d46){if(code<0x11d3c){// Mn       MASARAM GONDI VOWEL SIGN E
if(0x11d3a===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11d3f){// Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O
if(0x11d3c<=code&&code<=0x11d3d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA
if(0x11d3f<=code&&code<=0x11d45){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x11d47){// Lo       MASARAM GONDI REPHA
if(0x11d46===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {if(code<0x11d8a){// Mn       MASARAM GONDI RA-KARA
if(0x11d47===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [5] GUNJALA GONDI VOWEL SIGN AA..GUNJALA GONDI VOWEL SIGN UU
if(0x11d8a<=code&&code<=0x11d8e){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}}else {if(code<0x11f36){if(code<0x11ef3){if(code<0x11d95){if(code<0x11d93){// Mn   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI
if(0x11d90<=code&&code<=0x11d91){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI VOWEL SIGN AU
if(0x11d93<=code&&code<=0x11d94){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11d96){// Mn       GUNJALA GONDI SIGN ANUSVARA
if(0x11d95===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       GUNJALA GONDI SIGN VISARGA
if(0x11d96===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       GUNJALA GONDI VIRAMA
if(0x11d97===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x11f02){if(code<0x11ef5){// Mn   [2] MAKASAR VOWEL SIGN I..MAKASAR VOWEL SIGN U
if(0x11ef3<=code&&code<=0x11ef4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x11f00){// Mc   [2] MAKASAR VOWEL SIGN E..MAKASAR VOWEL SIGN O
if(0x11ef5<=code&&code<=0x11ef6){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] KAWI SIGN CANDRABINDU..KAWI SIGN ANUSVARA
if(0x11f00<=code&&code<=0x11f01){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x11f03){// Lo       KAWI SIGN REPHA
if(0x11f02===code){return boundaries_1.CLUSTER_BREAK.PREPEND;}}else {if(code<0x11f34){// Mc       KAWI SIGN VISARGA
if(0x11f03===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mc   [2] KAWI VOWEL SIGN AA..KAWI VOWEL SIGN ALTERNATE AA
if(0x11f34<=code&&code<=0x11f35){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}}else {if(code<0x13430){if(code<0x11f40){if(code<0x11f3e){// Mn   [5] KAWI VOWEL SIGN I..KAWI VOWEL SIGN VOCALIC R
if(0x11f36<=code&&code<=0x11f3a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc   [2] KAWI VOWEL SIGN E..KAWI VOWEL SIGN AI
if(0x11f3e<=code&&code<=0x11f3f){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x11f41){// Mn       KAWI VOWEL SIGN EU
if(0x11f40===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       KAWI SIGN KILLER
if(0x11f41===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}// Mn       KAWI CONJOINER
if(0x11f42===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x16af0){if(code<0x13440){// Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE
if(0x13430<=code&&code<=0x1343f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0x13447){// Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY
if(0x13440===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED
if(0x13447<=code&&code<=0x13455){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x16b30){// Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
if(0x16af0<=code&&code<=0x16af4){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x16f4f){// Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
if(0x16b30<=code&&code<=0x16b36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       MIAO SIGN CONSONANT MODIFIER BAR
if(0x16f4f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}}else {if(code<0x1da84){if(code<0x1d167){if(code<0x1bca0){if(code<0x16fe4){if(code<0x16f8f){// Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI
if(0x16f51<=code&&code<=0x16f87){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
if(0x16f8f<=code&&code<=0x16f92){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x16ff0){// Mn       KHITAN SMALL SCRIPT FILLER
if(0x16fe4===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1bc9d){// Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY
if(0x16ff0<=code&&code<=0x16ff1){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}else {// Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
if(0x1bc9d<=code&&code<=0x1bc9e){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1cf30){if(code<0x1cf00){// Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
if(0x1bca0<=code&&code<=0x1bca3){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Mn  [46] ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT..ZNAMENNY COMBINING MARK KRYZH ON LEFT
if(0x1cf00<=code&&code<=0x1cf2d){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1d165){// Mn  [23] ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO..ZNAMENNY PRIZNAK MODIFIER ROG
if(0x1cf30<=code&&code<=0x1cf46){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       MUSICAL SYMBOL COMBINING STEM
if(0x1d165===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}// Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
if(0x1d166===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}}}else {if(code<0x1d185){if(code<0x1d16e){if(code<0x1d16d){// Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
if(0x1d167<=code&&code<=0x1d169){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
if(0x1d16d===code){return boundaries_1.CLUSTER_BREAK.SPACINGMARK;}}}else {if(code<0x1d173){// Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
if(0x1d16e<=code&&code<=0x1d172){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1d17b){// Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
if(0x1d173<=code&&code<=0x1d17a){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
if(0x1d17b<=code&&code<=0x1d182){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1da00){if(code<0x1d1aa){// Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
if(0x1d185<=code&&code<=0x1d18b){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1d242){// Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
if(0x1d1aa<=code&&code<=0x1d1ad){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
if(0x1d242<=code&&code<=0x1d244){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1da3b){// Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
if(0x1da00<=code&&code<=0x1da36){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1da75){// Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
if(0x1da3b<=code&&code<=0x1da6c){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
if(0x1da75===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}}else {if(code<0x1e2ec){if(code<0x1e01b){if(code<0x1daa1){if(code<0x1da9b){// Mn       SIGNWRITING LOCATION HEAD NECK
if(0x1da84===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
if(0x1da9b<=code&&code<=0x1da9f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1e000){// Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
if(0x1daa1<=code&&code<=0x1daaf){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1e008){// Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE
if(0x1e000<=code&&code<=0x1e006){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU
if(0x1e008<=code&&code<=0x1e018){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}else {if(code<0x1e08f){if(code<0x1e023){// Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI
if(0x1e01b<=code&&code<=0x1e021){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1e026){// Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS
if(0x1e023<=code&&code<=0x1e024){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA
if(0x1e026<=code&&code<=0x1e02a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0x1e130){// Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
if(0x1e08f===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1e2ae){// Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D
if(0x1e130<=code&&code<=0x1e136){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn       TOTO SIGN RISING TONE
if(0x1e2ae===code){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}}}else {if(code<0x1f3fb){if(code<0x1e8d0){if(code<0x1e4ec){// Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI
if(0x1e2ec<=code&&code<=0x1e2ef){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH
if(0x1e4ec<=code&&code<=0x1e4ef){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}else {if(code<0x1e944){// Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
if(0x1e8d0<=code&&code<=0x1e8d6){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0x1f1e6){// Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
if(0x1e944<=code&&code<=0x1e94a){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
if(0x1f1e6<=code&&code<=0x1f1ff){return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;}}}}}else {if(code<0xe0080){if(code<0xe0000){// Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6
if(0x1f3fb<=code&&code<=0x1f3ff){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {if(code<0xe0020){// Cn       <reserved-E0000>
// Cf       LANGUAGE TAG
// Cn  [30] <reserved-E0002>..<reserved-E001F>
if(0xe0000<=code&&code<=0xe001f){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {// Cf  [96] TAG SPACE..CANCEL TAG
if(0xe0020<=code&&code<=0xe007f){return boundaries_1.CLUSTER_BREAK.EXTEND;}}}}else {if(code<0xe0100){// Cn [128] <reserved-E0080>..<reserved-E00FF>
if(0xe0080<=code&&code<=0xe00ff){return boundaries_1.CLUSTER_BREAK.CONTROL;}}else {if(code<0xe01f0){// Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
if(0xe0100<=code&&code<=0xe01ef){return boundaries_1.CLUSTER_BREAK.EXTEND;}}else {// Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
if(0xe01f0<=code&&code<=0xe0fff){return boundaries_1.CLUSTER_BREAK.CONTROL;}}}}}}}}}}}}// unlisted code points are treated as a break property of "Other"
return boundaries_1.CLUSTER_BREAK.OTHER;}/**
	     * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
	     * @param code {number} Unicode code point
	     * @returns {number}
	     */static getEmojiProperty(code){// emoji property taken from:
// https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt
// and generated by
// node ./scripts/generate-emoji-extended-pictographic.js
if(code<0x27b0){if(code<0x2600){if(code<0x2328){if(code<0x2122){if(code<0x203c){// E0.6   [1] (©️)       copyright
if(0xa9===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (®️)       registered
if(0xae===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (‼️)       double exclamation mark
if(0x203c===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (⁉️)       exclamation question mark
if(0x2049===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x2194){// E0.6   [1] (™️)       trade mark
if(0x2122===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (ℹ️)       information
if(0x2139===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x21a9){// E0.6   [6] (↔️..↙️)    left-right arrow..down-left arrow
if(0x2194<=code&&code<=0x2199){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x231a){// E0.6   [2] (↩️..↪️)    right arrow curving left..left arrow curving right
if(0x21a9<=code&&code<=0x21aa){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [2] (⌚..⌛)    watch..hourglass done
if(0x231a<=code&&code<=0x231b){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}else {if(code<0x24c2){if(code<0x23cf){// E1.0   [1] (⌨️)       keyboard
if(0x2328===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.0   [1] (⎈)       HELM SYMBOL
if(0x2388===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x23e9){// E1.0   [1] (⏏️)       eject button
if(0x23cf===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x23f8){// E0.6   [4] (⏩..⏬)    fast-forward button..fast down button
// E0.7   [2] (⏭️..⏮️)    next track button..last track button
// E1.0   [1] (⏯️)       play or pause button
// E0.6   [1] (⏰)       alarm clock
// E1.0   [2] (⏱️..⏲️)    stopwatch..timer clock
// E0.6   [1] (⏳)       hourglass not done
if(0x23e9<=code&&code<=0x23f3){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.7   [3] (⏸️..⏺️)    pause button..record button
if(0x23f8<=code&&code<=0x23fa){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x25b6){if(code<0x25aa){// E0.6   [1] (Ⓜ️)       circled M
if(0x24c2===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [2] (▪️..▫️)    black small square..white small square
if(0x25aa<=code&&code<=0x25ab){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x25c0){// E0.6   [1] (▶️)       play button
if(0x25b6===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x25fb){// E0.6   [1] (◀️)       reverse button
if(0x25c0===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [4] (◻️..◾)    white medium square..black medium-small square
if(0x25fb<=code&&code<=0x25fe){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}}else {if(code<0x2733){if(code<0x2714){if(code<0x2614){if(code<0x2607){// E0.6   [2] (☀️..☁️)    sun..cloud
// E0.7   [2] (☂️..☃️)    umbrella..snowman
// E1.0   [1] (☄️)       comet
// E0.0   [1] (★)       BLACK STAR
if(0x2600<=code&&code<=0x2605){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [7] (☇..☍)    LIGHTNING..OPPOSITION
// E0.6   [1] (☎️)       telephone
// E0.0   [2] (☏..☐)    WHITE TELEPHONE..BALLOT BOX
// E0.6   [1] (☑️)       check box with check
// E0.0   [1] (☒)       BALLOT BOX WITH X
if(0x2607<=code&&code<=0x2612){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x2690){// E0.6   [2] (☔..☕)    umbrella with rain drops..hot beverage
// E0.0   [2] (☖..☗)    WHITE SHOGI PIECE..BLACK SHOGI PIECE
// E1.0   [1] (☘️)       shamrock
// E0.0   [4] (☙..☜)    REVERSED ROTATED FLORAL HEART BULLET..WHITE LEFT POINTING INDEX
// E0.6   [1] (☝️)       index pointing up
// E0.0   [2] (☞..☟)    WHITE RIGHT POINTING INDEX..WHITE DOWN POINTING INDEX
// E1.0   [1] (☠️)       skull and crossbones
// E0.0   [1] (☡)       CAUTION SIGN
// E1.0   [2] (☢️..☣️)    radioactive..biohazard
// E0.0   [2] (☤..☥)    CADUCEUS..ANKH
// E1.0   [1] (☦️)       orthodox cross
// E0.0   [3] (☧..☩)    CHI RHO..CROSS OF JERUSALEM
// E0.7   [1] (☪️)       star and crescent
// E0.0   [3] (☫..☭)    FARSI SYMBOL..HAMMER AND SICKLE
// E1.0   [1] (☮️)       peace symbol
// E0.7   [1] (☯️)       yin yang
// E0.0   [8] (☰..☷)    TRIGRAM FOR HEAVEN..TRIGRAM FOR EARTH
// E0.7   [2] (☸️..☹️)    wheel of dharma..frowning face
// E0.6   [1] (☺️)       smiling face
// E0.0   [5] (☻..☿)    BLACK SMILING FACE..MERCURY
// E4.0   [1] (♀️)       female sign
// E0.0   [1] (♁)       EARTH
// E4.0   [1] (♂️)       male sign
// E0.0   [5] (♃..♇)    JUPITER..PLUTO
// E0.6  [12] (♈..♓)    Aries..Pisces
// E0.0  [11] (♔..♞)    WHITE CHESS KING..BLACK CHESS KNIGHT
// E11.0  [1] (♟️)       chess pawn
// E0.6   [1] (♠️)       spade suit
// E0.0   [2] (♡..♢)    WHITE HEART SUIT..WHITE DIAMOND SUIT
// E0.6   [1] (♣️)       club suit
// E0.0   [1] (♤)       WHITE SPADE SUIT
// E0.6   [2] (♥️..♦️)    heart suit..diamond suit
// E0.0   [1] (♧)       WHITE CLUB SUIT
// E0.6   [1] (♨️)       hot springs
// E0.0  [18] (♩..♺)    QUARTER NOTE..RECYCLING SYMBOL FOR GENERIC MATERIALS
// E0.6   [1] (♻️)       recycling symbol
// E0.0   [2] (♼..♽)    RECYCLED PAPER SYMBOL..PARTIALLY-RECYCLED PAPER SYMBOL
// E11.0  [1] (♾️)       infinity
// E0.6   [1] (♿)       wheelchair symbol
// E0.0   [6] (⚀..⚅)    DIE FACE-1..DIE FACE-6
if(0x2614<=code&&code<=0x2685){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x2708){// E0.0   [2] (⚐..⚑)    WHITE FLAG..BLACK FLAG
// E1.0   [1] (⚒️)       hammer and pick
// E0.6   [1] (⚓)       anchor
// E1.0   [1] (⚔️)       crossed swords
// E4.0   [1] (⚕️)       medical symbol
// E1.0   [2] (⚖️..⚗️)    balance scale..alembic
// E0.0   [1] (⚘)       FLOWER
// E1.0   [1] (⚙️)       gear
// E0.0   [1] (⚚)       STAFF OF HERMES
// E1.0   [2] (⚛️..⚜️)    atom symbol..fleur-de-lis
// E0.0   [3] (⚝..⚟)    OUTLINED WHITE STAR..THREE LINES CONVERGING LEFT
// E0.6   [2] (⚠️..⚡)    warning..high voltage
// E0.0   [5] (⚢..⚦)    DOUBLED FEMALE SIGN..MALE WITH STROKE SIGN
// E13.0  [1] (⚧️)       transgender symbol
// E0.0   [2] (⚨..⚩)    VERTICAL MALE WITH STROKE SIGN..HORIZONTAL MALE WITH STROKE SIGN
// E0.6   [2] (⚪..⚫)    white circle..black circle
// E0.0   [4] (⚬..⚯)    MEDIUM SMALL WHITE CIRCLE..UNMARRIED PARTNERSHIP SYMBOL
// E1.0   [2] (⚰️..⚱️)    coffin..funeral urn
// E0.0  [11] (⚲..⚼)    NEUTER..SESQUIQUADRATE
// E0.6   [2] (⚽..⚾)    soccer ball..baseball
// E0.0   [5] (⚿..⛃)    SQUARED KEY..BLACK DRAUGHTS KING
// E0.6   [2] (⛄..⛅)    snowman without snow..sun behind cloud
// E0.0   [2] (⛆..⛇)    RAIN..BLACK SNOWMAN
// E0.7   [1] (⛈️)       cloud with lightning and rain
// E0.0   [5] (⛉..⛍)    TURNED WHITE SHOGI PIECE..DISABLED CAR
// E0.6   [1] (⛎)       Ophiuchus
// E0.7   [1] (⛏️)       pick
// E0.0   [1] (⛐)       CAR SLIDING
// E0.7   [1] (⛑️)       rescue worker’s helmet
// E0.0   [1] (⛒)       CIRCLED CROSSING LANES
// E0.7   [1] (⛓️)       chains
// E0.6   [1] (⛔)       no entry
// E0.0  [20] (⛕..⛨)    ALTERNATE ONE-WAY LEFT WAY TRAFFIC..BLACK CROSS ON SHIELD
// E0.7   [1] (⛩️)       shinto shrine
// E0.6   [1] (⛪)       church
// E0.0   [5] (⛫..⛯)    CASTLE..MAP SYMBOL FOR LIGHTHOUSE
// E0.7   [2] (⛰️..⛱️)    mountain..umbrella on ground
// E0.6   [2] (⛲..⛳)    fountain..flag in hole
// E0.7   [1] (⛴️)       ferry
// E0.6   [1] (⛵)       sailboat
// E0.0   [1] (⛶)       SQUARE FOUR CORNERS
// E0.7   [3] (⛷️..⛹️)    skier..person bouncing ball
// E0.6   [1] (⛺)       tent
// E0.0   [2] (⛻..⛼)    JAPANESE BANK SYMBOL..HEADSTONE GRAVEYARD SYMBOL
// E0.6   [1] (⛽)       fuel pump
// E0.0   [4] (⛾..✁)    CUP ON BLACK SQUARE..UPPER BLADE SCISSORS
// E0.6   [1] (✂️)       scissors
// E0.0   [2] (✃..✄)    LOWER BLADE SCISSORS..WHITE SCISSORS
// E0.6   [1] (✅)       check mark button
if(0x2690<=code&&code<=0x2705){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [5] (✈️..✌️)    airplane..victory hand
// E0.7   [1] (✍️)       writing hand
// E0.0   [1] (✎)       LOWER RIGHT PENCIL
// E0.6   [1] (✏️)       pencil
// E0.0   [2] (✐..✑)    UPPER RIGHT PENCIL..WHITE NIB
// E0.6   [1] (✒️)       black nib
if(0x2708<=code&&code<=0x2712){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x271d){// E0.6   [1] (✔️)       check mark
if(0x2714===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (✖️)       multiply
if(0x2716===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x2721){// E0.7   [1] (✝️)       latin cross
if(0x271d===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.7   [1] (✡️)       star of David
if(0x2721===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (✨)       sparkles
if(0x2728===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x2753){if(code<0x2747){if(code<0x2744){// E0.6   [2] (✳️..✴️)    eight-spoked asterisk..eight-pointed star
if(0x2733<=code&&code<=0x2734){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (❄️)       snowflake
if(0x2744===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x274c){// E0.6   [1] (❇️)       sparkle
if(0x2747===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (❌)       cross mark
if(0x274c===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (❎)       cross mark button
if(0x274e===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}else {if(code<0x2763){if(code<0x2757){// E0.6   [3] (❓..❕)    red question mark..white exclamation mark
if(0x2753<=code&&code<=0x2755){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (❗)       red exclamation mark
if(0x2757===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x2795){// E1.0   [1] (❣️)       heart exclamation
// E0.6   [1] (❤️)       red heart
// E0.0   [3] (❥..❧)    ROTATED HEAVY BLACK HEART BULLET..ROTATED FLORAL HEART BULLET
if(0x2763<=code&&code<=0x2767){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x27a1){// E0.6   [3] (➕..➗)    plus..divide
if(0x2795<=code&&code<=0x2797){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (➡️)       right arrow
if(0x27a1===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}}}else {if(code<0x1f201){if(code<0x3297){if(code<0x2b1b){if(code<0x2934){// E0.6   [1] (➰)       curly loop
if(0x27b0===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E1.0   [1] (➿)       double curly loop
if(0x27bf===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x2b05){// E0.6   [2] (⤴️..⤵️)    right arrow curving up..right arrow curving down
if(0x2934<=code&&code<=0x2935){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [3] (⬅️..⬇️)    left arrow..down arrow
if(0x2b05<=code&&code<=0x2b07){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}else {if(code<0x2b55){if(code<0x2b50){// E0.6   [2] (⬛..⬜)    black large square..white large square
if(0x2b1b<=code&&code<=0x2b1c){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (⭐)       star
if(0x2b50===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x3030){// E0.6   [1] (⭕)       hollow red circle
if(0x2b55===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (〰️)       wavy dash
if(0x3030===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (〽️)       part alternation mark
if(0x303d===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x1f16c){if(code<0x1f000){// E0.6   [1] (㊗️)       Japanese “congratulations” button
if(0x3297===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}// E0.6   [1] (㊙️)       Japanese “secret” button
if(0x3299===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f10d){// E0.0   [4] (🀀..🀃)    MAHJONG TILE EAST WIND..MAHJONG TILE NORTH WIND
// E0.6   [1] (🀄)       mahjong red dragon
// E0.0 [202] (🀅..🃎)    MAHJONG TILE GREEN DRAGON..PLAYING CARD KING OF DIAMONDS
// E0.6   [1] (🃏)       joker
// E0.0  [48] (🃐..🃿)    <reserved-1F0D0>..<reserved-1F0FF>
if(0x1f000<=code&&code<=0x1f0ff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f12f){// E0.0   [3] (🄍..🄏)    CIRCLED ZERO WITH SLASH..CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH
if(0x1f10d<=code&&code<=0x1f10f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [1] (🄯)       COPYLEFT SYMBOL
if(0x1f12f===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x1f18e){if(code<0x1f17e){// E0.0   [4] (🅬..🅯)    RAISED MR SIGN..CIRCLED HUMAN FIGURE
// E0.6   [2] (🅰️..🅱️)    A button (blood type)..B button (blood type)
if(0x1f16c<=code&&code<=0x1f171){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [2] (🅾️..🅿️)    O button (blood type)..P button
if(0x1f17e<=code&&code<=0x1f17f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f191){// E0.6   [1] (🆎)       AB button (blood type)
if(0x1f18e===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f1ad){// E0.6  [10] (🆑..🆚)    CL button..VS button
if(0x1f191<=code&&code<=0x1f19a){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0  [57] (🆭..🇥)    MASK WORK SYMBOL..<reserved-1F1E5>
if(0x1f1ad<=code&&code<=0x1f1e5){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}}else {if(code<0x1f7d5){if(code<0x1f249){if(code<0x1f22f){if(code<0x1f21a){// E0.6   [2] (🈁..🈂️)    Japanese “here” button..Japanese “service charge” button
// E0.0  [13] (🈃..🈏)    <reserved-1F203>..<reserved-1F20F>
if(0x1f201<=code&&code<=0x1f20f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.6   [1] (🈚)       Japanese “free of charge” button
if(0x1f21a===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f232){// E0.6   [1] (🈯)       Japanese “reserved” button
if(0x1f22f===code){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f23c){// E0.6   [9] (🈲..🈺)    Japanese “prohibited” button..Japanese “open for business” button
if(0x1f232<=code&&code<=0x1f23a){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [4] (🈼..🈿)    <reserved-1F23C>..<reserved-1F23F>
if(0x1f23c<=code&&code<=0x1f23f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x1f546){if(code<0x1f400){// E0.0   [7] (🉉..🉏)    <reserved-1F249>..<reserved-1F24F>
// E0.6   [2] (🉐..🉑)    Japanese “bargain” button..Japanese “acceptable” button
// E0.0 [174] (🉒..🋿)    <reserved-1F252>..<reserved-1F2FF>
// E0.6  [13] (🌀..🌌)    cyclone..milky way
// E0.7   [2] (🌍..🌎)    globe showing Europe-Africa..globe showing Americas
// E0.6   [1] (🌏)       globe showing Asia-Australia
// E1.0   [1] (🌐)       globe with meridians
// E0.6   [1] (🌑)       new moon
// E1.0   [1] (🌒)       waxing crescent moon
// E0.6   [3] (🌓..🌕)    first quarter moon..full moon
// E1.0   [3] (🌖..🌘)    waning gibbous moon..waning crescent moon
// E0.6   [1] (🌙)       crescent moon
// E1.0   [1] (🌚)       new moon face
// E0.6   [1] (🌛)       first quarter moon face
// E0.7   [1] (🌜)       last quarter moon face
// E1.0   [2] (🌝..🌞)    full moon face..sun with face
// E0.6   [2] (🌟..🌠)    glowing star..shooting star
// E0.7   [1] (🌡️)       thermometer
// E0.0   [2] (🌢..🌣)    BLACK DROPLET..WHITE SUN
// E0.7   [9] (🌤️..🌬️)    sun behind small cloud..wind face
// E1.0   [3] (🌭..🌯)    hot dog..burrito
// E0.6   [2] (🌰..🌱)    chestnut..seedling
// E1.0   [2] (🌲..🌳)    evergreen tree..deciduous tree
// E0.6   [2] (🌴..🌵)    palm tree..cactus
// E0.7   [1] (🌶️)       hot pepper
// E0.6  [20] (🌷..🍊)    tulip..tangerine
// E1.0   [1] (🍋)       lemon
// E0.6   [4] (🍌..🍏)    banana..green apple
// E1.0   [1] (🍐)       pear
// E0.6  [43] (🍑..🍻)    peach..clinking beer mugs
// E1.0   [1] (🍼)       baby bottle
// E0.7   [1] (🍽️)       fork and knife with plate
// E1.0   [2] (🍾..🍿)    bottle with popping cork..popcorn
// E0.6  [20] (🎀..🎓)    ribbon..graduation cap
// E0.0   [2] (🎔..🎕)    HEART WITH TIP ON THE LEFT..BOUQUET OF FLOWERS
// E0.7   [2] (🎖️..🎗️)    military medal..reminder ribbon
// E0.0   [1] (🎘)       MUSICAL KEYBOARD WITH JACKS
// E0.7   [3] (🎙️..🎛️)    studio microphone..control knobs
// E0.0   [2] (🎜..🎝)    BEAMED ASCENDING MUSICAL NOTES..BEAMED DESCENDING MUSICAL NOTES
// E0.7   [2] (🎞️..🎟️)    film frames..admission tickets
// E0.6  [37] (🎠..🏄)    carousel horse..person surfing
// E1.0   [1] (🏅)       sports medal
// E0.6   [1] (🏆)       trophy
// E1.0   [1] (🏇)       horse racing
// E0.6   [1] (🏈)       american football
// E1.0   [1] (🏉)       rugby football
// E0.6   [1] (🏊)       person swimming
// E0.7   [4] (🏋️..🏎️)    person lifting weights..racing car
// E1.0   [5] (🏏..🏓)    cricket game..ping pong
// E0.7  [12] (🏔️..🏟️)    snow-capped mountain..stadium
// E0.6   [4] (🏠..🏣)    house..Japanese post office
// E1.0   [1] (🏤)       post office
// E0.6  [12] (🏥..🏰)    hospital..castle
// E0.0   [2] (🏱..🏲)    WHITE PENNANT..BLACK PENNANT
// E0.7   [1] (🏳️)       white flag
// E1.0   [1] (🏴)       black flag
// E0.7   [1] (🏵️)       rosette
// E0.0   [1] (🏶)       BLACK ROSETTE
// E0.7   [1] (🏷️)       label
// E1.0   [3] (🏸..🏺)    badminton..amphora
if(0x1f249<=code&&code<=0x1f3fa){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E1.0   [8] (🐀..🐇)    rat..rabbit
// E0.7   [1] (🐈)       cat
// E1.0   [3] (🐉..🐋)    dragon..whale
// E0.6   [3] (🐌..🐎)    snail..horse
// E1.0   [2] (🐏..🐐)    ram..goat
// E0.6   [2] (🐑..🐒)    ewe..monkey
// E1.0   [1] (🐓)       rooster
// E0.6   [1] (🐔)       chicken
// E0.7   [1] (🐕)       dog
// E1.0   [1] (🐖)       pig
// E0.6  [19] (🐗..🐩)    boar..poodle
// E1.0   [1] (🐪)       camel
// E0.6  [20] (🐫..🐾)    two-hump camel..paw prints
// E0.7   [1] (🐿️)       chipmunk
// E0.6   [1] (👀)       eyes
// E0.7   [1] (👁️)       eye
// E0.6  [35] (👂..👤)    ear..bust in silhouette
// E1.0   [1] (👥)       busts in silhouette
// E0.6   [6] (👦..👫)    boy..woman and man holding hands
// E1.0   [2] (👬..👭)    men holding hands..women holding hands
// E0.6  [63] (👮..💬)    police officer..speech balloon
// E1.0   [1] (💭)       thought balloon
// E0.6   [8] (💮..💵)    white flower..dollar banknote
// E1.0   [2] (💶..💷)    euro banknote..pound banknote
// E0.6  [52] (💸..📫)    money with wings..closed mailbox with raised flag
// E0.7   [2] (📬..📭)    open mailbox with raised flag..open mailbox with lowered flag
// E0.6   [1] (📮)       postbox
// E1.0   [1] (📯)       postal horn
// E0.6   [5] (📰..📴)    newspaper..mobile phone off
// E1.0   [1] (📵)       no mobile phones
// E0.6   [2] (📶..📷)    antenna bars..camera
// E1.0   [1] (📸)       camera with flash
// E0.6   [4] (📹..📼)    video camera..videocassette
// E0.7   [1] (📽️)       film projector
// E0.0   [1] (📾)       PORTABLE STEREO
// E1.0   [4] (📿..🔂)    prayer beads..repeat single button
// E0.6   [1] (🔃)       clockwise vertical arrows
// E1.0   [4] (🔄..🔇)    counterclockwise arrows button..muted speaker
// E0.7   [1] (🔈)       speaker low volume
// E1.0   [1] (🔉)       speaker medium volume
// E0.6  [11] (🔊..🔔)    speaker high volume..bell
// E1.0   [1] (🔕)       bell with slash
// E0.6  [22] (🔖..🔫)    bookmark..water pistol
// E1.0   [2] (🔬..🔭)    microscope..telescope
// E0.6  [16] (🔮..🔽)    crystal ball..downwards button
if(0x1f400<=code&&code<=0x1f53d){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f680){// E0.0   [3] (🕆..🕈)    WHITE LATIN CROSS..CELTIC CROSS
// E0.7   [2] (🕉️..🕊️)    om..dove
// E1.0   [4] (🕋..🕎)    kaaba..menorah
// E0.0   [1] (🕏)       BOWL OF HYGIEIA
// E0.6  [12] (🕐..🕛)    one o’clock..twelve o’clock
// E0.7  [12] (🕜..🕧)    one-thirty..twelve-thirty
// E0.0   [7] (🕨..🕮)    RIGHT SPEAKER..BOOK
// E0.7   [2] (🕯️..🕰️)    candle..mantelpiece clock
// E0.0   [2] (🕱..🕲)    BLACK SKULL AND CROSSBONES..NO PIRACY
// E0.7   [7] (🕳️..🕹️)    hole..joystick
// E3.0   [1] (🕺)       man dancing
// E0.0  [12] (🕻..🖆)    LEFT HAND TELEPHONE RECEIVER..PEN OVER STAMPED ENVELOPE
// E0.7   [1] (🖇️)       linked paperclips
// E0.0   [2] (🖈..🖉)    BLACK PUSHPIN..LOWER LEFT PENCIL
// E0.7   [4] (🖊️..🖍️)    pen..crayon
// E0.0   [2] (🖎..🖏)    LEFT WRITING HAND..TURNED OK HAND SIGN
// E0.7   [1] (🖐️)       hand with fingers splayed
// E0.0   [4] (🖑..🖔)    REVERSED RAISED HAND WITH FINGERS SPLAYED..REVERSED VICTORY HAND
// E1.0   [2] (🖕..🖖)    middle finger..vulcan salute
// E0.0  [13] (🖗..🖣)    WHITE DOWN POINTING LEFT HAND INDEX..BLACK DOWN POINTING BACKHAND INDEX
// E3.0   [1] (🖤)       black heart
// E0.7   [1] (🖥️)       desktop computer
// E0.0   [2] (🖦..🖧)    KEYBOARD AND MOUSE..THREE NETWORKED COMPUTERS
// E0.7   [1] (🖨️)       printer
// E0.0   [8] (🖩..🖰)    POCKET CALCULATOR..TWO BUTTON MOUSE
// E0.7   [2] (🖱️..🖲️)    computer mouse..trackball
// E0.0   [9] (🖳..🖻)    OLD PERSONAL COMPUTER..DOCUMENT WITH PICTURE
// E0.7   [1] (🖼️)       framed picture
// E0.0   [5] (🖽..🗁)    FRAME WITH TILES..OPEN FOLDER
// E0.7   [3] (🗂️..🗄️)    card index dividers..file cabinet
// E0.0  [12] (🗅..🗐)    EMPTY NOTE..PAGES
// E0.7   [3] (🗑️..🗓️)    wastebasket..spiral calendar
// E0.0   [8] (🗔..🗛)    DESKTOP WINDOW..DECREASE FONT SIZE SYMBOL
// E0.7   [3] (🗜️..🗞️)    clamp..rolled-up newspaper
// E0.0   [2] (🗟..🗠)    PAGE WITH CIRCLED TEXT..STOCK CHART
// E0.7   [1] (🗡️)       dagger
// E0.0   [1] (🗢)       LIPS
// E0.7   [1] (🗣️)       speaking head
// E0.0   [4] (🗤..🗧)    THREE RAYS ABOVE..THREE RAYS RIGHT
// E2.0   [1] (🗨️)       left speech bubble
// E0.0   [6] (🗩..🗮)    RIGHT SPEECH BUBBLE..LEFT ANGER BUBBLE
// E0.7   [1] (🗯️)       right anger bubble
// E0.0   [3] (🗰..🗲)    MOOD BUBBLE..LIGHTNING MOOD
// E0.7   [1] (🗳️)       ballot box with ballot
// E0.0   [6] (🗴..🗹)    BALLOT SCRIPT X..BALLOT BOX WITH BOLD CHECK
// E0.7   [1] (🗺️)       world map
// E0.6   [5] (🗻..🗿)    mount fuji..moai
// E1.0   [1] (😀)       grinning face
// E0.6   [6] (😁..😆)    beaming face with smiling eyes..grinning squinting face
// E1.0   [2] (😇..😈)    smiling face with halo..smiling face with horns
// E0.6   [5] (😉..😍)    winking face..smiling face with heart-eyes
// E1.0   [1] (😎)       smiling face with sunglasses
// E0.6   [1] (😏)       smirking face
// E0.7   [1] (😐)       neutral face
// E1.0   [1] (😑)       expressionless face
// E0.6   [3] (😒..😔)    unamused face..pensive face
// E1.0   [1] (😕)       confused face
// E0.6   [1] (😖)       confounded face
// E1.0   [1] (😗)       kissing face
// E0.6   [1] (😘)       face blowing a kiss
// E1.0   [1] (😙)       kissing face with smiling eyes
// E0.6   [1] (😚)       kissing face with closed eyes
// E1.0   [1] (😛)       face with tongue
// E0.6   [3] (😜..😞)    winking face with tongue..disappointed face
// E1.0   [1] (😟)       worried face
// E0.6   [6] (😠..😥)    angry face..sad but relieved face
// E1.0   [2] (😦..😧)    frowning face with open mouth..anguished face
// E0.6   [4] (😨..😫)    fearful face..tired face
// E1.0   [1] (😬)       grimacing face
// E0.6   [1] (😭)       loudly crying face
// E1.0   [2] (😮..😯)    face with open mouth..hushed face
// E0.6   [4] (😰..😳)    anxious face with sweat..flushed face
// E1.0   [1] (😴)       sleeping face
// E0.6   [1] (😵)       face with crossed-out eyes
// E1.0   [1] (😶)       face without mouth
// E0.6  [10] (😷..🙀)    face with medical mask..weary cat
// E1.0   [4] (🙁..🙄)    slightly frowning face..face with rolling eyes
// E0.6  [11] (🙅..🙏)    person gesturing NO..folded hands
if(0x1f546<=code&&code<=0x1f64f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f774){// E0.6   [1] (🚀)       rocket
// E1.0   [2] (🚁..🚂)    helicopter..locomotive
// E0.6   [3] (🚃..🚅)    railway car..bullet train
// E1.0   [1] (🚆)       train
// E0.6   [1] (🚇)       metro
// E1.0   [1] (🚈)       light rail
// E0.6   [1] (🚉)       station
// E1.0   [2] (🚊..🚋)    tram..tram car
// E0.6   [1] (🚌)       bus
// E0.7   [1] (🚍)       oncoming bus
// E1.0   [1] (🚎)       trolleybus
// E0.6   [1] (🚏)       bus stop
// E1.0   [1] (🚐)       minibus
// E0.6   [3] (🚑..🚓)    ambulance..police car
// E0.7   [1] (🚔)       oncoming police car
// E0.6   [1] (🚕)       taxi
// E1.0   [1] (🚖)       oncoming taxi
// E0.6   [1] (🚗)       automobile
// E0.7   [1] (🚘)       oncoming automobile
// E0.6   [2] (🚙..🚚)    sport utility vehicle..delivery truck
// E1.0   [7] (🚛..🚡)    articulated lorry..aerial tramway
// E0.6   [1] (🚢)       ship
// E1.0   [1] (🚣)       person rowing boat
// E0.6   [2] (🚤..🚥)    speedboat..horizontal traffic light
// E1.0   [1] (🚦)       vertical traffic light
// E0.6   [7] (🚧..🚭)    construction..no smoking
// E1.0   [4] (🚮..🚱)    litter in bin sign..non-potable water
// E0.6   [1] (🚲)       bicycle
// E1.0   [3] (🚳..🚵)    no bicycles..person mountain biking
// E0.6   [1] (🚶)       person walking
// E1.0   [2] (🚷..🚸)    no pedestrians..children crossing
// E0.6   [6] (🚹..🚾)    men’s room..water closet
// E1.0   [1] (🚿)       shower
// E0.6   [1] (🛀)       person taking bath
// E1.0   [5] (🛁..🛅)    bathtub..left luggage
// E0.0   [5] (🛆..🛊)    TRIANGLE WITH ROUNDED CORNERS..GIRLS SYMBOL
// E0.7   [1] (🛋️)       couch and lamp
// E1.0   [1] (🛌)       person in bed
// E0.7   [3] (🛍️..🛏️)    shopping bags..bed
// E1.0   [1] (🛐)       place of worship
// E3.0   [2] (🛑..🛒)    stop sign..shopping cart
// E0.0   [2] (🛓..🛔)    STUPA..PAGODA
// E12.0  [1] (🛕)       hindu temple
// E13.0  [2] (🛖..🛗)    hut..elevator
// E0.0   [4] (🛘..🛛)    <reserved-1F6D8>..<reserved-1F6DB>
// E15.0  [1] (🛜)       wireless
// E14.0  [3] (🛝..🛟)    playground slide..ring buoy
// E0.7   [6] (🛠️..🛥️)    hammer and wrench..motor boat
// E0.0   [3] (🛦..🛨)    UP-POINTING MILITARY AIRPLANE..UP-POINTING SMALL AIRPLANE
// E0.7   [1] (🛩️)       small airplane
// E0.0   [1] (🛪)       NORTHEAST-POINTING AIRPLANE
// E1.0   [2] (🛫..🛬)    airplane departure..airplane arrival
// E0.0   [3] (🛭..🛯)    <reserved-1F6ED>..<reserved-1F6EF>
// E0.7   [1] (🛰️)       satellite
// E0.0   [2] (🛱..🛲)    ONCOMING FIRE ENGINE..DIESEL LOCOMOTIVE
// E0.7   [1] (🛳️)       passenger ship
// E3.0   [3] (🛴..🛶)    kick scooter..canoe
// E5.0   [2] (🛷..🛸)    sled..flying saucer
// E11.0  [1] (🛹)       skateboard
// E12.0  [1] (🛺)       auto rickshaw
// E13.0  [2] (🛻..🛼)    pickup truck..roller skate
// E0.0   [3] (🛽..🛿)    <reserved-1F6FD>..<reserved-1F6FF>
if(0x1f680<=code&&code<=0x1f6ff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0  [12] (🝴..🝿)    LOT OF FORTUNE..ORCUS
if(0x1f774<=code&&code<=0x1f77f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}else {if(code<0x1f8ae){if(code<0x1f848){if(code<0x1f80c){// E0.0  [11] (🟕..🟟)    CIRCLED TRIANGLE..<reserved-1F7DF>
// E12.0 [12] (🟠..🟫)    orange circle..brown square
// E0.0   [4] (🟬..🟯)    <reserved-1F7EC>..<reserved-1F7EF>
// E14.0  [1] (🟰)       heavy equals sign
// E0.0  [15] (🟱..🟿)    <reserved-1F7F1>..<reserved-1F7FF>
if(0x1f7d5<=code&&code<=0x1f7ff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [4] (🠌..🠏)    <reserved-1F80C>..<reserved-1F80F>
if(0x1f80c<=code&&code<=0x1f80f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f85a){// E0.0   [8] (🡈..🡏)    <reserved-1F848>..<reserved-1F84F>
if(0x1f848<=code&&code<=0x1f84f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1f888){// E0.0   [6] (🡚..🡟)    <reserved-1F85A>..<reserved-1F85F>
if(0x1f85a<=code&&code<=0x1f85f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0   [8] (🢈..🢏)    <reserved-1F888>..<reserved-1F88F>
if(0x1f888<=code&&code<=0x1f88f){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}else {if(code<0x1f93c){if(code<0x1f90c){// E0.0  [82] (🢮..🣿)    <reserved-1F8AE>..<reserved-1F8FF>
if(0x1f8ae<=code&&code<=0x1f8ff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E13.0  [1] (🤌)       pinched fingers
// E12.0  [3] (🤍..🤏)    white heart..pinching hand
// E1.0   [9] (🤐..🤘)    zipper-mouth face..sign of the horns
// E3.0   [6] (🤙..🤞)    call me hand..crossed fingers
// E5.0   [1] (🤟)       love-you gesture
// E3.0   [8] (🤠..🤧)    cowboy hat face..sneezing face
// E5.0   [8] (🤨..🤯)    face with raised eyebrow..exploding head
// E3.0   [1] (🤰)       pregnant woman
// E5.0   [2] (🤱..🤲)    breast-feeding..palms up together
// E3.0   [8] (🤳..🤺)    selfie..person fencing
if(0x1f90c<=code&&code<=0x1f93a){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}else {if(code<0x1f947){// E3.0   [3] (🤼..🤾)    people wrestling..person playing handball
// E12.0  [1] (🤿)       diving mask
// E3.0   [6] (🥀..🥅)    wilted flower..goal net
if(0x1f93c<=code&&code<=0x1f945){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {if(code<0x1fc00){// E3.0   [5] (🥇..🥋)    1st place medal..martial arts uniform
// E5.0   [1] (🥌)       curling stone
// E11.0  [3] (🥍..🥏)    lacrosse..flying disc
// E3.0  [15] (🥐..🥞)    croissant..pancakes
// E5.0  [13] (🥟..🥫)    dumpling..canned food
// E11.0  [5] (🥬..🥰)    leafy green..smiling face with hearts
// E12.0  [1] (🥱)       yawning face
// E13.0  [1] (🥲)       smiling face with tear
// E11.0  [4] (🥳..🥶)    partying face..cold face
// E13.0  [2] (🥷..🥸)    ninja..disguised face
// E14.0  [1] (🥹)       face holding back tears
// E11.0  [1] (🥺)       pleading face
// E12.0  [1] (🥻)       sari
// E11.0  [4] (🥼..🥿)    lab coat..flat shoe
// E1.0   [5] (🦀..🦄)    crab..unicorn
// E3.0  [13] (🦅..🦑)    eagle..squid
// E5.0   [6] (🦒..🦗)    giraffe..cricket
// E11.0 [11] (🦘..🦢)    kangaroo..swan
// E13.0  [2] (🦣..🦤)    mammoth..dodo
// E12.0  [6] (🦥..🦪)    sloth..oyster
// E13.0  [3] (🦫..🦭)    beaver..seal
// E12.0  [2] (🦮..🦯)    guide dog..white cane
// E11.0 [10] (🦰..🦹)    red hair..supervillain
// E12.0  [6] (🦺..🦿)    safety vest..mechanical leg
// E1.0   [1] (🧀)       cheese wedge
// E11.0  [2] (🧁..🧂)    cupcake..salt
// E12.0  [8] (🧃..🧊)    beverage box..ice
// E13.0  [1] (🧋)       bubble tea
// E14.0  [1] (🧌)       troll
// E12.0  [3] (🧍..🧏)    person standing..deaf person
// E5.0  [23] (🧐..🧦)    face with monocle..socks
// E11.0 [25] (🧧..🧿)    red envelope..nazar amulet
// E0.0 [112] (🨀..🩯)    NEUTRAL CHESS KING..<reserved-1FA6F>
// E12.0  [4] (🩰..🩳)    ballet shoes..shorts
// E13.0  [1] (🩴)       thong sandal
// E15.0  [3] (🩵..🩷)    light blue heart..pink heart
// E12.0  [3] (🩸..🩺)    drop of blood..stethoscope
// E14.0  [2] (🩻..🩼)    x-ray..crutch
// E0.0   [3] (🩽..🩿)    <reserved-1FA7D>..<reserved-1FA7F>
// E12.0  [3] (🪀..🪂)    yo-yo..parachute
// E13.0  [4] (🪃..🪆)    boomerang..nesting dolls
// E15.0  [2] (🪇..🪈)    maracas..flute
// E0.0   [7] (🪉..🪏)    <reserved-1FA89>..<reserved-1FA8F>
// E12.0  [6] (🪐..🪕)    ringed planet..banjo
// E13.0 [19] (🪖..🪨)    military helmet..rock
// E14.0  [4] (🪩..🪬)    mirror ball..hamsa
// E15.0  [3] (🪭..🪯)    folding hand fan..khanda
// E13.0  [7] (🪰..🪶)    fly..feather
// E14.0  [4] (🪷..🪺)    lotus..nest with eggs
// E15.0  [3] (🪻..🪽)    hyacinth..wing
// E0.0   [1] (🪾)       <reserved-1FABE>
// E15.0  [1] (🪿)       goose
// E13.0  [3] (🫀..🫂)    anatomical heart..people hugging
// E14.0  [3] (🫃..🫅)    pregnant man..person with crown
// E0.0   [8] (🫆..🫍)    <reserved-1FAC6>..<reserved-1FACD>
// E15.0  [2] (🫎..🫏)    moose..donkey
// E13.0  [7] (🫐..🫖)    blueberries..teapot
// E14.0  [3] (🫗..🫙)    pouring liquid..jar
// E15.0  [2] (🫚..🫛)    ginger root..pea pod
// E0.0   [4] (🫜..🫟)    <reserved-1FADC>..<reserved-1FADF>
// E14.0  [8] (🫠..🫧)    melting face..bubbles
// E15.0  [1] (🫨)       shaking face
// E0.0   [7] (🫩..🫯)    <reserved-1FAE9>..<reserved-1FAEF>
// E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands
// E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand
// E0.0   [7] (🫹..🫿)    <reserved-1FAF9>..<reserved-1FAFF>
if(0x1f947<=code&&code<=0x1faff){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}else {// E0.0[1022] (🰀..🿽)    <reserved-1FC00>..<reserved-1FFFD>
if(0x1fc00<=code&&code<=0x1fffd){return boundaries_1.EXTENDED_PICTOGRAPHIC;}}}}}}}}// unlisted code points are treated as a break property of "Other"
return boundaries_1.CLUSTER_BREAK.OTHER;}};Graphemer.default=Graphemer$1;return Graphemer;}

var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib) return lib;
  hasRequiredLib = 1;
  var __importDefault = lib.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(lib, "__esModule", {
    value: true
  });
  const Graphemer_1 = __importDefault(requireGraphemer());
  lib.default = Graphemer_1.default;
  return lib;
}

var hasRequiredStrings;
function requireStrings() {
  if (hasRequiredStrings) return strings;
  hasRequiredStrings = 1;
  var __createBinding = strings.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function () {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = strings.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar = strings.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault = strings.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(strings, "__esModule", {
    value: true
  });
  strings.validateLanguage = strings.parseLanguage = strings.b64UrlToUtf8 = strings.utf8ToB64Url = strings.graphemeLen = strings.utf8Len = undefined;
  const graphemer_1 = __importDefault(requireLib());
  const ui8 = __importStar(require$$1);
  // counts the number of bytes in a utf8 string
  const utf8Len = str => {
    return new TextEncoder().encode(str).byteLength;
  };
  strings.utf8Len = utf8Len;
  // counts the number of graphemes (user-displayed characters) in a string
  const graphemeLen = str => {
    const splitter = new graphemer_1.default();
    return splitter.countGraphemes(str);
  };
  strings.graphemeLen = graphemeLen;
  const utf8ToB64Url = utf8 => {
    return ui8.toString(ui8.fromString(utf8, 'utf8'), 'base64url');
  };
  strings.utf8ToB64Url = utf8ToB64Url;
  const b64UrlToUtf8 = b64 => {
    return ui8.toString(ui8.fromString(b64, 'base64url'), 'utf8');
  };
  strings.b64UrlToUtf8 = b64UrlToUtf8;
  const parseLanguage = langTag => {
    const parsed = langTag.match(bcp47Regexp);
    if (!parsed?.groups) return null;
    const parts = parsed.groups;
    return {
      grandfathered: parts.grandfathered,
      language: parts.language,
      extlang: parts.extlang,
      script: parts.script,
      region: parts.region,
      variant: parts.variant,
      extension: parts.extension,
      privateUse: parts.privateUseA || parts.privateUseB
    };
  };
  strings.parseLanguage = parseLanguage;
  const validateLanguage = langTag => {
    return bcp47Regexp.test(langTag);
  };
  strings.validateLanguage = validateLanguage;
  // Validates well-formed BCP 47 syntax: https://www.rfc-editor.org/rfc/rfc5646.html#section-2.1
  const bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;
  return strings;
}

var didDoc = {};

var hasRequiredDidDoc;
function requireDidDoc() {
  if (hasRequiredDidDoc) return didDoc;
  hasRequiredDidDoc = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.didDocument = exports.getServiceEndpoint = exports.getNotifEndpoint = exports.getFeedGenEndpoint = exports.getPdsEndpoint = exports.getSigningDidKey = exports.getVerificationMaterial = exports.getSigningKey = exports.getHandle = exports.getDid = exports.isValidDidDoc = undefined;
    const zod_1 = /*@__PURE__*/requireLib$1();
    // Parsing atproto data
    // --------
    const isValidDidDoc = doc => {
      return exports.didDocument.safeParse(doc).success;
    };
    exports.isValidDidDoc = isValidDidDoc;
    const getDid = doc => {
      const id = doc.id;
      if (typeof id !== 'string') {
        throw new Error('No `id` on document');
      }
      return id;
    };
    exports.getDid = getDid;
    const getHandle = doc => {
      const aka = doc.alsoKnownAs;
      if (aka) {
        for (let i = 0; i < aka.length; i++) {
          const alias = aka[i];
          if (alias.startsWith('at://')) {
            // strip off "at://" prefix
            return alias.slice(5);
          }
        }
      }
      return undefined;
    };
    exports.getHandle = getHandle;
    // @NOTE we parse to type/publicKeyMultibase to avoid the dependency on @atproto/crypto
    const getSigningKey = doc => {
      return (0, exports.getVerificationMaterial)(doc, 'atproto');
    };
    exports.getSigningKey = getSigningKey;
    const getVerificationMaterial = (doc, keyId) => {
      // /!\ Hot path
      const key = findItemById(doc, 'verificationMethod', `#${keyId}`);
      if (!key) {
        return undefined;
      }
      if (!key.publicKeyMultibase) {
        return undefined;
      }
      return {
        type: key.type,
        publicKeyMultibase: key.publicKeyMultibase
      };
    };
    exports.getVerificationMaterial = getVerificationMaterial;
    const getSigningDidKey = doc => {
      const parsed = (0, exports.getSigningKey)(doc);
      if (!parsed) return;
      return `did:key:${parsed.publicKeyMultibase}`;
    };
    exports.getSigningDidKey = getSigningDidKey;
    const getPdsEndpoint = doc => {
      return (0, exports.getServiceEndpoint)(doc, {
        id: '#atproto_pds',
        type: 'AtprotoPersonalDataServer'
      });
    };
    exports.getPdsEndpoint = getPdsEndpoint;
    const getFeedGenEndpoint = doc => {
      return (0, exports.getServiceEndpoint)(doc, {
        id: '#bsky_fg',
        type: 'BskyFeedGenerator'
      });
    };
    exports.getFeedGenEndpoint = getFeedGenEndpoint;
    const getNotifEndpoint = doc => {
      return (0, exports.getServiceEndpoint)(doc, {
        id: '#bsky_notif',
        type: 'BskyNotificationService'
      });
    };
    exports.getNotifEndpoint = getNotifEndpoint;
    const getServiceEndpoint = (doc, opts) => {
      // /!\ Hot path
      const service = findItemById(doc, 'service', opts.id);
      if (!service) {
        return undefined;
      }
      if (opts.type && service.type !== opts.type) {
        return undefined;
      }
      if (typeof service.serviceEndpoint !== 'string') {
        return undefined;
      }
      return validateUrl(service.serviceEndpoint);
    };
    exports.getServiceEndpoint = getServiceEndpoint;
    function findItemById(doc, type, id) {
      // /!\ Hot path
      const items = doc[type];
      if (items) {
        for (let i = 0; i < items.length; i++) {
          const item = items[i];
          const itemId = item.id;
          if (itemId[0] === '#' ? itemId === id :
          // Optimized version of: itemId === `${doc.id}${id}`
          itemId.length === doc.id.length + id.length && itemId[doc.id.length] === '#' && itemId.endsWith(id) && itemId.startsWith(doc.id) // <== We could probably skip this check
          ) {
            return item;
          }
        }
      }
      return undefined;
    }
    // Check protocol and hostname to prevent potential SSRF
    const validateUrl = urlStr => {
      if (!urlStr.startsWith('http://') && !urlStr.startsWith('https://')) {
        return undefined;
      }
      if (!canParseUrl(urlStr)) {
        return undefined;
      }
      return urlStr;
    };
    const canParseUrl = URL.canParse ?? (
    // URL.canParse is not available in Node.js < 18.17.0
    urlStr => {
      try {
        new URL(urlStr);
        return true;
      } catch {
        return false;
      }
    });
    // Types
    // --------
    const verificationMethod = zod_1.z.object({
      id: zod_1.z.string(),
      type: zod_1.z.string(),
      controller: zod_1.z.string(),
      publicKeyMultibase: zod_1.z.string().optional()
    });
    const service = zod_1.z.object({
      id: zod_1.z.string(),
      type: zod_1.z.string(),
      serviceEndpoint: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.unknown())])
    });
    exports.didDocument = zod_1.z.object({
      id: zod_1.z.string(),
      alsoKnownAs: zod_1.z.array(zod_1.z.string()).optional(),
      verificationMethod: zod_1.z.array(verificationMethod).optional(),
      service: zod_1.z.array(service).optional()
    });
  })(didDoc);
  return didDoc;
}

var hasRequiredDist$4;
function requireDist$4() {
  if (hasRequiredDist$4) return dist$2;
  hasRequiredDist$4 = 1;
  (function (exports) {

    var __createBinding = dist$2.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = dist$2.__setModuleDefault || (Object.create ? function (o, v) {
      Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
      });
    } : function (o, v) {
      o["default"] = v;
    });
    var __importStar = dist$2.__importStar || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = dist$2.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.util = exports.check = undefined;
    exports.check = __importStar(requireCheck());
    exports.util = __importStar(requireUtil$5());
    __exportStar(requireArrays(), exports);
    __exportStar(requireAsync(), exports);
    __exportStar(requireUtil$5(), exports);
    __exportStar(requireTid(), exports);
    __exportStar(requireIpld(), exports);
    __exportStar(requireRetry(), exports);
    __exportStar(requireTypes$3(), exports);
    __exportStar(requireTimes(), exports);
    __exportStar(requireStrings(), exports);
    __exportStar(requireDidDoc(), exports);
  })(dist$2);
  return dist$2;
}

var hasRequiredBlobRefs;
function requireBlobRefs() {
  if (hasRequiredBlobRefs) return blobRefs;
  hasRequiredBlobRefs = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BlobRef = exports.jsonBlobRef = exports.untypedJsonBlobRef = exports.typedJsonBlobRef = undefined;
    const common_web_1 = requireDist$4();
    const cid_1 = require$$1$1;
    const zod_1 = /*@__PURE__*/requireLib$1();
    exports.typedJsonBlobRef = zod_1.z.object({
      $type: zod_1.z.literal('blob'),
      ref: common_web_1.schema.cid,
      mimeType: zod_1.z.string(),
      size: zod_1.z.number()
    }).strict();
    exports.untypedJsonBlobRef = zod_1.z.object({
      cid: zod_1.z.string(),
      mimeType: zod_1.z.string()
    }).strict();
    exports.jsonBlobRef = zod_1.z.union([exports.typedJsonBlobRef, exports.untypedJsonBlobRef]);
    class BlobRef {
      constructor(ref, mimeType, size, original) {
        Object.defineProperty(this, "ref", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: ref
        });
        Object.defineProperty(this, "mimeType", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: mimeType
        });
        Object.defineProperty(this, "size", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: size
        });
        Object.defineProperty(this, "original", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        this.original = original ?? {
          $type: 'blob',
          ref,
          mimeType,
          size
        };
      }
      static asBlobRef(obj) {
        if (common_web_1.check.is(obj, exports.jsonBlobRef)) {
          return BlobRef.fromJsonRef(obj);
        }
        return null;
      }
      static fromJsonRef(json) {
        if (common_web_1.check.is(json, exports.typedJsonBlobRef)) {
          return new BlobRef(json.ref, json.mimeType, json.size);
        } else {
          return new BlobRef(cid_1.CID.parse(json.cid), json.mimeType, -1, json);
        }
      }
      ipld() {
        return {
          $type: 'blob',
          ref: this.ref,
          mimeType: this.mimeType,
          size: this.size
        };
      }
      toJSON() {
        return (0, common_web_1.ipldToJson)(this.ipld());
      }
    }
    exports.BlobRef = BlobRef;
  })(blobRefs);
  return blobRefs;
}

var hasRequiredBlob;
function requireBlob() {
  if (hasRequiredBlob) return blob;
  hasRequiredBlob = 1;
  Object.defineProperty(blob, "__esModule", {
    value: true
  });
  blob.blob = blob$1;
  const blob_refs_1 = requireBlobRefs();
  const types_1 = requireTypes$4();
  function blob$1(lexicons, path, def, value) {
    // check
    if (!value || !(value instanceof blob_refs_1.BlobRef)) {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} should be a blob ref`)
      };
    }
    return {
      success: true,
      value
    };
  }
  return blob;
}

var primitives = {};

var formats = {};

var dist$1 = {};

var hasRequiredDist$3;
function requireDist$3() {
  if (hasRequiredDist$3) return dist$1;
  hasRequiredDist$3 = 1;
  (function (exports) {
    (() => {

      var e = {
          d: (t, r) => {
            for (var n in r) e.o(r, n) && !e.o(t, n) && Object.defineProperty(t, n, {
              enumerable: true,
              get: r[n]
            });
          },
          o: (e, t) => Object.prototype.hasOwnProperty.call(e, t),
          r: e => {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
              value: "Module"
            }), Object.defineProperty(e, "__esModule", {
              value: true
            });
          }
        },
        t = {};
      function r(e, t) {
        return undefined === t && (t = "-"), new RegExp("^(?!0{4}" + t + "0{2}" + t + "0{2})((?=[0-9]{4}" + t + "(((0[^2])|1[0-2])|02(?=" + t + "(([0-1][0-9])|2[0-8])))" + t + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t + "02" + t + "29))([0-9]{4})" + t + "(?!((0[469])|11)" + t + "31)((0[1,3-9]|1[0-2])|(02(?!" + t + "3)))" + t + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e);
      }
      function n(e) {
        var t = /\D/.exec(e);
        return t ? t[0] : "";
      }
      function i(e, t, r) {
        undefined === t && (t = ":"), undefined === r && (r = false);
        var i = new RegExp("^([0-1]|2(?=([0-3])|4" + t + "00))[0-9]" + t + "[0-5][0-9](" + t + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
        if (!r || !/[Z+\-]/.test(e)) return i.test(e);
        if (/Z$/.test(e)) return i.test(e.replace("Z", ""));
        var o = e.includes("+"),
          a = e.split(/[+-]/),
          u = a[0],
          d = a[1];
        return i.test(u) && function (e, t, r) {
          return undefined === r && (r = ":"), new RegExp(t ? "^(0(?!(2" + r + "4)|0" + r + "3)|1(?=([0-1]|2(?=" + r + "[04])|[34](?=" + r + "0))))([03469](?=" + r + "[03])|[17](?=" + r + "0)|2(?=" + r + "[04])|5(?=" + r + "[034])|8(?=" + r + "[04]))" + r + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r + "[03])|[0-24-8](?=" + r + "00))" + r + "[03]0$").test(e);
        }(d, o, n(d));
      }
      function o(e) {
        var t = e.split("T"),
          o = t[0],
          a = t[1],
          u = r(o, n(o));
        if (!a) return false;
        var d,
          s = (d = a.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d) ? d[0] : "");
        return u && i(a, s, true);
      }
      function a(e, t) {
        return undefined === t && (t = "-"), new RegExp("^[0-9]{4}" + t + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e);
      }
      e.r(t), e.d(t, {
        isValidDate: () => r,
        isValidISODateString: () => o,
        isValidTime: () => i,
        isValidYearMonth: () => a
      });
      var u = exports;
      for (var d in t) u[d] = t[d];
      t.__esModule && Object.defineProperty(u, "__esModule", {
        value: true
      });
    })();
  })(dist$1);
  return dist$1;
}

var hasRequiredFormats;
function requireFormats() {
  if (hasRequiredFormats) return formats;
  hasRequiredFormats = 1;
  Object.defineProperty(formats, "__esModule", {
    value: true
  });
  formats.datetime = datetime;
  formats.uri = uri;
  formats.atUri = atUri;
  formats.did = did;
  formats.handle = handle;
  formats.atIdentifier = atIdentifier;
  formats.nsid = nsid;
  formats.cid = cid;
  formats.language = language;
  formats.tid = tid;
  formats.recordKey = recordKey;
  const iso_datestring_validator_1 = requireDist$3();
  const cid_1 = require$$1$1;
  const types_1 = requireTypes$4();
  const syntax_1 = requireDist$5();
  const common_web_1 = requireDist$4();
  function datetime(path, value) {
    try {
      if (!(0, iso_datestring_validator_1.isValidISODateString)(value)) {
        throw new Error();
      }
    } catch {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)
      };
    }
    return {
      success: true,
      value
    };
  }
  function uri(path, value) {
    const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
    if (!isUri) {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a uri`)
      };
    }
    return {
      success: true,
      value
    };
  }
  function atUri(path, value) {
    try {
      (0, syntax_1.ensureValidAtUri)(value);
    } catch {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid at-uri`)
      };
    }
    return {
      success: true,
      value
    };
  }
  function did(path, value) {
    try {
      (0, syntax_1.ensureValidDid)(value);
    } catch {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid did`)
      };
    }
    return {
      success: true,
      value
    };
  }
  function handle(path, value) {
    try {
      (0, syntax_1.ensureValidHandle)(value);
    } catch {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid handle`)
      };
    }
    return {
      success: true,
      value
    };
  }
  function atIdentifier(path, value) {
    // We can discriminate based on the "did:" prefix
    if (value.startsWith('did:')) {
      const didResult = did(path, value);
      if (didResult.success) return didResult;
    } else {
      const handleResult = handle(path, value);
      if (handleResult.success) return handleResult;
    }
    return {
      success: false,
      error: new types_1.ValidationError(`${path} must be a valid did or a handle`)
    };
  }
  function nsid(path, value) {
    try {
      (0, syntax_1.ensureValidNsid)(value);
    } catch {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid nsid`)
      };
    }
    return {
      success: true,
      value
    };
  }
  function cid(path, value) {
    try {
      cid_1.CID.parse(value);
    } catch {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a cid string`)
      };
    }
    return {
      success: true,
      value
    };
  }
  // The language format validates well-formed BCP 47 language tags: https://www.rfc-editor.org/info/bcp47
  function language(path, value) {
    if ((0, common_web_1.validateLanguage)(value)) {
      return {
        success: true,
        value
      };
    }
    return {
      success: false,
      error: new types_1.ValidationError(`${path} must be a well-formed BCP 47 language tag`)
    };
  }
  function tid(path, value) {
    try {
      (0, syntax_1.ensureValidTid)(value);
    } catch {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid TID (timestamp identifier)`)
      };
    }
    return {
      success: true,
      value
    };
  }
  function recordKey(path, value) {
    try {
      (0, syntax_1.ensureValidRecordKey)(value);
    } catch {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid Record Key`)
      };
    }
    return {
      success: true,
      value
    };
  }
  return formats;
}

var hasRequiredPrimitives;
function requirePrimitives() {
  if (hasRequiredPrimitives) return primitives;
  hasRequiredPrimitives = 1;
  var __createBinding = primitives.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function () {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = primitives.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar = primitives.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(primitives, "__esModule", {
    value: true
  });
  primitives.validate = validate;
  primitives.boolean = boolean;
  primitives.integer = integer;
  primitives.string = string;
  primitives.bytes = bytes;
  primitives.cidLink = cidLink;
  primitives.unknown = unknown;
  const common_web_1 = requireDist$4();
  const cid_1 = require$$1$1;
  const formats = __importStar(requireFormats());
  const types_1 = requireTypes$4();
  function validate(lexicons, path, def, value) {
    switch (def.type) {
      case 'boolean':
        return boolean(lexicons, path, def, value);
      case 'integer':
        return integer(lexicons, path, def, value);
      case 'string':
        return string(lexicons, path, def, value);
      case 'bytes':
        return bytes(lexicons, path, def, value);
      case 'cid-link':
        return cidLink(lexicons, path, def, value);
      case 'unknown':
        return unknown(lexicons, path, def, value);
      default:
        return {
          success: false,
          error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
        };
    }
  }
  function boolean(lexicons, path, def, value) {
    def = def;
    // type
    const type = typeof value;
    if (type === 'undefined') {
      if (typeof def.default === 'boolean') {
        return {
          success: true,
          value: def.default
        };
      }
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a boolean`)
      };
    } else if (type !== 'boolean') {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a boolean`)
      };
    }
    // const
    if (typeof def.const === 'boolean') {
      if (value !== def.const) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be ${def.const}`)
        };
      }
    }
    return {
      success: true,
      value
    };
  }
  function integer(lexicons, path, def, value) {
    def = def;
    // type
    const type = typeof value;
    if (type === 'undefined') {
      if (typeof def.default === 'number') {
        return {
          success: true,
          value: def.default
        };
      }
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an integer`)
      };
    } else if (!Number.isInteger(value)) {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an integer`)
      };
    }
    // const
    if (typeof def.const === 'number') {
      if (value !== def.const) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be ${def.const}`)
        };
      }
    }
    // enum
    if (Array.isArray(def.enum)) {
      if (!def.enum.includes(value)) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be one of (${def.enum.join('|')})`)
        };
      }
    }
    // maximum
    if (typeof def.maximum === 'number') {
      if (value > def.maximum) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} can not be greater than ${def.maximum}`)
        };
      }
    }
    // minimum
    if (typeof def.minimum === 'number') {
      if (value < def.minimum) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} can not be less than ${def.minimum}`)
        };
      }
    }
    return {
      success: true,
      value
    };
  }
  function string(lexicons, path, def, value) {
    def = def;
    // type
    if (typeof value === 'undefined') {
      if (typeof def.default === 'string') {
        return {
          success: true,
          value: def.default
        };
      }
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a string`)
      };
    } else if (typeof value !== 'string') {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a string`)
      };
    }
    // const
    if (typeof def.const === 'string') {
      if (value !== def.const) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be ${def.const}`)
        };
      }
    }
    // enum
    if (Array.isArray(def.enum)) {
      if (!def.enum.includes(value)) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be one of (${def.enum.join('|')})`)
        };
      }
    }
    // maxLength and minLength
    if (typeof def.minLength === 'number' || typeof def.maxLength === 'number') {
      // If the JavaScript string length * 3 is below the maximum limit,
      // its UTF8 length (which <= .length * 3) will also be below.
      if (typeof def.minLength === 'number' && value.length * 3 < def.minLength) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
        };
      }
      // If the JavaScript string length * 3 is within the maximum limit,
      // its UTF8 length (which <= .length * 3) will also be within.
      // When there's no minimal length, this lets us skip the UTF8 length check.
      let canSkipUtf8LenChecks = false;
      if (typeof def.minLength === 'undefined' && typeof def.maxLength === 'number' && value.length * 3 <= def.maxLength) {
        canSkipUtf8LenChecks = true;
      }
      if (!canSkipUtf8LenChecks) {
        const len = (0, common_web_1.utf8Len)(value);
        if (typeof def.maxLength === 'number') {
          if (len > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be longer than ${def.maxLength} characters`)
            };
          }
        }
        if (typeof def.minLength === 'number') {
          if (len < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
            };
          }
        }
      }
    }
    // maxGraphemes and minGraphemes
    if (typeof def.maxGraphemes === 'number' || typeof def.minGraphemes === 'number') {
      let needsMaxGraphemesCheck = false;
      let needsMinGraphemesCheck = false;
      if (typeof def.maxGraphemes === 'number') {
        if (value.length <= def.maxGraphemes) {
          // If the JavaScript string length (UTF-16) is within the maximum limit,
          // its grapheme length (which <= .length) will also be within.
          needsMaxGraphemesCheck = false;
        } else {
          needsMaxGraphemesCheck = true;
        }
      }
      if (typeof def.minGraphemes === 'number') {
        if (value.length < def.minGraphemes) {
          // If the JavaScript string length (UTF-16) is below the minimal limit,
          // its grapheme length (which <= .length) will also be below.
          // Fail early.
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
          };
        } else {
          needsMinGraphemesCheck = true;
        }
      }
      if (needsMaxGraphemesCheck || needsMinGraphemesCheck) {
        const len = (0, common_web_1.graphemeLen)(value);
        if (typeof def.maxGraphemes === 'number') {
          if (len > def.maxGraphemes) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be longer than ${def.maxGraphemes} graphemes`)
            };
          }
        }
        if (typeof def.minGraphemes === 'number') {
          if (len < def.minGraphemes) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
            };
          }
        }
      }
    }
    if (typeof def.format === 'string') {
      switch (def.format) {
        case 'datetime':
          return formats.datetime(path, value);
        case 'uri':
          return formats.uri(path, value);
        case 'at-uri':
          return formats.atUri(path, value);
        case 'did':
          return formats.did(path, value);
        case 'handle':
          return formats.handle(path, value);
        case 'at-identifier':
          return formats.atIdentifier(path, value);
        case 'nsid':
          return formats.nsid(path, value);
        case 'cid':
          return formats.cid(path, value);
        case 'language':
          return formats.language(path, value);
        case 'tid':
          return formats.tid(path, value);
        case 'record-key':
          return formats.recordKey(path, value);
      }
    }
    return {
      success: true,
      value
    };
  }
  function bytes(lexicons, path, def, value) {
    def = def;
    if (!value || !(value instanceof Uint8Array)) {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a byte array`)
      };
    }
    // maxLength
    if (typeof def.maxLength === 'number') {
      if (value.byteLength > def.maxLength) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must not be larger than ${def.maxLength} bytes`)
        };
      }
    }
    // minLength
    if (typeof def.minLength === 'number') {
      if (value.byteLength < def.minLength) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must not be smaller than ${def.minLength} bytes`)
        };
      }
    }
    return {
      success: true,
      value
    };
  }
  function cidLink(lexicons, path, def, value) {
    if (cid_1.CID.asCID(value) === null) {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a CID`)
      };
    }
    return {
      success: true,
      value
    };
  }
  function unknown(lexicons, path, def, value) {
    // type
    if (!value || typeof value !== 'object') {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an object`)
      };
    }
    return {
      success: true,
      value
    };
  }
  return primitives;
}

var hasRequiredComplex;
function requireComplex() {
  if (hasRequiredComplex) return complex;
  hasRequiredComplex = 1;
  Object.defineProperty(complex, "__esModule", {
    value: true
  });
  complex.validate = validate;
  complex.array = array;
  complex.object = object;
  complex.validateOneOf = validateOneOf;
  const types_1 = requireTypes$4();
  const util_1 = requireUtil$6();
  const blob_1 = requireBlob();
  const primitives_1 = requirePrimitives();
  function validate(lexicons, path, def, value) {
    switch (def.type) {
      case 'boolean':
        return (0, primitives_1.boolean)(lexicons, path, def, value);
      case 'integer':
        return (0, primitives_1.integer)(lexicons, path, def, value);
      case 'string':
        return (0, primitives_1.string)(lexicons, path, def, value);
      case 'bytes':
        return (0, primitives_1.bytes)(lexicons, path, def, value);
      case 'cid-link':
        return (0, primitives_1.cidLink)(lexicons, path, def, value);
      case 'unknown':
        return (0, primitives_1.unknown)(lexicons, path, def, value);
      case 'object':
        return object(lexicons, path, def, value);
      case 'array':
        return array(lexicons, path, def, value);
      case 'blob':
        return (0, blob_1.blob)(lexicons, path, def, value);
      default:
        return {
          success: false,
          error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
        };
    }
  }
  function array(lexicons, path, def, value) {
    // type
    if (!Array.isArray(value)) {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an array`)
      };
    }
    // maxLength
    if (typeof def.maxLength === 'number') {
      if (value.length > def.maxLength) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`)
        };
      }
    }
    // minLength
    if (typeof def.minLength === 'number') {
      if (value.length < def.minLength) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`)
        };
      }
    }
    // items
    const itemsDef = def.items;
    for (let i = 0; i < value.length; i++) {
      const itemValue = value[i];
      const itemPath = `${path}/${i}`;
      const res = validateOneOf(lexicons, itemPath, itemsDef, itemValue);
      if (!res.success) {
        return res;
      }
    }
    return {
      success: true,
      value
    };
  }
  function object(lexicons, path, def, value) {
    def = def;
    // type
    if (!value || typeof value !== 'object') {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an object`)
      };
    }
    const requiredProps = new Set(def.required);
    const nullableProps = new Set(def.nullable);
    // properties
    let resultValue = value;
    if (typeof def.properties === 'object') {
      for (const key in def.properties) {
        if (value[key] === null && nullableProps.has(key)) {
          continue;
        }
        const propDef = def.properties[key];
        if (typeof value[key] === 'undefined' && !requiredProps.has(key)) {
          // Fast path for non-required undefined props.
          if (propDef.type === 'integer' || propDef.type === 'boolean' || propDef.type === 'string') {
            if (typeof propDef.default === 'undefined') {
              continue;
            }
          } else {
            // Other types have no defaults.
            continue;
          }
        }
        const propPath = `${path}/${key}`;
        const validated = validateOneOf(lexicons, propPath, propDef, value[key]);
        const propValue = validated.success ? validated.value : value[key];
        const propIsUndefined = typeof propValue === 'undefined';
        // Return error for bad validation, giving required rule precedence
        if (propIsUndefined && requiredProps.has(key)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must have the property "${key}"`)
          };
        } else if (!propIsUndefined && !validated.success) {
          return validated;
        }
        // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
        if (propValue !== value[key]) {
          if (resultValue === value) {
            // Lazy shallow clone
            resultValue = {
              ...value
            };
          }
          resultValue[key] = propValue;
        }
      }
    }
    return {
      success: true,
      value: resultValue
    };
  }
  function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
    let error;
    let concreteDefs;
    if (def.type === 'union') {
      if (!(0, types_1.isDiscriminatedObject)(value)) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`)
        };
      }
      if (!refsContainType(def.refs, value.$type)) {
        if (def.closed) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(', ')}`)
          };
        }
        return {
          success: true,
          value
        };
      } else {
        concreteDefs = (0, util_1.toConcreteTypes)(lexicons, {
          type: 'ref',
          ref: value.$type
        });
      }
    } else {
      concreteDefs = (0, util_1.toConcreteTypes)(lexicons, def);
    }
    for (const concreteDef of concreteDefs) {
      const result = mustBeObj ? object(lexicons, path, concreteDef, value) : validate(lexicons, path, concreteDef, value);
      if (result.success) {
        return result;
      }
      error ?? (error = result.error);
    }
    if (concreteDefs.length > 1) {
      return {
        success: false,
        error: new types_1.ValidationError(`${path} did not match any of the expected definitions`)
      };
    }
    return {
      success: false,
      error
    };
  }
  // to avoid bugs like #0189 this needs to handle both
  // explicit and implicit #main
  const refsContainType = (refs, type) => {
    const lexUri = (0, util_1.toLexUri)(type);
    if (refs.includes(lexUri)) {
      return true;
    }
    if (lexUri.endsWith('#main')) {
      return refs.includes(lexUri.replace('#main', ''));
    } else {
      return refs.includes(lexUri + '#main');
    }
  };
  return complex;
}

var xrpc = {};

var hasRequiredXrpc;
function requireXrpc() {
  if (hasRequiredXrpc) return xrpc;
  hasRequiredXrpc = 1;
  var __createBinding = xrpc.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function () {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = xrpc.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar = xrpc.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(xrpc, "__esModule", {
    value: true
  });
  xrpc.params = params;
  const types_1 = requireTypes$4();
  const PrimitiveValidators = __importStar(requirePrimitives());
  const complex_1 = requireComplex();
  function params(lexicons, path, def, val) {
    // type
    const value = val && typeof val === 'object' ? val : {};
    const requiredProps = new Set(def.required ?? []);
    // properties
    let resultValue = value;
    if (typeof def.properties === 'object') {
      for (const key in def.properties) {
        const propDef = def.properties[key];
        const validated = propDef.type === 'array' ? (0, complex_1.array)(lexicons, key, propDef, value[key]) : PrimitiveValidators.validate(lexicons, key, propDef, value[key]);
        const propValue = validated.success ? validated.value : value[key];
        const propIsUndefined = typeof propValue === 'undefined';
        // Return error for bad validation, giving required rule precedence
        if (propIsUndefined && requiredProps.has(key)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must have the property "${key}"`)
          };
        } else if (!propIsUndefined && !validated.success) {
          return validated;
        }
        // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
        if (propValue !== value[key]) {
          if (resultValue === value) {
            // Lazy shallow clone
            resultValue = {
              ...value
            };
          }
          resultValue[key] = propValue;
        }
      }
    }
    return {
      success: true,
      value: resultValue
    };
  }
  return xrpc;
}

var hasRequiredValidation;
function requireValidation() {
  if (hasRequiredValidation) return validation;
  hasRequiredValidation = 1;
  Object.defineProperty(validation, "__esModule", {
    value: true
  });
  validation.assertValidRecord = assertValidRecord;
  validation.assertValidXrpcParams = assertValidXrpcParams;
  validation.assertValidXrpcInput = assertValidXrpcInput;
  validation.assertValidXrpcOutput = assertValidXrpcOutput;
  validation.assertValidXrpcMessage = assertValidXrpcMessage;
  const complex_1 = requireComplex();
  const xrpc_1 = requireXrpc();
  function assertValidRecord(lexicons, def, value) {
    const res = (0, complex_1.object)(lexicons, 'Record', def.record, value);
    if (!res.success) throw res.error;
    return res.value;
  }
  function assertValidXrpcParams(lexicons, def, value) {
    if (def.parameters) {
      const res = (0, xrpc_1.params)(lexicons, 'Params', def.parameters, value);
      if (!res.success) throw res.error;
      return res.value;
    }
  }
  function assertValidXrpcInput(lexicons, def, value) {
    if (def.input?.schema) {
      // loop: all input schema definitions
      return assertValidOneOf(lexicons, 'Input', def.input.schema, value, true);
    }
  }
  function assertValidXrpcOutput(lexicons, def, value) {
    if (def.output?.schema) {
      // loop: all output schema definitions
      return assertValidOneOf(lexicons, 'Output', def.output.schema, value, true);
    }
  }
  function assertValidXrpcMessage(lexicons, def, value) {
    if (def.message?.schema) {
      // loop: all output schema definitions
      return assertValidOneOf(lexicons, 'Message', def.message.schema, value, true);
    }
  }
  function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
    const res = (0, complex_1.validateOneOf)(lexicons, path, def, value, mustBeObj);
    if (!res.success) throw res.error;
    return res.value;
  }
  return validation;
}

var hasRequiredLexicons$1;
function requireLexicons$1() {
  if (hasRequiredLexicons$1) return lexicons$1;
  hasRequiredLexicons$1 = 1;
  var __createBinding = lexicons$1.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function () {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = lexicons$1.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar = lexicons$1.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(lexicons$1, "__esModule", {
    value: true
  });
  lexicons$1.Lexicons = undefined;
  const types_1 = requireTypes$4();
  const validation_1 = requireValidation();
  const util_1 = requireUtil$6();
  const ComplexValidators = __importStar(requireComplex());
  /**
   * A collection of compiled lexicons.
   */
  class Lexicons {
    constructor(docs) {
      Object.defineProperty(this, "docs", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, "defs", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new Map()
      });
      if (docs) {
        for (const doc of docs) {
          this.add(doc);
        }
      }
    }
    /**
     * @example clone a lexicon:
     * ```ts
     * const clone = new Lexicons(originalLexicon)
     * ```
     *
     * @example get docs array:
     * ```ts
     * const docs = Array.from(lexicons)
     * ```
     */
    [Symbol.iterator]() {
      return this.docs.values();
    }
    /**
     * Add a lexicon doc.
     */
    add(doc) {
      const uri = (0, util_1.toLexUri)(doc.id);
      if (this.docs.has(uri)) {
        throw new Error(`${uri} has already been registered`);
      }
      // WARNING
      // mutates the object
      // -prf
      resolveRefUris(doc, uri);
      this.docs.set(uri, doc);
      for (const [defUri, def] of iterDefs(doc)) {
        this.defs.set(defUri, def);
      }
    }
    /**
     * Remove a lexicon doc.
     */
    remove(uri) {
      uri = (0, util_1.toLexUri)(uri);
      const doc = this.docs.get(uri);
      if (!doc) {
        throw new Error(`Unable to remove "${uri}": does not exist`);
      }
      for (const [defUri, _def] of iterDefs(doc)) {
        this.defs.delete(defUri);
      }
      this.docs.delete(uri);
    }
    /**
     * Get a lexicon doc.
     */
    get(uri) {
      uri = (0, util_1.toLexUri)(uri);
      return this.docs.get(uri);
    }
    /**
     * Get a definition.
     */
    getDef(uri) {
      uri = (0, util_1.toLexUri)(uri);
      return this.defs.get(uri);
    }
    getDefOrThrow(uri, types) {
      const def = this.getDef(uri);
      if (!def) {
        throw new types_1.LexiconDefNotFoundError(`Lexicon not found: ${uri}`);
      }
      if (types && !types.includes(def.type)) {
        throw new types_1.InvalidLexiconError(`Not a ${types.join(' or ')} lexicon: ${uri}`);
      }
      return def;
    }
    /**
     * Validate a record or object.
     */
    validate(lexUri, value) {
      lexUri = (0, util_1.toLexUri)(lexUri);
      const def = this.getDefOrThrow(lexUri, ['record', 'object']);
      if (!(0, types_1.isObj)(value)) {
        throw new types_1.ValidationError(`Value must be an object`);
      }
      if (def.type === 'record') {
        return ComplexValidators.object(this, 'Record', def.record, value);
      } else if (def.type === 'object') {
        return ComplexValidators.object(this, 'Object', def, value);
      } else {
        // shouldn't happen
        throw new types_1.InvalidLexiconError('Definition must be a record or object');
      }
    }
    /**
     * Validate a record and throw on any error.
     */
    assertValidRecord(lexUri, value) {
      lexUri = (0, util_1.toLexUri)(lexUri);
      const def = this.getDefOrThrow(lexUri, ['record']);
      if (!(0, types_1.isObj)(value)) {
        throw new types_1.ValidationError(`Record must be an object`);
      }
      if (!(0, types_1.hasProp)(value, '$type') || typeof value.$type !== 'string') {
        throw new types_1.ValidationError(`Record/$type must be a string`);
      }
      const $type = value.$type || '';
      if ((0, util_1.toLexUri)($type) !== lexUri) {
        throw new types_1.ValidationError(`Invalid $type: must be ${lexUri}, got ${$type}`);
      }
      return (0, validation_1.assertValidRecord)(this, def, value);
    }
    /**
     * Validate xrpc query params and throw on any error.
     */
    assertValidXrpcParams(lexUri, value) {
      lexUri = (0, util_1.toLexUri)(lexUri);
      const def = this.getDefOrThrow(lexUri, ['query', 'procedure', 'subscription']);
      return (0, validation_1.assertValidXrpcParams)(this, def, value);
    }
    /**
     * Validate xrpc input body and throw on any error.
     */
    assertValidXrpcInput(lexUri, value) {
      lexUri = (0, util_1.toLexUri)(lexUri);
      const def = this.getDefOrThrow(lexUri, ['procedure']);
      return (0, validation_1.assertValidXrpcInput)(this, def, value);
    }
    /**
     * Validate xrpc output body and throw on any error.
     */
    assertValidXrpcOutput(lexUri, value) {
      lexUri = (0, util_1.toLexUri)(lexUri);
      const def = this.getDefOrThrow(lexUri, ['query', 'procedure']);
      return (0, validation_1.assertValidXrpcOutput)(this, def, value);
    }
    /**
     * Validate xrpc subscription message and throw on any error.
     */
    assertValidXrpcMessage(lexUri, value) {
      lexUri = (0, util_1.toLexUri)(lexUri);
      const def = this.getDefOrThrow(lexUri, ['subscription']);
      return (0, validation_1.assertValidXrpcMessage)(this, def, value);
    }
    /**
     * Resolve a lex uri given a ref
     */
    resolveLexUri(lexUri, ref) {
      lexUri = (0, util_1.toLexUri)(lexUri);
      return (0, util_1.toLexUri)(ref, lexUri);
    }
  }
  lexicons$1.Lexicons = Lexicons;
  function* iterDefs(doc) {
    for (const defId in doc.defs) {
      yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];
      if (defId === 'main') {
        yield [`lex:${doc.id}`, doc.defs[defId]];
      }
    }
  }
  // WARNING
  // this method mutates objects
  // -prf
  function resolveRefUris(obj, baseUri) {
    for (const k in obj) {
      if (obj.type === 'ref') {
        obj.ref = (0, util_1.toLexUri)(obj.ref, baseUri);
      } else if (obj.type === 'union') {
        obj.refs = obj.refs.map(ref => (0, util_1.toLexUri)(ref, baseUri));
      } else if (Array.isArray(obj[k])) {
        obj[k] = obj[k].map(item => {
          if (typeof item === 'string') {
            return item.startsWith('#') ? (0, util_1.toLexUri)(item, baseUri) : item;
          } else if (item && typeof item === 'object') {
            return resolveRefUris(item, baseUri);
          }
          return item;
        });
      } else if (obj[k] && typeof obj[k] === 'object') {
        obj[k] = resolveRefUris(obj[k], baseUri);
      }
    }
    return obj;
  }
  return lexicons$1;
}

var serialize = {};

var hasRequiredSerialize;
function requireSerialize() {
  if (hasRequiredSerialize) return serialize;
  hasRequiredSerialize = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.ipldToLex = exports.lexToIpld = undefined;
    const common_web_1 = requireDist$4();
    const cid_1 = require$$1$1;
    const blob_refs_1 = requireBlobRefs();
    // @NOTE avoiding use of check.is() here only because it makes
    // these implementations slow, and they often live in hot paths.
    const lexToIpld = val => {
      // walk arrays
      if (Array.isArray(val)) {
        return val.map(item => (0, exports.lexToIpld)(item));
      }
      // objects
      if (val && typeof val === 'object') {
        // convert blobs, leaving the original encoding so that we don't change CIDs on re-encode
        if (val instanceof blob_refs_1.BlobRef) {
          return val.original;
        }
        // retain cids & bytes
        if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
          return val;
        }
        // walk plain objects
        const toReturn = {};
        for (const key of Object.keys(val)) {
          toReturn[key] = (0, exports.lexToIpld)(val[key]);
        }
        return toReturn;
      }
      // pass through
      return val;
    };
    exports.lexToIpld = lexToIpld;
    const ipldToLex = val => {
      // map arrays
      if (Array.isArray(val)) {
        return val.map(item => (0, exports.ipldToLex)(item));
      }
      // objects
      if (val && typeof val === 'object') {
        // convert blobs, using hints to avoid expensive is() check
        if ((val['$type'] === 'blob' || typeof val['cid'] === 'string' && typeof val['mimeType'] === 'string') && common_web_1.check.is(val, blob_refs_1.jsonBlobRef)) {
          return blob_refs_1.BlobRef.fromJsonRef(val);
        }
        // retain cids, bytes
        if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
          return val;
        }
        // map plain objects
        const toReturn = {};
        for (const key of Object.keys(val)) {
          toReturn[key] = (0, exports.ipldToLex)(val[key]);
        }
        return toReturn;
      }
      // pass through
      return val;
    };
    exports.ipldToLex = ipldToLex;
    const lexToJson = val => {
      return (0, common_web_1.ipldToJson)((0, exports.lexToIpld)(val));
    };
    exports.lexToJson = lexToJson;
    const stringifyLex = val => {
      return JSON.stringify((0, exports.lexToJson)(val));
    };
    exports.stringifyLex = stringifyLex;
    const jsonToLex = val => {
      return (0, exports.ipldToLex)((0, common_web_1.jsonToIpld)(val));
    };
    exports.jsonToLex = jsonToLex;
    const jsonStringToLex = val => {
      return (0, exports.jsonToLex)(JSON.parse(val));
    };
    exports.jsonStringToLex = jsonStringToLex;
  })(serialize);
  return serialize;
}

var hasRequiredDist$2;
function requireDist$2() {
  if (hasRequiredDist$2) return dist$4;
  hasRequiredDist$2 = 1;
  (function (exports) {

    var __createBinding = dist$4.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = dist$4.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    __exportStar(requireTypes$4(), exports);
    __exportStar(requireLexicons$1(), exports);
    __exportStar(requireBlobRefs(), exports);
    __exportStar(requireSerialize(), exports);
  })(dist$4);
  return dist$4;
}

var lexicons = {};

var hasRequiredLexicons;function requireLexicons(){if(hasRequiredLexicons)return lexicons;hasRequiredLexicons=1;(function(exports){Object.defineProperty(exports,"__esModule",{value:true});exports.ids=exports.lexicons=exports.schemas=exports.schemaDict=undefined;/**
		 * GENERATED CODE - DO NOT MODIFY
		 */const lexicon_1=requireDist$2();exports.schemaDict={ComAtprotoAdminDefs:{lexicon:1,id:'com.atproto.admin.defs',defs:{statusAttr:{type:'object',required:['applied'],properties:{applied:{type:'boolean'},ref:{type:'string'}}},accountView:{type:'object',required:['did','handle','indexedAt'],properties:{did:{type:'string',format:'did'},handle:{type:'string',format:'handle'},email:{type:'string'},relatedRecords:{type:'array',items:{type:'unknown'}},indexedAt:{type:'string',format:'datetime'},invitedBy:{type:'ref',ref:'lex:com.atproto.server.defs#inviteCode'},invites:{type:'array',items:{type:'ref',ref:'lex:com.atproto.server.defs#inviteCode'}},invitesDisabled:{type:'boolean'},emailConfirmedAt:{type:'string',format:'datetime'},inviteNote:{type:'string'},deactivatedAt:{type:'string',format:'datetime'},threatSignatures:{type:'array',items:{type:'ref',ref:'lex:com.atproto.admin.defs#threatSignature'}}}},repoRef:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'}}},repoBlobRef:{type:'object',required:['did','cid'],properties:{did:{type:'string',format:'did'},cid:{type:'string',format:'cid'},recordUri:{type:'string',format:'at-uri'}}},threatSignature:{type:'object',required:['property','value'],properties:{property:{type:'string'},value:{type:'string'}}}}},ComAtprotoAdminDeleteAccount:{lexicon:1,id:'com.atproto.admin.deleteAccount',defs:{main:{type:'procedure',description:'Delete a user account as an administrator.',input:{encoding:'application/json',schema:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'}}}}}}},ComAtprotoAdminDisableAccountInvites:{lexicon:1,id:'com.atproto.admin.disableAccountInvites',defs:{main:{type:'procedure',description:'Disable an account from receiving new invite codes, but does not invalidate existing codes.',input:{encoding:'application/json',schema:{type:'object',required:['account'],properties:{account:{type:'string',format:'did'},note:{type:'string',description:'Optional reason for disabled invites.'}}}}}}},ComAtprotoAdminDisableInviteCodes:{lexicon:1,id:'com.atproto.admin.disableInviteCodes',defs:{main:{type:'procedure',description:'Disable some set of codes and/or all codes associated with a set of users.',input:{encoding:'application/json',schema:{type:'object',properties:{codes:{type:'array',items:{type:'string'}},accounts:{type:'array',items:{type:'string'}}}}}}}},ComAtprotoAdminEnableAccountInvites:{lexicon:1,id:'com.atproto.admin.enableAccountInvites',defs:{main:{type:'procedure',description:"Re-enable an account's ability to receive invite codes.",input:{encoding:'application/json',schema:{type:'object',required:['account'],properties:{account:{type:'string',format:'did'},note:{type:'string',description:'Optional reason for enabled invites.'}}}}}}},ComAtprotoAdminGetAccountInfo:{lexicon:1,id:'com.atproto.admin.getAccountInfo',defs:{main:{type:'query',description:'Get details about an account.',parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did'}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:com.atproto.admin.defs#accountView'}}}}},ComAtprotoAdminGetAccountInfos:{lexicon:1,id:'com.atproto.admin.getAccountInfos',defs:{main:{type:'query',description:'Get details about some accounts.',parameters:{type:'params',required:['dids'],properties:{dids:{type:'array',items:{type:'string',format:'did'}}}},output:{encoding:'application/json',schema:{type:'object',required:['infos'],properties:{infos:{type:'array',items:{type:'ref',ref:'lex:com.atproto.admin.defs#accountView'}}}}}}}},ComAtprotoAdminGetInviteCodes:{lexicon:1,id:'com.atproto.admin.getInviteCodes',defs:{main:{type:'query',description:'Get an admin view of invite codes.',parameters:{type:'params',properties:{sort:{type:'string',knownValues:['recent','usage'],default:'recent'},limit:{type:'integer',minimum:1,maximum:500,default:100},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['codes'],properties:{cursor:{type:'string'},codes:{type:'array',items:{type:'ref',ref:'lex:com.atproto.server.defs#inviteCode'}}}}}}}},ComAtprotoAdminGetSubjectStatus:{lexicon:1,id:'com.atproto.admin.getSubjectStatus',defs:{main:{type:'query',description:'Get the service-specific admin status of a subject (account, record, or blob).',parameters:{type:'params',properties:{did:{type:'string',format:'did'},uri:{type:'string',format:'at-uri'},blob:{type:'string',format:'cid'}}},output:{encoding:'application/json',schema:{type:'object',required:['subject'],properties:{subject:{type:'union',refs:['lex:com.atproto.admin.defs#repoRef','lex:com.atproto.repo.strongRef','lex:com.atproto.admin.defs#repoBlobRef']},takedown:{type:'ref',ref:'lex:com.atproto.admin.defs#statusAttr'},deactivated:{type:'ref',ref:'lex:com.atproto.admin.defs#statusAttr'}}}}}}},ComAtprotoAdminSearchAccounts:{lexicon:1,id:'com.atproto.admin.searchAccounts',defs:{main:{type:'query',description:'Get list of accounts that matches your search query.',parameters:{type:'params',properties:{email:{type:'string'},cursor:{type:'string'},limit:{type:'integer',minimum:1,maximum:100,default:50}}},output:{encoding:'application/json',schema:{type:'object',required:['accounts'],properties:{cursor:{type:'string'},accounts:{type:'array',items:{type:'ref',ref:'lex:com.atproto.admin.defs#accountView'}}}}}}}},ComAtprotoAdminSendEmail:{lexicon:1,id:'com.atproto.admin.sendEmail',defs:{main:{type:'procedure',description:"Send email to a user's account email address.",input:{encoding:'application/json',schema:{type:'object',required:['recipientDid','content','senderDid'],properties:{recipientDid:{type:'string',format:'did'},content:{type:'string'},subject:{type:'string'},senderDid:{type:'string',format:'did'},comment:{type:'string',description:"Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"}}}},output:{encoding:'application/json',schema:{type:'object',required:['sent'],properties:{sent:{type:'boolean'}}}}}}},ComAtprotoAdminUpdateAccountEmail:{lexicon:1,id:'com.atproto.admin.updateAccountEmail',defs:{main:{type:'procedure',description:"Administrative action to update an account's email.",input:{encoding:'application/json',schema:{type:'object',required:['account','email'],properties:{account:{type:'string',format:'at-identifier',description:'The handle or DID of the repo.'},email:{type:'string'}}}}}}},ComAtprotoAdminUpdateAccountHandle:{lexicon:1,id:'com.atproto.admin.updateAccountHandle',defs:{main:{type:'procedure',description:"Administrative action to update an account's handle.",input:{encoding:'application/json',schema:{type:'object',required:['did','handle'],properties:{did:{type:'string',format:'did'},handle:{type:'string',format:'handle'}}}}}}},ComAtprotoAdminUpdateAccountPassword:{lexicon:1,id:'com.atproto.admin.updateAccountPassword',defs:{main:{type:'procedure',description:'Update the password for a user account as an administrator.',input:{encoding:'application/json',schema:{type:'object',required:['did','password'],properties:{did:{type:'string',format:'did'},password:{type:'string'}}}}}}},ComAtprotoAdminUpdateSubjectStatus:{lexicon:1,id:'com.atproto.admin.updateSubjectStatus',defs:{main:{type:'procedure',description:'Update the service-specific admin status of a subject (account, record, or blob).',input:{encoding:'application/json',schema:{type:'object',required:['subject'],properties:{subject:{type:'union',refs:['lex:com.atproto.admin.defs#repoRef','lex:com.atproto.repo.strongRef','lex:com.atproto.admin.defs#repoBlobRef']},takedown:{type:'ref',ref:'lex:com.atproto.admin.defs#statusAttr'},deactivated:{type:'ref',ref:'lex:com.atproto.admin.defs#statusAttr'}}}},output:{encoding:'application/json',schema:{type:'object',required:['subject'],properties:{subject:{type:'union',refs:['lex:com.atproto.admin.defs#repoRef','lex:com.atproto.repo.strongRef','lex:com.atproto.admin.defs#repoBlobRef']},takedown:{type:'ref',ref:'lex:com.atproto.admin.defs#statusAttr'}}}}}}},ComAtprotoIdentityGetRecommendedDidCredentials:{lexicon:1,id:'com.atproto.identity.getRecommendedDidCredentials',defs:{main:{type:'query',description:'Describe the credentials that should be included in the DID doc of an account that is migrating to this service.',output:{encoding:'application/json',schema:{type:'object',properties:{rotationKeys:{description:'Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.',type:'array',items:{type:'string'}},alsoKnownAs:{type:'array',items:{type:'string'}},verificationMethods:{type:'unknown'},services:{type:'unknown'}}}}}}},ComAtprotoIdentityRequestPlcOperationSignature:{lexicon:1,id:'com.atproto.identity.requestPlcOperationSignature',defs:{main:{type:'procedure',description:'Request an email with a code to in order to request a signed PLC operation. Requires Auth.'}}},ComAtprotoIdentityResolveHandle:{lexicon:1,id:'com.atproto.identity.resolveHandle',defs:{main:{type:'query',description:'Resolves a handle (domain name) to a DID.',parameters:{type:'params',required:['handle'],properties:{handle:{type:'string',format:'handle',description:'The handle to resolve.'}}},output:{encoding:'application/json',schema:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'}}}}}}},ComAtprotoIdentitySignPlcOperation:{lexicon:1,id:'com.atproto.identity.signPlcOperation',defs:{main:{type:'procedure',description:"Signs a PLC operation to update some value(s) in the requesting DID's document.",input:{encoding:'application/json',schema:{type:'object',properties:{token:{description:'A token received through com.atproto.identity.requestPlcOperationSignature',type:'string'},rotationKeys:{type:'array',items:{type:'string'}},alsoKnownAs:{type:'array',items:{type:'string'}},verificationMethods:{type:'unknown'},services:{type:'unknown'}}}},output:{encoding:'application/json',schema:{type:'object',required:['operation'],properties:{operation:{type:'unknown',description:'A signed DID PLC operation.'}}}}}}},ComAtprotoIdentitySubmitPlcOperation:{lexicon:1,id:'com.atproto.identity.submitPlcOperation',defs:{main:{type:'procedure',description:"Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",input:{encoding:'application/json',schema:{type:'object',required:['operation'],properties:{operation:{type:'unknown'}}}}}}},ComAtprotoIdentityUpdateHandle:{lexicon:1,id:'com.atproto.identity.updateHandle',defs:{main:{type:'procedure',description:"Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",input:{encoding:'application/json',schema:{type:'object',required:['handle'],properties:{handle:{type:'string',format:'handle',description:'The new handle.'}}}}}}},ComAtprotoLabelDefs:{lexicon:1,id:'com.atproto.label.defs',defs:{label:{type:'object',description:'Metadata tag on an atproto resource (eg, repo or record).',required:['src','uri','val','cts'],properties:{ver:{type:'integer',description:'The AT Protocol version of the label object.'},src:{type:'string',format:'did',description:'DID of the actor who created this label.'},uri:{type:'string',format:'uri',description:'AT URI of the record, repository (account), or other resource that this label applies to.'},cid:{type:'string',format:'cid',description:"Optionally, CID specifying the specific version of 'uri' resource this label applies to."},val:{type:'string',maxLength:128,description:'The short string name of the value or type of this label.'},neg:{type:'boolean',description:'If true, this is a negation label, overwriting a previous label.'},cts:{type:'string',format:'datetime',description:'Timestamp when this label was created.'},exp:{type:'string',format:'datetime',description:'Timestamp at which this label expires (no longer applies).'},sig:{type:'bytes',description:'Signature of dag-cbor encoded label.'}}},selfLabels:{type:'object',description:'Metadata tags on an atproto record, published by the author within the record.',required:['values'],properties:{values:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#selfLabel'},maxLength:10}}},selfLabel:{type:'object',description:'Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.',required:['val'],properties:{val:{type:'string',maxLength:128,description:'The short string name of the value or type of this label.'}}},labelValueDefinition:{type:'object',description:'Declares a label value and its expected interpretations and behaviors.',required:['identifier','severity','blurs','locales'],properties:{identifier:{type:'string',description:"The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",maxLength:100,maxGraphemes:100},severity:{type:'string',description:"How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",knownValues:['inform','alert','none']},blurs:{type:'string',description:"What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",knownValues:['content','media','none']},defaultSetting:{type:'string',description:'The default setting for this label.',knownValues:['ignore','warn','hide'],default:'warn'},adultOnly:{type:'boolean',description:'Does the user need to have adult content enabled in order to configure this label?'},locales:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#labelValueDefinitionStrings'}}}},labelValueDefinitionStrings:{type:'object',description:'Strings which describe the label in the UI, localized into a specific language.',required:['lang','name','description'],properties:{lang:{type:'string',description:'The code of the language these strings are written in.',format:'language'},name:{type:'string',description:'A short human-readable name for the label.',maxGraphemes:64,maxLength:640},description:{type:'string',description:'A longer description of what the label means and why it might be applied.',maxGraphemes:10000,maxLength:100000}}},labelValue:{type:'string',knownValues:['!hide','!no-promote','!warn','!no-unauthenticated','dmca-violation','doxxing','porn','sexual','nudity','nsfl','gore']}}},ComAtprotoLabelQueryLabels:{lexicon:1,id:'com.atproto.label.queryLabels',defs:{main:{type:'query',description:'Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.',parameters:{type:'params',required:['uriPatterns'],properties:{uriPatterns:{type:'array',items:{type:'string'},description:"List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."},sources:{type:'array',items:{type:'string',format:'did'},description:'Optional list of label sources (DIDs) to filter on.'},limit:{type:'integer',minimum:1,maximum:250,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['labels'],properties:{cursor:{type:'string'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}}}}}}}},ComAtprotoLabelSubscribeLabels:{lexicon:1,id:'com.atproto.label.subscribeLabels',defs:{main:{type:'subscription',description:'Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.',parameters:{type:'params',properties:{cursor:{type:'integer',description:'The last known event seq number to backfill from.'}}},message:{schema:{type:'union',refs:['lex:com.atproto.label.subscribeLabels#labels','lex:com.atproto.label.subscribeLabels#info']}},errors:[{name:'FutureCursor'}]},labels:{type:'object',required:['seq','labels'],properties:{seq:{type:'integer'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}}}},info:{type:'object',required:['name'],properties:{name:{type:'string',knownValues:['OutdatedCursor']},message:{type:'string'}}}}},ComAtprotoModerationCreateReport:{lexicon:1,id:'com.atproto.moderation.createReport',defs:{main:{type:'procedure',description:'Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['reasonType','subject'],properties:{reasonType:{type:'ref',description:'Indicates the broad category of violation the report is for.',ref:'lex:com.atproto.moderation.defs#reasonType'},reason:{type:'string',maxGraphemes:2000,maxLength:20000,description:'Additional context about the content and violation.'},subject:{type:'union',refs:['lex:com.atproto.admin.defs#repoRef','lex:com.atproto.repo.strongRef']}}}},output:{encoding:'application/json',schema:{type:'object',required:['id','reasonType','subject','reportedBy','createdAt'],properties:{id:{type:'integer'},reasonType:{type:'ref',ref:'lex:com.atproto.moderation.defs#reasonType'},reason:{type:'string',maxGraphemes:2000,maxLength:20000},subject:{type:'union',refs:['lex:com.atproto.admin.defs#repoRef','lex:com.atproto.repo.strongRef']},reportedBy:{type:'string',format:'did'},createdAt:{type:'string',format:'datetime'}}}}}}},ComAtprotoModerationDefs:{lexicon:1,id:'com.atproto.moderation.defs',defs:{reasonType:{type:'string',knownValues:['com.atproto.moderation.defs#reasonSpam','com.atproto.moderation.defs#reasonViolation','com.atproto.moderation.defs#reasonMisleading','com.atproto.moderation.defs#reasonSexual','com.atproto.moderation.defs#reasonRude','com.atproto.moderation.defs#reasonOther','com.atproto.moderation.defs#reasonAppeal']},reasonSpam:{type:'token',description:'Spam: frequent unwanted promotion, replies, mentions'},reasonViolation:{type:'token',description:'Direct violation of server rules, laws, terms of service'},reasonMisleading:{type:'token',description:'Misleading identity, affiliation, or content'},reasonSexual:{type:'token',description:'Unwanted or mislabeled sexual content'},reasonRude:{type:'token',description:'Rude, harassing, explicit, or otherwise unwelcoming behavior'},reasonOther:{type:'token',description:'Other: reports not falling under another report category'},reasonAppeal:{type:'token',description:'Appeal: appeal a previously taken moderation action'}}},ComAtprotoRepoApplyWrites:{lexicon:1,id:'com.atproto.repo.applyWrites',defs:{main:{type:'procedure',description:'Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.',input:{encoding:'application/json',schema:{type:'object',required:['repo','writes'],properties:{repo:{type:'string',format:'at-identifier',description:'The handle or DID of the repo (aka, current account).'},validate:{type:'boolean',description:"Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons."},writes:{type:'array',items:{type:'union',refs:['lex:com.atproto.repo.applyWrites#create','lex:com.atproto.repo.applyWrites#update','lex:com.atproto.repo.applyWrites#delete'],closed:true}},swapCommit:{type:'string',description:'If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.',format:'cid'}}}},output:{encoding:'application/json',schema:{type:'object',required:[],properties:{commit:{type:'ref',ref:'lex:com.atproto.repo.defs#commitMeta'},results:{type:'array',items:{type:'union',refs:['lex:com.atproto.repo.applyWrites#createResult','lex:com.atproto.repo.applyWrites#updateResult','lex:com.atproto.repo.applyWrites#deleteResult'],closed:true}}}}},errors:[{name:'InvalidSwap',description:"Indicates that the 'swapCommit' parameter did not match current commit."}]},create:{type:'object',description:'Operation which creates a new record.',required:['collection','value'],properties:{collection:{type:'string',format:'nsid'},rkey:{type:'string',maxLength:512},value:{type:'unknown'}}},update:{type:'object',description:'Operation which updates an existing record.',required:['collection','rkey','value'],properties:{collection:{type:'string',format:'nsid'},rkey:{type:'string'},value:{type:'unknown'}}},delete:{type:'object',description:'Operation which deletes an existing record.',required:['collection','rkey'],properties:{collection:{type:'string',format:'nsid'},rkey:{type:'string'}}},createResult:{type:'object',required:['uri','cid'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},validationStatus:{type:'string',knownValues:['valid','unknown']}}},updateResult:{type:'object',required:['uri','cid'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},validationStatus:{type:'string',knownValues:['valid','unknown']}}},deleteResult:{type:'object',required:[],properties:{}}}},ComAtprotoRepoCreateRecord:{lexicon:1,id:'com.atproto.repo.createRecord',defs:{main:{type:'procedure',description:'Create a single new repository record. Requires auth, implemented by PDS.',input:{encoding:'application/json',schema:{type:'object',required:['repo','collection','record'],properties:{repo:{type:'string',format:'at-identifier',description:'The handle or DID of the repo (aka, current account).'},collection:{type:'string',format:'nsid',description:'The NSID of the record collection.'},rkey:{type:'string',description:'The Record Key.',maxLength:512},validate:{type:'boolean',description:"Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."},record:{type:'unknown',description:'The record itself. Must contain a $type field.'},swapCommit:{type:'string',format:'cid',description:'Compare and swap with the previous commit by CID.'}}}},output:{encoding:'application/json',schema:{type:'object',required:['uri','cid'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},commit:{type:'ref',ref:'lex:com.atproto.repo.defs#commitMeta'},validationStatus:{type:'string',knownValues:['valid','unknown']}}}},errors:[{name:'InvalidSwap',description:"Indicates that 'swapCommit' didn't match current repo commit."}]}}},ComAtprotoRepoDefs:{lexicon:1,id:'com.atproto.repo.defs',defs:{commitMeta:{type:'object',required:['cid','rev'],properties:{cid:{type:'string',format:'cid'},rev:{type:'string'}}}}},ComAtprotoRepoDeleteRecord:{lexicon:1,id:'com.atproto.repo.deleteRecord',defs:{main:{type:'procedure',description:"Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",input:{encoding:'application/json',schema:{type:'object',required:['repo','collection','rkey'],properties:{repo:{type:'string',format:'at-identifier',description:'The handle or DID of the repo (aka, current account).'},collection:{type:'string',format:'nsid',description:'The NSID of the record collection.'},rkey:{type:'string',description:'The Record Key.'},swapRecord:{type:'string',format:'cid',description:'Compare and swap with the previous record by CID.'},swapCommit:{type:'string',format:'cid',description:'Compare and swap with the previous commit by CID.'}}}},output:{encoding:'application/json',schema:{type:'object',properties:{commit:{type:'ref',ref:'lex:com.atproto.repo.defs#commitMeta'}}}},errors:[{name:'InvalidSwap'}]}}},ComAtprotoRepoDescribeRepo:{lexicon:1,id:'com.atproto.repo.describeRepo',defs:{main:{type:'query',description:'Get information about an account and repository, including the list of collections. Does not require auth.',parameters:{type:'params',required:['repo'],properties:{repo:{type:'string',format:'at-identifier',description:'The handle or DID of the repo.'}}},output:{encoding:'application/json',schema:{type:'object',required:['handle','did','didDoc','collections','handleIsCorrect'],properties:{handle:{type:'string',format:'handle'},did:{type:'string',format:'did'},didDoc:{type:'unknown',description:'The complete DID document for this account.'},collections:{type:'array',description:'List of all the collections (NSIDs) for which this repo contains at least one record.',items:{type:'string',format:'nsid'}},handleIsCorrect:{type:'boolean',description:'Indicates if handle is currently valid (resolves bi-directionally)'}}}}}}},ComAtprotoRepoGetRecord:{lexicon:1,id:'com.atproto.repo.getRecord',defs:{main:{type:'query',description:'Get a single record from a repository. Does not require auth.',parameters:{type:'params',required:['repo','collection','rkey'],properties:{repo:{type:'string',format:'at-identifier',description:'The handle or DID of the repo.'},collection:{type:'string',format:'nsid',description:'The NSID of the record collection.'},rkey:{type:'string',description:'The Record Key.'},cid:{type:'string',format:'cid',description:'The CID of the version of the record. If not specified, then return the most recent version.'}}},output:{encoding:'application/json',schema:{type:'object',required:['uri','value'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},value:{type:'unknown'}}}},errors:[{name:'RecordNotFound'}]}}},ComAtprotoRepoImportRepo:{lexicon:1,id:'com.atproto.repo.importRepo',defs:{main:{type:'procedure',description:'Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.',input:{encoding:'application/vnd.ipld.car'}}}},ComAtprotoRepoListMissingBlobs:{lexicon:1,id:'com.atproto.repo.listMissingBlobs',defs:{main:{type:'query',description:'Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:1000,default:500},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['blobs'],properties:{cursor:{type:'string'},blobs:{type:'array',items:{type:'ref',ref:'lex:com.atproto.repo.listMissingBlobs#recordBlob'}}}}}},recordBlob:{type:'object',required:['cid','recordUri'],properties:{cid:{type:'string',format:'cid'},recordUri:{type:'string',format:'at-uri'}}}}},ComAtprotoRepoListRecords:{lexicon:1,id:'com.atproto.repo.listRecords',defs:{main:{type:'query',description:'List a range of records in a repository, matching a specific collection. Does not require auth.',parameters:{type:'params',required:['repo','collection'],properties:{repo:{type:'string',format:'at-identifier',description:'The handle or DID of the repo.'},collection:{type:'string',format:'nsid',description:'The NSID of the record type.'},limit:{type:'integer',minimum:1,maximum:100,default:50,description:'The number of records to return.'},cursor:{type:'string'},rkeyStart:{type:'string',description:'DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)'},rkeyEnd:{type:'string',description:'DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)'},reverse:{type:'boolean',description:'Flag to reverse the order of the returned records.'}}},output:{encoding:'application/json',schema:{type:'object',required:['records'],properties:{cursor:{type:'string'},records:{type:'array',items:{type:'ref',ref:'lex:com.atproto.repo.listRecords#record'}}}}}},record:{type:'object',required:['uri','cid','value'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},value:{type:'unknown'}}}}},ComAtprotoRepoPutRecord:{lexicon:1,id:'com.atproto.repo.putRecord',defs:{main:{type:'procedure',description:'Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.',input:{encoding:'application/json',schema:{type:'object',required:['repo','collection','rkey','record'],nullable:['swapRecord'],properties:{repo:{type:'string',format:'at-identifier',description:'The handle or DID of the repo (aka, current account).'},collection:{type:'string',format:'nsid',description:'The NSID of the record collection.'},rkey:{type:'string',description:'The Record Key.',maxLength:512},validate:{type:'boolean',description:"Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."},record:{type:'unknown',description:'The record to write.'},swapRecord:{type:'string',format:'cid',description:'Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation'},swapCommit:{type:'string',format:'cid',description:'Compare and swap with the previous commit by CID.'}}}},output:{encoding:'application/json',schema:{type:'object',required:['uri','cid'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},commit:{type:'ref',ref:'lex:com.atproto.repo.defs#commitMeta'},validationStatus:{type:'string',knownValues:['valid','unknown']}}}},errors:[{name:'InvalidSwap'}]}}},ComAtprotoRepoStrongRef:{lexicon:1,id:'com.atproto.repo.strongRef',description:'A URI with a content-hash fingerprint.',defs:{main:{type:'object',required:['uri','cid'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'}}}}},ComAtprotoRepoUploadBlob:{lexicon:1,id:'com.atproto.repo.uploadBlob',defs:{main:{type:'procedure',description:'Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.',input:{encoding:'*/*'},output:{encoding:'application/json',schema:{type:'object',required:['blob'],properties:{blob:{type:'blob'}}}}}}},ComAtprotoServerActivateAccount:{lexicon:1,id:'com.atproto.server.activateAccount',defs:{main:{type:'procedure',description:"Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."}}},ComAtprotoServerCheckAccountStatus:{lexicon:1,id:'com.atproto.server.checkAccountStatus',defs:{main:{type:'query',description:'Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.',output:{encoding:'application/json',schema:{type:'object',required:['activated','validDid','repoCommit','repoRev','repoBlocks','indexedRecords','privateStateValues','expectedBlobs','importedBlobs'],properties:{activated:{type:'boolean'},validDid:{type:'boolean'},repoCommit:{type:'string',format:'cid'},repoRev:{type:'string'},repoBlocks:{type:'integer'},indexedRecords:{type:'integer'},privateStateValues:{type:'integer'},expectedBlobs:{type:'integer'},importedBlobs:{type:'integer'}}}}}}},ComAtprotoServerConfirmEmail:{lexicon:1,id:'com.atproto.server.confirmEmail',defs:{main:{type:'procedure',description:'Confirm an email using a token from com.atproto.server.requestEmailConfirmation.',input:{encoding:'application/json',schema:{type:'object',required:['email','token'],properties:{email:{type:'string'},token:{type:'string'}}}},errors:[{name:'AccountNotFound'},{name:'ExpiredToken'},{name:'InvalidToken'},{name:'InvalidEmail'}]}}},ComAtprotoServerCreateAccount:{lexicon:1,id:'com.atproto.server.createAccount',defs:{main:{type:'procedure',description:'Create an account. Implemented by PDS.',input:{encoding:'application/json',schema:{type:'object',required:['handle'],properties:{email:{type:'string'},handle:{type:'string',format:'handle',description:'Requested handle for the account.'},did:{type:'string',format:'did',description:'Pre-existing atproto DID, being imported to a new account.'},inviteCode:{type:'string'},verificationCode:{type:'string'},verificationPhone:{type:'string'},password:{type:'string',description:'Initial account password. May need to meet instance-specific password strength requirements.'},recoveryKey:{type:'string',description:'DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.'},plcOp:{type:'unknown',description:'A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.'}}}},output:{encoding:'application/json',schema:{type:'object',description:'Account login session returned on successful account creation.',required:['accessJwt','refreshJwt','handle','did'],properties:{accessJwt:{type:'string'},refreshJwt:{type:'string'},handle:{type:'string',format:'handle'},did:{type:'string',format:'did',description:'The DID of the new account.'},didDoc:{type:'unknown',description:'Complete DID document.'}}}},errors:[{name:'InvalidHandle'},{name:'InvalidPassword'},{name:'InvalidInviteCode'},{name:'HandleNotAvailable'},{name:'UnsupportedDomain'},{name:'UnresolvableDid'},{name:'IncompatibleDidDoc'}]}}},ComAtprotoServerCreateAppPassword:{lexicon:1,id:'com.atproto.server.createAppPassword',defs:{main:{type:'procedure',description:'Create an App Password.',input:{encoding:'application/json',schema:{type:'object',required:['name'],properties:{name:{type:'string',description:'A short name for the App Password, to help distinguish them.'},privileged:{type:'boolean',description:"If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients."}}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:com.atproto.server.createAppPassword#appPassword'}},errors:[{name:'AccountTakedown'}]},appPassword:{type:'object',required:['name','password','createdAt'],properties:{name:{type:'string'},password:{type:'string'},createdAt:{type:'string',format:'datetime'},privileged:{type:'boolean'}}}}},ComAtprotoServerCreateInviteCode:{lexicon:1,id:'com.atproto.server.createInviteCode',defs:{main:{type:'procedure',description:'Create an invite code.',input:{encoding:'application/json',schema:{type:'object',required:['useCount'],properties:{useCount:{type:'integer'},forAccount:{type:'string',format:'did'}}}},output:{encoding:'application/json',schema:{type:'object',required:['code'],properties:{code:{type:'string'}}}}}}},ComAtprotoServerCreateInviteCodes:{lexicon:1,id:'com.atproto.server.createInviteCodes',defs:{main:{type:'procedure',description:'Create invite codes.',input:{encoding:'application/json',schema:{type:'object',required:['codeCount','useCount'],properties:{codeCount:{type:'integer',default:1},useCount:{type:'integer'},forAccounts:{type:'array',items:{type:'string',format:'did'}}}}},output:{encoding:'application/json',schema:{type:'object',required:['codes'],properties:{codes:{type:'array',items:{type:'ref',ref:'lex:com.atproto.server.createInviteCodes#accountCodes'}}}}}},accountCodes:{type:'object',required:['account','codes'],properties:{account:{type:'string'},codes:{type:'array',items:{type:'string'}}}}}},ComAtprotoServerCreateSession:{lexicon:1,id:'com.atproto.server.createSession',defs:{main:{type:'procedure',description:'Create an authentication session.',input:{encoding:'application/json',schema:{type:'object',required:['identifier','password'],properties:{identifier:{type:'string',description:'Handle or other identifier supported by the server for the authenticating user.'},password:{type:'string'},authFactorToken:{type:'string'},allowTakendown:{type:'boolean',description:'When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned'}}}},output:{encoding:'application/json',schema:{type:'object',required:['accessJwt','refreshJwt','handle','did'],properties:{accessJwt:{type:'string'},refreshJwt:{type:'string'},handle:{type:'string',format:'handle'},did:{type:'string',format:'did'},didDoc:{type:'unknown'},email:{type:'string'},emailConfirmed:{type:'boolean'},emailAuthFactor:{type:'boolean'},active:{type:'boolean'},status:{type:'string',description:'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',knownValues:['takendown','suspended','deactivated']}}}},errors:[{name:'AccountTakedown'},{name:'AuthFactorTokenRequired'}]}}},ComAtprotoServerDeactivateAccount:{lexicon:1,id:'com.atproto.server.deactivateAccount',defs:{main:{type:'procedure',description:'Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.',input:{encoding:'application/json',schema:{type:'object',properties:{deleteAfter:{type:'string',format:'datetime',description:'A recommendation to server as to how long they should hold onto the deactivated account before deleting.'}}}}}}},ComAtprotoServerDefs:{lexicon:1,id:'com.atproto.server.defs',defs:{inviteCode:{type:'object',required:['code','available','disabled','forAccount','createdBy','createdAt','uses'],properties:{code:{type:'string'},available:{type:'integer'},disabled:{type:'boolean'},forAccount:{type:'string'},createdBy:{type:'string'},createdAt:{type:'string',format:'datetime'},uses:{type:'array',items:{type:'ref',ref:'lex:com.atproto.server.defs#inviteCodeUse'}}}},inviteCodeUse:{type:'object',required:['usedBy','usedAt'],properties:{usedBy:{type:'string',format:'did'},usedAt:{type:'string',format:'datetime'}}}}},ComAtprotoServerDeleteAccount:{lexicon:1,id:'com.atproto.server.deleteAccount',defs:{main:{type:'procedure',description:"Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",input:{encoding:'application/json',schema:{type:'object',required:['did','password','token'],properties:{did:{type:'string',format:'did'},password:{type:'string'},token:{type:'string'}}}},errors:[{name:'ExpiredToken'},{name:'InvalidToken'}]}}},ComAtprotoServerDeleteSession:{lexicon:1,id:'com.atproto.server.deleteSession',defs:{main:{type:'procedure',description:'Delete the current session. Requires auth.'}}},ComAtprotoServerDescribeServer:{lexicon:1,id:'com.atproto.server.describeServer',defs:{main:{type:'query',description:"Describes the server's account creation requirements and capabilities. Implemented by PDS.",output:{encoding:'application/json',schema:{type:'object',required:['did','availableUserDomains'],properties:{inviteCodeRequired:{type:'boolean',description:'If true, an invite code must be supplied to create an account on this instance.'},phoneVerificationRequired:{type:'boolean',description:'If true, a phone verification token must be supplied to create an account on this instance.'},availableUserDomains:{type:'array',description:'List of domain suffixes that can be used in account handles.',items:{type:'string'}},links:{type:'ref',description:'URLs of service policy documents.',ref:'lex:com.atproto.server.describeServer#links'},contact:{type:'ref',description:'Contact information',ref:'lex:com.atproto.server.describeServer#contact'},did:{type:'string',format:'did'}}}}},links:{type:'object',properties:{privacyPolicy:{type:'string',format:'uri'},termsOfService:{type:'string',format:'uri'}}},contact:{type:'object',properties:{email:{type:'string'}}}}},ComAtprotoServerGetAccountInviteCodes:{lexicon:1,id:'com.atproto.server.getAccountInviteCodes',defs:{main:{type:'query',description:'Get all invite codes for the current account. Requires auth.',parameters:{type:'params',properties:{includeUsed:{type:'boolean',default:true},createAvailable:{type:'boolean',default:true,description:"Controls whether any new 'earned' but not 'created' invites should be created."}}},output:{encoding:'application/json',schema:{type:'object',required:['codes'],properties:{codes:{type:'array',items:{type:'ref',ref:'lex:com.atproto.server.defs#inviteCode'}}}}},errors:[{name:'DuplicateCreate'}]}}},ComAtprotoServerGetServiceAuth:{lexicon:1,id:'com.atproto.server.getServiceAuth',defs:{main:{type:'query',description:'Get a signed token on behalf of the requesting DID for the requested service.',parameters:{type:'params',required:['aud'],properties:{aud:{type:'string',format:'did',description:'The DID of the service that the token will be used to authenticate with'},exp:{type:'integer',description:'The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.'},lxm:{type:'string',format:'nsid',description:'Lexicon (XRPC) method to bind the requested token to'}}},output:{encoding:'application/json',schema:{type:'object',required:['token'],properties:{token:{type:'string'}}}},errors:[{name:'BadExpiration',description:'Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes.'}]}}},ComAtprotoServerGetSession:{lexicon:1,id:'com.atproto.server.getSession',defs:{main:{type:'query',description:'Get information about the current auth session. Requires auth.',output:{encoding:'application/json',schema:{type:'object',required:['handle','did'],properties:{handle:{type:'string',format:'handle'},did:{type:'string',format:'did'},email:{type:'string'},emailConfirmed:{type:'boolean'},emailAuthFactor:{type:'boolean'},didDoc:{type:'unknown'},active:{type:'boolean'},status:{type:'string',description:'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',knownValues:['takendown','suspended','deactivated']}}}}}}},ComAtprotoServerListAppPasswords:{lexicon:1,id:'com.atproto.server.listAppPasswords',defs:{main:{type:'query',description:'List all App Passwords.',output:{encoding:'application/json',schema:{type:'object',required:['passwords'],properties:{passwords:{type:'array',items:{type:'ref',ref:'lex:com.atproto.server.listAppPasswords#appPassword'}}}}},errors:[{name:'AccountTakedown'}]},appPassword:{type:'object',required:['name','createdAt'],properties:{name:{type:'string'},createdAt:{type:'string',format:'datetime'},privileged:{type:'boolean'}}}}},ComAtprotoServerRefreshSession:{lexicon:1,id:'com.atproto.server.refreshSession',defs:{main:{type:'procedure',description:"Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",output:{encoding:'application/json',schema:{type:'object',required:['accessJwt','refreshJwt','handle','did'],properties:{accessJwt:{type:'string'},refreshJwt:{type:'string'},handle:{type:'string',format:'handle'},did:{type:'string',format:'did'},didDoc:{type:'unknown'},active:{type:'boolean'},status:{type:'string',description:"Hosting status of the account. If not specified, then assume 'active'.",knownValues:['takendown','suspended','deactivated']}}}},errors:[{name:'AccountTakedown'}]}}},ComAtprotoServerRequestAccountDelete:{lexicon:1,id:'com.atproto.server.requestAccountDelete',defs:{main:{type:'procedure',description:'Initiate a user account deletion via email.'}}},ComAtprotoServerRequestEmailConfirmation:{lexicon:1,id:'com.atproto.server.requestEmailConfirmation',defs:{main:{type:'procedure',description:'Request an email with a code to confirm ownership of email.'}}},ComAtprotoServerRequestEmailUpdate:{lexicon:1,id:'com.atproto.server.requestEmailUpdate',defs:{main:{type:'procedure',description:'Request a token in order to update email.',output:{encoding:'application/json',schema:{type:'object',required:['tokenRequired'],properties:{tokenRequired:{type:'boolean'}}}}}}},ComAtprotoServerRequestPasswordReset:{lexicon:1,id:'com.atproto.server.requestPasswordReset',defs:{main:{type:'procedure',description:'Initiate a user account password reset via email.',input:{encoding:'application/json',schema:{type:'object',required:['email'],properties:{email:{type:'string'}}}}}}},ComAtprotoServerReserveSigningKey:{lexicon:1,id:'com.atproto.server.reserveSigningKey',defs:{main:{type:'procedure',description:'Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.',input:{encoding:'application/json',schema:{type:'object',properties:{did:{type:'string',format:'did',description:'The DID to reserve a key for.'}}}},output:{encoding:'application/json',schema:{type:'object',required:['signingKey'],properties:{signingKey:{type:'string',description:'The public key for the reserved signing key, in did:key serialization.'}}}}}}},ComAtprotoServerResetPassword:{lexicon:1,id:'com.atproto.server.resetPassword',defs:{main:{type:'procedure',description:'Reset a user account password using a token.',input:{encoding:'application/json',schema:{type:'object',required:['token','password'],properties:{token:{type:'string'},password:{type:'string'}}}},errors:[{name:'ExpiredToken'},{name:'InvalidToken'}]}}},ComAtprotoServerRevokeAppPassword:{lexicon:1,id:'com.atproto.server.revokeAppPassword',defs:{main:{type:'procedure',description:'Revoke an App Password by name.',input:{encoding:'application/json',schema:{type:'object',required:['name'],properties:{name:{type:'string'}}}}}}},ComAtprotoServerUpdateEmail:{lexicon:1,id:'com.atproto.server.updateEmail',defs:{main:{type:'procedure',description:"Update an account's email.",input:{encoding:'application/json',schema:{type:'object',required:['email'],properties:{email:{type:'string'},emailAuthFactor:{type:'boolean'},token:{type:'string',description:"Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."}}}},errors:[{name:'ExpiredToken'},{name:'InvalidToken'},{name:'TokenRequired'}]}}},ComAtprotoSyncGetBlob:{lexicon:1,id:'com.atproto.sync.getBlob',defs:{main:{type:'query',description:'Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.',parameters:{type:'params',required:['did','cid'],properties:{did:{type:'string',format:'did',description:'The DID of the account.'},cid:{type:'string',format:'cid',description:'The CID of the blob to fetch'}}},output:{encoding:'*/*'},errors:[{name:'BlobNotFound'},{name:'RepoNotFound'},{name:'RepoTakendown'},{name:'RepoSuspended'},{name:'RepoDeactivated'}]}}},ComAtprotoSyncGetBlocks:{lexicon:1,id:'com.atproto.sync.getBlocks',defs:{main:{type:'query',description:'Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.',parameters:{type:'params',required:['did','cids'],properties:{did:{type:'string',format:'did',description:'The DID of the repo.'},cids:{type:'array',items:{type:'string',format:'cid'}}}},output:{encoding:'application/vnd.ipld.car'},errors:[{name:'BlockNotFound'},{name:'RepoNotFound'},{name:'RepoTakendown'},{name:'RepoSuspended'},{name:'RepoDeactivated'}]}}},ComAtprotoSyncGetCheckout:{lexicon:1,id:'com.atproto.sync.getCheckout',defs:{main:{type:'query',description:'DEPRECATED - please use com.atproto.sync.getRepo instead',parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did',description:'The DID of the repo.'}}},output:{encoding:'application/vnd.ipld.car'}}}},ComAtprotoSyncGetHead:{lexicon:1,id:'com.atproto.sync.getHead',defs:{main:{type:'query',description:'DEPRECATED - please use com.atproto.sync.getLatestCommit instead',parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did',description:'The DID of the repo.'}}},output:{encoding:'application/json',schema:{type:'object',required:['root'],properties:{root:{type:'string',format:'cid'}}}},errors:[{name:'HeadNotFound'}]}}},ComAtprotoSyncGetLatestCommit:{lexicon:1,id:'com.atproto.sync.getLatestCommit',defs:{main:{type:'query',description:'Get the current commit CID & revision of the specified repo. Does not require auth.',parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did',description:'The DID of the repo.'}}},output:{encoding:'application/json',schema:{type:'object',required:['cid','rev'],properties:{cid:{type:'string',format:'cid'},rev:{type:'string'}}}},errors:[{name:'RepoNotFound'},{name:'RepoTakendown'},{name:'RepoSuspended'},{name:'RepoDeactivated'}]}}},ComAtprotoSyncGetRecord:{lexicon:1,id:'com.atproto.sync.getRecord',defs:{main:{type:'query',description:'Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.',parameters:{type:'params',required:['did','collection','rkey'],properties:{did:{type:'string',format:'did',description:'The DID of the repo.'},collection:{type:'string',format:'nsid'},rkey:{type:'string',description:'Record Key'},commit:{type:'string',format:'cid',description:'DEPRECATED: referenced a repo commit by CID, and retrieved record as of that commit'}}},output:{encoding:'application/vnd.ipld.car'},errors:[{name:'RecordNotFound'},{name:'RepoNotFound'},{name:'RepoTakendown'},{name:'RepoSuspended'},{name:'RepoDeactivated'}]}}},ComAtprotoSyncGetRepo:{lexicon:1,id:'com.atproto.sync.getRepo',defs:{main:{type:'query',description:"Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did',description:'The DID of the repo.'},since:{type:'string',description:"The revision ('rev') of the repo to create a diff from."}}},output:{encoding:'application/vnd.ipld.car'},errors:[{name:'RepoNotFound'},{name:'RepoTakendown'},{name:'RepoSuspended'},{name:'RepoDeactivated'}]}}},ComAtprotoSyncGetRepoStatus:{lexicon:1,id:'com.atproto.sync.getRepoStatus',defs:{main:{type:'query',description:'Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.',parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did',description:'The DID of the repo.'}}},output:{encoding:'application/json',schema:{type:'object',required:['did','active'],properties:{did:{type:'string',format:'did'},active:{type:'boolean'},status:{type:'string',description:'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',knownValues:['takendown','suspended','deactivated']},rev:{type:'string',description:'Optional field, the current rev of the repo, if active=true'}}}},errors:[{name:'RepoNotFound'}]}}},ComAtprotoSyncListBlobs:{lexicon:1,id:'com.atproto.sync.listBlobs',defs:{main:{type:'query',description:'List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.',parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did',description:'The DID of the repo.'},since:{type:'string',description:'Optional revision of the repo to list blobs since.'},limit:{type:'integer',minimum:1,maximum:1000,default:500},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['cids'],properties:{cursor:{type:'string'},cids:{type:'array',items:{type:'string',format:'cid'}}}}},errors:[{name:'RepoNotFound'},{name:'RepoTakendown'},{name:'RepoSuspended'},{name:'RepoDeactivated'}]}}},ComAtprotoSyncListRepos:{lexicon:1,id:'com.atproto.sync.listRepos',defs:{main:{type:'query',description:'Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:1000,default:500},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['repos'],properties:{cursor:{type:'string'},repos:{type:'array',items:{type:'ref',ref:'lex:com.atproto.sync.listRepos#repo'}}}}}},repo:{type:'object',required:['did','head','rev'],properties:{did:{type:'string',format:'did'},head:{type:'string',format:'cid',description:'Current repo commit CID'},rev:{type:'string'},active:{type:'boolean'},status:{type:'string',description:'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',knownValues:['takendown','suspended','deactivated']}}}}},ComAtprotoSyncNotifyOfUpdate:{lexicon:1,id:'com.atproto.sync.notifyOfUpdate',defs:{main:{type:'procedure',description:'Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.',input:{encoding:'application/json',schema:{type:'object',required:['hostname'],properties:{hostname:{type:'string',description:'Hostname of the current service (usually a PDS) that is notifying of update.'}}}}}}},ComAtprotoSyncRequestCrawl:{lexicon:1,id:'com.atproto.sync.requestCrawl',defs:{main:{type:'procedure',description:'Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.',input:{encoding:'application/json',schema:{type:'object',required:['hostname'],properties:{hostname:{type:'string',description:'Hostname of the current service (eg, PDS) that is requesting to be crawled.'}}}}}}},ComAtprotoSyncSubscribeRepos:{lexicon:1,id:'com.atproto.sync.subscribeRepos',defs:{main:{type:'subscription',description:'Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.',parameters:{type:'params',properties:{cursor:{type:'integer',description:'The last known event seq number to backfill from.'}}},message:{schema:{type:'union',refs:['lex:com.atproto.sync.subscribeRepos#commit','lex:com.atproto.sync.subscribeRepos#identity','lex:com.atproto.sync.subscribeRepos#account','lex:com.atproto.sync.subscribeRepos#handle','lex:com.atproto.sync.subscribeRepos#migrate','lex:com.atproto.sync.subscribeRepos#tombstone','lex:com.atproto.sync.subscribeRepos#info']}},errors:[{name:'FutureCursor'},{name:'ConsumerTooSlow',description:'If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection.'}]},commit:{type:'object',description:'Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.',required:['seq','rebase','tooBig','repo','commit','rev','since','blocks','ops','blobs','time'],nullable:['prev','since'],properties:{seq:{type:'integer',description:'The stream sequence number of this message.'},rebase:{type:'boolean',description:'DEPRECATED -- unused'},tooBig:{type:'boolean',description:'Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.'},repo:{type:'string',format:'did',description:'The repo this event comes from.'},commit:{type:'cid-link',description:'Repo commit object CID.'},prev:{type:'cid-link',description:'DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability.'},rev:{type:'string',description:'The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.'},since:{type:'string',description:'The rev of the last emitted commit from this repo (if any).'},blocks:{type:'bytes',description:'CAR file containing relevant blocks, as a diff since the previous repo state.',maxLength:1000000},ops:{type:'array',items:{type:'ref',ref:'lex:com.atproto.sync.subscribeRepos#repoOp',description:'List of repo mutation operations in this commit (eg, records created, updated, or deleted).'},maxLength:200},blobs:{type:'array',items:{type:'cid-link',description:'List of new blobs (by CID) referenced by records in this commit.'}},time:{type:'string',format:'datetime',description:'Timestamp of when this message was originally broadcast.'}}},identity:{type:'object',description:"Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",required:['seq','did','time'],properties:{seq:{type:'integer'},did:{type:'string',format:'did'},time:{type:'string',format:'datetime'},handle:{type:'string',format:'handle',description:"The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details."}}},account:{type:'object',description:"Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.",required:['seq','did','time','active'],properties:{seq:{type:'integer'},did:{type:'string',format:'did'},time:{type:'string',format:'datetime'},active:{type:'boolean',description:'Indicates that the account has a repository which can be fetched from the host that emitted this event.'},status:{type:'string',description:'If active=false, this optional field indicates a reason for why the account is not active.',knownValues:['takendown','suspended','deleted','deactivated']}}},handle:{type:'object',description:'DEPRECATED -- Use #identity event instead',required:['seq','did','handle','time'],properties:{seq:{type:'integer'},did:{type:'string',format:'did'},handle:{type:'string',format:'handle'},time:{type:'string',format:'datetime'}}},migrate:{type:'object',description:'DEPRECATED -- Use #account event instead',required:['seq','did','migrateTo','time'],nullable:['migrateTo'],properties:{seq:{type:'integer'},did:{type:'string',format:'did'},migrateTo:{type:'string'},time:{type:'string',format:'datetime'}}},tombstone:{type:'object',description:'DEPRECATED -- Use #account event instead',required:['seq','did','time'],properties:{seq:{type:'integer'},did:{type:'string',format:'did'},time:{type:'string',format:'datetime'}}},info:{type:'object',required:['name'],properties:{name:{type:'string',knownValues:['OutdatedCursor']},message:{type:'string'}}},repoOp:{type:'object',description:'A repo operation, ie a mutation of a single record.',required:['action','path','cid'],nullable:['cid'],properties:{action:{type:'string',knownValues:['create','update','delete']},path:{type:'string'},cid:{type:'cid-link',description:'For creates and updates, the new record CID. For deletions, null.'}}}}},ComAtprotoTempAddReservedHandle:{lexicon:1,id:'com.atproto.temp.addReservedHandle',defs:{main:{type:'procedure',description:'Add a handle to the set of reserved handles.',input:{encoding:'application/json',schema:{type:'object',required:['handle'],properties:{handle:{type:'string'}}}},output:{encoding:'application/json',schema:{type:'object',properties:{}}}}}},ComAtprotoTempCheckSignupQueue:{lexicon:1,id:'com.atproto.temp.checkSignupQueue',defs:{main:{type:'query',description:'Check accounts location in signup queue.',output:{encoding:'application/json',schema:{type:'object',required:['activated'],properties:{activated:{type:'boolean'},placeInQueue:{type:'integer'},estimatedTimeMs:{type:'integer'}}}}}}},ComAtprotoTempFetchLabels:{lexicon:1,id:'com.atproto.temp.fetchLabels',defs:{main:{type:'query',description:'DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.',parameters:{type:'params',properties:{since:{type:'integer'},limit:{type:'integer',minimum:1,maximum:250,default:50}}},output:{encoding:'application/json',schema:{type:'object',required:['labels'],properties:{labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}}}}}}}},ComAtprotoTempRequestPhoneVerification:{lexicon:1,id:'com.atproto.temp.requestPhoneVerification',defs:{main:{type:'procedure',description:'Request a verification code to be sent to the supplied phone number',input:{encoding:'application/json',schema:{type:'object',required:['phoneNumber'],properties:{phoneNumber:{type:'string'}}}}}}},AppBskyActorDefs:{lexicon:1,id:'app.bsky.actor.defs',defs:{profileViewBasic:{type:'object',required:['did','handle'],properties:{did:{type:'string',format:'did'},handle:{type:'string',format:'handle'},displayName:{type:'string',maxGraphemes:64,maxLength:640},avatar:{type:'string',format:'uri'},associated:{type:'ref',ref:'lex:app.bsky.actor.defs#profileAssociated'},viewer:{type:'ref',ref:'lex:app.bsky.actor.defs#viewerState'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},createdAt:{type:'string',format:'datetime'}}},profileView:{type:'object',required:['did','handle'],properties:{did:{type:'string',format:'did'},handle:{type:'string',format:'handle'},displayName:{type:'string',maxGraphemes:64,maxLength:640},description:{type:'string',maxGraphemes:256,maxLength:2560},avatar:{type:'string',format:'uri'},associated:{type:'ref',ref:'lex:app.bsky.actor.defs#profileAssociated'},indexedAt:{type:'string',format:'datetime'},createdAt:{type:'string',format:'datetime'},viewer:{type:'ref',ref:'lex:app.bsky.actor.defs#viewerState'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}}}},profileViewDetailed:{type:'object',required:['did','handle'],properties:{did:{type:'string',format:'did'},handle:{type:'string',format:'handle'},displayName:{type:'string',maxGraphemes:64,maxLength:640},description:{type:'string',maxGraphemes:256,maxLength:2560},avatar:{type:'string',format:'uri'},banner:{type:'string',format:'uri'},followersCount:{type:'integer'},followsCount:{type:'integer'},postsCount:{type:'integer'},associated:{type:'ref',ref:'lex:app.bsky.actor.defs#profileAssociated'},joinedViaStarterPack:{type:'ref',ref:'lex:app.bsky.graph.defs#starterPackViewBasic'},indexedAt:{type:'string',format:'datetime'},createdAt:{type:'string',format:'datetime'},viewer:{type:'ref',ref:'lex:app.bsky.actor.defs#viewerState'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},pinnedPost:{type:'ref',ref:'lex:com.atproto.repo.strongRef'}}},profileAssociated:{type:'object',properties:{lists:{type:'integer'},feedgens:{type:'integer'},starterPacks:{type:'integer'},labeler:{type:'boolean'},chat:{type:'ref',ref:'lex:app.bsky.actor.defs#profileAssociatedChat'}}},profileAssociatedChat:{type:'object',required:['allowIncoming'],properties:{allowIncoming:{type:'string',knownValues:['all','none','following']}}},viewerState:{type:'object',description:"Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",properties:{muted:{type:'boolean'},mutedByList:{type:'ref',ref:'lex:app.bsky.graph.defs#listViewBasic'},blockedBy:{type:'boolean'},blocking:{type:'string',format:'at-uri'},blockingByList:{type:'ref',ref:'lex:app.bsky.graph.defs#listViewBasic'},following:{type:'string',format:'at-uri'},followedBy:{type:'string',format:'at-uri'},knownFollowers:{type:'ref',ref:'lex:app.bsky.actor.defs#knownFollowers'}}},knownFollowers:{type:'object',description:"The subject's followers whom you also follow",required:['count','followers'],properties:{count:{type:'integer'},followers:{type:'array',minLength:0,maxLength:5,items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewBasic'}}}},preferences:{type:'array',items:{type:'union',refs:['lex:app.bsky.actor.defs#adultContentPref','lex:app.bsky.actor.defs#contentLabelPref','lex:app.bsky.actor.defs#savedFeedsPref','lex:app.bsky.actor.defs#savedFeedsPrefV2','lex:app.bsky.actor.defs#personalDetailsPref','lex:app.bsky.actor.defs#feedViewPref','lex:app.bsky.actor.defs#threadViewPref','lex:app.bsky.actor.defs#interestsPref','lex:app.bsky.actor.defs#mutedWordsPref','lex:app.bsky.actor.defs#hiddenPostsPref','lex:app.bsky.actor.defs#bskyAppStatePref','lex:app.bsky.actor.defs#labelersPref']}},adultContentPref:{type:'object',required:['enabled'],properties:{enabled:{type:'boolean',default:false}}},contentLabelPref:{type:'object',required:['label','visibility'],properties:{labelerDid:{type:'string',description:'Which labeler does this preference apply to? If undefined, applies globally.',format:'did'},label:{type:'string'},visibility:{type:'string',knownValues:['ignore','show','warn','hide']}}},savedFeed:{type:'object',required:['id','type','value','pinned'],properties:{id:{type:'string'},type:{type:'string',knownValues:['feed','list','timeline']},value:{type:'string'},pinned:{type:'boolean'}}},savedFeedsPrefV2:{type:'object',required:['items'],properties:{items:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#savedFeed'}}}},savedFeedsPref:{type:'object',required:['pinned','saved'],properties:{pinned:{type:'array',items:{type:'string',format:'at-uri'}},saved:{type:'array',items:{type:'string',format:'at-uri'}},timelineIndex:{type:'integer'}}},personalDetailsPref:{type:'object',properties:{birthDate:{type:'string',format:'datetime',description:'The birth date of account owner.'}}},feedViewPref:{type:'object',required:['feed'],properties:{feed:{type:'string',description:'The URI of the feed, or an identifier which describes the feed.'},hideReplies:{type:'boolean',description:'Hide replies in the feed.'},hideRepliesByUnfollowed:{type:'boolean',description:'Hide replies in the feed if they are not by followed users.',default:true},hideRepliesByLikeCount:{type:'integer',description:'Hide replies in the feed if they do not have this number of likes.'},hideReposts:{type:'boolean',description:'Hide reposts in the feed.'},hideQuotePosts:{type:'boolean',description:'Hide quote posts in the feed.'}}},threadViewPref:{type:'object',properties:{sort:{type:'string',description:'Sorting mode for threads.',knownValues:['oldest','newest','most-likes','random','hotness']},prioritizeFollowedUsers:{type:'boolean',description:'Show followed users at the top of all replies.'}}},interestsPref:{type:'object',required:['tags'],properties:{tags:{type:'array',maxLength:100,items:{type:'string',maxLength:640,maxGraphemes:64},description:"A list of tags which describe the account owner's interests gathered during onboarding."}}},mutedWordTarget:{type:'string',knownValues:['content','tag'],maxLength:640,maxGraphemes:64},mutedWord:{type:'object',description:'A word that the account owner has muted.',required:['value','targets'],properties:{id:{type:'string'},value:{type:'string',description:'The muted word itself.',maxLength:10000,maxGraphemes:1000},targets:{type:'array',description:'The intended targets of the muted word.',items:{type:'ref',ref:'lex:app.bsky.actor.defs#mutedWordTarget'}},actorTarget:{type:'string',description:'Groups of users to apply the muted word to. If undefined, applies to all users.',knownValues:['all','exclude-following'],default:'all'},expiresAt:{type:'string',format:'datetime',description:'The date and time at which the muted word will expire and no longer be applied.'}}},mutedWordsPref:{type:'object',required:['items'],properties:{items:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#mutedWord'},description:'A list of words the account owner has muted.'}}},hiddenPostsPref:{type:'object',required:['items'],properties:{items:{type:'array',items:{type:'string',format:'at-uri'},description:'A list of URIs of posts the account owner has hidden.'}}},labelersPref:{type:'object',required:['labelers'],properties:{labelers:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#labelerPrefItem'}}}},labelerPrefItem:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'}}},bskyAppStatePref:{description:"A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.",type:'object',properties:{activeProgressGuide:{type:'ref',ref:'lex:app.bsky.actor.defs#bskyAppProgressGuide'},queuedNudges:{description:'An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.',type:'array',maxLength:1000,items:{type:'string',maxLength:100}},nuxs:{description:'Storage for NUXs the user has encountered.',type:'array',maxLength:100,items:{type:'ref',ref:'lex:app.bsky.actor.defs#nux'}}}},bskyAppProgressGuide:{description:'If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.',type:'object',required:['guide'],properties:{guide:{type:'string',maxLength:100}}},nux:{type:'object',description:'A new user experiences (NUX) storage object',required:['id','completed'],properties:{id:{type:'string',maxLength:100},completed:{type:'boolean',default:false},data:{description:'Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.',type:'string',maxLength:3000,maxGraphemes:300},expiresAt:{type:'string',format:'datetime',description:'The date and time at which the NUX will expire and should be considered completed.'}}}}},AppBskyActorGetPreferences:{lexicon:1,id:'app.bsky.actor.getPreferences',defs:{main:{type:'query',description:'Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.',parameters:{type:'params',properties:{}},output:{encoding:'application/json',schema:{type:'object',required:['preferences'],properties:{preferences:{type:'ref',ref:'lex:app.bsky.actor.defs#preferences'}}}}}}},AppBskyActorGetProfile:{lexicon:1,id:'app.bsky.actor.getProfile',defs:{main:{type:'query',description:'Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier',description:'Handle or DID of account to fetch profile of.'}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewDetailed'}}}}},AppBskyActorGetProfiles:{lexicon:1,id:'app.bsky.actor.getProfiles',defs:{main:{type:'query',description:'Get detailed profile views of multiple actors.',parameters:{type:'params',required:['actors'],properties:{actors:{type:'array',items:{type:'string',format:'at-identifier'},maxLength:25}}},output:{encoding:'application/json',schema:{type:'object',required:['profiles'],properties:{profiles:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewDetailed'}}}}}}}},AppBskyActorGetSuggestions:{lexicon:1,id:'app.bsky.actor.getSuggestions',defs:{main:{type:'query',description:'Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['actors'],properties:{cursor:{type:'string'},actors:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}}}}},AppBskyActorProfile:{lexicon:1,id:'app.bsky.actor.profile',defs:{main:{type:'record',description:'A declaration of a Bluesky account profile.',key:'literal:self',record:{type:'object',properties:{displayName:{type:'string',maxGraphemes:64,maxLength:640},description:{type:'string',description:'Free-form profile description text.',maxGraphemes:256,maxLength:2560},avatar:{type:'blob',description:"Small image to be displayed next to posts from account. AKA, 'profile picture'",accept:['image/png','image/jpeg'],maxSize:1000000},banner:{type:'blob',description:'Larger horizontal image to display behind profile view.',accept:['image/png','image/jpeg'],maxSize:1000000},labels:{type:'union',description:'Self-label values, specific to the Bluesky application, on the overall account.',refs:['lex:com.atproto.label.defs#selfLabels']},joinedViaStarterPack:{type:'ref',ref:'lex:com.atproto.repo.strongRef'},pinnedPost:{type:'ref',ref:'lex:com.atproto.repo.strongRef'},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyActorPutPreferences:{lexicon:1,id:'app.bsky.actor.putPreferences',defs:{main:{type:'procedure',description:'Set the private preferences attached to the account.',input:{encoding:'application/json',schema:{type:'object',required:['preferences'],properties:{preferences:{type:'ref',ref:'lex:app.bsky.actor.defs#preferences'}}}}}}},AppBskyActorSearchActors:{lexicon:1,id:'app.bsky.actor.searchActors',defs:{main:{type:'query',description:'Find actors (profiles) matching search criteria. Does not require auth.',parameters:{type:'params',properties:{term:{type:'string',description:"DEPRECATED: use 'q' instead."},q:{type:'string',description:'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'},limit:{type:'integer',minimum:1,maximum:100,default:25},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['actors'],properties:{cursor:{type:'string'},actors:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}}}}},AppBskyActorSearchActorsTypeahead:{lexicon:1,id:'app.bsky.actor.searchActorsTypeahead',defs:{main:{type:'query',description:'Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.',parameters:{type:'params',properties:{term:{type:'string',description:"DEPRECATED: use 'q' instead."},q:{type:'string',description:'Search query prefix; not a full query string.'},limit:{type:'integer',minimum:1,maximum:100,default:10}}},output:{encoding:'application/json',schema:{type:'object',required:['actors'],properties:{actors:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewBasic'}}}}}}}},AppBskyEmbedDefs:{lexicon:1,id:'app.bsky.embed.defs',defs:{aspectRatio:{type:'object',description:'width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.',required:['width','height'],properties:{width:{type:'integer',minimum:1},height:{type:'integer',minimum:1}}}}},AppBskyEmbedExternal:{lexicon:1,id:'app.bsky.embed.external',defs:{main:{type:'object',description:"A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",required:['external'],properties:{external:{type:'ref',ref:'lex:app.bsky.embed.external#external'}}},external:{type:'object',required:['uri','title','description'],properties:{uri:{type:'string',format:'uri'},title:{type:'string'},description:{type:'string'},thumb:{type:'blob',accept:['image/*'],maxSize:1000000}}},view:{type:'object',required:['external'],properties:{external:{type:'ref',ref:'lex:app.bsky.embed.external#viewExternal'}}},viewExternal:{type:'object',required:['uri','title','description'],properties:{uri:{type:'string',format:'uri'},title:{type:'string'},description:{type:'string'},thumb:{type:'string',format:'uri'}}}}},AppBskyEmbedImages:{lexicon:1,id:'app.bsky.embed.images',description:'A set of images embedded in a Bluesky record (eg, a post).',defs:{main:{type:'object',required:['images'],properties:{images:{type:'array',items:{type:'ref',ref:'lex:app.bsky.embed.images#image'},maxLength:4}}},image:{type:'object',required:['image','alt'],properties:{image:{type:'blob',accept:['image/*'],maxSize:1000000},alt:{type:'string',description:'Alt text description of the image, for accessibility.'},aspectRatio:{type:'ref',ref:'lex:app.bsky.embed.defs#aspectRatio'}}},view:{type:'object',required:['images'],properties:{images:{type:'array',items:{type:'ref',ref:'lex:app.bsky.embed.images#viewImage'},maxLength:4}}},viewImage:{type:'object',required:['thumb','fullsize','alt'],properties:{thumb:{type:'string',format:'uri',description:'Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View.'},fullsize:{type:'string',format:'uri',description:'Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View.'},alt:{type:'string',description:'Alt text description of the image, for accessibility.'},aspectRatio:{type:'ref',ref:'lex:app.bsky.embed.defs#aspectRatio'}}}}},AppBskyEmbedRecord:{lexicon:1,id:'app.bsky.embed.record',description:'A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.',defs:{main:{type:'object',required:['record'],properties:{record:{type:'ref',ref:'lex:com.atproto.repo.strongRef'}}},view:{type:'object',required:['record'],properties:{record:{type:'union',refs:['lex:app.bsky.embed.record#viewRecord','lex:app.bsky.embed.record#viewNotFound','lex:app.bsky.embed.record#viewBlocked','lex:app.bsky.embed.record#viewDetached','lex:app.bsky.feed.defs#generatorView','lex:app.bsky.graph.defs#listView','lex:app.bsky.labeler.defs#labelerView','lex:app.bsky.graph.defs#starterPackViewBasic']}}},viewRecord:{type:'object',required:['uri','cid','author','value','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},author:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewBasic'},value:{type:'unknown',description:'The record data itself.'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},replyCount:{type:'integer'},repostCount:{type:'integer'},likeCount:{type:'integer'},quoteCount:{type:'integer'},embeds:{type:'array',items:{type:'union',refs:['lex:app.bsky.embed.images#view','lex:app.bsky.embed.video#view','lex:app.bsky.embed.external#view','lex:app.bsky.embed.record#view','lex:app.bsky.embed.recordWithMedia#view']}},indexedAt:{type:'string',format:'datetime'}}},viewNotFound:{type:'object',required:['uri','notFound'],properties:{uri:{type:'string',format:'at-uri'},notFound:{type:'boolean',const:true}}},viewBlocked:{type:'object',required:['uri','blocked','author'],properties:{uri:{type:'string',format:'at-uri'},blocked:{type:'boolean',const:true},author:{type:'ref',ref:'lex:app.bsky.feed.defs#blockedAuthor'}}},viewDetached:{type:'object',required:['uri','detached'],properties:{uri:{type:'string',format:'at-uri'},detached:{type:'boolean',const:true}}}}},AppBskyEmbedRecordWithMedia:{lexicon:1,id:'app.bsky.embed.recordWithMedia',description:'A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.',defs:{main:{type:'object',required:['record','media'],properties:{record:{type:'ref',ref:'lex:app.bsky.embed.record'},media:{type:'union',refs:['lex:app.bsky.embed.images','lex:app.bsky.embed.video','lex:app.bsky.embed.external']}}},view:{type:'object',required:['record','media'],properties:{record:{type:'ref',ref:'lex:app.bsky.embed.record#view'},media:{type:'union',refs:['lex:app.bsky.embed.images#view','lex:app.bsky.embed.video#view','lex:app.bsky.embed.external#view']}}}}},AppBskyEmbedVideo:{lexicon:1,id:'app.bsky.embed.video',description:'A video embedded in a Bluesky record (eg, a post).',defs:{main:{type:'object',required:['video'],properties:{video:{type:'blob',accept:['video/mp4'],maxSize:50000000},captions:{type:'array',items:{type:'ref',ref:'lex:app.bsky.embed.video#caption'},maxLength:20},alt:{type:'string',description:'Alt text description of the video, for accessibility.',maxGraphemes:1000,maxLength:10000},aspectRatio:{type:'ref',ref:'lex:app.bsky.embed.defs#aspectRatio'}}},caption:{type:'object',required:['lang','file'],properties:{lang:{type:'string',format:'language'},file:{type:'blob',accept:['text/vtt'],maxSize:20000}}},view:{type:'object',required:['cid','playlist'],properties:{cid:{type:'string',format:'cid'},playlist:{type:'string',format:'uri'},thumbnail:{type:'string',format:'uri'},alt:{type:'string',maxGraphemes:1000,maxLength:10000},aspectRatio:{type:'ref',ref:'lex:app.bsky.embed.defs#aspectRatio'}}}}},AppBskyFeedDefs:{lexicon:1,id:'app.bsky.feed.defs',defs:{postView:{type:'object',required:['uri','cid','author','record','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},author:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewBasic'},record:{type:'unknown'},embed:{type:'union',refs:['lex:app.bsky.embed.images#view','lex:app.bsky.embed.video#view','lex:app.bsky.embed.external#view','lex:app.bsky.embed.record#view','lex:app.bsky.embed.recordWithMedia#view']},replyCount:{type:'integer'},repostCount:{type:'integer'},likeCount:{type:'integer'},quoteCount:{type:'integer'},indexedAt:{type:'string',format:'datetime'},viewer:{type:'ref',ref:'lex:app.bsky.feed.defs#viewerState'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},threadgate:{type:'ref',ref:'lex:app.bsky.feed.defs#threadgateView'}}},viewerState:{type:'object',description:"Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",properties:{repost:{type:'string',format:'at-uri'},like:{type:'string',format:'at-uri'},threadMuted:{type:'boolean'},replyDisabled:{type:'boolean'},embeddingDisabled:{type:'boolean'},pinned:{type:'boolean'}}},feedViewPost:{type:'object',required:['post'],properties:{post:{type:'ref',ref:'lex:app.bsky.feed.defs#postView'},reply:{type:'ref',ref:'lex:app.bsky.feed.defs#replyRef'},reason:{type:'union',refs:['lex:app.bsky.feed.defs#reasonRepost','lex:app.bsky.feed.defs#reasonPin']},feedContext:{type:'string',description:'Context provided by feed generator that may be passed back alongside interactions.',maxLength:2000}}},replyRef:{type:'object',required:['root','parent'],properties:{root:{type:'union',refs:['lex:app.bsky.feed.defs#postView','lex:app.bsky.feed.defs#notFoundPost','lex:app.bsky.feed.defs#blockedPost']},parent:{type:'union',refs:['lex:app.bsky.feed.defs#postView','lex:app.bsky.feed.defs#notFoundPost','lex:app.bsky.feed.defs#blockedPost']},grandparentAuthor:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewBasic',description:'When parent is a reply to another post, this is the author of that post.'}}},reasonRepost:{type:'object',required:['by','indexedAt'],properties:{by:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewBasic'},indexedAt:{type:'string',format:'datetime'}}},reasonPin:{type:'object',properties:{}},threadViewPost:{type:'object',required:['post'],properties:{post:{type:'ref',ref:'lex:app.bsky.feed.defs#postView'},parent:{type:'union',refs:['lex:app.bsky.feed.defs#threadViewPost','lex:app.bsky.feed.defs#notFoundPost','lex:app.bsky.feed.defs#blockedPost']},replies:{type:'array',items:{type:'union',refs:['lex:app.bsky.feed.defs#threadViewPost','lex:app.bsky.feed.defs#notFoundPost','lex:app.bsky.feed.defs#blockedPost']}}}},notFoundPost:{type:'object',required:['uri','notFound'],properties:{uri:{type:'string',format:'at-uri'},notFound:{type:'boolean',const:true}}},blockedPost:{type:'object',required:['uri','blocked','author'],properties:{uri:{type:'string',format:'at-uri'},blocked:{type:'boolean',const:true},author:{type:'ref',ref:'lex:app.bsky.feed.defs#blockedAuthor'}}},blockedAuthor:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'},viewer:{type:'ref',ref:'lex:app.bsky.actor.defs#viewerState'}}},generatorView:{type:'object',required:['uri','cid','did','creator','displayName','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},did:{type:'string',format:'did'},creator:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'},displayName:{type:'string'},description:{type:'string',maxGraphemes:300,maxLength:3000},descriptionFacets:{type:'array',items:{type:'ref',ref:'lex:app.bsky.richtext.facet'}},avatar:{type:'string',format:'uri'},likeCount:{type:'integer',minimum:0},acceptsInteractions:{type:'boolean'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},viewer:{type:'ref',ref:'lex:app.bsky.feed.defs#generatorViewerState'},indexedAt:{type:'string',format:'datetime'}}},generatorViewerState:{type:'object',properties:{like:{type:'string',format:'at-uri'}}},skeletonFeedPost:{type:'object',required:['post'],properties:{post:{type:'string',format:'at-uri'},reason:{type:'union',refs:['lex:app.bsky.feed.defs#skeletonReasonRepost','lex:app.bsky.feed.defs#skeletonReasonPin']},feedContext:{type:'string',description:'Context that will be passed through to client and may be passed to feed generator back alongside interactions.',maxLength:2000}}},skeletonReasonRepost:{type:'object',required:['repost'],properties:{repost:{type:'string',format:'at-uri'}}},skeletonReasonPin:{type:'object',properties:{}},threadgateView:{type:'object',properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},record:{type:'unknown'},lists:{type:'array',items:{type:'ref',ref:'lex:app.bsky.graph.defs#listViewBasic'}}}},interaction:{type:'object',properties:{item:{type:'string',format:'at-uri'},event:{type:'string',knownValues:['app.bsky.feed.defs#requestLess','app.bsky.feed.defs#requestMore','app.bsky.feed.defs#clickthroughItem','app.bsky.feed.defs#clickthroughAuthor','app.bsky.feed.defs#clickthroughReposter','app.bsky.feed.defs#clickthroughEmbed','app.bsky.feed.defs#interactionSeen','app.bsky.feed.defs#interactionLike','app.bsky.feed.defs#interactionRepost','app.bsky.feed.defs#interactionReply','app.bsky.feed.defs#interactionQuote','app.bsky.feed.defs#interactionShare']},feedContext:{type:'string',description:'Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.',maxLength:2000}}},requestLess:{type:'token',description:'Request that less content like the given feed item be shown in the feed'},requestMore:{type:'token',description:'Request that more content like the given feed item be shown in the feed'},clickthroughItem:{type:'token',description:'User clicked through to the feed item'},clickthroughAuthor:{type:'token',description:'User clicked through to the author of the feed item'},clickthroughReposter:{type:'token',description:'User clicked through to the reposter of the feed item'},clickthroughEmbed:{type:'token',description:'User clicked through to the embedded content of the feed item'},interactionSeen:{type:'token',description:'Feed item was seen by user'},interactionLike:{type:'token',description:'User liked the feed item'},interactionRepost:{type:'token',description:'User reposted the feed item'},interactionReply:{type:'token',description:'User replied to the feed item'},interactionQuote:{type:'token',description:'User quoted the feed item'},interactionShare:{type:'token',description:'User shared the feed item'}}},AppBskyFeedDescribeFeedGenerator:{lexicon:1,id:'app.bsky.feed.describeFeedGenerator',defs:{main:{type:'query',description:'Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).',output:{encoding:'application/json',schema:{type:'object',required:['did','feeds'],properties:{did:{type:'string',format:'did'},feeds:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.describeFeedGenerator#feed'}},links:{type:'ref',ref:'lex:app.bsky.feed.describeFeedGenerator#links'}}}}},feed:{type:'object',required:['uri'],properties:{uri:{type:'string',format:'at-uri'}}},links:{type:'object',properties:{privacyPolicy:{type:'string'},termsOfService:{type:'string'}}}}},AppBskyFeedGenerator:{lexicon:1,id:'app.bsky.feed.generator',defs:{main:{type:'record',description:'Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.',key:'any',record:{type:'object',required:['did','displayName','createdAt'],properties:{did:{type:'string',format:'did'},displayName:{type:'string',maxGraphemes:24,maxLength:240},description:{type:'string',maxGraphemes:300,maxLength:3000},descriptionFacets:{type:'array',items:{type:'ref',ref:'lex:app.bsky.richtext.facet'}},avatar:{type:'blob',accept:['image/png','image/jpeg'],maxSize:1000000},acceptsInteractions:{type:'boolean',description:'Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions'},labels:{type:'union',description:'Self-label values',refs:['lex:com.atproto.label.defs#selfLabels']},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyFeedGetActorFeeds:{lexicon:1,id:'app.bsky.feed.getActorFeeds',defs:{main:{type:'query',description:"Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['feeds'],properties:{cursor:{type:'string'},feeds:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#generatorView'}}}}}}}},AppBskyFeedGetActorLikes:{lexicon:1,id:'app.bsky.feed.getActorLikes',defs:{main:{type:'query',description:'Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['feed'],properties:{cursor:{type:'string'},feed:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#feedViewPost'}}}}},errors:[{name:'BlockedActor'},{name:'BlockedByActor'}]}}},AppBskyFeedGetAuthorFeed:{lexicon:1,id:'app.bsky.feed.getAuthorFeed',defs:{main:{type:'query',description:"Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'},filter:{type:'string',description:'Combinations of post/repost types to include in response.',knownValues:['posts_with_replies','posts_no_replies','posts_with_media','posts_and_author_threads'],default:'posts_with_replies'},includePins:{type:'boolean',default:false}}},output:{encoding:'application/json',schema:{type:'object',required:['feed'],properties:{cursor:{type:'string'},feed:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#feedViewPost'}}}}},errors:[{name:'BlockedActor'},{name:'BlockedByActor'}]}}},AppBskyFeedGetFeed:{lexicon:1,id:'app.bsky.feed.getFeed',defs:{main:{type:'query',description:"Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",parameters:{type:'params',required:['feed'],properties:{feed:{type:'string',format:'at-uri'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['feed'],properties:{cursor:{type:'string'},feed:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#feedViewPost'}}}}},errors:[{name:'UnknownFeed'}]}}},AppBskyFeedGetFeedGenerator:{lexicon:1,id:'app.bsky.feed.getFeedGenerator',defs:{main:{type:'query',description:'Get information about a feed generator. Implemented by AppView.',parameters:{type:'params',required:['feed'],properties:{feed:{type:'string',format:'at-uri',description:'AT-URI of the feed generator record.'}}},output:{encoding:'application/json',schema:{type:'object',required:['view','isOnline','isValid'],properties:{view:{type:'ref',ref:'lex:app.bsky.feed.defs#generatorView'},isOnline:{type:'boolean',description:'Indicates whether the feed generator service has been online recently, or else seems to be inactive.'},isValid:{type:'boolean',description:'Indicates whether the feed generator service is compatible with the record declaration.'}}}}}}},AppBskyFeedGetFeedGenerators:{lexicon:1,id:'app.bsky.feed.getFeedGenerators',defs:{main:{type:'query',description:'Get information about a list of feed generators.',parameters:{type:'params',required:['feeds'],properties:{feeds:{type:'array',items:{type:'string',format:'at-uri'}}}},output:{encoding:'application/json',schema:{type:'object',required:['feeds'],properties:{feeds:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#generatorView'}}}}}}}},AppBskyFeedGetFeedSkeleton:{lexicon:1,id:'app.bsky.feed.getFeedSkeleton',defs:{main:{type:'query',description:'Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.',parameters:{type:'params',required:['feed'],properties:{feed:{type:'string',format:'at-uri',description:'Reference to feed generator record describing the specific feed being requested.'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['feed'],properties:{cursor:{type:'string'},feed:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#skeletonFeedPost'}}}}},errors:[{name:'UnknownFeed'}]}}},AppBskyFeedGetLikes:{lexicon:1,id:'app.bsky.feed.getLikes',defs:{main:{type:'query',description:'Get like records which reference a subject (by AT-URI and CID).',parameters:{type:'params',required:['uri'],properties:{uri:{type:'string',format:'at-uri',description:'AT-URI of the subject (eg, a post record).'},cid:{type:'string',format:'cid',description:'CID of the subject record (aka, specific version of record), to filter likes.'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['uri','likes'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},cursor:{type:'string'},likes:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.getLikes#like'}}}}}},like:{type:'object',required:['indexedAt','createdAt','actor'],properties:{indexedAt:{type:'string',format:'datetime'},createdAt:{type:'string',format:'datetime'},actor:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}},AppBskyFeedGetListFeed:{lexicon:1,id:'app.bsky.feed.getListFeed',defs:{main:{type:'query',description:'Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.',parameters:{type:'params',required:['list'],properties:{list:{type:'string',format:'at-uri',description:'Reference (AT-URI) to the list record.'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['feed'],properties:{cursor:{type:'string'},feed:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#feedViewPost'}}}}},errors:[{name:'UnknownList'}]}}},AppBskyFeedGetPostThread:{lexicon:1,id:'app.bsky.feed.getPostThread',defs:{main:{type:'query',description:'Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.',parameters:{type:'params',required:['uri'],properties:{uri:{type:'string',format:'at-uri',description:'Reference (AT-URI) to post record.'},depth:{type:'integer',description:'How many levels of reply depth should be included in response.',default:6,minimum:0,maximum:1000},parentHeight:{type:'integer',description:'How many levels of parent (and grandparent, etc) post to include.',default:80,minimum:0,maximum:1000}}},output:{encoding:'application/json',schema:{type:'object',required:['thread'],properties:{thread:{type:'union',refs:['lex:app.bsky.feed.defs#threadViewPost','lex:app.bsky.feed.defs#notFoundPost','lex:app.bsky.feed.defs#blockedPost']},threadgate:{type:'ref',ref:'lex:app.bsky.feed.defs#threadgateView'}}}},errors:[{name:'NotFound'}]}}},AppBskyFeedGetPosts:{lexicon:1,id:'app.bsky.feed.getPosts',defs:{main:{type:'query',description:"Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",parameters:{type:'params',required:['uris'],properties:{uris:{type:'array',description:'List of post AT-URIs to return hydrated views for.',items:{type:'string',format:'at-uri'},maxLength:25}}},output:{encoding:'application/json',schema:{type:'object',required:['posts'],properties:{posts:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#postView'}}}}}}}},AppBskyFeedGetQuotes:{lexicon:1,id:'app.bsky.feed.getQuotes',defs:{main:{type:'query',description:'Get a list of quotes for a given post.',parameters:{type:'params',required:['uri'],properties:{uri:{type:'string',format:'at-uri',description:'Reference (AT-URI) of post record'},cid:{type:'string',format:'cid',description:'If supplied, filters to quotes of specific version (by CID) of the post record.'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['uri','posts'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},cursor:{type:'string'},posts:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#postView'}}}}}}}},AppBskyFeedGetRepostedBy:{lexicon:1,id:'app.bsky.feed.getRepostedBy',defs:{main:{type:'query',description:'Get a list of reposts for a given post.',parameters:{type:'params',required:['uri'],properties:{uri:{type:'string',format:'at-uri',description:'Reference (AT-URI) of post record'},cid:{type:'string',format:'cid',description:'If supplied, filters to reposts of specific version (by CID) of the post record.'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['uri','repostedBy'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},cursor:{type:'string'},repostedBy:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}}}}},AppBskyFeedGetSuggestedFeeds:{lexicon:1,id:'app.bsky.feed.getSuggestedFeeds',defs:{main:{type:'query',description:'Get a list of suggested feeds (feed generators) for the requesting account.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['feeds'],properties:{cursor:{type:'string'},feeds:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#generatorView'}}}}}}}},AppBskyFeedGetTimeline:{lexicon:1,id:'app.bsky.feed.getTimeline',defs:{main:{type:'query',description:"Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",parameters:{type:'params',properties:{algorithm:{type:'string',description:"Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['feed'],properties:{cursor:{type:'string'},feed:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#feedViewPost'}}}}}}}},AppBskyFeedLike:{lexicon:1,id:'app.bsky.feed.like',defs:{main:{type:'record',description:"Record declaring a 'like' of a piece of subject content.",key:'tid',record:{type:'object',required:['subject','createdAt'],properties:{subject:{type:'ref',ref:'lex:com.atproto.repo.strongRef'},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyFeedPost:{lexicon:1,id:'app.bsky.feed.post',defs:{main:{type:'record',description:'Record containing a Bluesky post.',key:'tid',record:{type:'object',required:['text','createdAt'],properties:{text:{type:'string',maxLength:3000,maxGraphemes:300,description:'The primary post content. May be an empty string, if there are embeds.'},entities:{type:'array',description:'DEPRECATED: replaced by app.bsky.richtext.facet.',items:{type:'ref',ref:'lex:app.bsky.feed.post#entity'}},facets:{type:'array',description:'Annotations of text (mentions, URLs, hashtags, etc)',items:{type:'ref',ref:'lex:app.bsky.richtext.facet'}},reply:{type:'ref',ref:'lex:app.bsky.feed.post#replyRef'},embed:{type:'union',refs:['lex:app.bsky.embed.images','lex:app.bsky.embed.video','lex:app.bsky.embed.external','lex:app.bsky.embed.record','lex:app.bsky.embed.recordWithMedia']},langs:{type:'array',description:'Indicates human language of post primary text content.',maxLength:3,items:{type:'string',format:'language'}},labels:{type:'union',description:'Self-label values for this post. Effectively content warnings.',refs:['lex:com.atproto.label.defs#selfLabels']},tags:{type:'array',description:'Additional hashtags, in addition to any included in post text and facets.',maxLength:8,items:{type:'string',maxLength:640,maxGraphemes:64}},createdAt:{type:'string',format:'datetime',description:'Client-declared timestamp when this post was originally created.'}}}},replyRef:{type:'object',required:['root','parent'],properties:{root:{type:'ref',ref:'lex:com.atproto.repo.strongRef'},parent:{type:'ref',ref:'lex:com.atproto.repo.strongRef'}}},entity:{type:'object',description:'Deprecated: use facets instead.',required:['index','type','value'],properties:{index:{type:'ref',ref:'lex:app.bsky.feed.post#textSlice'},type:{type:'string',description:"Expected values are 'mention' and 'link'."},value:{type:'string'}}},textSlice:{type:'object',description:'Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.',required:['start','end'],properties:{start:{type:'integer',minimum:0},end:{type:'integer',minimum:0}}}}},AppBskyFeedPostgate:{lexicon:1,id:'app.bsky.feed.postgate',defs:{main:{type:'record',key:'tid',description:'Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.',record:{type:'object',required:['post','createdAt'],properties:{createdAt:{type:'string',format:'datetime'},post:{type:'string',format:'at-uri',description:'Reference (AT-URI) to the post record.'},detachedEmbeddingUris:{type:'array',maxLength:50,items:{type:'string',format:'at-uri'},description:'List of AT-URIs embedding this post that the author has detached from.'},embeddingRules:{type:'array',maxLength:5,items:{type:'union',refs:['lex:app.bsky.feed.postgate#disableRule']}}}}},disableRule:{type:'object',description:'Disables embedding of this post.',properties:{}}}},AppBskyFeedRepost:{lexicon:1,id:'app.bsky.feed.repost',defs:{main:{description:"Record representing a 'repost' of an existing Bluesky post.",type:'record',key:'tid',record:{type:'object',required:['subject','createdAt'],properties:{subject:{type:'ref',ref:'lex:com.atproto.repo.strongRef'},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyFeedSearchPosts:{lexicon:1,id:'app.bsky.feed.searchPosts',defs:{main:{type:'query',description:'Find posts matching search criteria, returning views of those posts.',parameters:{type:'params',required:['q'],properties:{q:{type:'string',description:'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'},sort:{type:'string',knownValues:['top','latest'],default:'latest',description:'Specifies the ranking order of results.'},since:{type:'string',description:"Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."},until:{type:'string',description:"Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."},mentions:{type:'string',format:'at-identifier',description:'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.'},author:{type:'string',format:'at-identifier',description:'Filter to posts by the given account. Handles are resolved to DID before query-time.'},lang:{type:'string',format:'language',description:'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.'},domain:{type:'string',description:'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.'},url:{type:'string',format:'uri',description:'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.'},tag:{type:'array',items:{type:'string',maxLength:640,maxGraphemes:64},description:"Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."},limit:{type:'integer',minimum:1,maximum:100,default:25},cursor:{type:'string',description:'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'}}},output:{encoding:'application/json',schema:{type:'object',required:['posts'],properties:{cursor:{type:'string'},hitsTotal:{type:'integer',description:'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'},posts:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#postView'}}}}},errors:[{name:'BadQueryString'}]}}},AppBskyFeedSendInteractions:{lexicon:1,id:'app.bsky.feed.sendInteractions',defs:{main:{type:'procedure',description:'Send information about interactions with feed items back to the feed generator that served them.',input:{encoding:'application/json',schema:{type:'object',required:['interactions'],properties:{interactions:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#interaction'}}}}},output:{encoding:'application/json',schema:{type:'object',properties:{}}}}}},AppBskyFeedThreadgate:{lexicon:1,id:'app.bsky.feed.threadgate',defs:{main:{type:'record',key:'tid',description:"Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.",record:{type:'object',required:['post','createdAt'],properties:{post:{type:'string',format:'at-uri',description:'Reference (AT-URI) to the post record.'},allow:{type:'array',maxLength:5,items:{type:'union',refs:['lex:app.bsky.feed.threadgate#mentionRule','lex:app.bsky.feed.threadgate#followingRule','lex:app.bsky.feed.threadgate#listRule']}},createdAt:{type:'string',format:'datetime'},hiddenReplies:{type:'array',maxLength:50,items:{type:'string',format:'at-uri'},description:'List of hidden reply URIs.'}}}},mentionRule:{type:'object',description:'Allow replies from actors mentioned in your post.',properties:{}},followingRule:{type:'object',description:'Allow replies from actors you follow.',properties:{}},listRule:{type:'object',description:'Allow replies from actors on a list.',required:['list'],properties:{list:{type:'string',format:'at-uri'}}}}},AppBskyGraphBlock:{lexicon:1,id:'app.bsky.graph.block',defs:{main:{type:'record',description:"Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",key:'tid',record:{type:'object',required:['subject','createdAt'],properties:{subject:{type:'string',format:'did',description:'DID of the account to be blocked.'},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyGraphDefs:{lexicon:1,id:'app.bsky.graph.defs',defs:{listViewBasic:{type:'object',required:['uri','cid','name','purpose'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},name:{type:'string',maxLength:64,minLength:1},purpose:{type:'ref',ref:'lex:app.bsky.graph.defs#listPurpose'},avatar:{type:'string',format:'uri'},listItemCount:{type:'integer',minimum:0},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},viewer:{type:'ref',ref:'lex:app.bsky.graph.defs#listViewerState'},indexedAt:{type:'string',format:'datetime'}}},listView:{type:'object',required:['uri','cid','creator','name','purpose','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},creator:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'},name:{type:'string',maxLength:64,minLength:1},purpose:{type:'ref',ref:'lex:app.bsky.graph.defs#listPurpose'},description:{type:'string',maxGraphemes:300,maxLength:3000},descriptionFacets:{type:'array',items:{type:'ref',ref:'lex:app.bsky.richtext.facet'}},avatar:{type:'string',format:'uri'},listItemCount:{type:'integer',minimum:0},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},viewer:{type:'ref',ref:'lex:app.bsky.graph.defs#listViewerState'},indexedAt:{type:'string',format:'datetime'}}},listItemView:{type:'object',required:['uri','subject'],properties:{uri:{type:'string',format:'at-uri'},subject:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}},starterPackView:{type:'object',required:['uri','cid','record','creator','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},record:{type:'unknown'},creator:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewBasic'},list:{type:'ref',ref:'lex:app.bsky.graph.defs#listViewBasic'},listItemsSample:{type:'array',maxLength:12,items:{type:'ref',ref:'lex:app.bsky.graph.defs#listItemView'}},feeds:{type:'array',maxLength:3,items:{type:'ref',ref:'lex:app.bsky.feed.defs#generatorView'}},joinedWeekCount:{type:'integer',minimum:0},joinedAllTimeCount:{type:'integer',minimum:0},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},indexedAt:{type:'string',format:'datetime'}}},starterPackViewBasic:{type:'object',required:['uri','cid','record','creator','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},record:{type:'unknown'},creator:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewBasic'},listItemCount:{type:'integer',minimum:0},joinedWeekCount:{type:'integer',minimum:0},joinedAllTimeCount:{type:'integer',minimum:0},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},indexedAt:{type:'string',format:'datetime'}}},listPurpose:{type:'string',knownValues:['app.bsky.graph.defs#modlist','app.bsky.graph.defs#curatelist','app.bsky.graph.defs#referencelist']},modlist:{type:'token',description:'A list of actors to apply an aggregate moderation action (mute/block) on.'},curatelist:{type:'token',description:'A list of actors used for curation purposes such as list feeds or interaction gating.'},referencelist:{type:'token',description:'A list of actors used for only for reference purposes such as within a starter pack.'},listViewerState:{type:'object',properties:{muted:{type:'boolean'},blocked:{type:'string',format:'at-uri'}}},notFoundActor:{type:'object',description:'indicates that a handle or DID could not be resolved',required:['actor','notFound'],properties:{actor:{type:'string',format:'at-identifier'},notFound:{type:'boolean',const:true}}},relationship:{type:'object',description:'lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)',required:['did'],properties:{did:{type:'string',format:'did'},following:{type:'string',format:'at-uri',description:'if the actor follows this DID, this is the AT-URI of the follow record'},followedBy:{type:'string',format:'at-uri',description:'if the actor is followed by this DID, contains the AT-URI of the follow record'}}}}},AppBskyGraphFollow:{lexicon:1,id:'app.bsky.graph.follow',defs:{main:{type:'record',description:"Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",key:'tid',record:{type:'object',required:['subject','createdAt'],properties:{subject:{type:'string',format:'did'},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyGraphGetActorStarterPacks:{lexicon:1,id:'app.bsky.graph.getActorStarterPacks',defs:{main:{type:'query',description:'Get a list of starter packs created by the actor.',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['starterPacks'],properties:{cursor:{type:'string'},starterPacks:{type:'array',items:{type:'ref',ref:'lex:app.bsky.graph.defs#starterPackViewBasic'}}}}}}}},AppBskyGraphGetBlocks:{lexicon:1,id:'app.bsky.graph.getBlocks',defs:{main:{type:'query',description:'Enumerates which accounts the requesting account is currently blocking. Requires auth.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['blocks'],properties:{cursor:{type:'string'},blocks:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}}}}},AppBskyGraphGetFollowers:{lexicon:1,id:'app.bsky.graph.getFollowers',defs:{main:{type:'query',description:'Enumerates accounts which follow a specified account (actor).',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['subject','followers'],properties:{subject:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'},cursor:{type:'string'},followers:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}}}}},AppBskyGraphGetFollows:{lexicon:1,id:'app.bsky.graph.getFollows',defs:{main:{type:'query',description:'Enumerates accounts which a specified account (actor) follows.',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['subject','follows'],properties:{subject:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'},cursor:{type:'string'},follows:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}}}}},AppBskyGraphGetKnownFollowers:{lexicon:1,id:'app.bsky.graph.getKnownFollowers',defs:{main:{type:'query',description:'Enumerates accounts which follow a specified account (actor) and are followed by the viewer.',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['subject','followers'],properties:{subject:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'},cursor:{type:'string'},followers:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}}}}},AppBskyGraphGetList:{lexicon:1,id:'app.bsky.graph.getList',defs:{main:{type:'query',description:"Gets a 'view' (with additional context) of a specified list.",parameters:{type:'params',required:['list'],properties:{list:{type:'string',format:'at-uri',description:'Reference (AT-URI) of the list record to hydrate.'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['list','items'],properties:{cursor:{type:'string'},list:{type:'ref',ref:'lex:app.bsky.graph.defs#listView'},items:{type:'array',items:{type:'ref',ref:'lex:app.bsky.graph.defs#listItemView'}}}}}}}},AppBskyGraphGetListBlocks:{lexicon:1,id:'app.bsky.graph.getListBlocks',defs:{main:{type:'query',description:'Get mod lists that the requesting account (actor) is blocking. Requires auth.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['lists'],properties:{cursor:{type:'string'},lists:{type:'array',items:{type:'ref',ref:'lex:app.bsky.graph.defs#listView'}}}}}}}},AppBskyGraphGetListMutes:{lexicon:1,id:'app.bsky.graph.getListMutes',defs:{main:{type:'query',description:'Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['lists'],properties:{cursor:{type:'string'},lists:{type:'array',items:{type:'ref',ref:'lex:app.bsky.graph.defs#listView'}}}}}}}},AppBskyGraphGetLists:{lexicon:1,id:'app.bsky.graph.getLists',defs:{main:{type:'query',description:'Enumerates the lists created by a specified account (actor).',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier',description:'The account (actor) to enumerate lists from.'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['lists'],properties:{cursor:{type:'string'},lists:{type:'array',items:{type:'ref',ref:'lex:app.bsky.graph.defs#listView'}}}}}}}},AppBskyGraphGetMutes:{lexicon:1,id:'app.bsky.graph.getMutes',defs:{main:{type:'query',description:'Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['mutes'],properties:{cursor:{type:'string'},mutes:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}}}}}}}},AppBskyGraphGetRelationships:{lexicon:1,id:'app.bsky.graph.getRelationships',defs:{main:{type:'query',description:'Enumerates public relationships between one account, and a list of other accounts. Does not require auth.',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier',description:'Primary account requesting relationships for.'},others:{type:'array',description:"List of 'other' accounts to be related back to the primary.",maxLength:30,items:{type:'string',format:'at-identifier'}}}},output:{encoding:'application/json',schema:{type:'object',required:['relationships'],properties:{actor:{type:'string',format:'did'},relationships:{type:'array',items:{type:'union',refs:['lex:app.bsky.graph.defs#relationship','lex:app.bsky.graph.defs#notFoundActor']}}}}},errors:[{name:'ActorNotFound',description:'the primary actor at-identifier could not be resolved'}]}}},AppBskyGraphGetStarterPack:{lexicon:1,id:'app.bsky.graph.getStarterPack',defs:{main:{type:'query',description:'Gets a view of a starter pack.',parameters:{type:'params',required:['starterPack'],properties:{starterPack:{type:'string',format:'at-uri',description:'Reference (AT-URI) of the starter pack record.'}}},output:{encoding:'application/json',schema:{type:'object',required:['starterPack'],properties:{starterPack:{type:'ref',ref:'lex:app.bsky.graph.defs#starterPackView'}}}}}}},AppBskyGraphGetStarterPacks:{lexicon:1,id:'app.bsky.graph.getStarterPacks',defs:{main:{type:'query',description:'Get views for a list of starter packs.',parameters:{type:'params',required:['uris'],properties:{uris:{type:'array',items:{type:'string',format:'at-uri'},maxLength:25}}},output:{encoding:'application/json',schema:{type:'object',required:['starterPacks'],properties:{starterPacks:{type:'array',items:{type:'ref',ref:'lex:app.bsky.graph.defs#starterPackViewBasic'}}}}}}}},AppBskyGraphGetSuggestedFollowsByActor:{lexicon:1,id:'app.bsky.graph.getSuggestedFollowsByActor',defs:{main:{type:'query',description:'Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'}}},output:{encoding:'application/json',schema:{type:'object',required:['suggestions'],properties:{suggestions:{type:'array',items:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'}},isFallback:{type:'boolean',description:'If true, response has fallen-back to generic results, and is not scoped using relativeToDid',default:false}}}}}}},AppBskyGraphList:{lexicon:1,id:'app.bsky.graph.list',defs:{main:{type:'record',description:'Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.',key:'tid',record:{type:'object',required:['name','purpose','createdAt'],properties:{purpose:{type:'ref',description:'Defines the purpose of the list (aka, moderation-oriented or curration-oriented)',ref:'lex:app.bsky.graph.defs#listPurpose'},name:{type:'string',maxLength:64,minLength:1,description:'Display name for list; can not be empty.'},description:{type:'string',maxGraphemes:300,maxLength:3000},descriptionFacets:{type:'array',items:{type:'ref',ref:'lex:app.bsky.richtext.facet'}},avatar:{type:'blob',accept:['image/png','image/jpeg'],maxSize:1000000},labels:{type:'union',refs:['lex:com.atproto.label.defs#selfLabels']},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyGraphListblock:{lexicon:1,id:'app.bsky.graph.listblock',defs:{main:{type:'record',description:'Record representing a block relationship against an entire an entire list of accounts (actors).',key:'tid',record:{type:'object',required:['subject','createdAt'],properties:{subject:{type:'string',format:'at-uri',description:'Reference (AT-URI) to the mod list record.'},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyGraphListitem:{lexicon:1,id:'app.bsky.graph.listitem',defs:{main:{type:'record',description:"Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",key:'tid',record:{type:'object',required:['subject','list','createdAt'],properties:{subject:{type:'string',format:'did',description:'The account which is included on the list.'},list:{type:'string',format:'at-uri',description:'Reference (AT-URI) to the list record (app.bsky.graph.list).'},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyGraphMuteActor:{lexicon:1,id:'app.bsky.graph.muteActor',defs:{main:{type:'procedure',description:'Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'}}}}}}},AppBskyGraphMuteActorList:{lexicon:1,id:'app.bsky.graph.muteActorList',defs:{main:{type:'procedure',description:'Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['list'],properties:{list:{type:'string',format:'at-uri'}}}}}}},AppBskyGraphMuteThread:{lexicon:1,id:'app.bsky.graph.muteThread',defs:{main:{type:'procedure',description:'Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['root'],properties:{root:{type:'string',format:'at-uri'}}}}}}},AppBskyGraphSearchStarterPacks:{lexicon:1,id:'app.bsky.graph.searchStarterPacks',defs:{main:{type:'query',description:'Find starter packs matching search criteria. Does not require auth.',parameters:{type:'params',required:['q'],properties:{q:{type:'string',description:'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'},limit:{type:'integer',minimum:1,maximum:100,default:25},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['starterPacks'],properties:{cursor:{type:'string'},starterPacks:{type:'array',items:{type:'ref',ref:'lex:app.bsky.graph.defs#starterPackViewBasic'}}}}}}}},AppBskyGraphStarterpack:{lexicon:1,id:'app.bsky.graph.starterpack',defs:{main:{type:'record',description:'Record defining a starter pack of actors and feeds for new users.',key:'tid',record:{type:'object',required:['name','list','createdAt'],properties:{name:{type:'string',maxGraphemes:50,maxLength:500,minLength:1,description:'Display name for starter pack; can not be empty.'},description:{type:'string',maxGraphemes:300,maxLength:3000},descriptionFacets:{type:'array',items:{type:'ref',ref:'lex:app.bsky.richtext.facet'}},list:{type:'string',format:'at-uri',description:'Reference (AT-URI) to the list record.'},feeds:{type:'array',maxLength:3,items:{type:'ref',ref:'lex:app.bsky.graph.starterpack#feedItem'}},createdAt:{type:'string',format:'datetime'}}}},feedItem:{type:'object',required:['uri'],properties:{uri:{type:'string',format:'at-uri'}}}}},AppBskyGraphUnmuteActor:{lexicon:1,id:'app.bsky.graph.unmuteActor',defs:{main:{type:'procedure',description:'Unmutes the specified account. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['actor'],properties:{actor:{type:'string',format:'at-identifier'}}}}}}},AppBskyGraphUnmuteActorList:{lexicon:1,id:'app.bsky.graph.unmuteActorList',defs:{main:{type:'procedure',description:'Unmutes the specified list of accounts. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['list'],properties:{list:{type:'string',format:'at-uri'}}}}}}},AppBskyGraphUnmuteThread:{lexicon:1,id:'app.bsky.graph.unmuteThread',defs:{main:{type:'procedure',description:'Unmutes the specified thread. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['root'],properties:{root:{type:'string',format:'at-uri'}}}}}}},AppBskyLabelerDefs:{lexicon:1,id:'app.bsky.labeler.defs',defs:{labelerView:{type:'object',required:['uri','cid','creator','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},creator:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'},likeCount:{type:'integer',minimum:0},viewer:{type:'ref',ref:'lex:app.bsky.labeler.defs#labelerViewerState'},indexedAt:{type:'string',format:'datetime'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}}}},labelerViewDetailed:{type:'object',required:['uri','cid','creator','policies','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},creator:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'},policies:{type:'ref',ref:'lex:app.bsky.labeler.defs#labelerPolicies'},likeCount:{type:'integer',minimum:0},viewer:{type:'ref',ref:'lex:app.bsky.labeler.defs#labelerViewerState'},indexedAt:{type:'string',format:'datetime'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}}}},labelerViewerState:{type:'object',properties:{like:{type:'string',format:'at-uri'}}},labelerPolicies:{type:'object',required:['labelValues'],properties:{labelValues:{type:'array',description:'The label values which this labeler publishes. May include global or custom labels.',items:{type:'ref',ref:'lex:com.atproto.label.defs#labelValue'}},labelValueDefinitions:{type:'array',description:'Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.',items:{type:'ref',ref:'lex:com.atproto.label.defs#labelValueDefinition'}}}}}},AppBskyLabelerGetServices:{lexicon:1,id:'app.bsky.labeler.getServices',defs:{main:{type:'query',description:'Get information about a list of labeler services.',parameters:{type:'params',required:['dids'],properties:{dids:{type:'array',items:{type:'string',format:'did'}},detailed:{type:'boolean',default:false}}},output:{encoding:'application/json',schema:{type:'object',required:['views'],properties:{views:{type:'array',items:{type:'union',refs:['lex:app.bsky.labeler.defs#labelerView','lex:app.bsky.labeler.defs#labelerViewDetailed']}}}}}}}},AppBskyLabelerService:{lexicon:1,id:'app.bsky.labeler.service',defs:{main:{type:'record',description:'A declaration of the existence of labeler service.',key:'literal:self',record:{type:'object',required:['policies','createdAt'],properties:{policies:{type:'ref',ref:'lex:app.bsky.labeler.defs#labelerPolicies'},labels:{type:'union',refs:['lex:com.atproto.label.defs#selfLabels']},createdAt:{type:'string',format:'datetime'}}}}}},AppBskyNotificationGetUnreadCount:{lexicon:1,id:'app.bsky.notification.getUnreadCount',defs:{main:{type:'query',description:'Count the number of unread notifications for the requesting account. Requires auth.',parameters:{type:'params',properties:{priority:{type:'boolean'},seenAt:{type:'string',format:'datetime'}}},output:{encoding:'application/json',schema:{type:'object',required:['count'],properties:{count:{type:'integer'}}}}}}},AppBskyNotificationListNotifications:{lexicon:1,id:'app.bsky.notification.listNotifications',defs:{main:{type:'query',description:'Enumerate notifications for the requesting account. Requires auth.',parameters:{type:'params',properties:{reasons:{description:'Notification reasons to include in response.',type:'array',items:{type:'string',description:'A reason that matches the reason property of #notification.'}},limit:{type:'integer',minimum:1,maximum:100,default:50},priority:{type:'boolean'},cursor:{type:'string'},seenAt:{type:'string',format:'datetime'}}},output:{encoding:'application/json',schema:{type:'object',required:['notifications'],properties:{cursor:{type:'string'},notifications:{type:'array',items:{type:'ref',ref:'lex:app.bsky.notification.listNotifications#notification'}},priority:{type:'boolean'},seenAt:{type:'string',format:'datetime'}}}}},notification:{type:'object',required:['uri','cid','author','reason','record','isRead','indexedAt'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},author:{type:'ref',ref:'lex:app.bsky.actor.defs#profileView'},reason:{type:'string',description:"Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.",knownValues:['like','repost','follow','mention','reply','quote','starterpack-joined']},reasonSubject:{type:'string',format:'at-uri'},record:{type:'unknown'},isRead:{type:'boolean'},indexedAt:{type:'string',format:'datetime'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}}}}}},AppBskyNotificationPutPreferences:{lexicon:1,id:'app.bsky.notification.putPreferences',defs:{main:{type:'procedure',description:'Set notification-related preferences for an account. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['priority'],properties:{priority:{type:'boolean'}}}}}}},AppBskyNotificationRegisterPush:{lexicon:1,id:'app.bsky.notification.registerPush',defs:{main:{type:'procedure',description:'Register to receive push notifications, via a specified service, for the requesting account. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['serviceDid','token','platform','appId'],properties:{serviceDid:{type:'string',format:'did'},token:{type:'string'},platform:{type:'string',knownValues:['ios','android','web']},appId:{type:'string'}}}}}}},AppBskyNotificationUpdateSeen:{lexicon:1,id:'app.bsky.notification.updateSeen',defs:{main:{type:'procedure',description:'Notify server that the requesting account has seen notifications. Requires auth.',input:{encoding:'application/json',schema:{type:'object',required:['seenAt'],properties:{seenAt:{type:'string',format:'datetime'}}}}}}},AppBskyRichtextFacet:{lexicon:1,id:'app.bsky.richtext.facet',defs:{main:{type:'object',description:'Annotation of a sub-string within rich text.',required:['index','features'],properties:{index:{type:'ref',ref:'lex:app.bsky.richtext.facet#byteSlice'},features:{type:'array',items:{type:'union',refs:['lex:app.bsky.richtext.facet#mention','lex:app.bsky.richtext.facet#link','lex:app.bsky.richtext.facet#tag']}}}},mention:{type:'object',description:"Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",required:['did'],properties:{did:{type:'string',format:'did'}}},link:{type:'object',description:'Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.',required:['uri'],properties:{uri:{type:'string',format:'uri'}}},tag:{type:'object',description:"Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",required:['tag'],properties:{tag:{type:'string',maxLength:640,maxGraphemes:64}}},byteSlice:{type:'object',description:'Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.',required:['byteStart','byteEnd'],properties:{byteStart:{type:'integer',minimum:0},byteEnd:{type:'integer',minimum:0}}}}},AppBskyUnspeccedDefs:{lexicon:1,id:'app.bsky.unspecced.defs',defs:{skeletonSearchPost:{type:'object',required:['uri'],properties:{uri:{type:'string',format:'at-uri'}}},skeletonSearchActor:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'}}},skeletonSearchStarterPack:{type:'object',required:['uri'],properties:{uri:{type:'string',format:'at-uri'}}},trendingTopic:{type:'object',required:['topic','link'],properties:{topic:{type:'string'},displayName:{type:'string'},description:{type:'string'},link:{type:'string'}}}}},AppBskyUnspeccedGetConfig:{lexicon:1,id:'app.bsky.unspecced.getConfig',defs:{main:{type:'query',description:'Get miscellaneous runtime configuration.',output:{encoding:'application/json',schema:{type:'object',required:[],properties:{checkEmailConfirmed:{type:'boolean'}}}}}}},AppBskyUnspeccedGetPopularFeedGenerators:{lexicon:1,id:'app.bsky.unspecced.getPopularFeedGenerators',defs:{main:{type:'query',description:'An unspecced view of globally popular feed generators.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'},query:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['feeds'],properties:{cursor:{type:'string'},feeds:{type:'array',items:{type:'ref',ref:'lex:app.bsky.feed.defs#generatorView'}}}}}}}},AppBskyUnspeccedGetSuggestionsSkeleton:{lexicon:1,id:'app.bsky.unspecced.getSuggestionsSkeleton',defs:{main:{type:'query',description:'Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions',parameters:{type:'params',properties:{viewer:{type:'string',format:'did',description:'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'},relativeToDid:{type:'string',format:'did',description:'DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer.'}}},output:{encoding:'application/json',schema:{type:'object',required:['actors'],properties:{cursor:{type:'string'},actors:{type:'array',items:{type:'ref',ref:'lex:app.bsky.unspecced.defs#skeletonSearchActor'}},relativeToDid:{type:'string',format:'did',description:'DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer.'}}}}}}},AppBskyUnspeccedGetTaggedSuggestions:{lexicon:1,id:'app.bsky.unspecced.getTaggedSuggestions',defs:{main:{type:'query',description:'Get a list of suggestions (feeds and users) tagged with categories',parameters:{type:'params',properties:{}},output:{encoding:'application/json',schema:{type:'object',required:['suggestions'],properties:{suggestions:{type:'array',items:{type:'ref',ref:'lex:app.bsky.unspecced.getTaggedSuggestions#suggestion'}}}}}},suggestion:{type:'object',required:['tag','subjectType','subject'],properties:{tag:{type:'string'},subjectType:{type:'string',knownValues:['actor','feed']},subject:{type:'string',format:'uri'}}}}},AppBskyUnspeccedGetTrendingTopics:{lexicon:1,id:'app.bsky.unspecced.getTrendingTopics',defs:{main:{type:'query',description:'Get a list of trending topics',parameters:{type:'params',properties:{viewer:{type:'string',format:'did',description:'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'},limit:{type:'integer',minimum:1,maximum:25,default:10}}},output:{encoding:'application/json',schema:{type:'object',required:['topics','suggested'],properties:{topics:{type:'array',items:{type:'ref',ref:'lex:app.bsky.unspecced.defs#trendingTopic'}},suggested:{type:'array',items:{type:'ref',ref:'lex:app.bsky.unspecced.defs#trendingTopic'}}}}}}}},AppBskyUnspeccedSearchActorsSkeleton:{lexicon:1,id:'app.bsky.unspecced.searchActorsSkeleton',defs:{main:{type:'query',description:'Backend Actors (profile) search, returns only skeleton.',parameters:{type:'params',required:['q'],properties:{q:{type:'string',description:'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.'},viewer:{type:'string',format:'did',description:'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'},typeahead:{type:'boolean',description:"If true, acts as fast/simple 'typeahead' query."},limit:{type:'integer',minimum:1,maximum:100,default:25},cursor:{type:'string',description:'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'}}},output:{encoding:'application/json',schema:{type:'object',required:['actors'],properties:{cursor:{type:'string'},hitsTotal:{type:'integer',description:'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'},actors:{type:'array',items:{type:'ref',ref:'lex:app.bsky.unspecced.defs#skeletonSearchActor'}}}}},errors:[{name:'BadQueryString'}]}}},AppBskyUnspeccedSearchPostsSkeleton:{lexicon:1,id:'app.bsky.unspecced.searchPostsSkeleton',defs:{main:{type:'query',description:'Backend Posts search, returns only skeleton',parameters:{type:'params',required:['q'],properties:{q:{type:'string',description:'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'},sort:{type:'string',knownValues:['top','latest'],default:'latest',description:'Specifies the ranking order of results.'},since:{type:'string',description:"Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."},until:{type:'string',description:"Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."},mentions:{type:'string',format:'at-identifier',description:'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.'},author:{type:'string',format:'at-identifier',description:'Filter to posts by the given account. Handles are resolved to DID before query-time.'},lang:{type:'string',format:'language',description:'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.'},domain:{type:'string',description:'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.'},url:{type:'string',format:'uri',description:'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.'},tag:{type:'array',items:{type:'string',maxLength:640,maxGraphemes:64},description:"Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."},viewer:{type:'string',format:'did',description:"DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries."},limit:{type:'integer',minimum:1,maximum:100,default:25},cursor:{type:'string',description:'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'}}},output:{encoding:'application/json',schema:{type:'object',required:['posts'],properties:{cursor:{type:'string'},hitsTotal:{type:'integer',description:'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'},posts:{type:'array',items:{type:'ref',ref:'lex:app.bsky.unspecced.defs#skeletonSearchPost'}}}}},errors:[{name:'BadQueryString'}]}}},AppBskyUnspeccedSearchStarterPacksSkeleton:{lexicon:1,id:'app.bsky.unspecced.searchStarterPacksSkeleton',defs:{main:{type:'query',description:'Backend Starter Pack search, returns only skeleton.',parameters:{type:'params',required:['q'],properties:{q:{type:'string',description:'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'},viewer:{type:'string',format:'did',description:'DID of the account making the request (not included for public/unauthenticated queries).'},limit:{type:'integer',minimum:1,maximum:100,default:25},cursor:{type:'string',description:'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'}}},output:{encoding:'application/json',schema:{type:'object',required:['starterPacks'],properties:{cursor:{type:'string'},hitsTotal:{type:'integer',description:'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'},starterPacks:{type:'array',items:{type:'ref',ref:'lex:app.bsky.unspecced.defs#skeletonSearchStarterPack'}}}}},errors:[{name:'BadQueryString'}]}}},AppBskyVideoDefs:{lexicon:1,id:'app.bsky.video.defs',defs:{jobStatus:{type:'object',required:['jobId','did','state'],properties:{jobId:{type:'string'},did:{type:'string',format:'did'},state:{type:'string',description:'The state of the video processing job. All values not listed as a known value indicate that the job is in process.',knownValues:['JOB_STATE_COMPLETED','JOB_STATE_FAILED']},progress:{type:'integer',minimum:0,maximum:100,description:'Progress within the current processing state.'},blob:{type:'blob'},error:{type:'string'},message:{type:'string'}}}}},AppBskyVideoGetJobStatus:{lexicon:1,id:'app.bsky.video.getJobStatus',defs:{main:{type:'query',description:'Get status details for a video processing job.',parameters:{type:'params',required:['jobId'],properties:{jobId:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['jobStatus'],properties:{jobStatus:{type:'ref',ref:'lex:app.bsky.video.defs#jobStatus'}}}}}}},AppBskyVideoGetUploadLimits:{lexicon:1,id:'app.bsky.video.getUploadLimits',defs:{main:{type:'query',description:'Get video upload limits for the authenticated user.',output:{encoding:'application/json',schema:{type:'object',required:['canUpload'],properties:{canUpload:{type:'boolean'},remainingDailyVideos:{type:'integer'},remainingDailyBytes:{type:'integer'},message:{type:'string'},error:{type:'string'}}}}}}},AppBskyVideoUploadVideo:{lexicon:1,id:'app.bsky.video.uploadVideo',defs:{main:{type:'procedure',description:'Upload a video to be processed then stored on the PDS.',input:{encoding:'video/mp4'},output:{encoding:'application/json',schema:{type:'object',required:['jobStatus'],properties:{jobStatus:{type:'ref',ref:'lex:app.bsky.video.defs#jobStatus'}}}}}}},ChatBskyActorDeclaration:{lexicon:1,id:'chat.bsky.actor.declaration',defs:{main:{type:'record',description:'A declaration of a Bluesky chat account.',key:'literal:self',record:{type:'object',required:['allowIncoming'],properties:{allowIncoming:{type:'string',knownValues:['all','none','following']}}}}}},ChatBskyActorDefs:{lexicon:1,id:'chat.bsky.actor.defs',defs:{profileViewBasic:{type:'object',required:['did','handle'],properties:{did:{type:'string',format:'did'},handle:{type:'string',format:'handle'},displayName:{type:'string',maxGraphemes:64,maxLength:640},avatar:{type:'string',format:'uri'},associated:{type:'ref',ref:'lex:app.bsky.actor.defs#profileAssociated'},viewer:{type:'ref',ref:'lex:app.bsky.actor.defs#viewerState'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},chatDisabled:{type:'boolean',description:'Set to true when the actor cannot actively participate in converations'}}}}},ChatBskyActorDeleteAccount:{lexicon:1,id:'chat.bsky.actor.deleteAccount',defs:{main:{type:'procedure',output:{encoding:'application/json',schema:{type:'object',properties:{}}}}}},ChatBskyActorExportAccountData:{lexicon:1,id:'chat.bsky.actor.exportAccountData',defs:{main:{type:'query',output:{encoding:'application/jsonl'}}}},ChatBskyConvoDefs:{lexicon:1,id:'chat.bsky.convo.defs',defs:{messageRef:{type:'object',required:['did','messageId','convoId'],properties:{did:{type:'string',format:'did'},convoId:{type:'string'},messageId:{type:'string'}}},messageInput:{type:'object',required:['text'],properties:{text:{type:'string',maxLength:10000,maxGraphemes:1000},facets:{type:'array',description:'Annotations of text (mentions, URLs, hashtags, etc)',items:{type:'ref',ref:'lex:app.bsky.richtext.facet'}},embed:{type:'union',refs:['lex:app.bsky.embed.record']}}},messageView:{type:'object',required:['id','rev','text','sender','sentAt'],properties:{id:{type:'string'},rev:{type:'string'},text:{type:'string',maxLength:10000,maxGraphemes:1000},facets:{type:'array',description:'Annotations of text (mentions, URLs, hashtags, etc)',items:{type:'ref',ref:'lex:app.bsky.richtext.facet'}},embed:{type:'union',refs:['lex:app.bsky.embed.record#view']},sender:{type:'ref',ref:'lex:chat.bsky.convo.defs#messageViewSender'},sentAt:{type:'string',format:'datetime'}}},deletedMessageView:{type:'object',required:['id','rev','sender','sentAt'],properties:{id:{type:'string'},rev:{type:'string'},sender:{type:'ref',ref:'lex:chat.bsky.convo.defs#messageViewSender'},sentAt:{type:'string',format:'datetime'}}},messageViewSender:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'}}},convoView:{type:'object',required:['id','rev','members','muted','unreadCount'],properties:{id:{type:'string'},rev:{type:'string'},members:{type:'array',items:{type:'ref',ref:'lex:chat.bsky.actor.defs#profileViewBasic'}},lastMessage:{type:'union',refs:['lex:chat.bsky.convo.defs#messageView','lex:chat.bsky.convo.defs#deletedMessageView']},muted:{type:'boolean'},opened:{type:'boolean'},unreadCount:{type:'integer'}}},logBeginConvo:{type:'object',required:['rev','convoId'],properties:{rev:{type:'string'},convoId:{type:'string'}}},logLeaveConvo:{type:'object',required:['rev','convoId'],properties:{rev:{type:'string'},convoId:{type:'string'}}},logCreateMessage:{type:'object',required:['rev','convoId','message'],properties:{rev:{type:'string'},convoId:{type:'string'},message:{type:'union',refs:['lex:chat.bsky.convo.defs#messageView','lex:chat.bsky.convo.defs#deletedMessageView']}}},logDeleteMessage:{type:'object',required:['rev','convoId','message'],properties:{rev:{type:'string'},convoId:{type:'string'},message:{type:'union',refs:['lex:chat.bsky.convo.defs#messageView','lex:chat.bsky.convo.defs#deletedMessageView']}}}}},ChatBskyConvoDeleteMessageForSelf:{lexicon:1,id:'chat.bsky.convo.deleteMessageForSelf',defs:{main:{type:'procedure',input:{encoding:'application/json',schema:{type:'object',required:['convoId','messageId'],properties:{convoId:{type:'string'},messageId:{type:'string'}}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:chat.bsky.convo.defs#deletedMessageView'}}}}},ChatBskyConvoGetConvo:{lexicon:1,id:'chat.bsky.convo.getConvo',defs:{main:{type:'query',parameters:{type:'params',required:['convoId'],properties:{convoId:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['convo'],properties:{convo:{type:'ref',ref:'lex:chat.bsky.convo.defs#convoView'}}}}}}},ChatBskyConvoGetConvoForMembers:{lexicon:1,id:'chat.bsky.convo.getConvoForMembers',defs:{main:{type:'query',parameters:{type:'params',required:['members'],properties:{members:{type:'array',minLength:1,maxLength:10,items:{type:'string',format:'did'}}}},output:{encoding:'application/json',schema:{type:'object',required:['convo'],properties:{convo:{type:'ref',ref:'lex:chat.bsky.convo.defs#convoView'}}}}}}},ChatBskyConvoGetLog:{lexicon:1,id:'chat.bsky.convo.getLog',defs:{main:{type:'query',parameters:{type:'params',required:[],properties:{cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['logs'],properties:{cursor:{type:'string'},logs:{type:'array',items:{type:'union',refs:['lex:chat.bsky.convo.defs#logBeginConvo','lex:chat.bsky.convo.defs#logLeaveConvo','lex:chat.bsky.convo.defs#logCreateMessage','lex:chat.bsky.convo.defs#logDeleteMessage']}}}}}}}},ChatBskyConvoGetMessages:{lexicon:1,id:'chat.bsky.convo.getMessages',defs:{main:{type:'query',parameters:{type:'params',required:['convoId'],properties:{convoId:{type:'string'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['messages'],properties:{cursor:{type:'string'},messages:{type:'array',items:{type:'union',refs:['lex:chat.bsky.convo.defs#messageView','lex:chat.bsky.convo.defs#deletedMessageView']}}}}}}}},ChatBskyConvoLeaveConvo:{lexicon:1,id:'chat.bsky.convo.leaveConvo',defs:{main:{type:'procedure',input:{encoding:'application/json',schema:{type:'object',required:['convoId'],properties:{convoId:{type:'string'}}}},output:{encoding:'application/json',schema:{type:'object',required:['convoId','rev'],properties:{convoId:{type:'string'},rev:{type:'string'}}}}}}},ChatBskyConvoListConvos:{lexicon:1,id:'chat.bsky.convo.listConvos',defs:{main:{type:'query',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['convos'],properties:{cursor:{type:'string'},convos:{type:'array',items:{type:'ref',ref:'lex:chat.bsky.convo.defs#convoView'}}}}}}}},ChatBskyConvoMuteConvo:{lexicon:1,id:'chat.bsky.convo.muteConvo',defs:{main:{type:'procedure',input:{encoding:'application/json',schema:{type:'object',required:['convoId'],properties:{convoId:{type:'string'}}}},output:{encoding:'application/json',schema:{type:'object',required:['convo'],properties:{convo:{type:'ref',ref:'lex:chat.bsky.convo.defs#convoView'}}}}}}},ChatBskyConvoSendMessage:{lexicon:1,id:'chat.bsky.convo.sendMessage',defs:{main:{type:'procedure',input:{encoding:'application/json',schema:{type:'object',required:['convoId','message'],properties:{convoId:{type:'string'},message:{type:'ref',ref:'lex:chat.bsky.convo.defs#messageInput'}}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:chat.bsky.convo.defs#messageView'}}}}},ChatBskyConvoSendMessageBatch:{lexicon:1,id:'chat.bsky.convo.sendMessageBatch',defs:{main:{type:'procedure',input:{encoding:'application/json',schema:{type:'object',required:['items'],properties:{items:{type:'array',maxLength:100,items:{type:'ref',ref:'lex:chat.bsky.convo.sendMessageBatch#batchItem'}}}}},output:{encoding:'application/json',schema:{type:'object',required:['items'],properties:{items:{type:'array',items:{type:'ref',ref:'lex:chat.bsky.convo.defs#messageView'}}}}}},batchItem:{type:'object',required:['convoId','message'],properties:{convoId:{type:'string'},message:{type:'ref',ref:'lex:chat.bsky.convo.defs#messageInput'}}}}},ChatBskyConvoUnmuteConvo:{lexicon:1,id:'chat.bsky.convo.unmuteConvo',defs:{main:{type:'procedure',input:{encoding:'application/json',schema:{type:'object',required:['convoId'],properties:{convoId:{type:'string'}}}},output:{encoding:'application/json',schema:{type:'object',required:['convo'],properties:{convo:{type:'ref',ref:'lex:chat.bsky.convo.defs#convoView'}}}}}}},ChatBskyConvoUpdateRead:{lexicon:1,id:'chat.bsky.convo.updateRead',defs:{main:{type:'procedure',input:{encoding:'application/json',schema:{type:'object',required:['convoId'],properties:{convoId:{type:'string'},messageId:{type:'string'}}}},output:{encoding:'application/json',schema:{type:'object',required:['convo'],properties:{convo:{type:'ref',ref:'lex:chat.bsky.convo.defs#convoView'}}}}}}},ChatBskyModerationGetActorMetadata:{lexicon:1,id:'chat.bsky.moderation.getActorMetadata',defs:{main:{type:'query',parameters:{type:'params',required:['actor'],properties:{actor:{type:'string',format:'did'}}},output:{encoding:'application/json',schema:{type:'object',required:['day','month','all'],properties:{day:{type:'ref',ref:'lex:chat.bsky.moderation.getActorMetadata#metadata'},month:{type:'ref',ref:'lex:chat.bsky.moderation.getActorMetadata#metadata'},all:{type:'ref',ref:'lex:chat.bsky.moderation.getActorMetadata#metadata'}}}}},metadata:{type:'object',required:['messagesSent','messagesReceived','convos','convosStarted'],properties:{messagesSent:{type:'integer'},messagesReceived:{type:'integer'},convos:{type:'integer'},convosStarted:{type:'integer'}}}}},ChatBskyModerationGetMessageContext:{lexicon:1,id:'chat.bsky.moderation.getMessageContext',defs:{main:{type:'query',parameters:{type:'params',required:['messageId'],properties:{convoId:{type:'string',description:'Conversation that the message is from. NOTE: this field will eventually be required.'},messageId:{type:'string'},before:{type:'integer',default:5},after:{type:'integer',default:5}}},output:{encoding:'application/json',schema:{type:'object',required:['messages'],properties:{messages:{type:'array',items:{type:'union',refs:['lex:chat.bsky.convo.defs#messageView','lex:chat.bsky.convo.defs#deletedMessageView']}}}}}}}},ChatBskyModerationUpdateActorAccess:{lexicon:1,id:'chat.bsky.moderation.updateActorAccess',defs:{main:{type:'procedure',input:{encoding:'application/json',schema:{type:'object',required:['actor','allowAccess'],properties:{actor:{type:'string',format:'did'},allowAccess:{type:'boolean'},ref:{type:'string'}}}}}}},ToolsOzoneCommunicationCreateTemplate:{lexicon:1,id:'tools.ozone.communication.createTemplate',defs:{main:{type:'procedure',description:'Administrative action to create a new, re-usable communication (email for now) template.',input:{encoding:'application/json',schema:{type:'object',required:['subject','contentMarkdown','name'],properties:{name:{type:'string',description:'Name of the template.'},contentMarkdown:{type:'string',description:'Content of the template, markdown supported, can contain variable placeholders.'},subject:{type:'string',description:'Subject of the message, used in emails.'},lang:{type:'string',format:'language',description:'Message language.'},createdBy:{type:'string',format:'did',description:'DID of the user who is creating the template.'}}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.communication.defs#templateView'}},errors:[{name:'DuplicateTemplateName'}]}}},ToolsOzoneCommunicationDefs:{lexicon:1,id:'tools.ozone.communication.defs',defs:{templateView:{type:'object',required:['id','name','contentMarkdown','disabled','lastUpdatedBy','createdAt','updatedAt'],properties:{id:{type:'string'},name:{type:'string',description:'Name of the template.'},subject:{type:'string',description:'Content of the template, can contain markdown and variable placeholders.'},contentMarkdown:{type:'string',description:'Subject of the message, used in emails.'},disabled:{type:'boolean'},lang:{type:'string',format:'language',description:'Message language.'},lastUpdatedBy:{type:'string',format:'did',description:'DID of the user who last updated the template.'},createdAt:{type:'string',format:'datetime'},updatedAt:{type:'string',format:'datetime'}}}}},ToolsOzoneCommunicationDeleteTemplate:{lexicon:1,id:'tools.ozone.communication.deleteTemplate',defs:{main:{type:'procedure',description:'Delete a communication template.',input:{encoding:'application/json',schema:{type:'object',required:['id'],properties:{id:{type:'string'}}}}}}},ToolsOzoneCommunicationListTemplates:{lexicon:1,id:'tools.ozone.communication.listTemplates',defs:{main:{type:'query',description:'Get list of all communication templates.',output:{encoding:'application/json',schema:{type:'object',required:['communicationTemplates'],properties:{communicationTemplates:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.communication.defs#templateView'}}}}}}}},ToolsOzoneCommunicationUpdateTemplate:{lexicon:1,id:'tools.ozone.communication.updateTemplate',defs:{main:{type:'procedure',description:'Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.',input:{encoding:'application/json',schema:{type:'object',required:['id'],properties:{id:{type:'string',description:'ID of the template to be updated.'},name:{type:'string',description:'Name of the template.'},lang:{type:'string',format:'language',description:'Message language.'},contentMarkdown:{type:'string',description:'Content of the template, markdown supported, can contain variable placeholders.'},subject:{type:'string',description:'Subject of the message, used in emails.'},updatedBy:{type:'string',format:'did',description:'DID of the user who is updating the template.'},disabled:{type:'boolean'}}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.communication.defs#templateView'}},errors:[{name:'DuplicateTemplateName'}]}}},ToolsOzoneModerationDefs:{lexicon:1,id:'tools.ozone.moderation.defs',defs:{modEventView:{type:'object',required:['id','event','subject','subjectBlobCids','createdBy','createdAt'],properties:{id:{type:'integer'},event:{type:'union',refs:['lex:tools.ozone.moderation.defs#modEventTakedown','lex:tools.ozone.moderation.defs#modEventReverseTakedown','lex:tools.ozone.moderation.defs#modEventComment','lex:tools.ozone.moderation.defs#modEventReport','lex:tools.ozone.moderation.defs#modEventLabel','lex:tools.ozone.moderation.defs#modEventAcknowledge','lex:tools.ozone.moderation.defs#modEventEscalate','lex:tools.ozone.moderation.defs#modEventMute','lex:tools.ozone.moderation.defs#modEventUnmute','lex:tools.ozone.moderation.defs#modEventMuteReporter','lex:tools.ozone.moderation.defs#modEventUnmuteReporter','lex:tools.ozone.moderation.defs#modEventEmail','lex:tools.ozone.moderation.defs#modEventResolveAppeal','lex:tools.ozone.moderation.defs#modEventDivert','lex:tools.ozone.moderation.defs#modEventTag','lex:tools.ozone.moderation.defs#accountEvent','lex:tools.ozone.moderation.defs#identityEvent','lex:tools.ozone.moderation.defs#recordEvent']},subject:{type:'union',refs:['lex:com.atproto.admin.defs#repoRef','lex:com.atproto.repo.strongRef','lex:chat.bsky.convo.defs#messageRef']},subjectBlobCids:{type:'array',items:{type:'string'}},createdBy:{type:'string',format:'did'},createdAt:{type:'string',format:'datetime'},creatorHandle:{type:'string'},subjectHandle:{type:'string'}}},modEventViewDetail:{type:'object',required:['id','event','subject','subjectBlobs','createdBy','createdAt'],properties:{id:{type:'integer'},event:{type:'union',refs:['lex:tools.ozone.moderation.defs#modEventTakedown','lex:tools.ozone.moderation.defs#modEventReverseTakedown','lex:tools.ozone.moderation.defs#modEventComment','lex:tools.ozone.moderation.defs#modEventReport','lex:tools.ozone.moderation.defs#modEventLabel','lex:tools.ozone.moderation.defs#modEventAcknowledge','lex:tools.ozone.moderation.defs#modEventEscalate','lex:tools.ozone.moderation.defs#modEventMute','lex:tools.ozone.moderation.defs#modEventUnmute','lex:tools.ozone.moderation.defs#modEventMuteReporter','lex:tools.ozone.moderation.defs#modEventUnmuteReporter','lex:tools.ozone.moderation.defs#modEventEmail','lex:tools.ozone.moderation.defs#modEventResolveAppeal','lex:tools.ozone.moderation.defs#modEventDivert','lex:tools.ozone.moderation.defs#modEventTag','lex:tools.ozone.moderation.defs#accountEvent','lex:tools.ozone.moderation.defs#identityEvent','lex:tools.ozone.moderation.defs#recordEvent']},subject:{type:'union',refs:['lex:tools.ozone.moderation.defs#repoView','lex:tools.ozone.moderation.defs#repoViewNotFound','lex:tools.ozone.moderation.defs#recordView','lex:tools.ozone.moderation.defs#recordViewNotFound']},subjectBlobs:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.moderation.defs#blobView'}},createdBy:{type:'string',format:'did'},createdAt:{type:'string',format:'datetime'}}},subjectStatusView:{type:'object',required:['id','subject','createdAt','updatedAt','reviewState'],properties:{id:{type:'integer'},subject:{type:'union',refs:['lex:com.atproto.admin.defs#repoRef','lex:com.atproto.repo.strongRef']},hosting:{type:'union',refs:['lex:tools.ozone.moderation.defs#accountHosting','lex:tools.ozone.moderation.defs#recordHosting']},subjectBlobCids:{type:'array',items:{type:'string',format:'cid'}},subjectRepoHandle:{type:'string'},updatedAt:{type:'string',format:'datetime',description:'Timestamp referencing when the last update was made to the moderation status of the subject'},createdAt:{type:'string',format:'datetime',description:'Timestamp referencing the first moderation status impacting event was emitted on the subject'},reviewState:{type:'ref',ref:'lex:tools.ozone.moderation.defs#subjectReviewState'},comment:{type:'string',description:'Sticky comment on the subject.'},muteUntil:{type:'string',format:'datetime'},muteReportingUntil:{type:'string',format:'datetime'},lastReviewedBy:{type:'string',format:'did'},lastReviewedAt:{type:'string',format:'datetime'},lastReportedAt:{type:'string',format:'datetime'},lastAppealedAt:{type:'string',format:'datetime',description:'Timestamp referencing when the author of the subject appealed a moderation action'},takendown:{type:'boolean'},appealed:{type:'boolean',description:'True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.'},suspendUntil:{type:'string',format:'datetime'},tags:{type:'array',items:{type:'string'}}}},subjectReviewState:{type:'string',knownValues:['lex:tools.ozone.moderation.defs#reviewOpen','lex:tools.ozone.moderation.defs#reviewEscalated','lex:tools.ozone.moderation.defs#reviewClosed','lex:tools.ozone.moderation.defs#reviewNone']},reviewOpen:{type:'token',description:'Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator'},reviewEscalated:{type:'token',description:'Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator'},reviewClosed:{type:'token',description:'Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator'},reviewNone:{type:'token',description:'Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it'},modEventTakedown:{type:'object',description:'Take down a subject permanently or temporarily',properties:{comment:{type:'string'},durationInHours:{type:'integer',description:'Indicates how long the takedown should be in effect before automatically expiring.'},acknowledgeAccountSubjects:{type:'boolean',description:'If true, all other reports on content authored by this account will be resolved (acknowledged).'},policies:{type:'array',maxLength:5,items:{type:'string'},description:'Names/Keywords of the policies that drove the decision.'}}},modEventReverseTakedown:{type:'object',description:'Revert take down action on a subject',properties:{comment:{type:'string',description:'Describe reasoning behind the reversal.'}}},modEventResolveAppeal:{type:'object',description:'Resolve appeal on a subject',properties:{comment:{type:'string',description:'Describe resolution.'}}},modEventComment:{type:'object',description:'Add a comment to a subject',required:['comment'],properties:{comment:{type:'string'},sticky:{type:'boolean',description:'Make the comment persistent on the subject'}}},modEventReport:{type:'object',description:'Report a subject',required:['reportType'],properties:{comment:{type:'string'},isReporterMuted:{type:'boolean',description:"Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject."},reportType:{type:'ref',ref:'lex:com.atproto.moderation.defs#reasonType'}}},modEventLabel:{type:'object',description:'Apply/Negate labels on a subject',required:['createLabelVals','negateLabelVals'],properties:{comment:{type:'string'},createLabelVals:{type:'array',items:{type:'string'}},negateLabelVals:{type:'array',items:{type:'string'}}}},modEventAcknowledge:{type:'object',properties:{comment:{type:'string'},acknowledgeAccountSubjects:{type:'boolean',description:'If true, all other reports on content authored by this account will be resolved (acknowledged).'}}},modEventEscalate:{type:'object',properties:{comment:{type:'string'}}},modEventMute:{type:'object',description:'Mute incoming reports on a subject',required:['durationInHours'],properties:{comment:{type:'string'},durationInHours:{type:'integer',description:'Indicates how long the subject should remain muted.'}}},modEventUnmute:{type:'object',description:'Unmute action on a subject',properties:{comment:{type:'string',description:'Describe reasoning behind the reversal.'}}},modEventMuteReporter:{type:'object',description:'Mute incoming reports from an account',properties:{comment:{type:'string'},durationInHours:{type:'integer',description:'Indicates how long the account should remain muted. Falsy value here means a permanent mute.'}}},modEventUnmuteReporter:{type:'object',description:'Unmute incoming reports from an account',properties:{comment:{type:'string',description:'Describe reasoning behind the reversal.'}}},modEventEmail:{type:'object',description:'Keep a log of outgoing email to a user',required:['subjectLine'],properties:{subjectLine:{type:'string',description:'The subject line of the email sent to the user.'},content:{type:'string',description:'The content of the email sent to the user.'},comment:{type:'string',description:'Additional comment about the outgoing comm.'}}},modEventDivert:{type:'object',description:"Divert a record's blobs to a 3rd party service for further scanning/tagging",properties:{comment:{type:'string'}}},modEventTag:{type:'object',description:'Add/Remove a tag on a subject',required:['add','remove'],properties:{add:{type:'array',items:{type:'string'},description:"Tags to be added to the subject. If already exists, won't be duplicated."},remove:{type:'array',items:{type:'string'},description:"Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."},comment:{type:'string',description:'Additional comment about added/removed tags.'}}},accountEvent:{type:'object',description:'Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',required:['timestamp','active'],properties:{comment:{type:'string'},active:{type:'boolean',description:'Indicates that the account has a repository which can be fetched from the host that emitted this event.'},status:{type:'string',knownValues:['unknown','deactivated','deleted','takendown','suspended','tombstoned']},timestamp:{type:'string',format:'datetime'}}},identityEvent:{type:'object',description:'Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',required:['timestamp'],properties:{comment:{type:'string'},handle:{type:'string',format:'handle'},pdsHost:{type:'string',format:'uri'},tombstone:{type:'boolean'},timestamp:{type:'string',format:'datetime'}}},recordEvent:{type:'object',description:'Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',required:['timestamp','op'],properties:{comment:{type:'string'},op:{type:'string',knownValues:['create','update','delete']},cid:{type:'string',format:'cid'},timestamp:{type:'string',format:'datetime'}}},repoView:{type:'object',required:['did','handle','relatedRecords','indexedAt','moderation'],properties:{did:{type:'string',format:'did'},handle:{type:'string',format:'handle'},email:{type:'string'},relatedRecords:{type:'array',items:{type:'unknown'}},indexedAt:{type:'string',format:'datetime'},moderation:{type:'ref',ref:'lex:tools.ozone.moderation.defs#moderation'},invitedBy:{type:'ref',ref:'lex:com.atproto.server.defs#inviteCode'},invitesDisabled:{type:'boolean'},inviteNote:{type:'string'},deactivatedAt:{type:'string',format:'datetime'},threatSignatures:{type:'array',items:{type:'ref',ref:'lex:com.atproto.admin.defs#threatSignature'}}}},repoViewDetail:{type:'object',required:['did','handle','relatedRecords','indexedAt','moderation'],properties:{did:{type:'string',format:'did'},handle:{type:'string',format:'handle'},email:{type:'string'},relatedRecords:{type:'array',items:{type:'unknown'}},indexedAt:{type:'string',format:'datetime'},moderation:{type:'ref',ref:'lex:tools.ozone.moderation.defs#moderationDetail'},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},invitedBy:{type:'ref',ref:'lex:com.atproto.server.defs#inviteCode'},invites:{type:'array',items:{type:'ref',ref:'lex:com.atproto.server.defs#inviteCode'}},invitesDisabled:{type:'boolean'},inviteNote:{type:'string'},emailConfirmedAt:{type:'string',format:'datetime'},deactivatedAt:{type:'string',format:'datetime'},threatSignatures:{type:'array',items:{type:'ref',ref:'lex:com.atproto.admin.defs#threatSignature'}}}},repoViewNotFound:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'}}},recordView:{type:'object',required:['uri','cid','value','blobCids','indexedAt','moderation','repo'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},value:{type:'unknown'},blobCids:{type:'array',items:{type:'string',format:'cid'}},indexedAt:{type:'string',format:'datetime'},moderation:{type:'ref',ref:'lex:tools.ozone.moderation.defs#moderation'},repo:{type:'ref',ref:'lex:tools.ozone.moderation.defs#repoView'}}},recordViewDetail:{type:'object',required:['uri','cid','value','blobs','indexedAt','moderation','repo'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'},value:{type:'unknown'},blobs:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.moderation.defs#blobView'}},labels:{type:'array',items:{type:'ref',ref:'lex:com.atproto.label.defs#label'}},indexedAt:{type:'string',format:'datetime'},moderation:{type:'ref',ref:'lex:tools.ozone.moderation.defs#moderationDetail'},repo:{type:'ref',ref:'lex:tools.ozone.moderation.defs#repoView'}}},recordViewNotFound:{type:'object',required:['uri'],properties:{uri:{type:'string',format:'at-uri'}}},moderation:{type:'object',properties:{subjectStatus:{type:'ref',ref:'lex:tools.ozone.moderation.defs#subjectStatusView'}}},moderationDetail:{type:'object',properties:{subjectStatus:{type:'ref',ref:'lex:tools.ozone.moderation.defs#subjectStatusView'}}},blobView:{type:'object',required:['cid','mimeType','size','createdAt'],properties:{cid:{type:'string',format:'cid'},mimeType:{type:'string'},size:{type:'integer'},createdAt:{type:'string',format:'datetime'},details:{type:'union',refs:['lex:tools.ozone.moderation.defs#imageDetails','lex:tools.ozone.moderation.defs#videoDetails']},moderation:{type:'ref',ref:'lex:tools.ozone.moderation.defs#moderation'}}},imageDetails:{type:'object',required:['width','height'],properties:{width:{type:'integer'},height:{type:'integer'}}},videoDetails:{type:'object',required:['width','height','length'],properties:{width:{type:'integer'},height:{type:'integer'},length:{type:'integer'}}},accountHosting:{type:'object',required:['status'],properties:{status:{type:'string',knownValues:['takendown','suspended','deleted','deactivated','unknown']},updatedAt:{type:'string',format:'datetime'},createdAt:{type:'string',format:'datetime'},deletedAt:{type:'string',format:'datetime'},deactivatedAt:{type:'string',format:'datetime'},reactivatedAt:{type:'string',format:'datetime'}}},recordHosting:{type:'object',required:['status'],properties:{status:{type:'string',knownValues:['deleted','unknown']},updatedAt:{type:'string',format:'datetime'},createdAt:{type:'string',format:'datetime'},deletedAt:{type:'string',format:'datetime'}}}}},ToolsOzoneModerationEmitEvent:{lexicon:1,id:'tools.ozone.moderation.emitEvent',defs:{main:{type:'procedure',description:'Take a moderation action on an actor.',input:{encoding:'application/json',schema:{type:'object',required:['event','subject','createdBy'],properties:{event:{type:'union',refs:['lex:tools.ozone.moderation.defs#modEventTakedown','lex:tools.ozone.moderation.defs#modEventAcknowledge','lex:tools.ozone.moderation.defs#modEventEscalate','lex:tools.ozone.moderation.defs#modEventComment','lex:tools.ozone.moderation.defs#modEventLabel','lex:tools.ozone.moderation.defs#modEventReport','lex:tools.ozone.moderation.defs#modEventMute','lex:tools.ozone.moderation.defs#modEventUnmute','lex:tools.ozone.moderation.defs#modEventMuteReporter','lex:tools.ozone.moderation.defs#modEventUnmuteReporter','lex:tools.ozone.moderation.defs#modEventReverseTakedown','lex:tools.ozone.moderation.defs#modEventResolveAppeal','lex:tools.ozone.moderation.defs#modEventEmail','lex:tools.ozone.moderation.defs#modEventTag','lex:tools.ozone.moderation.defs#accountEvent','lex:tools.ozone.moderation.defs#identityEvent','lex:tools.ozone.moderation.defs#recordEvent']},subject:{type:'union',refs:['lex:com.atproto.admin.defs#repoRef','lex:com.atproto.repo.strongRef']},subjectBlobCids:{type:'array',items:{type:'string',format:'cid'}},createdBy:{type:'string',format:'did'}}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.moderation.defs#modEventView'}},errors:[{name:'SubjectHasAction'}]}}},ToolsOzoneModerationGetEvent:{lexicon:1,id:'tools.ozone.moderation.getEvent',defs:{main:{type:'query',description:'Get details about a moderation event.',parameters:{type:'params',required:['id'],properties:{id:{type:'integer'}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.moderation.defs#modEventViewDetail'}}}}},ToolsOzoneModerationGetRecord:{lexicon:1,id:'tools.ozone.moderation.getRecord',defs:{main:{type:'query',description:'Get details about a record.',parameters:{type:'params',required:['uri'],properties:{uri:{type:'string',format:'at-uri'},cid:{type:'string',format:'cid'}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.moderation.defs#recordViewDetail'}},errors:[{name:'RecordNotFound'}]}}},ToolsOzoneModerationGetRecords:{lexicon:1,id:'tools.ozone.moderation.getRecords',defs:{main:{type:'query',description:'Get details about some records.',parameters:{type:'params',required:['uris'],properties:{uris:{type:'array',maxLength:100,items:{type:'string',format:'at-uri'}}}},output:{encoding:'application/json',schema:{type:'object',required:['records'],properties:{records:{type:'array',items:{type:'union',refs:['lex:tools.ozone.moderation.defs#recordViewDetail','lex:tools.ozone.moderation.defs#recordViewNotFound']}}}}}}}},ToolsOzoneModerationGetRepo:{lexicon:1,id:'tools.ozone.moderation.getRepo',defs:{main:{type:'query',description:'Get details about a repository.',parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did'}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.moderation.defs#repoViewDetail'}},errors:[{name:'RepoNotFound'}]}}},ToolsOzoneModerationGetRepos:{lexicon:1,id:'tools.ozone.moderation.getRepos',defs:{main:{type:'query',description:'Get details about some repositories.',parameters:{type:'params',required:['dids'],properties:{dids:{type:'array',maxLength:100,items:{type:'string',format:'did'}}}},output:{encoding:'application/json',schema:{type:'object',required:['repos'],properties:{repos:{type:'array',items:{type:'union',refs:['lex:tools.ozone.moderation.defs#repoViewDetail','lex:tools.ozone.moderation.defs#repoViewNotFound']}}}}}}}},ToolsOzoneModerationQueryEvents:{lexicon:1,id:'tools.ozone.moderation.queryEvents',defs:{main:{type:'query',description:'List moderation events related to a subject.',parameters:{type:'params',properties:{types:{type:'array',items:{type:'string'},description:'The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned.'},createdBy:{type:'string',format:'did'},sortDirection:{type:'string',default:'desc',enum:['asc','desc'],description:'Sort direction for the events. Defaults to descending order of created at timestamp.'},createdAfter:{type:'string',format:'datetime',description:'Retrieve events created after a given timestamp'},createdBefore:{type:'string',format:'datetime',description:'Retrieve events created before a given timestamp'},subject:{type:'string',format:'uri'},collections:{type:'array',maxLength:20,description:"If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",items:{type:'string',format:'nsid'}},subjectType:{type:'string',description:"If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",knownValues:['account','record']},includeAllUserRecords:{type:'boolean',default:false,description:"If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned."},limit:{type:'integer',minimum:1,maximum:100,default:50},hasComment:{type:'boolean',description:'If true, only events with comments are returned'},comment:{type:'string',description:'If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition.'},addedLabels:{type:'array',items:{type:'string'},description:'If specified, only events where all of these labels were added are returned'},removedLabels:{type:'array',items:{type:'string'},description:'If specified, only events where all of these labels were removed are returned'},addedTags:{type:'array',items:{type:'string'},description:'If specified, only events where all of these tags were added are returned'},removedTags:{type:'array',items:{type:'string'},description:'If specified, only events where all of these tags were removed are returned'},reportTypes:{type:'array',items:{type:'string'}},policies:{type:'array',items:{type:'string',description:'If specified, only events where the policy matches the given policy are returned'}},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['events'],properties:{cursor:{type:'string'},events:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.moderation.defs#modEventView'}}}}}}}},ToolsOzoneModerationQueryStatuses:{lexicon:1,id:'tools.ozone.moderation.queryStatuses',defs:{main:{type:'query',description:'View moderation statuses of subjects (record or repo).',parameters:{type:'params',properties:{queueCount:{type:'integer',description:'Number of queues being used by moderators. Subjects will be split among all queues.'},queueIndex:{type:'integer',description:'Index of the queue to fetch subjects from. Works only when queueCount value is specified.'},queueSeed:{type:'string',description:'A seeder to shuffle/balance the queue items.'},includeAllUserRecords:{type:'boolean',description:"All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned."},subject:{type:'string',format:'uri',description:'The subject to get the status for.'},comment:{type:'string',description:'Search subjects by keyword from comments'},reportedAfter:{type:'string',format:'datetime',description:'Search subjects reported after a given timestamp'},reportedBefore:{type:'string',format:'datetime',description:'Search subjects reported before a given timestamp'},reviewedAfter:{type:'string',format:'datetime',description:'Search subjects reviewed after a given timestamp'},hostingDeletedAfter:{type:'string',format:'datetime',description:'Search subjects where the associated record/account was deleted after a given timestamp'},hostingDeletedBefore:{type:'string',format:'datetime',description:'Search subjects where the associated record/account was deleted before a given timestamp'},hostingUpdatedAfter:{type:'string',format:'datetime',description:'Search subjects where the associated record/account was updated after a given timestamp'},hostingUpdatedBefore:{type:'string',format:'datetime',description:'Search subjects where the associated record/account was updated before a given timestamp'},hostingStatuses:{type:'array',items:{type:'string'},description:'Search subjects by the status of the associated record/account'},reviewedBefore:{type:'string',format:'datetime',description:'Search subjects reviewed before a given timestamp'},includeMuted:{type:'boolean',description:"By default, we don't include muted subjects in the results. Set this to true to include them."},onlyMuted:{type:'boolean',description:'When set to true, only muted subjects and reporters will be returned.'},reviewState:{type:'string',description:'Specify when fetching subjects in a certain state'},ignoreSubjects:{type:'array',items:{type:'string',format:'uri'}},lastReviewedBy:{type:'string',format:'did',description:'Get all subject statuses that were reviewed by a specific moderator'},sortField:{type:'string',default:'lastReportedAt',enum:['lastReviewedAt','lastReportedAt']},sortDirection:{type:'string',default:'desc',enum:['asc','desc']},takendown:{type:'boolean',description:'Get subjects that were taken down'},appealed:{type:'boolean',description:'Get subjects in unresolved appealed status'},limit:{type:'integer',minimum:1,maximum:100,default:50},tags:{type:'array',maxLength:25,items:{type:'string',description:'Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters'}},excludeTags:{type:'array',items:{type:'string'}},cursor:{type:'string'},collections:{type:'array',maxLength:20,description:"If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",items:{type:'string',format:'nsid'}},subjectType:{type:'string',description:"If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",knownValues:['account','record']}}},output:{encoding:'application/json',schema:{type:'object',required:['subjectStatuses'],properties:{cursor:{type:'string'},subjectStatuses:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.moderation.defs#subjectStatusView'}}}}}}}},ToolsOzoneModerationSearchRepos:{lexicon:1,id:'tools.ozone.moderation.searchRepos',defs:{main:{type:'query',description:'Find repositories based on a search term.',parameters:{type:'params',properties:{term:{type:'string',description:"DEPRECATED: use 'q' instead"},q:{type:'string'},limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['repos'],properties:{cursor:{type:'string'},repos:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.moderation.defs#repoView'}}}}}}}},ToolsOzoneServerGetConfig:{lexicon:1,id:'tools.ozone.server.getConfig',defs:{main:{type:'query',description:"Get details about ozone's server configuration.",output:{encoding:'application/json',schema:{type:'object',properties:{appview:{type:'ref',ref:'lex:tools.ozone.server.getConfig#serviceConfig'},pds:{type:'ref',ref:'lex:tools.ozone.server.getConfig#serviceConfig'},blobDivert:{type:'ref',ref:'lex:tools.ozone.server.getConfig#serviceConfig'},chat:{type:'ref',ref:'lex:tools.ozone.server.getConfig#serviceConfig'},viewer:{type:'ref',ref:'lex:tools.ozone.server.getConfig#viewerConfig'}}}}},serviceConfig:{type:'object',properties:{url:{type:'string',format:'uri'}}},viewerConfig:{type:'object',properties:{role:{type:'string',knownValues:['tools.ozone.team.defs#roleAdmin','tools.ozone.team.defs#roleModerator','tools.ozone.team.defs#roleTriage']}}}}},ToolsOzoneSetAddValues:{lexicon:1,id:'tools.ozone.set.addValues',defs:{main:{type:'procedure',description:'Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.',input:{encoding:'application/json',schema:{type:'object',required:['name','values'],properties:{name:{type:'string',description:'Name of the set to add values to'},values:{type:'array',minLength:1,maxLength:1000,items:{type:'string'},description:'Array of string values to add to the set'}}}}}}},ToolsOzoneSetDefs:{lexicon:1,id:'tools.ozone.set.defs',defs:{set:{type:'object',required:['name'],properties:{name:{type:'string',minLength:3,maxLength:128},description:{type:'string',maxGraphemes:1024,maxLength:10240}}},setView:{type:'object',required:['name','setSize','createdAt','updatedAt'],properties:{name:{type:'string',minLength:3,maxLength:128},description:{type:'string',maxGraphemes:1024,maxLength:10240},setSize:{type:'integer'},createdAt:{type:'string',format:'datetime'},updatedAt:{type:'string',format:'datetime'}}}}},ToolsOzoneSetDeleteSet:{lexicon:1,id:'tools.ozone.set.deleteSet',defs:{main:{type:'procedure',description:'Delete an entire set. Attempting to delete a set that does not exist will result in an error.',input:{encoding:'application/json',schema:{type:'object',required:['name'],properties:{name:{type:'string',description:'Name of the set to delete'}}}},output:{encoding:'application/json',schema:{type:'object',properties:{}}},errors:[{name:'SetNotFound',description:'set with the given name does not exist'}]}}},ToolsOzoneSetDeleteValues:{lexicon:1,id:'tools.ozone.set.deleteValues',defs:{main:{type:'procedure',description:'Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error',input:{encoding:'application/json',schema:{type:'object',required:['name','values'],properties:{name:{type:'string',description:'Name of the set to delete values from'},values:{type:'array',minLength:1,items:{type:'string'},description:'Array of string values to delete from the set'}}}},errors:[{name:'SetNotFound',description:'set with the given name does not exist'}]}}},ToolsOzoneSetGetValues:{lexicon:1,id:'tools.ozone.set.getValues',defs:{main:{type:'query',description:'Get a specific set and its values',parameters:{type:'params',required:['name'],properties:{name:{type:'string'},limit:{type:'integer',minimum:1,maximum:1000,default:100},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['set','values'],properties:{set:{type:'ref',ref:'lex:tools.ozone.set.defs#setView'},values:{type:'array',items:{type:'string'}},cursor:{type:'string'}}}},errors:[{name:'SetNotFound',description:'set with the given name does not exist'}]}}},ToolsOzoneSetQuerySets:{lexicon:1,id:'tools.ozone.set.querySets',defs:{main:{type:'query',description:'Query available sets',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'},namePrefix:{type:'string'},sortBy:{type:'string',enum:['name','createdAt','updatedAt'],default:'name'},sortDirection:{type:'string',default:'asc',enum:['asc','desc'],description:'Defaults to ascending order of name field.'}}},output:{encoding:'application/json',schema:{type:'object',required:['sets'],properties:{sets:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.set.defs#setView'}},cursor:{type:'string'}}}}}}},ToolsOzoneSetUpsertSet:{lexicon:1,id:'tools.ozone.set.upsertSet',defs:{main:{type:'procedure',description:'Create or update set metadata',input:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.set.defs#set'}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.set.defs#setView'}}}}},ToolsOzoneSettingDefs:{lexicon:1,id:'tools.ozone.setting.defs',defs:{option:{type:'object',required:['key','value','did','scope','createdBy','lastUpdatedBy'],properties:{key:{type:'string',format:'nsid'},did:{type:'string',format:'did'},value:{type:'unknown'},description:{type:'string',maxGraphemes:1024,maxLength:10240},createdAt:{type:'string',format:'datetime'},updatedAt:{type:'string',format:'datetime'},managerRole:{type:'string',knownValues:['tools.ozone.team.defs#roleModerator','tools.ozone.team.defs#roleTriage','tools.ozone.team.defs#roleAdmin']},scope:{type:'string',knownValues:['instance','personal']},createdBy:{type:'string',format:'did'},lastUpdatedBy:{type:'string',format:'did'}}}}},ToolsOzoneSettingListOptions:{lexicon:1,id:'tools.ozone.setting.listOptions',defs:{main:{type:'query',description:'List settings with optional filtering',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'},scope:{type:'string',knownValues:['instance','personal'],default:'instance'},prefix:{type:'string',description:'Filter keys by prefix'},keys:{type:'array',maxLength:100,items:{type:'string',format:'nsid'},description:'Filter for only the specified keys. Ignored if prefix is provided'}}},output:{encoding:'application/json',schema:{type:'object',required:['options'],properties:{cursor:{type:'string'},options:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.setting.defs#option'}}}}}}}},ToolsOzoneSettingRemoveOptions:{lexicon:1,id:'tools.ozone.setting.removeOptions',defs:{main:{type:'procedure',description:'Delete settings by key',input:{encoding:'application/json',schema:{type:'object',required:['keys','scope'],properties:{keys:{type:'array',minLength:1,maxLength:200,items:{type:'string',format:'nsid'}},scope:{type:'string',knownValues:['instance','personal']}}}},output:{encoding:'application/json',schema:{type:'object',properties:{}}}}}},ToolsOzoneSettingUpsertOption:{lexicon:1,id:'tools.ozone.setting.upsertOption',defs:{main:{type:'procedure',description:'Create or update setting option',input:{encoding:'application/json',schema:{type:'object',required:['key','scope','value'],properties:{key:{type:'string',format:'nsid'},scope:{type:'string',knownValues:['instance','personal']},value:{type:'unknown'},description:{type:'string',maxLength:2000},managerRole:{type:'string',knownValues:['tools.ozone.team.defs#roleModerator','tools.ozone.team.defs#roleTriage','tools.ozone.team.defs#roleAdmin']}}}},output:{encoding:'application/json',schema:{type:'object',required:['option'],properties:{option:{type:'ref',ref:'lex:tools.ozone.setting.defs#option'}}}}}}},ToolsOzoneSignatureDefs:{lexicon:1,id:'tools.ozone.signature.defs',defs:{sigDetail:{type:'object',required:['property','value'],properties:{property:{type:'string'},value:{type:'string'}}}}},ToolsOzoneSignatureFindCorrelation:{lexicon:1,id:'tools.ozone.signature.findCorrelation',defs:{main:{type:'query',description:'Find all correlated threat signatures between 2 or more accounts.',parameters:{type:'params',required:['dids'],properties:{dids:{type:'array',items:{type:'string',format:'did'}}}},output:{encoding:'application/json',schema:{type:'object',required:['details'],properties:{details:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.signature.defs#sigDetail'}}}}}}}},ToolsOzoneSignatureFindRelatedAccounts:{lexicon:1,id:'tools.ozone.signature.findRelatedAccounts',defs:{main:{type:'query',description:'Get accounts that share some matching threat signatures with the root account.',parameters:{type:'params',required:['did'],properties:{did:{type:'string',format:'did'},cursor:{type:'string'},limit:{type:'integer',minimum:1,maximum:100,default:50}}},output:{encoding:'application/json',schema:{type:'object',required:['accounts'],properties:{cursor:{type:'string'},accounts:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.signature.findRelatedAccounts#relatedAccount'}}}}}},relatedAccount:{type:'object',required:['account'],properties:{account:{type:'ref',ref:'lex:com.atproto.admin.defs#accountView'},similarities:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.signature.defs#sigDetail'}}}}}},ToolsOzoneSignatureSearchAccounts:{lexicon:1,id:'tools.ozone.signature.searchAccounts',defs:{main:{type:'query',description:'Search for accounts that match one or more threat signature values.',parameters:{type:'params',required:['values'],properties:{values:{type:'array',items:{type:'string'}},cursor:{type:'string'},limit:{type:'integer',minimum:1,maximum:100,default:50}}},output:{encoding:'application/json',schema:{type:'object',required:['accounts'],properties:{cursor:{type:'string'},accounts:{type:'array',items:{type:'ref',ref:'lex:com.atproto.admin.defs#accountView'}}}}}}}},ToolsOzoneTeamAddMember:{lexicon:1,id:'tools.ozone.team.addMember',defs:{main:{type:'procedure',description:'Add a member to the ozone team. Requires admin role.',input:{encoding:'application/json',schema:{type:'object',required:['did','role'],properties:{did:{type:'string',format:'did'},role:{type:'string',knownValues:['tools.ozone.team.defs#roleAdmin','tools.ozone.team.defs#roleModerator','tools.ozone.team.defs#roleTriage']}}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.team.defs#member'}},errors:[{name:'MemberAlreadyExists',description:'Member already exists in the team.'}]}}},ToolsOzoneTeamDefs:{lexicon:1,id:'tools.ozone.team.defs',defs:{member:{type:'object',required:['did','role'],properties:{did:{type:'string',format:'did'},disabled:{type:'boolean'},profile:{type:'ref',ref:'lex:app.bsky.actor.defs#profileViewDetailed'},createdAt:{type:'string',format:'datetime'},updatedAt:{type:'string',format:'datetime'},lastUpdatedBy:{type:'string'},role:{type:'string',knownValues:['lex:tools.ozone.team.defs#roleAdmin','lex:tools.ozone.team.defs#roleModerator','lex:tools.ozone.team.defs#roleTriage']}}},roleAdmin:{type:'token',description:'Admin role. Highest level of access, can perform all actions.'},roleModerator:{type:'token',description:'Moderator role. Can perform most actions.'},roleTriage:{type:'token',description:'Triage role. Mostly intended for monitoring and escalating issues.'}}},ToolsOzoneTeamDeleteMember:{lexicon:1,id:'tools.ozone.team.deleteMember',defs:{main:{type:'procedure',description:'Delete a member from ozone team. Requires admin role.',input:{encoding:'application/json',schema:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'}}}},errors:[{name:'MemberNotFound',description:'The member being deleted does not exist'},{name:'CannotDeleteSelf',description:'You can not delete yourself from the team'}]}}},ToolsOzoneTeamListMembers:{lexicon:1,id:'tools.ozone.team.listMembers',defs:{main:{type:'query',description:'List all members with access to the ozone service.',parameters:{type:'params',properties:{limit:{type:'integer',minimum:1,maximum:100,default:50},cursor:{type:'string'}}},output:{encoding:'application/json',schema:{type:'object',required:['members'],properties:{cursor:{type:'string'},members:{type:'array',items:{type:'ref',ref:'lex:tools.ozone.team.defs#member'}}}}}}}},ToolsOzoneTeamUpdateMember:{lexicon:1,id:'tools.ozone.team.updateMember',defs:{main:{type:'procedure',description:'Update a member in the ozone service. Requires admin role.',input:{encoding:'application/json',schema:{type:'object',required:['did'],properties:{did:{type:'string',format:'did'},disabled:{type:'boolean'},role:{type:'string',knownValues:['tools.ozone.team.defs#roleAdmin','tools.ozone.team.defs#roleModerator','tools.ozone.team.defs#roleTriage']}}}},output:{encoding:'application/json',schema:{type:'ref',ref:'lex:tools.ozone.team.defs#member'}},errors:[{name:'MemberNotFound',description:'The member being updated does not exist in the team'}]}}}};exports.schemas=Object.values(exports.schemaDict);exports.lexicons=new lexicon_1.Lexicons(exports.schemas);exports.ids={ComAtprotoAdminDefs:'com.atproto.admin.defs',ComAtprotoAdminDeleteAccount:'com.atproto.admin.deleteAccount',ComAtprotoAdminDisableAccountInvites:'com.atproto.admin.disableAccountInvites',ComAtprotoAdminDisableInviteCodes:'com.atproto.admin.disableInviteCodes',ComAtprotoAdminEnableAccountInvites:'com.atproto.admin.enableAccountInvites',ComAtprotoAdminGetAccountInfo:'com.atproto.admin.getAccountInfo',ComAtprotoAdminGetAccountInfos:'com.atproto.admin.getAccountInfos',ComAtprotoAdminGetInviteCodes:'com.atproto.admin.getInviteCodes',ComAtprotoAdminGetSubjectStatus:'com.atproto.admin.getSubjectStatus',ComAtprotoAdminSearchAccounts:'com.atproto.admin.searchAccounts',ComAtprotoAdminSendEmail:'com.atproto.admin.sendEmail',ComAtprotoAdminUpdateAccountEmail:'com.atproto.admin.updateAccountEmail',ComAtprotoAdminUpdateAccountHandle:'com.atproto.admin.updateAccountHandle',ComAtprotoAdminUpdateAccountPassword:'com.atproto.admin.updateAccountPassword',ComAtprotoAdminUpdateSubjectStatus:'com.atproto.admin.updateSubjectStatus',ComAtprotoIdentityGetRecommendedDidCredentials:'com.atproto.identity.getRecommendedDidCredentials',ComAtprotoIdentityRequestPlcOperationSignature:'com.atproto.identity.requestPlcOperationSignature',ComAtprotoIdentityResolveHandle:'com.atproto.identity.resolveHandle',ComAtprotoIdentitySignPlcOperation:'com.atproto.identity.signPlcOperation',ComAtprotoIdentitySubmitPlcOperation:'com.atproto.identity.submitPlcOperation',ComAtprotoIdentityUpdateHandle:'com.atproto.identity.updateHandle',ComAtprotoLabelDefs:'com.atproto.label.defs',ComAtprotoLabelQueryLabels:'com.atproto.label.queryLabels',ComAtprotoLabelSubscribeLabels:'com.atproto.label.subscribeLabels',ComAtprotoModerationCreateReport:'com.atproto.moderation.createReport',ComAtprotoModerationDefs:'com.atproto.moderation.defs',ComAtprotoRepoApplyWrites:'com.atproto.repo.applyWrites',ComAtprotoRepoCreateRecord:'com.atproto.repo.createRecord',ComAtprotoRepoDefs:'com.atproto.repo.defs',ComAtprotoRepoDeleteRecord:'com.atproto.repo.deleteRecord',ComAtprotoRepoDescribeRepo:'com.atproto.repo.describeRepo',ComAtprotoRepoGetRecord:'com.atproto.repo.getRecord',ComAtprotoRepoImportRepo:'com.atproto.repo.importRepo',ComAtprotoRepoListMissingBlobs:'com.atproto.repo.listMissingBlobs',ComAtprotoRepoListRecords:'com.atproto.repo.listRecords',ComAtprotoRepoPutRecord:'com.atproto.repo.putRecord',ComAtprotoRepoStrongRef:'com.atproto.repo.strongRef',ComAtprotoRepoUploadBlob:'com.atproto.repo.uploadBlob',ComAtprotoServerActivateAccount:'com.atproto.server.activateAccount',ComAtprotoServerCheckAccountStatus:'com.atproto.server.checkAccountStatus',ComAtprotoServerConfirmEmail:'com.atproto.server.confirmEmail',ComAtprotoServerCreateAccount:'com.atproto.server.createAccount',ComAtprotoServerCreateAppPassword:'com.atproto.server.createAppPassword',ComAtprotoServerCreateInviteCode:'com.atproto.server.createInviteCode',ComAtprotoServerCreateInviteCodes:'com.atproto.server.createInviteCodes',ComAtprotoServerCreateSession:'com.atproto.server.createSession',ComAtprotoServerDeactivateAccount:'com.atproto.server.deactivateAccount',ComAtprotoServerDefs:'com.atproto.server.defs',ComAtprotoServerDeleteAccount:'com.atproto.server.deleteAccount',ComAtprotoServerDeleteSession:'com.atproto.server.deleteSession',ComAtprotoServerDescribeServer:'com.atproto.server.describeServer',ComAtprotoServerGetAccountInviteCodes:'com.atproto.server.getAccountInviteCodes',ComAtprotoServerGetServiceAuth:'com.atproto.server.getServiceAuth',ComAtprotoServerGetSession:'com.atproto.server.getSession',ComAtprotoServerListAppPasswords:'com.atproto.server.listAppPasswords',ComAtprotoServerRefreshSession:'com.atproto.server.refreshSession',ComAtprotoServerRequestAccountDelete:'com.atproto.server.requestAccountDelete',ComAtprotoServerRequestEmailConfirmation:'com.atproto.server.requestEmailConfirmation',ComAtprotoServerRequestEmailUpdate:'com.atproto.server.requestEmailUpdate',ComAtprotoServerRequestPasswordReset:'com.atproto.server.requestPasswordReset',ComAtprotoServerReserveSigningKey:'com.atproto.server.reserveSigningKey',ComAtprotoServerResetPassword:'com.atproto.server.resetPassword',ComAtprotoServerRevokeAppPassword:'com.atproto.server.revokeAppPassword',ComAtprotoServerUpdateEmail:'com.atproto.server.updateEmail',ComAtprotoSyncGetBlob:'com.atproto.sync.getBlob',ComAtprotoSyncGetBlocks:'com.atproto.sync.getBlocks',ComAtprotoSyncGetCheckout:'com.atproto.sync.getCheckout',ComAtprotoSyncGetHead:'com.atproto.sync.getHead',ComAtprotoSyncGetLatestCommit:'com.atproto.sync.getLatestCommit',ComAtprotoSyncGetRecord:'com.atproto.sync.getRecord',ComAtprotoSyncGetRepo:'com.atproto.sync.getRepo',ComAtprotoSyncGetRepoStatus:'com.atproto.sync.getRepoStatus',ComAtprotoSyncListBlobs:'com.atproto.sync.listBlobs',ComAtprotoSyncListRepos:'com.atproto.sync.listRepos',ComAtprotoSyncNotifyOfUpdate:'com.atproto.sync.notifyOfUpdate',ComAtprotoSyncRequestCrawl:'com.atproto.sync.requestCrawl',ComAtprotoSyncSubscribeRepos:'com.atproto.sync.subscribeRepos',ComAtprotoTempAddReservedHandle:'com.atproto.temp.addReservedHandle',ComAtprotoTempCheckSignupQueue:'com.atproto.temp.checkSignupQueue',ComAtprotoTempFetchLabels:'com.atproto.temp.fetchLabels',ComAtprotoTempRequestPhoneVerification:'com.atproto.temp.requestPhoneVerification',AppBskyActorDefs:'app.bsky.actor.defs',AppBskyActorGetPreferences:'app.bsky.actor.getPreferences',AppBskyActorGetProfile:'app.bsky.actor.getProfile',AppBskyActorGetProfiles:'app.bsky.actor.getProfiles',AppBskyActorGetSuggestions:'app.bsky.actor.getSuggestions',AppBskyActorProfile:'app.bsky.actor.profile',AppBskyActorPutPreferences:'app.bsky.actor.putPreferences',AppBskyActorSearchActors:'app.bsky.actor.searchActors',AppBskyActorSearchActorsTypeahead:'app.bsky.actor.searchActorsTypeahead',AppBskyEmbedDefs:'app.bsky.embed.defs',AppBskyEmbedExternal:'app.bsky.embed.external',AppBskyEmbedImages:'app.bsky.embed.images',AppBskyEmbedRecord:'app.bsky.embed.record',AppBskyEmbedRecordWithMedia:'app.bsky.embed.recordWithMedia',AppBskyEmbedVideo:'app.bsky.embed.video',AppBskyFeedDefs:'app.bsky.feed.defs',AppBskyFeedDescribeFeedGenerator:'app.bsky.feed.describeFeedGenerator',AppBskyFeedGenerator:'app.bsky.feed.generator',AppBskyFeedGetActorFeeds:'app.bsky.feed.getActorFeeds',AppBskyFeedGetActorLikes:'app.bsky.feed.getActorLikes',AppBskyFeedGetAuthorFeed:'app.bsky.feed.getAuthorFeed',AppBskyFeedGetFeed:'app.bsky.feed.getFeed',AppBskyFeedGetFeedGenerator:'app.bsky.feed.getFeedGenerator',AppBskyFeedGetFeedGenerators:'app.bsky.feed.getFeedGenerators',AppBskyFeedGetFeedSkeleton:'app.bsky.feed.getFeedSkeleton',AppBskyFeedGetLikes:'app.bsky.feed.getLikes',AppBskyFeedGetListFeed:'app.bsky.feed.getListFeed',AppBskyFeedGetPostThread:'app.bsky.feed.getPostThread',AppBskyFeedGetPosts:'app.bsky.feed.getPosts',AppBskyFeedGetQuotes:'app.bsky.feed.getQuotes',AppBskyFeedGetRepostedBy:'app.bsky.feed.getRepostedBy',AppBskyFeedGetSuggestedFeeds:'app.bsky.feed.getSuggestedFeeds',AppBskyFeedGetTimeline:'app.bsky.feed.getTimeline',AppBskyFeedLike:'app.bsky.feed.like',AppBskyFeedPost:'app.bsky.feed.post',AppBskyFeedPostgate:'app.bsky.feed.postgate',AppBskyFeedRepost:'app.bsky.feed.repost',AppBskyFeedSearchPosts:'app.bsky.feed.searchPosts',AppBskyFeedSendInteractions:'app.bsky.feed.sendInteractions',AppBskyFeedThreadgate:'app.bsky.feed.threadgate',AppBskyGraphBlock:'app.bsky.graph.block',AppBskyGraphDefs:'app.bsky.graph.defs',AppBskyGraphFollow:'app.bsky.graph.follow',AppBskyGraphGetActorStarterPacks:'app.bsky.graph.getActorStarterPacks',AppBskyGraphGetBlocks:'app.bsky.graph.getBlocks',AppBskyGraphGetFollowers:'app.bsky.graph.getFollowers',AppBskyGraphGetFollows:'app.bsky.graph.getFollows',AppBskyGraphGetKnownFollowers:'app.bsky.graph.getKnownFollowers',AppBskyGraphGetList:'app.bsky.graph.getList',AppBskyGraphGetListBlocks:'app.bsky.graph.getListBlocks',AppBskyGraphGetListMutes:'app.bsky.graph.getListMutes',AppBskyGraphGetLists:'app.bsky.graph.getLists',AppBskyGraphGetMutes:'app.bsky.graph.getMutes',AppBskyGraphGetRelationships:'app.bsky.graph.getRelationships',AppBskyGraphGetStarterPack:'app.bsky.graph.getStarterPack',AppBskyGraphGetStarterPacks:'app.bsky.graph.getStarterPacks',AppBskyGraphGetSuggestedFollowsByActor:'app.bsky.graph.getSuggestedFollowsByActor',AppBskyGraphList:'app.bsky.graph.list',AppBskyGraphListblock:'app.bsky.graph.listblock',AppBskyGraphListitem:'app.bsky.graph.listitem',AppBskyGraphMuteActor:'app.bsky.graph.muteActor',AppBskyGraphMuteActorList:'app.bsky.graph.muteActorList',AppBskyGraphMuteThread:'app.bsky.graph.muteThread',AppBskyGraphSearchStarterPacks:'app.bsky.graph.searchStarterPacks',AppBskyGraphStarterpack:'app.bsky.graph.starterpack',AppBskyGraphUnmuteActor:'app.bsky.graph.unmuteActor',AppBskyGraphUnmuteActorList:'app.bsky.graph.unmuteActorList',AppBskyGraphUnmuteThread:'app.bsky.graph.unmuteThread',AppBskyLabelerDefs:'app.bsky.labeler.defs',AppBskyLabelerGetServices:'app.bsky.labeler.getServices',AppBskyLabelerService:'app.bsky.labeler.service',AppBskyNotificationGetUnreadCount:'app.bsky.notification.getUnreadCount',AppBskyNotificationListNotifications:'app.bsky.notification.listNotifications',AppBskyNotificationPutPreferences:'app.bsky.notification.putPreferences',AppBskyNotificationRegisterPush:'app.bsky.notification.registerPush',AppBskyNotificationUpdateSeen:'app.bsky.notification.updateSeen',AppBskyRichtextFacet:'app.bsky.richtext.facet',AppBskyUnspeccedDefs:'app.bsky.unspecced.defs',AppBskyUnspeccedGetConfig:'app.bsky.unspecced.getConfig',AppBskyUnspeccedGetPopularFeedGenerators:'app.bsky.unspecced.getPopularFeedGenerators',AppBskyUnspeccedGetSuggestionsSkeleton:'app.bsky.unspecced.getSuggestionsSkeleton',AppBskyUnspeccedGetTaggedSuggestions:'app.bsky.unspecced.getTaggedSuggestions',AppBskyUnspeccedGetTrendingTopics:'app.bsky.unspecced.getTrendingTopics',AppBskyUnspeccedSearchActorsSkeleton:'app.bsky.unspecced.searchActorsSkeleton',AppBskyUnspeccedSearchPostsSkeleton:'app.bsky.unspecced.searchPostsSkeleton',AppBskyUnspeccedSearchStarterPacksSkeleton:'app.bsky.unspecced.searchStarterPacksSkeleton',AppBskyVideoDefs:'app.bsky.video.defs',AppBskyVideoGetJobStatus:'app.bsky.video.getJobStatus',AppBskyVideoGetUploadLimits:'app.bsky.video.getUploadLimits',AppBskyVideoUploadVideo:'app.bsky.video.uploadVideo',ChatBskyActorDeclaration:'chat.bsky.actor.declaration',ChatBskyActorDefs:'chat.bsky.actor.defs',ChatBskyActorDeleteAccount:'chat.bsky.actor.deleteAccount',ChatBskyActorExportAccountData:'chat.bsky.actor.exportAccountData',ChatBskyConvoDefs:'chat.bsky.convo.defs',ChatBskyConvoDeleteMessageForSelf:'chat.bsky.convo.deleteMessageForSelf',ChatBskyConvoGetConvo:'chat.bsky.convo.getConvo',ChatBskyConvoGetConvoForMembers:'chat.bsky.convo.getConvoForMembers',ChatBskyConvoGetLog:'chat.bsky.convo.getLog',ChatBskyConvoGetMessages:'chat.bsky.convo.getMessages',ChatBskyConvoLeaveConvo:'chat.bsky.convo.leaveConvo',ChatBskyConvoListConvos:'chat.bsky.convo.listConvos',ChatBskyConvoMuteConvo:'chat.bsky.convo.muteConvo',ChatBskyConvoSendMessage:'chat.bsky.convo.sendMessage',ChatBskyConvoSendMessageBatch:'chat.bsky.convo.sendMessageBatch',ChatBskyConvoUnmuteConvo:'chat.bsky.convo.unmuteConvo',ChatBskyConvoUpdateRead:'chat.bsky.convo.updateRead',ChatBskyModerationGetActorMetadata:'chat.bsky.moderation.getActorMetadata',ChatBskyModerationGetMessageContext:'chat.bsky.moderation.getMessageContext',ChatBskyModerationUpdateActorAccess:'chat.bsky.moderation.updateActorAccess',ToolsOzoneCommunicationCreateTemplate:'tools.ozone.communication.createTemplate',ToolsOzoneCommunicationDefs:'tools.ozone.communication.defs',ToolsOzoneCommunicationDeleteTemplate:'tools.ozone.communication.deleteTemplate',ToolsOzoneCommunicationListTemplates:'tools.ozone.communication.listTemplates',ToolsOzoneCommunicationUpdateTemplate:'tools.ozone.communication.updateTemplate',ToolsOzoneModerationDefs:'tools.ozone.moderation.defs',ToolsOzoneModerationEmitEvent:'tools.ozone.moderation.emitEvent',ToolsOzoneModerationGetEvent:'tools.ozone.moderation.getEvent',ToolsOzoneModerationGetRecord:'tools.ozone.moderation.getRecord',ToolsOzoneModerationGetRecords:'tools.ozone.moderation.getRecords',ToolsOzoneModerationGetRepo:'tools.ozone.moderation.getRepo',ToolsOzoneModerationGetRepos:'tools.ozone.moderation.getRepos',ToolsOzoneModerationQueryEvents:'tools.ozone.moderation.queryEvents',ToolsOzoneModerationQueryStatuses:'tools.ozone.moderation.queryStatuses',ToolsOzoneModerationSearchRepos:'tools.ozone.moderation.searchRepos',ToolsOzoneServerGetConfig:'tools.ozone.server.getConfig',ToolsOzoneSetAddValues:'tools.ozone.set.addValues',ToolsOzoneSetDefs:'tools.ozone.set.defs',ToolsOzoneSetDeleteSet:'tools.ozone.set.deleteSet',ToolsOzoneSetDeleteValues:'tools.ozone.set.deleteValues',ToolsOzoneSetGetValues:'tools.ozone.set.getValues',ToolsOzoneSetQuerySets:'tools.ozone.set.querySets',ToolsOzoneSetUpsertSet:'tools.ozone.set.upsertSet',ToolsOzoneSettingDefs:'tools.ozone.setting.defs',ToolsOzoneSettingListOptions:'tools.ozone.setting.listOptions',ToolsOzoneSettingRemoveOptions:'tools.ozone.setting.removeOptions',ToolsOzoneSettingUpsertOption:'tools.ozone.setting.upsertOption',ToolsOzoneSignatureDefs:'tools.ozone.signature.defs',ToolsOzoneSignatureFindCorrelation:'tools.ozone.signature.findCorrelation',ToolsOzoneSignatureFindRelatedAccounts:'tools.ozone.signature.findRelatedAccounts',ToolsOzoneSignatureSearchAccounts:'tools.ozone.signature.searchAccounts',ToolsOzoneTeamAddMember:'tools.ozone.team.addMember',ToolsOzoneTeamDefs:'tools.ozone.team.defs',ToolsOzoneTeamDeleteMember:'tools.ozone.team.deleteMember',ToolsOzoneTeamListMembers:'tools.ozone.team.listMembers',ToolsOzoneTeamUpdateMember:'tools.ozone.team.updateMember'};})(lexicons);return lexicons;}

var types$2 = {};

var hasRequiredTypes$2;
function requireTypes$2() {
  if (hasRequiredTypes$2) return types$2;
  hasRequiredTypes$2 = 1;
  Object.defineProperty(types$2, "__esModule", {
    value: true
  });
  return types$2;
}

var _const = {};

var hasRequired_const;
function require_const() {
  if (hasRequired_const) return _const;
  hasRequired_const = 1;
  Object.defineProperty(_const, "__esModule", {
    value: true
  });
  _const.BSKY_LABELER_DID = undefined;
  _const.BSKY_LABELER_DID = 'did:plc:ar7c4by46qjdydhdevvrndac';
  return _const;
}

var util$4 = {};

var hasRequiredUtil$4;
function requireUtil$4() {
  if (hasRequiredUtil$4) return util$4;
  hasRequiredUtil$4 = 1;
  (function (exports) {

    var __importDefault = util$4.__importDefault || function (mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.nuxSchema = exports.asDid = exports.isDid = undefined;
    exports.sanitizeMutedWordValue = sanitizeMutedWordValue;
    exports.savedFeedsToUriArrays = savedFeedsToUriArrays;
    exports.getSavedFeedType = getSavedFeedType;
    exports.validateSavedFeed = validateSavedFeed;
    exports.validateNux = validateNux;
    const syntax_1 = requireDist$5();
    const common_web_1 = requireDist$4();
    const zod_1 = __importDefault(/*@__PURE__*/requireLib$1());
    function sanitizeMutedWordValue(value) {
      return value.trim().replace(/^#(?!\ufe0f)/, '')
      // eslint-disable-next-line no-misleading-character-class
      .replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, '');
    }
    function savedFeedsToUriArrays(savedFeeds) {
      const pinned = [];
      const saved = [];
      for (const feed of savedFeeds) {
        if (feed.pinned) {
          pinned.push(feed.value);
          // saved in v1 includes pinned
          saved.push(feed.value);
        } else {
          saved.push(feed.value);
        }
      }
      return {
        pinned,
        saved
      };
    }
    /**
     * Get the type of a saved feed, used by deprecated methods for backwards
     * compat. Should not be used moving forward. *Invalid URIs will throw.*
     *
     * @param uri - The AT URI of the saved feed
     */
    function getSavedFeedType(uri) {
      const urip = new syntax_1.AtUri(uri);
      switch (urip.collection) {
        case 'app.bsky.feed.generator':
          return 'feed';
        case 'app.bsky.graph.list':
          return 'list';
        default:
          return 'unknown';
      }
    }
    function validateSavedFeed(savedFeed) {
      new common_web_1.TID(savedFeed.id);
      if (['feed', 'list'].includes(savedFeed.type)) {
        const uri = new syntax_1.AtUri(savedFeed.value);
        const isFeed = uri.collection === 'app.bsky.feed.generator';
        const isList = uri.collection === 'app.bsky.graph.list';
        if (savedFeed.type === 'feed' && !isFeed) {
          throw new Error(`Saved feed of type 'feed' must be a feed, got ${uri.collection}`);
        }
        if (savedFeed.type === 'list' && !isList) {
          throw new Error(`Saved feed of type 'list' must be a list, got ${uri.collection}`);
        }
      }
    }
    // @TODO use tools from @atproto/did
    const isDid = str => typeof str === 'string' && str.startsWith('did:') && str.includes(':', 4) && str.length > 8 && str.length <= 2048;
    exports.isDid = isDid;
    const asDid = value => {
      if ((0, exports.isDid)(value)) return value;
      throw new TypeError(`Invalid DID: ${value}`);
    };
    exports.asDid = asDid;
    exports.nuxSchema = zod_1.default.object({
      id: zod_1.default.string().max(64),
      completed: zod_1.default.boolean(),
      data: zod_1.default.string().max(300).optional(),
      expiresAt: zod_1.default.string().datetime().optional()
    }).strict();
    function validateNux(nux) {
      exports.nuxSchema.parse(nux);
    }
  })(util$4);
  return util$4;
}

var client$1 = {};

var dist = {};

var client = {};

var xrpcClient = {};

var fetchHandler = {};

var util$3 = {};

var types$1 = {};

var hasRequiredTypes$1;
function requireTypes$1() {
  if (hasRequiredTypes$1) return types$1;
  hasRequiredTypes$1 = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.XRPCInvalidResponseError = exports.XRPCError = exports.XRPCResponse = exports.ResponseTypeStrings = exports.ResponseTypeNames = exports.ResponseType = exports.errorResponseBody = undefined;
    exports.httpResponseCodeToEnum = httpResponseCodeToEnum;
    exports.httpResponseCodeToName = httpResponseCodeToName;
    exports.httpResponseCodeToString = httpResponseCodeToString;
    const zod_1 = /*@__PURE__*/requireLib$1();
    exports.errorResponseBody = zod_1.z.object({
      error: zod_1.z.string().optional(),
      message: zod_1.z.string().optional()
    });
    var ResponseType;
    (function (ResponseType) {
      ResponseType[ResponseType["Unknown"] = 1] = "Unknown";
      ResponseType[ResponseType["InvalidResponse"] = 2] = "InvalidResponse";
      ResponseType[ResponseType["Success"] = 200] = "Success";
      ResponseType[ResponseType["InvalidRequest"] = 400] = "InvalidRequest";
      ResponseType[ResponseType["AuthRequired"] = 401] = "AuthRequired";
      ResponseType[ResponseType["Forbidden"] = 403] = "Forbidden";
      ResponseType[ResponseType["XRPCNotSupported"] = 404] = "XRPCNotSupported";
      ResponseType[ResponseType["NotAcceptable"] = 406] = "NotAcceptable";
      ResponseType[ResponseType["PayloadTooLarge"] = 413] = "PayloadTooLarge";
      ResponseType[ResponseType["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
      ResponseType[ResponseType["RateLimitExceeded"] = 429] = "RateLimitExceeded";
      ResponseType[ResponseType["InternalServerError"] = 500] = "InternalServerError";
      ResponseType[ResponseType["MethodNotImplemented"] = 501] = "MethodNotImplemented";
      ResponseType[ResponseType["UpstreamFailure"] = 502] = "UpstreamFailure";
      ResponseType[ResponseType["NotEnoughResources"] = 503] = "NotEnoughResources";
      ResponseType[ResponseType["UpstreamTimeout"] = 504] = "UpstreamTimeout";
    })(ResponseType || (exports.ResponseType = ResponseType = {}));
    function httpResponseCodeToEnum(status) {
      if (status in ResponseType) {
        return status;
      } else if (status >= 100 && status < 200) {
        return ResponseType.XRPCNotSupported;
      } else if (status >= 200 && status < 300) {
        return ResponseType.Success;
      } else if (status >= 300 && status < 400) {
        return ResponseType.XRPCNotSupported;
      } else if (status >= 400 && status < 500) {
        return ResponseType.InvalidRequest;
      } else {
        return ResponseType.InternalServerError;
      }
    }
    exports.ResponseTypeNames = {
      [ResponseType.Unknown]: 'Unknown',
      [ResponseType.InvalidResponse]: 'InvalidResponse',
      [ResponseType.Success]: 'Success',
      [ResponseType.InvalidRequest]: 'InvalidRequest',
      [ResponseType.AuthRequired]: 'AuthenticationRequired',
      [ResponseType.Forbidden]: 'Forbidden',
      [ResponseType.XRPCNotSupported]: 'XRPCNotSupported',
      [ResponseType.PayloadTooLarge]: 'PayloadTooLarge',
      [ResponseType.UnsupportedMediaType]: 'UnsupportedMediaType',
      [ResponseType.RateLimitExceeded]: 'RateLimitExceeded',
      [ResponseType.InternalServerError]: 'InternalServerError',
      [ResponseType.MethodNotImplemented]: 'MethodNotImplemented',
      [ResponseType.UpstreamFailure]: 'UpstreamFailure',
      [ResponseType.NotEnoughResources]: 'NotEnoughResources',
      [ResponseType.UpstreamTimeout]: 'UpstreamTimeout'
    };
    function httpResponseCodeToName(status) {
      return exports.ResponseTypeNames[httpResponseCodeToEnum(status)];
    }
    exports.ResponseTypeStrings = {
      [ResponseType.Unknown]: 'Unknown',
      [ResponseType.InvalidResponse]: 'Invalid Response',
      [ResponseType.Success]: 'Success',
      [ResponseType.InvalidRequest]: 'Invalid Request',
      [ResponseType.AuthRequired]: 'Authentication Required',
      [ResponseType.Forbidden]: 'Forbidden',
      [ResponseType.XRPCNotSupported]: 'XRPC Not Supported',
      [ResponseType.PayloadTooLarge]: 'Payload Too Large',
      [ResponseType.UnsupportedMediaType]: 'Unsupported Media Type',
      [ResponseType.RateLimitExceeded]: 'Rate Limit Exceeded',
      [ResponseType.InternalServerError]: 'Internal Server Error',
      [ResponseType.MethodNotImplemented]: 'Method Not Implemented',
      [ResponseType.UpstreamFailure]: 'Upstream Failure',
      [ResponseType.NotEnoughResources]: 'Not Enough Resources',
      [ResponseType.UpstreamTimeout]: 'Upstream Timeout'
    };
    function httpResponseCodeToString(status) {
      return exports.ResponseTypeStrings[httpResponseCodeToEnum(status)];
    }
    class XRPCResponse {
      constructor(data, headers) {
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: data
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: headers
        });
        Object.defineProperty(this, "success", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: true
        });
      }
    }
    exports.XRPCResponse = XRPCResponse;
    class XRPCError extends Error {
      constructor(statusCode, error = httpResponseCodeToName(statusCode), message, headers, options) {
        super(message || error || httpResponseCodeToString(statusCode), options);
        Object.defineProperty(this, "error", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: error
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: headers
        });
        Object.defineProperty(this, "success", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: false
        });
        Object.defineProperty(this, "status", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: undefined
        });
        this.status = httpResponseCodeToEnum(statusCode);
        // Pre 2022 runtimes won't handle the "options" constructor argument
        const cause = options?.cause;
        if (this.cause === undefined && cause !== undefined) {
          this.cause = cause;
        }
      }
      static from(cause, fallbackStatus) {
        if (cause instanceof XRPCError) {
          return cause;
        }
        // Type cast the cause to an Error if it is one
        const causeErr = cause instanceof Error ? cause : undefined;
        // Try and find a Response object in the cause
        const causeResponse = cause instanceof Response ? cause : cause?.['response'] instanceof Response ? cause['response'] : undefined;
        const statusCode =
        // Extract status code from "http-errors" like errors
        causeErr?.['statusCode'] ?? causeErr?.['status'] ??
        // Use the status code from the response object as fallback
        causeResponse?.status;
        // Convert the status code to a ResponseType
        const status = typeof statusCode === 'number' ? httpResponseCodeToEnum(statusCode) : fallbackStatus ?? ResponseType.Unknown;
        const message = causeErr?.message ?? String(cause);
        const headers = causeResponse ? Object.fromEntries(causeResponse.headers.entries()) : undefined;
        return new XRPCError(status, undefined, message, headers, {
          cause
        });
      }
    }
    exports.XRPCError = XRPCError;
    class XRPCInvalidResponseError extends XRPCError {
      constructor(lexiconNsid, validationError, responseBody) {
        super(ResponseType.InvalidResponse, exports.ResponseTypeStrings[ResponseType.InvalidResponse], `The server gave an invalid response and may be out of date.`, undefined, {
          cause: validationError
        });
        Object.defineProperty(this, "lexiconNsid", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: lexiconNsid
        });
        Object.defineProperty(this, "validationError", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: validationError
        });
        Object.defineProperty(this, "responseBody", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: responseBody
        });
      }
    }
    exports.XRPCInvalidResponseError = XRPCInvalidResponseError;
  })(types$1);
  return types$1;
}

var hasRequiredUtil$3;
function requireUtil$3() {
  if (hasRequiredUtil$3) return util$3;
  hasRequiredUtil$3 = 1;
  Object.defineProperty(util$3, "__esModule", {
    value: true
  });
  util$3.isErrorResponseBody = isErrorResponseBody;
  util$3.getMethodSchemaHTTPMethod = getMethodSchemaHTTPMethod;
  util$3.constructMethodCallUri = constructMethodCallUri;
  util$3.constructMethodCallUrl = constructMethodCallUrl;
  util$3.encodeQueryParam = encodeQueryParam;
  util$3.constructMethodCallHeaders = constructMethodCallHeaders;
  util$3.combineHeaders = combineHeaders;
  util$3.isBodyInit = isBodyInit;
  util$3.isIterable = isIterable;
  util$3.encodeMethodCallBody = encodeMethodCallBody;
  util$3.httpResponseBodyParse = httpResponseBodyParse;
  const lexicon_1 = requireDist$2();
  const types_1 = requireTypes$1();
  const ReadableStream = globalThis.ReadableStream || class {
    constructor() {
      // This anonymous class will never pass any "instanceof" check and cannot
      // be instantiated.
      throw new Error('ReadableStream is not supported in this environment');
    }
  };
  function isErrorResponseBody(v) {
    return types_1.errorResponseBody.safeParse(v).success;
  }
  function getMethodSchemaHTTPMethod(schema) {
    if (schema.type === 'procedure') {
      return 'post';
    }
    return 'get';
  }
  function constructMethodCallUri(nsid, schema, serviceUri, params) {
    const uri = new URL(constructMethodCallUrl(nsid, schema, params), serviceUri);
    return uri.toString();
  }
  function constructMethodCallUrl(nsid, schema, params) {
    const pathname = `/xrpc/${encodeURIComponent(nsid)}`;
    if (!params) return pathname;
    const searchParams = [];
    for (const [key, value] of Object.entries(params)) {
      const paramSchema = schema.parameters?.properties?.[key];
      if (!paramSchema) {
        throw new Error(`Invalid query parameter: ${key}`);
      }
      if (value !== undefined) {
        if (paramSchema.type === 'array') {
          const values = Array.isArray(value) ? value : [value];
          for (const val of values) {
            searchParams.push([key, encodeQueryParam(paramSchema.items.type, val)]);
          }
        } else {
          searchParams.push([key, encodeQueryParam(paramSchema.type, value)]);
        }
      }
    }
    if (!searchParams.length) return pathname;
    return `${pathname}?${new URLSearchParams(searchParams).toString()}`;
  }
  function encodeQueryParam(type, value) {
    if (type === 'string' || type === 'unknown') {
      return String(value);
    }
    if (type === 'float') {
      return String(Number(value));
    } else if (type === 'integer') {
      return String(Number(value) | 0);
    } else if (type === 'boolean') {
      return value ? 'true' : 'false';
    } else if (type === 'datetime') {
      if (value instanceof Date) {
        return value.toISOString();
      }
      return String(value);
    }
    throw new Error(`Unsupported query param type: ${type}`);
  }
  function constructMethodCallHeaders(schema, data, opts) {
    // Not using `new Headers(opts?.headers)` to avoid duplicating headers values
    // due to inconsistent casing in headers name. In case of multiple headers
    // with the same name (but using a different case), the last one will be used.
    // new Headers({ 'content-type': 'foo', 'Content-Type': 'bar' }).get('content-type')
    // => 'foo, bar'
    const headers = new Headers();
    if (opts?.headers) {
      for (const name in opts.headers) {
        if (headers.has(name)) {
          throw new TypeError(`Duplicate header: ${name}`);
        }
        const value = opts.headers[name];
        if (value != null) {
          headers.set(name, value);
        }
      }
    }
    if (schema.type === 'procedure') {
      if (opts?.encoding) {
        headers.set('content-type', opts.encoding);
      } else if (!headers.has('content-type') && typeof data !== 'undefined') {
        // Special handling of BodyInit types before falling back to JSON encoding
        if (data instanceof ArrayBuffer || data instanceof ReadableStream || ArrayBuffer.isView(data)) {
          headers.set('content-type', 'application/octet-stream');
        } else if (data instanceof FormData) {
          // Note: The multipart form data boundary is missing from the header
          // we set here, making that header invalid. This special case will be
          // handled in encodeMethodCallBody()
          headers.set('content-type', 'multipart/form-data');
        } else if (data instanceof URLSearchParams) {
          headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        } else if (isBlobLike(data)) {
          headers.set('content-type', data.type || 'application/octet-stream');
        } else if (typeof data === 'string') {
          headers.set('content-type', 'text/plain;charset=UTF-8');
        }
        // At this point, data is not a valid BodyInit type.
        else if (isIterable(data)) {
          headers.set('content-type', 'application/octet-stream');
        } else if (typeof data === 'boolean' || typeof data === 'number' || typeof data === 'string' || typeof data === 'object' // covers "null"
        ) {
          headers.set('content-type', 'application/json');
        } else {
          // symbol, function, bigint
          throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unsupported data type: ${typeof data}`);
        }
      }
    }
    return headers;
  }
  function combineHeaders(headersInit, defaultHeaders) {
    if (!defaultHeaders) return headersInit;
    let headers = undefined;
    for (const [name, definition] of defaultHeaders) {
      // Ignore undefined values (allowed for convenience when using
      // Object.entries).
      if (definition === undefined) continue;
      // Lazy initialization of the headers object
      headers ?? (headers = new Headers(headersInit));
      if (headers.has(name)) continue;
      const value = typeof definition === 'function' ? definition() : definition;
      if (typeof value === 'string') headers.set(name, value);else if (value === null) headers.delete(name);else throw new TypeError(`Invalid "${name}" header value: ${typeof value}`);
    }
    return headers ?? headersInit;
  }
  function isBlobLike(value) {
    if (value == null) return false;
    if (typeof value !== 'object') return false;
    if (typeof Blob === 'function' && value instanceof Blob) return true;
    // Support for Blobs provided by libraries that don't use the native Blob
    // (e.g. fetch-blob from node-fetch).
    // https://github.com/node-fetch/fetch-blob/blob/a1a182e5978811407bef4ea1632b517567dda01f/index.js#L233-L244
    const tag = value[Symbol.toStringTag];
    if (tag === 'Blob' || tag === 'File') {
      return 'stream' in value && typeof value.stream === 'function';
    }
    return false;
  }
  function isBodyInit(value) {
    switch (typeof value) {
      case 'string':
        return true;
      case 'object':
        return value instanceof ArrayBuffer || value instanceof FormData || value instanceof URLSearchParams || value instanceof ReadableStream || ArrayBuffer.isView(value) || isBlobLike(value);
      default:
        return false;
    }
  }
  function isIterable(value) {
    return value != null && typeof value === 'object' && (Symbol.iterator in value || Symbol.asyncIterator in value);
  }
  function encodeMethodCallBody(headers, data) {
    // Silently ignore the body if there is no content-type header.
    const contentType = headers.get('content-type');
    if (!contentType) {
      return undefined;
    }
    if (typeof data === 'undefined') {
      // This error would be returned by the server, but we can catch it earlier
      // to avoid un-necessary requests. Note that a content-length of 0 does not
      // necessary mean that the body is "empty" (e.g. an empty txt file).
      throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `A request body is expected but none was provided`);
    }
    if (isBodyInit(data)) {
      if (data instanceof FormData && contentType === 'multipart/form-data') {
        // fetch() will encode FormData payload itself, but it won't override the
        // content-type header if already present. This would cause the boundary
        // to be missing from the content-type header, resulting in a 400 error.
        // Deleting the content-type header here to let fetch() re-create it.
        headers.delete('content-type');
      }
      // Will be encoded by the fetch API.
      return data;
    }
    if (isIterable(data)) {
      // Note that some environments support using Iterable & AsyncIterable as the
      // body (e.g. Node's fetch), but not all of them do (browsers).
      return iterableToReadableStream(data);
    }
    if (contentType.startsWith('text/')) {
      return new TextEncoder().encode(String(data));
    }
    if (contentType.startsWith('application/json')) {
      const json = (0, lexicon_1.stringifyLex)(data);
      // Server would return a 400 error if the JSON is invalid (e.g. trying to
      // JSONify a function, or an object that implements toJSON() poorly).
      if (json === undefined) {
        throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Failed to encode request body as JSON`);
      }
      return new TextEncoder().encode(json);
    }
    // At this point, "data" is not a valid BodyInit value, and we don't know how
    // to encode it into one. Passing it to fetch would result in an error. Let's
    // throw our own error instead.
    const type = !data || typeof data !== 'object' ? typeof data : data.constructor !== Object && typeof data.constructor === 'function' && typeof data.constructor?.name === 'string' ? data.constructor.name : 'object';
    throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unable to encode ${type} as ${contentType} data`);
  }
  /**
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/from_static}
   */
  function iterableToReadableStream(iterable) {
    // Use the native ReadableStream.from() if available.
    if ('from' in ReadableStream && typeof ReadableStream.from === 'function') {
      return ReadableStream.from(iterable);
    }
    // If you see this error, consider using a polyfill for ReadableStream. For
    // example, the "web-streams-polyfill" package:
    // https://github.com/MattiasBuelens/web-streams-polyfill
    throw new TypeError('ReadableStream.from() is not supported in this environment. ' + 'It is required to support using iterables as the request body. ' + 'Consider using a polyfill or re-write your code to use a different body type.');
  }
  function httpResponseBodyParse(mimeType, data) {
    try {
      if (mimeType) {
        if (mimeType.includes('application/json')) {
          const str = new TextDecoder().decode(data);
          return (0, lexicon_1.jsonStringToLex)(str);
        }
        if (mimeType.startsWith('text/')) {
          return new TextDecoder().decode(data);
        }
      }
      if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
      }
      return data;
    } catch (cause) {
      throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, undefined, `Failed to parse response body: ${String(cause)}`, undefined, {
        cause
      });
    }
  }
  return util$3;
}

var hasRequiredFetchHandler;
function requireFetchHandler() {
  if (hasRequiredFetchHandler) return fetchHandler;
  hasRequiredFetchHandler = 1;
  Object.defineProperty(fetchHandler, "__esModule", {
    value: true
  });
  fetchHandler.buildFetchHandler = buildFetchHandler;
  const util_1 = requireUtil$3();
  function buildFetchHandler(options) {
    // Already a fetch handler (allowed for convenience)
    if (typeof options === 'function') return options;
    if (typeof options === 'object' && 'fetchHandler' in options) {
      return options.fetchHandler.bind(options);
    }
    const {
      service,
      headers: defaultHeaders = undefined,
      fetch = globalThis.fetch
    } = typeof options === 'string' || options instanceof URL ? {
      service: options
    } : options;
    if (typeof fetch !== 'function') {
      throw new TypeError('XrpcDispatcher requires fetch() to be available in your environment.');
    }
    const defaultHeadersEntries = defaultHeaders != null ? Object.entries(defaultHeaders) : undefined;
    return async function (url, init) {
      const base = typeof service === 'function' ? service() : service;
      const fullUrl = new URL(url, base);
      const headers = (0, util_1.combineHeaders)(init.headers, defaultHeadersEntries);
      return fetch(fullUrl, {
        ...init,
        headers
      });
    };
  }
  return fetchHandler;
}

var hasRequiredXrpcClient;
function requireXrpcClient() {
  if (hasRequiredXrpcClient) return xrpcClient;
  hasRequiredXrpcClient = 1;
  Object.defineProperty(xrpcClient, "__esModule", {
    value: true
  });
  xrpcClient.XrpcClient = undefined;
  const lexicon_1 = requireDist$2();
  const fetch_handler_1 = requireFetchHandler();
  const types_1 = requireTypes$1();
  const util_1 = requireUtil$3();
  class XrpcClient {
    constructor(fetchHandlerOpts,
    // "Lexicons" is redundant here (because that class implements
    // "Iterable<LexiconDoc>") but we keep it for explicitness:
    lex) {
      Object.defineProperty(this, "fetchHandler", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "headers", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, "lex", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this.fetchHandler = (0, fetch_handler_1.buildFetchHandler)(fetchHandlerOpts);
      this.lex = lex instanceof lexicon_1.Lexicons ? lex : new lexicon_1.Lexicons(lex);
    }
    setHeader(key, value) {
      this.headers.set(key.toLowerCase(), value);
    }
    unsetHeader(key) {
      this.headers.delete(key.toLowerCase());
    }
    clearHeaders() {
      this.headers.clear();
    }
    async call(methodNsid, params, data, opts) {
      const def = this.lex.getDefOrThrow(methodNsid);
      if (!def || def.type !== 'query' && def.type !== 'procedure') {
        throw new TypeError(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
      }
      // @TODO: should we validate the params and data here?
      // this.lex.assertValidXrpcParams(methodNsid, params)
      // if (data !== undefined) {
      //   this.lex.assertValidXrpcInput(methodNsid, data)
      // }
      const reqUrl = (0, util_1.constructMethodCallUrl)(methodNsid, def, params);
      const reqMethod = (0, util_1.getMethodSchemaHTTPMethod)(def);
      const reqHeaders = (0, util_1.constructMethodCallHeaders)(def, data, opts);
      const reqBody = (0, util_1.encodeMethodCallBody)(reqHeaders, data);
      // The duplex field is required for streaming bodies, but not yet reflected
      // anywhere in docs or types. See whatwg/fetch#1438, nodejs/node#46221.
      const init = {
        method: reqMethod,
        headers: (0, util_1.combineHeaders)(reqHeaders, this.headers),
        body: reqBody,
        duplex: 'half',
        signal: opts?.signal
      };
      try {
        const response = await this.fetchHandler.call(undefined, reqUrl, init);
        const resStatus = response.status;
        const resHeaders = Object.fromEntries(response.headers.entries());
        const resBodyBytes = await response.arrayBuffer();
        const resBody = (0, util_1.httpResponseBodyParse)(response.headers.get('content-type'), resBodyBytes);
        const resCode = (0, types_1.httpResponseCodeToEnum)(resStatus);
        if (resCode !== types_1.ResponseType.Success) {
          const {
            error = undefined,
            message = undefined
          } = resBody && (0, util_1.isErrorResponseBody)(resBody) ? resBody : {};
          throw new types_1.XRPCError(resCode, error, message, resHeaders);
        }
        try {
          this.lex.assertValidXrpcOutput(methodNsid, resBody);
        } catch (e) {
          if (e instanceof lexicon_1.ValidationError) {
            throw new types_1.XRPCInvalidResponseError(methodNsid, e, resBody);
          }
          throw e;
        }
        return new types_1.XRPCResponse(resBody, resHeaders);
      } catch (err) {
        throw types_1.XRPCError.from(err);
      }
    }
  }
  xrpcClient.XrpcClient = XrpcClient;
  return xrpcClient;
}

var hasRequiredClient$1;
function requireClient$1() {
  if (hasRequiredClient$1) return client;
  hasRequiredClient$1 = 1;
  Object.defineProperty(client, "__esModule", {
    value: true
  });
  client.ServiceClient = client.Client = undefined;
  const lexicon_1 = requireDist$2();
  const xrpc_client_1 = requireXrpcClient();
  const util_1 = requireUtil$3();
  /** @deprecated Use {@link XrpcClient} instead */
  class Client {
    constructor() {
      Object.defineProperty(this, "lex", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new lexicon_1.Lexicons()
      });
    }
    /** @deprecated */
    get fetch() {
      throw new Error('Client.fetch is no longer supported. Use an XrpcClient instead.');
    }
    /** @deprecated */
    set fetch(_) {
      throw new Error('Client.fetch is no longer supported. Use an XrpcClient instead.');
    }
    // method calls
    //
    async call(serviceUri, methodNsid, params, data, opts) {
      return this.service(serviceUri).call(methodNsid, params, data, opts);
    }
    service(serviceUri) {
      return new ServiceClient(this, serviceUri);
    }
    // schemas
    // =
    addLexicon(doc) {
      this.lex.add(doc);
    }
    addLexicons(docs) {
      for (const doc of docs) {
        this.addLexicon(doc);
      }
    }
    removeLexicon(uri) {
      this.lex.remove(uri);
    }
  }
  client.Client = Client;
  /** @deprecated Use {@link XrpcClient} instead */
  class ServiceClient extends xrpc_client_1.XrpcClient {
    constructor(baseClient, serviceUri) {
      super(async (input, init) => {
        const headers = (0, util_1.combineHeaders)(init.headers, Object.entries(this.headers));
        return fetch(new URL(input, this.uri), {
          ...init,
          headers
        });
      }, baseClient.lex);
      Object.defineProperty(this, "baseClient", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: baseClient
      });
      Object.defineProperty(this, "uri", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this.uri = typeof serviceUri === 'string' ? new URL(serviceUri) : serviceUri;
    }
  }
  client.ServiceClient = ServiceClient;
  return client;
}

var hasRequiredDist$1;
function requireDist$1() {
  if (hasRequiredDist$1) return dist;
  hasRequiredDist$1 = 1;
  (function (exports) {

    var __createBinding = dist.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = dist.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    __exportStar(requireClient$1(), exports);
    __exportStar(requireFetchHandler(), exports);
    __exportStar(requireTypes$1(), exports);
    __exportStar(requireUtil$3(), exports);
    __exportStar(requireXrpcClient(), exports);
    const client_1 = requireClient$1();
    /** @deprecated create a local {@link XrpcClient} instance instead */
    const defaultInst = new client_1.Client();
    exports.default = defaultInst;
  })(dist);
  return dist;
}

var applyWrites = {};

var util$2 = {};

var hasRequiredUtil$2;
function requireUtil$2() {
  if (hasRequiredUtil$2) return util$2;
  hasRequiredUtil$2 = 1;
  Object.defineProperty(util$2, "__esModule", {
    value: true
  });
  util$2.isObj = isObj;
  util$2.hasProp = hasProp;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  function isObj(v) {
    return typeof v === 'object' && v !== null;
  }
  function hasProp(data, prop) {
    return prop in data;
  }
  return util$2;
}

var hasRequiredApplyWrites;
function requireApplyWrites() {
  if (hasRequiredApplyWrites) return applyWrites;
  hasRequiredApplyWrites = 1;
  Object.defineProperty(applyWrites, "__esModule", {
    value: true
  });
  applyWrites.InvalidSwapError = undefined;
  applyWrites.toKnownErr = toKnownErr;
  applyWrites.isCreate = isCreate;
  applyWrites.validateCreate = validateCreate;
  applyWrites.isUpdate = isUpdate;
  applyWrites.validateUpdate = validateUpdate;
  applyWrites.isDelete = isDelete;
  applyWrites.validateDelete = validateDelete;
  applyWrites.isCreateResult = isCreateResult;
  applyWrites.validateCreateResult = validateCreateResult;
  applyWrites.isUpdateResult = isUpdateResult;
  applyWrites.validateUpdateResult = validateUpdateResult;
  applyWrites.isDeleteResult = isDeleteResult;
  applyWrites.validateDeleteResult = validateDeleteResult;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  applyWrites.InvalidSwapError = InvalidSwapError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
  }
  function isCreate(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#create';
  }
  function validateCreate(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#create', v);
  }
  function isUpdate(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#update';
  }
  function validateUpdate(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#update', v);
  }
  function isDelete(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#delete';
  }
  function validateDelete(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#delete', v);
  }
  function isCreateResult(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#createResult';
  }
  function validateCreateResult(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#createResult', v);
  }
  function isUpdateResult(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#updateResult';
  }
  function validateUpdateResult(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#updateResult', v);
  }
  function isDeleteResult(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.applyWrites#deleteResult';
  }
  function validateDeleteResult(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.applyWrites#deleteResult', v);
  }
  return applyWrites;
}

var createRecord = {};

var hasRequiredCreateRecord;
function requireCreateRecord() {
  if (hasRequiredCreateRecord) return createRecord;
  hasRequiredCreateRecord = 1;
  Object.defineProperty(createRecord, "__esModule", {
    value: true
  });
  createRecord.InvalidSwapError = undefined;
  createRecord.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createRecord.InvalidSwapError = InvalidSwapError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
  }
  return createRecord;
}

var deleteRecord = {};

var hasRequiredDeleteRecord;
function requireDeleteRecord() {
  if (hasRequiredDeleteRecord) return deleteRecord;
  hasRequiredDeleteRecord = 1;
  Object.defineProperty(deleteRecord, "__esModule", {
    value: true
  });
  deleteRecord.InvalidSwapError = undefined;
  deleteRecord.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  deleteRecord.InvalidSwapError = InvalidSwapError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
  }
  return deleteRecord;
}

var getRecord$2 = {};

var hasRequiredGetRecord$2;
function requireGetRecord$2() {
  if (hasRequiredGetRecord$2) return getRecord$2;
  hasRequiredGetRecord$2 = 1;
  Object.defineProperty(getRecord$2, "__esModule", {
    value: true
  });
  getRecord$2.RecordNotFoundError = undefined;
  getRecord$2.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRecord$2.RecordNotFoundError = RecordNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
    }
    return e;
  }
  return getRecord$2;
}

var putRecord = {};

var hasRequiredPutRecord;
function requirePutRecord() {
  if (hasRequiredPutRecord) return putRecord;
  hasRequiredPutRecord = 1;
  Object.defineProperty(putRecord, "__esModule", {
    value: true
  });
  putRecord.InvalidSwapError = undefined;
  putRecord.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  putRecord.InvalidSwapError = InvalidSwapError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
  }
  return putRecord;
}

var confirmEmail = {};

var hasRequiredConfirmEmail;
function requireConfirmEmail() {
  if (hasRequiredConfirmEmail) return confirmEmail;
  hasRequiredConfirmEmail = 1;
  Object.defineProperty(confirmEmail, "__esModule", {
    value: true
  });
  confirmEmail.InvalidEmailError = confirmEmail.InvalidTokenError = confirmEmail.ExpiredTokenError = confirmEmail.AccountNotFoundError = undefined;
  confirmEmail.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class AccountNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  confirmEmail.AccountNotFoundError = AccountNotFoundError;
  class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  confirmEmail.ExpiredTokenError = ExpiredTokenError;
  class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  confirmEmail.InvalidTokenError = InvalidTokenError;
  class InvalidEmailError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  confirmEmail.InvalidEmailError = InvalidEmailError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'AccountNotFound') return new AccountNotFoundError(e);
      if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
      if (e.error === 'InvalidToken') return new InvalidTokenError(e);
      if (e.error === 'InvalidEmail') return new InvalidEmailError(e);
    }
    return e;
  }
  return confirmEmail;
}

var createAccount = {};

var hasRequiredCreateAccount;
function requireCreateAccount() {
  if (hasRequiredCreateAccount) return createAccount;
  hasRequiredCreateAccount = 1;
  Object.defineProperty(createAccount, "__esModule", {
    value: true
  });
  createAccount.IncompatibleDidDocError = createAccount.UnresolvableDidError = createAccount.UnsupportedDomainError = createAccount.HandleNotAvailableError = createAccount.InvalidInviteCodeError = createAccount.InvalidPasswordError = createAccount.InvalidHandleError = undefined;
  createAccount.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class InvalidHandleError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createAccount.InvalidHandleError = InvalidHandleError;
  class InvalidPasswordError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createAccount.InvalidPasswordError = InvalidPasswordError;
  class InvalidInviteCodeError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createAccount.InvalidInviteCodeError = InvalidInviteCodeError;
  class HandleNotAvailableError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createAccount.HandleNotAvailableError = HandleNotAvailableError;
  class UnsupportedDomainError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createAccount.UnsupportedDomainError = UnsupportedDomainError;
  class UnresolvableDidError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createAccount.UnresolvableDidError = UnresolvableDidError;
  class IncompatibleDidDocError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createAccount.IncompatibleDidDocError = IncompatibleDidDocError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'InvalidHandle') return new InvalidHandleError(e);
      if (e.error === 'InvalidPassword') return new InvalidPasswordError(e);
      if (e.error === 'InvalidInviteCode') return new InvalidInviteCodeError(e);
      if (e.error === 'HandleNotAvailable') return new HandleNotAvailableError(e);
      if (e.error === 'UnsupportedDomain') return new UnsupportedDomainError(e);
      if (e.error === 'UnresolvableDid') return new UnresolvableDidError(e);
      if (e.error === 'IncompatibleDidDoc') return new IncompatibleDidDocError(e);
    }
    return e;
  }
  return createAccount;
}

var createAppPassword = {};

var hasRequiredCreateAppPassword;
function requireCreateAppPassword() {
  if (hasRequiredCreateAppPassword) return createAppPassword;
  hasRequiredCreateAppPassword = 1;
  Object.defineProperty(createAppPassword, "__esModule", {
    value: true
  });
  createAppPassword.AccountTakedownError = undefined;
  createAppPassword.toKnownErr = toKnownErr;
  createAppPassword.isAppPassword = isAppPassword;
  createAppPassword.validateAppPassword = validateAppPassword;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createAppPassword.AccountTakedownError = AccountTakedownError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
  }
  function isAppPassword(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.createAppPassword#appPassword';
  }
  function validateAppPassword(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.createAppPassword#appPassword', v);
  }
  return createAppPassword;
}

var createSession = {};

var hasRequiredCreateSession;
function requireCreateSession() {
  if (hasRequiredCreateSession) return createSession;
  hasRequiredCreateSession = 1;
  Object.defineProperty(createSession, "__esModule", {
    value: true
  });
  createSession.AuthFactorTokenRequiredError = createSession.AccountTakedownError = undefined;
  createSession.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createSession.AccountTakedownError = AccountTakedownError;
  class AuthFactorTokenRequiredError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createSession.AuthFactorTokenRequiredError = AuthFactorTokenRequiredError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
      if (e.error === 'AuthFactorTokenRequired') return new AuthFactorTokenRequiredError(e);
    }
    return e;
  }
  return createSession;
}

var deleteAccount$2 = {};

var hasRequiredDeleteAccount$2;
function requireDeleteAccount$2() {
  if (hasRequiredDeleteAccount$2) return deleteAccount$2;
  hasRequiredDeleteAccount$2 = 1;
  Object.defineProperty(deleteAccount$2, "__esModule", {
    value: true
  });
  deleteAccount$2.InvalidTokenError = deleteAccount$2.ExpiredTokenError = undefined;
  deleteAccount$2.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  deleteAccount$2.ExpiredTokenError = ExpiredTokenError;
  class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  deleteAccount$2.InvalidTokenError = InvalidTokenError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
      if (e.error === 'InvalidToken') return new InvalidTokenError(e);
    }
    return e;
  }
  return deleteAccount$2;
}

var getAccountInviteCodes = {};

var hasRequiredGetAccountInviteCodes;
function requireGetAccountInviteCodes() {
  if (hasRequiredGetAccountInviteCodes) return getAccountInviteCodes;
  hasRequiredGetAccountInviteCodes = 1;
  Object.defineProperty(getAccountInviteCodes, "__esModule", {
    value: true
  });
  getAccountInviteCodes.DuplicateCreateError = undefined;
  getAccountInviteCodes.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class DuplicateCreateError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getAccountInviteCodes.DuplicateCreateError = DuplicateCreateError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'DuplicateCreate') return new DuplicateCreateError(e);
    }
    return e;
  }
  return getAccountInviteCodes;
}

var getServiceAuth = {};

var hasRequiredGetServiceAuth;
function requireGetServiceAuth() {
  if (hasRequiredGetServiceAuth) return getServiceAuth;
  hasRequiredGetServiceAuth = 1;
  Object.defineProperty(getServiceAuth, "__esModule", {
    value: true
  });
  getServiceAuth.BadExpirationError = undefined;
  getServiceAuth.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BadExpirationError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getServiceAuth.BadExpirationError = BadExpirationError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BadExpiration') return new BadExpirationError(e);
    }
    return e;
  }
  return getServiceAuth;
}

var listAppPasswords = {};

var hasRequiredListAppPasswords;
function requireListAppPasswords() {
  if (hasRequiredListAppPasswords) return listAppPasswords;
  hasRequiredListAppPasswords = 1;
  Object.defineProperty(listAppPasswords, "__esModule", {
    value: true
  });
  listAppPasswords.AccountTakedownError = undefined;
  listAppPasswords.toKnownErr = toKnownErr;
  listAppPasswords.isAppPassword = isAppPassword;
  listAppPasswords.validateAppPassword = validateAppPassword;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  listAppPasswords.AccountTakedownError = AccountTakedownError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
  }
  function isAppPassword(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.listAppPasswords#appPassword';
  }
  function validateAppPassword(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.listAppPasswords#appPassword', v);
  }
  return listAppPasswords;
}

var refreshSession = {};

var hasRequiredRefreshSession;
function requireRefreshSession() {
  if (hasRequiredRefreshSession) return refreshSession;
  hasRequiredRefreshSession = 1;
  Object.defineProperty(refreshSession, "__esModule", {
    value: true
  });
  refreshSession.AccountTakedownError = undefined;
  refreshSession.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  refreshSession.AccountTakedownError = AccountTakedownError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
  }
  return refreshSession;
}

var resetPassword = {};

var hasRequiredResetPassword;
function requireResetPassword() {
  if (hasRequiredResetPassword) return resetPassword;
  hasRequiredResetPassword = 1;
  Object.defineProperty(resetPassword, "__esModule", {
    value: true
  });
  resetPassword.InvalidTokenError = resetPassword.ExpiredTokenError = undefined;
  resetPassword.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  resetPassword.ExpiredTokenError = ExpiredTokenError;
  class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  resetPassword.InvalidTokenError = InvalidTokenError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
      if (e.error === 'InvalidToken') return new InvalidTokenError(e);
    }
    return e;
  }
  return resetPassword;
}

var updateEmail = {};

var hasRequiredUpdateEmail;
function requireUpdateEmail() {
  if (hasRequiredUpdateEmail) return updateEmail;
  hasRequiredUpdateEmail = 1;
  Object.defineProperty(updateEmail, "__esModule", {
    value: true
  });
  updateEmail.TokenRequiredError = updateEmail.InvalidTokenError = updateEmail.ExpiredTokenError = undefined;
  updateEmail.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  updateEmail.ExpiredTokenError = ExpiredTokenError;
  class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  updateEmail.InvalidTokenError = InvalidTokenError;
  class TokenRequiredError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  updateEmail.TokenRequiredError = TokenRequiredError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
      if (e.error === 'InvalidToken') return new InvalidTokenError(e);
      if (e.error === 'TokenRequired') return new TokenRequiredError(e);
    }
    return e;
  }
  return updateEmail;
}

var getBlob = {};

var hasRequiredGetBlob;
function requireGetBlob() {
  if (hasRequiredGetBlob) return getBlob;
  hasRequiredGetBlob = 1;
  Object.defineProperty(getBlob, "__esModule", {
    value: true
  });
  getBlob.RepoDeactivatedError = getBlob.RepoSuspendedError = getBlob.RepoTakendownError = getBlob.RepoNotFoundError = getBlob.BlobNotFoundError = undefined;
  getBlob.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BlobNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlob.BlobNotFoundError = BlobNotFoundError;
  class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlob.RepoNotFoundError = RepoNotFoundError;
  class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlob.RepoTakendownError = RepoTakendownError;
  class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlob.RepoSuspendedError = RepoSuspendedError;
  class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlob.RepoDeactivatedError = RepoDeactivatedError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BlobNotFound') return new BlobNotFoundError(e);
      if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
      if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
      if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
      if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
  }
  return getBlob;
}

var getBlocks$1 = {};

var hasRequiredGetBlocks$1;
function requireGetBlocks$1() {
  if (hasRequiredGetBlocks$1) return getBlocks$1;
  hasRequiredGetBlocks$1 = 1;
  Object.defineProperty(getBlocks$1, "__esModule", {
    value: true
  });
  getBlocks$1.RepoDeactivatedError = getBlocks$1.RepoSuspendedError = getBlocks$1.RepoTakendownError = getBlocks$1.RepoNotFoundError = getBlocks$1.BlockNotFoundError = undefined;
  getBlocks$1.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BlockNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlocks$1.BlockNotFoundError = BlockNotFoundError;
  class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlocks$1.RepoNotFoundError = RepoNotFoundError;
  class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlocks$1.RepoTakendownError = RepoTakendownError;
  class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlocks$1.RepoSuspendedError = RepoSuspendedError;
  class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getBlocks$1.RepoDeactivatedError = RepoDeactivatedError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BlockNotFound') return new BlockNotFoundError(e);
      if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
      if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
      if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
      if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
  }
  return getBlocks$1;
}

var getHead = {};

var hasRequiredGetHead;
function requireGetHead() {
  if (hasRequiredGetHead) return getHead;
  hasRequiredGetHead = 1;
  Object.defineProperty(getHead, "__esModule", {
    value: true
  });
  getHead.HeadNotFoundError = undefined;
  getHead.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class HeadNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getHead.HeadNotFoundError = HeadNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'HeadNotFound') return new HeadNotFoundError(e);
    }
    return e;
  }
  return getHead;
}

var getLatestCommit = {};

var hasRequiredGetLatestCommit;
function requireGetLatestCommit() {
  if (hasRequiredGetLatestCommit) return getLatestCommit;
  hasRequiredGetLatestCommit = 1;
  Object.defineProperty(getLatestCommit, "__esModule", {
    value: true
  });
  getLatestCommit.RepoDeactivatedError = getLatestCommit.RepoSuspendedError = getLatestCommit.RepoTakendownError = getLatestCommit.RepoNotFoundError = undefined;
  getLatestCommit.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getLatestCommit.RepoNotFoundError = RepoNotFoundError;
  class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getLatestCommit.RepoTakendownError = RepoTakendownError;
  class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getLatestCommit.RepoSuspendedError = RepoSuspendedError;
  class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getLatestCommit.RepoDeactivatedError = RepoDeactivatedError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
      if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
      if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
      if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
  }
  return getLatestCommit;
}

var getRecord$1 = {};

var hasRequiredGetRecord$1;
function requireGetRecord$1() {
  if (hasRequiredGetRecord$1) return getRecord$1;
  hasRequiredGetRecord$1 = 1;
  Object.defineProperty(getRecord$1, "__esModule", {
    value: true
  });
  getRecord$1.RepoDeactivatedError = getRecord$1.RepoSuspendedError = getRecord$1.RepoTakendownError = getRecord$1.RepoNotFoundError = getRecord$1.RecordNotFoundError = undefined;
  getRecord$1.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRecord$1.RecordNotFoundError = RecordNotFoundError;
  class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRecord$1.RepoNotFoundError = RepoNotFoundError;
  class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRecord$1.RepoTakendownError = RepoTakendownError;
  class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRecord$1.RepoSuspendedError = RepoSuspendedError;
  class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRecord$1.RepoDeactivatedError = RepoDeactivatedError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
      if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
      if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
      if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
      if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
  }
  return getRecord$1;
}

var getRepo$1 = {};

var hasRequiredGetRepo$1;
function requireGetRepo$1() {
  if (hasRequiredGetRepo$1) return getRepo$1;
  hasRequiredGetRepo$1 = 1;
  Object.defineProperty(getRepo$1, "__esModule", {
    value: true
  });
  getRepo$1.RepoDeactivatedError = getRepo$1.RepoSuspendedError = getRepo$1.RepoTakendownError = getRepo$1.RepoNotFoundError = undefined;
  getRepo$1.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRepo$1.RepoNotFoundError = RepoNotFoundError;
  class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRepo$1.RepoTakendownError = RepoTakendownError;
  class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRepo$1.RepoSuspendedError = RepoSuspendedError;
  class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRepo$1.RepoDeactivatedError = RepoDeactivatedError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
      if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
      if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
      if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
  }
  return getRepo$1;
}

var getRepoStatus = {};

var hasRequiredGetRepoStatus;
function requireGetRepoStatus() {
  if (hasRequiredGetRepoStatus) return getRepoStatus;
  hasRequiredGetRepoStatus = 1;
  Object.defineProperty(getRepoStatus, "__esModule", {
    value: true
  });
  getRepoStatus.RepoNotFoundError = undefined;
  getRepoStatus.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRepoStatus.RepoNotFoundError = RepoNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
    }
    return e;
  }
  return getRepoStatus;
}

var listBlobs = {};

var hasRequiredListBlobs;
function requireListBlobs() {
  if (hasRequiredListBlobs) return listBlobs;
  hasRequiredListBlobs = 1;
  Object.defineProperty(listBlobs, "__esModule", {
    value: true
  });
  listBlobs.RepoDeactivatedError = listBlobs.RepoSuspendedError = listBlobs.RepoTakendownError = listBlobs.RepoNotFoundError = undefined;
  listBlobs.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  listBlobs.RepoNotFoundError = RepoNotFoundError;
  class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  listBlobs.RepoTakendownError = RepoTakendownError;
  class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  listBlobs.RepoSuspendedError = RepoSuspendedError;
  class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  listBlobs.RepoDeactivatedError = RepoDeactivatedError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
      if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
      if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
      if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
  }
  return listBlobs;
}

var getActorLikes = {};

var hasRequiredGetActorLikes;
function requireGetActorLikes() {
  if (hasRequiredGetActorLikes) return getActorLikes;
  hasRequiredGetActorLikes = 1;
  Object.defineProperty(getActorLikes, "__esModule", {
    value: true
  });
  getActorLikes.BlockedByActorError = getActorLikes.BlockedActorError = undefined;
  getActorLikes.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BlockedActorError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getActorLikes.BlockedActorError = BlockedActorError;
  class BlockedByActorError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getActorLikes.BlockedByActorError = BlockedByActorError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BlockedActor') return new BlockedActorError(e);
      if (e.error === 'BlockedByActor') return new BlockedByActorError(e);
    }
    return e;
  }
  return getActorLikes;
}

var getAuthorFeed = {};

var hasRequiredGetAuthorFeed;
function requireGetAuthorFeed() {
  if (hasRequiredGetAuthorFeed) return getAuthorFeed;
  hasRequiredGetAuthorFeed = 1;
  Object.defineProperty(getAuthorFeed, "__esModule", {
    value: true
  });
  getAuthorFeed.BlockedByActorError = getAuthorFeed.BlockedActorError = undefined;
  getAuthorFeed.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BlockedActorError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getAuthorFeed.BlockedActorError = BlockedActorError;
  class BlockedByActorError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getAuthorFeed.BlockedByActorError = BlockedByActorError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BlockedActor') return new BlockedActorError(e);
      if (e.error === 'BlockedByActor') return new BlockedByActorError(e);
    }
    return e;
  }
  return getAuthorFeed;
}

var getFeed = {};

var hasRequiredGetFeed;
function requireGetFeed() {
  if (hasRequiredGetFeed) return getFeed;
  hasRequiredGetFeed = 1;
  Object.defineProperty(getFeed, "__esModule", {
    value: true
  });
  getFeed.UnknownFeedError = undefined;
  getFeed.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class UnknownFeedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getFeed.UnknownFeedError = UnknownFeedError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'UnknownFeed') return new UnknownFeedError(e);
    }
    return e;
  }
  return getFeed;
}

var getFeedSkeleton = {};

var hasRequiredGetFeedSkeleton;
function requireGetFeedSkeleton() {
  if (hasRequiredGetFeedSkeleton) return getFeedSkeleton;
  hasRequiredGetFeedSkeleton = 1;
  Object.defineProperty(getFeedSkeleton, "__esModule", {
    value: true
  });
  getFeedSkeleton.UnknownFeedError = undefined;
  getFeedSkeleton.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class UnknownFeedError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getFeedSkeleton.UnknownFeedError = UnknownFeedError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'UnknownFeed') return new UnknownFeedError(e);
    }
    return e;
  }
  return getFeedSkeleton;
}

var getListFeed = {};

var hasRequiredGetListFeed;
function requireGetListFeed() {
  if (hasRequiredGetListFeed) return getListFeed;
  hasRequiredGetListFeed = 1;
  Object.defineProperty(getListFeed, "__esModule", {
    value: true
  });
  getListFeed.UnknownListError = undefined;
  getListFeed.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class UnknownListError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getListFeed.UnknownListError = UnknownListError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'UnknownList') return new UnknownListError(e);
    }
    return e;
  }
  return getListFeed;
}

var getPostThread = {};

var hasRequiredGetPostThread;
function requireGetPostThread() {
  if (hasRequiredGetPostThread) return getPostThread;
  hasRequiredGetPostThread = 1;
  Object.defineProperty(getPostThread, "__esModule", {
    value: true
  });
  getPostThread.NotFoundError = undefined;
  getPostThread.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class NotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getPostThread.NotFoundError = NotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'NotFound') return new NotFoundError(e);
    }
    return e;
  }
  return getPostThread;
}

var searchPosts = {};

var hasRequiredSearchPosts;
function requireSearchPosts() {
  if (hasRequiredSearchPosts) return searchPosts;
  hasRequiredSearchPosts = 1;
  Object.defineProperty(searchPosts, "__esModule", {
    value: true
  });
  searchPosts.BadQueryStringError = undefined;
  searchPosts.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  searchPosts.BadQueryStringError = BadQueryStringError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
  }
  return searchPosts;
}

var getRelationships = {};

var hasRequiredGetRelationships;
function requireGetRelationships() {
  if (hasRequiredGetRelationships) return getRelationships;
  hasRequiredGetRelationships = 1;
  Object.defineProperty(getRelationships, "__esModule", {
    value: true
  });
  getRelationships.ActorNotFoundError = undefined;
  getRelationships.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class ActorNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRelationships.ActorNotFoundError = ActorNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'ActorNotFound') return new ActorNotFoundError(e);
    }
    return e;
  }
  return getRelationships;
}

var searchActorsSkeleton = {};

var hasRequiredSearchActorsSkeleton;
function requireSearchActorsSkeleton() {
  if (hasRequiredSearchActorsSkeleton) return searchActorsSkeleton;
  hasRequiredSearchActorsSkeleton = 1;
  Object.defineProperty(searchActorsSkeleton, "__esModule", {
    value: true
  });
  searchActorsSkeleton.BadQueryStringError = undefined;
  searchActorsSkeleton.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  searchActorsSkeleton.BadQueryStringError = BadQueryStringError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
  }
  return searchActorsSkeleton;
}

var searchPostsSkeleton = {};

var hasRequiredSearchPostsSkeleton;
function requireSearchPostsSkeleton() {
  if (hasRequiredSearchPostsSkeleton) return searchPostsSkeleton;
  hasRequiredSearchPostsSkeleton = 1;
  Object.defineProperty(searchPostsSkeleton, "__esModule", {
    value: true
  });
  searchPostsSkeleton.BadQueryStringError = undefined;
  searchPostsSkeleton.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  searchPostsSkeleton.BadQueryStringError = BadQueryStringError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
  }
  return searchPostsSkeleton;
}

var searchStarterPacksSkeleton = {};

var hasRequiredSearchStarterPacksSkeleton;
function requireSearchStarterPacksSkeleton() {
  if (hasRequiredSearchStarterPacksSkeleton) return searchStarterPacksSkeleton;
  hasRequiredSearchStarterPacksSkeleton = 1;
  Object.defineProperty(searchStarterPacksSkeleton, "__esModule", {
    value: true
  });
  searchStarterPacksSkeleton.BadQueryStringError = undefined;
  searchStarterPacksSkeleton.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  searchStarterPacksSkeleton.BadQueryStringError = BadQueryStringError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
  }
  return searchStarterPacksSkeleton;
}

var createTemplate = {};

var hasRequiredCreateTemplate;
function requireCreateTemplate() {
  if (hasRequiredCreateTemplate) return createTemplate;
  hasRequiredCreateTemplate = 1;
  Object.defineProperty(createTemplate, "__esModule", {
    value: true
  });
  createTemplate.DuplicateTemplateNameError = undefined;
  createTemplate.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class DuplicateTemplateNameError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  createTemplate.DuplicateTemplateNameError = DuplicateTemplateNameError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'DuplicateTemplateName') return new DuplicateTemplateNameError(e);
    }
    return e;
  }
  return createTemplate;
}

var updateTemplate = {};

var hasRequiredUpdateTemplate;
function requireUpdateTemplate() {
  if (hasRequiredUpdateTemplate) return updateTemplate;
  hasRequiredUpdateTemplate = 1;
  Object.defineProperty(updateTemplate, "__esModule", {
    value: true
  });
  updateTemplate.DuplicateTemplateNameError = undefined;
  updateTemplate.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class DuplicateTemplateNameError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  updateTemplate.DuplicateTemplateNameError = DuplicateTemplateNameError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'DuplicateTemplateName') return new DuplicateTemplateNameError(e);
    }
    return e;
  }
  return updateTemplate;
}

var emitEvent = {};

var hasRequiredEmitEvent;
function requireEmitEvent() {
  if (hasRequiredEmitEvent) return emitEvent;
  hasRequiredEmitEvent = 1;
  Object.defineProperty(emitEvent, "__esModule", {
    value: true
  });
  emitEvent.SubjectHasActionError = undefined;
  emitEvent.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class SubjectHasActionError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  emitEvent.SubjectHasActionError = SubjectHasActionError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'SubjectHasAction') return new SubjectHasActionError(e);
    }
    return e;
  }
  return emitEvent;
}

var getRecord = {};

var hasRequiredGetRecord;
function requireGetRecord() {
  if (hasRequiredGetRecord) return getRecord;
  hasRequiredGetRecord = 1;
  Object.defineProperty(getRecord, "__esModule", {
    value: true
  });
  getRecord.RecordNotFoundError = undefined;
  getRecord.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRecord.RecordNotFoundError = RecordNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
    }
    return e;
  }
  return getRecord;
}

var getRepo = {};

var hasRequiredGetRepo;
function requireGetRepo() {
  if (hasRequiredGetRepo) return getRepo;
  hasRequiredGetRepo = 1;
  Object.defineProperty(getRepo, "__esModule", {
    value: true
  });
  getRepo.RepoNotFoundError = undefined;
  getRepo.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getRepo.RepoNotFoundError = RepoNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
    }
    return e;
  }
  return getRepo;
}

var deleteSet = {};

var hasRequiredDeleteSet;
function requireDeleteSet() {
  if (hasRequiredDeleteSet) return deleteSet;
  hasRequiredDeleteSet = 1;
  Object.defineProperty(deleteSet, "__esModule", {
    value: true
  });
  deleteSet.SetNotFoundError = undefined;
  deleteSet.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  deleteSet.SetNotFoundError = SetNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
  }
  return deleteSet;
}

var deleteValues = {};

var hasRequiredDeleteValues;
function requireDeleteValues() {
  if (hasRequiredDeleteValues) return deleteValues;
  hasRequiredDeleteValues = 1;
  Object.defineProperty(deleteValues, "__esModule", {
    value: true
  });
  deleteValues.SetNotFoundError = undefined;
  deleteValues.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  deleteValues.SetNotFoundError = SetNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
  }
  return deleteValues;
}

var getValues = {};

var hasRequiredGetValues;
function requireGetValues() {
  if (hasRequiredGetValues) return getValues;
  hasRequiredGetValues = 1;
  Object.defineProperty(getValues, "__esModule", {
    value: true
  });
  getValues.SetNotFoundError = undefined;
  getValues.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  getValues.SetNotFoundError = SetNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
  }
  return getValues;
}

var addMember = {};

var hasRequiredAddMember;
function requireAddMember() {
  if (hasRequiredAddMember) return addMember;
  hasRequiredAddMember = 1;
  Object.defineProperty(addMember, "__esModule", {
    value: true
  });
  addMember.MemberAlreadyExistsError = undefined;
  addMember.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class MemberAlreadyExistsError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  addMember.MemberAlreadyExistsError = MemberAlreadyExistsError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'MemberAlreadyExists') return new MemberAlreadyExistsError(e);
    }
    return e;
  }
  return addMember;
}

var deleteMember = {};

var hasRequiredDeleteMember;
function requireDeleteMember() {
  if (hasRequiredDeleteMember) return deleteMember;
  hasRequiredDeleteMember = 1;
  Object.defineProperty(deleteMember, "__esModule", {
    value: true
  });
  deleteMember.CannotDeleteSelfError = deleteMember.MemberNotFoundError = undefined;
  deleteMember.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class MemberNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  deleteMember.MemberNotFoundError = MemberNotFoundError;
  class CannotDeleteSelfError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  deleteMember.CannotDeleteSelfError = CannotDeleteSelfError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'MemberNotFound') return new MemberNotFoundError(e);
      if (e.error === 'CannotDeleteSelf') return new CannotDeleteSelfError(e);
    }
    return e;
  }
  return deleteMember;
}

var updateMember = {};

var hasRequiredUpdateMember;
function requireUpdateMember() {
  if (hasRequiredUpdateMember) return updateMember;
  hasRequiredUpdateMember = 1;
  Object.defineProperty(updateMember, "__esModule", {
    value: true
  });
  updateMember.MemberNotFoundError = undefined;
  updateMember.toKnownErr = toKnownErr;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  class MemberNotFoundError extends xrpc_1.XRPCError {
    constructor(src) {
      super(src.status, src.error, src.message, src.headers, {
        cause: src
      });
    }
  }
  updateMember.MemberNotFoundError = MemberNotFoundError;
  function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
      if (e.error === 'MemberNotFound') return new MemberNotFoundError(e);
    }
    return e;
  }
  return updateMember;
}

var defs$j = {};

var hasRequiredDefs$j;
function requireDefs$j() {
  if (hasRequiredDefs$j) return defs$j;
  hasRequiredDefs$j = 1;
  Object.defineProperty(defs$j, "__esModule", {
    value: true
  });
  defs$j.isStatusAttr = isStatusAttr;
  defs$j.validateStatusAttr = validateStatusAttr;
  defs$j.isAccountView = isAccountView;
  defs$j.validateAccountView = validateAccountView;
  defs$j.isRepoRef = isRepoRef;
  defs$j.validateRepoRef = validateRepoRef;
  defs$j.isRepoBlobRef = isRepoBlobRef;
  defs$j.validateRepoBlobRef = validateRepoBlobRef;
  defs$j.isThreatSignature = isThreatSignature;
  defs$j.validateThreatSignature = validateThreatSignature;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isStatusAttr(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#statusAttr';
  }
  function validateStatusAttr(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#statusAttr', v);
  }
  function isAccountView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#accountView';
  }
  function validateAccountView(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#accountView', v);
  }
  function isRepoRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#repoRef';
  }
  function validateRepoRef(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#repoRef', v);
  }
  function isRepoBlobRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#repoBlobRef';
  }
  function validateRepoBlobRef(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#repoBlobRef', v);
  }
  function isThreatSignature(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.admin.defs#threatSignature';
  }
  function validateThreatSignature(v) {
    return lexicons_1.lexicons.validate('com.atproto.admin.defs#threatSignature', v);
  }
  return defs$j;
}

var deleteAccount$1 = {};

var hasRequiredDeleteAccount$1;
function requireDeleteAccount$1() {
  if (hasRequiredDeleteAccount$1) return deleteAccount$1;
  hasRequiredDeleteAccount$1 = 1;
  Object.defineProperty(deleteAccount$1, "__esModule", {
    value: true
  });
  deleteAccount$1.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return deleteAccount$1;
}

var disableAccountInvites = {};

var hasRequiredDisableAccountInvites;
function requireDisableAccountInvites() {
  if (hasRequiredDisableAccountInvites) return disableAccountInvites;
  hasRequiredDisableAccountInvites = 1;
  Object.defineProperty(disableAccountInvites, "__esModule", {
    value: true
  });
  disableAccountInvites.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return disableAccountInvites;
}

var disableInviteCodes = {};

var hasRequiredDisableInviteCodes;
function requireDisableInviteCodes() {
  if (hasRequiredDisableInviteCodes) return disableInviteCodes;
  hasRequiredDisableInviteCodes = 1;
  Object.defineProperty(disableInviteCodes, "__esModule", {
    value: true
  });
  disableInviteCodes.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return disableInviteCodes;
}

var enableAccountInvites = {};

var hasRequiredEnableAccountInvites;
function requireEnableAccountInvites() {
  if (hasRequiredEnableAccountInvites) return enableAccountInvites;
  hasRequiredEnableAccountInvites = 1;
  Object.defineProperty(enableAccountInvites, "__esModule", {
    value: true
  });
  enableAccountInvites.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return enableAccountInvites;
}

var getAccountInfo = {};

var hasRequiredGetAccountInfo;
function requireGetAccountInfo() {
  if (hasRequiredGetAccountInfo) return getAccountInfo;
  hasRequiredGetAccountInfo = 1;
  Object.defineProperty(getAccountInfo, "__esModule", {
    value: true
  });
  getAccountInfo.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getAccountInfo;
}

var getAccountInfos = {};

var hasRequiredGetAccountInfos;
function requireGetAccountInfos() {
  if (hasRequiredGetAccountInfos) return getAccountInfos;
  hasRequiredGetAccountInfos = 1;
  Object.defineProperty(getAccountInfos, "__esModule", {
    value: true
  });
  getAccountInfos.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getAccountInfos;
}

var getInviteCodes = {};

var hasRequiredGetInviteCodes;
function requireGetInviteCodes() {
  if (hasRequiredGetInviteCodes) return getInviteCodes;
  hasRequiredGetInviteCodes = 1;
  Object.defineProperty(getInviteCodes, "__esModule", {
    value: true
  });
  getInviteCodes.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getInviteCodes;
}

var getSubjectStatus = {};

var hasRequiredGetSubjectStatus;
function requireGetSubjectStatus() {
  if (hasRequiredGetSubjectStatus) return getSubjectStatus;
  hasRequiredGetSubjectStatus = 1;
  Object.defineProperty(getSubjectStatus, "__esModule", {
    value: true
  });
  getSubjectStatus.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getSubjectStatus;
}

var searchAccounts$1 = {};

var hasRequiredSearchAccounts$1;
function requireSearchAccounts$1() {
  if (hasRequiredSearchAccounts$1) return searchAccounts$1;
  hasRequiredSearchAccounts$1 = 1;
  Object.defineProperty(searchAccounts$1, "__esModule", {
    value: true
  });
  searchAccounts$1.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return searchAccounts$1;
}

var sendEmail = {};

var hasRequiredSendEmail;
function requireSendEmail() {
  if (hasRequiredSendEmail) return sendEmail;
  hasRequiredSendEmail = 1;
  Object.defineProperty(sendEmail, "__esModule", {
    value: true
  });
  sendEmail.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return sendEmail;
}

var updateAccountEmail = {};

var hasRequiredUpdateAccountEmail;
function requireUpdateAccountEmail() {
  if (hasRequiredUpdateAccountEmail) return updateAccountEmail;
  hasRequiredUpdateAccountEmail = 1;
  Object.defineProperty(updateAccountEmail, "__esModule", {
    value: true
  });
  updateAccountEmail.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return updateAccountEmail;
}

var updateAccountHandle = {};

var hasRequiredUpdateAccountHandle;
function requireUpdateAccountHandle() {
  if (hasRequiredUpdateAccountHandle) return updateAccountHandle;
  hasRequiredUpdateAccountHandle = 1;
  Object.defineProperty(updateAccountHandle, "__esModule", {
    value: true
  });
  updateAccountHandle.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return updateAccountHandle;
}

var updateAccountPassword = {};

var hasRequiredUpdateAccountPassword;
function requireUpdateAccountPassword() {
  if (hasRequiredUpdateAccountPassword) return updateAccountPassword;
  hasRequiredUpdateAccountPassword = 1;
  Object.defineProperty(updateAccountPassword, "__esModule", {
    value: true
  });
  updateAccountPassword.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return updateAccountPassword;
}

var updateSubjectStatus = {};

var hasRequiredUpdateSubjectStatus;
function requireUpdateSubjectStatus() {
  if (hasRequiredUpdateSubjectStatus) return updateSubjectStatus;
  hasRequiredUpdateSubjectStatus = 1;
  Object.defineProperty(updateSubjectStatus, "__esModule", {
    value: true
  });
  updateSubjectStatus.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return updateSubjectStatus;
}

var getRecommendedDidCredentials = {};

var hasRequiredGetRecommendedDidCredentials;
function requireGetRecommendedDidCredentials() {
  if (hasRequiredGetRecommendedDidCredentials) return getRecommendedDidCredentials;
  hasRequiredGetRecommendedDidCredentials = 1;
  Object.defineProperty(getRecommendedDidCredentials, "__esModule", {
    value: true
  });
  getRecommendedDidCredentials.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getRecommendedDidCredentials;
}

var requestPlcOperationSignature = {};

var hasRequiredRequestPlcOperationSignature;
function requireRequestPlcOperationSignature() {
  if (hasRequiredRequestPlcOperationSignature) return requestPlcOperationSignature;
  hasRequiredRequestPlcOperationSignature = 1;
  Object.defineProperty(requestPlcOperationSignature, "__esModule", {
    value: true
  });
  requestPlcOperationSignature.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return requestPlcOperationSignature;
}

var resolveHandle = {};

var hasRequiredResolveHandle;
function requireResolveHandle() {
  if (hasRequiredResolveHandle) return resolveHandle;
  hasRequiredResolveHandle = 1;
  Object.defineProperty(resolveHandle, "__esModule", {
    value: true
  });
  resolveHandle.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return resolveHandle;
}

var signPlcOperation = {};

var hasRequiredSignPlcOperation;
function requireSignPlcOperation() {
  if (hasRequiredSignPlcOperation) return signPlcOperation;
  hasRequiredSignPlcOperation = 1;
  Object.defineProperty(signPlcOperation, "__esModule", {
    value: true
  });
  signPlcOperation.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return signPlcOperation;
}

var submitPlcOperation = {};

var hasRequiredSubmitPlcOperation;
function requireSubmitPlcOperation() {
  if (hasRequiredSubmitPlcOperation) return submitPlcOperation;
  hasRequiredSubmitPlcOperation = 1;
  Object.defineProperty(submitPlcOperation, "__esModule", {
    value: true
  });
  submitPlcOperation.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return submitPlcOperation;
}

var updateHandle = {};

var hasRequiredUpdateHandle;
function requireUpdateHandle() {
  if (hasRequiredUpdateHandle) return updateHandle;
  hasRequiredUpdateHandle = 1;
  Object.defineProperty(updateHandle, "__esModule", {
    value: true
  });
  updateHandle.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return updateHandle;
}

var defs$i = {};

var hasRequiredDefs$i;
function requireDefs$i() {
  if (hasRequiredDefs$i) return defs$i;
  hasRequiredDefs$i = 1;
  Object.defineProperty(defs$i, "__esModule", {
    value: true
  });
  defs$i.isLabel = isLabel;
  defs$i.validateLabel = validateLabel;
  defs$i.isSelfLabels = isSelfLabels;
  defs$i.validateSelfLabels = validateSelfLabels;
  defs$i.isSelfLabel = isSelfLabel;
  defs$i.validateSelfLabel = validateSelfLabel;
  defs$i.isLabelValueDefinition = isLabelValueDefinition;
  defs$i.validateLabelValueDefinition = validateLabelValueDefinition;
  defs$i.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
  defs$i.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isLabel(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#label';
  }
  function validateLabel(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#label', v);
  }
  function isSelfLabels(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#selfLabels';
  }
  function validateSelfLabels(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#selfLabels', v);
  }
  function isSelfLabel(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#selfLabel';
  }
  function validateSelfLabel(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#selfLabel', v);
  }
  function isLabelValueDefinition(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#labelValueDefinition';
  }
  function validateLabelValueDefinition(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#labelValueDefinition', v);
  }
  function isLabelValueDefinitionStrings(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.defs#labelValueDefinitionStrings';
  }
  function validateLabelValueDefinitionStrings(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.defs#labelValueDefinitionStrings', v);
  }
  return defs$i;
}

var queryLabels = {};

var hasRequiredQueryLabels;
function requireQueryLabels() {
  if (hasRequiredQueryLabels) return queryLabels;
  hasRequiredQueryLabels = 1;
  Object.defineProperty(queryLabels, "__esModule", {
    value: true
  });
  queryLabels.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return queryLabels;
}

var subscribeLabels = {};

var hasRequiredSubscribeLabels;
function requireSubscribeLabels() {
  if (hasRequiredSubscribeLabels) return subscribeLabels;
  hasRequiredSubscribeLabels = 1;
  Object.defineProperty(subscribeLabels, "__esModule", {
    value: true
  });
  subscribeLabels.isLabels = isLabels;
  subscribeLabels.validateLabels = validateLabels;
  subscribeLabels.isInfo = isInfo;
  subscribeLabels.validateInfo = validateInfo;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isLabels(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.subscribeLabels#labels';
  }
  function validateLabels(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.subscribeLabels#labels', v);
  }
  function isInfo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.label.subscribeLabels#info';
  }
  function validateInfo(v) {
    return lexicons_1.lexicons.validate('com.atproto.label.subscribeLabels#info', v);
  }
  return subscribeLabels;
}

var createReport = {};

var hasRequiredCreateReport;
function requireCreateReport() {
  if (hasRequiredCreateReport) return createReport;
  hasRequiredCreateReport = 1;
  Object.defineProperty(createReport, "__esModule", {
    value: true
  });
  createReport.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return createReport;
}

var defs$h = {};

var hasRequiredDefs$h;
function requireDefs$h() {
  if (hasRequiredDefs$h) return defs$h;
  hasRequiredDefs$h = 1;
  Object.defineProperty(defs$h, "__esModule", {
    value: true
  });
  defs$h.REASONAPPEAL = defs$h.REASONOTHER = defs$h.REASONRUDE = defs$h.REASONSEXUAL = defs$h.REASONMISLEADING = defs$h.REASONVIOLATION = defs$h.REASONSPAM = undefined;
  /** Spam: frequent unwanted promotion, replies, mentions */
  defs$h.REASONSPAM = 'com.atproto.moderation.defs#reasonSpam';
  /** Direct violation of server rules, laws, terms of service */
  defs$h.REASONVIOLATION = 'com.atproto.moderation.defs#reasonViolation';
  /** Misleading identity, affiliation, or content */
  defs$h.REASONMISLEADING = 'com.atproto.moderation.defs#reasonMisleading';
  /** Unwanted or mislabeled sexual content */
  defs$h.REASONSEXUAL = 'com.atproto.moderation.defs#reasonSexual';
  /** Rude, harassing, explicit, or otherwise unwelcoming behavior */
  defs$h.REASONRUDE = 'com.atproto.moderation.defs#reasonRude';
  /** Other: reports not falling under another report category */
  defs$h.REASONOTHER = 'com.atproto.moderation.defs#reasonOther';
  /** Appeal: appeal a previously taken moderation action */
  defs$h.REASONAPPEAL = 'com.atproto.moderation.defs#reasonAppeal';
  return defs$h;
}

var defs$g = {};

var hasRequiredDefs$g;
function requireDefs$g() {
  if (hasRequiredDefs$g) return defs$g;
  hasRequiredDefs$g = 1;
  Object.defineProperty(defs$g, "__esModule", {
    value: true
  });
  defs$g.isCommitMeta = isCommitMeta;
  defs$g.validateCommitMeta = validateCommitMeta;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isCommitMeta(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.defs#commitMeta';
  }
  function validateCommitMeta(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.defs#commitMeta', v);
  }
  return defs$g;
}

var describeRepo = {};

var hasRequiredDescribeRepo;
function requireDescribeRepo() {
  if (hasRequiredDescribeRepo) return describeRepo;
  hasRequiredDescribeRepo = 1;
  Object.defineProperty(describeRepo, "__esModule", {
    value: true
  });
  describeRepo.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return describeRepo;
}

var importRepo = {};

var hasRequiredImportRepo;
function requireImportRepo() {
  if (hasRequiredImportRepo) return importRepo;
  hasRequiredImportRepo = 1;
  Object.defineProperty(importRepo, "__esModule", {
    value: true
  });
  importRepo.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return importRepo;
}

var listMissingBlobs = {};

var hasRequiredListMissingBlobs;
function requireListMissingBlobs() {
  if (hasRequiredListMissingBlobs) return listMissingBlobs;
  hasRequiredListMissingBlobs = 1;
  Object.defineProperty(listMissingBlobs, "__esModule", {
    value: true
  });
  listMissingBlobs.toKnownErr = toKnownErr;
  listMissingBlobs.isRecordBlob = isRecordBlob;
  listMissingBlobs.validateRecordBlob = validateRecordBlob;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isRecordBlob(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.listMissingBlobs#recordBlob';
  }
  function validateRecordBlob(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.listMissingBlobs#recordBlob', v);
  }
  return listMissingBlobs;
}

var listRecords = {};

var hasRequiredListRecords;
function requireListRecords() {
  if (hasRequiredListRecords) return listRecords;
  hasRequiredListRecords = 1;
  Object.defineProperty(listRecords, "__esModule", {
    value: true
  });
  listRecords.toKnownErr = toKnownErr;
  listRecords.isRecord = isRecord;
  listRecords.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.repo.listRecords#record';
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.listRecords#record', v);
  }
  return listRecords;
}

var strongRef = {};

var hasRequiredStrongRef;
function requireStrongRef() {
  if (hasRequiredStrongRef) return strongRef;
  hasRequiredStrongRef = 1;
  Object.defineProperty(strongRef, "__esModule", {
    value: true
  });
  strongRef.isMain = isMain;
  strongRef.validateMain = validateMain;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'com.atproto.repo.strongRef#main' || v.$type === 'com.atproto.repo.strongRef');
  }
  function validateMain(v) {
    return lexicons_1.lexicons.validate('com.atproto.repo.strongRef#main', v);
  }
  return strongRef;
}

var uploadBlob = {};

var hasRequiredUploadBlob;
function requireUploadBlob() {
  if (hasRequiredUploadBlob) return uploadBlob;
  hasRequiredUploadBlob = 1;
  Object.defineProperty(uploadBlob, "__esModule", {
    value: true
  });
  uploadBlob.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return uploadBlob;
}

var activateAccount = {};

var hasRequiredActivateAccount;
function requireActivateAccount() {
  if (hasRequiredActivateAccount) return activateAccount;
  hasRequiredActivateAccount = 1;
  Object.defineProperty(activateAccount, "__esModule", {
    value: true
  });
  activateAccount.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return activateAccount;
}

var checkAccountStatus = {};

var hasRequiredCheckAccountStatus;
function requireCheckAccountStatus() {
  if (hasRequiredCheckAccountStatus) return checkAccountStatus;
  hasRequiredCheckAccountStatus = 1;
  Object.defineProperty(checkAccountStatus, "__esModule", {
    value: true
  });
  checkAccountStatus.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return checkAccountStatus;
}

var createInviteCode = {};

var hasRequiredCreateInviteCode;
function requireCreateInviteCode() {
  if (hasRequiredCreateInviteCode) return createInviteCode;
  hasRequiredCreateInviteCode = 1;
  Object.defineProperty(createInviteCode, "__esModule", {
    value: true
  });
  createInviteCode.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return createInviteCode;
}

var createInviteCodes = {};

var hasRequiredCreateInviteCodes;
function requireCreateInviteCodes() {
  if (hasRequiredCreateInviteCodes) return createInviteCodes;
  hasRequiredCreateInviteCodes = 1;
  Object.defineProperty(createInviteCodes, "__esModule", {
    value: true
  });
  createInviteCodes.toKnownErr = toKnownErr;
  createInviteCodes.isAccountCodes = isAccountCodes;
  createInviteCodes.validateAccountCodes = validateAccountCodes;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isAccountCodes(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.createInviteCodes#accountCodes';
  }
  function validateAccountCodes(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.createInviteCodes#accountCodes', v);
  }
  return createInviteCodes;
}

var deactivateAccount = {};

var hasRequiredDeactivateAccount;
function requireDeactivateAccount() {
  if (hasRequiredDeactivateAccount) return deactivateAccount;
  hasRequiredDeactivateAccount = 1;
  Object.defineProperty(deactivateAccount, "__esModule", {
    value: true
  });
  deactivateAccount.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return deactivateAccount;
}

var defs$f = {};

var hasRequiredDefs$f;
function requireDefs$f() {
  if (hasRequiredDefs$f) return defs$f;
  hasRequiredDefs$f = 1;
  Object.defineProperty(defs$f, "__esModule", {
    value: true
  });
  defs$f.isInviteCode = isInviteCode;
  defs$f.validateInviteCode = validateInviteCode;
  defs$f.isInviteCodeUse = isInviteCodeUse;
  defs$f.validateInviteCodeUse = validateInviteCodeUse;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isInviteCode(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.defs#inviteCode';
  }
  function validateInviteCode(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.defs#inviteCode', v);
  }
  function isInviteCodeUse(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.defs#inviteCodeUse';
  }
  function validateInviteCodeUse(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.defs#inviteCodeUse', v);
  }
  return defs$f;
}

var deleteSession = {};

var hasRequiredDeleteSession;
function requireDeleteSession() {
  if (hasRequiredDeleteSession) return deleteSession;
  hasRequiredDeleteSession = 1;
  Object.defineProperty(deleteSession, "__esModule", {
    value: true
  });
  deleteSession.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return deleteSession;
}

var describeServer = {};

var hasRequiredDescribeServer;
function requireDescribeServer() {
  if (hasRequiredDescribeServer) return describeServer;
  hasRequiredDescribeServer = 1;
  Object.defineProperty(describeServer, "__esModule", {
    value: true
  });
  describeServer.toKnownErr = toKnownErr;
  describeServer.isLinks = isLinks;
  describeServer.validateLinks = validateLinks;
  describeServer.isContact = isContact;
  describeServer.validateContact = validateContact;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isLinks(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.describeServer#links';
  }
  function validateLinks(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.describeServer#links', v);
  }
  function isContact(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.server.describeServer#contact';
  }
  function validateContact(v) {
    return lexicons_1.lexicons.validate('com.atproto.server.describeServer#contact', v);
  }
  return describeServer;
}

var getSession = {};

var hasRequiredGetSession;
function requireGetSession() {
  if (hasRequiredGetSession) return getSession;
  hasRequiredGetSession = 1;
  Object.defineProperty(getSession, "__esModule", {
    value: true
  });
  getSession.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getSession;
}

var requestAccountDelete = {};

var hasRequiredRequestAccountDelete;
function requireRequestAccountDelete() {
  if (hasRequiredRequestAccountDelete) return requestAccountDelete;
  hasRequiredRequestAccountDelete = 1;
  Object.defineProperty(requestAccountDelete, "__esModule", {
    value: true
  });
  requestAccountDelete.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return requestAccountDelete;
}

var requestEmailConfirmation = {};

var hasRequiredRequestEmailConfirmation;
function requireRequestEmailConfirmation() {
  if (hasRequiredRequestEmailConfirmation) return requestEmailConfirmation;
  hasRequiredRequestEmailConfirmation = 1;
  Object.defineProperty(requestEmailConfirmation, "__esModule", {
    value: true
  });
  requestEmailConfirmation.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return requestEmailConfirmation;
}

var requestEmailUpdate = {};

var hasRequiredRequestEmailUpdate;
function requireRequestEmailUpdate() {
  if (hasRequiredRequestEmailUpdate) return requestEmailUpdate;
  hasRequiredRequestEmailUpdate = 1;
  Object.defineProperty(requestEmailUpdate, "__esModule", {
    value: true
  });
  requestEmailUpdate.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return requestEmailUpdate;
}

var requestPasswordReset = {};

var hasRequiredRequestPasswordReset;
function requireRequestPasswordReset() {
  if (hasRequiredRequestPasswordReset) return requestPasswordReset;
  hasRequiredRequestPasswordReset = 1;
  Object.defineProperty(requestPasswordReset, "__esModule", {
    value: true
  });
  requestPasswordReset.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return requestPasswordReset;
}

var reserveSigningKey = {};

var hasRequiredReserveSigningKey;
function requireReserveSigningKey() {
  if (hasRequiredReserveSigningKey) return reserveSigningKey;
  hasRequiredReserveSigningKey = 1;
  Object.defineProperty(reserveSigningKey, "__esModule", {
    value: true
  });
  reserveSigningKey.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return reserveSigningKey;
}

var revokeAppPassword = {};

var hasRequiredRevokeAppPassword;
function requireRevokeAppPassword() {
  if (hasRequiredRevokeAppPassword) return revokeAppPassword;
  hasRequiredRevokeAppPassword = 1;
  Object.defineProperty(revokeAppPassword, "__esModule", {
    value: true
  });
  revokeAppPassword.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return revokeAppPassword;
}

var getCheckout = {};

var hasRequiredGetCheckout;
function requireGetCheckout() {
  if (hasRequiredGetCheckout) return getCheckout;
  hasRequiredGetCheckout = 1;
  Object.defineProperty(getCheckout, "__esModule", {
    value: true
  });
  getCheckout.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getCheckout;
}

var listRepos = {};

var hasRequiredListRepos;
function requireListRepos() {
  if (hasRequiredListRepos) return listRepos;
  hasRequiredListRepos = 1;
  Object.defineProperty(listRepos, "__esModule", {
    value: true
  });
  listRepos.toKnownErr = toKnownErr;
  listRepos.isRepo = isRepo;
  listRepos.validateRepo = validateRepo;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isRepo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.listRepos#repo';
  }
  function validateRepo(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.listRepos#repo', v);
  }
  return listRepos;
}

var notifyOfUpdate = {};

var hasRequiredNotifyOfUpdate;
function requireNotifyOfUpdate() {
  if (hasRequiredNotifyOfUpdate) return notifyOfUpdate;
  hasRequiredNotifyOfUpdate = 1;
  Object.defineProperty(notifyOfUpdate, "__esModule", {
    value: true
  });
  notifyOfUpdate.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return notifyOfUpdate;
}

var requestCrawl = {};

var hasRequiredRequestCrawl;
function requireRequestCrawl() {
  if (hasRequiredRequestCrawl) return requestCrawl;
  hasRequiredRequestCrawl = 1;
  Object.defineProperty(requestCrawl, "__esModule", {
    value: true
  });
  requestCrawl.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return requestCrawl;
}

var subscribeRepos = {};

var hasRequiredSubscribeRepos;
function requireSubscribeRepos() {
  if (hasRequiredSubscribeRepos) return subscribeRepos;
  hasRequiredSubscribeRepos = 1;
  Object.defineProperty(subscribeRepos, "__esModule", {
    value: true
  });
  subscribeRepos.isCommit = isCommit;
  subscribeRepos.validateCommit = validateCommit;
  subscribeRepos.isIdentity = isIdentity;
  subscribeRepos.validateIdentity = validateIdentity;
  subscribeRepos.isAccount = isAccount;
  subscribeRepos.validateAccount = validateAccount;
  subscribeRepos.isHandle = isHandle;
  subscribeRepos.validateHandle = validateHandle;
  subscribeRepos.isMigrate = isMigrate;
  subscribeRepos.validateMigrate = validateMigrate;
  subscribeRepos.isTombstone = isTombstone;
  subscribeRepos.validateTombstone = validateTombstone;
  subscribeRepos.isInfo = isInfo;
  subscribeRepos.validateInfo = validateInfo;
  subscribeRepos.isRepoOp = isRepoOp;
  subscribeRepos.validateRepoOp = validateRepoOp;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isCommit(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#commit';
  }
  function validateCommit(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#commit', v);
  }
  function isIdentity(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#identity';
  }
  function validateIdentity(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#identity', v);
  }
  function isAccount(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#account';
  }
  function validateAccount(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#account', v);
  }
  function isHandle(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#handle';
  }
  function validateHandle(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#handle', v);
  }
  function isMigrate(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#migrate';
  }
  function validateMigrate(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#migrate', v);
  }
  function isTombstone(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#tombstone';
  }
  function validateTombstone(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#tombstone', v);
  }
  function isInfo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#info';
  }
  function validateInfo(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#info', v);
  }
  function isRepoOp(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'com.atproto.sync.subscribeRepos#repoOp';
  }
  function validateRepoOp(v) {
    return lexicons_1.lexicons.validate('com.atproto.sync.subscribeRepos#repoOp', v);
  }
  return subscribeRepos;
}

var addReservedHandle = {};

var hasRequiredAddReservedHandle;
function requireAddReservedHandle() {
  if (hasRequiredAddReservedHandle) return addReservedHandle;
  hasRequiredAddReservedHandle = 1;
  Object.defineProperty(addReservedHandle, "__esModule", {
    value: true
  });
  addReservedHandle.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return addReservedHandle;
}

var checkSignupQueue = {};

var hasRequiredCheckSignupQueue;
function requireCheckSignupQueue() {
  if (hasRequiredCheckSignupQueue) return checkSignupQueue;
  hasRequiredCheckSignupQueue = 1;
  Object.defineProperty(checkSignupQueue, "__esModule", {
    value: true
  });
  checkSignupQueue.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return checkSignupQueue;
}

var fetchLabels = {};

var hasRequiredFetchLabels;
function requireFetchLabels() {
  if (hasRequiredFetchLabels) return fetchLabels;
  hasRequiredFetchLabels = 1;
  Object.defineProperty(fetchLabels, "__esModule", {
    value: true
  });
  fetchLabels.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return fetchLabels;
}

var requestPhoneVerification = {};

var hasRequiredRequestPhoneVerification;
function requireRequestPhoneVerification() {
  if (hasRequiredRequestPhoneVerification) return requestPhoneVerification;
  hasRequiredRequestPhoneVerification = 1;
  Object.defineProperty(requestPhoneVerification, "__esModule", {
    value: true
  });
  requestPhoneVerification.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return requestPhoneVerification;
}

var defs$e = {};

var hasRequiredDefs$e;
function requireDefs$e() {
  if (hasRequiredDefs$e) return defs$e;
  hasRequiredDefs$e = 1;
  Object.defineProperty(defs$e, "__esModule", {
    value: true
  });
  defs$e.isProfileViewBasic = isProfileViewBasic;
  defs$e.validateProfileViewBasic = validateProfileViewBasic;
  defs$e.isProfileView = isProfileView;
  defs$e.validateProfileView = validateProfileView;
  defs$e.isProfileViewDetailed = isProfileViewDetailed;
  defs$e.validateProfileViewDetailed = validateProfileViewDetailed;
  defs$e.isProfileAssociated = isProfileAssociated;
  defs$e.validateProfileAssociated = validateProfileAssociated;
  defs$e.isProfileAssociatedChat = isProfileAssociatedChat;
  defs$e.validateProfileAssociatedChat = validateProfileAssociatedChat;
  defs$e.isViewerState = isViewerState;
  defs$e.validateViewerState = validateViewerState;
  defs$e.isKnownFollowers = isKnownFollowers;
  defs$e.validateKnownFollowers = validateKnownFollowers;
  defs$e.isAdultContentPref = isAdultContentPref;
  defs$e.validateAdultContentPref = validateAdultContentPref;
  defs$e.isContentLabelPref = isContentLabelPref;
  defs$e.validateContentLabelPref = validateContentLabelPref;
  defs$e.isSavedFeed = isSavedFeed;
  defs$e.validateSavedFeed = validateSavedFeed;
  defs$e.isSavedFeedsPrefV2 = isSavedFeedsPrefV2;
  defs$e.validateSavedFeedsPrefV2 = validateSavedFeedsPrefV2;
  defs$e.isSavedFeedsPref = isSavedFeedsPref;
  defs$e.validateSavedFeedsPref = validateSavedFeedsPref;
  defs$e.isPersonalDetailsPref = isPersonalDetailsPref;
  defs$e.validatePersonalDetailsPref = validatePersonalDetailsPref;
  defs$e.isFeedViewPref = isFeedViewPref;
  defs$e.validateFeedViewPref = validateFeedViewPref;
  defs$e.isThreadViewPref = isThreadViewPref;
  defs$e.validateThreadViewPref = validateThreadViewPref;
  defs$e.isInterestsPref = isInterestsPref;
  defs$e.validateInterestsPref = validateInterestsPref;
  defs$e.isMutedWord = isMutedWord;
  defs$e.validateMutedWord = validateMutedWord;
  defs$e.isMutedWordsPref = isMutedWordsPref;
  defs$e.validateMutedWordsPref = validateMutedWordsPref;
  defs$e.isHiddenPostsPref = isHiddenPostsPref;
  defs$e.validateHiddenPostsPref = validateHiddenPostsPref;
  defs$e.isLabelersPref = isLabelersPref;
  defs$e.validateLabelersPref = validateLabelersPref;
  defs$e.isLabelerPrefItem = isLabelerPrefItem;
  defs$e.validateLabelerPrefItem = validateLabelerPrefItem;
  defs$e.isBskyAppStatePref = isBskyAppStatePref;
  defs$e.validateBskyAppStatePref = validateBskyAppStatePref;
  defs$e.isBskyAppProgressGuide = isBskyAppProgressGuide;
  defs$e.validateBskyAppProgressGuide = validateBskyAppProgressGuide;
  defs$e.isNux = isNux;
  defs$e.validateNux = validateNux;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isProfileViewBasic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileViewBasic';
  }
  function validateProfileViewBasic(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileViewBasic', v);
  }
  function isProfileView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileView';
  }
  function validateProfileView(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileView', v);
  }
  function isProfileViewDetailed(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileViewDetailed';
  }
  function validateProfileViewDetailed(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileViewDetailed', v);
  }
  function isProfileAssociated(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileAssociated';
  }
  function validateProfileAssociated(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileAssociated', v);
  }
  function isProfileAssociatedChat(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#profileAssociatedChat';
  }
  function validateProfileAssociatedChat(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#profileAssociatedChat', v);
  }
  function isViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#viewerState';
  }
  function validateViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#viewerState', v);
  }
  function isKnownFollowers(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#knownFollowers';
  }
  function validateKnownFollowers(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#knownFollowers', v);
  }
  function isAdultContentPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#adultContentPref';
  }
  function validateAdultContentPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#adultContentPref', v);
  }
  function isContentLabelPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#contentLabelPref';
  }
  function validateContentLabelPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#contentLabelPref', v);
  }
  function isSavedFeed(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeed';
  }
  function validateSavedFeed(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#savedFeed', v);
  }
  function isSavedFeedsPrefV2(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeedsPrefV2';
  }
  function validateSavedFeedsPrefV2(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#savedFeedsPrefV2', v);
  }
  function isSavedFeedsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#savedFeedsPref';
  }
  function validateSavedFeedsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#savedFeedsPref', v);
  }
  function isPersonalDetailsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#personalDetailsPref';
  }
  function validatePersonalDetailsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#personalDetailsPref', v);
  }
  function isFeedViewPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#feedViewPref';
  }
  function validateFeedViewPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#feedViewPref', v);
  }
  function isThreadViewPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#threadViewPref';
  }
  function validateThreadViewPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#threadViewPref', v);
  }
  function isInterestsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#interestsPref';
  }
  function validateInterestsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#interestsPref', v);
  }
  function isMutedWord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#mutedWord';
  }
  function validateMutedWord(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#mutedWord', v);
  }
  function isMutedWordsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#mutedWordsPref';
  }
  function validateMutedWordsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#mutedWordsPref', v);
  }
  function isHiddenPostsPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#hiddenPostsPref';
  }
  function validateHiddenPostsPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#hiddenPostsPref', v);
  }
  function isLabelersPref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#labelersPref';
  }
  function validateLabelersPref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#labelersPref', v);
  }
  function isLabelerPrefItem(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#labelerPrefItem';
  }
  function validateLabelerPrefItem(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#labelerPrefItem', v);
  }
  function isBskyAppStatePref(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#bskyAppStatePref';
  }
  function validateBskyAppStatePref(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#bskyAppStatePref', v);
  }
  function isBskyAppProgressGuide(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#bskyAppProgressGuide';
  }
  function validateBskyAppProgressGuide(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#bskyAppProgressGuide', v);
  }
  function isNux(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.actor.defs#nux';
  }
  function validateNux(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.defs#nux', v);
  }
  return defs$e;
}

var getPreferences = {};

var hasRequiredGetPreferences;
function requireGetPreferences() {
  if (hasRequiredGetPreferences) return getPreferences;
  hasRequiredGetPreferences = 1;
  Object.defineProperty(getPreferences, "__esModule", {
    value: true
  });
  getPreferences.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getPreferences;
}

var getProfile = {};

var hasRequiredGetProfile;
function requireGetProfile() {
  if (hasRequiredGetProfile) return getProfile;
  hasRequiredGetProfile = 1;
  Object.defineProperty(getProfile, "__esModule", {
    value: true
  });
  getProfile.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getProfile;
}

var getProfiles = {};

var hasRequiredGetProfiles;
function requireGetProfiles() {
  if (hasRequiredGetProfiles) return getProfiles;
  hasRequiredGetProfiles = 1;
  Object.defineProperty(getProfiles, "__esModule", {
    value: true
  });
  getProfiles.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getProfiles;
}

var getSuggestions = {};

var hasRequiredGetSuggestions;
function requireGetSuggestions() {
  if (hasRequiredGetSuggestions) return getSuggestions;
  hasRequiredGetSuggestions = 1;
  Object.defineProperty(getSuggestions, "__esModule", {
    value: true
  });
  getSuggestions.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getSuggestions;
}

var profile$1 = {};

var hasRequiredProfile$1;
function requireProfile$1() {
  if (hasRequiredProfile$1) return profile$1;
  hasRequiredProfile$1 = 1;
  Object.defineProperty(profile$1, "__esModule", {
    value: true
  });
  profile$1.isRecord = isRecord;
  profile$1.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.actor.profile#main' || v.$type === 'app.bsky.actor.profile');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.actor.profile#main', v);
  }
  return profile$1;
}

var putPreferences$1 = {};

var hasRequiredPutPreferences$1;
function requirePutPreferences$1() {
  if (hasRequiredPutPreferences$1) return putPreferences$1;
  hasRequiredPutPreferences$1 = 1;
  Object.defineProperty(putPreferences$1, "__esModule", {
    value: true
  });
  putPreferences$1.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return putPreferences$1;
}

var searchActors = {};

var hasRequiredSearchActors;
function requireSearchActors() {
  if (hasRequiredSearchActors) return searchActors;
  hasRequiredSearchActors = 1;
  Object.defineProperty(searchActors, "__esModule", {
    value: true
  });
  searchActors.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return searchActors;
}

var searchActorsTypeahead = {};

var hasRequiredSearchActorsTypeahead;
function requireSearchActorsTypeahead() {
  if (hasRequiredSearchActorsTypeahead) return searchActorsTypeahead;
  hasRequiredSearchActorsTypeahead = 1;
  Object.defineProperty(searchActorsTypeahead, "__esModule", {
    value: true
  });
  searchActorsTypeahead.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return searchActorsTypeahead;
}

var defs$d = {};

var hasRequiredDefs$d;
function requireDefs$d() {
  if (hasRequiredDefs$d) return defs$d;
  hasRequiredDefs$d = 1;
  Object.defineProperty(defs$d, "__esModule", {
    value: true
  });
  defs$d.isAspectRatio = isAspectRatio;
  defs$d.validateAspectRatio = validateAspectRatio;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isAspectRatio(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.defs#aspectRatio';
  }
  function validateAspectRatio(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.defs#aspectRatio', v);
  }
  return defs$d;
}

var external = {};

var hasRequiredExternal;
function requireExternal() {
  if (hasRequiredExternal) return external;
  hasRequiredExternal = 1;
  Object.defineProperty(external, "__esModule", {
    value: true
  });
  external.isMain = isMain;
  external.validateMain = validateMain;
  external.isExternal = isExternal;
  external.validateExternal = validateExternal;
  external.isView = isView;
  external.validateView = validateView;
  external.isViewExternal = isViewExternal;
  external.validateViewExternal = validateViewExternal;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.external#main' || v.$type === 'app.bsky.embed.external');
  }
  function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.external#main', v);
  }
  function isExternal(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#external';
  }
  function validateExternal(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.external#external', v);
  }
  function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#view';
  }
  function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.external#view', v);
  }
  function isViewExternal(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.external#viewExternal';
  }
  function validateViewExternal(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.external#viewExternal', v);
  }
  return external;
}

var images = {};

var hasRequiredImages;
function requireImages() {
  if (hasRequiredImages) return images;
  hasRequiredImages = 1;
  Object.defineProperty(images, "__esModule", {
    value: true
  });
  images.isMain = isMain;
  images.validateMain = validateMain;
  images.isImage = isImage;
  images.validateImage = validateImage;
  images.isView = isView;
  images.validateView = validateView;
  images.isViewImage = isViewImage;
  images.validateViewImage = validateViewImage;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.images#main' || v.$type === 'app.bsky.embed.images');
  }
  function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.images#main', v);
  }
  function isImage(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#image';
  }
  function validateImage(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.images#image', v);
  }
  function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#view';
  }
  function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.images#view', v);
  }
  function isViewImage(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.images#viewImage';
  }
  function validateViewImage(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.images#viewImage', v);
  }
  return images;
}

var record = {};

var hasRequiredRecord;
function requireRecord() {
  if (hasRequiredRecord) return record;
  hasRequiredRecord = 1;
  Object.defineProperty(record, "__esModule", {
    value: true
  });
  record.isMain = isMain;
  record.validateMain = validateMain;
  record.isView = isView;
  record.validateView = validateView;
  record.isViewRecord = isViewRecord;
  record.validateViewRecord = validateViewRecord;
  record.isViewNotFound = isViewNotFound;
  record.validateViewNotFound = validateViewNotFound;
  record.isViewBlocked = isViewBlocked;
  record.validateViewBlocked = validateViewBlocked;
  record.isViewDetached = isViewDetached;
  record.validateViewDetached = validateViewDetached;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.record#main' || v.$type === 'app.bsky.embed.record');
  }
  function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#main', v);
  }
  function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#view';
  }
  function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#view', v);
  }
  function isViewRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewRecord';
  }
  function validateViewRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#viewRecord', v);
  }
  function isViewNotFound(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewNotFound';
  }
  function validateViewNotFound(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#viewNotFound', v);
  }
  function isViewBlocked(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewBlocked';
  }
  function validateViewBlocked(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#viewBlocked', v);
  }
  function isViewDetached(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.record#viewDetached';
  }
  function validateViewDetached(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.record#viewDetached', v);
  }
  return record;
}

var recordWithMedia = {};

var hasRequiredRecordWithMedia;
function requireRecordWithMedia() {
  if (hasRequiredRecordWithMedia) return recordWithMedia;
  hasRequiredRecordWithMedia = 1;
  Object.defineProperty(recordWithMedia, "__esModule", {
    value: true
  });
  recordWithMedia.isMain = isMain;
  recordWithMedia.validateMain = validateMain;
  recordWithMedia.isView = isView;
  recordWithMedia.validateView = validateView;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.recordWithMedia#main' || v.$type === 'app.bsky.embed.recordWithMedia');
  }
  function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.recordWithMedia#main', v);
  }
  function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.recordWithMedia#view';
  }
  function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.recordWithMedia#view', v);
  }
  return recordWithMedia;
}

var video = {};

var hasRequiredVideo;
function requireVideo() {
  if (hasRequiredVideo) return video;
  hasRequiredVideo = 1;
  Object.defineProperty(video, "__esModule", {
    value: true
  });
  video.isMain = isMain;
  video.validateMain = validateMain;
  video.isCaption = isCaption;
  video.validateCaption = validateCaption;
  video.isView = isView;
  video.validateView = validateView;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.embed.video#main' || v.$type === 'app.bsky.embed.video');
  }
  function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.video#main', v);
  }
  function isCaption(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.video#caption';
  }
  function validateCaption(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.video#caption', v);
  }
  function isView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.embed.video#view';
  }
  function validateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.embed.video#view', v);
  }
  return video;
}

var defs$c = {};

var hasRequiredDefs$c;
function requireDefs$c() {
  if (hasRequiredDefs$c) return defs$c;
  hasRequiredDefs$c = 1;
  Object.defineProperty(defs$c, "__esModule", {
    value: true
  });
  defs$c.INTERACTIONSHARE = defs$c.INTERACTIONQUOTE = defs$c.INTERACTIONREPLY = defs$c.INTERACTIONREPOST = defs$c.INTERACTIONLIKE = defs$c.INTERACTIONSEEN = defs$c.CLICKTHROUGHEMBED = defs$c.CLICKTHROUGHREPOSTER = defs$c.CLICKTHROUGHAUTHOR = defs$c.CLICKTHROUGHITEM = defs$c.REQUESTMORE = defs$c.REQUESTLESS = undefined;
  defs$c.isPostView = isPostView;
  defs$c.validatePostView = validatePostView;
  defs$c.isViewerState = isViewerState;
  defs$c.validateViewerState = validateViewerState;
  defs$c.isFeedViewPost = isFeedViewPost;
  defs$c.validateFeedViewPost = validateFeedViewPost;
  defs$c.isReplyRef = isReplyRef;
  defs$c.validateReplyRef = validateReplyRef;
  defs$c.isReasonRepost = isReasonRepost;
  defs$c.validateReasonRepost = validateReasonRepost;
  defs$c.isReasonPin = isReasonPin;
  defs$c.validateReasonPin = validateReasonPin;
  defs$c.isThreadViewPost = isThreadViewPost;
  defs$c.validateThreadViewPost = validateThreadViewPost;
  defs$c.isNotFoundPost = isNotFoundPost;
  defs$c.validateNotFoundPost = validateNotFoundPost;
  defs$c.isBlockedPost = isBlockedPost;
  defs$c.validateBlockedPost = validateBlockedPost;
  defs$c.isBlockedAuthor = isBlockedAuthor;
  defs$c.validateBlockedAuthor = validateBlockedAuthor;
  defs$c.isGeneratorView = isGeneratorView;
  defs$c.validateGeneratorView = validateGeneratorView;
  defs$c.isGeneratorViewerState = isGeneratorViewerState;
  defs$c.validateGeneratorViewerState = validateGeneratorViewerState;
  defs$c.isSkeletonFeedPost = isSkeletonFeedPost;
  defs$c.validateSkeletonFeedPost = validateSkeletonFeedPost;
  defs$c.isSkeletonReasonRepost = isSkeletonReasonRepost;
  defs$c.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
  defs$c.isSkeletonReasonPin = isSkeletonReasonPin;
  defs$c.validateSkeletonReasonPin = validateSkeletonReasonPin;
  defs$c.isThreadgateView = isThreadgateView;
  defs$c.validateThreadgateView = validateThreadgateView;
  defs$c.isInteraction = isInteraction;
  defs$c.validateInteraction = validateInteraction;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isPostView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#postView';
  }
  function validatePostView(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#postView', v);
  }
  function isViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#viewerState';
  }
  function validateViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#viewerState', v);
  }
  function isFeedViewPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#feedViewPost';
  }
  function validateFeedViewPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#feedViewPost', v);
  }
  function isReplyRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#replyRef';
  }
  function validateReplyRef(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#replyRef', v);
  }
  function isReasonRepost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#reasonRepost';
  }
  function validateReasonRepost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#reasonRepost', v);
  }
  function isReasonPin(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#reasonPin';
  }
  function validateReasonPin(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#reasonPin', v);
  }
  function isThreadViewPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#threadViewPost';
  }
  function validateThreadViewPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#threadViewPost', v);
  }
  function isNotFoundPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#notFoundPost';
  }
  function validateNotFoundPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#notFoundPost', v);
  }
  function isBlockedPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#blockedPost';
  }
  function validateBlockedPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#blockedPost', v);
  }
  function isBlockedAuthor(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#blockedAuthor';
  }
  function validateBlockedAuthor(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#blockedAuthor', v);
  }
  function isGeneratorView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#generatorView';
  }
  function validateGeneratorView(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#generatorView', v);
  }
  function isGeneratorViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#generatorViewerState';
  }
  function validateGeneratorViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#generatorViewerState', v);
  }
  function isSkeletonFeedPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#skeletonFeedPost';
  }
  function validateSkeletonFeedPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#skeletonFeedPost', v);
  }
  function isSkeletonReasonRepost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#skeletonReasonRepost';
  }
  function validateSkeletonReasonRepost(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#skeletonReasonRepost', v);
  }
  function isSkeletonReasonPin(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#skeletonReasonPin';
  }
  function validateSkeletonReasonPin(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#skeletonReasonPin', v);
  }
  function isThreadgateView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#threadgateView';
  }
  function validateThreadgateView(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#threadgateView', v);
  }
  function isInteraction(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.defs#interaction';
  }
  function validateInteraction(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.defs#interaction', v);
  }
  /** Request that less content like the given feed item be shown in the feed */
  defs$c.REQUESTLESS = 'app.bsky.feed.defs#requestLess';
  /** Request that more content like the given feed item be shown in the feed */
  defs$c.REQUESTMORE = 'app.bsky.feed.defs#requestMore';
  /** User clicked through to the feed item */
  defs$c.CLICKTHROUGHITEM = 'app.bsky.feed.defs#clickthroughItem';
  /** User clicked through to the author of the feed item */
  defs$c.CLICKTHROUGHAUTHOR = 'app.bsky.feed.defs#clickthroughAuthor';
  /** User clicked through to the reposter of the feed item */
  defs$c.CLICKTHROUGHREPOSTER = 'app.bsky.feed.defs#clickthroughReposter';
  /** User clicked through to the embedded content of the feed item */
  defs$c.CLICKTHROUGHEMBED = 'app.bsky.feed.defs#clickthroughEmbed';
  /** Feed item was seen by user */
  defs$c.INTERACTIONSEEN = 'app.bsky.feed.defs#interactionSeen';
  /** User liked the feed item */
  defs$c.INTERACTIONLIKE = 'app.bsky.feed.defs#interactionLike';
  /** User reposted the feed item */
  defs$c.INTERACTIONREPOST = 'app.bsky.feed.defs#interactionRepost';
  /** User replied to the feed item */
  defs$c.INTERACTIONREPLY = 'app.bsky.feed.defs#interactionReply';
  /** User quoted the feed item */
  defs$c.INTERACTIONQUOTE = 'app.bsky.feed.defs#interactionQuote';
  /** User shared the feed item */
  defs$c.INTERACTIONSHARE = 'app.bsky.feed.defs#interactionShare';
  return defs$c;
}

var describeFeedGenerator = {};

var hasRequiredDescribeFeedGenerator;
function requireDescribeFeedGenerator() {
  if (hasRequiredDescribeFeedGenerator) return describeFeedGenerator;
  hasRequiredDescribeFeedGenerator = 1;
  Object.defineProperty(describeFeedGenerator, "__esModule", {
    value: true
  });
  describeFeedGenerator.toKnownErr = toKnownErr;
  describeFeedGenerator.isFeed = isFeed;
  describeFeedGenerator.validateFeed = validateFeed;
  describeFeedGenerator.isLinks = isLinks;
  describeFeedGenerator.validateLinks = validateLinks;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isFeed(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.describeFeedGenerator#feed';
  }
  function validateFeed(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.describeFeedGenerator#feed', v);
  }
  function isLinks(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.describeFeedGenerator#links';
  }
  function validateLinks(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.describeFeedGenerator#links', v);
  }
  return describeFeedGenerator;
}

var generator = {};

var hasRequiredGenerator;
function requireGenerator() {
  if (hasRequiredGenerator) return generator;
  hasRequiredGenerator = 1;
  Object.defineProperty(generator, "__esModule", {
    value: true
  });
  generator.isRecord = isRecord;
  generator.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.generator#main' || v.$type === 'app.bsky.feed.generator');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.generator#main', v);
  }
  return generator;
}

var getActorFeeds = {};

var hasRequiredGetActorFeeds;
function requireGetActorFeeds() {
  if (hasRequiredGetActorFeeds) return getActorFeeds;
  hasRequiredGetActorFeeds = 1;
  Object.defineProperty(getActorFeeds, "__esModule", {
    value: true
  });
  getActorFeeds.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getActorFeeds;
}

var getFeedGenerator = {};

var hasRequiredGetFeedGenerator;
function requireGetFeedGenerator() {
  if (hasRequiredGetFeedGenerator) return getFeedGenerator;
  hasRequiredGetFeedGenerator = 1;
  Object.defineProperty(getFeedGenerator, "__esModule", {
    value: true
  });
  getFeedGenerator.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getFeedGenerator;
}

var getFeedGenerators = {};

var hasRequiredGetFeedGenerators;
function requireGetFeedGenerators() {
  if (hasRequiredGetFeedGenerators) return getFeedGenerators;
  hasRequiredGetFeedGenerators = 1;
  Object.defineProperty(getFeedGenerators, "__esModule", {
    value: true
  });
  getFeedGenerators.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getFeedGenerators;
}

var getLikes = {};

var hasRequiredGetLikes;
function requireGetLikes() {
  if (hasRequiredGetLikes) return getLikes;
  hasRequiredGetLikes = 1;
  Object.defineProperty(getLikes, "__esModule", {
    value: true
  });
  getLikes.toKnownErr = toKnownErr;
  getLikes.isLike = isLike;
  getLikes.validateLike = validateLike;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isLike(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.getLikes#like';
  }
  function validateLike(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.getLikes#like', v);
  }
  return getLikes;
}

var getPosts = {};

var hasRequiredGetPosts;
function requireGetPosts() {
  if (hasRequiredGetPosts) return getPosts;
  hasRequiredGetPosts = 1;
  Object.defineProperty(getPosts, "__esModule", {
    value: true
  });
  getPosts.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getPosts;
}

var getQuotes = {};

var hasRequiredGetQuotes;
function requireGetQuotes() {
  if (hasRequiredGetQuotes) return getQuotes;
  hasRequiredGetQuotes = 1;
  Object.defineProperty(getQuotes, "__esModule", {
    value: true
  });
  getQuotes.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getQuotes;
}

var getRepostedBy = {};

var hasRequiredGetRepostedBy;
function requireGetRepostedBy() {
  if (hasRequiredGetRepostedBy) return getRepostedBy;
  hasRequiredGetRepostedBy = 1;
  Object.defineProperty(getRepostedBy, "__esModule", {
    value: true
  });
  getRepostedBy.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getRepostedBy;
}

var getSuggestedFeeds = {};

var hasRequiredGetSuggestedFeeds;
function requireGetSuggestedFeeds() {
  if (hasRequiredGetSuggestedFeeds) return getSuggestedFeeds;
  hasRequiredGetSuggestedFeeds = 1;
  Object.defineProperty(getSuggestedFeeds, "__esModule", {
    value: true
  });
  getSuggestedFeeds.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getSuggestedFeeds;
}

var getTimeline = {};

var hasRequiredGetTimeline;
function requireGetTimeline() {
  if (hasRequiredGetTimeline) return getTimeline;
  hasRequiredGetTimeline = 1;
  Object.defineProperty(getTimeline, "__esModule", {
    value: true
  });
  getTimeline.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getTimeline;
}

var like = {};

var hasRequiredLike;
function requireLike() {
  if (hasRequiredLike) return like;
  hasRequiredLike = 1;
  Object.defineProperty(like, "__esModule", {
    value: true
  });
  like.isRecord = isRecord;
  like.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.like#main' || v.$type === 'app.bsky.feed.like');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.like#main', v);
  }
  return like;
}

var post$1 = {};

var hasRequiredPost$1;
function requirePost$1() {
  if (hasRequiredPost$1) return post$1;
  hasRequiredPost$1 = 1;
  Object.defineProperty(post$1, "__esModule", {
    value: true
  });
  post$1.isRecord = isRecord;
  post$1.validateRecord = validateRecord;
  post$1.isReplyRef = isReplyRef;
  post$1.validateReplyRef = validateReplyRef;
  post$1.isEntity = isEntity;
  post$1.validateEntity = validateEntity;
  post$1.isTextSlice = isTextSlice;
  post$1.validateTextSlice = validateTextSlice;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.post#main' || v.$type === 'app.bsky.feed.post');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.post#main', v);
  }
  function isReplyRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#replyRef';
  }
  function validateReplyRef(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.post#replyRef', v);
  }
  function isEntity(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#entity';
  }
  function validateEntity(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.post#entity', v);
  }
  function isTextSlice(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.post#textSlice';
  }
  function validateTextSlice(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.post#textSlice', v);
  }
  return post$1;
}

var postgate = {};

var hasRequiredPostgate;
function requirePostgate() {
  if (hasRequiredPostgate) return postgate;
  hasRequiredPostgate = 1;
  Object.defineProperty(postgate, "__esModule", {
    value: true
  });
  postgate.isRecord = isRecord;
  postgate.validateRecord = validateRecord;
  postgate.isDisableRule = isDisableRule;
  postgate.validateDisableRule = validateDisableRule;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.postgate#main' || v.$type === 'app.bsky.feed.postgate');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.postgate#main', v);
  }
  function isDisableRule(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.postgate#disableRule';
  }
  function validateDisableRule(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.postgate#disableRule', v);
  }
  return postgate;
}

var repost = {};

var hasRequiredRepost;
function requireRepost() {
  if (hasRequiredRepost) return repost;
  hasRequiredRepost = 1;
  Object.defineProperty(repost, "__esModule", {
    value: true
  });
  repost.isRecord = isRecord;
  repost.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.repost#main' || v.$type === 'app.bsky.feed.repost');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.repost#main', v);
  }
  return repost;
}

var sendInteractions = {};

var hasRequiredSendInteractions;
function requireSendInteractions() {
  if (hasRequiredSendInteractions) return sendInteractions;
  hasRequiredSendInteractions = 1;
  Object.defineProperty(sendInteractions, "__esModule", {
    value: true
  });
  sendInteractions.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return sendInteractions;
}

var threadgate = {};

var hasRequiredThreadgate;
function requireThreadgate() {
  if (hasRequiredThreadgate) return threadgate;
  hasRequiredThreadgate = 1;
  Object.defineProperty(threadgate, "__esModule", {
    value: true
  });
  threadgate.isRecord = isRecord;
  threadgate.validateRecord = validateRecord;
  threadgate.isMentionRule = isMentionRule;
  threadgate.validateMentionRule = validateMentionRule;
  threadgate.isFollowingRule = isFollowingRule;
  threadgate.validateFollowingRule = validateFollowingRule;
  threadgate.isListRule = isListRule;
  threadgate.validateListRule = validateListRule;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.feed.threadgate#main' || v.$type === 'app.bsky.feed.threadgate');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.threadgate#main', v);
  }
  function isMentionRule(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#mentionRule';
  }
  function validateMentionRule(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.threadgate#mentionRule', v);
  }
  function isFollowingRule(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#followingRule';
  }
  function validateFollowingRule(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.threadgate#followingRule', v);
  }
  function isListRule(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.feed.threadgate#listRule';
  }
  function validateListRule(v) {
    return lexicons_1.lexicons.validate('app.bsky.feed.threadgate#listRule', v);
  }
  return threadgate;
}

var block = {};

var hasRequiredBlock;
function requireBlock() {
  if (hasRequiredBlock) return block;
  hasRequiredBlock = 1;
  Object.defineProperty(block, "__esModule", {
    value: true
  });
  block.isRecord = isRecord;
  block.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.block#main' || v.$type === 'app.bsky.graph.block');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.block#main', v);
  }
  return block;
}

var defs$b = {};

var hasRequiredDefs$b;
function requireDefs$b() {
  if (hasRequiredDefs$b) return defs$b;
  hasRequiredDefs$b = 1;
  Object.defineProperty(defs$b, "__esModule", {
    value: true
  });
  defs$b.REFERENCELIST = defs$b.CURATELIST = defs$b.MODLIST = undefined;
  defs$b.isListViewBasic = isListViewBasic;
  defs$b.validateListViewBasic = validateListViewBasic;
  defs$b.isListView = isListView;
  defs$b.validateListView = validateListView;
  defs$b.isListItemView = isListItemView;
  defs$b.validateListItemView = validateListItemView;
  defs$b.isStarterPackView = isStarterPackView;
  defs$b.validateStarterPackView = validateStarterPackView;
  defs$b.isStarterPackViewBasic = isStarterPackViewBasic;
  defs$b.validateStarterPackViewBasic = validateStarterPackViewBasic;
  defs$b.isListViewerState = isListViewerState;
  defs$b.validateListViewerState = validateListViewerState;
  defs$b.isNotFoundActor = isNotFoundActor;
  defs$b.validateNotFoundActor = validateNotFoundActor;
  defs$b.isRelationship = isRelationship;
  defs$b.validateRelationship = validateRelationship;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isListViewBasic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listViewBasic';
  }
  function validateListViewBasic(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#listViewBasic', v);
  }
  function isListView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listView';
  }
  function validateListView(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#listView', v);
  }
  function isListItemView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listItemView';
  }
  function validateListItemView(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#listItemView', v);
  }
  function isStarterPackView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#starterPackView';
  }
  function validateStarterPackView(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#starterPackView', v);
  }
  function isStarterPackViewBasic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#starterPackViewBasic';
  }
  function validateStarterPackViewBasic(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#starterPackViewBasic', v);
  }
  /** A list of actors to apply an aggregate moderation action (mute/block) on. */
  defs$b.MODLIST = 'app.bsky.graph.defs#modlist';
  /** A list of actors used for curation purposes such as list feeds or interaction gating. */
  defs$b.CURATELIST = 'app.bsky.graph.defs#curatelist';
  /** A list of actors used for only for reference purposes such as within a starter pack. */
  defs$b.REFERENCELIST = 'app.bsky.graph.defs#referencelist';
  function isListViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#listViewerState';
  }
  function validateListViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#listViewerState', v);
  }
  function isNotFoundActor(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#notFoundActor';
  }
  function validateNotFoundActor(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#notFoundActor', v);
  }
  function isRelationship(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.defs#relationship';
  }
  function validateRelationship(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.defs#relationship', v);
  }
  return defs$b;
}

var follow = {};

var hasRequiredFollow;
function requireFollow() {
  if (hasRequiredFollow) return follow;
  hasRequiredFollow = 1;
  Object.defineProperty(follow, "__esModule", {
    value: true
  });
  follow.isRecord = isRecord;
  follow.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.follow#main' || v.$type === 'app.bsky.graph.follow');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.follow#main', v);
  }
  return follow;
}

var getActorStarterPacks = {};

var hasRequiredGetActorStarterPacks;
function requireGetActorStarterPacks() {
  if (hasRequiredGetActorStarterPacks) return getActorStarterPacks;
  hasRequiredGetActorStarterPacks = 1;
  Object.defineProperty(getActorStarterPacks, "__esModule", {
    value: true
  });
  getActorStarterPacks.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getActorStarterPacks;
}

var getBlocks = {};

var hasRequiredGetBlocks;
function requireGetBlocks() {
  if (hasRequiredGetBlocks) return getBlocks;
  hasRequiredGetBlocks = 1;
  Object.defineProperty(getBlocks, "__esModule", {
    value: true
  });
  getBlocks.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getBlocks;
}

var getFollowers = {};

var hasRequiredGetFollowers;
function requireGetFollowers() {
  if (hasRequiredGetFollowers) return getFollowers;
  hasRequiredGetFollowers = 1;
  Object.defineProperty(getFollowers, "__esModule", {
    value: true
  });
  getFollowers.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getFollowers;
}

var getFollows = {};

var hasRequiredGetFollows;
function requireGetFollows() {
  if (hasRequiredGetFollows) return getFollows;
  hasRequiredGetFollows = 1;
  Object.defineProperty(getFollows, "__esModule", {
    value: true
  });
  getFollows.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getFollows;
}

var getKnownFollowers = {};

var hasRequiredGetKnownFollowers;
function requireGetKnownFollowers() {
  if (hasRequiredGetKnownFollowers) return getKnownFollowers;
  hasRequiredGetKnownFollowers = 1;
  Object.defineProperty(getKnownFollowers, "__esModule", {
    value: true
  });
  getKnownFollowers.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getKnownFollowers;
}

var getList = {};

var hasRequiredGetList;
function requireGetList() {
  if (hasRequiredGetList) return getList;
  hasRequiredGetList = 1;
  Object.defineProperty(getList, "__esModule", {
    value: true
  });
  getList.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getList;
}

var getListBlocks = {};

var hasRequiredGetListBlocks;
function requireGetListBlocks() {
  if (hasRequiredGetListBlocks) return getListBlocks;
  hasRequiredGetListBlocks = 1;
  Object.defineProperty(getListBlocks, "__esModule", {
    value: true
  });
  getListBlocks.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getListBlocks;
}

var getListMutes = {};

var hasRequiredGetListMutes;
function requireGetListMutes() {
  if (hasRequiredGetListMutes) return getListMutes;
  hasRequiredGetListMutes = 1;
  Object.defineProperty(getListMutes, "__esModule", {
    value: true
  });
  getListMutes.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getListMutes;
}

var getLists = {};

var hasRequiredGetLists;
function requireGetLists() {
  if (hasRequiredGetLists) return getLists;
  hasRequiredGetLists = 1;
  Object.defineProperty(getLists, "__esModule", {
    value: true
  });
  getLists.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getLists;
}

var getMutes = {};

var hasRequiredGetMutes;
function requireGetMutes() {
  if (hasRequiredGetMutes) return getMutes;
  hasRequiredGetMutes = 1;
  Object.defineProperty(getMutes, "__esModule", {
    value: true
  });
  getMutes.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getMutes;
}

var getStarterPack = {};

var hasRequiredGetStarterPack;
function requireGetStarterPack() {
  if (hasRequiredGetStarterPack) return getStarterPack;
  hasRequiredGetStarterPack = 1;
  Object.defineProperty(getStarterPack, "__esModule", {
    value: true
  });
  getStarterPack.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getStarterPack;
}

var getStarterPacks = {};

var hasRequiredGetStarterPacks;
function requireGetStarterPacks() {
  if (hasRequiredGetStarterPacks) return getStarterPacks;
  hasRequiredGetStarterPacks = 1;
  Object.defineProperty(getStarterPacks, "__esModule", {
    value: true
  });
  getStarterPacks.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getStarterPacks;
}

var getSuggestedFollowsByActor = {};

var hasRequiredGetSuggestedFollowsByActor;
function requireGetSuggestedFollowsByActor() {
  if (hasRequiredGetSuggestedFollowsByActor) return getSuggestedFollowsByActor;
  hasRequiredGetSuggestedFollowsByActor = 1;
  Object.defineProperty(getSuggestedFollowsByActor, "__esModule", {
    value: true
  });
  getSuggestedFollowsByActor.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getSuggestedFollowsByActor;
}

var list = {};

var hasRequiredList;
function requireList() {
  if (hasRequiredList) return list;
  hasRequiredList = 1;
  Object.defineProperty(list, "__esModule", {
    value: true
  });
  list.isRecord = isRecord;
  list.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.list#main' || v.$type === 'app.bsky.graph.list');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.list#main', v);
  }
  return list;
}

var listblock = {};

var hasRequiredListblock;
function requireListblock() {
  if (hasRequiredListblock) return listblock;
  hasRequiredListblock = 1;
  Object.defineProperty(listblock, "__esModule", {
    value: true
  });
  listblock.isRecord = isRecord;
  listblock.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.listblock#main' || v.$type === 'app.bsky.graph.listblock');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.listblock#main', v);
  }
  return listblock;
}

var listitem = {};

var hasRequiredListitem;
function requireListitem() {
  if (hasRequiredListitem) return listitem;
  hasRequiredListitem = 1;
  Object.defineProperty(listitem, "__esModule", {
    value: true
  });
  listitem.isRecord = isRecord;
  listitem.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.listitem#main' || v.$type === 'app.bsky.graph.listitem');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.listitem#main', v);
  }
  return listitem;
}

var muteActor = {};

var hasRequiredMuteActor;
function requireMuteActor() {
  if (hasRequiredMuteActor) return muteActor;
  hasRequiredMuteActor = 1;
  Object.defineProperty(muteActor, "__esModule", {
    value: true
  });
  muteActor.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return muteActor;
}

var muteActorList = {};

var hasRequiredMuteActorList;
function requireMuteActorList() {
  if (hasRequiredMuteActorList) return muteActorList;
  hasRequiredMuteActorList = 1;
  Object.defineProperty(muteActorList, "__esModule", {
    value: true
  });
  muteActorList.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return muteActorList;
}

var muteThread = {};

var hasRequiredMuteThread;
function requireMuteThread() {
  if (hasRequiredMuteThread) return muteThread;
  hasRequiredMuteThread = 1;
  Object.defineProperty(muteThread, "__esModule", {
    value: true
  });
  muteThread.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return muteThread;
}

var searchStarterPacks = {};

var hasRequiredSearchStarterPacks;
function requireSearchStarterPacks() {
  if (hasRequiredSearchStarterPacks) return searchStarterPacks;
  hasRequiredSearchStarterPacks = 1;
  Object.defineProperty(searchStarterPacks, "__esModule", {
    value: true
  });
  searchStarterPacks.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return searchStarterPacks;
}

var starterpack = {};

var hasRequiredStarterpack;
function requireStarterpack() {
  if (hasRequiredStarterpack) return starterpack;
  hasRequiredStarterpack = 1;
  Object.defineProperty(starterpack, "__esModule", {
    value: true
  });
  starterpack.isRecord = isRecord;
  starterpack.validateRecord = validateRecord;
  starterpack.isFeedItem = isFeedItem;
  starterpack.validateFeedItem = validateFeedItem;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.graph.starterpack#main' || v.$type === 'app.bsky.graph.starterpack');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.starterpack#main', v);
  }
  function isFeedItem(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.graph.starterpack#feedItem';
  }
  function validateFeedItem(v) {
    return lexicons_1.lexicons.validate('app.bsky.graph.starterpack#feedItem', v);
  }
  return starterpack;
}

var unmuteActor = {};

var hasRequiredUnmuteActor;
function requireUnmuteActor() {
  if (hasRequiredUnmuteActor) return unmuteActor;
  hasRequiredUnmuteActor = 1;
  Object.defineProperty(unmuteActor, "__esModule", {
    value: true
  });
  unmuteActor.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return unmuteActor;
}

var unmuteActorList = {};

var hasRequiredUnmuteActorList;
function requireUnmuteActorList() {
  if (hasRequiredUnmuteActorList) return unmuteActorList;
  hasRequiredUnmuteActorList = 1;
  Object.defineProperty(unmuteActorList, "__esModule", {
    value: true
  });
  unmuteActorList.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return unmuteActorList;
}

var unmuteThread = {};

var hasRequiredUnmuteThread;
function requireUnmuteThread() {
  if (hasRequiredUnmuteThread) return unmuteThread;
  hasRequiredUnmuteThread = 1;
  Object.defineProperty(unmuteThread, "__esModule", {
    value: true
  });
  unmuteThread.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return unmuteThread;
}

var defs$a = {};

var hasRequiredDefs$a;
function requireDefs$a() {
  if (hasRequiredDefs$a) return defs$a;
  hasRequiredDefs$a = 1;
  Object.defineProperty(defs$a, "__esModule", {
    value: true
  });
  defs$a.isLabelerView = isLabelerView;
  defs$a.validateLabelerView = validateLabelerView;
  defs$a.isLabelerViewDetailed = isLabelerViewDetailed;
  defs$a.validateLabelerViewDetailed = validateLabelerViewDetailed;
  defs$a.isLabelerViewerState = isLabelerViewerState;
  defs$a.validateLabelerViewerState = validateLabelerViewerState;
  defs$a.isLabelerPolicies = isLabelerPolicies;
  defs$a.validateLabelerPolicies = validateLabelerPolicies;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isLabelerView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerView';
  }
  function validateLabelerView(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.defs#labelerView', v);
  }
  function isLabelerViewDetailed(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerViewDetailed';
  }
  function validateLabelerViewDetailed(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.defs#labelerViewDetailed', v);
  }
  function isLabelerViewerState(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerViewerState';
  }
  function validateLabelerViewerState(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.defs#labelerViewerState', v);
  }
  function isLabelerPolicies(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.labeler.defs#labelerPolicies';
  }
  function validateLabelerPolicies(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.defs#labelerPolicies', v);
  }
  return defs$a;
}

var getServices = {};

var hasRequiredGetServices;
function requireGetServices() {
  if (hasRequiredGetServices) return getServices;
  hasRequiredGetServices = 1;
  Object.defineProperty(getServices, "__esModule", {
    value: true
  });
  getServices.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getServices;
}

var service = {};

var hasRequiredService;
function requireService() {
  if (hasRequiredService) return service;
  hasRequiredService = 1;
  Object.defineProperty(service, "__esModule", {
    value: true
  });
  service.isRecord = isRecord;
  service.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.labeler.service#main' || v.$type === 'app.bsky.labeler.service');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('app.bsky.labeler.service#main', v);
  }
  return service;
}

var getUnreadCount = {};

var hasRequiredGetUnreadCount;
function requireGetUnreadCount() {
  if (hasRequiredGetUnreadCount) return getUnreadCount;
  hasRequiredGetUnreadCount = 1;
  Object.defineProperty(getUnreadCount, "__esModule", {
    value: true
  });
  getUnreadCount.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getUnreadCount;
}

var listNotifications = {};

var hasRequiredListNotifications;
function requireListNotifications() {
  if (hasRequiredListNotifications) return listNotifications;
  hasRequiredListNotifications = 1;
  Object.defineProperty(listNotifications, "__esModule", {
    value: true
  });
  listNotifications.toKnownErr = toKnownErr;
  listNotifications.isNotification = isNotification;
  listNotifications.validateNotification = validateNotification;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isNotification(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.notification.listNotifications#notification';
  }
  function validateNotification(v) {
    return lexicons_1.lexicons.validate('app.bsky.notification.listNotifications#notification', v);
  }
  return listNotifications;
}

var putPreferences = {};

var hasRequiredPutPreferences;
function requirePutPreferences() {
  if (hasRequiredPutPreferences) return putPreferences;
  hasRequiredPutPreferences = 1;
  Object.defineProperty(putPreferences, "__esModule", {
    value: true
  });
  putPreferences.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return putPreferences;
}

var registerPush = {};

var hasRequiredRegisterPush;
function requireRegisterPush() {
  if (hasRequiredRegisterPush) return registerPush;
  hasRequiredRegisterPush = 1;
  Object.defineProperty(registerPush, "__esModule", {
    value: true
  });
  registerPush.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return registerPush;
}

var updateSeen = {};

var hasRequiredUpdateSeen;
function requireUpdateSeen() {
  if (hasRequiredUpdateSeen) return updateSeen;
  hasRequiredUpdateSeen = 1;
  Object.defineProperty(updateSeen, "__esModule", {
    value: true
  });
  updateSeen.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return updateSeen;
}

var facet = {};

var hasRequiredFacet;
function requireFacet() {
  if (hasRequiredFacet) return facet;
  hasRequiredFacet = 1;
  Object.defineProperty(facet, "__esModule", {
    value: true
  });
  facet.isMain = isMain;
  facet.validateMain = validateMain;
  facet.isMention = isMention;
  facet.validateMention = validateMention;
  facet.isLink = isLink;
  facet.validateLink = validateLink;
  facet.isTag = isTag;
  facet.validateTag = validateTag;
  facet.isByteSlice = isByteSlice;
  facet.validateByteSlice = validateByteSlice;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMain(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'app.bsky.richtext.facet#main' || v.$type === 'app.bsky.richtext.facet');
  }
  function validateMain(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#main', v);
  }
  function isMention(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#mention';
  }
  function validateMention(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#mention', v);
  }
  function isLink(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#link';
  }
  function validateLink(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#link', v);
  }
  function isTag(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#tag';
  }
  function validateTag(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#tag', v);
  }
  function isByteSlice(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.richtext.facet#byteSlice';
  }
  function validateByteSlice(v) {
    return lexicons_1.lexicons.validate('app.bsky.richtext.facet#byteSlice', v);
  }
  return facet;
}

var defs$9 = {};

var hasRequiredDefs$9;
function requireDefs$9() {
  if (hasRequiredDefs$9) return defs$9;
  hasRequiredDefs$9 = 1;
  Object.defineProperty(defs$9, "__esModule", {
    value: true
  });
  defs$9.isSkeletonSearchPost = isSkeletonSearchPost;
  defs$9.validateSkeletonSearchPost = validateSkeletonSearchPost;
  defs$9.isSkeletonSearchActor = isSkeletonSearchActor;
  defs$9.validateSkeletonSearchActor = validateSkeletonSearchActor;
  defs$9.isSkeletonSearchStarterPack = isSkeletonSearchStarterPack;
  defs$9.validateSkeletonSearchStarterPack = validateSkeletonSearchStarterPack;
  defs$9.isTrendingTopic = isTrendingTopic;
  defs$9.validateTrendingTopic = validateTrendingTopic;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isSkeletonSearchPost(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#skeletonSearchPost';
  }
  function validateSkeletonSearchPost(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.defs#skeletonSearchPost', v);
  }
  function isSkeletonSearchActor(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#skeletonSearchActor';
  }
  function validateSkeletonSearchActor(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.defs#skeletonSearchActor', v);
  }
  function isSkeletonSearchStarterPack(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#skeletonSearchStarterPack';
  }
  function validateSkeletonSearchStarterPack(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.defs#skeletonSearchStarterPack', v);
  }
  function isTrendingTopic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.defs#trendingTopic';
  }
  function validateTrendingTopic(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.defs#trendingTopic', v);
  }
  return defs$9;
}

var getConfig$1 = {};

var hasRequiredGetConfig$1;
function requireGetConfig$1() {
  if (hasRequiredGetConfig$1) return getConfig$1;
  hasRequiredGetConfig$1 = 1;
  Object.defineProperty(getConfig$1, "__esModule", {
    value: true
  });
  getConfig$1.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getConfig$1;
}

var getPopularFeedGenerators = {};

var hasRequiredGetPopularFeedGenerators;
function requireGetPopularFeedGenerators() {
  if (hasRequiredGetPopularFeedGenerators) return getPopularFeedGenerators;
  hasRequiredGetPopularFeedGenerators = 1;
  Object.defineProperty(getPopularFeedGenerators, "__esModule", {
    value: true
  });
  getPopularFeedGenerators.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getPopularFeedGenerators;
}

var getSuggestionsSkeleton = {};

var hasRequiredGetSuggestionsSkeleton;
function requireGetSuggestionsSkeleton() {
  if (hasRequiredGetSuggestionsSkeleton) return getSuggestionsSkeleton;
  hasRequiredGetSuggestionsSkeleton = 1;
  Object.defineProperty(getSuggestionsSkeleton, "__esModule", {
    value: true
  });
  getSuggestionsSkeleton.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getSuggestionsSkeleton;
}

var getTaggedSuggestions = {};

var hasRequiredGetTaggedSuggestions;
function requireGetTaggedSuggestions() {
  if (hasRequiredGetTaggedSuggestions) return getTaggedSuggestions;
  hasRequiredGetTaggedSuggestions = 1;
  Object.defineProperty(getTaggedSuggestions, "__esModule", {
    value: true
  });
  getTaggedSuggestions.toKnownErr = toKnownErr;
  getTaggedSuggestions.isSuggestion = isSuggestion;
  getTaggedSuggestions.validateSuggestion = validateSuggestion;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isSuggestion(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.unspecced.getTaggedSuggestions#suggestion';
  }
  function validateSuggestion(v) {
    return lexicons_1.lexicons.validate('app.bsky.unspecced.getTaggedSuggestions#suggestion', v);
  }
  return getTaggedSuggestions;
}

var getTrendingTopics = {};

var hasRequiredGetTrendingTopics;
function requireGetTrendingTopics() {
  if (hasRequiredGetTrendingTopics) return getTrendingTopics;
  hasRequiredGetTrendingTopics = 1;
  Object.defineProperty(getTrendingTopics, "__esModule", {
    value: true
  });
  getTrendingTopics.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getTrendingTopics;
}

var defs$8 = {};

var hasRequiredDefs$8;
function requireDefs$8() {
  if (hasRequiredDefs$8) return defs$8;
  hasRequiredDefs$8 = 1;
  Object.defineProperty(defs$8, "__esModule", {
    value: true
  });
  defs$8.isJobStatus = isJobStatus;
  defs$8.validateJobStatus = validateJobStatus;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isJobStatus(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'app.bsky.video.defs#jobStatus';
  }
  function validateJobStatus(v) {
    return lexicons_1.lexicons.validate('app.bsky.video.defs#jobStatus', v);
  }
  return defs$8;
}

var getJobStatus = {};

var hasRequiredGetJobStatus;
function requireGetJobStatus() {
  if (hasRequiredGetJobStatus) return getJobStatus;
  hasRequiredGetJobStatus = 1;
  Object.defineProperty(getJobStatus, "__esModule", {
    value: true
  });
  getJobStatus.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getJobStatus;
}

var getUploadLimits = {};

var hasRequiredGetUploadLimits;
function requireGetUploadLimits() {
  if (hasRequiredGetUploadLimits) return getUploadLimits;
  hasRequiredGetUploadLimits = 1;
  Object.defineProperty(getUploadLimits, "__esModule", {
    value: true
  });
  getUploadLimits.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getUploadLimits;
}

var uploadVideo = {};

var hasRequiredUploadVideo;
function requireUploadVideo() {
  if (hasRequiredUploadVideo) return uploadVideo;
  hasRequiredUploadVideo = 1;
  Object.defineProperty(uploadVideo, "__esModule", {
    value: true
  });
  uploadVideo.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return uploadVideo;
}

var declaration = {};

var hasRequiredDeclaration;
function requireDeclaration() {
  if (hasRequiredDeclaration) return declaration;
  hasRequiredDeclaration = 1;
  Object.defineProperty(declaration, "__esModule", {
    value: true
  });
  declaration.isRecord = isRecord;
  declaration.validateRecord = validateRecord;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isRecord(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && (v.$type === 'chat.bsky.actor.declaration#main' || v.$type === 'chat.bsky.actor.declaration');
  }
  function validateRecord(v) {
    return lexicons_1.lexicons.validate('chat.bsky.actor.declaration#main', v);
  }
  return declaration;
}

var defs$7 = {};

var hasRequiredDefs$7;
function requireDefs$7() {
  if (hasRequiredDefs$7) return defs$7;
  hasRequiredDefs$7 = 1;
  Object.defineProperty(defs$7, "__esModule", {
    value: true
  });
  defs$7.isProfileViewBasic = isProfileViewBasic;
  defs$7.validateProfileViewBasic = validateProfileViewBasic;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isProfileViewBasic(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.actor.defs#profileViewBasic';
  }
  function validateProfileViewBasic(v) {
    return lexicons_1.lexicons.validate('chat.bsky.actor.defs#profileViewBasic', v);
  }
  return defs$7;
}

var deleteAccount = {};

var hasRequiredDeleteAccount;
function requireDeleteAccount() {
  if (hasRequiredDeleteAccount) return deleteAccount;
  hasRequiredDeleteAccount = 1;
  Object.defineProperty(deleteAccount, "__esModule", {
    value: true
  });
  deleteAccount.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return deleteAccount;
}

var exportAccountData = {};

var hasRequiredExportAccountData;
function requireExportAccountData() {
  if (hasRequiredExportAccountData) return exportAccountData;
  hasRequiredExportAccountData = 1;
  Object.defineProperty(exportAccountData, "__esModule", {
    value: true
  });
  exportAccountData.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return exportAccountData;
}

var defs$6 = {};

var hasRequiredDefs$6;
function requireDefs$6() {
  if (hasRequiredDefs$6) return defs$6;
  hasRequiredDefs$6 = 1;
  Object.defineProperty(defs$6, "__esModule", {
    value: true
  });
  defs$6.isMessageRef = isMessageRef;
  defs$6.validateMessageRef = validateMessageRef;
  defs$6.isMessageInput = isMessageInput;
  defs$6.validateMessageInput = validateMessageInput;
  defs$6.isMessageView = isMessageView;
  defs$6.validateMessageView = validateMessageView;
  defs$6.isDeletedMessageView = isDeletedMessageView;
  defs$6.validateDeletedMessageView = validateDeletedMessageView;
  defs$6.isMessageViewSender = isMessageViewSender;
  defs$6.validateMessageViewSender = validateMessageViewSender;
  defs$6.isConvoView = isConvoView;
  defs$6.validateConvoView = validateConvoView;
  defs$6.isLogBeginConvo = isLogBeginConvo;
  defs$6.validateLogBeginConvo = validateLogBeginConvo;
  defs$6.isLogLeaveConvo = isLogLeaveConvo;
  defs$6.validateLogLeaveConvo = validateLogLeaveConvo;
  defs$6.isLogCreateMessage = isLogCreateMessage;
  defs$6.validateLogCreateMessage = validateLogCreateMessage;
  defs$6.isLogDeleteMessage = isLogDeleteMessage;
  defs$6.validateLogDeleteMessage = validateLogDeleteMessage;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMessageRef(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#messageRef';
  }
  function validateMessageRef(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#messageRef', v);
  }
  function isMessageInput(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#messageInput';
  }
  function validateMessageInput(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#messageInput', v);
  }
  function isMessageView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#messageView';
  }
  function validateMessageView(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#messageView', v);
  }
  function isDeletedMessageView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#deletedMessageView';
  }
  function validateDeletedMessageView(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#deletedMessageView', v);
  }
  function isMessageViewSender(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#messageViewSender';
  }
  function validateMessageViewSender(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#messageViewSender', v);
  }
  function isConvoView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#convoView';
  }
  function validateConvoView(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#convoView', v);
  }
  function isLogBeginConvo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#logBeginConvo';
  }
  function validateLogBeginConvo(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#logBeginConvo', v);
  }
  function isLogLeaveConvo(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#logLeaveConvo';
  }
  function validateLogLeaveConvo(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#logLeaveConvo', v);
  }
  function isLogCreateMessage(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#logCreateMessage';
  }
  function validateLogCreateMessage(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#logCreateMessage', v);
  }
  function isLogDeleteMessage(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.defs#logDeleteMessage';
  }
  function validateLogDeleteMessage(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.defs#logDeleteMessage', v);
  }
  return defs$6;
}

var deleteMessageForSelf = {};

var hasRequiredDeleteMessageForSelf;
function requireDeleteMessageForSelf() {
  if (hasRequiredDeleteMessageForSelf) return deleteMessageForSelf;
  hasRequiredDeleteMessageForSelf = 1;
  Object.defineProperty(deleteMessageForSelf, "__esModule", {
    value: true
  });
  deleteMessageForSelf.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return deleteMessageForSelf;
}

var getConvo = {};

var hasRequiredGetConvo;
function requireGetConvo() {
  if (hasRequiredGetConvo) return getConvo;
  hasRequiredGetConvo = 1;
  Object.defineProperty(getConvo, "__esModule", {
    value: true
  });
  getConvo.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getConvo;
}

var getConvoForMembers = {};

var hasRequiredGetConvoForMembers;
function requireGetConvoForMembers() {
  if (hasRequiredGetConvoForMembers) return getConvoForMembers;
  hasRequiredGetConvoForMembers = 1;
  Object.defineProperty(getConvoForMembers, "__esModule", {
    value: true
  });
  getConvoForMembers.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getConvoForMembers;
}

var getLog = {};

var hasRequiredGetLog;
function requireGetLog() {
  if (hasRequiredGetLog) return getLog;
  hasRequiredGetLog = 1;
  Object.defineProperty(getLog, "__esModule", {
    value: true
  });
  getLog.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getLog;
}

var getMessages = {};

var hasRequiredGetMessages;
function requireGetMessages() {
  if (hasRequiredGetMessages) return getMessages;
  hasRequiredGetMessages = 1;
  Object.defineProperty(getMessages, "__esModule", {
    value: true
  });
  getMessages.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getMessages;
}

var leaveConvo = {};

var hasRequiredLeaveConvo;
function requireLeaveConvo() {
  if (hasRequiredLeaveConvo) return leaveConvo;
  hasRequiredLeaveConvo = 1;
  Object.defineProperty(leaveConvo, "__esModule", {
    value: true
  });
  leaveConvo.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return leaveConvo;
}

var listConvos = {};

var hasRequiredListConvos;
function requireListConvos() {
  if (hasRequiredListConvos) return listConvos;
  hasRequiredListConvos = 1;
  Object.defineProperty(listConvos, "__esModule", {
    value: true
  });
  listConvos.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return listConvos;
}

var muteConvo = {};

var hasRequiredMuteConvo;
function requireMuteConvo() {
  if (hasRequiredMuteConvo) return muteConvo;
  hasRequiredMuteConvo = 1;
  Object.defineProperty(muteConvo, "__esModule", {
    value: true
  });
  muteConvo.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return muteConvo;
}

var sendMessage = {};

var hasRequiredSendMessage;
function requireSendMessage() {
  if (hasRequiredSendMessage) return sendMessage;
  hasRequiredSendMessage = 1;
  Object.defineProperty(sendMessage, "__esModule", {
    value: true
  });
  sendMessage.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return sendMessage;
}

var sendMessageBatch = {};

var hasRequiredSendMessageBatch;
function requireSendMessageBatch() {
  if (hasRequiredSendMessageBatch) return sendMessageBatch;
  hasRequiredSendMessageBatch = 1;
  Object.defineProperty(sendMessageBatch, "__esModule", {
    value: true
  });
  sendMessageBatch.toKnownErr = toKnownErr;
  sendMessageBatch.isBatchItem = isBatchItem;
  sendMessageBatch.validateBatchItem = validateBatchItem;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isBatchItem(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.convo.sendMessageBatch#batchItem';
  }
  function validateBatchItem(v) {
    return lexicons_1.lexicons.validate('chat.bsky.convo.sendMessageBatch#batchItem', v);
  }
  return sendMessageBatch;
}

var unmuteConvo = {};

var hasRequiredUnmuteConvo;
function requireUnmuteConvo() {
  if (hasRequiredUnmuteConvo) return unmuteConvo;
  hasRequiredUnmuteConvo = 1;
  Object.defineProperty(unmuteConvo, "__esModule", {
    value: true
  });
  unmuteConvo.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return unmuteConvo;
}

var updateRead = {};

var hasRequiredUpdateRead;
function requireUpdateRead() {
  if (hasRequiredUpdateRead) return updateRead;
  hasRequiredUpdateRead = 1;
  Object.defineProperty(updateRead, "__esModule", {
    value: true
  });
  updateRead.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return updateRead;
}

var getActorMetadata = {};

var hasRequiredGetActorMetadata;
function requireGetActorMetadata() {
  if (hasRequiredGetActorMetadata) return getActorMetadata;
  hasRequiredGetActorMetadata = 1;
  Object.defineProperty(getActorMetadata, "__esModule", {
    value: true
  });
  getActorMetadata.toKnownErr = toKnownErr;
  getActorMetadata.isMetadata = isMetadata;
  getActorMetadata.validateMetadata = validateMetadata;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isMetadata(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'chat.bsky.moderation.getActorMetadata#metadata';
  }
  function validateMetadata(v) {
    return lexicons_1.lexicons.validate('chat.bsky.moderation.getActorMetadata#metadata', v);
  }
  return getActorMetadata;
}

var getMessageContext = {};

var hasRequiredGetMessageContext;
function requireGetMessageContext() {
  if (hasRequiredGetMessageContext) return getMessageContext;
  hasRequiredGetMessageContext = 1;
  Object.defineProperty(getMessageContext, "__esModule", {
    value: true
  });
  getMessageContext.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getMessageContext;
}

var updateActorAccess = {};

var hasRequiredUpdateActorAccess;
function requireUpdateActorAccess() {
  if (hasRequiredUpdateActorAccess) return updateActorAccess;
  hasRequiredUpdateActorAccess = 1;
  Object.defineProperty(updateActorAccess, "__esModule", {
    value: true
  });
  updateActorAccess.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return updateActorAccess;
}

var defs$5 = {};

var hasRequiredDefs$5;
function requireDefs$5() {
  if (hasRequiredDefs$5) return defs$5;
  hasRequiredDefs$5 = 1;
  Object.defineProperty(defs$5, "__esModule", {
    value: true
  });
  defs$5.isTemplateView = isTemplateView;
  defs$5.validateTemplateView = validateTemplateView;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isTemplateView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.communication.defs#templateView';
  }
  function validateTemplateView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.communication.defs#templateView', v);
  }
  return defs$5;
}

var deleteTemplate = {};

var hasRequiredDeleteTemplate;
function requireDeleteTemplate() {
  if (hasRequiredDeleteTemplate) return deleteTemplate;
  hasRequiredDeleteTemplate = 1;
  Object.defineProperty(deleteTemplate, "__esModule", {
    value: true
  });
  deleteTemplate.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return deleteTemplate;
}

var listTemplates = {};

var hasRequiredListTemplates;
function requireListTemplates() {
  if (hasRequiredListTemplates) return listTemplates;
  hasRequiredListTemplates = 1;
  Object.defineProperty(listTemplates, "__esModule", {
    value: true
  });
  listTemplates.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return listTemplates;
}

var defs$4 = {};

var hasRequiredDefs$4;
function requireDefs$4() {
  if (hasRequiredDefs$4) return defs$4;
  hasRequiredDefs$4 = 1;
  Object.defineProperty(defs$4, "__esModule", {
    value: true
  });
  defs$4.REVIEWNONE = defs$4.REVIEWCLOSED = defs$4.REVIEWESCALATED = defs$4.REVIEWOPEN = undefined;
  defs$4.isModEventView = isModEventView;
  defs$4.validateModEventView = validateModEventView;
  defs$4.isModEventViewDetail = isModEventViewDetail;
  defs$4.validateModEventViewDetail = validateModEventViewDetail;
  defs$4.isSubjectStatusView = isSubjectStatusView;
  defs$4.validateSubjectStatusView = validateSubjectStatusView;
  defs$4.isModEventTakedown = isModEventTakedown;
  defs$4.validateModEventTakedown = validateModEventTakedown;
  defs$4.isModEventReverseTakedown = isModEventReverseTakedown;
  defs$4.validateModEventReverseTakedown = validateModEventReverseTakedown;
  defs$4.isModEventResolveAppeal = isModEventResolveAppeal;
  defs$4.validateModEventResolveAppeal = validateModEventResolveAppeal;
  defs$4.isModEventComment = isModEventComment;
  defs$4.validateModEventComment = validateModEventComment;
  defs$4.isModEventReport = isModEventReport;
  defs$4.validateModEventReport = validateModEventReport;
  defs$4.isModEventLabel = isModEventLabel;
  defs$4.validateModEventLabel = validateModEventLabel;
  defs$4.isModEventAcknowledge = isModEventAcknowledge;
  defs$4.validateModEventAcknowledge = validateModEventAcknowledge;
  defs$4.isModEventEscalate = isModEventEscalate;
  defs$4.validateModEventEscalate = validateModEventEscalate;
  defs$4.isModEventMute = isModEventMute;
  defs$4.validateModEventMute = validateModEventMute;
  defs$4.isModEventUnmute = isModEventUnmute;
  defs$4.validateModEventUnmute = validateModEventUnmute;
  defs$4.isModEventMuteReporter = isModEventMuteReporter;
  defs$4.validateModEventMuteReporter = validateModEventMuteReporter;
  defs$4.isModEventUnmuteReporter = isModEventUnmuteReporter;
  defs$4.validateModEventUnmuteReporter = validateModEventUnmuteReporter;
  defs$4.isModEventEmail = isModEventEmail;
  defs$4.validateModEventEmail = validateModEventEmail;
  defs$4.isModEventDivert = isModEventDivert;
  defs$4.validateModEventDivert = validateModEventDivert;
  defs$4.isModEventTag = isModEventTag;
  defs$4.validateModEventTag = validateModEventTag;
  defs$4.isAccountEvent = isAccountEvent;
  defs$4.validateAccountEvent = validateAccountEvent;
  defs$4.isIdentityEvent = isIdentityEvent;
  defs$4.validateIdentityEvent = validateIdentityEvent;
  defs$4.isRecordEvent = isRecordEvent;
  defs$4.validateRecordEvent = validateRecordEvent;
  defs$4.isRepoView = isRepoView;
  defs$4.validateRepoView = validateRepoView;
  defs$4.isRepoViewDetail = isRepoViewDetail;
  defs$4.validateRepoViewDetail = validateRepoViewDetail;
  defs$4.isRepoViewNotFound = isRepoViewNotFound;
  defs$4.validateRepoViewNotFound = validateRepoViewNotFound;
  defs$4.isRecordView = isRecordView;
  defs$4.validateRecordView = validateRecordView;
  defs$4.isRecordViewDetail = isRecordViewDetail;
  defs$4.validateRecordViewDetail = validateRecordViewDetail;
  defs$4.isRecordViewNotFound = isRecordViewNotFound;
  defs$4.validateRecordViewNotFound = validateRecordViewNotFound;
  defs$4.isModeration = isModeration;
  defs$4.validateModeration = validateModeration;
  defs$4.isModerationDetail = isModerationDetail;
  defs$4.validateModerationDetail = validateModerationDetail;
  defs$4.isBlobView = isBlobView;
  defs$4.validateBlobView = validateBlobView;
  defs$4.isImageDetails = isImageDetails;
  defs$4.validateImageDetails = validateImageDetails;
  defs$4.isVideoDetails = isVideoDetails;
  defs$4.validateVideoDetails = validateVideoDetails;
  defs$4.isAccountHosting = isAccountHosting;
  defs$4.validateAccountHosting = validateAccountHosting;
  defs$4.isRecordHosting = isRecordHosting;
  defs$4.validateRecordHosting = validateRecordHosting;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isModEventView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventView';
  }
  function validateModEventView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventView', v);
  }
  function isModEventViewDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventViewDetail';
  }
  function validateModEventViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventViewDetail', v);
  }
  function isSubjectStatusView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#subjectStatusView';
  }
  function validateSubjectStatusView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#subjectStatusView', v);
  }
  /** Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator */
  defs$4.REVIEWOPEN = 'tools.ozone.moderation.defs#reviewOpen';
  /** Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator */
  defs$4.REVIEWESCALATED = 'tools.ozone.moderation.defs#reviewEscalated';
  /** Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator */
  defs$4.REVIEWCLOSED = 'tools.ozone.moderation.defs#reviewClosed';
  /** Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it */
  defs$4.REVIEWNONE = 'tools.ozone.moderation.defs#reviewNone';
  function isModEventTakedown(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventTakedown';
  }
  function validateModEventTakedown(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventTakedown', v);
  }
  function isModEventReverseTakedown(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventReverseTakedown';
  }
  function validateModEventReverseTakedown(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventReverseTakedown', v);
  }
  function isModEventResolveAppeal(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventResolveAppeal';
  }
  function validateModEventResolveAppeal(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventResolveAppeal', v);
  }
  function isModEventComment(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventComment';
  }
  function validateModEventComment(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventComment', v);
  }
  function isModEventReport(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventReport';
  }
  function validateModEventReport(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventReport', v);
  }
  function isModEventLabel(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventLabel';
  }
  function validateModEventLabel(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventLabel', v);
  }
  function isModEventAcknowledge(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventAcknowledge';
  }
  function validateModEventAcknowledge(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventAcknowledge', v);
  }
  function isModEventEscalate(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventEscalate';
  }
  function validateModEventEscalate(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventEscalate', v);
  }
  function isModEventMute(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventMute';
  }
  function validateModEventMute(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventMute', v);
  }
  function isModEventUnmute(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventUnmute';
  }
  function validateModEventUnmute(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventUnmute', v);
  }
  function isModEventMuteReporter(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventMuteReporter';
  }
  function validateModEventMuteReporter(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventMuteReporter', v);
  }
  function isModEventUnmuteReporter(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventUnmuteReporter';
  }
  function validateModEventUnmuteReporter(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventUnmuteReporter', v);
  }
  function isModEventEmail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventEmail';
  }
  function validateModEventEmail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventEmail', v);
  }
  function isModEventDivert(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventDivert';
  }
  function validateModEventDivert(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventDivert', v);
  }
  function isModEventTag(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#modEventTag';
  }
  function validateModEventTag(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventTag', v);
  }
  function isAccountEvent(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#accountEvent';
  }
  function validateAccountEvent(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#accountEvent', v);
  }
  function isIdentityEvent(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#identityEvent';
  }
  function validateIdentityEvent(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#identityEvent', v);
  }
  function isRecordEvent(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordEvent';
  }
  function validateRecordEvent(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordEvent', v);
  }
  function isRepoView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoView';
  }
  function validateRepoView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoView', v);
  }
  function isRepoViewDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoViewDetail';
  }
  function validateRepoViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoViewDetail', v);
  }
  function isRepoViewNotFound(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#repoViewNotFound';
  }
  function validateRepoViewNotFound(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoViewNotFound', v);
  }
  function isRecordView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordView';
  }
  function validateRecordView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordView', v);
  }
  function isRecordViewDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordViewDetail';
  }
  function validateRecordViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordViewDetail', v);
  }
  function isRecordViewNotFound(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordViewNotFound';
  }
  function validateRecordViewNotFound(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordViewNotFound', v);
  }
  function isModeration(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#moderation';
  }
  function validateModeration(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#moderation', v);
  }
  function isModerationDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#moderationDetail';
  }
  function validateModerationDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#moderationDetail', v);
  }
  function isBlobView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#blobView';
  }
  function validateBlobView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#blobView', v);
  }
  function isImageDetails(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#imageDetails';
  }
  function validateImageDetails(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#imageDetails', v);
  }
  function isVideoDetails(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#videoDetails';
  }
  function validateVideoDetails(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#videoDetails', v);
  }
  function isAccountHosting(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#accountHosting';
  }
  function validateAccountHosting(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#accountHosting', v);
  }
  function isRecordHosting(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.moderation.defs#recordHosting';
  }
  function validateRecordHosting(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordHosting', v);
  }
  return defs$4;
}

var getEvent = {};

var hasRequiredGetEvent;
function requireGetEvent() {
  if (hasRequiredGetEvent) return getEvent;
  hasRequiredGetEvent = 1;
  Object.defineProperty(getEvent, "__esModule", {
    value: true
  });
  getEvent.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getEvent;
}

var getRecords = {};

var hasRequiredGetRecords;
function requireGetRecords() {
  if (hasRequiredGetRecords) return getRecords;
  hasRequiredGetRecords = 1;
  Object.defineProperty(getRecords, "__esModule", {
    value: true
  });
  getRecords.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getRecords;
}

var getRepos = {};

var hasRequiredGetRepos;
function requireGetRepos() {
  if (hasRequiredGetRepos) return getRepos;
  hasRequiredGetRepos = 1;
  Object.defineProperty(getRepos, "__esModule", {
    value: true
  });
  getRepos.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return getRepos;
}

var queryEvents = {};

var hasRequiredQueryEvents;
function requireQueryEvents() {
  if (hasRequiredQueryEvents) return queryEvents;
  hasRequiredQueryEvents = 1;
  Object.defineProperty(queryEvents, "__esModule", {
    value: true
  });
  queryEvents.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return queryEvents;
}

var queryStatuses = {};

var hasRequiredQueryStatuses;
function requireQueryStatuses() {
  if (hasRequiredQueryStatuses) return queryStatuses;
  hasRequiredQueryStatuses = 1;
  Object.defineProperty(queryStatuses, "__esModule", {
    value: true
  });
  queryStatuses.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return queryStatuses;
}

var searchRepos = {};

var hasRequiredSearchRepos;
function requireSearchRepos() {
  if (hasRequiredSearchRepos) return searchRepos;
  hasRequiredSearchRepos = 1;
  Object.defineProperty(searchRepos, "__esModule", {
    value: true
  });
  searchRepos.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return searchRepos;
}

var getConfig = {};

var hasRequiredGetConfig;
function requireGetConfig() {
  if (hasRequiredGetConfig) return getConfig;
  hasRequiredGetConfig = 1;
  Object.defineProperty(getConfig, "__esModule", {
    value: true
  });
  getConfig.toKnownErr = toKnownErr;
  getConfig.isServiceConfig = isServiceConfig;
  getConfig.validateServiceConfig = validateServiceConfig;
  getConfig.isViewerConfig = isViewerConfig;
  getConfig.validateViewerConfig = validateViewerConfig;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isServiceConfig(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.server.getConfig#serviceConfig';
  }
  function validateServiceConfig(v) {
    return lexicons_1.lexicons.validate('tools.ozone.server.getConfig#serviceConfig', v);
  }
  function isViewerConfig(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.server.getConfig#viewerConfig';
  }
  function validateViewerConfig(v) {
    return lexicons_1.lexicons.validate('tools.ozone.server.getConfig#viewerConfig', v);
  }
  return getConfig;
}

var addValues = {};

var hasRequiredAddValues;
function requireAddValues() {
  if (hasRequiredAddValues) return addValues;
  hasRequiredAddValues = 1;
  Object.defineProperty(addValues, "__esModule", {
    value: true
  });
  addValues.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return addValues;
}

var defs$3 = {};

var hasRequiredDefs$3;
function requireDefs$3() {
  if (hasRequiredDefs$3) return defs$3;
  hasRequiredDefs$3 = 1;
  Object.defineProperty(defs$3, "__esModule", {
    value: true
  });
  defs$3.isSet = isSet;
  defs$3.validateSet = validateSet;
  defs$3.isSetView = isSetView;
  defs$3.validateSetView = validateSetView;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isSet(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.set.defs#set';
  }
  function validateSet(v) {
    return lexicons_1.lexicons.validate('tools.ozone.set.defs#set', v);
  }
  function isSetView(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.set.defs#setView';
  }
  function validateSetView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.set.defs#setView', v);
  }
  return defs$3;
}

var querySets = {};

var hasRequiredQuerySets;
function requireQuerySets() {
  if (hasRequiredQuerySets) return querySets;
  hasRequiredQuerySets = 1;
  Object.defineProperty(querySets, "__esModule", {
    value: true
  });
  querySets.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return querySets;
}

var upsertSet = {};

var hasRequiredUpsertSet;
function requireUpsertSet() {
  if (hasRequiredUpsertSet) return upsertSet;
  hasRequiredUpsertSet = 1;
  Object.defineProperty(upsertSet, "__esModule", {
    value: true
  });
  upsertSet.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return upsertSet;
}

var defs$2 = {};

var hasRequiredDefs$2;
function requireDefs$2() {
  if (hasRequiredDefs$2) return defs$2;
  hasRequiredDefs$2 = 1;
  Object.defineProperty(defs$2, "__esModule", {
    value: true
  });
  defs$2.isOption = isOption;
  defs$2.validateOption = validateOption;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isOption(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.setting.defs#option';
  }
  function validateOption(v) {
    return lexicons_1.lexicons.validate('tools.ozone.setting.defs#option', v);
  }
  return defs$2;
}

var listOptions = {};

var hasRequiredListOptions;
function requireListOptions() {
  if (hasRequiredListOptions) return listOptions;
  hasRequiredListOptions = 1;
  Object.defineProperty(listOptions, "__esModule", {
    value: true
  });
  listOptions.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return listOptions;
}

var removeOptions = {};

var hasRequiredRemoveOptions;
function requireRemoveOptions() {
  if (hasRequiredRemoveOptions) return removeOptions;
  hasRequiredRemoveOptions = 1;
  Object.defineProperty(removeOptions, "__esModule", {
    value: true
  });
  removeOptions.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return removeOptions;
}

var upsertOption = {};

var hasRequiredUpsertOption;
function requireUpsertOption() {
  if (hasRequiredUpsertOption) return upsertOption;
  hasRequiredUpsertOption = 1;
  Object.defineProperty(upsertOption, "__esModule", {
    value: true
  });
  upsertOption.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return upsertOption;
}

var defs$1 = {};

var hasRequiredDefs$1;
function requireDefs$1() {
  if (hasRequiredDefs$1) return defs$1;
  hasRequiredDefs$1 = 1;
  Object.defineProperty(defs$1, "__esModule", {
    value: true
  });
  defs$1.isSigDetail = isSigDetail;
  defs$1.validateSigDetail = validateSigDetail;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isSigDetail(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.signature.defs#sigDetail';
  }
  function validateSigDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.signature.defs#sigDetail', v);
  }
  return defs$1;
}

var findCorrelation = {};

var hasRequiredFindCorrelation;
function requireFindCorrelation() {
  if (hasRequiredFindCorrelation) return findCorrelation;
  hasRequiredFindCorrelation = 1;
  Object.defineProperty(findCorrelation, "__esModule", {
    value: true
  });
  findCorrelation.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return findCorrelation;
}

var findRelatedAccounts = {};

var hasRequiredFindRelatedAccounts;
function requireFindRelatedAccounts() {
  if (hasRequiredFindRelatedAccounts) return findRelatedAccounts;
  hasRequiredFindRelatedAccounts = 1;
  Object.defineProperty(findRelatedAccounts, "__esModule", {
    value: true
  });
  findRelatedAccounts.toKnownErr = toKnownErr;
  findRelatedAccounts.isRelatedAccount = isRelatedAccount;
  findRelatedAccounts.validateRelatedAccount = validateRelatedAccount;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function toKnownErr(e) {
    return e;
  }
  function isRelatedAccount(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.signature.findRelatedAccounts#relatedAccount';
  }
  function validateRelatedAccount(v) {
    return lexicons_1.lexicons.validate('tools.ozone.signature.findRelatedAccounts#relatedAccount', v);
  }
  return findRelatedAccounts;
}

var searchAccounts = {};

var hasRequiredSearchAccounts;
function requireSearchAccounts() {
  if (hasRequiredSearchAccounts) return searchAccounts;
  hasRequiredSearchAccounts = 1;
  Object.defineProperty(searchAccounts, "__esModule", {
    value: true
  });
  searchAccounts.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return searchAccounts;
}

var defs = {};

var hasRequiredDefs;
function requireDefs() {
  if (hasRequiredDefs) return defs;
  hasRequiredDefs = 1;
  Object.defineProperty(defs, "__esModule", {
    value: true
  });
  defs.ROLETRIAGE = defs.ROLEMODERATOR = defs.ROLEADMIN = undefined;
  defs.isMember = isMember;
  defs.validateMember = validateMember;
  const util_1 = requireUtil$2();
  const lexicons_1 = requireLexicons();
  function isMember(v) {
    return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, '$type') && v.$type === 'tools.ozone.team.defs#member';
  }
  function validateMember(v) {
    return lexicons_1.lexicons.validate('tools.ozone.team.defs#member', v);
  }
  /** Admin role. Highest level of access, can perform all actions. */
  defs.ROLEADMIN = 'tools.ozone.team.defs#roleAdmin';
  /** Moderator role. Can perform most actions. */
  defs.ROLEMODERATOR = 'tools.ozone.team.defs#roleModerator';
  /** Triage role. Mostly intended for monitoring and escalating issues. */
  defs.ROLETRIAGE = 'tools.ozone.team.defs#roleTriage';
  return defs;
}

var listMembers = {};

var hasRequiredListMembers;
function requireListMembers() {
  if (hasRequiredListMembers) return listMembers;
  hasRequiredListMembers = 1;
  Object.defineProperty(listMembers, "__esModule", {
    value: true
  });
  listMembers.toKnownErr = toKnownErr;
  function toKnownErr(e) {
    return e;
  }
  return listMembers;
}

var hasRequiredClient;
function requireClient() {
  if (hasRequiredClient) return client$1;
  hasRequiredClient = 1;
  var __createBinding = client$1.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function () {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = client$1.__setModuleDefault || (Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  });
  var __importStar = client$1.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(client$1, "__esModule", {
    value: true
  });
  client$1.ComAtprotoServerDeleteSession = client$1.ComAtprotoServerDeleteAccount = client$1.ComAtprotoServerDefs = client$1.ComAtprotoServerDeactivateAccount = client$1.ComAtprotoServerCreateSession = client$1.ComAtprotoServerCreateInviteCodes = client$1.ComAtprotoServerCreateInviteCode = client$1.ComAtprotoServerCreateAppPassword = client$1.ComAtprotoServerCreateAccount = client$1.ComAtprotoServerConfirmEmail = client$1.ComAtprotoServerCheckAccountStatus = client$1.ComAtprotoServerActivateAccount = client$1.ComAtprotoRepoUploadBlob = client$1.ComAtprotoRepoStrongRef = client$1.ComAtprotoRepoPutRecord = client$1.ComAtprotoRepoListRecords = client$1.ComAtprotoRepoListMissingBlobs = client$1.ComAtprotoRepoImportRepo = client$1.ComAtprotoRepoGetRecord = client$1.ComAtprotoRepoDescribeRepo = client$1.ComAtprotoRepoDeleteRecord = client$1.ComAtprotoRepoDefs = client$1.ComAtprotoRepoCreateRecord = client$1.ComAtprotoRepoApplyWrites = client$1.ComAtprotoModerationDefs = client$1.ComAtprotoModerationCreateReport = client$1.ComAtprotoLabelSubscribeLabels = client$1.ComAtprotoLabelQueryLabels = client$1.ComAtprotoLabelDefs = client$1.ComAtprotoIdentityUpdateHandle = client$1.ComAtprotoIdentitySubmitPlcOperation = client$1.ComAtprotoIdentitySignPlcOperation = client$1.ComAtprotoIdentityResolveHandle = client$1.ComAtprotoIdentityRequestPlcOperationSignature = client$1.ComAtprotoIdentityGetRecommendedDidCredentials = client$1.ComAtprotoAdminUpdateSubjectStatus = client$1.ComAtprotoAdminUpdateAccountPassword = client$1.ComAtprotoAdminUpdateAccountHandle = client$1.ComAtprotoAdminUpdateAccountEmail = client$1.ComAtprotoAdminSendEmail = client$1.ComAtprotoAdminSearchAccounts = client$1.ComAtprotoAdminGetSubjectStatus = client$1.ComAtprotoAdminGetInviteCodes = client$1.ComAtprotoAdminGetAccountInfos = client$1.ComAtprotoAdminGetAccountInfo = client$1.ComAtprotoAdminEnableAccountInvites = client$1.ComAtprotoAdminDisableInviteCodes = client$1.ComAtprotoAdminDisableAccountInvites = client$1.ComAtprotoAdminDeleteAccount = client$1.ComAtprotoAdminDefs = undefined;
  client$1.AppBskyFeedGetActorFeeds = client$1.AppBskyFeedGenerator = client$1.AppBskyFeedDescribeFeedGenerator = client$1.AppBskyFeedDefs = client$1.AppBskyEmbedVideo = client$1.AppBskyEmbedRecordWithMedia = client$1.AppBskyEmbedRecord = client$1.AppBskyEmbedImages = client$1.AppBskyEmbedExternal = client$1.AppBskyEmbedDefs = client$1.AppBskyActorSearchActorsTypeahead = client$1.AppBskyActorSearchActors = client$1.AppBskyActorPutPreferences = client$1.AppBskyActorProfile = client$1.AppBskyActorGetSuggestions = client$1.AppBskyActorGetProfiles = client$1.AppBskyActorGetProfile = client$1.AppBskyActorGetPreferences = client$1.AppBskyActorDefs = client$1.ComAtprotoTempRequestPhoneVerification = client$1.ComAtprotoTempFetchLabels = client$1.ComAtprotoTempCheckSignupQueue = client$1.ComAtprotoTempAddReservedHandle = client$1.ComAtprotoSyncSubscribeRepos = client$1.ComAtprotoSyncRequestCrawl = client$1.ComAtprotoSyncNotifyOfUpdate = client$1.ComAtprotoSyncListRepos = client$1.ComAtprotoSyncListBlobs = client$1.ComAtprotoSyncGetRepoStatus = client$1.ComAtprotoSyncGetRepo = client$1.ComAtprotoSyncGetRecord = client$1.ComAtprotoSyncGetLatestCommit = client$1.ComAtprotoSyncGetHead = client$1.ComAtprotoSyncGetCheckout = client$1.ComAtprotoSyncGetBlocks = client$1.ComAtprotoSyncGetBlob = client$1.ComAtprotoServerUpdateEmail = client$1.ComAtprotoServerRevokeAppPassword = client$1.ComAtprotoServerResetPassword = client$1.ComAtprotoServerReserveSigningKey = client$1.ComAtprotoServerRequestPasswordReset = client$1.ComAtprotoServerRequestEmailUpdate = client$1.ComAtprotoServerRequestEmailConfirmation = client$1.ComAtprotoServerRequestAccountDelete = client$1.ComAtprotoServerRefreshSession = client$1.ComAtprotoServerListAppPasswords = client$1.ComAtprotoServerGetSession = client$1.ComAtprotoServerGetServiceAuth = client$1.ComAtprotoServerGetAccountInviteCodes = client$1.ComAtprotoServerDescribeServer = undefined;
  client$1.AppBskyLabelerDefs = client$1.AppBskyGraphUnmuteThread = client$1.AppBskyGraphUnmuteActorList = client$1.AppBskyGraphUnmuteActor = client$1.AppBskyGraphStarterpack = client$1.AppBskyGraphSearchStarterPacks = client$1.AppBskyGraphMuteThread = client$1.AppBskyGraphMuteActorList = client$1.AppBskyGraphMuteActor = client$1.AppBskyGraphListitem = client$1.AppBskyGraphListblock = client$1.AppBskyGraphList = client$1.AppBskyGraphGetSuggestedFollowsByActor = client$1.AppBskyGraphGetStarterPacks = client$1.AppBskyGraphGetStarterPack = client$1.AppBskyGraphGetRelationships = client$1.AppBskyGraphGetMutes = client$1.AppBskyGraphGetLists = client$1.AppBskyGraphGetListMutes = client$1.AppBskyGraphGetListBlocks = client$1.AppBskyGraphGetList = client$1.AppBskyGraphGetKnownFollowers = client$1.AppBskyGraphGetFollows = client$1.AppBskyGraphGetFollowers = client$1.AppBskyGraphGetBlocks = client$1.AppBskyGraphGetActorStarterPacks = client$1.AppBskyGraphFollow = client$1.AppBskyGraphDefs = client$1.AppBskyGraphBlock = client$1.AppBskyFeedThreadgate = client$1.AppBskyFeedSendInteractions = client$1.AppBskyFeedSearchPosts = client$1.AppBskyFeedRepost = client$1.AppBskyFeedPostgate = client$1.AppBskyFeedPost = client$1.AppBskyFeedLike = client$1.AppBskyFeedGetTimeline = client$1.AppBskyFeedGetSuggestedFeeds = client$1.AppBskyFeedGetRepostedBy = client$1.AppBskyFeedGetQuotes = client$1.AppBskyFeedGetPosts = client$1.AppBskyFeedGetPostThread = client$1.AppBskyFeedGetListFeed = client$1.AppBskyFeedGetLikes = client$1.AppBskyFeedGetFeedSkeleton = client$1.AppBskyFeedGetFeedGenerators = client$1.AppBskyFeedGetFeedGenerator = client$1.AppBskyFeedGetFeed = client$1.AppBskyFeedGetAuthorFeed = client$1.AppBskyFeedGetActorLikes = undefined;
  client$1.ToolsOzoneModerationGetRecord = client$1.ToolsOzoneModerationGetEvent = client$1.ToolsOzoneModerationEmitEvent = client$1.ToolsOzoneModerationDefs = client$1.ToolsOzoneCommunicationUpdateTemplate = client$1.ToolsOzoneCommunicationListTemplates = client$1.ToolsOzoneCommunicationDeleteTemplate = client$1.ToolsOzoneCommunicationDefs = client$1.ToolsOzoneCommunicationCreateTemplate = client$1.ChatBskyModerationUpdateActorAccess = client$1.ChatBskyModerationGetMessageContext = client$1.ChatBskyModerationGetActorMetadata = client$1.ChatBskyConvoUpdateRead = client$1.ChatBskyConvoUnmuteConvo = client$1.ChatBskyConvoSendMessageBatch = client$1.ChatBskyConvoSendMessage = client$1.ChatBskyConvoMuteConvo = client$1.ChatBskyConvoListConvos = client$1.ChatBskyConvoLeaveConvo = client$1.ChatBskyConvoGetMessages = client$1.ChatBskyConvoGetLog = client$1.ChatBskyConvoGetConvoForMembers = client$1.ChatBskyConvoGetConvo = client$1.ChatBskyConvoDeleteMessageForSelf = client$1.ChatBskyConvoDefs = client$1.ChatBskyActorExportAccountData = client$1.ChatBskyActorDeleteAccount = client$1.ChatBskyActorDefs = client$1.ChatBskyActorDeclaration = client$1.AppBskyVideoUploadVideo = client$1.AppBskyVideoGetUploadLimits = client$1.AppBskyVideoGetJobStatus = client$1.AppBskyVideoDefs = client$1.AppBskyUnspeccedSearchStarterPacksSkeleton = client$1.AppBskyUnspeccedSearchPostsSkeleton = client$1.AppBskyUnspeccedSearchActorsSkeleton = client$1.AppBskyUnspeccedGetTrendingTopics = client$1.AppBskyUnspeccedGetTaggedSuggestions = client$1.AppBskyUnspeccedGetSuggestionsSkeleton = client$1.AppBskyUnspeccedGetPopularFeedGenerators = client$1.AppBskyUnspeccedGetConfig = client$1.AppBskyUnspeccedDefs = client$1.AppBskyRichtextFacet = client$1.AppBskyNotificationUpdateSeen = client$1.AppBskyNotificationRegisterPush = client$1.AppBskyNotificationPutPreferences = client$1.AppBskyNotificationListNotifications = client$1.AppBskyNotificationGetUnreadCount = client$1.AppBskyLabelerService = client$1.AppBskyLabelerGetServices = undefined;
  client$1.GeneratorRecord = client$1.AppBskyFeedNS = client$1.AppBskyEmbedNS = client$1.ProfileRecord = client$1.AppBskyActorNS = client$1.AppBskyNS = client$1.AppNS = client$1.ComAtprotoTempNS = client$1.ComAtprotoSyncNS = client$1.ComAtprotoServerNS = client$1.ComAtprotoRepoNS = client$1.ComAtprotoModerationNS = client$1.ComAtprotoLabelNS = client$1.ComAtprotoIdentityNS = client$1.ComAtprotoAdminNS = client$1.ComAtprotoNS = client$1.ComNS = client$1.AtpBaseClient = client$1.TOOLS_OZONE_TEAM = client$1.TOOLS_OZONE_MODERATION = client$1.APP_BSKY_GRAPH = client$1.APP_BSKY_FEED = client$1.COM_ATPROTO_MODERATION = client$1.ToolsOzoneTeamUpdateMember = client$1.ToolsOzoneTeamListMembers = client$1.ToolsOzoneTeamDeleteMember = client$1.ToolsOzoneTeamDefs = client$1.ToolsOzoneTeamAddMember = client$1.ToolsOzoneSignatureSearchAccounts = client$1.ToolsOzoneSignatureFindRelatedAccounts = client$1.ToolsOzoneSignatureFindCorrelation = client$1.ToolsOzoneSignatureDefs = client$1.ToolsOzoneSettingUpsertOption = client$1.ToolsOzoneSettingRemoveOptions = client$1.ToolsOzoneSettingListOptions = client$1.ToolsOzoneSettingDefs = client$1.ToolsOzoneSetUpsertSet = client$1.ToolsOzoneSetQuerySets = client$1.ToolsOzoneSetGetValues = client$1.ToolsOzoneSetDeleteValues = client$1.ToolsOzoneSetDeleteSet = client$1.ToolsOzoneSetDefs = client$1.ToolsOzoneSetAddValues = client$1.ToolsOzoneServerGetConfig = client$1.ToolsOzoneModerationSearchRepos = client$1.ToolsOzoneModerationQueryStatuses = client$1.ToolsOzoneModerationQueryEvents = client$1.ToolsOzoneModerationGetRepos = client$1.ToolsOzoneModerationGetRepo = client$1.ToolsOzoneModerationGetRecords = undefined;
  client$1.ToolsOzoneTeamNS = client$1.ToolsOzoneSignatureNS = client$1.ToolsOzoneSettingNS = client$1.ToolsOzoneSetNS = client$1.ToolsOzoneServerNS = client$1.ToolsOzoneModerationNS = client$1.ToolsOzoneCommunicationNS = client$1.ToolsOzoneNS = client$1.ToolsNS = client$1.ChatBskyModerationNS = client$1.ChatBskyConvoNS = client$1.DeclarationRecord = client$1.ChatBskyActorNS = client$1.ChatBskyNS = client$1.ChatNS = client$1.AppBskyVideoNS = client$1.AppBskyUnspeccedNS = client$1.AppBskyRichtextNS = client$1.AppBskyNotificationNS = client$1.ServiceRecord = client$1.AppBskyLabelerNS = client$1.StarterpackRecord = client$1.ListitemRecord = client$1.ListblockRecord = client$1.ListRecord = client$1.FollowRecord = client$1.BlockRecord = client$1.AppBskyGraphNS = client$1.ThreadgateRecord = client$1.RepostRecord = client$1.PostgateRecord = client$1.PostRecord = client$1.LikeRecord = undefined;
  /**
   * GENERATED CODE - DO NOT MODIFY
   */
  const xrpc_1 = requireDist$1();
  const lexicons_1 = requireLexicons();
  const ComAtprotoRepoApplyWrites = __importStar(requireApplyWrites());
  const ComAtprotoRepoCreateRecord = __importStar(requireCreateRecord());
  const ComAtprotoRepoDeleteRecord = __importStar(requireDeleteRecord());
  const ComAtprotoRepoGetRecord = __importStar(requireGetRecord$2());
  const ComAtprotoRepoPutRecord = __importStar(requirePutRecord());
  const ComAtprotoServerConfirmEmail = __importStar(requireConfirmEmail());
  const ComAtprotoServerCreateAccount = __importStar(requireCreateAccount());
  const ComAtprotoServerCreateAppPassword = __importStar(requireCreateAppPassword());
  const ComAtprotoServerCreateSession = __importStar(requireCreateSession());
  const ComAtprotoServerDeleteAccount = __importStar(requireDeleteAccount$2());
  const ComAtprotoServerGetAccountInviteCodes = __importStar(requireGetAccountInviteCodes());
  const ComAtprotoServerGetServiceAuth = __importStar(requireGetServiceAuth());
  const ComAtprotoServerListAppPasswords = __importStar(requireListAppPasswords());
  const ComAtprotoServerRefreshSession = __importStar(requireRefreshSession());
  const ComAtprotoServerResetPassword = __importStar(requireResetPassword());
  const ComAtprotoServerUpdateEmail = __importStar(requireUpdateEmail());
  const ComAtprotoSyncGetBlob = __importStar(requireGetBlob());
  const ComAtprotoSyncGetBlocks = __importStar(requireGetBlocks$1());
  const ComAtprotoSyncGetHead = __importStar(requireGetHead());
  const ComAtprotoSyncGetLatestCommit = __importStar(requireGetLatestCommit());
  const ComAtprotoSyncGetRecord = __importStar(requireGetRecord$1());
  const ComAtprotoSyncGetRepo = __importStar(requireGetRepo$1());
  const ComAtprotoSyncGetRepoStatus = __importStar(requireGetRepoStatus());
  const ComAtprotoSyncListBlobs = __importStar(requireListBlobs());
  const AppBskyFeedGetActorLikes = __importStar(requireGetActorLikes());
  const AppBskyFeedGetAuthorFeed = __importStar(requireGetAuthorFeed());
  const AppBskyFeedGetFeed = __importStar(requireGetFeed());
  const AppBskyFeedGetFeedSkeleton = __importStar(requireGetFeedSkeleton());
  const AppBskyFeedGetListFeed = __importStar(requireGetListFeed());
  const AppBskyFeedGetPostThread = __importStar(requireGetPostThread());
  const AppBskyFeedSearchPosts = __importStar(requireSearchPosts());
  const AppBskyGraphGetRelationships = __importStar(requireGetRelationships());
  const AppBskyUnspeccedSearchActorsSkeleton = __importStar(requireSearchActorsSkeleton());
  const AppBskyUnspeccedSearchPostsSkeleton = __importStar(requireSearchPostsSkeleton());
  const AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(requireSearchStarterPacksSkeleton());
  const ToolsOzoneCommunicationCreateTemplate = __importStar(requireCreateTemplate());
  const ToolsOzoneCommunicationUpdateTemplate = __importStar(requireUpdateTemplate());
  const ToolsOzoneModerationEmitEvent = __importStar(requireEmitEvent());
  const ToolsOzoneModerationGetRecord = __importStar(requireGetRecord());
  const ToolsOzoneModerationGetRepo = __importStar(requireGetRepo());
  const ToolsOzoneSetDeleteSet = __importStar(requireDeleteSet());
  const ToolsOzoneSetDeleteValues = __importStar(requireDeleteValues());
  const ToolsOzoneSetGetValues = __importStar(requireGetValues());
  const ToolsOzoneTeamAddMember = __importStar(requireAddMember());
  const ToolsOzoneTeamDeleteMember = __importStar(requireDeleteMember());
  const ToolsOzoneTeamUpdateMember = __importStar(requireUpdateMember());
  client$1.ComAtprotoAdminDefs = __importStar(requireDefs$j());
  client$1.ComAtprotoAdminDeleteAccount = __importStar(requireDeleteAccount$1());
  client$1.ComAtprotoAdminDisableAccountInvites = __importStar(requireDisableAccountInvites());
  client$1.ComAtprotoAdminDisableInviteCodes = __importStar(requireDisableInviteCodes());
  client$1.ComAtprotoAdminEnableAccountInvites = __importStar(requireEnableAccountInvites());
  client$1.ComAtprotoAdminGetAccountInfo = __importStar(requireGetAccountInfo());
  client$1.ComAtprotoAdminGetAccountInfos = __importStar(requireGetAccountInfos());
  client$1.ComAtprotoAdminGetInviteCodes = __importStar(requireGetInviteCodes());
  client$1.ComAtprotoAdminGetSubjectStatus = __importStar(requireGetSubjectStatus());
  client$1.ComAtprotoAdminSearchAccounts = __importStar(requireSearchAccounts$1());
  client$1.ComAtprotoAdminSendEmail = __importStar(requireSendEmail());
  client$1.ComAtprotoAdminUpdateAccountEmail = __importStar(requireUpdateAccountEmail());
  client$1.ComAtprotoAdminUpdateAccountHandle = __importStar(requireUpdateAccountHandle());
  client$1.ComAtprotoAdminUpdateAccountPassword = __importStar(requireUpdateAccountPassword());
  client$1.ComAtprotoAdminUpdateSubjectStatus = __importStar(requireUpdateSubjectStatus());
  client$1.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(requireGetRecommendedDidCredentials());
  client$1.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(requireRequestPlcOperationSignature());
  client$1.ComAtprotoIdentityResolveHandle = __importStar(requireResolveHandle());
  client$1.ComAtprotoIdentitySignPlcOperation = __importStar(requireSignPlcOperation());
  client$1.ComAtprotoIdentitySubmitPlcOperation = __importStar(requireSubmitPlcOperation());
  client$1.ComAtprotoIdentityUpdateHandle = __importStar(requireUpdateHandle());
  client$1.ComAtprotoLabelDefs = __importStar(requireDefs$i());
  client$1.ComAtprotoLabelQueryLabels = __importStar(requireQueryLabels());
  client$1.ComAtprotoLabelSubscribeLabels = __importStar(requireSubscribeLabels());
  client$1.ComAtprotoModerationCreateReport = __importStar(requireCreateReport());
  client$1.ComAtprotoModerationDefs = __importStar(requireDefs$h());
  client$1.ComAtprotoRepoApplyWrites = __importStar(requireApplyWrites());
  client$1.ComAtprotoRepoCreateRecord = __importStar(requireCreateRecord());
  client$1.ComAtprotoRepoDefs = __importStar(requireDefs$g());
  client$1.ComAtprotoRepoDeleteRecord = __importStar(requireDeleteRecord());
  client$1.ComAtprotoRepoDescribeRepo = __importStar(requireDescribeRepo());
  client$1.ComAtprotoRepoGetRecord = __importStar(requireGetRecord$2());
  client$1.ComAtprotoRepoImportRepo = __importStar(requireImportRepo());
  client$1.ComAtprotoRepoListMissingBlobs = __importStar(requireListMissingBlobs());
  client$1.ComAtprotoRepoListRecords = __importStar(requireListRecords());
  client$1.ComAtprotoRepoPutRecord = __importStar(requirePutRecord());
  client$1.ComAtprotoRepoStrongRef = __importStar(requireStrongRef());
  client$1.ComAtprotoRepoUploadBlob = __importStar(requireUploadBlob());
  client$1.ComAtprotoServerActivateAccount = __importStar(requireActivateAccount());
  client$1.ComAtprotoServerCheckAccountStatus = __importStar(requireCheckAccountStatus());
  client$1.ComAtprotoServerConfirmEmail = __importStar(requireConfirmEmail());
  client$1.ComAtprotoServerCreateAccount = __importStar(requireCreateAccount());
  client$1.ComAtprotoServerCreateAppPassword = __importStar(requireCreateAppPassword());
  client$1.ComAtprotoServerCreateInviteCode = __importStar(requireCreateInviteCode());
  client$1.ComAtprotoServerCreateInviteCodes = __importStar(requireCreateInviteCodes());
  client$1.ComAtprotoServerCreateSession = __importStar(requireCreateSession());
  client$1.ComAtprotoServerDeactivateAccount = __importStar(requireDeactivateAccount());
  client$1.ComAtprotoServerDefs = __importStar(requireDefs$f());
  client$1.ComAtprotoServerDeleteAccount = __importStar(requireDeleteAccount$2());
  client$1.ComAtprotoServerDeleteSession = __importStar(requireDeleteSession());
  client$1.ComAtprotoServerDescribeServer = __importStar(requireDescribeServer());
  client$1.ComAtprotoServerGetAccountInviteCodes = __importStar(requireGetAccountInviteCodes());
  client$1.ComAtprotoServerGetServiceAuth = __importStar(requireGetServiceAuth());
  client$1.ComAtprotoServerGetSession = __importStar(requireGetSession());
  client$1.ComAtprotoServerListAppPasswords = __importStar(requireListAppPasswords());
  client$1.ComAtprotoServerRefreshSession = __importStar(requireRefreshSession());
  client$1.ComAtprotoServerRequestAccountDelete = __importStar(requireRequestAccountDelete());
  client$1.ComAtprotoServerRequestEmailConfirmation = __importStar(requireRequestEmailConfirmation());
  client$1.ComAtprotoServerRequestEmailUpdate = __importStar(requireRequestEmailUpdate());
  client$1.ComAtprotoServerRequestPasswordReset = __importStar(requireRequestPasswordReset());
  client$1.ComAtprotoServerReserveSigningKey = __importStar(requireReserveSigningKey());
  client$1.ComAtprotoServerResetPassword = __importStar(requireResetPassword());
  client$1.ComAtprotoServerRevokeAppPassword = __importStar(requireRevokeAppPassword());
  client$1.ComAtprotoServerUpdateEmail = __importStar(requireUpdateEmail());
  client$1.ComAtprotoSyncGetBlob = __importStar(requireGetBlob());
  client$1.ComAtprotoSyncGetBlocks = __importStar(requireGetBlocks$1());
  client$1.ComAtprotoSyncGetCheckout = __importStar(requireGetCheckout());
  client$1.ComAtprotoSyncGetHead = __importStar(requireGetHead());
  client$1.ComAtprotoSyncGetLatestCommit = __importStar(requireGetLatestCommit());
  client$1.ComAtprotoSyncGetRecord = __importStar(requireGetRecord$1());
  client$1.ComAtprotoSyncGetRepo = __importStar(requireGetRepo$1());
  client$1.ComAtprotoSyncGetRepoStatus = __importStar(requireGetRepoStatus());
  client$1.ComAtprotoSyncListBlobs = __importStar(requireListBlobs());
  client$1.ComAtprotoSyncListRepos = __importStar(requireListRepos());
  client$1.ComAtprotoSyncNotifyOfUpdate = __importStar(requireNotifyOfUpdate());
  client$1.ComAtprotoSyncRequestCrawl = __importStar(requireRequestCrawl());
  client$1.ComAtprotoSyncSubscribeRepos = __importStar(requireSubscribeRepos());
  client$1.ComAtprotoTempAddReservedHandle = __importStar(requireAddReservedHandle());
  client$1.ComAtprotoTempCheckSignupQueue = __importStar(requireCheckSignupQueue());
  client$1.ComAtprotoTempFetchLabels = __importStar(requireFetchLabels());
  client$1.ComAtprotoTempRequestPhoneVerification = __importStar(requireRequestPhoneVerification());
  client$1.AppBskyActorDefs = __importStar(requireDefs$e());
  client$1.AppBskyActorGetPreferences = __importStar(requireGetPreferences());
  client$1.AppBskyActorGetProfile = __importStar(requireGetProfile());
  client$1.AppBskyActorGetProfiles = __importStar(requireGetProfiles());
  client$1.AppBskyActorGetSuggestions = __importStar(requireGetSuggestions());
  client$1.AppBskyActorProfile = __importStar(requireProfile$1());
  client$1.AppBskyActorPutPreferences = __importStar(requirePutPreferences$1());
  client$1.AppBskyActorSearchActors = __importStar(requireSearchActors());
  client$1.AppBskyActorSearchActorsTypeahead = __importStar(requireSearchActorsTypeahead());
  client$1.AppBskyEmbedDefs = __importStar(requireDefs$d());
  client$1.AppBskyEmbedExternal = __importStar(requireExternal());
  client$1.AppBskyEmbedImages = __importStar(requireImages());
  client$1.AppBskyEmbedRecord = __importStar(requireRecord());
  client$1.AppBskyEmbedRecordWithMedia = __importStar(requireRecordWithMedia());
  client$1.AppBskyEmbedVideo = __importStar(requireVideo());
  client$1.AppBskyFeedDefs = __importStar(requireDefs$c());
  client$1.AppBskyFeedDescribeFeedGenerator = __importStar(requireDescribeFeedGenerator());
  client$1.AppBskyFeedGenerator = __importStar(requireGenerator());
  client$1.AppBskyFeedGetActorFeeds = __importStar(requireGetActorFeeds());
  client$1.AppBskyFeedGetActorLikes = __importStar(requireGetActorLikes());
  client$1.AppBskyFeedGetAuthorFeed = __importStar(requireGetAuthorFeed());
  client$1.AppBskyFeedGetFeed = __importStar(requireGetFeed());
  client$1.AppBskyFeedGetFeedGenerator = __importStar(requireGetFeedGenerator());
  client$1.AppBskyFeedGetFeedGenerators = __importStar(requireGetFeedGenerators());
  client$1.AppBskyFeedGetFeedSkeleton = __importStar(requireGetFeedSkeleton());
  client$1.AppBskyFeedGetLikes = __importStar(requireGetLikes());
  client$1.AppBskyFeedGetListFeed = __importStar(requireGetListFeed());
  client$1.AppBskyFeedGetPostThread = __importStar(requireGetPostThread());
  client$1.AppBskyFeedGetPosts = __importStar(requireGetPosts());
  client$1.AppBskyFeedGetQuotes = __importStar(requireGetQuotes());
  client$1.AppBskyFeedGetRepostedBy = __importStar(requireGetRepostedBy());
  client$1.AppBskyFeedGetSuggestedFeeds = __importStar(requireGetSuggestedFeeds());
  client$1.AppBskyFeedGetTimeline = __importStar(requireGetTimeline());
  client$1.AppBskyFeedLike = __importStar(requireLike());
  client$1.AppBskyFeedPost = __importStar(requirePost$1());
  client$1.AppBskyFeedPostgate = __importStar(requirePostgate());
  client$1.AppBskyFeedRepost = __importStar(requireRepost());
  client$1.AppBskyFeedSearchPosts = __importStar(requireSearchPosts());
  client$1.AppBskyFeedSendInteractions = __importStar(requireSendInteractions());
  client$1.AppBskyFeedThreadgate = __importStar(requireThreadgate());
  client$1.AppBskyGraphBlock = __importStar(requireBlock());
  client$1.AppBskyGraphDefs = __importStar(requireDefs$b());
  client$1.AppBskyGraphFollow = __importStar(requireFollow());
  client$1.AppBskyGraphGetActorStarterPacks = __importStar(requireGetActorStarterPacks());
  client$1.AppBskyGraphGetBlocks = __importStar(requireGetBlocks());
  client$1.AppBskyGraphGetFollowers = __importStar(requireGetFollowers());
  client$1.AppBskyGraphGetFollows = __importStar(requireGetFollows());
  client$1.AppBskyGraphGetKnownFollowers = __importStar(requireGetKnownFollowers());
  client$1.AppBskyGraphGetList = __importStar(requireGetList());
  client$1.AppBskyGraphGetListBlocks = __importStar(requireGetListBlocks());
  client$1.AppBskyGraphGetListMutes = __importStar(requireGetListMutes());
  client$1.AppBskyGraphGetLists = __importStar(requireGetLists());
  client$1.AppBskyGraphGetMutes = __importStar(requireGetMutes());
  client$1.AppBskyGraphGetRelationships = __importStar(requireGetRelationships());
  client$1.AppBskyGraphGetStarterPack = __importStar(requireGetStarterPack());
  client$1.AppBskyGraphGetStarterPacks = __importStar(requireGetStarterPacks());
  client$1.AppBskyGraphGetSuggestedFollowsByActor = __importStar(requireGetSuggestedFollowsByActor());
  client$1.AppBskyGraphList = __importStar(requireList());
  client$1.AppBskyGraphListblock = __importStar(requireListblock());
  client$1.AppBskyGraphListitem = __importStar(requireListitem());
  client$1.AppBskyGraphMuteActor = __importStar(requireMuteActor());
  client$1.AppBskyGraphMuteActorList = __importStar(requireMuteActorList());
  client$1.AppBskyGraphMuteThread = __importStar(requireMuteThread());
  client$1.AppBskyGraphSearchStarterPacks = __importStar(requireSearchStarterPacks());
  client$1.AppBskyGraphStarterpack = __importStar(requireStarterpack());
  client$1.AppBskyGraphUnmuteActor = __importStar(requireUnmuteActor());
  client$1.AppBskyGraphUnmuteActorList = __importStar(requireUnmuteActorList());
  client$1.AppBskyGraphUnmuteThread = __importStar(requireUnmuteThread());
  client$1.AppBskyLabelerDefs = __importStar(requireDefs$a());
  client$1.AppBskyLabelerGetServices = __importStar(requireGetServices());
  client$1.AppBskyLabelerService = __importStar(requireService());
  client$1.AppBskyNotificationGetUnreadCount = __importStar(requireGetUnreadCount());
  client$1.AppBskyNotificationListNotifications = __importStar(requireListNotifications());
  client$1.AppBskyNotificationPutPreferences = __importStar(requirePutPreferences());
  client$1.AppBskyNotificationRegisterPush = __importStar(requireRegisterPush());
  client$1.AppBskyNotificationUpdateSeen = __importStar(requireUpdateSeen());
  client$1.AppBskyRichtextFacet = __importStar(requireFacet());
  client$1.AppBskyUnspeccedDefs = __importStar(requireDefs$9());
  client$1.AppBskyUnspeccedGetConfig = __importStar(requireGetConfig$1());
  client$1.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(requireGetPopularFeedGenerators());
  client$1.AppBskyUnspeccedGetSuggestionsSkeleton = __importStar(requireGetSuggestionsSkeleton());
  client$1.AppBskyUnspeccedGetTaggedSuggestions = __importStar(requireGetTaggedSuggestions());
  client$1.AppBskyUnspeccedGetTrendingTopics = __importStar(requireGetTrendingTopics());
  client$1.AppBskyUnspeccedSearchActorsSkeleton = __importStar(requireSearchActorsSkeleton());
  client$1.AppBskyUnspeccedSearchPostsSkeleton = __importStar(requireSearchPostsSkeleton());
  client$1.AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(requireSearchStarterPacksSkeleton());
  client$1.AppBskyVideoDefs = __importStar(requireDefs$8());
  client$1.AppBskyVideoGetJobStatus = __importStar(requireGetJobStatus());
  client$1.AppBskyVideoGetUploadLimits = __importStar(requireGetUploadLimits());
  client$1.AppBskyVideoUploadVideo = __importStar(requireUploadVideo());
  client$1.ChatBskyActorDeclaration = __importStar(requireDeclaration());
  client$1.ChatBskyActorDefs = __importStar(requireDefs$7());
  client$1.ChatBskyActorDeleteAccount = __importStar(requireDeleteAccount());
  client$1.ChatBskyActorExportAccountData = __importStar(requireExportAccountData());
  client$1.ChatBskyConvoDefs = __importStar(requireDefs$6());
  client$1.ChatBskyConvoDeleteMessageForSelf = __importStar(requireDeleteMessageForSelf());
  client$1.ChatBskyConvoGetConvo = __importStar(requireGetConvo());
  client$1.ChatBskyConvoGetConvoForMembers = __importStar(requireGetConvoForMembers());
  client$1.ChatBskyConvoGetLog = __importStar(requireGetLog());
  client$1.ChatBskyConvoGetMessages = __importStar(requireGetMessages());
  client$1.ChatBskyConvoLeaveConvo = __importStar(requireLeaveConvo());
  client$1.ChatBskyConvoListConvos = __importStar(requireListConvos());
  client$1.ChatBskyConvoMuteConvo = __importStar(requireMuteConvo());
  client$1.ChatBskyConvoSendMessage = __importStar(requireSendMessage());
  client$1.ChatBskyConvoSendMessageBatch = __importStar(requireSendMessageBatch());
  client$1.ChatBskyConvoUnmuteConvo = __importStar(requireUnmuteConvo());
  client$1.ChatBskyConvoUpdateRead = __importStar(requireUpdateRead());
  client$1.ChatBskyModerationGetActorMetadata = __importStar(requireGetActorMetadata());
  client$1.ChatBskyModerationGetMessageContext = __importStar(requireGetMessageContext());
  client$1.ChatBskyModerationUpdateActorAccess = __importStar(requireUpdateActorAccess());
  client$1.ToolsOzoneCommunicationCreateTemplate = __importStar(requireCreateTemplate());
  client$1.ToolsOzoneCommunicationDefs = __importStar(requireDefs$5());
  client$1.ToolsOzoneCommunicationDeleteTemplate = __importStar(requireDeleteTemplate());
  client$1.ToolsOzoneCommunicationListTemplates = __importStar(requireListTemplates());
  client$1.ToolsOzoneCommunicationUpdateTemplate = __importStar(requireUpdateTemplate());
  client$1.ToolsOzoneModerationDefs = __importStar(requireDefs$4());
  client$1.ToolsOzoneModerationEmitEvent = __importStar(requireEmitEvent());
  client$1.ToolsOzoneModerationGetEvent = __importStar(requireGetEvent());
  client$1.ToolsOzoneModerationGetRecord = __importStar(requireGetRecord());
  client$1.ToolsOzoneModerationGetRecords = __importStar(requireGetRecords());
  client$1.ToolsOzoneModerationGetRepo = __importStar(requireGetRepo());
  client$1.ToolsOzoneModerationGetRepos = __importStar(requireGetRepos());
  client$1.ToolsOzoneModerationQueryEvents = __importStar(requireQueryEvents());
  client$1.ToolsOzoneModerationQueryStatuses = __importStar(requireQueryStatuses());
  client$1.ToolsOzoneModerationSearchRepos = __importStar(requireSearchRepos());
  client$1.ToolsOzoneServerGetConfig = __importStar(requireGetConfig());
  client$1.ToolsOzoneSetAddValues = __importStar(requireAddValues());
  client$1.ToolsOzoneSetDefs = __importStar(requireDefs$3());
  client$1.ToolsOzoneSetDeleteSet = __importStar(requireDeleteSet());
  client$1.ToolsOzoneSetDeleteValues = __importStar(requireDeleteValues());
  client$1.ToolsOzoneSetGetValues = __importStar(requireGetValues());
  client$1.ToolsOzoneSetQuerySets = __importStar(requireQuerySets());
  client$1.ToolsOzoneSetUpsertSet = __importStar(requireUpsertSet());
  client$1.ToolsOzoneSettingDefs = __importStar(requireDefs$2());
  client$1.ToolsOzoneSettingListOptions = __importStar(requireListOptions());
  client$1.ToolsOzoneSettingRemoveOptions = __importStar(requireRemoveOptions());
  client$1.ToolsOzoneSettingUpsertOption = __importStar(requireUpsertOption());
  client$1.ToolsOzoneSignatureDefs = __importStar(requireDefs$1());
  client$1.ToolsOzoneSignatureFindCorrelation = __importStar(requireFindCorrelation());
  client$1.ToolsOzoneSignatureFindRelatedAccounts = __importStar(requireFindRelatedAccounts());
  client$1.ToolsOzoneSignatureSearchAccounts = __importStar(requireSearchAccounts());
  client$1.ToolsOzoneTeamAddMember = __importStar(requireAddMember());
  client$1.ToolsOzoneTeamDefs = __importStar(requireDefs());
  client$1.ToolsOzoneTeamDeleteMember = __importStar(requireDeleteMember());
  client$1.ToolsOzoneTeamListMembers = __importStar(requireListMembers());
  client$1.ToolsOzoneTeamUpdateMember = __importStar(requireUpdateMember());
  client$1.COM_ATPROTO_MODERATION = {
    DefsReasonSpam: 'com.atproto.moderation.defs#reasonSpam',
    DefsReasonViolation: 'com.atproto.moderation.defs#reasonViolation',
    DefsReasonMisleading: 'com.atproto.moderation.defs#reasonMisleading',
    DefsReasonSexual: 'com.atproto.moderation.defs#reasonSexual',
    DefsReasonRude: 'com.atproto.moderation.defs#reasonRude',
    DefsReasonOther: 'com.atproto.moderation.defs#reasonOther',
    DefsReasonAppeal: 'com.atproto.moderation.defs#reasonAppeal'
  };
  client$1.APP_BSKY_FEED = {
    DefsRequestLess: 'app.bsky.feed.defs#requestLess',
    DefsRequestMore: 'app.bsky.feed.defs#requestMore',
    DefsClickthroughItem: 'app.bsky.feed.defs#clickthroughItem',
    DefsClickthroughAuthor: 'app.bsky.feed.defs#clickthroughAuthor',
    DefsClickthroughReposter: 'app.bsky.feed.defs#clickthroughReposter',
    DefsClickthroughEmbed: 'app.bsky.feed.defs#clickthroughEmbed',
    DefsInteractionSeen: 'app.bsky.feed.defs#interactionSeen',
    DefsInteractionLike: 'app.bsky.feed.defs#interactionLike',
    DefsInteractionRepost: 'app.bsky.feed.defs#interactionRepost',
    DefsInteractionReply: 'app.bsky.feed.defs#interactionReply',
    DefsInteractionQuote: 'app.bsky.feed.defs#interactionQuote',
    DefsInteractionShare: 'app.bsky.feed.defs#interactionShare'
  };
  client$1.APP_BSKY_GRAPH = {
    DefsModlist: 'app.bsky.graph.defs#modlist',
    DefsCuratelist: 'app.bsky.graph.defs#curatelist',
    DefsReferencelist: 'app.bsky.graph.defs#referencelist'
  };
  client$1.TOOLS_OZONE_MODERATION = {
    DefsReviewOpen: 'tools.ozone.moderation.defs#reviewOpen',
    DefsReviewEscalated: 'tools.ozone.moderation.defs#reviewEscalated',
    DefsReviewClosed: 'tools.ozone.moderation.defs#reviewClosed',
    DefsReviewNone: 'tools.ozone.moderation.defs#reviewNone'
  };
  client$1.TOOLS_OZONE_TEAM = {
    DefsRoleAdmin: 'tools.ozone.team.defs#roleAdmin',
    DefsRoleModerator: 'tools.ozone.team.defs#roleModerator',
    DefsRoleTriage: 'tools.ozone.team.defs#roleTriage'
  };
  class AtpBaseClient extends xrpc_1.XrpcClient {
    constructor(options) {
      super(options, lexicons_1.schemas);
      Object.defineProperty(this, "com", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "app", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "chat", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "tools", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this.com = new ComNS(this);
      this.app = new AppNS(this);
      this.chat = new ChatNS(this);
      this.tools = new ToolsNS(this);
    }
    /** @deprecated use `this` instead */
    get xrpc() {
      return this;
    }
  }
  client$1.AtpBaseClient = AtpBaseClient;
  class ComNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "atproto", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.atproto = new ComAtprotoNS(client);
    }
  }
  client$1.ComNS = ComNS;
  class ComAtprotoNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "admin", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "identity", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "label", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "moderation", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "repo", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "server", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "sync", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "temp", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.admin = new ComAtprotoAdminNS(client);
      this.identity = new ComAtprotoIdentityNS(client);
      this.label = new ComAtprotoLabelNS(client);
      this.moderation = new ComAtprotoModerationNS(client);
      this.repo = new ComAtprotoRepoNS(client);
      this.server = new ComAtprotoServerNS(client);
      this.sync = new ComAtprotoSyncNS(client);
      this.temp = new ComAtprotoTempNS(client);
    }
  }
  client$1.ComAtprotoNS = ComAtprotoNS;
  class ComAtprotoAdminNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    deleteAccount(data, opts) {
      return this._client.call('com.atproto.admin.deleteAccount', opts?.qp, data, opts);
    }
    disableAccountInvites(data, opts) {
      return this._client.call('com.atproto.admin.disableAccountInvites', opts?.qp, data, opts);
    }
    disableInviteCodes(data, opts) {
      return this._client.call('com.atproto.admin.disableInviteCodes', opts?.qp, data, opts);
    }
    enableAccountInvites(data, opts) {
      return this._client.call('com.atproto.admin.enableAccountInvites', opts?.qp, data, opts);
    }
    getAccountInfo(params, opts) {
      return this._client.call('com.atproto.admin.getAccountInfo', params, undefined, opts);
    }
    getAccountInfos(params, opts) {
      return this._client.call('com.atproto.admin.getAccountInfos', params, undefined, opts);
    }
    getInviteCodes(params, opts) {
      return this._client.call('com.atproto.admin.getInviteCodes', params, undefined, opts);
    }
    getSubjectStatus(params, opts) {
      return this._client.call('com.atproto.admin.getSubjectStatus', params, undefined, opts);
    }
    searchAccounts(params, opts) {
      return this._client.call('com.atproto.admin.searchAccounts', params, undefined, opts);
    }
    sendEmail(data, opts) {
      return this._client.call('com.atproto.admin.sendEmail', opts?.qp, data, opts);
    }
    updateAccountEmail(data, opts) {
      return this._client.call('com.atproto.admin.updateAccountEmail', opts?.qp, data, opts);
    }
    updateAccountHandle(data, opts) {
      return this._client.call('com.atproto.admin.updateAccountHandle', opts?.qp, data, opts);
    }
    updateAccountPassword(data, opts) {
      return this._client.call('com.atproto.admin.updateAccountPassword', opts?.qp, data, opts);
    }
    updateSubjectStatus(data, opts) {
      return this._client.call('com.atproto.admin.updateSubjectStatus', opts?.qp, data, opts);
    }
  }
  client$1.ComAtprotoAdminNS = ComAtprotoAdminNS;
  class ComAtprotoIdentityNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    getRecommendedDidCredentials(params, opts) {
      return this._client.call('com.atproto.identity.getRecommendedDidCredentials', params, undefined, opts);
    }
    requestPlcOperationSignature(data, opts) {
      return this._client.call('com.atproto.identity.requestPlcOperationSignature', opts?.qp, data, opts);
    }
    resolveHandle(params, opts) {
      return this._client.call('com.atproto.identity.resolveHandle', params, undefined, opts);
    }
    signPlcOperation(data, opts) {
      return this._client.call('com.atproto.identity.signPlcOperation', opts?.qp, data, opts);
    }
    submitPlcOperation(data, opts) {
      return this._client.call('com.atproto.identity.submitPlcOperation', opts?.qp, data, opts);
    }
    updateHandle(data, opts) {
      return this._client.call('com.atproto.identity.updateHandle', opts?.qp, data, opts);
    }
  }
  client$1.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
  class ComAtprotoLabelNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    queryLabels(params, opts) {
      return this._client.call('com.atproto.label.queryLabels', params, undefined, opts);
    }
  }
  client$1.ComAtprotoLabelNS = ComAtprotoLabelNS;
  class ComAtprotoModerationNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    createReport(data, opts) {
      return this._client.call('com.atproto.moderation.createReport', opts?.qp, data, opts);
    }
  }
  client$1.ComAtprotoModerationNS = ComAtprotoModerationNS;
  class ComAtprotoRepoNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    applyWrites(data, opts) {
      return this._client.call('com.atproto.repo.applyWrites', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoRepoApplyWrites.toKnownErr(e);
      });
    }
    createRecord(data, opts) {
      return this._client.call('com.atproto.repo.createRecord', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoRepoCreateRecord.toKnownErr(e);
      });
    }
    deleteRecord(data, opts) {
      return this._client.call('com.atproto.repo.deleteRecord', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoRepoDeleteRecord.toKnownErr(e);
      });
    }
    describeRepo(params, opts) {
      return this._client.call('com.atproto.repo.describeRepo', params, undefined, opts);
    }
    getRecord(params, opts) {
      return this._client.call('com.atproto.repo.getRecord', params, undefined, opts).catch(e => {
        throw ComAtprotoRepoGetRecord.toKnownErr(e);
      });
    }
    importRepo(data, opts) {
      return this._client.call('com.atproto.repo.importRepo', opts?.qp, data, opts);
    }
    listMissingBlobs(params, opts) {
      return this._client.call('com.atproto.repo.listMissingBlobs', params, undefined, opts);
    }
    listRecords(params, opts) {
      return this._client.call('com.atproto.repo.listRecords', params, undefined, opts);
    }
    putRecord(data, opts) {
      return this._client.call('com.atproto.repo.putRecord', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoRepoPutRecord.toKnownErr(e);
      });
    }
    uploadBlob(data, opts) {
      return this._client.call('com.atproto.repo.uploadBlob', opts?.qp, data, opts);
    }
  }
  client$1.ComAtprotoRepoNS = ComAtprotoRepoNS;
  class ComAtprotoServerNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    activateAccount(data, opts) {
      return this._client.call('com.atproto.server.activateAccount', opts?.qp, data, opts);
    }
    checkAccountStatus(params, opts) {
      return this._client.call('com.atproto.server.checkAccountStatus', params, undefined, opts);
    }
    confirmEmail(data, opts) {
      return this._client.call('com.atproto.server.confirmEmail', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoServerConfirmEmail.toKnownErr(e);
      });
    }
    createAccount(data, opts) {
      return this._client.call('com.atproto.server.createAccount', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoServerCreateAccount.toKnownErr(e);
      });
    }
    createAppPassword(data, opts) {
      return this._client.call('com.atproto.server.createAppPassword', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoServerCreateAppPassword.toKnownErr(e);
      });
    }
    createInviteCode(data, opts) {
      return this._client.call('com.atproto.server.createInviteCode', opts?.qp, data, opts);
    }
    createInviteCodes(data, opts) {
      return this._client.call('com.atproto.server.createInviteCodes', opts?.qp, data, opts);
    }
    createSession(data, opts) {
      return this._client.call('com.atproto.server.createSession', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoServerCreateSession.toKnownErr(e);
      });
    }
    deactivateAccount(data, opts) {
      return this._client.call('com.atproto.server.deactivateAccount', opts?.qp, data, opts);
    }
    deleteAccount(data, opts) {
      return this._client.call('com.atproto.server.deleteAccount', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoServerDeleteAccount.toKnownErr(e);
      });
    }
    deleteSession(data, opts) {
      return this._client.call('com.atproto.server.deleteSession', opts?.qp, data, opts);
    }
    describeServer(params, opts) {
      return this._client.call('com.atproto.server.describeServer', params, undefined, opts);
    }
    getAccountInviteCodes(params, opts) {
      return this._client.call('com.atproto.server.getAccountInviteCodes', params, undefined, opts).catch(e => {
        throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e);
      });
    }
    getServiceAuth(params, opts) {
      return this._client.call('com.atproto.server.getServiceAuth', params, undefined, opts).catch(e => {
        throw ComAtprotoServerGetServiceAuth.toKnownErr(e);
      });
    }
    getSession(params, opts) {
      return this._client.call('com.atproto.server.getSession', params, undefined, opts);
    }
    listAppPasswords(params, opts) {
      return this._client.call('com.atproto.server.listAppPasswords', params, undefined, opts).catch(e => {
        throw ComAtprotoServerListAppPasswords.toKnownErr(e);
      });
    }
    refreshSession(data, opts) {
      return this._client.call('com.atproto.server.refreshSession', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoServerRefreshSession.toKnownErr(e);
      });
    }
    requestAccountDelete(data, opts) {
      return this._client.call('com.atproto.server.requestAccountDelete', opts?.qp, data, opts);
    }
    requestEmailConfirmation(data, opts) {
      return this._client.call('com.atproto.server.requestEmailConfirmation', opts?.qp, data, opts);
    }
    requestEmailUpdate(data, opts) {
      return this._client.call('com.atproto.server.requestEmailUpdate', opts?.qp, data, opts);
    }
    requestPasswordReset(data, opts) {
      return this._client.call('com.atproto.server.requestPasswordReset', opts?.qp, data, opts);
    }
    reserveSigningKey(data, opts) {
      return this._client.call('com.atproto.server.reserveSigningKey', opts?.qp, data, opts);
    }
    resetPassword(data, opts) {
      return this._client.call('com.atproto.server.resetPassword', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoServerResetPassword.toKnownErr(e);
      });
    }
    revokeAppPassword(data, opts) {
      return this._client.call('com.atproto.server.revokeAppPassword', opts?.qp, data, opts);
    }
    updateEmail(data, opts) {
      return this._client.call('com.atproto.server.updateEmail', opts?.qp, data, opts).catch(e => {
        throw ComAtprotoServerUpdateEmail.toKnownErr(e);
      });
    }
  }
  client$1.ComAtprotoServerNS = ComAtprotoServerNS;
  class ComAtprotoSyncNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    getBlob(params, opts) {
      return this._client.call('com.atproto.sync.getBlob', params, undefined, opts).catch(e => {
        throw ComAtprotoSyncGetBlob.toKnownErr(e);
      });
    }
    getBlocks(params, opts) {
      return this._client.call('com.atproto.sync.getBlocks', params, undefined, opts).catch(e => {
        throw ComAtprotoSyncGetBlocks.toKnownErr(e);
      });
    }
    getCheckout(params, opts) {
      return this._client.call('com.atproto.sync.getCheckout', params, undefined, opts);
    }
    getHead(params, opts) {
      return this._client.call('com.atproto.sync.getHead', params, undefined, opts).catch(e => {
        throw ComAtprotoSyncGetHead.toKnownErr(e);
      });
    }
    getLatestCommit(params, opts) {
      return this._client.call('com.atproto.sync.getLatestCommit', params, undefined, opts).catch(e => {
        throw ComAtprotoSyncGetLatestCommit.toKnownErr(e);
      });
    }
    getRecord(params, opts) {
      return this._client.call('com.atproto.sync.getRecord', params, undefined, opts).catch(e => {
        throw ComAtprotoSyncGetRecord.toKnownErr(e);
      });
    }
    getRepo(params, opts) {
      return this._client.call('com.atproto.sync.getRepo', params, undefined, opts).catch(e => {
        throw ComAtprotoSyncGetRepo.toKnownErr(e);
      });
    }
    getRepoStatus(params, opts) {
      return this._client.call('com.atproto.sync.getRepoStatus', params, undefined, opts).catch(e => {
        throw ComAtprotoSyncGetRepoStatus.toKnownErr(e);
      });
    }
    listBlobs(params, opts) {
      return this._client.call('com.atproto.sync.listBlobs', params, undefined, opts).catch(e => {
        throw ComAtprotoSyncListBlobs.toKnownErr(e);
      });
    }
    listRepos(params, opts) {
      return this._client.call('com.atproto.sync.listRepos', params, undefined, opts);
    }
    notifyOfUpdate(data, opts) {
      return this._client.call('com.atproto.sync.notifyOfUpdate', opts?.qp, data, opts);
    }
    requestCrawl(data, opts) {
      return this._client.call('com.atproto.sync.requestCrawl', opts?.qp, data, opts);
    }
  }
  client$1.ComAtprotoSyncNS = ComAtprotoSyncNS;
  class ComAtprotoTempNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    addReservedHandle(data, opts) {
      return this._client.call('com.atproto.temp.addReservedHandle', opts?.qp, data, opts);
    }
    checkSignupQueue(params, opts) {
      return this._client.call('com.atproto.temp.checkSignupQueue', params, undefined, opts);
    }
    fetchLabels(params, opts) {
      return this._client.call('com.atproto.temp.fetchLabels', params, undefined, opts);
    }
    requestPhoneVerification(data, opts) {
      return this._client.call('com.atproto.temp.requestPhoneVerification', opts?.qp, data, opts);
    }
  }
  client$1.ComAtprotoTempNS = ComAtprotoTempNS;
  class AppNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "bsky", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.bsky = new AppBskyNS(client);
    }
  }
  client$1.AppNS = AppNS;
  class AppBskyNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "actor", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "embed", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "feed", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "graph", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "labeler", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "notification", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "richtext", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "unspecced", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "video", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.actor = new AppBskyActorNS(client);
      this.embed = new AppBskyEmbedNS(client);
      this.feed = new AppBskyFeedNS(client);
      this.graph = new AppBskyGraphNS(client);
      this.labeler = new AppBskyLabelerNS(client);
      this.notification = new AppBskyNotificationNS(client);
      this.richtext = new AppBskyRichtextNS(client);
      this.unspecced = new AppBskyUnspeccedNS(client);
      this.video = new AppBskyVideoNS(client);
    }
  }
  client$1.AppBskyNS = AppBskyNS;
  class AppBskyActorNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "profile", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.profile = new ProfileRecord(client);
    }
    getPreferences(params, opts) {
      return this._client.call('app.bsky.actor.getPreferences', params, undefined, opts);
    }
    getProfile(params, opts) {
      return this._client.call('app.bsky.actor.getProfile', params, undefined, opts);
    }
    getProfiles(params, opts) {
      return this._client.call('app.bsky.actor.getProfiles', params, undefined, opts);
    }
    getSuggestions(params, opts) {
      return this._client.call('app.bsky.actor.getSuggestions', params, undefined, opts);
    }
    putPreferences(data, opts) {
      return this._client.call('app.bsky.actor.putPreferences', opts?.qp, data, opts);
    }
    searchActors(params, opts) {
      return this._client.call('app.bsky.actor.searchActors', params, undefined, opts);
    }
    searchActorsTypeahead(params, opts) {
      return this._client.call('app.bsky.actor.searchActorsTypeahead', params, undefined, opts);
    }
  }
  client$1.AppBskyActorNS = AppBskyActorNS;
  class ProfileRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.actor.profile',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.actor.profile',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.actor.profile';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.actor.profile',
        rkey: 'self',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.actor.profile',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.ProfileRecord = ProfileRecord;
  class AppBskyEmbedNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
  }
  client$1.AppBskyEmbedNS = AppBskyEmbedNS;
  class AppBskyFeedNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "generator", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "like", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "post", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "postgate", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "repost", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "threadgate", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.generator = new GeneratorRecord(client);
      this.like = new LikeRecord(client);
      this.post = new PostRecord(client);
      this.postgate = new PostgateRecord(client);
      this.repost = new RepostRecord(client);
      this.threadgate = new ThreadgateRecord(client);
    }
    describeFeedGenerator(params, opts) {
      return this._client.call('app.bsky.feed.describeFeedGenerator', params, undefined, opts);
    }
    getActorFeeds(params, opts) {
      return this._client.call('app.bsky.feed.getActorFeeds', params, undefined, opts);
    }
    getActorLikes(params, opts) {
      return this._client.call('app.bsky.feed.getActorLikes', params, undefined, opts).catch(e => {
        throw AppBskyFeedGetActorLikes.toKnownErr(e);
      });
    }
    getAuthorFeed(params, opts) {
      return this._client.call('app.bsky.feed.getAuthorFeed', params, undefined, opts).catch(e => {
        throw AppBskyFeedGetAuthorFeed.toKnownErr(e);
      });
    }
    getFeed(params, opts) {
      return this._client.call('app.bsky.feed.getFeed', params, undefined, opts).catch(e => {
        throw AppBskyFeedGetFeed.toKnownErr(e);
      });
    }
    getFeedGenerator(params, opts) {
      return this._client.call('app.bsky.feed.getFeedGenerator', params, undefined, opts);
    }
    getFeedGenerators(params, opts) {
      return this._client.call('app.bsky.feed.getFeedGenerators', params, undefined, opts);
    }
    getFeedSkeleton(params, opts) {
      return this._client.call('app.bsky.feed.getFeedSkeleton', params, undefined, opts).catch(e => {
        throw AppBskyFeedGetFeedSkeleton.toKnownErr(e);
      });
    }
    getLikes(params, opts) {
      return this._client.call('app.bsky.feed.getLikes', params, undefined, opts);
    }
    getListFeed(params, opts) {
      return this._client.call('app.bsky.feed.getListFeed', params, undefined, opts).catch(e => {
        throw AppBskyFeedGetListFeed.toKnownErr(e);
      });
    }
    getPostThread(params, opts) {
      return this._client.call('app.bsky.feed.getPostThread', params, undefined, opts).catch(e => {
        throw AppBskyFeedGetPostThread.toKnownErr(e);
      });
    }
    getPosts(params, opts) {
      return this._client.call('app.bsky.feed.getPosts', params, undefined, opts);
    }
    getQuotes(params, opts) {
      return this._client.call('app.bsky.feed.getQuotes', params, undefined, opts);
    }
    getRepostedBy(params, opts) {
      return this._client.call('app.bsky.feed.getRepostedBy', params, undefined, opts);
    }
    getSuggestedFeeds(params, opts) {
      return this._client.call('app.bsky.feed.getSuggestedFeeds', params, undefined, opts);
    }
    getTimeline(params, opts) {
      return this._client.call('app.bsky.feed.getTimeline', params, undefined, opts);
    }
    searchPosts(params, opts) {
      return this._client.call('app.bsky.feed.searchPosts', params, undefined, opts).catch(e => {
        throw AppBskyFeedSearchPosts.toKnownErr(e);
      });
    }
    sendInteractions(data, opts) {
      return this._client.call('app.bsky.feed.sendInteractions', opts?.qp, data, opts);
    }
  }
  client$1.AppBskyFeedNS = AppBskyFeedNS;
  class GeneratorRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.feed.generator',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.feed.generator',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.feed.generator';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.feed.generator',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.feed.generator',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.GeneratorRecord = GeneratorRecord;
  class LikeRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.feed.like',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.feed.like',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.feed.like';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.feed.like',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.feed.like',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.LikeRecord = LikeRecord;
  class PostRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.feed.post',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.feed.post',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.feed.post';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.feed.post',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.feed.post',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.PostRecord = PostRecord;
  class PostgateRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.feed.postgate',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.feed.postgate',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.feed.postgate';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.feed.postgate',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.feed.postgate',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.PostgateRecord = PostgateRecord;
  class RepostRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.feed.repost',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.feed.repost',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.feed.repost';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.feed.repost',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.feed.repost',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.RepostRecord = RepostRecord;
  class ThreadgateRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.feed.threadgate',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.feed.threadgate',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.feed.threadgate';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.feed.threadgate',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.feed.threadgate',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.ThreadgateRecord = ThreadgateRecord;
  class AppBskyGraphNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "block", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "follow", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "list", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "listblock", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "listitem", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "starterpack", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.block = new BlockRecord(client);
      this.follow = new FollowRecord(client);
      this.list = new ListRecord(client);
      this.listblock = new ListblockRecord(client);
      this.listitem = new ListitemRecord(client);
      this.starterpack = new StarterpackRecord(client);
    }
    getActorStarterPacks(params, opts) {
      return this._client.call('app.bsky.graph.getActorStarterPacks', params, undefined, opts);
    }
    getBlocks(params, opts) {
      return this._client.call('app.bsky.graph.getBlocks', params, undefined, opts);
    }
    getFollowers(params, opts) {
      return this._client.call('app.bsky.graph.getFollowers', params, undefined, opts);
    }
    getFollows(params, opts) {
      return this._client.call('app.bsky.graph.getFollows', params, undefined, opts);
    }
    getKnownFollowers(params, opts) {
      return this._client.call('app.bsky.graph.getKnownFollowers', params, undefined, opts);
    }
    getList(params, opts) {
      return this._client.call('app.bsky.graph.getList', params, undefined, opts);
    }
    getListBlocks(params, opts) {
      return this._client.call('app.bsky.graph.getListBlocks', params, undefined, opts);
    }
    getListMutes(params, opts) {
      return this._client.call('app.bsky.graph.getListMutes', params, undefined, opts);
    }
    getLists(params, opts) {
      return this._client.call('app.bsky.graph.getLists', params, undefined, opts);
    }
    getMutes(params, opts) {
      return this._client.call('app.bsky.graph.getMutes', params, undefined, opts);
    }
    getRelationships(params, opts) {
      return this._client.call('app.bsky.graph.getRelationships', params, undefined, opts).catch(e => {
        throw AppBskyGraphGetRelationships.toKnownErr(e);
      });
    }
    getStarterPack(params, opts) {
      return this._client.call('app.bsky.graph.getStarterPack', params, undefined, opts);
    }
    getStarterPacks(params, opts) {
      return this._client.call('app.bsky.graph.getStarterPacks', params, undefined, opts);
    }
    getSuggestedFollowsByActor(params, opts) {
      return this._client.call('app.bsky.graph.getSuggestedFollowsByActor', params, undefined, opts);
    }
    muteActor(data, opts) {
      return this._client.call('app.bsky.graph.muteActor', opts?.qp, data, opts);
    }
    muteActorList(data, opts) {
      return this._client.call('app.bsky.graph.muteActorList', opts?.qp, data, opts);
    }
    muteThread(data, opts) {
      return this._client.call('app.bsky.graph.muteThread', opts?.qp, data, opts);
    }
    searchStarterPacks(params, opts) {
      return this._client.call('app.bsky.graph.searchStarterPacks', params, undefined, opts);
    }
    unmuteActor(data, opts) {
      return this._client.call('app.bsky.graph.unmuteActor', opts?.qp, data, opts);
    }
    unmuteActorList(data, opts) {
      return this._client.call('app.bsky.graph.unmuteActorList', opts?.qp, data, opts);
    }
    unmuteThread(data, opts) {
      return this._client.call('app.bsky.graph.unmuteThread', opts?.qp, data, opts);
    }
  }
  client$1.AppBskyGraphNS = AppBskyGraphNS;
  class BlockRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.graph.block',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.graph.block',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.graph.block';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.graph.block',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.graph.block',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.BlockRecord = BlockRecord;
  class FollowRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.graph.follow',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.graph.follow',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.graph.follow';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.graph.follow',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.graph.follow',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.FollowRecord = FollowRecord;
  class ListRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.graph.list',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.graph.list',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.graph.list';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.graph.list',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.graph.list',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.ListRecord = ListRecord;
  class ListblockRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.graph.listblock',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.graph.listblock',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.graph.listblock';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.graph.listblock',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.graph.listblock',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.ListblockRecord = ListblockRecord;
  class ListitemRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.graph.listitem',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.graph.listitem',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.graph.listitem';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.graph.listitem',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.graph.listitem',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.ListitemRecord = ListitemRecord;
  class StarterpackRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.graph.starterpack',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.graph.starterpack',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.graph.starterpack';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.graph.starterpack',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.graph.starterpack',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.StarterpackRecord = StarterpackRecord;
  class AppBskyLabelerNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "service", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.service = new ServiceRecord(client);
    }
    getServices(params, opts) {
      return this._client.call('app.bsky.labeler.getServices', params, undefined, opts);
    }
  }
  client$1.AppBskyLabelerNS = AppBskyLabelerNS;
  class ServiceRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'app.bsky.labeler.service',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'app.bsky.labeler.service',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'app.bsky.labeler.service';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'app.bsky.labeler.service',
        rkey: 'self',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'app.bsky.labeler.service',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.ServiceRecord = ServiceRecord;
  class AppBskyNotificationNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    getUnreadCount(params, opts) {
      return this._client.call('app.bsky.notification.getUnreadCount', params, undefined, opts);
    }
    listNotifications(params, opts) {
      return this._client.call('app.bsky.notification.listNotifications', params, undefined, opts);
    }
    putPreferences(data, opts) {
      return this._client.call('app.bsky.notification.putPreferences', opts?.qp, data, opts);
    }
    registerPush(data, opts) {
      return this._client.call('app.bsky.notification.registerPush', opts?.qp, data, opts);
    }
    updateSeen(data, opts) {
      return this._client.call('app.bsky.notification.updateSeen', opts?.qp, data, opts);
    }
  }
  client$1.AppBskyNotificationNS = AppBskyNotificationNS;
  class AppBskyRichtextNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
  }
  client$1.AppBskyRichtextNS = AppBskyRichtextNS;
  class AppBskyUnspeccedNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    getConfig(params, opts) {
      return this._client.call('app.bsky.unspecced.getConfig', params, undefined, opts);
    }
    getPopularFeedGenerators(params, opts) {
      return this._client.call('app.bsky.unspecced.getPopularFeedGenerators', params, undefined, opts);
    }
    getSuggestionsSkeleton(params, opts) {
      return this._client.call('app.bsky.unspecced.getSuggestionsSkeleton', params, undefined, opts);
    }
    getTaggedSuggestions(params, opts) {
      return this._client.call('app.bsky.unspecced.getTaggedSuggestions', params, undefined, opts);
    }
    getTrendingTopics(params, opts) {
      return this._client.call('app.bsky.unspecced.getTrendingTopics', params, undefined, opts);
    }
    searchActorsSkeleton(params, opts) {
      return this._client.call('app.bsky.unspecced.searchActorsSkeleton', params, undefined, opts).catch(e => {
        throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e);
      });
    }
    searchPostsSkeleton(params, opts) {
      return this._client.call('app.bsky.unspecced.searchPostsSkeleton', params, undefined, opts).catch(e => {
        throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e);
      });
    }
    searchStarterPacksSkeleton(params, opts) {
      return this._client.call('app.bsky.unspecced.searchStarterPacksSkeleton', params, undefined, opts).catch(e => {
        throw AppBskyUnspeccedSearchStarterPacksSkeleton.toKnownErr(e);
      });
    }
  }
  client$1.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
  class AppBskyVideoNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    getJobStatus(params, opts) {
      return this._client.call('app.bsky.video.getJobStatus', params, undefined, opts);
    }
    getUploadLimits(params, opts) {
      return this._client.call('app.bsky.video.getUploadLimits', params, undefined, opts);
    }
    uploadVideo(data, opts) {
      return this._client.call('app.bsky.video.uploadVideo', opts?.qp, data, opts);
    }
  }
  client$1.AppBskyVideoNS = AppBskyVideoNS;
  class ChatNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "bsky", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.bsky = new ChatBskyNS(client);
    }
  }
  client$1.ChatNS = ChatNS;
  class ChatBskyNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "actor", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "convo", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "moderation", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.actor = new ChatBskyActorNS(client);
      this.convo = new ChatBskyConvoNS(client);
      this.moderation = new ChatBskyModerationNS(client);
    }
  }
  client$1.ChatBskyNS = ChatBskyNS;
  class ChatBskyActorNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "declaration", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.declaration = new DeclarationRecord(client);
    }
    deleteAccount(data, opts) {
      return this._client.call('chat.bsky.actor.deleteAccount', opts?.qp, data, opts);
    }
    exportAccountData(params, opts) {
      return this._client.call('chat.bsky.actor.exportAccountData', params, undefined, opts);
    }
  }
  client$1.ChatBskyActorNS = ChatBskyActorNS;
  class DeclarationRecord {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    async list(params) {
      const res = await this._client.call('com.atproto.repo.listRecords', {
        collection: 'chat.bsky.actor.declaration',
        ...params
      });
      return res.data;
    }
    async get(params) {
      const res = await this._client.call('com.atproto.repo.getRecord', {
        collection: 'chat.bsky.actor.declaration',
        ...params
      });
      return res.data;
    }
    async create(params, record, headers) {
      record.$type = 'chat.bsky.actor.declaration';
      const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
        collection: 'chat.bsky.actor.declaration',
        rkey: 'self',
        ...params,
        record
      }, {
        encoding: 'application/json',
        headers
      });
      return res.data;
    }
    async delete(params, headers) {
      await this._client.call('com.atproto.repo.deleteRecord', undefined, {
        collection: 'chat.bsky.actor.declaration',
        ...params
      }, {
        headers
      });
    }
  }
  client$1.DeclarationRecord = DeclarationRecord;
  class ChatBskyConvoNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    deleteMessageForSelf(data, opts) {
      return this._client.call('chat.bsky.convo.deleteMessageForSelf', opts?.qp, data, opts);
    }
    getConvo(params, opts) {
      return this._client.call('chat.bsky.convo.getConvo', params, undefined, opts);
    }
    getConvoForMembers(params, opts) {
      return this._client.call('chat.bsky.convo.getConvoForMembers', params, undefined, opts);
    }
    getLog(params, opts) {
      return this._client.call('chat.bsky.convo.getLog', params, undefined, opts);
    }
    getMessages(params, opts) {
      return this._client.call('chat.bsky.convo.getMessages', params, undefined, opts);
    }
    leaveConvo(data, opts) {
      return this._client.call('chat.bsky.convo.leaveConvo', opts?.qp, data, opts);
    }
    listConvos(params, opts) {
      return this._client.call('chat.bsky.convo.listConvos', params, undefined, opts);
    }
    muteConvo(data, opts) {
      return this._client.call('chat.bsky.convo.muteConvo', opts?.qp, data, opts);
    }
    sendMessage(data, opts) {
      return this._client.call('chat.bsky.convo.sendMessage', opts?.qp, data, opts);
    }
    sendMessageBatch(data, opts) {
      return this._client.call('chat.bsky.convo.sendMessageBatch', opts?.qp, data, opts);
    }
    unmuteConvo(data, opts) {
      return this._client.call('chat.bsky.convo.unmuteConvo', opts?.qp, data, opts);
    }
    updateRead(data, opts) {
      return this._client.call('chat.bsky.convo.updateRead', opts?.qp, data, opts);
    }
  }
  client$1.ChatBskyConvoNS = ChatBskyConvoNS;
  class ChatBskyModerationNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    getActorMetadata(params, opts) {
      return this._client.call('chat.bsky.moderation.getActorMetadata', params, undefined, opts);
    }
    getMessageContext(params, opts) {
      return this._client.call('chat.bsky.moderation.getMessageContext', params, undefined, opts);
    }
    updateActorAccess(data, opts) {
      return this._client.call('chat.bsky.moderation.updateActorAccess', opts?.qp, data, opts);
    }
  }
  client$1.ChatBskyModerationNS = ChatBskyModerationNS;
  class ToolsNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "ozone", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.ozone = new ToolsOzoneNS(client);
    }
  }
  client$1.ToolsNS = ToolsNS;
  class ToolsOzoneNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "communication", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "moderation", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "server", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "set", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "setting", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "signature", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "team", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
      this.communication = new ToolsOzoneCommunicationNS(client);
      this.moderation = new ToolsOzoneModerationNS(client);
      this.server = new ToolsOzoneServerNS(client);
      this.set = new ToolsOzoneSetNS(client);
      this.setting = new ToolsOzoneSettingNS(client);
      this.signature = new ToolsOzoneSignatureNS(client);
      this.team = new ToolsOzoneTeamNS(client);
    }
  }
  client$1.ToolsOzoneNS = ToolsOzoneNS;
  class ToolsOzoneCommunicationNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    createTemplate(data, opts) {
      return this._client.call('tools.ozone.communication.createTemplate', opts?.qp, data, opts).catch(e => {
        throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e);
      });
    }
    deleteTemplate(data, opts) {
      return this._client.call('tools.ozone.communication.deleteTemplate', opts?.qp, data, opts);
    }
    listTemplates(params, opts) {
      return this._client.call('tools.ozone.communication.listTemplates', params, undefined, opts);
    }
    updateTemplate(data, opts) {
      return this._client.call('tools.ozone.communication.updateTemplate', opts?.qp, data, opts).catch(e => {
        throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e);
      });
    }
  }
  client$1.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
  class ToolsOzoneModerationNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    emitEvent(data, opts) {
      return this._client.call('tools.ozone.moderation.emitEvent', opts?.qp, data, opts).catch(e => {
        throw ToolsOzoneModerationEmitEvent.toKnownErr(e);
      });
    }
    getEvent(params, opts) {
      return this._client.call('tools.ozone.moderation.getEvent', params, undefined, opts);
    }
    getRecord(params, opts) {
      return this._client.call('tools.ozone.moderation.getRecord', params, undefined, opts).catch(e => {
        throw ToolsOzoneModerationGetRecord.toKnownErr(e);
      });
    }
    getRecords(params, opts) {
      return this._client.call('tools.ozone.moderation.getRecords', params, undefined, opts);
    }
    getRepo(params, opts) {
      return this._client.call('tools.ozone.moderation.getRepo', params, undefined, opts).catch(e => {
        throw ToolsOzoneModerationGetRepo.toKnownErr(e);
      });
    }
    getRepos(params, opts) {
      return this._client.call('tools.ozone.moderation.getRepos', params, undefined, opts);
    }
    queryEvents(params, opts) {
      return this._client.call('tools.ozone.moderation.queryEvents', params, undefined, opts);
    }
    queryStatuses(params, opts) {
      return this._client.call('tools.ozone.moderation.queryStatuses', params, undefined, opts);
    }
    searchRepos(params, opts) {
      return this._client.call('tools.ozone.moderation.searchRepos', params, undefined, opts);
    }
  }
  client$1.ToolsOzoneModerationNS = ToolsOzoneModerationNS;
  class ToolsOzoneServerNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    getConfig(params, opts) {
      return this._client.call('tools.ozone.server.getConfig', params, undefined, opts);
    }
  }
  client$1.ToolsOzoneServerNS = ToolsOzoneServerNS;
  class ToolsOzoneSetNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    addValues(data, opts) {
      return this._client.call('tools.ozone.set.addValues', opts?.qp, data, opts);
    }
    deleteSet(data, opts) {
      return this._client.call('tools.ozone.set.deleteSet', opts?.qp, data, opts).catch(e => {
        throw ToolsOzoneSetDeleteSet.toKnownErr(e);
      });
    }
    deleteValues(data, opts) {
      return this._client.call('tools.ozone.set.deleteValues', opts?.qp, data, opts).catch(e => {
        throw ToolsOzoneSetDeleteValues.toKnownErr(e);
      });
    }
    getValues(params, opts) {
      return this._client.call('tools.ozone.set.getValues', params, undefined, opts).catch(e => {
        throw ToolsOzoneSetGetValues.toKnownErr(e);
      });
    }
    querySets(params, opts) {
      return this._client.call('tools.ozone.set.querySets', params, undefined, opts);
    }
    upsertSet(data, opts) {
      return this._client.call('tools.ozone.set.upsertSet', opts?.qp, data, opts);
    }
  }
  client$1.ToolsOzoneSetNS = ToolsOzoneSetNS;
  class ToolsOzoneSettingNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    listOptions(params, opts) {
      return this._client.call('tools.ozone.setting.listOptions', params, undefined, opts);
    }
    removeOptions(data, opts) {
      return this._client.call('tools.ozone.setting.removeOptions', opts?.qp, data, opts);
    }
    upsertOption(data, opts) {
      return this._client.call('tools.ozone.setting.upsertOption', opts?.qp, data, opts);
    }
  }
  client$1.ToolsOzoneSettingNS = ToolsOzoneSettingNS;
  class ToolsOzoneSignatureNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    findCorrelation(params, opts) {
      return this._client.call('tools.ozone.signature.findCorrelation', params, undefined, opts);
    }
    findRelatedAccounts(params, opts) {
      return this._client.call('tools.ozone.signature.findRelatedAccounts', params, undefined, opts);
    }
    searchAccounts(params, opts) {
      return this._client.call('tools.ozone.signature.searchAccounts', params, undefined, opts);
    }
  }
  client$1.ToolsOzoneSignatureNS = ToolsOzoneSignatureNS;
  class ToolsOzoneTeamNS {
    constructor(client) {
      Object.defineProperty(this, "_client", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this._client = client;
    }
    addMember(data, opts) {
      return this._client.call('tools.ozone.team.addMember', opts?.qp, data, opts).catch(e => {
        throw ToolsOzoneTeamAddMember.toKnownErr(e);
      });
    }
    deleteMember(data, opts) {
      return this._client.call('tools.ozone.team.deleteMember', opts?.qp, data, opts).catch(e => {
        throw ToolsOzoneTeamDeleteMember.toKnownErr(e);
      });
    }
    listMembers(params, opts) {
      return this._client.call('tools.ozone.team.listMembers', params, undefined, opts);
    }
    updateMember(data, opts) {
      return this._client.call('tools.ozone.team.updateMember', opts?.qp, data, opts).catch(e => {
        throw ToolsOzoneTeamUpdateMember.toKnownErr(e);
      });
    }
  }
  client$1.ToolsOzoneTeamNS = ToolsOzoneTeamNS;
  return client$1;
}

var richText = {};

var unicode = {};

var hasRequiredUnicode;
function requireUnicode() {
  if (hasRequiredUnicode) return unicode;
  hasRequiredUnicode = 1;
  /**
   * Javascript uses utf16-encoded strings while most environments and specs
   * have standardized around utf8 (including JSON).
   *
   * After some lengthy debated we decided that richtext facets need to use
   * utf8 indices. This means we need tools to convert indices between utf8
   * and utf16, and that's precisely what this library handles.
   */
  Object.defineProperty(unicode, "__esModule", {
    value: true
  });
  unicode.UnicodeString = undefined;
  const common_web_1 = requireDist$4();
  const encoder = new TextEncoder();
  const decoder = new TextDecoder();
  class UnicodeString {
    constructor(utf16) {
      Object.defineProperty(this, "utf16", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "utf8", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "_graphemeLen", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this.utf16 = utf16;
      this.utf8 = encoder.encode(utf16);
    }
    get length() {
      return this.utf8.byteLength;
    }
    get graphemeLength() {
      if (!this._graphemeLen) {
        this._graphemeLen = (0, common_web_1.graphemeLen)(this.utf16);
      }
      return this._graphemeLen;
    }
    slice(start, end) {
      return decoder.decode(this.utf8.slice(start, end));
    }
    utf16IndexToUtf8Index(i) {
      return encoder.encode(this.utf16.slice(0, i)).byteLength;
    }
    toString() {
      return this.utf16;
    }
  }
  unicode.UnicodeString = UnicodeString;
  return unicode;
}

var sanitization = {};

var hasRequiredSanitization;
function requireSanitization() {
  if (hasRequiredSanitization) return sanitization;
  hasRequiredSanitization = 1;
  Object.defineProperty(sanitization, "__esModule", {
    value: true
  });
  sanitization.sanitizeRichText = sanitizeRichText;
  const unicode_1 = requireUnicode();
  // this regex is intentionally matching on the zero-with-separator codepoint
  // eslint-disable-next-line no-misleading-character-class
  const EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
  const REPLACEMENT_STR = '\n\n';
  function sanitizeRichText(richText, opts) {
    if (opts.cleanNewlines) {
      richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
    }
    return richText;
  }
  function clean(richText, targetRegexp, replacementString) {
    richText = richText.clone();
    let match = richText.unicodeText.utf16.match(targetRegexp);
    while (match && typeof match.index !== 'undefined') {
      const oldText = richText.unicodeText;
      const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
      const removeEndIndex = removeStartIndex + new unicode_1.UnicodeString(match[0]).length;
      richText.delete(removeStartIndex, removeEndIndex);
      if (richText.unicodeText.utf16 === oldText.utf16) {
        break; // sanity check
      }
      richText.insert(removeStartIndex, replacementString);
      match = richText.unicodeText.utf16.match(targetRegexp);
    }
    return richText;
  }
  return sanitization;
}

var detection = {};

var require$$0 = [
	"aaa",
	"aarp",
	"abb",
	"abbott",
	"abbvie",
	"abc",
	"able",
	"abogado",
	"abudhabi",
	"ac",
	"academy",
	"accenture",
	"accountant",
	"accountants",
	"aco",
	"actor",
	"ad",
	"ads",
	"adult",
	"ae",
	"aeg",
	"aero",
	"aetna",
	"af",
	"afl",
	"africa",
	"ag",
	"agakhan",
	"agency",
	"ai",
	"aig",
	"airbus",
	"airforce",
	"airtel",
	"akdn",
	"al",
	"alibaba",
	"alipay",
	"allfinanz",
	"allstate",
	"ally",
	"alsace",
	"alstom",
	"am",
	"amazon",
	"americanexpress",
	"americanfamily",
	"amex",
	"amfam",
	"amica",
	"amsterdam",
	"analytics",
	"android",
	"anquan",
	"anz",
	"ao",
	"aol",
	"apartments",
	"app",
	"apple",
	"aq",
	"aquarelle",
	"ar",
	"arab",
	"aramco",
	"archi",
	"army",
	"arpa",
	"art",
	"arte",
	"as",
	"asda",
	"asia",
	"associates",
	"at",
	"athleta",
	"attorney",
	"au",
	"auction",
	"audi",
	"audible",
	"audio",
	"auspost",
	"author",
	"auto",
	"autos",
	"aw",
	"aws",
	"ax",
	"axa",
	"az",
	"azure",
	"ba",
	"baby",
	"baidu",
	"banamex",
	"band",
	"bank",
	"bar",
	"barcelona",
	"barclaycard",
	"barclays",
	"barefoot",
	"bargains",
	"baseball",
	"basketball",
	"bauhaus",
	"bayern",
	"bb",
	"bbc",
	"bbt",
	"bbva",
	"bcg",
	"bcn",
	"bd",
	"be",
	"beats",
	"beauty",
	"beer",
	"bentley",
	"berlin",
	"best",
	"bestbuy",
	"bet",
	"bf",
	"bg",
	"bh",
	"bharti",
	"bi",
	"bible",
	"bid",
	"bike",
	"bing",
	"bingo",
	"bio",
	"biz",
	"bj",
	"black",
	"blackfriday",
	"blockbuster",
	"blog",
	"bloomberg",
	"blue",
	"bm",
	"bms",
	"bmw",
	"bn",
	"bnpparibas",
	"bo",
	"boats",
	"boehringer",
	"bofa",
	"bom",
	"bond",
	"boo",
	"book",
	"booking",
	"bosch",
	"bostik",
	"boston",
	"bot",
	"boutique",
	"box",
	"br",
	"bradesco",
	"bridgestone",
	"broadway",
	"broker",
	"brother",
	"brussels",
	"bs",
	"bt",
	"build",
	"builders",
	"business",
	"buy",
	"buzz",
	"bv",
	"bw",
	"by",
	"bz",
	"bzh",
	"ca",
	"cab",
	"cafe",
	"cal",
	"call",
	"calvinklein",
	"cam",
	"camera",
	"camp",
	"canon",
	"capetown",
	"capital",
	"capitalone",
	"car",
	"caravan",
	"cards",
	"care",
	"career",
	"careers",
	"cars",
	"casa",
	"case",
	"cash",
	"casino",
	"cat",
	"catering",
	"catholic",
	"cba",
	"cbn",
	"cbre",
	"cc",
	"cd",
	"center",
	"ceo",
	"cern",
	"cf",
	"cfa",
	"cfd",
	"cg",
	"ch",
	"chanel",
	"channel",
	"charity",
	"chase",
	"chat",
	"cheap",
	"chintai",
	"christmas",
	"chrome",
	"church",
	"ci",
	"cipriani",
	"circle",
	"cisco",
	"citadel",
	"citi",
	"citic",
	"city",
	"ck",
	"cl",
	"claims",
	"cleaning",
	"click",
	"clinic",
	"clinique",
	"clothing",
	"cloud",
	"club",
	"clubmed",
	"cm",
	"cn",
	"co",
	"coach",
	"codes",
	"coffee",
	"college",
	"cologne",
	"com",
	"commbank",
	"community",
	"company",
	"compare",
	"computer",
	"comsec",
	"condos",
	"construction",
	"consulting",
	"contact",
	"contractors",
	"cooking",
	"cool",
	"coop",
	"corsica",
	"country",
	"coupon",
	"coupons",
	"courses",
	"cpa",
	"cr",
	"credit",
	"creditcard",
	"creditunion",
	"cricket",
	"crown",
	"crs",
	"cruise",
	"cruises",
	"cu",
	"cuisinella",
	"cv",
	"cw",
	"cx",
	"cy",
	"cymru",
	"cyou",
	"cz",
	"dad",
	"dance",
	"data",
	"date",
	"dating",
	"datsun",
	"day",
	"dclk",
	"dds",
	"de",
	"deal",
	"dealer",
	"deals",
	"degree",
	"delivery",
	"dell",
	"deloitte",
	"delta",
	"democrat",
	"dental",
	"dentist",
	"desi",
	"design",
	"dev",
	"dhl",
	"diamonds",
	"diet",
	"digital",
	"direct",
	"directory",
	"discount",
	"discover",
	"dish",
	"diy",
	"dj",
	"dk",
	"dm",
	"dnp",
	"do",
	"docs",
	"doctor",
	"dog",
	"domains",
	"dot",
	"download",
	"drive",
	"dtv",
	"dubai",
	"dunlop",
	"dupont",
	"durban",
	"dvag",
	"dvr",
	"dz",
	"earth",
	"eat",
	"ec",
	"eco",
	"edeka",
	"edu",
	"education",
	"ee",
	"eg",
	"email",
	"emerck",
	"energy",
	"engineer",
	"engineering",
	"enterprises",
	"epson",
	"equipment",
	"er",
	"ericsson",
	"erni",
	"es",
	"esq",
	"estate",
	"et",
	"eu",
	"eurovision",
	"eus",
	"events",
	"exchange",
	"expert",
	"exposed",
	"express",
	"extraspace",
	"fage",
	"fail",
	"fairwinds",
	"faith",
	"family",
	"fan",
	"fans",
	"farm",
	"farmers",
	"fashion",
	"fast",
	"fedex",
	"feedback",
	"ferrari",
	"ferrero",
	"fi",
	"fidelity",
	"fido",
	"film",
	"final",
	"finance",
	"financial",
	"fire",
	"firestone",
	"firmdale",
	"fish",
	"fishing",
	"fit",
	"fitness",
	"fj",
	"fk",
	"flickr",
	"flights",
	"flir",
	"florist",
	"flowers",
	"fly",
	"fm",
	"fo",
	"foo",
	"food",
	"football",
	"ford",
	"forex",
	"forsale",
	"forum",
	"foundation",
	"fox",
	"fr",
	"free",
	"fresenius",
	"frl",
	"frogans",
	"frontier",
	"ftr",
	"fujitsu",
	"fun",
	"fund",
	"furniture",
	"futbol",
	"fyi",
	"ga",
	"gal",
	"gallery",
	"gallo",
	"gallup",
	"game",
	"games",
	"gap",
	"garden",
	"gay",
	"gb",
	"gbiz",
	"gd",
	"gdn",
	"ge",
	"gea",
	"gent",
	"genting",
	"george",
	"gf",
	"gg",
	"ggee",
	"gh",
	"gi",
	"gift",
	"gifts",
	"gives",
	"giving",
	"gl",
	"glass",
	"gle",
	"global",
	"globo",
	"gm",
	"gmail",
	"gmbh",
	"gmo",
	"gmx",
	"gn",
	"godaddy",
	"gold",
	"goldpoint",
	"golf",
	"goo",
	"goodyear",
	"goog",
	"google",
	"gop",
	"got",
	"gov",
	"gp",
	"gq",
	"gr",
	"grainger",
	"graphics",
	"gratis",
	"green",
	"gripe",
	"grocery",
	"group",
	"gs",
	"gt",
	"gu",
	"gucci",
	"guge",
	"guide",
	"guitars",
	"guru",
	"gw",
	"gy",
	"hair",
	"hamburg",
	"hangout",
	"haus",
	"hbo",
	"hdfc",
	"hdfcbank",
	"health",
	"healthcare",
	"help",
	"helsinki",
	"here",
	"hermes",
	"hiphop",
	"hisamitsu",
	"hitachi",
	"hiv",
	"hk",
	"hkt",
	"hm",
	"hn",
	"hockey",
	"holdings",
	"holiday",
	"homedepot",
	"homegoods",
	"homes",
	"homesense",
	"honda",
	"horse",
	"hospital",
	"host",
	"hosting",
	"hot",
	"hotels",
	"hotmail",
	"house",
	"how",
	"hr",
	"hsbc",
	"ht",
	"hu",
	"hughes",
	"hyatt",
	"hyundai",
	"ibm",
	"icbc",
	"ice",
	"icu",
	"id",
	"ie",
	"ieee",
	"ifm",
	"ikano",
	"il",
	"im",
	"imamat",
	"imdb",
	"immo",
	"immobilien",
	"in",
	"inc",
	"industries",
	"infiniti",
	"info",
	"ing",
	"ink",
	"institute",
	"insurance",
	"insure",
	"int",
	"international",
	"intuit",
	"investments",
	"io",
	"ipiranga",
	"iq",
	"ir",
	"irish",
	"is",
	"ismaili",
	"ist",
	"istanbul",
	"it",
	"itau",
	"itv",
	"jaguar",
	"java",
	"jcb",
	"je",
	"jeep",
	"jetzt",
	"jewelry",
	"jio",
	"jll",
	"jm",
	"jmp",
	"jnj",
	"jo",
	"jobs",
	"joburg",
	"jot",
	"joy",
	"jp",
	"jpmorgan",
	"jprs",
	"juegos",
	"juniper",
	"kaufen",
	"kddi",
	"ke",
	"kerryhotels",
	"kerrylogistics",
	"kerryproperties",
	"kfh",
	"kg",
	"kh",
	"ki",
	"kia",
	"kids",
	"kim",
	"kindle",
	"kitchen",
	"kiwi",
	"km",
	"kn",
	"koeln",
	"komatsu",
	"kosher",
	"kp",
	"kpmg",
	"kpn",
	"kr",
	"krd",
	"kred",
	"kuokgroup",
	"kw",
	"ky",
	"kyoto",
	"kz",
	"la",
	"lacaixa",
	"lamborghini",
	"lamer",
	"lancaster",
	"land",
	"landrover",
	"lanxess",
	"lasalle",
	"lat",
	"latino",
	"latrobe",
	"law",
	"lawyer",
	"lb",
	"lc",
	"lds",
	"lease",
	"leclerc",
	"lefrak",
	"legal",
	"lego",
	"lexus",
	"lgbt",
	"li",
	"lidl",
	"life",
	"lifeinsurance",
	"lifestyle",
	"lighting",
	"like",
	"lilly",
	"limited",
	"limo",
	"lincoln",
	"link",
	"lipsy",
	"live",
	"living",
	"lk",
	"llc",
	"llp",
	"loan",
	"loans",
	"locker",
	"locus",
	"lol",
	"london",
	"lotte",
	"lotto",
	"love",
	"lpl",
	"lplfinancial",
	"lr",
	"ls",
	"lt",
	"ltd",
	"ltda",
	"lu",
	"lundbeck",
	"luxe",
	"luxury",
	"lv",
	"ly",
	"ma",
	"madrid",
	"maif",
	"maison",
	"makeup",
	"man",
	"management",
	"mango",
	"map",
	"market",
	"marketing",
	"markets",
	"marriott",
	"marshalls",
	"mattel",
	"mba",
	"mc",
	"mckinsey",
	"md",
	"me",
	"med",
	"media",
	"meet",
	"melbourne",
	"meme",
	"memorial",
	"men",
	"menu",
	"merckmsd",
	"mg",
	"mh",
	"miami",
	"microsoft",
	"mil",
	"mini",
	"mint",
	"mit",
	"mitsubishi",
	"mk",
	"ml",
	"mlb",
	"mls",
	"mm",
	"mma",
	"mn",
	"mo",
	"mobi",
	"mobile",
	"moda",
	"moe",
	"moi",
	"mom",
	"monash",
	"money",
	"monster",
	"mormon",
	"mortgage",
	"moscow",
	"moto",
	"motorcycles",
	"mov",
	"movie",
	"mp",
	"mq",
	"mr",
	"ms",
	"msd",
	"mt",
	"mtn",
	"mtr",
	"mu",
	"museum",
	"music",
	"mv",
	"mw",
	"mx",
	"my",
	"mz",
	"na",
	"nab",
	"nagoya",
	"name",
	"navy",
	"nba",
	"nc",
	"ne",
	"nec",
	"net",
	"netbank",
	"netflix",
	"network",
	"neustar",
	"new",
	"news",
	"next",
	"nextdirect",
	"nexus",
	"nf",
	"nfl",
	"ng",
	"ngo",
	"nhk",
	"ni",
	"nico",
	"nike",
	"nikon",
	"ninja",
	"nissan",
	"nissay",
	"nl",
	"no",
	"nokia",
	"norton",
	"now",
	"nowruz",
	"nowtv",
	"np",
	"nr",
	"nra",
	"nrw",
	"ntt",
	"nu",
	"nyc",
	"nz",
	"obi",
	"observer",
	"office",
	"okinawa",
	"olayan",
	"olayangroup",
	"ollo",
	"om",
	"omega",
	"one",
	"ong",
	"onl",
	"online",
	"ooo",
	"open",
	"oracle",
	"orange",
	"org",
	"organic",
	"origins",
	"osaka",
	"otsuka",
	"ott",
	"ovh",
	"pa",
	"page",
	"panasonic",
	"paris",
	"pars",
	"partners",
	"parts",
	"party",
	"pay",
	"pccw",
	"pe",
	"pet",
	"pf",
	"pfizer",
	"pg",
	"ph",
	"pharmacy",
	"phd",
	"philips",
	"phone",
	"photo",
	"photography",
	"photos",
	"physio",
	"pics",
	"pictet",
	"pictures",
	"pid",
	"pin",
	"ping",
	"pink",
	"pioneer",
	"pizza",
	"pk",
	"pl",
	"place",
	"play",
	"playstation",
	"plumbing",
	"plus",
	"pm",
	"pn",
	"pnc",
	"pohl",
	"poker",
	"politie",
	"porn",
	"post",
	"pr",
	"pramerica",
	"praxi",
	"press",
	"prime",
	"pro",
	"prod",
	"productions",
	"prof",
	"progressive",
	"promo",
	"properties",
	"property",
	"protection",
	"pru",
	"prudential",
	"ps",
	"pt",
	"pub",
	"pw",
	"pwc",
	"py",
	"qa",
	"qpon",
	"quebec",
	"quest",
	"racing",
	"radio",
	"re",
	"read",
	"realestate",
	"realtor",
	"realty",
	"recipes",
	"red",
	"redstone",
	"redumbrella",
	"rehab",
	"reise",
	"reisen",
	"reit",
	"reliance",
	"ren",
	"rent",
	"rentals",
	"repair",
	"report",
	"republican",
	"rest",
	"restaurant",
	"review",
	"reviews",
	"rexroth",
	"rich",
	"richardli",
	"ricoh",
	"ril",
	"rio",
	"rip",
	"ro",
	"rocks",
	"rodeo",
	"rogers",
	"room",
	"rs",
	"rsvp",
	"ru",
	"rugby",
	"ruhr",
	"run",
	"rw",
	"rwe",
	"ryukyu",
	"sa",
	"saarland",
	"safe",
	"safety",
	"sakura",
	"sale",
	"salon",
	"samsclub",
	"samsung",
	"sandvik",
	"sandvikcoromant",
	"sanofi",
	"sap",
	"sarl",
	"sas",
	"save",
	"saxo",
	"sb",
	"sbi",
	"sbs",
	"sc",
	"scb",
	"schaeffler",
	"schmidt",
	"scholarships",
	"school",
	"schule",
	"schwarz",
	"science",
	"scot",
	"sd",
	"se",
	"search",
	"seat",
	"secure",
	"security",
	"seek",
	"select",
	"sener",
	"services",
	"seven",
	"sew",
	"sex",
	"sexy",
	"sfr",
	"sg",
	"sh",
	"shangrila",
	"sharp",
	"shell",
	"shia",
	"shiksha",
	"shoes",
	"shop",
	"shopping",
	"shouji",
	"show",
	"si",
	"silk",
	"sina",
	"singles",
	"site",
	"sj",
	"sk",
	"ski",
	"skin",
	"sky",
	"skype",
	"sl",
	"sling",
	"sm",
	"smart",
	"smile",
	"sn",
	"sncf",
	"so",
	"soccer",
	"social",
	"softbank",
	"software",
	"sohu",
	"solar",
	"solutions",
	"song",
	"sony",
	"soy",
	"spa",
	"space",
	"sport",
	"spot",
	"sr",
	"srl",
	"ss",
	"st",
	"stada",
	"staples",
	"star",
	"statebank",
	"statefarm",
	"stc",
	"stcgroup",
	"stockholm",
	"storage",
	"store",
	"stream",
	"studio",
	"study",
	"style",
	"su",
	"sucks",
	"supplies",
	"supply",
	"support",
	"surf",
	"surgery",
	"suzuki",
	"sv",
	"swatch",
	"swiss",
	"sx",
	"sy",
	"sydney",
	"systems",
	"sz",
	"tab",
	"taipei",
	"talk",
	"taobao",
	"target",
	"tatamotors",
	"tatar",
	"tattoo",
	"tax",
	"taxi",
	"tc",
	"tci",
	"td",
	"tdk",
	"team",
	"tech",
	"technology",
	"tel",
	"temasek",
	"tennis",
	"teva",
	"tf",
	"tg",
	"th",
	"thd",
	"theater",
	"theatre",
	"tiaa",
	"tickets",
	"tienda",
	"tips",
	"tires",
	"tirol",
	"tj",
	"tjmaxx",
	"tjx",
	"tk",
	"tkmaxx",
	"tl",
	"tm",
	"tmall",
	"tn",
	"to",
	"today",
	"tokyo",
	"tools",
	"top",
	"toray",
	"toshiba",
	"total",
	"tours",
	"town",
	"toyota",
	"toys",
	"tr",
	"trade",
	"trading",
	"training",
	"travel",
	"travelers",
	"travelersinsurance",
	"trust",
	"trv",
	"tt",
	"tube",
	"tui",
	"tunes",
	"tushu",
	"tv",
	"tvs",
	"tw",
	"tz",
	"ua",
	"ubank",
	"ubs",
	"ug",
	"uk",
	"unicom",
	"university",
	"uno",
	"uol",
	"ups",
	"us",
	"uy",
	"uz",
	"va",
	"vacations",
	"vana",
	"vanguard",
	"vc",
	"ve",
	"vegas",
	"ventures",
	"verisign",
	"vermögensberater",
	"vermögensberatung",
	"versicherung",
	"vet",
	"vg",
	"vi",
	"viajes",
	"video",
	"vig",
	"viking",
	"villas",
	"vin",
	"vip",
	"virgin",
	"visa",
	"vision",
	"viva",
	"vivo",
	"vlaanderen",
	"vn",
	"vodka",
	"volvo",
	"vote",
	"voting",
	"voto",
	"voyage",
	"vu",
	"wales",
	"walmart",
	"walter",
	"wang",
	"wanggou",
	"watch",
	"watches",
	"weather",
	"weatherchannel",
	"webcam",
	"weber",
	"website",
	"wed",
	"wedding",
	"weibo",
	"weir",
	"wf",
	"whoswho",
	"wien",
	"wiki",
	"williamhill",
	"win",
	"windows",
	"wine",
	"winners",
	"wme",
	"wolterskluwer",
	"woodside",
	"work",
	"works",
	"world",
	"wow",
	"ws",
	"wtc",
	"wtf",
	"xbox",
	"xerox",
	"xihuan",
	"xin",
	"xxx",
	"xyz",
	"yachts",
	"yahoo",
	"yamaxun",
	"yandex",
	"ye",
	"yodobashi",
	"yoga",
	"yokohama",
	"you",
	"youtube",
	"yt",
	"yun",
	"za",
	"zappos",
	"zara",
	"zero",
	"zip",
	"zm",
	"zone",
	"zuerich",
	"zw",
	"ελ",
	"ευ",
	"бг",
	"бел",
	"дети",
	"ею",
	"католик",
	"ком",
	"мкд",
	"мон",
	"москва",
	"онлайн",
	"орг",
	"рус",
	"рф",
	"сайт",
	"срб",
	"укр",
	"қаз",
	"հայ",
	"ישראל",
	"קום",
	"ابوظبي",
	"ارامكو",
	"الاردن",
	"البحرين",
	"الجزائر",
	"السعودية",
	"العليان",
	"المغرب",
	"امارات",
	"ایران",
	"بارت",
	"بازار",
	"بيتك",
	"بھارت",
	"تونس",
	"سودان",
	"سورية",
	"شبكة",
	"عراق",
	"عرب",
	"عمان",
	"فلسطين",
	"قطر",
	"كاثوليك",
	"كوم",
	"مصر",
	"مليسيا",
	"موريتانيا",
	"موقع",
	"همراه",
	"پاکستان",
	"ڀارت",
	"कॉम",
	"नेट",
	"भारत",
	"भारतम्",
	"भारोत",
	"संगठन",
	"বাংলা",
	"ভারত",
	"ভাৰত",
	"ਭਾਰਤ",
	"ભારત",
	"ଭାରତ",
	"இந்தியா",
	"இலங்கை",
	"சிங்கப்பூர்",
	"భారత్",
	"ಭಾರತ",
	"ഭാരതം",
	"ලංකා",
	"คอม",
	"ไทย",
	"ລາວ",
	"გე",
	"みんな",
	"アマゾン",
	"クラウド",
	"グーグル",
	"コム",
	"ストア",
	"セール",
	"ファッション",
	"ポイント",
	"世界",
	"中信",
	"中国",
	"中國",
	"中文网",
	"亚马逊",
	"企业",
	"佛山",
	"信息",
	"健康",
	"八卦",
	"公司",
	"公益",
	"台湾",
	"台灣",
	"商城",
	"商店",
	"商标",
	"嘉里",
	"嘉里大酒店",
	"在线",
	"大拿",
	"天主教",
	"娱乐",
	"家電",
	"广东",
	"微博",
	"慈善",
	"我爱你",
	"手机",
	"招聘",
	"政务",
	"政府",
	"新加坡",
	"新闻",
	"时尚",
	"書籍",
	"机构",
	"淡马锡",
	"游戏",
	"澳門",
	"点看",
	"移动",
	"组织机构",
	"网址",
	"网店",
	"网站",
	"网络",
	"联通",
	"谷歌",
	"购物",
	"通販",
	"集团",
	"電訊盈科",
	"飞利浦",
	"食品",
	"餐厅",
	"香格里拉",
	"香港",
	"닷넷",
	"닷컴",
	"삼성",
	"한국"
];

var util$1 = {};

var hasRequiredUtil$1;
function requireUtil$1() {
  if (hasRequiredUtil$1) return util$1;
  hasRequiredUtil$1 = 1;
  Object.defineProperty(util$1, "__esModule", {
    value: true
  });
  util$1.TAG_REGEX = util$1.TRAILING_PUNCTUATION_REGEX = util$1.URL_REGEX = util$1.MENTION_REGEX = undefined;
  util$1.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
  util$1.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
  util$1.TRAILING_PUNCTUATION_REGEX = /\p{P}+$/gu;
  /**
   * `\ufe0f` emoji modifier
   * `\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2` zero-width spaces (likely incomplete)
   */
  util$1.TAG_REGEX =
  // eslint-disable-next-line no-misleading-character-class
  /(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;
  return util$1;
}

var hasRequiredDetection;
function requireDetection() {
  if (hasRequiredDetection) return detection;
  hasRequiredDetection = 1;
  var __importDefault = detection.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  Object.defineProperty(detection, "__esModule", {
    value: true
  });
  detection.detectFacets = detectFacets;
  const tlds_1 = __importDefault(require$$0);
  const util_1 = requireUtil$1();
  function detectFacets(text) {
    let match;
    const facets = [];
    {
      // mentions
      const re = util_1.MENTION_REGEX;
      while (match = re.exec(text.utf16)) {
        if (!isValidDomain(match[3]) && !match[3].endsWith('.test')) {
          continue; // probably not a handle
        }
        const start = text.utf16.indexOf(match[3], match.index) - 1;
        facets.push({
          $type: 'app.bsky.richtext.facet',
          index: {
            byteStart: text.utf16IndexToUtf8Index(start),
            byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
          },
          features: [{
            $type: 'app.bsky.richtext.facet#mention',
            did: match[3] // must be resolved afterwards
          }]
        });
      }
    }
    {
      // links
      const re = util_1.URL_REGEX;
      while (match = re.exec(text.utf16)) {
        let uri = match[2];
        if (!uri.startsWith('http')) {
          const domain = match.groups?.domain;
          if (!domain || !isValidDomain(domain)) {
            continue;
          }
          uri = `https://${uri}`;
        }
        const start = text.utf16.indexOf(match[2], match.index);
        const index = {
          start,
          end: start + match[2].length
        };
        // strip ending puncuation
        if (/[.,;:!?]$/.test(uri)) {
          uri = uri.slice(0, -1);
          index.end--;
        }
        if (/[)]$/.test(uri) && !uri.includes('(')) {
          uri = uri.slice(0, -1);
          index.end--;
        }
        facets.push({
          index: {
            byteStart: text.utf16IndexToUtf8Index(index.start),
            byteEnd: text.utf16IndexToUtf8Index(index.end)
          },
          features: [{
            $type: 'app.bsky.richtext.facet#link',
            uri
          }]
        });
      }
    }
    {
      const re = util_1.TAG_REGEX;
      while (match = re.exec(text.utf16)) {
        const leading = match[1];
        let tag = match[2];
        if (!tag) continue;
        // strip ending punctuation and any spaces
        tag = tag.trim().replace(util_1.TRAILING_PUNCTUATION_REGEX, '');
        if (tag.length === 0 || tag.length > 64) continue;
        const index = match.index + leading.length;
        facets.push({
          index: {
            byteStart: text.utf16IndexToUtf8Index(index),
            byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag.length)
          },
          features: [{
            $type: 'app.bsky.richtext.facet#tag',
            tag: tag
          }]
        });
      }
    }
    return facets.length > 0 ? facets : undefined;
  }
  function isValidDomain(str) {
    return !!tlds_1.default.find(tld => {
      const i = str.lastIndexOf(tld);
      if (i === -1) {
        return false;
      }
      return str.charAt(i - 1) === '.' && i === str.length - tld.length;
    });
  }
  return detection;
}

var hasRequiredRichText;
function requireRichText() {
  if (hasRequiredRichText) return richText;
  hasRequiredRichText = 1;
  /*
  = Rich Text Manipulation
  	When we sanitize rich text, we have to update the entity indices as the
  text is modified. This can be modeled as inserts() and deletes() of the
  rich text string. The possible scenarios are outlined below, along with
  their expected behaviors.
  	NOTE: Slices are start inclusive, end exclusive
  	== richTextInsert()
  	Target string:
  	   0 1 2 3 4 5 6 7 8 910   // string indices
     h e l l o   w o r l d   // string value
         ^-------^           // target slice {start: 2, end: 7}
  	Scenarios:
  	A: ^                       // insert "test" at 0
  B:        ^                // insert "test" at 4
  C:                 ^       // insert "test" at 8
  	A = before           -> move both by num added
  B = inner            -> move end by num added
  C = after            -> noop
  	Results:
  	A: 0 1 2 3 4 5 6 7 8 910   // string indices
     t e s t h e l l o   w   // string value
                 ^-------^   // target slice {start: 6, end: 11}
  	B: 0 1 2 3 4 5 6 7 8 910   // string indices
     h e l l t e s t o   w   // string value
         ^---------------^   // target slice {start: 2, end: 11}
  	C: 0 1 2 3 4 5 6 7 8 910   // string indices
     h e l l o   w o t e s   // string value
         ^-------^           // target slice {start: 2, end: 7}
  	== richTextDelete()
  	Target string:
  	   0 1 2 3 4 5 6 7 8 910   // string indices
     h e l l o   w o r l d   // string value
         ^-------^           // target slice {start: 2, end: 7}
  	Scenarios:
  	A: ^---------------^       // remove slice {start: 0, end: 9}
  B:               ^-----^   // remove slice {start: 7, end: 11}
  C:         ^-----------^   // remove slice {start: 4, end: 11}
  D:       ^-^               // remove slice {start: 3, end: 5}
  E:   ^-----^               // remove slice {start: 1, end: 5}
  F: ^-^                     // remove slice {start: 0, end: 2}
  	A = entirely outer   -> delete slice
  B = entirely after   -> noop
  C = partially after  -> move end to remove-start
  D = entirely inner   -> move end by num removed
  E = partially before -> move start to remove-start index, move end by num removed
  F = entirely before  -> move both by num removed
  	Results:
  	A: 0 1 2 3 4 5 6 7 8 910   // string indices
     l d                     // string value
                             // target slice (deleted)
  	B: 0 1 2 3 4 5 6 7 8 910   // string indices
     h e l l o   w           // string value
         ^-------^           // target slice {start: 2, end: 7}
  	C: 0 1 2 3 4 5 6 7 8 910   // string indices
     h e l l                 // string value
         ^-^                 // target slice {start: 2, end: 4}
  	D: 0 1 2 3 4 5 6 7 8 910   // string indices
     h e l   w o r l d       // string value
         ^---^               // target slice {start: 2, end: 5}
  	E: 0 1 2 3 4 5 6 7 8 910   // string indices
     h   w o r l d           // string value
       ^-^                   // target slice {start: 1, end: 3}
  	F: 0 1 2 3 4 5 6 7 8 910   // string indices
     l l o   w o r l d       // string value
     ^-------^               // target slice {start: 0, end: 5}
   */
  Object.defineProperty(richText, "__esModule", {
    value: true
  });
  richText.RichText = richText.RichTextSegment = undefined;
  const client_1 = requireClient();
  const unicode_1 = requireUnicode();
  const sanitization_1 = requireSanitization();
  const detection_1 = requireDetection();
  class RichTextSegment {
    constructor(text, facet) {
      Object.defineProperty(this, "text", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: text
      });
      Object.defineProperty(this, "facet", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: facet
      });
    }
    get link() {
      const link = this.facet?.features.find(client_1.AppBskyRichtextFacet.isLink);
      if (client_1.AppBskyRichtextFacet.isLink(link)) {
        return link;
      }
      return undefined;
    }
    isLink() {
      return !!this.link;
    }
    get mention() {
      const mention = this.facet?.features.find(client_1.AppBskyRichtextFacet.isMention);
      if (client_1.AppBskyRichtextFacet.isMention(mention)) {
        return mention;
      }
      return undefined;
    }
    isMention() {
      return !!this.mention;
    }
    get tag() {
      const tag = this.facet?.features.find(client_1.AppBskyRichtextFacet.isTag);
      if (client_1.AppBskyRichtextFacet.isTag(tag)) {
        return tag;
      }
      return undefined;
    }
    isTag() {
      return !!this.tag;
    }
  }
  richText.RichTextSegment = RichTextSegment;
  class RichText {
    constructor(props, opts) {
      Object.defineProperty(this, "unicodeText", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "facets", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      this.unicodeText = new unicode_1.UnicodeString(props.text);
      this.facets = props.facets;
      if (!this.facets?.length && props.entities?.length) {
        this.facets = entitiesToFacets(this.unicodeText, props.entities);
      }
      if (this.facets) {
        this.facets = this.facets.filter(facetFilter).sort(facetSort);
      }
      if (opts?.cleanNewlines) {
        (0, sanitization_1.sanitizeRichText)(this, {
          cleanNewlines: true
        }).copyInto(this);
      }
    }
    get text() {
      return this.unicodeText.toString();
    }
    get length() {
      return this.unicodeText.length;
    }
    get graphemeLength() {
      return this.unicodeText.graphemeLength;
    }
    clone() {
      return new RichText({
        text: this.unicodeText.utf16,
        facets: cloneDeep(this.facets)
      });
    }
    copyInto(target) {
      target.unicodeText = this.unicodeText;
      target.facets = cloneDeep(this.facets);
    }
    *segments() {
      const facets = this.facets || [];
      if (!facets.length) {
        yield new RichTextSegment(this.unicodeText.utf16);
        return;
      }
      let textCursor = 0;
      let facetCursor = 0;
      do {
        const currFacet = facets[facetCursor];
        if (textCursor < currFacet.index.byteStart) {
          yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
        } else if (textCursor > currFacet.index.byteStart) {
          facetCursor++;
          continue;
        }
        if (currFacet.index.byteStart < currFacet.index.byteEnd) {
          const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
          if (!subtext.trim()) {
            // dont empty string entities
            yield new RichTextSegment(subtext);
          } else {
            yield new RichTextSegment(subtext, currFacet);
          }
        }
        textCursor = currFacet.index.byteEnd;
        facetCursor++;
      } while (facetCursor < facets.length);
      if (textCursor < this.unicodeText.length) {
        yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
      }
    }
    insert(insertIndex, insertText) {
      this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
      if (!this.facets?.length) {
        return this;
      }
      const numCharsAdded = insertText.length;
      for (const ent of this.facets) {
        // see comment at top of file for labels of each scenario
        // scenario A (before)
        if (insertIndex <= ent.index.byteStart) {
          // move both by num added
          ent.index.byteStart += numCharsAdded;
          ent.index.byteEnd += numCharsAdded;
        }
        // scenario B (inner)
        else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {
          // move end by num added
          ent.index.byteEnd += numCharsAdded;
        }
        // scenario C (after)
        // noop
      }
      return this;
    }
    delete(removeStartIndex, removeEndIndex) {
      this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
      if (!this.facets?.length) {
        return this;
      }
      const numCharsRemoved = removeEndIndex - removeStartIndex;
      for (const ent of this.facets) {
        // see comment at top of file for labels of each scenario
        // scenario A (entirely outer)
        if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
          // delete slice (will get removed in final pass)
          ent.index.byteStart = 0;
          ent.index.byteEnd = 0;
        }
        // scenario B (entirely after)
        else if (removeStartIndex > ent.index.byteEnd) ;
        // scenario C (partially after)
        else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {
          // move end to remove start
          ent.index.byteEnd = removeStartIndex;
        }
        // scenario D (entirely inner)
        else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
          // move end by num removed
          ent.index.byteEnd -= numCharsRemoved;
        }
        // scenario E (partially before)
        else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
          // move start to remove-start index, move end by num removed
          ent.index.byteStart = removeStartIndex;
          ent.index.byteEnd -= numCharsRemoved;
        }
        // scenario F (entirely before)
        else if (removeEndIndex < ent.index.byteStart) {
          // move both by num removed
          ent.index.byteStart -= numCharsRemoved;
          ent.index.byteEnd -= numCharsRemoved;
        }
      }
      // filter out any facets that were made irrelevant
      this.facets = this.facets.filter(ent => ent.index.byteStart < ent.index.byteEnd);
      return this;
    }
    /**
     * Detects facets such as links and mentions
     * Note: Overwrites the existing facets with auto-detected facets
     */
    async detectFacets(agent) {
      this.facets = (0, detection_1.detectFacets)(this.unicodeText);
      if (this.facets) {
        const promises = [];
        for (const facet of this.facets) {
          for (const feature of facet.features) {
            if (client_1.AppBskyRichtextFacet.isMention(feature)) {
              promises.push(agent.com.atproto.identity.resolveHandle({
                handle: feature.did
              }).then(res => res?.data.did).catch(_ => undefined).then(did => {
                feature.did = did || '';
              }));
            }
          }
        }
        await Promise.allSettled(promises);
        this.facets.sort(facetSort);
      }
    }
    /**
     * Detects facets such as links and mentions but does not resolve them
     * Will produce invalid facets! For instance, mentions will not have their DIDs set.
     * Note: Overwrites the existing facets with auto-detected facets
     */
    detectFacetsWithoutResolution() {
      this.facets = (0, detection_1.detectFacets)(this.unicodeText);
      if (this.facets) {
        this.facets.sort(facetSort);
      }
    }
  }
  richText.RichText = RichText;
  const facetSort = (a, b) => a.index.byteStart - b.index.byteStart;
  const facetFilter = facet =>
  // discard negative-length facets. zero-length facets are valid
  facet.index.byteStart <= facet.index.byteEnd;
  function entitiesToFacets(text, entities) {
    const facets = [];
    for (const ent of entities) {
      if (ent.type === 'link') {
        facets.push({
          $type: 'app.bsky.richtext.facet',
          index: {
            byteStart: text.utf16IndexToUtf8Index(ent.index.start),
            byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
          },
          features: [{
            $type: 'app.bsky.richtext.facet#link',
            uri: ent.value
          }]
        });
      } else if (ent.type === 'mention') {
        facets.push({
          $type: 'app.bsky.richtext.facet',
          index: {
            byteStart: text.utf16IndexToUtf8Index(ent.index.start),
            byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
          },
          features: [{
            $type: 'app.bsky.richtext.facet#mention',
            did: ent.value
          }]
        });
      }
    }
    return facets;
  }
  function cloneDeep(v) {
    if (typeof v === 'undefined') {
      return v;
    }
    return JSON.parse(JSON.stringify(v));
  }
  return richText;
}

var moderation = {};

var account = {};

var decision = {};

var types = {};

var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes) return types;
  hasRequiredTypes = 1;
  Object.defineProperty(types, "__esModule", {
    value: true
  });
  types.NOOP_BEHAVIOR = types.HIDE_BEHAVIOR = types.MUTEWORD_BEHAVIOR = types.MUTE_BEHAVIOR = types.BLOCK_BEHAVIOR = types.CUSTOM_LABEL_VALUE_RE = undefined;
  // syntax
  // =
  types.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
  types.BLOCK_BEHAVIOR = {
    profileList: 'blur',
    profileView: 'alert',
    avatar: 'blur',
    banner: 'blur',
    contentList: 'blur',
    contentView: 'blur'
  };
  types.MUTE_BEHAVIOR = {
    profileList: 'inform',
    profileView: 'alert',
    contentList: 'blur',
    contentView: 'inform'
  };
  types.MUTEWORD_BEHAVIOR = {
    contentList: 'blur',
    contentView: 'blur'
  };
  types.HIDE_BEHAVIOR = {
    contentList: 'blur',
    contentView: 'blur'
  };
  types.NOOP_BEHAVIOR = {};
  return types;
}

var ui = {};

var hasRequiredUi;
function requireUi() {
  if (hasRequiredUi) return ui;
  hasRequiredUi = 1;
  Object.defineProperty(ui, "__esModule", {
    value: true
  });
  ui.ModerationUI = undefined;
  class ModerationUI {
    constructor() {
      Object.defineProperty(this, "noOverride", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: false
      });
      Object.defineProperty(this, "filters", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: []
      });
      Object.defineProperty(this, "blurs", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: []
      });
      Object.defineProperty(this, "alerts", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: []
      });
      Object.defineProperty(this, "informs", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: []
      });
    }
    get filter() {
      return this.filters.length !== 0;
    }
    get blur() {
      return this.blurs.length !== 0;
    }
    get alert() {
      return this.alerts.length !== 0;
    }
    get inform() {
      return this.informs.length !== 0;
    }
  }
  ui.ModerationUI = ModerationUI;
  return ui;
}

var labels = {};

var hasRequiredLabels;
function requireLabels() {
  if (hasRequiredLabels) return labels;
  hasRequiredLabels = 1;
  Object.defineProperty(labels, "__esModule", {
    value: true
  });
  labels.LABELS = labels.DEFAULT_LABEL_SETTINGS = undefined;
  labels.DEFAULT_LABEL_SETTINGS = {
    porn: 'hide',
    sexual: 'warn',
    nudity: 'ignore',
    'graphic-media': 'warn'
  };
  labels.LABELS = {
    '!hide': {
      identifier: '!hide',
      configurable: false,
      defaultSetting: 'hide',
      flags: ['no-override', 'no-self'],
      severity: 'alert',
      blurs: 'content',
      behaviors: {
        account: {
          profileList: 'blur',
          profileView: 'blur',
          avatar: 'blur',
          banner: 'blur',
          displayName: 'blur',
          contentList: 'blur',
          contentView: 'blur'
        },
        profile: {
          avatar: 'blur',
          banner: 'blur',
          displayName: 'blur'
        },
        content: {
          contentList: 'blur',
          contentView: 'blur'
        }
      },
      locales: []
    },
    '!warn': {
      identifier: '!warn',
      configurable: false,
      defaultSetting: 'warn',
      flags: ['no-self'],
      severity: 'none',
      blurs: 'content',
      behaviors: {
        account: {
          profileList: 'blur',
          profileView: 'blur',
          avatar: 'blur',
          banner: 'blur',
          contentList: 'blur',
          contentView: 'blur'
        },
        profile: {
          avatar: 'blur',
          banner: 'blur',
          displayName: 'blur'
        },
        content: {
          contentList: 'blur',
          contentView: 'blur'
        }
      },
      locales: []
    },
    '!no-unauthenticated': {
      identifier: '!no-unauthenticated',
      configurable: false,
      defaultSetting: 'hide',
      flags: ['no-override', 'unauthed'],
      severity: 'none',
      blurs: 'content',
      behaviors: {
        account: {
          profileList: 'blur',
          profileView: 'blur',
          avatar: 'blur',
          banner: 'blur',
          displayName: 'blur',
          contentList: 'blur',
          contentView: 'blur'
        },
        profile: {
          avatar: 'blur',
          banner: 'blur',
          displayName: 'blur'
        },
        content: {
          contentList: 'blur',
          contentView: 'blur'
        }
      },
      locales: []
    },
    porn: {
      identifier: 'porn',
      configurable: true,
      defaultSetting: 'hide',
      flags: ['adult'],
      severity: 'none',
      blurs: 'media',
      behaviors: {
        account: {
          avatar: 'blur',
          banner: 'blur'
        },
        profile: {
          avatar: 'blur',
          banner: 'blur'
        },
        content: {
          contentMedia: 'blur'
        }
      },
      locales: []
    },
    sexual: {
      identifier: 'sexual',
      configurable: true,
      defaultSetting: 'warn',
      flags: ['adult'],
      severity: 'none',
      blurs: 'media',
      behaviors: {
        account: {
          avatar: 'blur',
          banner: 'blur'
        },
        profile: {
          avatar: 'blur',
          banner: 'blur'
        },
        content: {
          contentMedia: 'blur'
        }
      },
      locales: []
    },
    nudity: {
      identifier: 'nudity',
      configurable: true,
      defaultSetting: 'ignore',
      flags: [],
      severity: 'none',
      blurs: 'media',
      behaviors: {
        account: {
          avatar: 'blur',
          banner: 'blur'
        },
        profile: {
          avatar: 'blur',
          banner: 'blur'
        },
        content: {
          contentMedia: 'blur'
        }
      },
      locales: []
    },
    'graphic-media': {
      identifier: 'graphic-media',
      flags: ['adult'],
      configurable: true,
      defaultSetting: 'warn',
      severity: 'none',
      blurs: 'media',
      behaviors: {
        account: {
          avatar: 'blur',
          banner: 'blur'
        },
        profile: {
          avatar: 'blur',
          banner: 'blur'
        },
        content: {
          contentMedia: 'blur'
        }
      },
      locales: []
    },
    /** @deprecated alias for `graphic-media` */
    gore: {
      identifier: 'gore',
      flags: ['adult'],
      configurable: true,
      defaultSetting: 'warn',
      severity: 'none',
      blurs: 'media',
      behaviors: {
        account: {
          avatar: 'blur',
          banner: 'blur'
        },
        profile: {
          avatar: 'blur',
          banner: 'blur'
        },
        content: {
          contentMedia: 'blur'
        }
      },
      locales: []
    }
  };
  return labels;
}

var hasRequiredDecision;
function requireDecision() {
  if (hasRequiredDecision) return decision;
  hasRequiredDecision = 1;
  Object.defineProperty(decision, "__esModule", {
    value: true
  });
  decision.ModerationDecision = undefined;
  const types_1 = requireTypes();
  const ui_1 = requireUi();
  const labels_1 = requireLabels();
  var ModerationBehaviorSeverity;
  (function (ModerationBehaviorSeverity) {
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["High"] = 0] = "High";
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["Medium"] = 1] = "Medium";
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["Low"] = 2] = "Low";
  })(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
  class ModerationDecision {
    constructor() {
      Object.defineProperty(this, "did", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ''
      });
      Object.defineProperty(this, "isMe", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: false
      });
      Object.defineProperty(this, "causes", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: []
      });
    }
    static merge(...decisions) {
      const decisionsFiltered = decisions.filter(v => !!v);
      const decision = new ModerationDecision();
      if (decisionsFiltered[0]) {
        decision.did = decisionsFiltered[0].did;
        decision.isMe = decisionsFiltered[0].isMe;
      }
      decision.causes = decisionsFiltered.flatMap(d => d.causes);
      return decision;
    }
    downgrade() {
      for (const cause of this.causes) {
        cause.downgraded = true;
      }
      return this;
    }
    get blocked() {
      return !!this.blockCause;
    }
    get muted() {
      return !!this.muteCause;
    }
    get blockCause() {
      return this.causes.find(cause => cause.type === 'blocking' || cause.type === 'blocked-by' || cause.type === 'block-other');
    }
    get muteCause() {
      return this.causes.find(cause => cause.type === 'muted');
    }
    get labelCauses() {
      return this.causes.filter(cause => cause.type === 'label');
    }
    ui(context) {
      const ui = new ui_1.ModerationUI();
      for (const cause of this.causes) {
        if (cause.type === 'blocking' || cause.type === 'blocked-by' || cause.type === 'block-other') {
          if (this.isMe) {
            continue;
          }
          if (context === 'profileList' || context === 'contentList') {
            ui.filters.push(cause);
          }
          if (!cause.downgraded) {
            if (types_1.BLOCK_BEHAVIOR[context] === 'blur') {
              ui.noOverride = true;
              ui.blurs.push(cause);
            } else if (types_1.BLOCK_BEHAVIOR[context] === 'alert') {
              ui.alerts.push(cause);
            } else if (types_1.BLOCK_BEHAVIOR[context] === 'inform') {
              ui.informs.push(cause);
            }
          }
        } else if (cause.type === 'muted') {
          if (this.isMe) {
            continue;
          }
          if (context === 'profileList' || context === 'contentList') {
            ui.filters.push(cause);
          }
          if (!cause.downgraded) {
            if (types_1.MUTE_BEHAVIOR[context] === 'blur') {
              ui.blurs.push(cause);
            } else if (types_1.MUTE_BEHAVIOR[context] === 'alert') {
              ui.alerts.push(cause);
            } else if (types_1.MUTE_BEHAVIOR[context] === 'inform') {
              ui.informs.push(cause);
            }
          }
        } else if (cause.type === 'mute-word') {
          if (this.isMe) {
            continue;
          }
          if (context === 'contentList') {
            ui.filters.push(cause);
          }
          if (!cause.downgraded) {
            if (types_1.MUTEWORD_BEHAVIOR[context] === 'blur') {
              ui.blurs.push(cause);
            } else if (types_1.MUTEWORD_BEHAVIOR[context] === 'alert') {
              ui.alerts.push(cause);
            } else if (types_1.MUTEWORD_BEHAVIOR[context] === 'inform') {
              ui.informs.push(cause);
            }
          }
        } else if (cause.type === 'hidden') {
          if (context === 'profileList' || context === 'contentList') {
            ui.filters.push(cause);
          }
          if (!cause.downgraded) {
            if (types_1.HIDE_BEHAVIOR[context] === 'blur') {
              ui.blurs.push(cause);
            } else if (types_1.HIDE_BEHAVIOR[context] === 'alert') {
              ui.alerts.push(cause);
            } else if (types_1.HIDE_BEHAVIOR[context] === 'inform') {
              ui.informs.push(cause);
            }
          }
        } else if (cause.type === 'label') {
          if (context === 'profileList' && cause.target === 'account') {
            if (cause.setting === 'hide' && !this.isMe) {
              ui.filters.push(cause);
            }
          } else if (context === 'contentList' && (cause.target === 'account' || cause.target === 'content')) {
            if (cause.setting === 'hide' && !this.isMe) {
              ui.filters.push(cause);
            }
          }
          if (!cause.downgraded) {
            if (cause.behavior[context] === 'blur') {
              ui.blurs.push(cause);
              if (cause.noOverride && !this.isMe) {
                ui.noOverride = true;
              }
            } else if (cause.behavior[context] === 'alert') {
              ui.alerts.push(cause);
            } else if (cause.behavior[context] === 'inform') {
              ui.informs.push(cause);
            }
          }
        }
      }
      ui.filters.sort(sortByPriority);
      ui.blurs.sort(sortByPriority);
      return ui;
    }
    setDid(did) {
      this.did = did;
    }
    setIsMe(isMe) {
      this.isMe = isMe;
    }
    addHidden(hidden) {
      if (hidden) {
        this.causes.push({
          type: 'hidden',
          source: {
            type: 'user'
          },
          priority: 6
        });
      }
    }
    addMutedWord(mutedWord) {
      if (mutedWord) {
        this.causes.push({
          type: 'mute-word',
          source: {
            type: 'user'
          },
          priority: 6
        });
      }
    }
    addBlocking(blocking) {
      if (blocking) {
        this.causes.push({
          type: 'blocking',
          source: {
            type: 'user'
          },
          priority: 3
        });
      }
    }
    addBlockingByList(blockingByList) {
      if (blockingByList) {
        this.causes.push({
          type: 'blocking',
          source: {
            type: 'list',
            list: blockingByList
          },
          priority: 3
        });
      }
    }
    addBlockedBy(blockedBy) {
      if (blockedBy) {
        this.causes.push({
          type: 'blocked-by',
          source: {
            type: 'user'
          },
          priority: 4
        });
      }
    }
    addBlockOther(blockOther) {
      if (blockOther) {
        this.causes.push({
          type: 'block-other',
          source: {
            type: 'user'
          },
          priority: 4
        });
      }
    }
    addLabel(target, label, opts) {
      // look up the label definition
      const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val) ? opts.labelDefs?.[label.src]?.find(def => def.identifier === label.val) || labels_1.LABELS[label.val] : labels_1.LABELS[label.val];
      if (!labelDef) {
        // ignore labels we don't understand
        return;
      }
      // look up the label preference
      const isSelf = label.src === this.did;
      const labeler = isSelf ? undefined : opts.prefs.labelers.find(s => s.did === label.src);
      if (!isSelf && !labeler) {
        return; // skip labelers not configured by the user
      }
      if (isSelf && labelDef.flags.includes('no-self')) {
        return; // skip self-labels that aren't supported
      }
      // establish the label preference for interpretation
      let labelPref = labelDef.defaultSetting || 'ignore';
      if (!labelDef.configurable) {
        labelPref = labelDef.defaultSetting || 'hide';
      } else if (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
        labelPref = 'hide';
      } else if (labeler?.labels[labelDef.identifier]) {
        labelPref = labeler?.labels[labelDef.identifier];
      } else if (opts.prefs.labels[labelDef.identifier]) {
        labelPref = opts.prefs.labels[labelDef.identifier];
      }
      // ignore labels the user has asked to ignore
      if (labelPref === 'ignore') {
        return;
      }
      // ignore 'unauthed' labels when the user is authed
      if (labelDef.flags.includes('unauthed') && !!opts.userDid) {
        return;
      }
      // establish the priority of the label
      let priority;
      const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target]);
      if (labelDef.flags.includes('no-override') || labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
        priority = 1;
      } else if (labelPref === 'hide') {
        priority = 2;
      } else if (severity === ModerationBehaviorSeverity.High) {
        // blurring profile view or content view
        priority = 5;
      } else if (severity === ModerationBehaviorSeverity.Medium) {
        // blurring content list or content media
        priority = 7;
      } else {
        // blurring avatar, adding alerts
        priority = 8;
      }
      let noOverride = false;
      if (labelDef.flags.includes('no-override')) {
        noOverride = true;
      } else if (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) {
        noOverride = true;
      }
      this.causes.push({
        type: 'label',
        source: isSelf || !labeler ? {
          type: 'user'
        } : {
          type: 'labeler',
          did: labeler.did
        },
        label,
        labelDef,
        target,
        setting: labelPref,
        behavior: labelDef.behaviors[target] || types_1.NOOP_BEHAVIOR,
        noOverride,
        priority
      });
    }
    addMuted(muted) {
      if (muted) {
        this.causes.push({
          type: 'muted',
          source: {
            type: 'user'
          },
          priority: 6
        });
      }
    }
    addMutedByList(mutedByList) {
      if (mutedByList) {
        this.causes.push({
          type: 'muted',
          source: {
            type: 'list',
            list: mutedByList
          },
          priority: 6
        });
      }
    }
  }
  decision.ModerationDecision = ModerationDecision;
  function measureModerationBehaviorSeverity(beh) {
    if (!beh) {
      return ModerationBehaviorSeverity.Low;
    }
    if (beh.profileView === 'blur' || beh.contentView === 'blur') {
      return ModerationBehaviorSeverity.High;
    }
    if (beh.contentList === 'blur' || beh.contentMedia === 'blur') {
      return ModerationBehaviorSeverity.Medium;
    }
    return ModerationBehaviorSeverity.Low;
  }
  function sortByPriority(a, b) {
    return a.priority - b.priority;
  }
  return decision;
}

var hasRequiredAccount;
function requireAccount() {
  if (hasRequiredAccount) return account;
  hasRequiredAccount = 1;
  Object.defineProperty(account, "__esModule", {
    value: true
  });
  account.decideAccount = decideAccount;
  account.filterAccountLabels = filterAccountLabels;
  const decision_1 = requireDecision();
  function decideAccount(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.did);
    acc.setIsMe(subject.did === opts.userDid);
    if (subject.viewer?.muted) {
      if (subject.viewer?.mutedByList) {
        acc.addMutedByList(subject.viewer?.mutedByList);
      } else {
        acc.addMuted(subject.viewer?.muted);
      }
    }
    if (subject.viewer?.blocking) {
      if (subject.viewer?.blockingByList) {
        acc.addBlockingByList(subject.viewer?.blockingByList);
      } else {
        acc.addBlocking(subject.viewer?.blocking);
      }
    }
    acc.addBlockedBy(subject.viewer?.blockedBy);
    for (const label of filterAccountLabels(subject.labels)) {
      acc.addLabel('account', label, opts);
    }
    return acc;
  }
  function filterAccountLabels(labels) {
    if (!labels) {
      return [];
    }
    return labels.filter(label => !label.uri.endsWith('/app.bsky.actor.profile/self') || label.val === '!no-unauthenticated');
  }
  return account;
}

var profile = {};

var hasRequiredProfile;
function requireProfile() {
  if (hasRequiredProfile) return profile;
  hasRequiredProfile = 1;
  Object.defineProperty(profile, "__esModule", {
    value: true
  });
  profile.decideProfile = decideProfile;
  profile.filterProfileLabels = filterProfileLabels;
  const decision_1 = requireDecision();
  function decideProfile(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.did);
    acc.setIsMe(subject.did === opts.userDid);
    for (const label of filterProfileLabels(subject.labels)) {
      acc.addLabel('profile', label, opts);
    }
    return acc;
  }
  function filterProfileLabels(labels) {
    if (!labels) {
      return [];
    }
    return labels.filter(label => label.uri.endsWith('/app.bsky.actor.profile/self'));
  }
  return profile;
}

var notification = {};

var hasRequiredNotification;
function requireNotification() {
  if (hasRequiredNotification) return notification;
  hasRequiredNotification = 1;
  Object.defineProperty(notification, "__esModule", {
    value: true
  });
  notification.decideNotification = decideNotification;
  const decision_1 = requireDecision();
  const account_1 = requireAccount();
  const profile_1 = requireProfile();
  function decideNotification(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) {
      for (const label of subject.labels) {
        acc.addLabel('content', label, opts);
      }
    }
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
  }
  return notification;
}

var post = {};

var mutewords = {};

var hasRequiredMutewords;
function requireMutewords() {
  if (hasRequiredMutewords) return mutewords;
  hasRequiredMutewords = 1;
  Object.defineProperty(mutewords, "__esModule", {
    value: true
  });
  mutewords.hasMutedWord = hasMutedWord;
  const client_1 = requireClient();
  const REGEX = {
    LEADING_TRAILING_PUNCTUATION: /(?:^\p{P}+|\p{P}+$)/gu,
    ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
    SEPARATORS: /[/\-–—()[\]_]+/g,
    WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
  };
  /**
   * List of 2-letter lang codes for languages that either don't use spaces, or
   * don't use spaces in a way conducive to word-based filtering.
   *
   * For these, we use a simple `String.includes` to check for a match.
   */
  const LANGUAGE_EXCEPTIONS = ['ja',
  // Japanese
  'zh',
  // Chinese
  'ko',
  // Korean
  'th',
  // Thai
  'vi' // Vietnamese
  ];
  function hasMutedWord({
    mutedWords,
    text,
    facets,
    outlineTags,
    languages,
    actor
  }) {
    const exception = LANGUAGE_EXCEPTIONS.includes(languages?.[0] || '');
    const tags = [].concat(outlineTags || []).concat((facets || []).flatMap(facet => facet.features.filter(client_1.AppBskyRichtextFacet.isTag).map(tag => tag.tag))).map(t => t.toLowerCase());
    for (const mute of mutedWords) {
      const mutedWord = mute.value.toLowerCase();
      const postText = text.toLowerCase();
      // expired, ignore
      if (mute.expiresAt && mute.expiresAt < new Date().toISOString()) continue;
      if (mute.actorTarget === 'exclude-following' && Boolean(actor?.viewer?.following)) continue;
      // `content` applies to tags as well
      if (tags.includes(mutedWord)) return true;
      // rest of the checks are for `content` only
      if (!mute.targets.includes('content')) continue;
      // single character or other exception, has to use includes
      if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord)) return true;
      // too long
      if (mutedWord.length > postText.length) continue;
      // exact match
      if (mutedWord === postText) return true;
      // any muted phrase with space or punctuation
      if (/(?:\s|\p{P})+?/u.test(mutedWord) && postText.includes(mutedWord)) return true;
      // check individual character groups
      const words = postText.split(REGEX.WORD_BOUNDARY);
      for (const word of words) {
        if (word === mutedWord) return true;
        // compare word without leading/trailing punctuation, but allow internal
        // punctuation (such as `s@ssy`)
        const wordTrimmedPunctuation = word.replace(REGEX.LEADING_TRAILING_PUNCTUATION, '');
        if (mutedWord === wordTrimmedPunctuation) return true;
        if (mutedWord.length > wordTrimmedPunctuation.length) continue;
        if (/\p{P}+/u.test(wordTrimmedPunctuation)) {
          const spacedWord = wordTrimmedPunctuation.replace(/\p{P}+/gu, ' ');
          if (spacedWord === mutedWord) return true;
          const contiguousWord = spacedWord.replace(/\s/gu, '');
          if (contiguousWord === mutedWord) return true;
          const wordParts = wordTrimmedPunctuation.split(/\p{P}+/u);
          for (const wordPart of wordParts) {
            if (wordPart === mutedWord) return true;
          }
        }
      }
    }
    return false;
  }
  return mutewords;
}

var hasRequiredPost;
function requirePost() {
  if (hasRequiredPost) return post;
  hasRequiredPost = 1;
  Object.defineProperty(post, "__esModule", {
    value: true
  });
  post.decidePost = decidePost;
  const decision_1 = requireDecision();
  const client_1 = requireClient();
  const mutewords_1 = requireMutewords();
  const account_1 = requireAccount();
  const profile_1 = requireProfile();
  function decidePost(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) {
      for (const label of subject.labels) {
        acc.addLabel('content', label, opts);
      }
    }
    acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
    if (!acc.isMe) {
      acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
    }
    let embedAcc;
    if (subject.embed) {
      if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
        // quote post
        embedAcc = decideQuotedPost(subject.embed.record, opts);
      } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
        // quoted post with media
        embedAcc = decideQuotedPost(subject.embed.record.record, opts);
      } else if (client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record)) {
        // blocked quote post
        embedAcc = decideBlockedQuotedPost(subject.embed.record, opts);
      } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record.record)) {
        // blocked quoted post with media
        embedAcc = decideBlockedQuotedPost(subject.embed.record.record, opts);
      }
    }
    return decision_1.ModerationDecision.merge(acc, embedAcc?.downgrade(), (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
  }
  function decideQuotedPost(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) {
      for (const label of subject.labels) {
        acc.addLabel('content', label, opts);
      }
    }
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
  }
  function decideBlockedQuotedPost(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.author.viewer?.muted) {
      if (subject.author.viewer?.mutedByList) {
        acc.addMutedByList(subject.author.viewer?.mutedByList);
      } else {
        acc.addMuted(subject.author.viewer?.muted);
      }
    }
    if (subject.author.viewer?.blocking) {
      if (subject.author.viewer?.blockingByList) {
        acc.addBlockingByList(subject.author.viewer?.blockingByList);
      } else {
        acc.addBlocking(subject.author.viewer?.blocking);
      }
    }
    acc.addBlockedBy(subject.author.viewer?.blockedBy);
    return acc;
  }
  function checkHiddenPost(subject, hiddenPosts) {
    if (!hiddenPosts?.length) {
      return false;
    }
    if (hiddenPosts.includes(subject.uri)) {
      return true;
    }
    if (subject.embed) {
      if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record) && hiddenPosts.includes(subject.embed.record.uri)) {
        return true;
      }
      if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) && hiddenPosts.includes(subject.embed.record.record.uri)) {
        return true;
      }
    }
    return false;
  }
  function checkMutedWords(subject, mutedWords) {
    if (!mutedWords?.length) {
      return false;
    }
    const postAuthor = subject.author;
    if (client_1.AppBskyFeedPost.isRecord(subject.record)) {
      // post text
      if ((0, mutewords_1.hasMutedWord)({
        mutedWords,
        text: subject.record.text,
        facets: subject.record.facets,
        outlineTags: subject.record.tags,
        languages: subject.record.langs,
        actor: postAuthor
      })) {
        return true;
      }
      if (subject.record.embed && client_1.AppBskyEmbedImages.isMain(subject.record.embed)) {
        // post images
        for (const image of subject.record.embed.images) {
          if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: image.alt,
            languages: subject.record.langs,
            actor: postAuthor
          })) {
            return true;
          }
        }
      }
    }
    if (subject.embed) {
      // quote post
      if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
        if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.value)) {
          const embeddedPost = subject.embed.record.value;
          const embedAuthor = subject.embed.record.author;
          // quoted post text
          if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: embeddedPost.text,
            facets: embeddedPost.facets,
            outlineTags: embeddedPost.tags,
            languages: embeddedPost.langs,
            actor: embedAuthor
          })) {
            return true;
          }
          // quoted post's images
          if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed)) {
            for (const image of embeddedPost.embed.images) {
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: image.alt,
                languages: embeddedPost.langs,
                actor: embedAuthor
              })) {
                return true;
              }
            }
          }
          // quoted post's link card
          if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
            const {
              external
            } = embeddedPost.embed;
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: external.title + ' ' + external.description,
              languages: [],
              actor: embedAuthor
            })) {
              return true;
            }
          }
          if (client_1.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
            // quoted post's link card when it did a quote + media
            if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
              const {
                external
              } = embeddedPost.embed.media;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: external.title + ' ' + external.description,
                languages: [],
                actor: embedAuthor
              })) {
                return true;
              }
            }
            // quoted post's images when it did a quote + media
            if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) {
              for (const image of embeddedPost.embed.media.images) {
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: image.alt,
                  languages: client_1.AppBskyFeedPost.isRecord(embeddedPost.record) ? embeddedPost.langs : [],
                  actor: embedAuthor
                })) {
                  return true;
                }
              }
            }
          }
        }
      }
      // link card
      else if (client_1.AppBskyEmbedExternal.isView(subject.embed)) {
        const {
          external
        } = subject.embed;
        if ((0, mutewords_1.hasMutedWord)({
          mutedWords,
          text: external.title + ' ' + external.description,
          languages: [],
          actor: postAuthor
        })) {
          return true;
        }
      }
      // quote post with media
      else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
        const embedAuthor = subject.embed.record.record.author;
        // quoted post text
        if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.record.value)) {
          const post = subject.embed.record.record.value;
          if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: post.text,
            facets: post.facets,
            outlineTags: post.tags,
            languages: post.langs,
            actor: embedAuthor
          })) {
            return true;
          }
        }
        // quoted post images
        if (client_1.AppBskyEmbedImages.isView(subject.embed.media)) {
          for (const image of subject.embed.media.images) {
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: image.alt,
              languages: client_1.AppBskyFeedPost.isRecord(subject.record) ? subject.record.langs : [],
              actor: embedAuthor
            })) {
              return true;
            }
          }
        }
        if (client_1.AppBskyEmbedExternal.isView(subject.embed.media)) {
          const {
            external
          } = subject.embed.media;
          if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: external.title + ' ' + external.description,
            languages: [],
            actor: embedAuthor
          })) {
            return true;
          }
        }
      }
    }
    return false;
  }
  return post;
}

var feedGenerator = {};

var hasRequiredFeedGenerator;
function requireFeedGenerator() {
  if (hasRequiredFeedGenerator) return feedGenerator;
  hasRequiredFeedGenerator = 1;
  Object.defineProperty(feedGenerator, "__esModule", {
    value: true
  });
  feedGenerator.decideFeedGenerator = decideFeedGenerator;
  const decision_1 = requireDecision();
  const account_1 = requireAccount();
  const profile_1 = requireProfile();
  function decideFeedGenerator(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.creator.did);
    acc.setIsMe(subject.creator.did === opts.userDid);
    if (subject.labels?.length) {
      for (const label of subject.labels) {
        acc.addLabel('content', label, opts);
      }
    }
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.creator, opts), (0, profile_1.decideProfile)(subject.creator, opts));
  }
  return feedGenerator;
}

var userList = {};

var hasRequiredUserList;
function requireUserList() {
  if (hasRequiredUserList) return userList;
  hasRequiredUserList = 1;
  Object.defineProperty(userList, "__esModule", {
    value: true
  });
  userList.decideUserList = decideUserList;
  const syntax_1 = requireDist$5();
  const decision_1 = requireDecision();
  const account_1 = requireAccount();
  const profile_1 = requireProfile();
  function decideUserList(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    const creator = isProfile(subject.creator) ? subject.creator : undefined;
    if (creator) {
      acc.setDid(creator.did);
      acc.setIsMe(creator.did === opts.userDid);
      if (subject.labels?.length) {
        for (const label of subject.labels) {
          acc.addLabel('content', label, opts);
        }
      }
      return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
    }
    const creatorDid = new syntax_1.AtUri(subject.uri).hostname;
    acc.setDid(creatorDid);
    acc.setIsMe(creatorDid === opts.userDid);
    if (subject.labels?.length) {
      for (const label of subject.labels) {
        acc.addLabel('content', label, opts);
      }
    }
    return acc;
  }
  function isProfile(v) {
    return v && typeof v === 'object' && 'did' in v;
  }
  return userList;
}

var util = {};

var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil) return util;
  hasRequiredUtil = 1;
  Object.defineProperty(util, "__esModule", {
    value: true
  });
  util.isQuotedPost = isQuotedPost;
  util.isQuotedPostWithMedia = isQuotedPostWithMedia;
  util.interpretLabelValueDefinition = interpretLabelValueDefinition;
  util.interpretLabelValueDefinitions = interpretLabelValueDefinitions;
  const client_1 = requireClient();
  function isQuotedPost(embed) {
    return Boolean(embed && client_1.AppBskyEmbedRecord.isView(embed));
  }
  function isQuotedPostWithMedia(embed) {
    return Boolean(embed && client_1.AppBskyEmbedRecordWithMedia.isView(embed));
  }
  function interpretLabelValueDefinition(def, definedBy) {
    const behaviors = {
      account: {},
      profile: {},
      content: {}
    };
    const alertOrInform = def.severity === 'alert' ? 'alert' : def.severity === 'inform' ? 'inform' : undefined;
    if (def.blurs === 'content') {
      // target=account, blurs=content
      behaviors.account.profileList = alertOrInform;
      behaviors.account.profileView = alertOrInform;
      behaviors.account.contentList = 'blur';
      behaviors.account.contentView = def.adultOnly ? 'blur' : alertOrInform;
      // target=profile, blurs=content
      behaviors.profile.profileList = alertOrInform;
      behaviors.profile.profileView = alertOrInform;
      // target=content, blurs=content
      behaviors.content.contentList = 'blur';
      behaviors.content.contentView = def.adultOnly ? 'blur' : alertOrInform;
    } else if (def.blurs === 'media') {
      // target=account, blurs=media
      behaviors.account.profileList = alertOrInform;
      behaviors.account.profileView = alertOrInform;
      behaviors.account.avatar = 'blur';
      behaviors.account.banner = 'blur';
      // target=profile, blurs=media
      behaviors.profile.profileList = alertOrInform;
      behaviors.profile.profileView = alertOrInform;
      behaviors.profile.avatar = 'blur';
      behaviors.profile.banner = 'blur';
      // target=content, blurs=media
      behaviors.content.contentMedia = 'blur';
    } else if (def.blurs === 'none') {
      // target=account, blurs=none
      behaviors.account.profileList = alertOrInform;
      behaviors.account.profileView = alertOrInform;
      behaviors.account.contentList = alertOrInform;
      behaviors.account.contentView = alertOrInform;
      // target=profile, blurs=none
      behaviors.profile.profileList = alertOrInform;
      behaviors.profile.profileView = alertOrInform;
      // target=content, blurs=none
      behaviors.content.contentList = alertOrInform;
      behaviors.content.contentView = alertOrInform;
    }
    let defaultSetting = 'warn';
    if (def.defaultSetting === 'hide' || def.defaultSetting === 'ignore') {
      defaultSetting = def.defaultSetting;
    }
    const flags = ['no-self'];
    if (def.adultOnly) {
      flags.push('adult');
    }
    return {
      ...def,
      definedBy,
      configurable: true,
      defaultSetting,
      flags,
      behaviors
    };
  }
  function interpretLabelValueDefinitions(labelerView) {
    return (labelerView.policies?.labelValueDefinitions || []).filter(labelValDef => client_1.ComAtprotoLabelDefs.validateLabelValueDefinition(labelValDef).success).map(labelValDef => interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
  }
  return util;
}

var hasRequiredModeration;
function requireModeration() {
  if (hasRequiredModeration) return moderation;
  hasRequiredModeration = 1;
  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = undefined;
    exports.moderateProfile = moderateProfile;
    exports.moderatePost = moderatePost;
    exports.moderateNotification = moderateNotification;
    exports.moderateFeedGenerator = moderateFeedGenerator;
    exports.moderateUserList = moderateUserList;
    const account_1 = requireAccount();
    const profile_1 = requireProfile();
    const notification_1 = requireNotification();
    const post_1 = requirePost();
    const feed_generator_1 = requireFeedGenerator();
    const user_list_1 = requireUserList();
    const decision_1 = requireDecision();
    var ui_1 = requireUi();
    Object.defineProperty(exports, "ModerationUI", {
      enumerable: true,
      get: function () {
        return ui_1.ModerationUI;
      }
    });
    var decision_2 = requireDecision();
    Object.defineProperty(exports, "ModerationDecision", {
      enumerable: true,
      get: function () {
        return decision_2.ModerationDecision;
      }
    });
    var mutewords_1 = requireMutewords();
    Object.defineProperty(exports, "hasMutedWord", {
      enumerable: true,
      get: function () {
        return mutewords_1.hasMutedWord;
      }
    });
    var util_1 = requireUtil();
    Object.defineProperty(exports, "interpretLabelValueDefinition", {
      enumerable: true,
      get: function () {
        return util_1.interpretLabelValueDefinition;
      }
    });
    Object.defineProperty(exports, "interpretLabelValueDefinitions", {
      enumerable: true,
      get: function () {
        return util_1.interpretLabelValueDefinitions;
      }
    });
    function moderateProfile(subject, opts) {
      return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
    }
    function moderatePost(subject, opts) {
      return (0, post_1.decidePost)(subject, opts);
    }
    function moderateNotification(subject, opts) {
      return (0, notification_1.decideNotification)(subject, opts);
    }
    function moderateFeedGenerator(subject, opts) {
      return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
    }
    function moderateUserList(subject, opts) {
      return (0, user_list_1.decideUserList)(subject, opts);
    }
  })(moderation);
  return moderation;
}

var mocker = {};

var hasRequiredMocker;
function requireMocker() {
  if (hasRequiredMocker) return mocker;
  hasRequiredMocker = 1;
  Object.defineProperty(mocker, "__esModule", {
    value: true
  });
  mocker.mock = undefined;
  const FAKE_CID = 'bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq';
  mocker.mock = {
    post({
      text,
      facets,
      reply,
      embed
    }) {
      return {
        $type: 'app.bsky.feed.post',
        text,
        facets,
        reply,
        embed,
        langs: ['en'],
        createdAt: new Date().toISOString()
      };
    },
    postView({
      record,
      author,
      embed,
      replyCount,
      repostCount,
      likeCount,
      viewer,
      labels
    }) {
      return {
        $type: 'app.bsky.feed.defs#postView',
        uri: `at://${author.did}/app.bsky.feed.post/fake`,
        cid: FAKE_CID,
        author,
        record,
        embed,
        replyCount,
        repostCount,
        likeCount,
        indexedAt: new Date().toISOString(),
        viewer,
        labels
      };
    },
    embedRecordView({
      record,
      author,
      labels
    }) {
      return {
        $type: 'app.bsky.embed.record#view',
        record: {
          $type: 'app.bsky.embed.record#viewRecord',
          uri: `at://${author.did}/app.bsky.feed.post/fake`,
          cid: FAKE_CID,
          author,
          value: record,
          labels,
          indexedAt: new Date().toISOString()
        }
      };
    },
    profileViewBasic({
      handle,
      displayName,
      description,
      viewer,
      labels
    }) {
      return {
        did: `did:web:${handle}`,
        handle,
        displayName,
        description,
        // technically not in ProfileViewBasic but useful in some cases
        viewer,
        labels
      };
    },
    actorViewerState({
      muted,
      mutedByList,
      blockedBy,
      blocking,
      blockingByList,
      following,
      followedBy
    }) {
      return {
        muted,
        mutedByList,
        blockedBy,
        blocking,
        blockingByList,
        following,
        followedBy
      };
    },
    listViewBasic({
      name
    }) {
      return {
        uri: 'at://did:plc:fake/app.bsky.graph.list/fake',
        cid: FAKE_CID,
        name,
        purpose: 'app.bsky.graph.defs#modlist',
        indexedAt: new Date().toISOString()
      };
    },
    replyNotification({
      author,
      record,
      labels
    }) {
      return {
        uri: `at://${author.did}/app.bsky.feed.post/fake`,
        cid: FAKE_CID,
        author,
        reason: 'reply',
        reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
        record,
        isRead: false,
        indexedAt: new Date().toISOString(),
        labels
      };
    },
    followNotification({
      author,
      subjectDid,
      labels
    }) {
      return {
        uri: `at://${author.did}/app.bsky.graph.follow/fake`,
        cid: FAKE_CID,
        author,
        reason: 'follow',
        record: {
          $type: 'app.bsky.graph.follow',
          createdAt: new Date().toISOString(),
          subject: subjectDid
        },
        isRead: false,
        indexedAt: new Date().toISOString(),
        labels
      };
    },
    label({
      val,
      uri,
      src
    }) {
      return {
        src: src || 'did:plc:fake-labeler',
        uri,
        val,
        cts: new Date().toISOString()
      };
    }
  };
  return mocker;
}

var agent = {};

var AwaitLock = {};

var hasRequiredAwaitLock;
function requireAwaitLock() {
  if (hasRequiredAwaitLock) return AwaitLock;
  hasRequiredAwaitLock = 1;
  var __classPrivateFieldGet = AwaitLock.__classPrivateFieldGet || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var __classPrivateFieldSet = AwaitLock.__classPrivateFieldSet || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var _AwaitLock_acquired, _AwaitLock_waitingResolvers;
  Object.defineProperty(AwaitLock, "__esModule", {
    value: true
  });
  /**
   * A mutex lock for coordination across async functions
   */
  let AwaitLock$1 = class AwaitLock {
    constructor() {
      _AwaitLock_acquired.set(this, false);
      _AwaitLock_waitingResolvers.set(this, new Set());
    }
    /**
     * Whether the lock is currently acquired or not. Accessing this property does not affect the
     * status of the lock.
     */
    get acquired() {
      return __classPrivateFieldGet(this, _AwaitLock_acquired, "f");
    }
    /**
     * Acquires the lock, waiting if necessary for it to become free if it is already locked. The
     * returned promise is fulfilled once the lock is acquired.
     *
     * A timeout (in milliseconds) may be optionally provided. If the lock cannot be acquired before
     * the timeout elapses, the returned promise is rejected with an error. The behavior of invalid
     * timeout values depends on how `setTimeout` handles those values.
     *
     * After acquiring the lock, you **must** call `release` when you are done with it.
     */
    acquireAsync({
      timeout
    } = {}) {
      if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
        __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
        return Promise.resolve();
      }
      if (timeout == null) {
        return new Promise(resolve => {
          __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolve);
        });
      }
      let resolver;
      let timer;
      return Promise.race([new Promise(resolve => {
        resolver = () => {
          clearTimeout(timer);
          resolve();
        };
        __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolver);
      }), new Promise((_, reject) => {
        timer = setTimeout(() => {
          __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolver);
          reject(new Error(`Timed out waiting for lock`));
        }, timeout);
      })]);
    }
    /**
     * Acquires the lock if it is free and otherwise returns immediately without waiting. Returns
     * `true` if the lock was free and is now acquired, and `false` otherwise.
     *
     * This method differs from calling `acquireAsync` with a zero-millisecond timeout in that it runs
     * synchronously without waiting for the JavaScript task queue.
     */
    tryAcquire() {
      if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
        __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
        return true;
      }
      return false;
    }
    /**
     * Releases the lock and gives it to the next waiting acquirer, if there is one. Each acquirer
     * must release the lock exactly once.
     */
    release() {
      if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
        throw new Error(`Cannot release an unacquired lock`);
      }
      if (__classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").size > 0) {
        // Sets preserve insertion order like a queue
        const [resolve] = __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f");
        __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolve);
        resolve();
      } else {
        __classPrivateFieldSet(this, _AwaitLock_acquired, false, "f");
      }
    }
  };
  AwaitLock.default = AwaitLock$1;
  _AwaitLock_acquired = new WeakMap(), _AwaitLock_waitingResolvers = new WeakMap();
  return AwaitLock;
}

var hasRequiredAgent;
function requireAgent() {
  if (hasRequiredAgent) return agent;
  hasRequiredAgent = 1;
  var __classPrivateFieldGet = agent.__classPrivateFieldGet || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var __importDefault = agent.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };
  var _Agent_prefsLock;
  Object.defineProperty(agent, "__esModule", {
    value: true
  });
  agent.Agent = undefined;
  const common_web_1 = requireDist$4();
  const syntax_1 = requireDist$5();
  const xrpc_1 = requireDist$1();
  const await_lock_1 = __importDefault(requireAwaitLock());
  const index_1 = requireClient();
  const lexicons_1 = requireLexicons();
  const const_1 = require_const();
  const moderation_1 = requireModeration();
  const labels_1 = requireLabels();
  const util_1 = requireUtil$4();
  const FEED_VIEW_PREF_DEFAULTS = {
    hideReplies: false,
    hideRepliesByUnfollowed: true,
    hideRepliesByLikeCount: 0,
    hideReposts: false,
    hideQuotePosts: false
  };
  const THREAD_VIEW_PREF_DEFAULTS = {
    sort: 'hotness',
    prioritizeFollowedUsers: true
  };
  /**
   * An {@link Agent} is an {@link AtpBaseClient} with the following
   * additional features:
   * - AT Protocol labelers configuration utilities
   * - AT Protocol proxy configuration utilities
   * - Cloning utilities
   * - `app.bsky` syntactic sugar
   * - `com.atproto` syntactic sugar
   */
  class Agent extends xrpc_1.XrpcClient {
    /**
     * Configures the Agent (or its sub classes) globally.
     */
    static configure(opts) {
      if (opts.appLabelers) {
        this.appLabelers = opts.appLabelers.map(util_1.asDid); // Validate & copy
      }
    }
    /** @deprecated use `this` instead */
    get xrpc() {
      return this;
    }
    constructor(options) {
      const sessionManager = typeof options === 'string' || options instanceof URL ? {
        did: undefined,
        fetchHandler: (0, xrpc_1.buildFetchHandler)(options)
      } : options;
      super((url, init) => {
        const headers = new Headers(init?.headers);
        if (this.proxy && !headers.has('atproto-proxy')) {
          headers.set('atproto-proxy', this.proxy);
        }
        // Merge the labelers header of this particular request with the app &
        // instance labelers.
        headers.set('atproto-accept-labelers', [...this.appLabelers.map(l => `${l};redact`), ...this.labelers, headers.get('atproto-accept-labelers')?.trim()].filter(Boolean).join(', '));
        return this.sessionManager.fetchHandler(url, {
          ...init,
          headers
        });
      }, lexicons_1.schemas);
      //#endregion
      Object.defineProperty(this, "com", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new index_1.ComNS(this)
      });
      Object.defineProperty(this, "app", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new index_1.AppNS(this)
      });
      Object.defineProperty(this, "chat", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new index_1.ChatNS(this)
      });
      Object.defineProperty(this, "tools", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new index_1.ToolsNS(this)
      });
      Object.defineProperty(this, "sessionManager", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "labelers", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: []
      });
      //#endregion
      //#region ATPROTO proxy configuration utilities
      Object.defineProperty(this, "proxy", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      //#region "com.atproto" lexicon short hand methods
      /**
       * Upload a binary blob to the server
       */
      Object.defineProperty(this, "uploadBlob", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (data, opts) => this.com.atproto.repo.uploadBlob(data, opts)
      });
      /**
       * Resolve a handle to a DID
       */
      Object.defineProperty(this, "resolveHandle", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.com.atproto.identity.resolveHandle(params, opts)
      });
      /**
       * Change the user's handle
       */
      Object.defineProperty(this, "updateHandle", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (data, opts) => this.com.atproto.identity.updateHandle(data, opts)
      });
      /**
       * Create a moderation report
       */
      Object.defineProperty(this, "createModerationReport", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (data, opts) => this.com.atproto.moderation.createReport(data, opts)
      });
      //#endregion
      //#region "app.bsky" lexicon short hand methods
      Object.defineProperty(this, "getTimeline", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.feed.getTimeline(params, opts)
      });
      Object.defineProperty(this, "getAuthorFeed", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.feed.getAuthorFeed(params, opts)
      });
      Object.defineProperty(this, "getActorLikes", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.feed.getActorLikes(params, opts)
      });
      Object.defineProperty(this, "getPostThread", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.feed.getPostThread(params, opts)
      });
      Object.defineProperty(this, "getPost", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: params => this.app.bsky.feed.post.get(params)
      });
      Object.defineProperty(this, "getPosts", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.feed.getPosts(params, opts)
      });
      Object.defineProperty(this, "getLikes", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.feed.getLikes(params, opts)
      });
      Object.defineProperty(this, "getRepostedBy", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.feed.getRepostedBy(params, opts)
      });
      Object.defineProperty(this, "getFollows", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.graph.getFollows(params, opts)
      });
      Object.defineProperty(this, "getFollowers", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.graph.getFollowers(params, opts)
      });
      Object.defineProperty(this, "getProfile", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.actor.getProfile(params, opts)
      });
      Object.defineProperty(this, "getProfiles", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.actor.getProfiles(params, opts)
      });
      Object.defineProperty(this, "getSuggestions", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.actor.getSuggestions(params, opts)
      });
      Object.defineProperty(this, "searchActors", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.actor.searchActors(params, opts)
      });
      Object.defineProperty(this, "searchActorsTypeahead", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.actor.searchActorsTypeahead(params, opts)
      });
      Object.defineProperty(this, "listNotifications", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.notification.listNotifications(params, opts)
      });
      Object.defineProperty(this, "countUnreadNotifications", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.notification.getUnreadCount(params, opts)
      });
      Object.defineProperty(this, "getLabelers", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: (params, opts) => this.app.bsky.labeler.getServices(params, opts)
      });
      //- Private methods
      _Agent_prefsLock.set(this, new await_lock_1.default()
      /**
       * This function updates the preferences of a user and allows for a callback function to be executed
       * before the update.
       * @param cb - cb is a callback function that takes in a single parameter of type
       * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
       * update the preferences of the user. The function is called with the current preferences as an
       * argument and if the callback returns false, the preferences are not updated.
       */);
      this.sessionManager = sessionManager;
    }
    //#region Cloning utilities
    clone() {
      return this.copyInto(new Agent(this.sessionManager));
    }
    copyInto(inst) {
      inst.configureLabelers(this.labelers);
      inst.configureProxy(this.proxy ?? null);
      inst.clearHeaders();
      for (const [key, value] of this.headers) inst.setHeader(key, value);
      return inst;
    }
    withProxy(serviceType, did) {
      const inst = this.clone();
      inst.configureProxy(`${(0, util_1.asDid)(did)}#${serviceType}`);
      return inst;
    }
    //#endregion
    //#region ATPROTO labelers configuration utilities
    /**
     * The labelers statically configured on the class of the current instance.
     */
    get appLabelers() {
      return this.constructor.appLabelers;
    }
    configureLabelers(labelerDids) {
      this.labelers = labelerDids.map(util_1.asDid); // Validate & copy
    }
    /** @deprecated use {@link configureLabelers} instead */
    configureLabelersHeader(labelerDids) {
      // Filtering non-did values for backwards compatibility
      this.configureLabelers(labelerDids.filter(util_1.isDid));
    }
    configureProxy(value) {
      if (value === null) this.proxy = undefined;else if ((0, util_1.isDid)(value)) this.proxy = value;else throw new TypeError('Invalid proxy DID');
    }
    /** @deprecated use {@link configureProxy} instead */
    configureProxyHeader(serviceType, did) {
      // Ignoring non-did values for backwards compatibility
      if ((0, util_1.isDid)(did)) this.configureProxy(`${did}#${serviceType}`);
    }
    //#endregion
    //#region Session management
    /**
     * Get the authenticated user's DID, if any.
     */
    get did() {
      return this.sessionManager.did;
    }
    /** @deprecated Use {@link Agent.assertDid} instead */
    get accountDid() {
      return this.assertDid;
    }
    /**
     * Get the authenticated user's DID, or throw an error if not authenticated.
     */
    get assertDid() {
      this.assertAuthenticated();
      return this.did;
    }
    /**
     * Assert that the user is authenticated.
     */
    assertAuthenticated() {
      if (!this.did) throw new Error('Not logged in');
    }
    //#endregion
    /** @deprecated use "this" instead */
    get api() {
      return this;
    }
    async getLabelDefinitions(prefs) {
      // collect the labeler dids
      const dids = [...this.appLabelers];
      if (isBskyPrefs(prefs)) {
        dids.push(...prefs.moderationPrefs.labelers.map(l => l.did));
      } else if (isModPrefs(prefs)) {
        dids.push(...prefs.labelers.map(l => l.did));
      } else {
        dids.push(...prefs);
      }
      // fetch their definitions
      const labelers = await this.getLabelers({
        dids,
        detailed: true
      });
      // assemble a map of labeler dids to the interpreted label value definitions
      const labelDefs = {};
      if (labelers.data) {
        for (const labeler of labelers.data.views) {
          labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
        }
      }
      return labelDefs;
    }
    async post(record) {
      record.createdAt || (record.createdAt = new Date().toISOString());
      return this.app.bsky.feed.post.create({
        repo: this.accountDid
      }, record);
    }
    async deletePost(postUri) {
      this.assertAuthenticated();
      const postUrip = new syntax_1.AtUri(postUri);
      return this.app.bsky.feed.post.delete({
        repo: postUrip.hostname,
        rkey: postUrip.rkey
      });
    }
    async like(uri, cid) {
      return this.app.bsky.feed.like.create({
        repo: this.accountDid
      }, {
        subject: {
          uri,
          cid
        },
        createdAt: new Date().toISOString()
      });
    }
    async deleteLike(likeUri) {
      this.assertAuthenticated();
      const likeUrip = new syntax_1.AtUri(likeUri);
      return this.app.bsky.feed.like.delete({
        repo: likeUrip.hostname,
        rkey: likeUrip.rkey
      });
    }
    async repost(uri, cid) {
      return this.app.bsky.feed.repost.create({
        repo: this.accountDid
      }, {
        subject: {
          uri,
          cid
        },
        createdAt: new Date().toISOString()
      });
    }
    async deleteRepost(repostUri) {
      this.assertAuthenticated();
      const repostUrip = new syntax_1.AtUri(repostUri);
      return this.app.bsky.feed.repost.delete({
        repo: repostUrip.hostname,
        rkey: repostUrip.rkey
      });
    }
    async follow(subjectDid) {
      return this.app.bsky.graph.follow.create({
        repo: this.accountDid
      }, {
        subject: subjectDid,
        createdAt: new Date().toISOString()
      });
    }
    async deleteFollow(followUri) {
      this.assertAuthenticated();
      const followUrip = new syntax_1.AtUri(followUri);
      return this.app.bsky.graph.follow.delete({
        repo: followUrip.hostname,
        rkey: followUrip.rkey
      });
    }
    async upsertProfile(updateFn) {
      const repo = this.accountDid;
      let retriesRemaining = 5;
      while (retriesRemaining >= 0) {
        // fetch existing
        const existing = await this.com.atproto.repo.getRecord({
          repo,
          collection: 'app.bsky.actor.profile',
          rkey: 'self'
        }).catch(_ => undefined);
        // run the update
        const updated = await updateFn(existing?.data.value);
        if (updated) {
          updated.$type = 'app.bsky.actor.profile';
        }
        // validate the record
        const validation = index_1.AppBskyActorProfile.validateRecord(updated);
        if (!validation.success) {
          throw validation.error;
        }
        try {
          // attempt the put
          await this.com.atproto.repo.putRecord({
            repo,
            collection: 'app.bsky.actor.profile',
            rkey: 'self',
            record: updated,
            swapRecord: existing?.data.cid || null
          });
        } catch (e) {
          if (retriesRemaining > 0 && e instanceof index_1.ComAtprotoRepoPutRecord.InvalidSwapError) {
            // try again
            retriesRemaining--;
            continue;
          } else {
            throw e;
          }
        }
        break;
      }
    }
    async mute(actor) {
      return this.app.bsky.graph.muteActor({
        actor
      });
    }
    async unmute(actor) {
      return this.app.bsky.graph.unmuteActor({
        actor
      });
    }
    async muteModList(uri) {
      return this.app.bsky.graph.muteActorList({
        list: uri
      });
    }
    async unmuteModList(uri) {
      return this.app.bsky.graph.unmuteActorList({
        list: uri
      });
    }
    async blockModList(uri) {
      return this.app.bsky.graph.listblock.create({
        repo: this.accountDid
      }, {
        subject: uri,
        createdAt: new Date().toISOString()
      });
    }
    async unblockModList(uri) {
      const repo = this.accountDid;
      const listInfo = await this.app.bsky.graph.getList({
        list: uri,
        limit: 1
      });
      const blocked = listInfo.data.list.viewer?.blocked;
      if (blocked) {
        const {
          rkey
        } = new syntax_1.AtUri(blocked);
        return this.app.bsky.graph.listblock.delete({
          repo,
          rkey
        });
      }
    }
    async updateSeenNotifications(seenAt = new Date().toISOString()) {
      return this.app.bsky.notification.updateSeen({
        seenAt
      });
    }
    async getPreferences() {
      const prefs = {
        feeds: {
          saved: undefined,
          pinned: undefined
        },
        // @ts-ignore populating below
        savedFeeds: undefined,
        feedViewPrefs: {
          home: {
            ...FEED_VIEW_PREF_DEFAULTS
          }
        },
        threadViewPrefs: {
          ...THREAD_VIEW_PREF_DEFAULTS
        },
        moderationPrefs: {
          adultContentEnabled: false,
          labels: {
            ...labels_1.DEFAULT_LABEL_SETTINGS
          },
          labelers: this.appLabelers.map(did => ({
            did,
            labels: {}
          })),
          mutedWords: [],
          hiddenPosts: []
        },
        birthDate: undefined,
        interests: {
          tags: []
        },
        bskyAppState: {
          queuedNudges: [],
          activeProgressGuide: undefined,
          nuxs: []
        }
      };
      const res = await this.app.bsky.actor.getPreferences({});
      const labelPrefs = [];
      for (const pref of res.data.preferences) {
        if (index_1.AppBskyActorDefs.isAdultContentPref(pref) && index_1.AppBskyActorDefs.validateAdultContentPref(pref).success) {
          // adult content preferences
          prefs.moderationPrefs.adultContentEnabled = pref.enabled;
        } else if (index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success) {
          // content label preference
          const adjustedPref = adjustLegacyContentLabelPref(pref);
          labelPrefs.push(adjustedPref);
        } else if (index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success) {
          // labelers preferences
          prefs.moderationPrefs.labelers = this.appLabelers.map(did => ({
            did,
            labels: {}
          })).concat(pref.labelers.map(labeler => ({
            ...labeler,
            labels: {}
          })));
        } else if (index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPrefV2(pref).success) {
          prefs.savedFeeds = pref.items;
        } else if (index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success) {
          // saved and pinned feeds
          prefs.feeds.saved = pref.saved;
          prefs.feeds.pinned = pref.pinned;
        } else if (index_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && index_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success) {
          // birth date (irl)
          if (pref.birthDate) {
            prefs.birthDate = new Date(pref.birthDate);
          }
        } else if (index_1.AppBskyActorDefs.isFeedViewPref(pref) && index_1.AppBskyActorDefs.validateFeedViewPref(pref).success) {
          // feed view preferences
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          const {
            $type,
            feed,
            ...v
          } = pref;
          prefs.feedViewPrefs[pref.feed] = {
            ...FEED_VIEW_PREF_DEFAULTS,
            ...v
          };
        } else if (index_1.AppBskyActorDefs.isThreadViewPref(pref) && index_1.AppBskyActorDefs.validateThreadViewPref(pref).success) {
          // thread view preferences
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          const {
            $type,
            ...v
          } = pref;
          prefs.threadViewPrefs = {
            ...prefs.threadViewPrefs,
            ...v
          };
        } else if (index_1.AppBskyActorDefs.isInterestsPref(pref) && index_1.AppBskyActorDefs.validateInterestsPref(pref).success) {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          const {
            $type,
            ...v
          } = pref;
          prefs.interests = {
            ...prefs.interests,
            ...v
          };
        } else if (index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success) {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          const {
            $type,
            ...v
          } = pref;
          prefs.moderationPrefs.mutedWords = v.items;
          if (prefs.moderationPrefs.mutedWords.length) {
            prefs.moderationPrefs.mutedWords = prefs.moderationPrefs.mutedWords.map(word => {
              word.actorTarget = word.actorTarget || 'all';
              return word;
            });
          }
        } else if (index_1.AppBskyActorDefs.isHiddenPostsPref(pref) && index_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success) {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          const {
            $type,
            ...v
          } = pref;
          prefs.moderationPrefs.hiddenPosts = v.items;
        } else if (index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success) {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          const {
            $type,
            ...v
          } = pref;
          prefs.bskyAppState.queuedNudges = v.queuedNudges || [];
          prefs.bskyAppState.activeProgressGuide = v.activeProgressGuide;
          prefs.bskyAppState.nuxs = v.nuxs || [];
        }
      }
      /*
       * If `prefs.savedFeeds` is undefined, no `savedFeedsPrefV2` exists, which
       * means we want to try to migrate if needed.
       *
       * If v1 prefs exist, they will be migrated to v2.
       *
       * If no v1 prefs exist, the user is either new, or could be old and has
       * never edited their feeds.
       */
      if (prefs.savedFeeds == null) {
        const {
          saved,
          pinned
        } = prefs.feeds;
        if (saved && pinned) {
          const uniqueMigratedSavedFeeds = new Map();
          // insert Following feed first
          uniqueMigratedSavedFeeds.set('timeline', {
            id: common_web_1.TID.nextStr(),
            type: 'timeline',
            value: 'following',
            pinned: true
          });
          // use pinned as source of truth for feed order
          for (const uri of pinned) {
            const type = (0, util_1.getSavedFeedType)(uri);
            // only want supported types
            if (type === 'unknown') continue;
            uniqueMigratedSavedFeeds.set(uri, {
              id: common_web_1.TID.nextStr(),
              type,
              value: uri,
              pinned: true
            });
          }
          for (const uri of saved) {
            if (!uniqueMigratedSavedFeeds.has(uri)) {
              const type = (0, util_1.getSavedFeedType)(uri);
              // only want supported types
              if (type === 'unknown') continue;
              uniqueMigratedSavedFeeds.set(uri, {
                id: common_web_1.TID.nextStr(),
                type,
                value: uri,
                pinned: false
              });
            }
          }
          prefs.savedFeeds = Array.from(uniqueMigratedSavedFeeds.values());
        } else {
          prefs.savedFeeds = [{
            id: common_web_1.TID.nextStr(),
            type: 'timeline',
            value: 'following',
            pinned: true
          }];
        }
        // save to user preferences so this migration doesn't re-occur
        await this.overwriteSavedFeeds(prefs.savedFeeds);
      }
      // apply the label prefs
      for (const pref of labelPrefs) {
        if (pref.labelerDid) {
          const labeler = prefs.moderationPrefs.labelers.find(labeler => labeler.did === pref.labelerDid);
          if (!labeler) continue;
          labeler.labels[pref.label] = pref.visibility;
        } else {
          prefs.moderationPrefs.labels[pref.label] = pref.visibility;
        }
      }
      prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
      // automatically configure the client
      this.configureLabelers(prefsArrayToLabelerDids(res.data.preferences));
      return prefs;
    }
    async overwriteSavedFeeds(savedFeeds) {
      savedFeeds.forEach(util_1.validateSavedFeed);
      const uniqueSavedFeeds = new Map();
      savedFeeds.forEach(feed => {
        // remove and re-insert to preserve order
        if (uniqueSavedFeeds.has(feed.id)) {
          uniqueSavedFeeds.delete(feed.id);
        }
        uniqueSavedFeeds.set(feed.id, feed);
      });
      return this.updateSavedFeedsV2Preferences(() => Array.from(uniqueSavedFeeds.values()));
    }
    async updateSavedFeeds(savedFeedsToUpdate) {
      savedFeedsToUpdate.map(util_1.validateSavedFeed);
      return this.updateSavedFeedsV2Preferences(savedFeeds => {
        return savedFeeds.map(savedFeed => {
          const updatedVersion = savedFeedsToUpdate.find(updated => savedFeed.id === updated.id);
          if (updatedVersion) {
            return {
              ...savedFeed,
              // only update pinned
              pinned: updatedVersion.pinned
            };
          }
          return savedFeed;
        });
      });
    }
    async addSavedFeeds(savedFeeds) {
      const toSave = savedFeeds.map(f => ({
        ...f,
        id: common_web_1.TID.nextStr()
      }));
      toSave.forEach(util_1.validateSavedFeed);
      return this.updateSavedFeedsV2Preferences(savedFeeds => [...savedFeeds, ...toSave]);
    }
    async removeSavedFeeds(ids) {
      return this.updateSavedFeedsV2Preferences(savedFeeds => [...savedFeeds.filter(feed => !ids.find(id => feed.id === id))]);
    }
    /**
     * @deprecated use `overwriteSavedFeeds`
     */
    async setSavedFeeds(saved, pinned) {
      return this.updateFeedPreferences(() => ({
        saved,
        pinned
      }));
    }
    /**
     * @deprecated use `addSavedFeeds`
     */
    async addSavedFeed(v) {
      return this.updateFeedPreferences((saved, pinned) => ({
        saved: [...saved.filter(uri => uri !== v), v],
        pinned
      }));
    }
    /**
     * @deprecated use `removeSavedFeeds`
     */
    async removeSavedFeed(v) {
      return this.updateFeedPreferences((saved, pinned) => ({
        saved: saved.filter(uri => uri !== v),
        pinned: pinned.filter(uri => uri !== v)
      }));
    }
    /**
     * @deprecated use `addSavedFeeds` or `updateSavedFeeds`
     */
    async addPinnedFeed(v) {
      return this.updateFeedPreferences((saved, pinned) => ({
        saved: [...saved.filter(uri => uri !== v), v],
        pinned: [...pinned.filter(uri => uri !== v), v]
      }));
    }
    /**
     * @deprecated use `updateSavedFeeds` or `removeSavedFeeds`
     */
    async removePinnedFeed(v) {
      return this.updateFeedPreferences((saved, pinned) => ({
        saved,
        pinned: pinned.filter(uri => uri !== v)
      }));
    }
    async setAdultContentEnabled(v) {
      await this.updatePreferences(prefs => {
        let adultContentPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isAdultContentPref(pref) && index_1.AppBskyActorDefs.validateAdultContentPref(pref).success);
        if (adultContentPref) {
          adultContentPref.enabled = v;
        } else {
          adultContentPref = {
            $type: 'app.bsky.actor.defs#adultContentPref',
            enabled: v
          };
        }
        return prefs.filter(pref => !index_1.AppBskyActorDefs.isAdultContentPref(pref)).concat([adultContentPref]);
      });
    }
    async setContentLabelPref(key, value, labelerDid) {
      if (labelerDid) {
        (0, syntax_1.ensureValidDid)(labelerDid);
      }
      await this.updatePreferences(prefs => {
        let labelPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === key && pref.labelerDid === labelerDid);
        let legacyLabelPref;
        if (labelPref) {
          labelPref.visibility = value;
        } else {
          labelPref = {
            $type: 'app.bsky.actor.defs#contentLabelPref',
            label: key,
            labelerDid,
            visibility: value
          };
        }
        if (index_1.AppBskyActorDefs.isContentLabelPref(labelPref)) {
          // is global
          if (!labelPref.labelerDid) {
            const legacyLabelValue = {
              'graphic-media': 'gore',
              porn: 'nsfw',
              sexual: 'suggestive'
            }[labelPref.label];
            // if it's a legacy label, double-write the legacy label
            if (legacyLabelValue) {
              legacyLabelPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === legacyLabelValue && pref.labelerDid === undefined);
              if (legacyLabelPref) {
                legacyLabelPref.visibility = value;
              } else {
                legacyLabelPref = {
                  $type: 'app.bsky.actor.defs#contentLabelPref',
                  label: legacyLabelValue,
                  labelerDid: undefined,
                  visibility: value
                };
              }
            }
          }
        }
        return prefs.filter(pref => !index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === key && pref.labelerDid === labelerDid)).concat([labelPref]).filter(pref => {
          if (!legacyLabelPref) return true;
          return !index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === legacyLabelPref.label && pref.labelerDid === undefined);
        }).concat(legacyLabelPref ? [legacyLabelPref] : []);
      });
    }
    async addLabeler(did) {
      const prefs = await this.updatePreferences(prefs => {
        let labelersPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
        if (!labelersPref) {
          labelersPref = {
            $type: 'app.bsky.actor.defs#labelersPref',
            labelers: []
          };
        }
        if (index_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
          let labelerPrefItem = labelersPref.labelers.find(labeler => labeler.did === did);
          if (!labelerPrefItem) {
            labelerPrefItem = {
              did
            };
            labelersPref.labelers.push(labelerPrefItem);
          }
        }
        return prefs.filter(pref => !index_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
      });
      // automatically configure the client
      this.configureLabelers(prefsArrayToLabelerDids(prefs));
    }
    async removeLabeler(did) {
      const prefs = await this.updatePreferences(prefs => {
        let labelersPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
        if (!labelersPref) {
          labelersPref = {
            $type: 'app.bsky.actor.defs#labelersPref',
            labelers: []
          };
        }
        if (index_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
          labelersPref.labelers = labelersPref.labelers.filter(labeler => labeler.did !== did);
        }
        return prefs.filter(pref => !index_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
      });
      // automatically configure the client
      this.configureLabelers(prefsArrayToLabelerDids(prefs));
    }
    async setPersonalDetails({
      birthDate
    }) {
      birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
      await this.updatePreferences(prefs => {
        let personalDetailsPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && index_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success);
        if (personalDetailsPref) {
          personalDetailsPref.birthDate = birthDate;
        } else {
          personalDetailsPref = {
            $type: 'app.bsky.actor.defs#personalDetailsPref',
            birthDate
          };
        }
        return prefs.filter(pref => !index_1.AppBskyActorDefs.isPersonalDetailsPref(pref)).concat([personalDetailsPref]);
      });
    }
    async setFeedViewPrefs(feed, pref) {
      await this.updatePreferences(prefs => {
        const existing = prefs.findLast(pref => index_1.AppBskyActorDefs.isFeedViewPref(pref) && index_1.AppBskyActorDefs.validateFeedViewPref(pref).success && pref.feed === feed);
        if (existing) {
          pref = {
            ...existing,
            ...pref
          };
        }
        return prefs.filter(p => !index_1.AppBskyActorDefs.isFeedViewPref(pref) || p.feed !== feed).concat([{
          ...pref,
          $type: 'app.bsky.actor.defs#feedViewPref',
          feed
        }]);
      });
    }
    async setThreadViewPrefs(pref) {
      await this.updatePreferences(prefs => {
        const existing = prefs.findLast(pref => index_1.AppBskyActorDefs.isThreadViewPref(pref) && index_1.AppBskyActorDefs.validateThreadViewPref(pref).success);
        if (existing) {
          pref = {
            ...existing,
            ...pref
          };
        }
        return prefs.filter(p => !index_1.AppBskyActorDefs.isThreadViewPref(p)).concat([{
          ...pref,
          $type: 'app.bsky.actor.defs#threadViewPref'
        }]);
      });
    }
    async setInterestsPref(pref) {
      await this.updatePreferences(prefs => {
        const existing = prefs.findLast(pref => index_1.AppBskyActorDefs.isInterestsPref(pref) && index_1.AppBskyActorDefs.validateInterestsPref(pref).success);
        if (existing) {
          pref = {
            ...existing,
            ...pref
          };
        }
        return prefs.filter(p => !index_1.AppBskyActorDefs.isInterestsPref(p)).concat([{
          ...pref,
          $type: 'app.bsky.actor.defs#interestsPref'
        }]);
      });
    }
    /**
     * Add a muted word to user preferences.
     */
    async addMutedWord(mutedWord) {
      const sanitizedValue = (0, util_1.sanitizeMutedWordValue)(mutedWord.value);
      if (!sanitizedValue) return;
      await this.updatePreferences(prefs => {
        let mutedWordsPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
        const newMutedWord = {
          id: common_web_1.TID.nextStr(),
          value: sanitizedValue,
          targets: mutedWord.targets || [],
          actorTarget: mutedWord.actorTarget || 'all',
          expiresAt: mutedWord.expiresAt || undefined
        };
        if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
          mutedWordsPref.items.push(newMutedWord);
          /**
           * Migrate any old muted words that don't have an id
           */
          mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
        } else {
          // if the pref doesn't exist, create it
          mutedWordsPref = {
            items: [newMutedWord]
          };
        }
        return prefs.filter(p => !index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([{
          ...mutedWordsPref,
          $type: 'app.bsky.actor.defs#mutedWordsPref'
        }]);
      });
    }
    /**
     * Convenience method to add muted words to user preferences
     */
    async addMutedWords(newMutedWords) {
      await Promise.all(newMutedWords.map(word => this.addMutedWord(word)));
    }
    /**
     * @deprecated use `addMutedWords` or `addMutedWord` instead
     */
    async upsertMutedWords(mutedWords) {
      await this.addMutedWords(mutedWords);
    }
    /**
     * Update a muted word in user preferences.
     */
    async updateMutedWord(mutedWord) {
      await this.updatePreferences(prefs => {
        const mutedWordsPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
        if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
          mutedWordsPref.items = mutedWordsPref.items.map(existingItem => {
            const match = matchMutedWord(existingItem, mutedWord);
            if (match) {
              const updated = {
                ...existingItem,
                ...mutedWord
              };
              return {
                id: existingItem.id || common_web_1.TID.nextStr(),
                value: (0, util_1.sanitizeMutedWordValue)(updated.value) || existingItem.value,
                targets: updated.targets || [],
                actorTarget: updated.actorTarget || 'all',
                expiresAt: updated.expiresAt || undefined
              };
            } else {
              return existingItem;
            }
          });
          /**
           * Migrate any old muted words that don't have an id
           */
          mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
          return prefs.filter(p => !index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([{
            ...mutedWordsPref,
            $type: 'app.bsky.actor.defs#mutedWordsPref'
          }]);
        }
        return prefs;
      });
    }
    /**
     * Remove a muted word from user preferences.
     */
    async removeMutedWord(mutedWord) {
      await this.updatePreferences(prefs => {
        const mutedWordsPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
        if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
          for (let i = 0; i < mutedWordsPref.items.length; i++) {
            const match = matchMutedWord(mutedWordsPref.items[i], mutedWord);
            if (match) {
              mutedWordsPref.items.splice(i, 1);
              break;
            }
          }
          /**
           * Migrate any old muted words that don't have an id
           */
          mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
          return prefs.filter(p => !index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([{
            ...mutedWordsPref,
            $type: 'app.bsky.actor.defs#mutedWordsPref'
          }]);
        }
        return prefs;
      });
    }
    /**
     * Convenience method to remove muted words from user preferences
     */
    async removeMutedWords(mutedWords) {
      await Promise.all(mutedWords.map(word => this.removeMutedWord(word)));
    }
    async hidePost(postUri) {
      await this.updateHiddenPost(postUri, 'hide');
    }
    async unhidePost(postUri) {
      await this.updateHiddenPost(postUri, 'unhide');
    }
    async bskyAppQueueNudges(nudges) {
      await this.updatePreferences(prefs => {
        let bskyAppStatePref = prefs.findLast(pref => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
        bskyAppStatePref = bskyAppStatePref || {};
        nudges = Array.isArray(nudges) ? nudges : [nudges];
        bskyAppStatePref.queuedNudges = (bskyAppStatePref.queuedNudges || []).concat(nudges);
        return prefs.filter(p => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([{
          ...bskyAppStatePref,
          $type: 'app.bsky.actor.defs#bskyAppStatePref'
        }]);
      });
    }
    async bskyAppDismissNudges(nudges) {
      await this.updatePreferences(prefs => {
        let bskyAppStatePref = prefs.findLast(pref => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
        bskyAppStatePref = bskyAppStatePref || {};
        nudges = Array.isArray(nudges) ? nudges : [nudges];
        bskyAppStatePref.queuedNudges = (bskyAppStatePref.queuedNudges || []).filter(nudge => !nudges.includes(nudge));
        return prefs.filter(p => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([{
          ...bskyAppStatePref,
          $type: 'app.bsky.actor.defs#bskyAppStatePref'
        }]);
      });
    }
    async bskyAppSetActiveProgressGuide(guide) {
      if (guide && !index_1.AppBskyActorDefs.validateBskyAppProgressGuide(guide).success) {
        throw new Error('Invalid progress guide');
      }
      await this.updatePreferences(prefs => {
        let bskyAppStatePref = prefs.findLast(pref => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
        bskyAppStatePref = bskyAppStatePref || {};
        bskyAppStatePref.activeProgressGuide = guide;
        return prefs.filter(p => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([{
          ...bskyAppStatePref,
          $type: 'app.bsky.actor.defs#bskyAppStatePref'
        }]);
      });
    }
    /**
     * Insert or update a NUX in user prefs
     */
    async bskyAppUpsertNux(nux) {
      (0, util_1.validateNux)(nux);
      await this.updatePreferences(prefs => {
        let bskyAppStatePref = prefs.findLast(pref => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
        bskyAppStatePref = bskyAppStatePref || {};
        bskyAppStatePref.nuxs = bskyAppStatePref.nuxs || [];
        const existing = bskyAppStatePref.nuxs?.find(n => {
          return n.id === nux.id;
        });
        let next;
        if (existing) {
          next = {
            id: existing.id,
            completed: nux.completed,
            data: nux.data,
            expiresAt: nux.expiresAt
          };
        } else {
          next = nux;
        }
        // remove duplicates and append
        bskyAppStatePref.nuxs = bskyAppStatePref.nuxs.filter(n => n.id !== nux.id).concat(next);
        return prefs.filter(p => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([{
          ...bskyAppStatePref,
          $type: 'app.bsky.actor.defs#bskyAppStatePref'
        }]);
      });
    }
    /**
     * Removes NUXs from user preferences.
     */
    async bskyAppRemoveNuxs(ids) {
      await this.updatePreferences(prefs => {
        let bskyAppStatePref = prefs.findLast(pref => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
        bskyAppStatePref = bskyAppStatePref || {};
        bskyAppStatePref.nuxs = (bskyAppStatePref.nuxs || []).filter(nux => {
          return !ids.includes(nux.id);
        });
        return prefs.filter(p => !index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat([{
          ...bskyAppStatePref,
          $type: 'app.bsky.actor.defs#bskyAppStatePref'
        }]);
      });
    }
    /**
     * This function updates the preferences of a user and allows for a callback function to be executed
     * before the update.
     * @param cb - cb is a callback function that takes in a single parameter of type
     * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
     * update the preferences of the user. The function is called with the current preferences as an
     * argument and if the callback returns false, the preferences are not updated.
     */
    async updatePreferences(cb) {
      try {
        await __classPrivateFieldGet(this, _Agent_prefsLock, "f").acquireAsync();
        const res = await this.app.bsky.actor.getPreferences({});
        const newPrefs = cb(res.data.preferences);
        if (newPrefs === false) {
          return res.data.preferences;
        }
        await this.app.bsky.actor.putPreferences({
          preferences: newPrefs
        });
        return newPrefs;
      } finally {
        __classPrivateFieldGet(this, _Agent_prefsLock, "f").release();
      }
    }
    async updateHiddenPost(postUri, action) {
      await this.updatePreferences(prefs => {
        let pref = prefs.findLast(pref => index_1.AppBskyActorDefs.isHiddenPostsPref(pref) && index_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success);
        if (pref && index_1.AppBskyActorDefs.isHiddenPostsPref(pref)) {
          pref.items = action === 'hide' ? Array.from(new Set([...pref.items, postUri])) : pref.items.filter(uri => uri !== postUri);
        } else {
          if (action === 'hide') {
            pref = {
              $type: 'app.bsky.actor.defs#hiddenPostsPref',
              items: [postUri]
            };
          }
        }
        return prefs.filter(p => !index_1.AppBskyActorDefs.isInterestsPref(p)).concat([{
          ...pref,
          $type: 'app.bsky.actor.defs#hiddenPostsPref'
        }]);
      });
    }
    /**
     * A helper specifically for updating feed preferences
     */
    async updateFeedPreferences(cb) {
      let res;
      await this.updatePreferences(prefs => {
        let feedsPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
        if (feedsPref) {
          res = cb(feedsPref.saved, feedsPref.pinned);
          feedsPref.saved = res.saved;
          feedsPref.pinned = res.pinned;
        } else {
          res = cb([], []);
          feedsPref = {
            $type: 'app.bsky.actor.defs#savedFeedsPref',
            saved: res.saved,
            pinned: res.pinned
          };
        }
        return prefs.filter(pref => !index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat([feedsPref]);
      });
      return res;
    }
    async updateSavedFeedsV2Preferences(cb) {
      let maybeMutatedSavedFeeds = [];
      await this.updatePreferences(prefs => {
        let existingV2Pref = prefs.findLast(pref => index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPrefV2(pref).success);
        let existingV1Pref = prefs.findLast(pref => index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
        if (existingV2Pref) {
          maybeMutatedSavedFeeds = cb(existingV2Pref.items);
          existingV2Pref = {
            ...existingV2Pref,
            items: maybeMutatedSavedFeeds
          };
        } else {
          maybeMutatedSavedFeeds = cb([]);
          existingV2Pref = {
            $type: 'app.bsky.actor.defs#savedFeedsPrefV2',
            items: maybeMutatedSavedFeeds
          };
        }
        // enforce ordering, pinned then saved
        const pinned = existingV2Pref.items.filter(i => i.pinned);
        const saved = existingV2Pref.items.filter(i => !i.pinned);
        existingV2Pref.items = pinned.concat(saved);
        let updatedPrefs = prefs.filter(pref => !index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref)).concat(existingV2Pref);
        /*
         * If there's a v2 pref present, it means this account was migrated from v1
         * to v2. During the transition period, we double write v2 prefs back to
         * v1, but NOT the other way around.
         */
        if (existingV1Pref) {
          const {
            saved,
            pinned
          } = existingV1Pref;
          const v2Compat = (0, util_1.savedFeedsToUriArrays)(
          // v1 only supports feeds and lists
          existingV2Pref.items.filter(i => ['feed', 'list'].includes(i.type)));
          existingV1Pref = {
            ...existingV1Pref,
            saved: Array.from(new Set([...saved, ...v2Compat.saved])),
            pinned: Array.from(new Set([...pinned, ...v2Compat.pinned]))
          };
          updatedPrefs = updatedPrefs.filter(pref => !index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat(existingV1Pref);
        }
        return updatedPrefs;
      });
      return maybeMutatedSavedFeeds;
    }
  }
  agent.Agent = Agent;
  _Agent_prefsLock = new WeakMap();
  //#region Static configuration
  /**
   * The labelers to be used across all requests with the takedown capability
   */
  Object.defineProperty(Agent, "appLabelers", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [const_1.BSKY_LABELER_DID]
  });
  /**
   * Helper to transform the legacy content preferences.
   */
  function adjustLegacyContentLabelPref(pref) {
    let visibility = pref.visibility;
    // adjust legacy values
    if (visibility === 'show') {
      visibility = 'ignore';
    }
    return {
      ...pref,
      visibility
    };
  }
  /**
   * Re-maps legacy labels to new labels on READ. Does not save these changes to
   * the user's preferences.
   */
  function remapLegacyLabels(labels) {
    const _labels = {
      ...labels
    };
    const legacyToNewMap = {
      gore: 'graphic-media',
      nsfw: 'porn',
      suggestive: 'sexual'
    };
    for (const labelName in _labels) {
      const newLabelName = legacyToNewMap[labelName];
      if (newLabelName) {
        _labels[newLabelName] = _labels[labelName];
      }
    }
    return _labels;
  }
  /**
   * A helper to get the currently enabled labelers from the full preferences array
   */
  function prefsArrayToLabelerDids(prefs) {
    const labelersPref = prefs.findLast(pref => index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
    let dids = [];
    if (labelersPref) {
      dids = labelersPref.labelers.map(labeler => labeler.did);
    }
    return dids;
  }
  function isBskyPrefs(v) {
    return v && typeof v === 'object' && 'moderationPrefs' in v && isModPrefs(v.moderationPrefs);
  }
  function isModPrefs(v) {
    return v && typeof v === 'object' && 'labelers' in v;
  }
  function migrateLegacyMutedWordsItems(items) {
    return items.map(item => ({
      ...item,
      id: item.id || common_web_1.TID.nextStr()
    }));
  }
  function matchMutedWord(existingWord, newWord) {
    // id is undefined in legacy implementation
    const existingId = existingWord.id;
    // prefer matching based on id
    const matchById = existingId && existingId === newWord.id;
    // handle legacy case where id is not set
    const legacyMatchByValue = !existingId && existingWord.value === newWord.value;
    return matchById || legacyMatchByValue;
  }
  return agent;
}

var atpAgent = {};

var hasRequiredAtpAgent;
function requireAtpAgent() {
  if (hasRequiredAtpAgent) return atpAgent;
  hasRequiredAtpAgent = 1;
  Object.defineProperty(atpAgent, "__esModule", {
    value: true
  });
  atpAgent.CredentialSession = atpAgent.AtpAgent = undefined;
  const common_web_1 = requireDist$4();
  const xrpc_1 = requireDist$1();
  const agent_1 = requireAgent();
  const client_1 = requireClient();
  const lexicons_1 = requireLexicons();
  const ReadableStream = globalThis.ReadableStream;
  /**
   * A wrapper around the {@link Agent} class that uses credential based session
   * management. This class also exposes most of the session management methods
   * directly.
   *
   * This class will be deprecated in the near future. Use {@link Agent} directly
   * with a {@link CredentialSession} instead:
   *
   *  ```ts
   *  const session = new CredentialSession({
   *    service: new URL('https://example.com'),
   *  })
   *
   *  const agent = new Agent(session)
   *  ```
   */
  class AtpAgent extends agent_1.Agent {
    constructor(options) {
      const sessionManager = options instanceof CredentialSession ? options : new CredentialSession(new URL(options.service), options.fetch, options.persistSession);
      super(sessionManager);
      Object.defineProperty(this, "sessionManager", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      // This assignment is already being done in the super constructor, but we
      // need to do it here to make TypeScript happy.
      this.sessionManager = sessionManager;
      if (!(options instanceof CredentialSession) && options.headers) {
        for (const [key, value] of options.headers) {
          this.setHeader(key, value);
        }
      }
    }
    clone() {
      return this.copyInto(new AtpAgent(this.sessionManager));
    }
    get session() {
      return this.sessionManager.session;
    }
    get hasSession() {
      return this.sessionManager.hasSession;
    }
    get did() {
      return this.sessionManager.did;
    }
    get serviceUrl() {
      return this.sessionManager.serviceUrl;
    }
    get pdsUrl() {
      return this.sessionManager.pdsUrl;
    }
    get dispatchUrl() {
      return this.sessionManager.dispatchUrl;
    }
    /** @deprecated use {@link serviceUrl} instead */
    get service() {
      return this.serviceUrl;
    }
    get persistSession() {
      throw new Error('Cannot set persistSession directly. "persistSession" is defined through the constructor and will be invoked automatically when session data changes.');
    }
    set persistSession(v) {
      throw new Error('Cannot set persistSession directly. "persistSession" must be defined in the constructor and can no longer be changed.');
    }
    /** @deprecated use {@link AtpAgent.serviceUrl} instead */
    getServiceUrl() {
      return this.serviceUrl;
    }
    async resumeSession(session) {
      return this.sessionManager.resumeSession(session);
    }
    async createAccount(data, opts) {
      return this.sessionManager.createAccount(data, opts);
    }
    async login(opts) {
      return this.sessionManager.login(opts);
    }
    async logout() {
      return this.sessionManager.logout();
    }
  }
  atpAgent.AtpAgent = AtpAgent;
  /**
   * Credentials (username / password) based session manager. Instances of this
   * class will typically be used as the session manager for an {@link AtpAgent}.
   * They can also be used with an {@link XrpcClient}, if you want to use you
   * own Lexicons.
   */
  class CredentialSession {
    constructor(serviceUrl, fetch = globalThis.fetch, persistSession) {
      Object.defineProperty(this, "serviceUrl", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: serviceUrl
      });
      Object.defineProperty(this, "fetch", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: fetch
      });
      Object.defineProperty(this, "persistSession", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: persistSession
      });
      Object.defineProperty(this, "pdsUrl", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      }); // The PDS URL, driven by the did doc
      Object.defineProperty(this, "session", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, "refreshSessionPromise", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
      });
      /**
       * Private {@link ComAtprotoServerNS} used to perform session management API
       * calls on the service endpoint. Calls performed by this agent will not be
       * authenticated using the user's session to allow proper manual configuration
       * of the headers when performing session management operations.
       */
      Object.defineProperty(this, "server", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: new client_1.ComAtprotoServerNS(
        // Note that the use of the codegen "schemas" (to instantiate `this.api`),
        // as well as the use of `ComAtprotoServerNS` will cause this class to
        // reference (way) more code than it actually needs. It is not possible,
        // with the current state of the codegen, to generate a client that only
        // includes the methods that are actually used by this class. This is a
        // known limitation that should be addressed in a future version of the
        // codegen.
        new xrpc_1.XrpcClient((url, init) => {
          return (0, this.fetch)(new URL(url, this.serviceUrl), init);
        }, lexicons_1.schemas))
      });
    }
    get did() {
      return this.session?.did;
    }
    get dispatchUrl() {
      return this.pdsUrl || this.serviceUrl;
    }
    get hasSession() {
      return !!this.session;
    }
    /**
     * Sets a WhatWG "fetch()" function to be used for making HTTP requests.
     */
    setFetch(fetch = globalThis.fetch) {
      this.fetch = fetch;
    }
    async fetchHandler(url, init) {
      // wait for any active session-refreshes to finish
      await this.refreshSessionPromise;
      const initialUri = new URL(url, this.dispatchUrl);
      const initialReq = new Request(initialUri, init);
      const initialToken = this.session?.accessJwt;
      if (!initialToken || initialReq.headers.has('authorization')) {
        return (0, this.fetch)(initialReq);
      }
      initialReq.headers.set('authorization', `Bearer ${initialToken}`);
      const initialRes = await (0, this.fetch)(initialReq);
      if (!this.session?.refreshJwt) {
        return initialRes;
      }
      const isExpiredToken = await isErrorResponse(initialRes, [400], ['ExpiredToken']);
      if (!isExpiredToken) {
        return initialRes;
      }
      try {
        await this.refreshSession();
      } catch {
        return initialRes;
      }
      if (init?.signal?.aborted) {
        return initialRes;
      }
      // The stream was already consumed. We cannot retry the request. A solution
      // would be to tee() the input stream but that would bufferize the entire
      // stream in memory which can lead to memory starvation. Instead, we will
      // return the original response and let the calling code handle retries.
      if (ReadableStream && init?.body instanceof ReadableStream) {
        return initialRes;
      }
      // Return initial "ExpiredToken" response if the session was not refreshed.
      const updatedToken = this.session?.accessJwt;
      if (!updatedToken || updatedToken === initialToken) {
        return initialRes;
      }
      // Make sure the initial request is cancelled to avoid leaking resources
      // (NodeJS 👀): https://undici.nodejs.org/#/?id=garbage-collection
      await initialRes.body?.cancel();
      // We need to re-compute the URI in case the PDS endpoint has changed
      const updatedUri = new URL(url, this.dispatchUrl);
      const updatedReq = new Request(updatedUri, init);
      updatedReq.headers.set('authorization', `Bearer ${updatedToken}`);
      return await (0, this.fetch)(updatedReq);
    }
    /**
     * Create a new account and hydrate its session in this agent.
     */
    async createAccount(data, opts) {
      try {
        const res = await this.server.createAccount(data, opts);
        this.session = {
          accessJwt: res.data.accessJwt,
          refreshJwt: res.data.refreshJwt,
          handle: res.data.handle,
          did: res.data.did,
          email: data.email,
          emailConfirmed: false,
          emailAuthFactor: false,
          active: true
        };
        this.persistSession?.('create', this.session);
        this._updateApiEndpoint(res.data.didDoc);
        return res;
      } catch (e) {
        this.session = undefined;
        this.persistSession?.('create-failed', undefined);
        throw e;
      }
    }
    /**
     * Start a new session with this agent.
     */
    async login(opts) {
      try {
        const res = await this.server.createSession({
          identifier: opts.identifier,
          password: opts.password,
          authFactorToken: opts.authFactorToken
        });
        this.session = {
          accessJwt: res.data.accessJwt,
          refreshJwt: res.data.refreshJwt,
          handle: res.data.handle,
          did: res.data.did,
          email: res.data.email,
          emailConfirmed: res.data.emailConfirmed,
          emailAuthFactor: res.data.emailAuthFactor,
          active: res.data.active ?? true,
          status: res.data.status
        };
        this._updateApiEndpoint(res.data.didDoc);
        this.persistSession?.('create', this.session);
        return res;
      } catch (e) {
        this.session = undefined;
        this.persistSession?.('create-failed', undefined);
        throw e;
      }
    }
    async logout() {
      if (this.session) {
        try {
          await this.server.deleteSession(undefined, {
            headers: {
              authorization: `Bearer ${this.session.accessJwt}`
            }
          });
        } catch {
          // Ignore errors
        } finally {
          this.session = undefined;
          this.persistSession?.('expired', undefined);
        }
      }
    }
    /**
     * Resume a pre-existing session with this agent.
     */
    async resumeSession(session) {
      this.session = session;
      try {
        const res = await this.server.getSession(undefined, {
          headers: {
            authorization: `Bearer ${session.accessJwt}`
          }
        }).catch(async err => {
          if (err instanceof xrpc_1.XRPCError && ['ExpiredToken', 'InvalidToken'].includes(err.error) && session.refreshJwt) {
            try {
              const res = await this.server.refreshSession(undefined, {
                headers: {
                  authorization: `Bearer ${session.refreshJwt}`
                }
              });
              session.accessJwt = res.data.accessJwt;
              session.refreshJwt = res.data.refreshJwt;
              return this.server.getSession(undefined, {
                headers: {
                  authorization: `Bearer ${session.accessJwt}`
                }
              });
            } catch {
              // Noop, we'll throw the original error
            }
          }
          throw err;
        });
        if (res.data.did !== session.did) {
          throw new xrpc_1.XRPCError(xrpc_1.ResponseType.InvalidRequest, 'Invalid session', 'InvalidDID');
        }
        session.email = res.data.email;
        session.handle = res.data.handle;
        session.emailConfirmed = res.data.emailConfirmed;
        session.emailAuthFactor = res.data.emailAuthFactor;
        session.active = res.data.active ?? true;
        session.status = res.data.status;
        // protect against concurrent session updates
        if (this.session === session) {
          this._updateApiEndpoint(res.data.didDoc);
          this.persistSession?.('update', session);
        }
        return res;
      } catch (err) {
        // protect against concurrent session updates
        if (this.session === session) {
          this.session = undefined;
          this.persistSession?.(err instanceof xrpc_1.XRPCError && ['ExpiredToken', 'InvalidToken'].includes(err.error) ? 'expired' : 'network-error', undefined);
        }
        throw err;
      }
    }
    /**
     * Internal helper to refresh sessions
     * - Wraps the actual implementation in a promise-guard to ensure only
     *   one refresh is attempted at a time.
     */
    async refreshSession() {
      return this.refreshSessionPromise || (this.refreshSessionPromise = this._refreshSessionInner().finally(() => {
        this.refreshSessionPromise = undefined;
      }));
    }
    /**
     * Internal helper to refresh sessions (actual behavior)
     */
    async _refreshSessionInner() {
      if (!this.session?.refreshJwt) {
        return;
      }
      try {
        const res = await this.server.refreshSession(undefined, {
          headers: {
            authorization: `Bearer ${this.session.refreshJwt}`
          }
        });
        // succeeded, update the session
        this.session = {
          ...this.session,
          accessJwt: res.data.accessJwt,
          refreshJwt: res.data.refreshJwt,
          handle: res.data.handle,
          did: res.data.did
        };
        this._updateApiEndpoint(res.data.didDoc);
        this.persistSession?.('update', this.session);
      } catch (err) {
        if (err instanceof xrpc_1.XRPCError && err.error && ['ExpiredToken', 'InvalidToken'].includes(err.error)) {
          // failed due to a bad refresh token
          this.session = undefined;
          this.persistSession?.('expired', undefined);
        }
        // else: other failures should be ignored - the issue will
        // propagate in the _dispatch() second attempt to run
        // the request
      }
    }
    /**
     * Helper to update the pds endpoint dynamically.
     *
     * The session methods (create, resume, refresh) may respond with the user's
     * did document which contains the user's canonical PDS endpoint. That endpoint
     * may differ from the endpoint used to contact the server. We capture that
     * PDS endpoint and update the client to use that given endpoint for future
     * requests. (This helps ensure smooth migrations between PDSes, especially
     * when the PDSes are operated by a single org.)
     */
    _updateApiEndpoint(didDoc) {
      if ((0, common_web_1.isValidDidDoc)(didDoc)) {
        const endpoint = (0, common_web_1.getPdsEndpoint)(didDoc);
        this.pdsUrl = endpoint ? new URL(endpoint) : undefined;
      } else {
        // If the did doc is invalid, we clear the pdsUrl (should never happen)
        this.pdsUrl = undefined;
      }
    }
  }
  atpAgent.CredentialSession = CredentialSession;
  function isErrorObject(v) {
    return xrpc_1.errorResponseBody.safeParse(v).success;
  }
  async function isErrorResponse(response, status, errorNames) {
    if (!status.includes(response.status)) return false;
    // Some engines (react-native 👀) don't expose a response.body property...
    // if (!response.body) return false
    try {
      const json = await peekJson(response, 10 * 1024);
      return isErrorObject(json) && errorNames.includes(json.error);
    } catch (err) {
      return false;
    }
  }
  async function peekJson(response, maxSize = Infinity) {
    if (extractType(response) !== 'application/json') throw new Error('Not JSON');
    if (extractLength(response) > maxSize) throw new Error('Response too large');
    return response.clone().json();
  }
  function extractLength({
    headers
  }) {
    return headers.get('Content-Length') ? Number(headers.get('Content-Length')) : NaN;
  }
  function extractType({
    headers
  }) {
    return headers.get('Content-Type')?.split(';')[0]?.trim();
  }
  return atpAgent;
}

var bskyAgent = {};

var hasRequiredBskyAgent;
function requireBskyAgent() {
  if (hasRequiredBskyAgent) return bskyAgent;
  hasRequiredBskyAgent = 1;
  Object.defineProperty(bskyAgent, "__esModule", {
    value: true
  });
  bskyAgent.BskyAgent = undefined;
  const atp_agent_1 = requireAtpAgent();
  /** @deprecated use {@link AtpAgent} instead */
  class BskyAgent extends atp_agent_1.AtpAgent {
    clone() {
      if (this.constructor === BskyAgent) {
        const agent = new BskyAgent(this.sessionManager);
        return this.copyInto(agent);
      }
      // sub-classes should override this method
      throw new TypeError('Cannot clone a subclass of BskyAgent');
    }
  }
  bskyAgent.BskyAgent = BskyAgent;
  return bskyAgent;
}

var hasRequiredDist;
function requireDist() {
  if (hasRequiredDist) return dist$5;
  hasRequiredDist = 1;
  (function (exports) {

    var __createBinding = dist$5.__createBinding || (Object.create ? function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
          enumerable: true,
          get: function () {
            return m[k];
          }
        };
      }
      Object.defineProperty(o, k2, desc);
    } : function (o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = dist$5.__exportStar || function (m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.lexicons = exports.default = exports.BskyAgent = exports.CredentialSession = exports.AtpAgent = exports.Agent = exports.DEFAULT_LABEL_SETTINGS = exports.LABELS = exports.schemas = exports.parseLanguage = exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.BlobRef = exports.AtUri = undefined;
    const lexicon_1 = requireDist$2();
    const lexicons_1 = requireLexicons();
    var syntax_1 = requireDist$5();
    Object.defineProperty(exports, "AtUri", {
      enumerable: true,
      get: function () {
        return syntax_1.AtUri;
      }
    });
    var lexicon_2 = requireDist$2();
    Object.defineProperty(exports, "BlobRef", {
      enumerable: true,
      get: function () {
        return lexicon_2.BlobRef;
      }
    });
    Object.defineProperty(exports, "lexToJson", {
      enumerable: true,
      get: function () {
        return lexicon_2.lexToJson;
      }
    });
    Object.defineProperty(exports, "stringifyLex", {
      enumerable: true,
      get: function () {
        return lexicon_2.stringifyLex;
      }
    });
    Object.defineProperty(exports, "jsonToLex", {
      enumerable: true,
      get: function () {
        return lexicon_2.jsonToLex;
      }
    });
    Object.defineProperty(exports, "jsonStringToLex", {
      enumerable: true,
      get: function () {
        return lexicon_2.jsonStringToLex;
      }
    });
    var common_web_1 = requireDist$4();
    Object.defineProperty(exports, "parseLanguage", {
      enumerable: true,
      get: function () {
        return common_web_1.parseLanguage;
      }
    });
    __exportStar(requireTypes$2(), exports);
    __exportStar(require_const(), exports);
    __exportStar(requireUtil$4(), exports);
    __exportStar(requireClient(), exports);
    var lexicons_2 = requireLexicons();
    Object.defineProperty(exports, "schemas", {
      enumerable: true,
      get: function () {
        return lexicons_2.schemas;
      }
    });
    __exportStar(requireRichText(), exports);
    __exportStar(requireSanitization(), exports);
    __exportStar(requireUnicode(), exports);
    __exportStar(requireUtil$1(), exports);
    __exportStar(requireModeration(), exports);
    __exportStar(requireTypes(), exports);
    __exportStar(requireMocker(), exports);
    var labels_1 = requireLabels();
    Object.defineProperty(exports, "LABELS", {
      enumerable: true,
      get: function () {
        return labels_1.LABELS;
      }
    });
    Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", {
      enumerable: true,
      get: function () {
        return labels_1.DEFAULT_LABEL_SETTINGS;
      }
    });
    var agent_1 = requireAgent();
    Object.defineProperty(exports, "Agent", {
      enumerable: true,
      get: function () {
        return agent_1.Agent;
      }
    });
    var atp_agent_1 = requireAtpAgent();
    Object.defineProperty(exports, "AtpAgent", {
      enumerable: true,
      get: function () {
        return atp_agent_1.AtpAgent;
      }
    });
    var atp_agent_2 = requireAtpAgent();
    Object.defineProperty(exports, "CredentialSession", {
      enumerable: true,
      get: function () {
        return atp_agent_2.CredentialSession;
      }
    });
    var bsky_agent_1 = requireBskyAgent();
    Object.defineProperty(exports, "BskyAgent", {
      enumerable: true,
      get: function () {
        return bsky_agent_1.BskyAgent;
      }
    });
    var atp_agent_3 = requireAtpAgent();
    /** @deprecated */
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function () {
        return atp_agent_3.AtpAgent;
      }
    });
    // Expose a copy to prevent alteration of the internal Lexicon instance used by
    // the AtpBaseClient class.
    exports.lexicons = new lexicon_1.Lexicons(lexicons_1.lexicons);
  })(dist$5);
  return dist$5;
}

var distExports = requireDist();
var index = /*@__PURE__*/getDefaultExportFromCjs(distExports);

var atproto_api_import = /*#__PURE__*/_mergeNamespaces({
	__proto__: null,
	default: index
}, [distExports]);

// @ts-check

/** @param {string | null | undefined} text */
function likelyDID(text) {
  return !!text && (!text.trim().indexOf('did:') || text.trim().length === 24 && !/[^\sa-z0-9]/i.test(text));
}

/**
 * @param {T} did
 * @returns {T}
 * @template {string | undefined | null} T
 */
function shortenDID(did) {
  return did && (/** @type {T} */did.replace(_shortenDID_Regex, '').toLowerCase() || undefined);
}
const _shortenDID_Regex = /^did\:plc\:/;

/**
 * @param {T} shortDID
 * @returns {T}
 * @template {string | undefined | null} T
 */
function unwrapShortDID(shortDID) {
  return /** @type {T} */!shortDID ? undefined : shortDID.indexOf(':') < 0 ? 'did:plc:' + shortDID.toLowerCase() : shortDID.toLowerCase();
}

/**
 * @param {T} handle
 * @returns {T}
 * @template {string | undefined | null} T
 */
function shortenHandle(handle) {
  handle = cheapNormalizeHandle(handle);
  return handle && (/** @type {T} */handle.replace(_shortenHandle_Regex, '').toLowerCase() || undefined);
}
const _shortenHandle_Regex = /\.bsky\.social$/;

/**
 * @param {T} shortHandle
 * @returns {T}
 * @template {string | undefined | null} T
 */
function unwrapShortHandle(shortHandle) {
  if (likelyDID(shortHandle)) return unwrapShortDID(shortHandle);
  shortHandle = cheapNormalizeHandle(shortHandle);
  return /** @type {T} */!shortHandle ? undefined : shortHandle.indexOf('.') < 0 ? shortHandle.toLowerCase() + '.bsky.social' : shortHandle.toLowerCase();
}
function cheapNormalizeHandle(handle) {
  handle = handle && handle.trim().toLowerCase();
  if (handle && handle.charCodeAt(0) === 64) handle = handle.slice(1);
  const urlprefix = 'https://bsky.app/';
  if (handle && handle.lastIndexOf(urlprefix, 0) === 0) {
    const postURL = breakPostURL(handle);
    if (postURL && postURL.shortDID) return postURL.shortDID;
  }
  if (handle && handle.lastIndexOf('at:', 0) === 0) {
    const feedUri = breakFeedURI(handle);
    if (feedUri && feedUri.shortDID) return feedUri.shortDID;
    if (handle && handle.lastIndexOf('at://', 0) === 0) handle = handle.slice(5);else handle = handle.slice(3);
  }
  return handle || undefined;
}

/** @param {string | undefined | null} pdc */
function shortenPDS(pdc) {
  if (!pdc) return undefined;
  pdc = pdc.trim().toLowerCase();
  if (pdc === 'https://bsky.social') return '.s';else if (pdc === 'https://bsky.network') return '.n';else if (pdc === 'https://bsky.app') return '.a';

  // https://morel.us-east.host.bsky.network
  return pdc.replace(/^https:\/\//, '').replace(/host\.bsky\.network$/, '');
}
function unwrapShortPDS(shortPDC) {
  if (!shortPDC) return undefined;
  if (shortPDC === '.s') return 'https://bsky.social';else if (shortPDC === '.n') return 'https://bsky.network';else if (shortPDC === '.a') return 'https://bsky.app';
  if (/^http:/i.test(shortPDC) || /^https:/i.test(shortPDC)) return shortPDC;
  return 'https://' + shortPDC + 'host.bsky.network';
}

/**
 * dd+hh:mm:ss - like 30+23:59:59
 * @param {string | null | undefined} dtOffsetStr
 */
function parseTimestampOffset(dtOffsetStr) {
  if (!dtOffsetStr) return undefined;
  let offset = 0;
  let lead = 0;
  const plusPos = dtOffsetStr.indexOf('+');
  if (plusPos >= 0) {
    offset = Number(dtOffsetStr.substring(0, plusPos)) * 24 * 60 * 60 * 1000;
    lead = plusPos + 1;
  }
  const secondsColonPos = dtOffsetStr.lastIndexOf(':');
  if (secondsColonPos < 0) {
    offset += Number(dtOffsetStr.substring(lead)) * 1000;
  } else {
    offset += Number(dtOffsetStr.substring(secondsColonPos + 1)) * 1000;
    const minutesColonPos = dtOffsetStr.lastIndexOf(':', secondsColonPos - 1);
    if (minutesColonPos < 0) {
      offset += Number(dtOffsetStr.substring(lead, secondsColonPos)) * 60 * 1000;
    } else {
      offset += Number(dtOffsetStr.substring(minutesColonPos + 1, secondsColonPos)) * 60 * 1000;
      offset += Number(dtOffsetStr.substring(lead, minutesColonPos)) * 60 * 60 * 1000;
    }
  }
  return offset;
}
const offsetTooLarge = Date.UTC(2022, 1, 1);

/**
 * @param {number} offset
 * @returns dd+hh:mm:ss like 30+23:59:59 or 59:59.999
 */
function timestampOffsetToString(offset) {
  if (offset > offsetTooLarge) {
    console.error('timestampOffsetToString: offset too large', offset, new Date(offset));
  }
  const milliseconds = offset % 1000;
  offset = (offset - milliseconds) / 1000;
  const seconds = offset % 60;
  offset = (offset - seconds) / 60;
  const minutes = offset % 60;
  offset = (offset - minutes) / 60;
  const hours = offset % 24;
  const days = (offset - hours) / 24;
  let str = (100 + seconds).toString().slice(1);
  if (milliseconds) {
    str = str + '.' + (1000 + milliseconds).toString().slice(1).replace(/0+$/, '');
  }
  if (days + hours + minutes) {
    str = (100 + minutes).toString().slice(1) + ':' + str;
    if (days + hours) {
      str = hours.toString() + ':' + str;
      if (days) {
        str = days + '+' + str;
      }
    }
  }

  // no need for leading zero
  if (str.lastIndexOf('0', 0) === 0) str = str.slice(1);
  return str;
}

/**
* @param {string | null | undefined} url
*/
function breakPostURL(url) {
  if (!url) return;
  const matchBsky = _breakBskyPostURL_Regex.exec(url);
  if (matchBsky) return {
    shortDID: shortenDID(matchBsky[1]),
    postID: matchBsky[2]?.toString().toLowerCase()
  };
  const matchGisting = _breakGistingPostURL_Regex.exec(url);
  if (matchGisting) return {
    shortDID: shortenDID(matchGisting[2]),
    postID: matchGisting[3]?.toString().toLowerCase()
  };
  const matchBskyStyle = _breakBskyStylePostURL_Regex.exec(url);
  if (matchBskyStyle) return {
    shortDID: shortenDID(matchBskyStyle[2]),
    postID: matchBskyStyle[3]?.toString().toLowerCase()
  };
}
const _breakBskyPostURL_Regex = /^http[s]?\:\/\/bsky\.app\/profile\/([a-z0-9\.\:\-]+)\/post\/([a-z0-9]+)(\/|$)/i;
const _breakBskyStylePostURL_Regex = /^http[s]?\:\/\/(bsky\.app|6sky\.app|gist\.ing|gisti\.ng|gist\.ink)\/profile\/([a-z0-9\.\:\-]+)\/post\/([a-z0-9]+)(\/|$)/i;
const _breakGistingPostURL_Regex = /^http[s]?\:\/\/(6sky\.app|gist\.ing|gisti\.ng|gist\.ink)\/([a-z0-9\.\:\-]+)\/([a-z0-9]+)(\/|$)/i;

/**
 * @param {string} shortDID
 * @param {string} postID
 */
function makeBskyPostURL(shortDID, postID) {
  return 'https://bsky.app/profile/' + unwrapShortDID(shortDID) + '/post/' + postID;
}

/**
* @param {string | null | undefined} url
*/
function detectProfileURL(url) {
  if (!url) return;
  const matchBsky = _detectBskyProfileURL_Regex.exec(url);
  if (matchBsky) return shortenDID(matchBsky[1]);
  const matchGisting = _detectGistingProfileURL_Regex.exec(url);
  if (matchGisting) return shortenDID(matchGisting[2]);
  const matchOyinboReceipts = _detectOyinboReceiptsURL_Regex.exec(url);
  if (matchOyinboReceipts) return shortenDID(matchOyinboReceipts[1]);
  const matchClearSky = _detectClearSkyProfileURL_Regex.exec(url);
  if (matchClearSky) return shortenDID(matchClearSky[2]);
}
const _detectBskyProfileURL_Regex = /^http[s]?\:\/\/bsky\.app\/profile\/([a-z0-9\.\:\-]+)(\/|$)/i;
const _detectGistingProfileURL_Regex = /^http[s]?\:\/\/(gist\.ing|gisti\.ng|gist\.ink)\/([a-z0-9\.\:\-]+)(\/|$)/i;
const _detectOyinboReceiptsURL_Regex = /^http[s]?\:\/\/oyin\.bo\/receipts\/?\?handle\=([a-z0-9\.\:\-]+)(\/|$)/i;
const _detectClearSkyProfileURL_Regex = /^http[s]?\:\/\/(clearsky\.app|bsky\.thieflord\.dev)\/([a-z0-9\.\:\-]+)(\/|$)/i;
function makeFeedUri(shortDID, postID) {
  return 'at://' + unwrapShortDID(shortDID) + '/app.bsky.feed.post/' + postID;
}

/**
* @param {string | null | undefined} uri
*/
function breakFeedURI(uri) {
  if (!uri) return;
  const match = _breakFeedUri_Regex.exec(uri);
  if (!match || !match[4]) return;
  if (match[3] === 'app.bsky.feed.post') return {
    shortDID: shortenDID(match[2]),
    postID: match[4]
  };
  return {
    shortDID: match[2],
    postID: match[4],
    feedType: match[3]
  };
}
const _breakFeedUri_Regex = /^at\:\/\/(did:plc:)?([a-z0-9]+)\/([a-z\.]+)\/?(.*)?$/;

/**
* @param {string | null | undefined} uri
*/
function breakFeedURIPostOnly(uri) {
  if (!uri) return;
  const match = _breakFeedUri_Regex.exec(uri);
  if (!match || !match[4]) return;
  if (match[3] === 'app.bsky.feed.post') return {
    shortDID: shortenDID(match[2]),
    postID: match[4]
  };
}
function getProfileBlobUrl(did, cid) {
  if (!did || !cid) return undefined;
  return `https://cdn.bsky.app/img/avatar/plain/${unwrapShortDID(did)}/${cid}@jpeg`;
}
function getFeedBlobUrl(did, cid) {
  if (!did || !cid) return undefined;
  return `https://cdn.bsky.app/img/feed_thumbnail/plain/${unwrapShortDID(did)}/${cid}@jpeg`;
}
function getFeedVideoBlobUrl(did, cid) {
  if (!did || !cid) return undefined;
  return `https://video.bsky.app/watch/${unwrapShortDID(did)}/${cid}/thumbnail.jpg`;
}

/**
 * @param {any} x
 * @returns {x is Promise<any>}
 */
function isPromise(x) {
  if (!x || typeof x !== 'object') return false;else return typeof x.then === 'function';
}

// @ts-check

const BSKY_SOCIAL_URL = 'https://bsky.social/';
const BSKY_NETWORK_URL = 'https://bsky.network/';
const BSKY_PUBLIC_URL = 'https://public.api.bsky.app/';

/**
 * @typedef {Omit<import('@atproto/api').AtpAgentOptions, 'service'> & {
 *  service?: import('@atproto/api').AtpAgentOptions['service'],
 *  fetch?: import('@atproto/api').AtpBaseClient['fetchHandler']
 * }} ColdskyAgentOptions
 */

class ColdskyAgent extends distExports.AtpAgent {
  /** @param {ColdskyAgentOptions} [args] */
  constructor(args) {
    super({
      ...args,
      // most of methods work fine on bsky.social
      service: !args?.service ? BSKY_SOCIAL_URL : typeof args.service === 'string' ? unwrapShortPDS(String(args.service)) : args.service
    });

    // find all clients to patch
    for (const key in this.com.atproto) {
      /** @type {typeof this.com.atproto.admin} */
      const ns = this.com.atproto[key];
      const baseClient = ns._client;
      if (baseClient) this.patchBaseClient(baseClient, !!args?.service, args?.fetch);
    }
  }

  /**
   * @param {typeof this.com.atproto.sync._client} baseClient
   * @param {boolean} serviceDefined
   * @param {typeof this.com.atproto.sync._client.fetchHandler | undefined} fetchOverride
   */
  patchBaseClient(baseClient, serviceDefined, fetchOverride) {
    baseClient.lex.assertValidXrpcOutput = function (lexUri, value, ...rest) {
      return true;
    };
    if (fetchOverride) {
      if (/** @type {*} */baseClient.fetchHandler._patchedFetch) return;

      // @ts-ignore fetchHandler is notionally readonly
      baseClient.fetchHandler = fetchOverride;
      // overrideFetch(baseClient.fetch.bind(baseClient), serviceDefined);
    }
  }
}

let decoder;
try {
  decoder = new TextDecoder();
} catch (error) {}
let src$2;
let srcEnd;
let position$1 = 0;
const LEGACY_RECORD_INLINE_ID = 105;
const RECORD_DEFINITIONS_ID = 0xdffe;
const RECORD_INLINE_ID = 0xdfff; // temporary first-come first-serve tag // proposed tag: 0x7265 // 're'
const BUNDLED_STRINGS_ID = 0xdff9;
const PACKED_REFERENCE_TAG_ID = 6;
const STOP_CODE = {};
let maxArraySize = 112810000; // This is the maximum array size in V8. We would potentially detect and set it higher
// for JSC, but this is pretty large and should be sufficient for most use cases
let maxMapSize = 16810000; // JavaScript has a fixed maximum map size of about 16710000, but JS itself enforces this,
let currentDecoder = {};
let currentStructures;
let srcString;
let srcStringStart = 0;
let srcStringEnd = 0;
let bundledStrings$1;
let referenceMap;
let currentExtensions = [];
let currentExtensionRanges = [];
let packedValues;
let dataView$1;
let restoreMapsAsObject;
let defaultOptions = {
  useRecords: false,
  mapsAsObjects: true
};
let sequentialMode = false;
let inlineObjectReadThreshold = 2;
// no-eval build
try {
  new Function('');
} catch (error) {
  // if eval variants are not supported, do not create inline object readers ever
  inlineObjectReadThreshold = Infinity;
}
let Decoder$2 = class Decoder {
  constructor(options) {
    if (options) {
      if ((options.keyMap || options._keyMap) && !options.useRecords) {
        options.useRecords = false;
        options.mapsAsObjects = true;
      }
      if (options.useRecords === false && options.mapsAsObjects === undefined) options.mapsAsObjects = true;
      if (options.getStructures) options.getShared = options.getStructures;
      if (options.getShared && !options.structures) (options.structures = []).uninitialized = true; // this is what we use to denote an uninitialized structures
      if (options.keyMap) {
        this.mapKey = new Map();
        for (let [k, v] of Object.entries(options.keyMap)) this.mapKey.set(v, k);
      }
    }
    Object.assign(this, options);
  }
  /*
  decodeKey(key) {
  	return this.keyMap
  		? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key
  		: key
  }
  */
  decodeKey(key) {
    return this.keyMap ? this.mapKey.get(key) || key : key;
  }
  encodeKey(key) {
    return this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key;
  }
  encodeKeys(rec) {
    if (!this._keyMap) return rec;
    let map = new Map();
    for (let [k, v] of Object.entries(rec)) map.set(this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k, v);
    return map;
  }
  decodeKeys(map) {
    if (!this._keyMap || map.constructor.name != 'Map') return map;
    if (!this._mapKey) {
      this._mapKey = new Map();
      for (let [k, v] of Object.entries(this._keyMap)) this._mapKey.set(v, k);
    }
    let res = {};
    //map.forEach((v,k) => res[Object.keys(this._keyMap)[Object.values(this._keyMap).indexOf(k)] || k] = v)
    map.forEach((v, k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] = v);
    return res;
  }
  mapDecode(source, end) {
    let res = this.decode(source);
    if (this._keyMap) {
      //Experiemntal support for Optimised KeyMap  decoding 
      switch (res.constructor.name) {
        case 'Array':
          return res.map(r => this.decodeKeys(r));
        //case 'Map': return this.decodeKeys(res)
      }
    }
    return res;
  }
  decode(source, end) {
    if (src$2) {
      // re-entrant execution, save the state and restore it after we do this decode
      return saveState(() => {
        clearSource();
        return this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end);
      });
    }
    srcEnd = end > -1 ? end : source.length;
    position$1 = 0;
    srcStringEnd = 0;
    srcString = null;
    bundledStrings$1 = null;
    src$2 = source;
    // this provides cached access to the data view for a buffer if it is getting reused, which is a recommend
    // technique for getting data from a database where it can be copied into an existing buffer instead of creating
    // new ones
    try {
      dataView$1 = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));
    } catch (error) {
      // if it doesn't have a buffer, maybe it is the wrong type of object
      src$2 = null;
      if (source instanceof Uint8Array) throw error;
      throw new Error('Source must be a Uint8Array or Buffer but was a ' + (source && typeof source == 'object' ? source.constructor.name : typeof source));
    }
    if (this instanceof Decoder) {
      currentDecoder = this;
      packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);
      if (this.structures) {
        currentStructures = this.structures;
        return checkedRead();
      } else if (!currentStructures || currentStructures.length > 0) {
        currentStructures = [];
      }
    } else {
      currentDecoder = defaultOptions;
      if (!currentStructures || currentStructures.length > 0) currentStructures = [];
      packedValues = null;
    }
    return checkedRead();
  }
  decodeMultiple(source, forEach) {
    let values,
      lastPosition = 0;
    try {
      let size = source.length;
      sequentialMode = true;
      let value = this ? this.decode(source, size) : defaultDecoder.decode(source, size);
      if (forEach) {
        if (forEach(value) === false) {
          return;
        }
        while (position$1 < size) {
          lastPosition = position$1;
          if (forEach(checkedRead()) === false) {
            return;
          }
        }
      } else {
        values = [value];
        while (position$1 < size) {
          lastPosition = position$1;
          values.push(checkedRead());
        }
        return values;
      }
    } catch (error) {
      error.lastPosition = lastPosition;
      error.values = values;
      throw error;
    } finally {
      sequentialMode = false;
      clearSource();
    }
  }
};
function checkedRead() {
  try {
    let result = read$2();
    if (bundledStrings$1) {
      if (position$1 >= bundledStrings$1.postBundlePosition) {
        let error = new Error('Unexpected bundle position');
        error.incomplete = true;
        throw error;
      }
      // bundled strings to skip past
      position$1 = bundledStrings$1.postBundlePosition;
      bundledStrings$1 = null;
    }
    if (position$1 == srcEnd) {
      // finished reading this source, cleanup references
      currentStructures = null;
      src$2 = null;
      if (referenceMap) referenceMap = null;
    } else if (position$1 > srcEnd) {
      // over read
      let error = new Error('Unexpected end of CBOR data');
      error.incomplete = true;
      throw error;
    } else if (!sequentialMode) {
      throw new Error('Data read, but end of buffer not reached');
    }
    // else more to read, but we are reading sequentially, so don't clear source yet
    return result;
  } catch (error) {
    clearSource();
    if (error instanceof RangeError || error.message.startsWith('Unexpected end of buffer')) {
      error.incomplete = true;
    }
    throw error;
  }
}
function read$2() {
  let token = src$2[position$1++];
  let majorType = token >> 5;
  token = token & 0x1f;
  if (token > 0x17) {
    switch (token) {
      case 0x18:
        token = src$2[position$1++];
        break;
      case 0x19:
        if (majorType == 7) {
          return getFloat16();
        }
        token = dataView$1.getUint16(position$1);
        position$1 += 2;
        break;
      case 0x1a:
        if (majorType == 7) {
          let value = dataView$1.getFloat32(position$1);
          if (currentDecoder.useFloat32 > 2) {
            // this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
            let multiplier = mult10[(src$2[position$1] & 0x7f) << 1 | src$2[position$1 + 1] >> 7];
            position$1 += 4;
            return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;
          }
          position$1 += 4;
          return value;
        }
        token = dataView$1.getUint32(position$1);
        position$1 += 4;
        break;
      case 0x1b:
        if (majorType == 7) {
          let value = dataView$1.getFloat64(position$1);
          position$1 += 8;
          return value;
        }
        if (majorType > 1) {
          if (dataView$1.getUint32(position$1) > 0) throw new Error('JavaScript does not support arrays, maps, or strings with length over 4294967295');
          token = dataView$1.getUint32(position$1 + 4);
        } else if (currentDecoder.int64AsNumber) {
          token = dataView$1.getUint32(position$1) * 0x100000000;
          token += dataView$1.getUint32(position$1 + 4);
        } else token = dataView$1.getBigUint64(position$1);
        position$1 += 8;
        break;
      case 0x1f:
        // indefinite length
        switch (majorType) {
          case 2: // byte string
          case 3:
            // text string
            throw new Error('Indefinite length not supported for byte or text strings');
          case 4:
            // array
            let array = [];
            let value,
              i = 0;
            while ((value = read$2()) != STOP_CODE) {
              if (i >= maxArraySize) throw new Error(`Array length exceeds ${maxArraySize}`);
              array[i++] = value;
            }
            return majorType == 4 ? array : majorType == 3 ? array.join('') : Buffer.concat(array);
          case 5:
            // map
            let key;
            if (currentDecoder.mapsAsObjects) {
              let object = {};
              let i = 0;
              if (currentDecoder.keyMap) {
                while ((key = read$2()) != STOP_CODE) {
                  if (i++ >= maxMapSize) throw new Error(`Property count exceeds ${maxMapSize}`);
                  object[safeKey(currentDecoder.decodeKey(key))] = read$2();
                }
              } else {
                while ((key = read$2()) != STOP_CODE) {
                  if (i++ >= maxMapSize) throw new Error(`Property count exceeds ${maxMapSize}`);
                  object[safeKey(key)] = read$2();
                }
              }
              return object;
            } else {
              if (restoreMapsAsObject) {
                currentDecoder.mapsAsObjects = true;
                restoreMapsAsObject = false;
              }
              let map = new Map();
              if (currentDecoder.keyMap) {
                let i = 0;
                while ((key = read$2()) != STOP_CODE) {
                  if (i++ >= maxMapSize) {
                    throw new Error(`Map size exceeds ${maxMapSize}`);
                  }
                  map.set(currentDecoder.decodeKey(key), read$2());
                }
              } else {
                let i = 0;
                while ((key = read$2()) != STOP_CODE) {
                  if (i++ >= maxMapSize) {
                    throw new Error(`Map size exceeds ${maxMapSize}`);
                  }
                  map.set(key, read$2());
                }
              }
              return map;
            }
          case 7:
            return STOP_CODE;
          default:
            throw new Error('Invalid major type for indefinite length ' + majorType);
        }
      default:
        throw new Error('Unknown token ' + token);
    }
  }
  switch (majorType) {
    case 0:
      // positive int
      return token;
    case 1:
      // negative int
      return ~token;
    case 2:
      // buffer
      return readBin(token);
    case 3:
      // string
      if (srcStringEnd >= position$1) {
        return srcString.slice(position$1 - srcStringStart, (position$1 += token) - srcStringStart);
      }
      if (srcStringEnd == 0 && srcEnd < 140 && token < 32) {
        // for small blocks, avoiding the overhead of the extract call is helpful
        let string = token < 16 ? shortStringInJS(token) : longStringInJS(token);
        if (string != null) return string;
      }
      return readFixedString(token);
    case 4:
      // array
      if (token >= maxArraySize) throw new Error(`Array length exceeds ${maxArraySize}`);
      let array = new Array(token);
      //if (currentDecoder.keyMap) for (let i = 0; i < token; i++) array[i] = currentDecoder.decodeKey(read())	
      //else 
      for (let i = 0; i < token; i++) array[i] = read$2();
      return array;
    case 5:
      // map
      if (token >= maxMapSize) throw new Error(`Map size exceeds ${maxArraySize}`);
      if (currentDecoder.mapsAsObjects) {
        let object = {};
        if (currentDecoder.keyMap) for (let i = 0; i < token; i++) object[safeKey(currentDecoder.decodeKey(read$2()))] = read$2();else for (let i = 0; i < token; i++) object[safeKey(read$2())] = read$2();
        return object;
      } else {
        if (restoreMapsAsObject) {
          currentDecoder.mapsAsObjects = true;
          restoreMapsAsObject = false;
        }
        let map = new Map();
        if (currentDecoder.keyMap) for (let i = 0; i < token; i++) map.set(currentDecoder.decodeKey(read$2()), read$2());else for (let i = 0; i < token; i++) map.set(read$2(), read$2());
        return map;
      }
    case 6:
      // extension
      if (token >= BUNDLED_STRINGS_ID) {
        let structure = currentStructures[token & 0x1fff]; // check record structures first
        // At some point we may provide an option for dynamic tag assignment with a range like token >= 8 && (token < 16 || (token > 0x80 && token < 0xc0) || (token > 0x130 && token < 0x4000))
        if (structure) {
          if (!structure.read) structure.read = createStructureReader(structure);
          return structure.read();
        }
        if (token < 0x10000) {
          if (token == RECORD_INLINE_ID) {
            // we do a special check for this so that we can keep the
            // currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)
            let length = readJustLength();
            let id = read$2();
            let structure = read$2();
            recordDefinition(id, structure);
            let object = {};
            if (currentDecoder.keyMap) for (let i = 2; i < length; i++) {
              let key = currentDecoder.decodeKey(structure[i - 2]);
              object[safeKey(key)] = read$2();
            } else for (let i = 2; i < length; i++) {
              let key = structure[i - 2];
              object[safeKey(key)] = read$2();
            }
            return object;
          } else if (token == RECORD_DEFINITIONS_ID) {
            let length = readJustLength();
            let id = read$2();
            for (let i = 2; i < length; i++) {
              recordDefinition(id++, read$2());
            }
            return read$2();
          } else if (token == BUNDLED_STRINGS_ID) {
            return readBundleExt();
          }
          if (currentDecoder.getShared) {
            loadShared();
            structure = currentStructures[token & 0x1fff];
            if (structure) {
              if (!structure.read) structure.read = createStructureReader(structure);
              return structure.read();
            }
          }
        }
      }
      let extension = currentExtensions[token];
      if (extension) {
        if (extension.handlesRead) return extension(read$2);else return extension(read$2());
      } else {
        let input = read$2();
        for (let i = 0; i < currentExtensionRanges.length; i++) {
          let value = currentExtensionRanges[i](token, input);
          if (value !== undefined) return value;
        }
        return new Tag(input, token);
      }
    case 7:
      // fixed value
      switch (token) {
        case 0x14:
          return false;
        case 0x15:
          return true;
        case 0x16:
          return null;
        case 0x17:
          return;
        // undefined
        case 0x1f:
        default:
          let packedValue = (packedValues || getPackedValues())[token];
          if (packedValue !== undefined) return packedValue;
          throw new Error('Unknown token ' + token);
      }
    default:
      // negative int
      if (isNaN(token)) {
        let error = new Error('Unexpected end of CBOR data');
        error.incomplete = true;
        throw error;
      }
      throw new Error('Unknown CBOR token ' + token);
  }
}
const validName = /^[a-zA-Z_$][a-zA-Z\d_$]*$/;
function createStructureReader(structure) {
  if (!structure) throw new Error('Structure is required in record definition');
  function readObject() {
    // get the array size from the header
    let length = src$2[position$1++];
    //let majorType = token >> 5
    length = length & 0x1f;
    if (length > 0x17) {
      switch (length) {
        case 0x18:
          length = src$2[position$1++];
          break;
        case 0x19:
          length = dataView$1.getUint16(position$1);
          position$1 += 2;
          break;
        case 0x1a:
          length = dataView$1.getUint32(position$1);
          position$1 += 4;
          break;
        default:
          throw new Error('Expected array header, but got ' + src$2[position$1 - 1]);
      }
    }
    // This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function
    let compiledReader = this.compiledReader; // first look to see if we have the fast compiled function
    while (compiledReader) {
      // we have a fast compiled object literal reader
      if (compiledReader.propertyCount === length) return compiledReader(read$2); // with the right length, so we use it
      compiledReader = compiledReader.next; // see if there is another reader with the right length
    }
    if (this.slowReads++ >= inlineObjectReadThreshold) {
      // create a fast compiled reader
      let array = this.length == length ? this : this.slice(0, length);
      compiledReader = currentDecoder.keyMap ? new Function('r', 'return {' + array.map(k => currentDecoder.decodeKey(k)).map(k => validName.test(k) ? safeKey(k) + ':r()' : '[' + JSON.stringify(k) + ']:r()').join(',') + '}') : new Function('r', 'return {' + array.map(key => validName.test(key) ? safeKey(key) + ':r()' : '[' + JSON.stringify(key) + ']:r()').join(',') + '}');
      if (this.compiledReader) compiledReader.next = this.compiledReader; // if there is an existing one, we store multiple readers as a linked list because it is usually pretty rare to have multiple readers (of different length) for the same structure
      compiledReader.propertyCount = length;
      this.compiledReader = compiledReader;
      return compiledReader(read$2);
    }
    let object = {};
    if (currentDecoder.keyMap) for (let i = 0; i < length; i++) object[safeKey(currentDecoder.decodeKey(this[i]))] = read$2();else for (let i = 0; i < length; i++) {
      object[safeKey(this[i])] = read$2();
    }
    return object;
  }
  structure.slowReads = 0;
  return readObject;
}
function safeKey(key) {
  // protect against prototype pollution
  if (typeof key === 'string') return key === '__proto__' ? '__proto_' : key;
  if (typeof key === 'number' || typeof key === 'boolean' || typeof key === 'bigint') return key.toString();
  if (key == null) return key + '';
  // protect against expensive (DoS) string conversions
  throw new Error('Invalid property name type ' + typeof key);
}
let readFixedString = readStringJS;
function readStringJS(length) {
  let result;
  if (length < 16) {
    if (result = shortStringInJS(length)) return result;
  }
  if (length > 64 && decoder) return decoder.decode(src$2.subarray(position$1, position$1 += length));
  const end = position$1 + length;
  const units = [];
  result = '';
  while (position$1 < end) {
    const byte1 = src$2[position$1++];
    if ((byte1 & 0x80) === 0) {
      // 1 byte
      units.push(byte1);
    } else if ((byte1 & 0xe0) === 0xc0) {
      // 2 bytes
      const byte2 = src$2[position$1++] & 0x3f;
      units.push((byte1 & 0x1f) << 6 | byte2);
    } else if ((byte1 & 0xf0) === 0xe0) {
      // 3 bytes
      const byte2 = src$2[position$1++] & 0x3f;
      const byte3 = src$2[position$1++] & 0x3f;
      units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 0xf8) === 0xf0) {
      // 4 bytes
      const byte2 = src$2[position$1++] & 0x3f;
      const byte3 = src$2[position$1++] & 0x3f;
      const byte4 = src$2[position$1++] & 0x3f;
      let unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;
      if (unit > 0xffff) {
        unit -= 0x10000;
        units.push(unit >>> 10 & 0x3ff | 0xd800);
        unit = 0xdc00 | unit & 0x3ff;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= 0x1000) {
      result += fromCharCode.apply(String, units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += fromCharCode.apply(String, units);
  }
  return result;
}
let fromCharCode = String.fromCharCode;
function longStringInJS(length) {
  let start = position$1;
  let bytes = new Array(length);
  for (let i = 0; i < length; i++) {
    const byte = src$2[position$1++];
    if ((byte & 0x80) > 0) {
      position$1 = start;
      return;
    }
    bytes[i] = byte;
  }
  return fromCharCode.apply(String, bytes);
}
function shortStringInJS(length) {
  if (length < 4) {
    if (length < 2) {
      if (length === 0) return '';else {
        let a = src$2[position$1++];
        if ((a & 0x80) > 1) {
          position$1 -= 1;
          return;
        }
        return fromCharCode(a);
      }
    } else {
      let a = src$2[position$1++];
      let b = src$2[position$1++];
      if ((a & 0x80) > 0 || (b & 0x80) > 0) {
        position$1 -= 2;
        return;
      }
      if (length < 3) return fromCharCode(a, b);
      let c = src$2[position$1++];
      if ((c & 0x80) > 0) {
        position$1 -= 3;
        return;
      }
      return fromCharCode(a, b, c);
    }
  } else {
    let a = src$2[position$1++];
    let b = src$2[position$1++];
    let c = src$2[position$1++];
    let d = src$2[position$1++];
    if ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {
      position$1 -= 4;
      return;
    }
    if (length < 6) {
      if (length === 4) return fromCharCode(a, b, c, d);else {
        let e = src$2[position$1++];
        if ((e & 0x80) > 0) {
          position$1 -= 5;
          return;
        }
        return fromCharCode(a, b, c, d, e);
      }
    } else if (length < 8) {
      let e = src$2[position$1++];
      let f = src$2[position$1++];
      if ((e & 0x80) > 0 || (f & 0x80) > 0) {
        position$1 -= 6;
        return;
      }
      if (length < 7) return fromCharCode(a, b, c, d, e, f);
      let g = src$2[position$1++];
      if ((g & 0x80) > 0) {
        position$1 -= 7;
        return;
      }
      return fromCharCode(a, b, c, d, e, f, g);
    } else {
      let e = src$2[position$1++];
      let f = src$2[position$1++];
      let g = src$2[position$1++];
      let h = src$2[position$1++];
      if ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {
        position$1 -= 8;
        return;
      }
      if (length < 10) {
        if (length === 8) return fromCharCode(a, b, c, d, e, f, g, h);else {
          let i = src$2[position$1++];
          if ((i & 0x80) > 0) {
            position$1 -= 9;
            return;
          }
          return fromCharCode(a, b, c, d, e, f, g, h, i);
        }
      } else if (length < 12) {
        let i = src$2[position$1++];
        let j = src$2[position$1++];
        if ((i & 0x80) > 0 || (j & 0x80) > 0) {
          position$1 -= 10;
          return;
        }
        if (length < 11) return fromCharCode(a, b, c, d, e, f, g, h, i, j);
        let k = src$2[position$1++];
        if ((k & 0x80) > 0) {
          position$1 -= 11;
          return;
        }
        return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);
      } else {
        let i = src$2[position$1++];
        let j = src$2[position$1++];
        let k = src$2[position$1++];
        let l = src$2[position$1++];
        if ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {
          position$1 -= 12;
          return;
        }
        if (length < 14) {
          if (length === 12) return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);else {
            let m = src$2[position$1++];
            if ((m & 0x80) > 0) {
              position$1 -= 13;
              return;
            }
            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);
          }
        } else {
          let m = src$2[position$1++];
          let n = src$2[position$1++];
          if ((m & 0x80) > 0 || (n & 0x80) > 0) {
            position$1 -= 14;
            return;
          }
          if (length < 15) return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
          let o = src$2[position$1++];
          if ((o & 0x80) > 0) {
            position$1 -= 15;
            return;
          }
          return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
        }
      }
    }
  }
}
function readBin(length) {
  return currentDecoder.copyBuffers ?
  // specifically use the copying slice (not the node one)
  Uint8Array.prototype.slice.call(src$2, position$1, position$1 += length) : src$2.subarray(position$1, position$1 += length);
}
let f32Array = new Float32Array(1);
let u8Array = new Uint8Array(f32Array.buffer, 0, 4);
function getFloat16() {
  let byte0 = src$2[position$1++];
  let byte1 = src$2[position$1++];
  let exponent = (byte0 & 0x7f) >> 2;
  if (exponent === 0x1f) {
    // specials
    if (byte1 || byte0 & 3) return NaN;
    return byte0 & 0x80 ? -Infinity : Infinity;
  }
  if (exponent === 0) {
    // sub-normals
    // significand with 10 fractional bits and divided by 2^14
    let abs = ((byte0 & 3) << 8 | byte1) / (1 << 24);
    return byte0 & 0x80 ? -abs : abs;
  }
  u8Array[3] = byte0 & 0x80 |
  // sign bit
  (exponent >> 1) + 56; // 4 of 5 of the exponent bits, re-offset-ed
  u8Array[2] = (byte0 & 7) << 5 |
  // last exponent bit and first two mantissa bits
  byte1 >> 3; // next 5 bits of mantissa
  u8Array[1] = byte1 << 5; // last three bits of mantissa
  u8Array[0] = 0;
  return f32Array[0];
}
new Array(4096);
class Tag {
  constructor(value, tag) {
    this.value = value;
    this.tag = tag;
  }
}
currentExtensions[0] = dateString => {
  // string date extension
  return new Date(dateString);
};
currentExtensions[1] = epochSec => {
  // numeric date extension
  return new Date(Math.round(epochSec * 1000));
};
currentExtensions[2] = buffer => {
  // bigint extension
  let value = BigInt(0);
  for (let i = 0, l = buffer.byteLength; i < l; i++) {
    value = BigInt(buffer[i]) + (value << BigInt(8));
  }
  return value;
};
currentExtensions[3] = buffer => {
  // negative bigint extension
  return BigInt(-1) - currentExtensions[2](buffer);
};
currentExtensions[4] = fraction => {
  // best to reparse to maintain accuracy
  return +(fraction[1] + 'e' + fraction[0]);
};
currentExtensions[5] = fraction => {
  // probably not sufficiently accurate
  return fraction[1] * Math.exp(fraction[0] * Math.log(2));
};

// the registration of the record definition extension
const recordDefinition = (id, structure) => {
  id = id - 0xe000;
  let existingStructure = currentStructures[id];
  if (existingStructure && existingStructure.isShared) {
    (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;
  }
  currentStructures[id] = structure;
  structure.read = createStructureReader(structure);
};
currentExtensions[LEGACY_RECORD_INLINE_ID] = data => {
  let length = data.length;
  let structure = data[1];
  recordDefinition(data[0], structure);
  let object = {};
  for (let i = 2; i < length; i++) {
    let key = structure[i - 2];
    object[safeKey(key)] = data[i];
  }
  return object;
};
currentExtensions[14] = value => {
  if (bundledStrings$1) return bundledStrings$1[0].slice(bundledStrings$1.position0, bundledStrings$1.position0 += value);
  return new Tag(value, 14);
};
currentExtensions[15] = value => {
  if (bundledStrings$1) return bundledStrings$1[1].slice(bundledStrings$1.position1, bundledStrings$1.position1 += value);
  return new Tag(value, 15);
};
let glbl = {
  Error,
  RegExp
};
currentExtensions[27] = data => {
  // http://cbor.schmorp.de/generic-object
  return (glbl[data[0]] || Error)(data[1], data[2]);
};
const packedTable = read => {
  if (src$2[position$1++] != 0x84) {
    let error = new Error('Packed values structure must be followed by a 4 element array');
    if (src$2.length < position$1) error.incomplete = true;
    throw error;
  }
  let newPackedValues = read(); // packed values
  if (!newPackedValues || !newPackedValues.length) {
    let error = new Error('Packed values structure must be followed by a 4 element array');
    error.incomplete = true;
    throw error;
  }
  packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;
  packedValues.prefixes = read();
  packedValues.suffixes = read();
  return read(); // read the rump
};
packedTable.handlesRead = true;
currentExtensions[51] = packedTable;
currentExtensions[PACKED_REFERENCE_TAG_ID] = data => {
  // packed reference
  if (!packedValues) {
    if (currentDecoder.getShared) loadShared();else return new Tag(data, PACKED_REFERENCE_TAG_ID);
  }
  if (typeof data == 'number') return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];
  let error = new Error('No support for non-integer packed references yet');
  if (data === undefined) error.incomplete = true;
  throw error;
};

// The following code is an incomplete implementation of http://cbor.schmorp.de/stringref
// the real thing would need to implemennt more logic to populate the stringRefs table and
// maintain a stack of stringRef "namespaces".
//
// currentExtensions[25] = (id) => {
// 	return stringRefs[id]
// }
// currentExtensions[256] = (read) => {
// 	stringRefs = []
// 	try {
// 		return read()
// 	} finally {
// 		stringRefs = null
// 	}
// }
// currentExtensions[256].handlesRead = true

currentExtensions[28] = read => {
  // shareable http://cbor.schmorp.de/value-sharing (for structured clones)
  if (!referenceMap) {
    referenceMap = new Map();
    referenceMap.id = 0;
  }
  let id = referenceMap.id++;
  let startingPosition = position$1;
  let token = src$2[position$1];
  let target;
  // TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read
  // ahead past references to record structure definitions
  if (token >> 5 == 4) target = [];else target = {};
  let refEntry = {
    target
  }; // a placeholder object
  referenceMap.set(id, refEntry);
  let targetProperties = read(); // read the next value as the target object to id
  if (refEntry.used) {
    // there is a cycle, so we have to assign properties to original target
    if (Object.getPrototypeOf(target) !== Object.getPrototypeOf(targetProperties)) {
      // this means that the returned target does not match the targetProperties, so we need rerun the read to
      // have the correctly create instance be assigned as a reference, then we do the copy the properties back to the
      // target
      // reset the position so that the read can be repeated
      position$1 = startingPosition;
      // the returned instance is our new target for references
      target = targetProperties;
      referenceMap.set(id, {
        target
      });
      targetProperties = read();
    }
    return Object.assign(target, targetProperties);
  }
  refEntry.target = targetProperties; // the placeholder wasn't used, replace with the deserialized one
  return targetProperties; // no cycle, can just use the returned read object
};
currentExtensions[28].handlesRead = true;
currentExtensions[29] = id => {
  // sharedref http://cbor.schmorp.de/value-sharing (for structured clones)
  let refEntry = referenceMap.get(id);
  refEntry.used = true;
  return refEntry.target;
};
currentExtensions[258] = array => new Set(array); // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md
(currentExtensions[259] = read => {
  // https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec
  // for decoding as a standard Map
  if (currentDecoder.mapsAsObjects) {
    currentDecoder.mapsAsObjects = false;
    restoreMapsAsObject = true;
  }
  return read();
}).handlesRead = true;
function combine(a, b) {
  if (typeof a === 'string') return a + b;
  if (a instanceof Array) return a.concat(b);
  return Object.assign({}, a, b);
}
function getPackedValues() {
  if (!packedValues) {
    if (currentDecoder.getShared) loadShared();else throw new Error('No packed values available');
  }
  return packedValues;
}
const SHARED_DATA_TAG_ID = 0x53687264; // ascii 'Shrd'
currentExtensionRanges.push((tag, input) => {
  if (tag >= 225 && tag <= 255) return combine(getPackedValues().prefixes[tag - 224], input);
  if (tag >= 28704 && tag <= 32767) return combine(getPackedValues().prefixes[tag - 28672], input);
  if (tag >= 1879052288 && tag <= 2147483647) return combine(getPackedValues().prefixes[tag - 1879048192], input);
  if (tag >= 216 && tag <= 223) return combine(input, getPackedValues().suffixes[tag - 216]);
  if (tag >= 27647 && tag <= 28671) return combine(input, getPackedValues().suffixes[tag - 27639]);
  if (tag >= 1811940352 && tag <= 1879048191) return combine(input, getPackedValues().suffixes[tag - 1811939328]);
  if (tag == SHARED_DATA_TAG_ID) {
    // we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)
    return {
      packedValues: packedValues,
      structures: currentStructures.slice(0),
      version: input
    };
  }
  if (tag == 55799)
    // self-descriptive CBOR tag, just return input value
    return input;
});
const isLittleEndianMachine$1 = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;
const typedArrays = [Uint8Array, Uint8ClampedArray, Uint16Array, Uint32Array, typeof BigUint64Array == 'undefined' ? {
  name: 'BigUint64Array'
} : BigUint64Array, Int8Array, Int16Array, Int32Array, typeof BigInt64Array == 'undefined' ? {
  name: 'BigInt64Array'
} : BigInt64Array, Float32Array, Float64Array];
const typedArrayTags = [64, 68, 69, 70, 71, 72, 77, 78, 79, 85, 86];
for (let i = 0; i < typedArrays.length; i++) {
  registerTypedArray(typedArrays[i], typedArrayTags[i]);
}
function registerTypedArray(TypedArray, tag) {
  let dvMethod = 'get' + TypedArray.name.slice(0, -5);
  let bytesPerElement;
  if (typeof TypedArray === 'function') bytesPerElement = TypedArray.BYTES_PER_ELEMENT;else TypedArray = null;
  for (let littleEndian = 0; littleEndian < 2; littleEndian++) {
    if (!littleEndian && bytesPerElement == 1) continue;
    let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : bytesPerElement == 8 ? 3 : 0;
    currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine$1 ? buffer => {
      if (!TypedArray) throw new Error('Could not find typed array for code ' + tag);
      if (!currentDecoder.copyBuffers) {
        // try provide a direct view, but will only work if we are byte-aligned
        if (bytesPerElement === 1 || bytesPerElement === 2 && !(buffer.byteOffset & 1) || bytesPerElement === 4 && !(buffer.byteOffset & 3) || bytesPerElement === 8 && !(buffer.byteOffset & 7)) return new TypedArray(buffer.buffer, buffer.byteOffset, buffer.byteLength >> sizeShift);
      }
      // we have to slice/copy here to get a new ArrayBuffer, if we are not word/byte aligned
      return new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer);
    } : buffer => {
      if (!TypedArray) throw new Error('Could not find typed array for code ' + tag);
      let dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
      let elements = buffer.length >> sizeShift;
      let ta = new TypedArray(elements);
      let method = dv[dvMethod];
      for (let i = 0; i < elements; i++) {
        ta[i] = method.call(dv, i << sizeShift, littleEndian);
      }
      return ta;
    };
  }
}
function readBundleExt() {
  let length = readJustLength();
  let bundlePosition = position$1 + read$2();
  for (let i = 2; i < length; i++) {
    // skip past bundles that were already read
    let bundleLength = readJustLength(); // this will increment position, so must add to position afterwards
    position$1 += bundleLength;
  }
  let dataPosition = position$1;
  position$1 = bundlePosition;
  bundledStrings$1 = [readStringJS(readJustLength()), readStringJS(readJustLength())];
  bundledStrings$1.position0 = 0;
  bundledStrings$1.position1 = 0;
  bundledStrings$1.postBundlePosition = position$1;
  position$1 = dataPosition;
  return read$2();
}
function readJustLength() {
  let token = src$2[position$1++] & 0x1f;
  if (token > 0x17) {
    switch (token) {
      case 0x18:
        token = src$2[position$1++];
        break;
      case 0x19:
        token = dataView$1.getUint16(position$1);
        position$1 += 2;
        break;
      case 0x1a:
        token = dataView$1.getUint32(position$1);
        position$1 += 4;
        break;
    }
  }
  return token;
}
function loadShared() {
  if (currentDecoder.getShared) {
    let sharedData = saveState(() => {
      // save the state in case getShared modifies our buffer
      src$2 = null;
      return currentDecoder.getShared();
    }) || {};
    let updatedStructures = sharedData.structures || [];
    currentDecoder.sharedVersion = sharedData.version;
    packedValues = currentDecoder.sharedValues = sharedData.packedValues;
    if (currentStructures === true) currentDecoder.structures = currentStructures = updatedStructures;else currentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures));
  }
}
function saveState(callback) {
  let savedSrcEnd = srcEnd;
  let savedPosition = position$1;
  let savedSrcStringStart = srcStringStart;
  let savedSrcStringEnd = srcStringEnd;
  let savedSrcString = srcString;
  let savedReferenceMap = referenceMap;
  let savedBundledStrings = bundledStrings$1;

  // TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)
  let savedSrc = new Uint8Array(src$2.slice(0, srcEnd)); // we copy the data in case it changes while external data is processed
  let savedStructures = currentStructures;
  let savedDecoder = currentDecoder;
  let savedSequentialMode = sequentialMode;
  let value = callback();
  srcEnd = savedSrcEnd;
  position$1 = savedPosition;
  srcStringStart = savedSrcStringStart;
  srcStringEnd = savedSrcStringEnd;
  srcString = savedSrcString;
  referenceMap = savedReferenceMap;
  bundledStrings$1 = savedBundledStrings;
  src$2 = savedSrc;
  sequentialMode = savedSequentialMode;
  currentStructures = savedStructures;
  currentDecoder = savedDecoder;
  dataView$1 = new DataView(src$2.buffer, src$2.byteOffset, src$2.byteLength);
  return value;
}
function clearSource() {
  src$2 = null;
  referenceMap = null;
  currentStructures = null;
}
function addExtension$1(extension) {
  currentExtensions[extension.tag] = extension.decode;
}
const mult10 = new Array(147); // this is a table matching binary exponents to the multiplier to determine significant digit rounding
for (let i = 0; i < 256; i++) {
  mult10[i] = +('1e' + Math.floor(45.15 - i * 0.30103));
}
let defaultDecoder = new Decoder$2({
  useRecords: false
});
const decode$b = defaultDecoder.decode;
const decodeMultiple = defaultDecoder.decodeMultiple;

let textEncoder$1;
try {
  textEncoder$1 = new TextEncoder();
} catch (error) {}
let extensions, extensionClasses;
const Buffer$1 = typeof globalThis === 'object' && globalThis.Buffer;
const hasNodeBuffer = typeof Buffer$1 !== 'undefined';
const ByteArrayAllocate = hasNodeBuffer ? Buffer$1.allocUnsafeSlow : Uint8Array;
const ByteArray = hasNodeBuffer ? Buffer$1 : Uint8Array;
const MAX_STRUCTURES = 0x100;
const MAX_BUFFER_SIZE = hasNodeBuffer ? 0x100000000 : 0x7fd00000;
let throwOnIterable;
let target;
let targetView;
let position = 0;
let safeEnd;
let bundledStrings = null;
const MAX_BUNDLE_SIZE = 0xf000;
const hasNonLatin = /[\u0080-\uFFFF]/;
const RECORD_SYMBOL = Symbol('record-id');
let Encoder$2 = class Encoder extends Decoder$2 {
  constructor(options) {
    super(options);
    this.offset = 0;
    let start;
    let sharedStructures;
    let hasSharedUpdate;
    let structures;
    let referenceMap;
    options = options || {};
    let encodeUtf8 = ByteArray.prototype.utf8Write ? function (string, position, maxBytes) {
      return target.utf8Write(string, position, maxBytes);
    } : textEncoder$1 && textEncoder$1.encodeInto ? function (string, position) {
      return textEncoder$1.encodeInto(string, target.subarray(position)).written;
    } : false;
    let encoder = this;
    let hasSharedStructures = options.structures || options.saveStructures;
    let maxSharedStructures = options.maxSharedStructures;
    if (maxSharedStructures == null) maxSharedStructures = hasSharedStructures ? 128 : 0;
    if (maxSharedStructures > 8190) throw new Error('Maximum maxSharedStructure is 8190');
    let isSequential = options.sequential;
    if (isSequential) {
      maxSharedStructures = 0;
    }
    if (!this.structures) this.structures = [];
    if (this.saveStructures) this.saveShared = this.saveStructures;
    let samplingPackedValues,
      packedObjectMap,
      sharedValues = options.sharedValues;
    let sharedPackedObjectMap;
    if (sharedValues) {
      sharedPackedObjectMap = Object.create(null);
      for (let i = 0, l = sharedValues.length; i < l; i++) {
        sharedPackedObjectMap[sharedValues[i]] = i;
      }
    }
    let recordIdsToRemove = [];
    let transitionsCount = 0;
    let serializationsSinceTransitionRebuild = 0;
    this.mapEncode = function (value, encodeOptions) {
      // Experimental support for premapping keys using _keyMap instad of keyMap - not optiimised yet)
      if (this._keyMap && !this._mapped) {
        //console.log('encoding ', value)
        switch (value.constructor.name) {
          case 'Array':
            value = value.map(r => this.encodeKeys(r));
            break;
          //case 'Map': 
          //	value = this.encodeKeys(value)
          //	break
        }
        //this._mapped = true
      }
      return this.encode(value, encodeOptions);
    };
    this.encode = function (value, encodeOptions) {
      if (!target) {
        target = new ByteArrayAllocate(8192);
        targetView = new DataView(target.buffer, 0, 8192);
        position = 0;
      }
      safeEnd = target.length - 10;
      if (safeEnd - position < 0x800) {
        // don't start too close to the end, 
        target = new ByteArrayAllocate(target.length);
        targetView = new DataView(target.buffer, 0, target.length);
        safeEnd = target.length - 10;
        position = 0;
      } else if (encodeOptions === REUSE_BUFFER_MODE) position = position + 7 & 0x7ffffff8; // Word align to make any future copying of this buffer faster
      start = position;
      if (encoder.useSelfDescribedHeader) {
        targetView.setUint32(position, 0xd9d9f700); // tag two byte, then self-descriptive tag
        position += 3;
      }
      referenceMap = encoder.structuredClone ? new Map() : null;
      if (encoder.bundleStrings && typeof value !== 'string') {
        bundledStrings = [];
        bundledStrings.size = Infinity; // force a new bundle start on first string
      } else bundledStrings = null;
      sharedStructures = encoder.structures;
      if (sharedStructures) {
        if (sharedStructures.uninitialized) {
          let sharedData = encoder.getShared() || {};
          encoder.structures = sharedStructures = sharedData.structures || [];
          encoder.sharedVersion = sharedData.version;
          let sharedValues = encoder.sharedValues = sharedData.packedValues;
          if (sharedValues) {
            sharedPackedObjectMap = {};
            for (let i = 0, l = sharedValues.length; i < l; i++) sharedPackedObjectMap[sharedValues[i]] = i;
          }
        }
        let sharedStructuresLength = sharedStructures.length;
        if (sharedStructuresLength > maxSharedStructures && !isSequential) sharedStructuresLength = maxSharedStructures;
        if (!sharedStructures.transitions) {
          // rebuild our structure transitions
          sharedStructures.transitions = Object.create(null);
          for (let i = 0; i < sharedStructuresLength; i++) {
            let keys = sharedStructures[i];
            //console.log('shared struct keys:', keys)
            if (!keys) continue;
            let nextTransition,
              transition = sharedStructures.transitions;
            for (let j = 0, l = keys.length; j < l; j++) {
              if (transition[RECORD_SYMBOL] === undefined) transition[RECORD_SYMBOL] = i;
              let key = keys[j];
              nextTransition = transition[key];
              if (!nextTransition) {
                nextTransition = transition[key] = Object.create(null);
              }
              transition = nextTransition;
            }
            transition[RECORD_SYMBOL] = i | 0x100000;
          }
        }
        if (!isSequential) sharedStructures.nextId = sharedStructuresLength;
      }
      if (hasSharedUpdate) hasSharedUpdate = false;
      structures = sharedStructures || [];
      packedObjectMap = sharedPackedObjectMap;
      if (options.pack) {
        let packedValues = new Map();
        packedValues.values = [];
        packedValues.encoder = encoder;
        packedValues.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap ? 16 : Infinity);
        packedValues.objectMap = sharedPackedObjectMap || false;
        packedValues.samplingPackedValues = samplingPackedValues;
        findRepetitiveStrings(value, packedValues);
        if (packedValues.values.length > 0) {
          target[position++] = 0xd8; // one-byte tag
          target[position++] = 51; // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt
          writeArrayHeader(4);
          let valuesArray = packedValues.values;
          encode(valuesArray);
          writeArrayHeader(0); // prefixes
          writeArrayHeader(0); // suffixes
          packedObjectMap = Object.create(sharedPackedObjectMap || null);
          for (let i = 0, l = valuesArray.length; i < l; i++) {
            packedObjectMap[valuesArray[i]] = i;
          }
        }
      }
      throwOnIterable = encodeOptions & THROW_ON_ITERABLE;
      try {
        if (throwOnIterable) return;
        encode(value);
        if (bundledStrings) {
          writeBundles(start, encode);
        }
        encoder.offset = position; // update the offset so next serialization doesn't write over our buffer, but can continue writing to same buffer sequentially
        if (referenceMap && referenceMap.idsToInsert) {
          position += referenceMap.idsToInsert.length * 2;
          if (position > safeEnd) makeRoom(position);
          encoder.offset = position;
          let serialized = insertIds(target.subarray(start, position), referenceMap.idsToInsert);
          referenceMap = null;
          return serialized;
        }
        if (encodeOptions & REUSE_BUFFER_MODE) {
          target.start = start;
          target.end = position;
          return target;
        }
        return target.subarray(start, position); // position can change if we call encode again in saveShared, so we get the buffer now
      } finally {
        if (sharedStructures) {
          if (serializationsSinceTransitionRebuild < 10) serializationsSinceTransitionRebuild++;
          if (sharedStructures.length > maxSharedStructures) sharedStructures.length = maxSharedStructures;
          if (transitionsCount > 10000) {
            // force a rebuild occasionally after a lot of transitions so it can get cleaned up
            sharedStructures.transitions = null;
            serializationsSinceTransitionRebuild = 0;
            transitionsCount = 0;
            if (recordIdsToRemove.length > 0) recordIdsToRemove = [];
          } else if (recordIdsToRemove.length > 0 && !isSequential) {
            for (let i = 0, l = recordIdsToRemove.length; i < l; i++) {
              recordIdsToRemove[i][RECORD_SYMBOL] = undefined;
            }
            recordIdsToRemove = [];
            //sharedStructures.nextId = maxSharedStructures
          }
        }
        if (hasSharedUpdate && encoder.saveShared) {
          if (encoder.structures.length > maxSharedStructures) {
            encoder.structures = encoder.structures.slice(0, maxSharedStructures);
          }
          // we can't rely on start/end with REUSE_BUFFER_MODE since they will (probably) change when we save
          let returnBuffer = target.subarray(start, position);
          if (encoder.updateSharedData() === false) return encoder.encode(value); // re-encode if it fails
          return returnBuffer;
        }
        if (encodeOptions & RESET_BUFFER_MODE) position = start;
      }
    };
    this.findCommonStringsToPack = () => {
      samplingPackedValues = new Map();
      if (!sharedPackedObjectMap) sharedPackedObjectMap = Object.create(null);
      return options => {
        let threshold = options && options.threshold || 4;
        let position = this.pack ? options.maxPrivatePackedValues || 16 : 0;
        if (!sharedValues) sharedValues = this.sharedValues = [];
        for (let [key, status] of samplingPackedValues) {
          if (status.count > threshold) {
            sharedPackedObjectMap[key] = position++;
            sharedValues.push(key);
            hasSharedUpdate = true;
          }
        }
        while (this.saveShared && this.updateSharedData() === false) {}
        samplingPackedValues = null;
      };
    };
    const encode = value => {
      if (position > safeEnd) target = makeRoom(position);
      var type = typeof value;
      var length;
      if (type === 'string') {
        if (packedObjectMap) {
          let packedPosition = packedObjectMap[value];
          if (packedPosition >= 0) {
            if (packedPosition < 16) target[position++] = packedPosition + 0xe0; // simple values, defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt
            else {
              target[position++] = 0xc6; // tag 6 defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt
              if (packedPosition & 1) encode(15 - packedPosition >> 1);else encode(packedPosition - 16 >> 1);
            }
            return;
            /*						} else if (packedStatus.serializationId != serializationId) {
            							packedStatus.serializationId = serializationId
            							packedStatus.count = 1
            							if (options.sharedPack) {
            								let sharedCount = packedStatus.sharedCount = (packedStatus.sharedCount || 0) + 1
            								if (shareCount > (options.sharedPack.threshold || 5)) {
            									let sharedPosition = packedStatus.position = packedStatus.nextSharedPosition
            									hasSharedUpdate = true
            									if (sharedPosition < 16)
            										target[position++] = sharedPosition + 0xc0
            
            								}
            							}
            						} // else any in-doc incrementation?*/
          } else if (samplingPackedValues && !options.pack) {
            let status = samplingPackedValues.get(value);
            if (status) status.count++;else samplingPackedValues.set(value, {
              count: 1
            });
          }
        }
        let strLength = value.length;
        if (bundledStrings && strLength >= 4 && strLength < 0x400) {
          if ((bundledStrings.size += strLength) > MAX_BUNDLE_SIZE) {
            let extStart;
            let maxBytes = (bundledStrings[0] ? bundledStrings[0].length * 3 + bundledStrings[1].length : 0) + 10;
            if (position + maxBytes > safeEnd) target = makeRoom(position + maxBytes);
            target[position++] = 0xd9; // tag 16-bit
            target[position++] = 0xdf; // tag 0xdff9
            target[position++] = 0xf9;
            // TODO: If we only have one bundle with any string data, only write one string bundle
            target[position++] = bundledStrings.position ? 0x84 : 0x82; // array of 4 or 2 elements depending on if we write bundles
            target[position++] = 0x1a; // 32-bit unsigned int
            extStart = position - start;
            position += 4; // reserve for writing bundle reference
            if (bundledStrings.position) {
              writeBundles(start, encode); // write the last bundles
            }
            bundledStrings = ['', '']; // create new ones
            bundledStrings.size = 0;
            bundledStrings.position = extStart;
          }
          let twoByte = hasNonLatin.test(value);
          bundledStrings[twoByte ? 0 : 1] += value;
          target[position++] = twoByte ? 0xce : 0xcf;
          encode(strLength);
          return;
        }
        let headerSize;
        // first we estimate the header size, so we can write to the correct location
        if (strLength < 0x20) {
          headerSize = 1;
        } else if (strLength < 0x100) {
          headerSize = 2;
        } else if (strLength < 0x10000) {
          headerSize = 3;
        } else {
          headerSize = 5;
        }
        let maxBytes = strLength * 3;
        if (position + maxBytes > safeEnd) target = makeRoom(position + maxBytes);
        if (strLength < 0x40 || !encodeUtf8) {
          let i,
            c1,
            c2,
            strPosition = position + headerSize;
          for (i = 0; i < strLength; i++) {
            c1 = value.charCodeAt(i);
            if (c1 < 0x80) {
              target[strPosition++] = c1;
            } else if (c1 < 0x800) {
              target[strPosition++] = c1 >> 6 | 0xc0;
              target[strPosition++] = c1 & 0x3f | 0x80;
            } else if ((c1 & 0xfc00) === 0xd800 && ((c2 = value.charCodeAt(i + 1)) & 0xfc00) === 0xdc00) {
              c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff);
              i++;
              target[strPosition++] = c1 >> 18 | 0xf0;
              target[strPosition++] = c1 >> 12 & 0x3f | 0x80;
              target[strPosition++] = c1 >> 6 & 0x3f | 0x80;
              target[strPosition++] = c1 & 0x3f | 0x80;
            } else {
              target[strPosition++] = c1 >> 12 | 0xe0;
              target[strPosition++] = c1 >> 6 & 0x3f | 0x80;
              target[strPosition++] = c1 & 0x3f | 0x80;
            }
          }
          length = strPosition - position - headerSize;
        } else {
          length = encodeUtf8(value, position + headerSize, maxBytes);
        }
        if (length < 0x18) {
          target[position++] = 0x60 | length;
        } else if (length < 0x100) {
          if (headerSize < 2) {
            target.copyWithin(position + 2, position + 1, position + 1 + length);
          }
          target[position++] = 0x78;
          target[position++] = length;
        } else if (length < 0x10000) {
          if (headerSize < 3) {
            target.copyWithin(position + 3, position + 2, position + 2 + length);
          }
          target[position++] = 0x79;
          target[position++] = length >> 8;
          target[position++] = length & 0xff;
        } else {
          if (headerSize < 5) {
            target.copyWithin(position + 5, position + 3, position + 3 + length);
          }
          target[position++] = 0x7a;
          targetView.setUint32(position, length);
          position += 4;
        }
        position += length;
      } else if (type === 'number') {
        if (!this.alwaysUseFloat && value >>> 0 === value) {
          // positive integer, 32-bit or less
          // positive uint
          if (value < 0x18) {
            target[position++] = value;
          } else if (value < 0x100) {
            target[position++] = 0x18;
            target[position++] = value;
          } else if (value < 0x10000) {
            target[position++] = 0x19;
            target[position++] = value >> 8;
            target[position++] = value & 0xff;
          } else {
            target[position++] = 0x1a;
            targetView.setUint32(position, value);
            position += 4;
          }
        } else if (!this.alwaysUseFloat && value >> 0 === value) {
          // negative integer
          if (value >= -24) {
            target[position++] = 0x1f - value;
          } else if (value >= -256) {
            target[position++] = 0x38;
            target[position++] = ~value;
          } else if (value >= -65536) {
            target[position++] = 0x39;
            targetView.setUint16(position, ~value);
            position += 2;
          } else {
            target[position++] = 0x3a;
            targetView.setUint32(position, ~value);
            position += 4;
          }
        } else {
          let useFloat32;
          if ((useFloat32 = this.useFloat32) > 0 && value < 0x100000000 && value >= -2147483648) {
            target[position++] = 0xfa;
            targetView.setFloat32(position, value);
            let xShifted;
            if (useFloat32 < 4 ||
            // this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
            (xShifted = value * mult10[(target[position] & 0x7f) << 1 | target[position + 1] >> 7]) >> 0 === xShifted) {
              position += 4;
              return;
            } else position--; // move back into position for writing a double
          }
          target[position++] = 0xfb;
          targetView.setFloat64(position, value);
          position += 8;
        }
      } else if (type === 'object') {
        if (!value) target[position++] = 0xf6;else {
          if (referenceMap) {
            let referee = referenceMap.get(value);
            if (referee) {
              target[position++] = 0xd8;
              target[position++] = 29; // http://cbor.schmorp.de/value-sharing
              target[position++] = 0x19; // 16-bit uint
              if (!referee.references) {
                let idsToInsert = referenceMap.idsToInsert || (referenceMap.idsToInsert = []);
                referee.references = [];
                idsToInsert.push(referee);
              }
              referee.references.push(position - start);
              position += 2; // TODO: also support 32-bit
              return;
            } else referenceMap.set(value, {
              offset: position - start
            });
          }
          let constructor = value.constructor;
          if (constructor === Object) {
            writeObject(value);
          } else if (constructor === Array) {
            length = value.length;
            if (length < 0x18) {
              target[position++] = 0x80 | length;
            } else {
              writeArrayHeader(length);
            }
            for (let i = 0; i < length; i++) {
              encode(value[i]);
            }
          } else if (constructor === Map) {
            if (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {
              // use Tag 259 (https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec--explicit-maps.md) for maps if the user wants it that way
              target[position++] = 0xd9;
              target[position++] = 1;
              target[position++] = 3;
            }
            length = value.size;
            if (length < 0x18) {
              target[position++] = 0xa0 | length;
            } else if (length < 0x100) {
              target[position++] = 0xb8;
              target[position++] = length;
            } else if (length < 0x10000) {
              target[position++] = 0xb9;
              target[position++] = length >> 8;
              target[position++] = length & 0xff;
            } else {
              target[position++] = 0xba;
              targetView.setUint32(position, length);
              position += 4;
            }
            if (encoder.keyMap) {
              for (let [key, entryValue] of value) {
                encode(encoder.encodeKey(key));
                encode(entryValue);
              }
            } else {
              for (let [key, entryValue] of value) {
                encode(key);
                encode(entryValue);
              }
            }
          } else {
            for (let i = 0, l = extensions.length; i < l; i++) {
              let extensionClass = extensionClasses[i];
              if (value instanceof extensionClass) {
                let extension = extensions[i];
                let tag = extension.tag;
                if (tag == undefined) tag = extension.getTag && extension.getTag.call(this, value);
                if (tag < 0x18) {
                  target[position++] = 0xc0 | tag;
                } else if (tag < 0x100) {
                  target[position++] = 0xd8;
                  target[position++] = tag;
                } else if (tag < 0x10000) {
                  target[position++] = 0xd9;
                  target[position++] = tag >> 8;
                  target[position++] = tag & 0xff;
                } else if (tag > -1) {
                  target[position++] = 0xda;
                  targetView.setUint32(position, tag);
                  position += 4;
                } // else undefined, don't write tag
                extension.encode.call(this, value, encode, makeRoom);
                return;
              }
            }
            if (value[Symbol.iterator]) {
              if (throwOnIterable) {
                let error = new Error('Iterable should be serialized as iterator');
                error.iteratorNotHandled = true;
                throw error;
              }
              target[position++] = 0x9f; // indefinite length array
              for (let entry of value) {
                encode(entry);
              }
              target[position++] = 0xff; // stop-code
              return;
            }
            if (value[Symbol.asyncIterator] || isBlob(value)) {
              let error = new Error('Iterable/blob should be serialized as iterator');
              error.iteratorNotHandled = true;
              throw error;
            }
            if (this.useToJSON && value.toJSON) {
              const json = value.toJSON();
              // if for some reason value.toJSON returns itself it'll loop forever
              if (json !== value) return encode(json);
            }

            // no extension found, write as a plain object
            writeObject(value);
          }
        }
      } else if (type === 'boolean') {
        target[position++] = value ? 0xf5 : 0xf4;
      } else if (type === 'bigint') {
        if (value < BigInt(1) << BigInt(64) && value >= 0) {
          // use an unsigned int as long as it fits
          target[position++] = 0x1b;
          targetView.setBigUint64(position, value);
        } else if (value > -(BigInt(1) << BigInt(64)) && value < 0) {
          // if we can fit an unsigned int, use that
          target[position++] = 0x3b;
          targetView.setBigUint64(position, -value - BigInt(1));
        } else {
          // overflow
          if (this.largeBigIntToFloat) {
            target[position++] = 0xfb;
            targetView.setFloat64(position, Number(value));
          } else {
            if (value >= BigInt(0)) target[position++] = 0xc2; // tag 2
            else {
              target[position++] = 0xc3; // tag 2
              value = BigInt(-1) - value;
            }
            let bytes = [];
            while (value) {
              bytes.push(Number(value & BigInt(0xff)));
              value >>= BigInt(8);
            }
            writeBuffer(new Uint8Array(bytes.reverse()), makeRoom);
            return;
          }
        }
        position += 8;
      } else if (type === 'undefined') {
        target[position++] = 0xf7;
      } else {
        throw new Error('Unknown type: ' + type);
      }
    };
    const writeObject = this.useRecords === false ? this.variableMapSize ? object => {
      // this method is slightly slower, but generates "preferred serialization" (optimally small for smaller objects)
      let keys = Object.keys(object);
      let vals = Object.values(object);
      let length = keys.length;
      if (length < 0x18) {
        target[position++] = 0xa0 | length;
      } else if (length < 0x100) {
        target[position++] = 0xb8;
        target[position++] = length;
      } else if (length < 0x10000) {
        target[position++] = 0xb9;
        target[position++] = length >> 8;
        target[position++] = length & 0xff;
      } else {
        target[position++] = 0xba;
        targetView.setUint32(position, length);
        position += 4;
      }
      if (encoder.keyMap) {
        for (let i = 0; i < length; i++) {
          encode(encoder.encodeKey(keys[i]));
          encode(vals[i]);
        }
      } else {
        for (let i = 0; i < length; i++) {
          encode(keys[i]);
          encode(vals[i]);
        }
      }
    } : object => {
      target[position++] = 0xb9; // always use map 16, so we can preallocate and set the length afterwards
      let objectOffset = position - start;
      position += 2;
      let size = 0;
      if (encoder.keyMap) {
        for (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {
          encode(encoder.encodeKey(key));
          encode(object[key]);
          size++;
        }
      } else {
        for (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {
          encode(key);
          encode(object[key]);
          size++;
        }
      }
      target[objectOffset++ + start] = size >> 8;
      target[objectOffset + start] = size & 0xff;
    } : (object, skipValues) => {
      let nextTransition,
        transition = structures.transitions || (structures.transitions = Object.create(null));
      let newTransitions = 0;
      let length = 0;
      let parentRecordId;
      let keys;
      if (this.keyMap) {
        keys = Object.keys(object).map(k => this.encodeKey(k));
        length = keys.length;
        for (let i = 0; i < length; i++) {
          let key = keys[i];
          nextTransition = transition[key];
          if (!nextTransition) {
            nextTransition = transition[key] = Object.create(null);
            newTransitions++;
          }
          transition = nextTransition;
        }
      } else {
        for (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {
          nextTransition = transition[key];
          if (!nextTransition) {
            if (transition[RECORD_SYMBOL] & 0x100000) {
              // this indicates it is a brancheable/extendable terminal node, so we will use this record id and extend it
              parentRecordId = transition[RECORD_SYMBOL] & 0xffff;
            }
            nextTransition = transition[key] = Object.create(null);
            newTransitions++;
          }
          transition = nextTransition;
          length++;
        }
      }
      let recordId = transition[RECORD_SYMBOL];
      if (recordId !== undefined) {
        recordId &= 0xffff;
        target[position++] = 0xd9;
        target[position++] = recordId >> 8 | 0xe0;
        target[position++] = recordId & 0xff;
      } else {
        if (!keys) keys = transition.__keys__ || (transition.__keys__ = Object.keys(object));
        if (parentRecordId === undefined) {
          recordId = structures.nextId++;
          if (!recordId) {
            recordId = 0;
            structures.nextId = 1;
          }
          if (recordId >= MAX_STRUCTURES) {
            // cycle back around
            structures.nextId = (recordId = maxSharedStructures) + 1;
          }
        } else {
          recordId = parentRecordId;
        }
        structures[recordId] = keys;
        if (recordId < maxSharedStructures) {
          target[position++] = 0xd9;
          target[position++] = recordId >> 8 | 0xe0;
          target[position++] = recordId & 0xff;
          transition = structures.transitions;
          for (let i = 0; i < length; i++) {
            if (transition[RECORD_SYMBOL] === undefined || transition[RECORD_SYMBOL] & 0x100000) transition[RECORD_SYMBOL] = recordId;
            transition = transition[keys[i]];
          }
          transition[RECORD_SYMBOL] = recordId | 0x100000; // indicates it is a extendable terminal
          hasSharedUpdate = true;
        } else {
          transition[RECORD_SYMBOL] = recordId;
          targetView.setUint32(position, 0xd9dfff00); // tag two byte, then record definition id
          position += 3;
          if (newTransitions) transitionsCount += serializationsSinceTransitionRebuild * newTransitions;
          // record the removal of the id, we can maintain our shared structure
          if (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures) recordIdsToRemove.shift()[RECORD_SYMBOL] = undefined; // we are cycling back through, and have to remove old ones
          recordIdsToRemove.push(transition);
          writeArrayHeader(length + 2);
          encode(0xe000 + recordId);
          encode(keys);
          if (skipValues) return; // special exit for iterator
          for (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) encode(object[key]);
          return;
        }
      }
      if (length < 0x18) {
        // write the array header
        target[position++] = 0x80 | length;
      } else {
        writeArrayHeader(length);
      }
      if (skipValues) return; // special exit for iterator
      for (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) encode(object[key]);
    };
    const makeRoom = end => {
      let newSize;
      if (end > 0x1000000) {
        // special handling for really large buffers
        if (end - start > MAX_BUFFER_SIZE) throw new Error('Encoded buffer would be larger than maximum buffer size');
        newSize = Math.min(MAX_BUFFER_SIZE, Math.round(Math.max((end - start) * (end > 0x4000000 ? 1.25 : 2), 0x400000) / 0x1000) * 0x1000);
      } else
        // faster handling for smaller buffers
        newSize = (Math.max(end - start << 2, target.length - 1) >> 12) + 1 << 12;
      let newBuffer = new ByteArrayAllocate(newSize);
      targetView = new DataView(newBuffer.buffer, 0, newSize);
      if (target.copy) target.copy(newBuffer, 0, start, end);else newBuffer.set(target.slice(start, end));
      position -= start;
      start = 0;
      safeEnd = newBuffer.length - 10;
      return target = newBuffer;
    };
    let chunkThreshold = 100;
    let continuedChunkThreshold = 1000;
    this.encodeAsIterable = function (value, options) {
      return startEncoding(value, options, encodeObjectAsIterable);
    };
    this.encodeAsAsyncIterable = function (value, options) {
      return startEncoding(value, options, encodeObjectAsAsyncIterable);
    };
    function* encodeObjectAsIterable(object, iterateProperties, finalIterable) {
      let constructor = object.constructor;
      if (constructor === Object) {
        let useRecords = encoder.useRecords !== false;
        if (useRecords) writeObject(object, true); // write the record identifier
        else writeEntityLength(Object.keys(object).length, 0xa0);
        for (let key in object) {
          let value = object[key];
          if (!useRecords) encode(key);
          if (value && typeof value === 'object') {
            if (iterateProperties[key]) yield* encodeObjectAsIterable(value, iterateProperties[key]);else yield* tryEncode(value, iterateProperties, key);
          } else encode(value);
        }
      } else if (constructor === Array) {
        let length = object.length;
        writeArrayHeader(length);
        for (let i = 0; i < length; i++) {
          let value = object[i];
          if (value && (typeof value === 'object' || position - start > chunkThreshold)) {
            if (iterateProperties.element) yield* encodeObjectAsIterable(value, iterateProperties.element);else yield* tryEncode(value, iterateProperties, 'element');
          } else encode(value);
        }
      } else if (object[Symbol.iterator] && !object.buffer) {
        // iterator, but exclude typed arrays
        target[position++] = 0x9f; // start indefinite array
        for (let value of object) {
          if (value && (typeof value === 'object' || position - start > chunkThreshold)) {
            if (iterateProperties.element) yield* encodeObjectAsIterable(value, iterateProperties.element);else yield* tryEncode(value, iterateProperties, 'element');
          } else encode(value);
        }
        target[position++] = 0xff; // stop byte
      } else if (isBlob(object)) {
        writeEntityLength(object.size, 0x40); // encode as binary data
        yield target.subarray(start, position);
        yield object; // directly return blobs, they have to be encoded asynchronously
        restartEncoding();
      } else if (object[Symbol.asyncIterator]) {
        target[position++] = 0x9f; // start indefinite array
        yield target.subarray(start, position);
        yield object; // directly return async iterators, they have to be encoded asynchronously
        restartEncoding();
        target[position++] = 0xff; // stop byte
      } else {
        encode(object);
      }
      if (finalIterable && position > start) yield target.subarray(start, position);else if (position - start > chunkThreshold) {
        yield target.subarray(start, position);
        restartEncoding();
      }
    }
    function* tryEncode(value, iterateProperties, key) {
      let restart = position - start;
      try {
        encode(value);
        if (position - start > chunkThreshold) {
          yield target.subarray(start, position);
          restartEncoding();
        }
      } catch (error) {
        if (error.iteratorNotHandled) {
          iterateProperties[key] = {};
          position = start + restart; // restart our position so we don't have partial data from last encode
          yield* encodeObjectAsIterable.call(this, value, iterateProperties[key]);
        } else throw error;
      }
    }
    function restartEncoding() {
      chunkThreshold = continuedChunkThreshold;
      encoder.encode(null, THROW_ON_ITERABLE); // restart encoding
    }
    function startEncoding(value, options, encodeIterable) {
      if (options && options.chunkThreshold)
        // explicitly specified chunk sizes
        chunkThreshold = continuedChunkThreshold = options.chunkThreshold;else
        // we start with a smaller threshold to get initial bytes sent quickly
        chunkThreshold = 100;
      if (value && typeof value === 'object') {
        encoder.encode(null, THROW_ON_ITERABLE); // start encoding
        return encodeIterable(value, encoder.iterateProperties || (encoder.iterateProperties = {}), true);
      }
      return [encoder.encode(value)];
    }
    async function* encodeObjectAsAsyncIterable(value, iterateProperties) {
      for (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {
        let constructor = encodedValue.constructor;
        if (constructor === ByteArray || constructor === Uint8Array) yield encodedValue;else if (isBlob(encodedValue)) {
          let reader = encodedValue.stream().getReader();
          let next;
          while (!(next = await reader.read()).done) {
            yield next.value;
          }
        } else if (encodedValue[Symbol.asyncIterator]) {
          for await (let asyncValue of encodedValue) {
            restartEncoding();
            if (asyncValue) yield* encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {}));else yield encoder.encode(asyncValue);
          }
        } else {
          yield encodedValue;
        }
      }
    }
  }
  useBuffer(buffer) {
    // this means we are finished using our own buffer and we can write over it safely
    target = buffer;
    targetView = new DataView(target.buffer, target.byteOffset, target.byteLength);
    position = 0;
  }
  clearSharedData() {
    if (this.structures) this.structures = [];
    if (this.sharedValues) this.sharedValues = undefined;
  }
  updateSharedData() {
    let lastVersion = this.sharedVersion || 0;
    this.sharedVersion = lastVersion + 1;
    let structuresCopy = this.structures.slice(0);
    let sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion);
    let saveResults = this.saveShared(sharedData, existingShared => (existingShared && existingShared.version || 0) == lastVersion);
    if (saveResults === false) {
      // get updated structures and try again if the update failed
      sharedData = this.getShared() || {};
      this.structures = sharedData.structures || [];
      this.sharedValues = sharedData.packedValues;
      this.sharedVersion = sharedData.version;
      this.structures.nextId = this.structures.length;
    } else {
      // restore structures
      structuresCopy.forEach((structure, i) => this.structures[i] = structure);
    }
    // saveShared may fail to write and reload, or may have reloaded to check compatibility and overwrite saved data, either way load the correct shared data
    return saveResults;
  }
};
function writeEntityLength(length, majorValue) {
  if (length < 0x18) target[position++] = majorValue | length;else if (length < 0x100) {
    target[position++] = majorValue | 0x18;
    target[position++] = length;
  } else if (length < 0x10000) {
    target[position++] = majorValue | 0x19;
    target[position++] = length >> 8;
    target[position++] = length & 0xff;
  } else {
    target[position++] = majorValue | 0x1a;
    targetView.setUint32(position, length);
    position += 4;
  }
}
class SharedData {
  constructor(structures, values, version) {
    this.structures = structures;
    this.packedValues = values;
    this.version = version;
  }
}
function writeArrayHeader(length) {
  if (length < 0x18) target[position++] = 0x80 | length;else if (length < 0x100) {
    target[position++] = 0x98;
    target[position++] = length;
  } else if (length < 0x10000) {
    target[position++] = 0x99;
    target[position++] = length >> 8;
    target[position++] = length & 0xff;
  } else {
    target[position++] = 0x9a;
    targetView.setUint32(position, length);
    position += 4;
  }
}
const BlobConstructor = typeof Blob === 'undefined' ? function () {} : Blob;
function isBlob(object) {
  if (object instanceof BlobConstructor) return true;
  let tag = object[Symbol.toStringTag];
  return tag === 'Blob' || tag === 'File';
}
function findRepetitiveStrings(value, packedValues) {
  switch (typeof value) {
    case 'string':
      if (value.length > 3) {
        if (packedValues.objectMap[value] > -1 || packedValues.values.length >= packedValues.maxValues) return;
        let packedStatus = packedValues.get(value);
        if (packedStatus) {
          if (++packedStatus.count == 2) {
            packedValues.values.push(value);
          }
        } else {
          packedValues.set(value, {
            count: 1
          });
          if (packedValues.samplingPackedValues) {
            let status = packedValues.samplingPackedValues.get(value);
            if (status) status.count++;else packedValues.samplingPackedValues.set(value, {
              count: 1
            });
          }
        }
      }
      break;
    case 'object':
      if (value) {
        if (value instanceof Array) {
          for (let i = 0, l = value.length; i < l; i++) {
            findRepetitiveStrings(value[i], packedValues);
          }
        } else {
          let includeKeys = !packedValues.encoder.useRecords;
          for (var key in value) {
            if (value.hasOwnProperty(key)) {
              if (includeKeys) findRepetitiveStrings(key, packedValues);
              findRepetitiveStrings(value[key], packedValues);
            }
          }
        }
      }
      break;
    case 'function':
      console.log(value);
  }
}
const isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;
extensionClasses = [Date, Set, Error, RegExp, Tag, ArrayBuffer, Uint8Array, Uint8ClampedArray, Uint16Array, Uint32Array, typeof BigUint64Array == 'undefined' ? function () {} : BigUint64Array, Int8Array, Int16Array, Int32Array, typeof BigInt64Array == 'undefined' ? function () {} : BigInt64Array, Float32Array, Float64Array, SharedData];

//Object.getPrototypeOf(Uint8Array.prototype).constructor /*TypedArray*/
extensions = [{
  // Date
  tag: 1,
  encode(date, encode) {
    let seconds = date.getTime() / 1000;
    if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 0x100000000) {
      // Timestamp 32
      target[position++] = 0x1a;
      targetView.setUint32(position, seconds);
      position += 4;
    } else {
      // Timestamp float64
      target[position++] = 0xfb;
      targetView.setFloat64(position, seconds);
      position += 8;
    }
  }
}, {
  // Set
  tag: 258,
  // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md
  encode(set, encode) {
    let array = Array.from(set);
    encode(array);
  }
}, {
  // Error
  tag: 27,
  // http://cbor.schmorp.de/generic-object
  encode(error, encode) {
    encode([error.name, error.message]);
  }
}, {
  // RegExp
  tag: 27,
  // http://cbor.schmorp.de/generic-object
  encode(regex, encode) {
    encode(['RegExp', regex.source, regex.flags]);
  }
}, {
  // Tag
  getTag(tag) {
    return tag.tag;
  },
  encode(tag, encode) {
    encode(tag.value);
  }
}, {
  // ArrayBuffer
  encode(arrayBuffer, encode, makeRoom) {
    writeBuffer(arrayBuffer, makeRoom);
  }
}, {
  // Uint8Array
  getTag(typedArray) {
    if (typedArray.constructor === Uint8Array) {
      if (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false) return 64;
    } // else no tag
  },
  encode(typedArray, encode, makeRoom) {
    writeBuffer(typedArray, makeRoom);
  }
}, typedArrayEncoder(68, 1), typedArrayEncoder(69, 2), typedArrayEncoder(70, 4), typedArrayEncoder(71, 8), typedArrayEncoder(72, 1), typedArrayEncoder(77, 2), typedArrayEncoder(78, 4), typedArrayEncoder(79, 8), typedArrayEncoder(85, 4), typedArrayEncoder(86, 8), {
  encode(sharedData, encode) {
    // write SharedData
    let packedValues = sharedData.packedValues || [];
    let sharedStructures = sharedData.structures || [];
    if (packedValues.values.length > 0) {
      target[position++] = 0xd8; // one-byte tag
      target[position++] = 51; // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt
      writeArrayHeader(4);
      let valuesArray = packedValues.values;
      encode(valuesArray);
      writeArrayHeader(0); // prefixes
      writeArrayHeader(0); // suffixes
      packedObjectMap = Object.create(sharedPackedObjectMap || null);
      for (let i = 0, l = valuesArray.length; i < l; i++) {
        packedObjectMap[valuesArray[i]] = i;
      }
    }
    {
      targetView.setUint32(position, 0xd9dffe00);
      position += 3;
      let definitions = sharedStructures.slice(0);
      definitions.unshift(0xe000);
      definitions.push(new Tag(sharedData.version, 0x53687264));
      encode(definitions);
    }
  }
}];
function typedArrayEncoder(tag, size) {
  if (!isLittleEndianMachine && size > 1) tag -= 4; // the big endian equivalents are 4 less
  return {
    tag: tag,
    encode: function writeExtBuffer(typedArray, encode) {
      let length = typedArray.byteLength;
      let offset = typedArray.byteOffset || 0;
      let buffer = typedArray.buffer || typedArray;
      encode(hasNodeBuffer ? Buffer$1.from(buffer, offset, length) : new Uint8Array(buffer, offset, length));
    }
  };
}
function writeBuffer(buffer, makeRoom) {
  let length = buffer.byteLength;
  if (length < 0x18) {
    target[position++] = 0x40 + length;
  } else if (length < 0x100) {
    target[position++] = 0x58;
    target[position++] = length;
  } else if (length < 0x10000) {
    target[position++] = 0x59;
    target[position++] = length >> 8;
    target[position++] = length & 0xff;
  } else {
    target[position++] = 0x5a;
    targetView.setUint32(position, length);
    position += 4;
  }
  if (position + length >= target.length) {
    makeRoom(position + length);
  }
  // if it is already a typed array (has an ArrayBuffer), use that, but if it is an ArrayBuffer itself,
  // must wrap it to set it.
  target.set(buffer.buffer ? buffer : new Uint8Array(buffer), position);
  position += length;
}
function insertIds(serialized, idsToInsert) {
  // insert the ids that need to be referenced for structured clones
  let nextId;
  let distanceToMove = idsToInsert.length * 2;
  let lastEnd = serialized.length - distanceToMove;
  idsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1);
  for (let id = 0; id < idsToInsert.length; id++) {
    let referee = idsToInsert[id];
    referee.id = id;
    for (let position of referee.references) {
      serialized[position++] = id >> 8;
      serialized[position] = id & 0xff;
    }
  }
  while (nextId = idsToInsert.pop()) {
    let offset = nextId.offset;
    serialized.copyWithin(offset + distanceToMove, offset, lastEnd);
    distanceToMove -= 2;
    let position = offset + distanceToMove;
    serialized[position++] = 0xd8;
    serialized[position++] = 28; // http://cbor.schmorp.de/value-sharing
    lastEnd = offset;
  }
  return serialized;
}
function writeBundles(start, encode) {
  targetView.setUint32(bundledStrings.position + start, position - bundledStrings.position - start + 1); // the offset to bundle
  let writeStrings = bundledStrings;
  bundledStrings = null;
  encode(writeStrings[0]);
  encode(writeStrings[1]);
}
function addExtension(extension) {
  if (extension.Class) {
    if (!extension.encode) throw new Error('Extension has no encode function');
    extensionClasses.unshift(extension.Class);
    extensions.unshift(extension);
  }
  addExtension$1(extension);
}
let defaultEncoder = new Encoder$2({
  useRecords: false
});
defaultEncoder.encode;
defaultEncoder.encodeAsIterable;
defaultEncoder.encodeAsAsyncIterable;
const REUSE_BUFFER_MODE = 512;
const RESET_BUFFER_MODE = 1024;
const THROW_ON_ITERABLE = 2048;

// This is an unfortunate replacement for @sindresorhus/is that we need to
// re-implement for performance purposes. In particular the is.observable()
// check is expensive, and unnecessary for our purposes. The values returned
// are compatible with @sindresorhus/is, however.

const typeofs = ['string', 'number', 'bigint', 'symbol'];
const objectTypeNames = ['Function', 'Generator', 'AsyncGenerator', 'GeneratorFunction', 'AsyncGeneratorFunction', 'AsyncFunction', 'Observable', 'Array', 'Buffer', 'Object', 'RegExp', 'Date', 'Error', 'Map', 'Set', 'WeakMap', 'WeakSet', 'ArrayBuffer', 'SharedArrayBuffer', 'DataView', 'Promise', 'URL', 'HTMLElement', 'Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array'];

/**
 * @param {any} value
 * @returns {string}
 */
function is(value) {
  if (value === null) {
    return 'null';
  }
  if (value === undefined) {
    return 'undefined';
  }
  if (value === true || value === false) {
    return 'boolean';
  }
  const typeOf = typeof value;
  if (typeofs.includes(typeOf)) {
    return typeOf;
  }
  /* c8 ignore next 4 */
  // not going to bother testing this, it's not going to be valid anyway
  if (typeOf === 'function') {
    return 'Function';
  }
  if (Array.isArray(value)) {
    return 'Array';
  }
  if (isBuffer$1(value)) {
    return 'Buffer';
  }
  const objectType = getObjectType(value);
  if (objectType) {
    return objectType;
  }
  /* c8 ignore next */
  return 'Object';
}

/**
 * @param {any} value
 * @returns {boolean}
 */
function isBuffer$1(value) {
  return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
}

/**
 * @param {any} value
 * @returns {string|undefined}
 */
function getObjectType(value) {
  const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
  if (objectTypeNames.includes(objectTypeName)) {
    return objectTypeName;
  }
  /* c8 ignore next */
  return undefined;
}

class Type {
  /**
   * @param {number} major
   * @param {string} name
   * @param {boolean} terminal
   */
  constructor(major, name, terminal) {
    this.major = major;
    this.majorEncoded = major << 5;
    this.name = name;
    this.terminal = terminal;
  }

  /* c8 ignore next 3 */
  toString() {
    return `Type[${this.major}].${this.name}`;
  }

  /**
   * @param {Type} typ
   * @returns {number}
   */
  compare(typ) {
    /* c8 ignore next 1 */
    return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
  }
}

// convert to static fields when better supported
Type.uint = new Type(0, 'uint', true);
Type.negint = new Type(1, 'negint', true);
Type.bytes = new Type(2, 'bytes', true);
Type.string = new Type(3, 'string', true);
Type.array = new Type(4, 'array', false);
Type.map = new Type(5, 'map', false);
Type.tag = new Type(6, 'tag', false); // terminal?
Type.float = new Type(7, 'float', true);
Type.false = new Type(7, 'false', true);
Type.true = new Type(7, 'true', true);
Type.null = new Type(7, 'null', true);
Type.undefined = new Type(7, 'undefined', true);
Type.break = new Type(7, 'break', true);
// Type.indefiniteLength = new Type(0, 'indefiniteLength', true)

class Token {
  /**
   * @param {Type} type
   * @param {any} [value]
   * @param {number} [encodedLength]
   */
  constructor(type, value, encodedLength) {
    this.type = type;
    this.value = value;
    this.encodedLength = encodedLength;
    /** @type {Uint8Array|undefined} */
    this.encodedBytes = undefined;
    /** @type {Uint8Array|undefined} */
    this.byteValue = undefined;
  }

  /* c8 ignore next 3 */
  toString() {
    return `Token[${this.type}].${this.value}`;
  }
}

// Use Uint8Array directly in the browser, use Buffer in Node.js but don't
// speak its name directly to avoid bundlers pulling in the `Buffer` polyfill

// @ts-ignore
const useBuffer = globalThis.process &&
// @ts-ignore
!globalThis.process.browser &&
// @ts-ignore
globalThis.Buffer &&
// @ts-ignore
typeof globalThis.Buffer.isBuffer === 'function';
const textDecoder = new TextDecoder();
const textEncoder = new TextEncoder();

/**
 * @param {Uint8Array} buf
 * @returns {boolean}
 */
function isBuffer(buf) {
  // @ts-ignore
  return useBuffer && globalThis.Buffer.isBuffer(buf);
}
const toString$1 = useBuffer ?
// eslint-disable-line operator-linebreak
/**
 * @param {Uint8Array} bytes
 * @param {number} start
 * @param {number} end
 */
(bytes, start, end) => {
  return end - start > 64 ?
  // eslint-disable-line operator-linebreak
  // @ts-ignore
  globalThis.Buffer.from(bytes.subarray(start, end)).toString('utf8') : utf8Slice(bytes, start, end);
}
/* c8 ignore next 11 */ :
// eslint-disable-line operator-linebreak
/**
 * @param {Uint8Array} bytes
 * @param {number} start
 * @param {number} end
 */
(bytes, start, end) => {
  return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
};
const fromString = useBuffer ?
// eslint-disable-line operator-linebreak
/**
 * @param {string} string
 */
string => {
  return string.length > 64 ?
  // eslint-disable-line operator-linebreak
  // @ts-ignore
  globalThis.Buffer.from(string) : utf8ToBytes(string);
}
/* c8 ignore next 7 */ :
// eslint-disable-line operator-linebreak
/**
 * @param {string} string
 */
string => {
  return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);
};
const slice = useBuffer ?
// eslint-disable-line operator-linebreak
/**
 * @param {Uint8Array} bytes
 * @param {number} start
 * @param {number} end
 */
(bytes, start, end) => {
  if (isBuffer(bytes)) {
    return new Uint8Array(bytes.subarray(start, end));
  }
  return bytes.slice(start, end);
}
/* c8 ignore next 9 */ :
// eslint-disable-line operator-linebreak
/**
 * @param {Uint8Array} bytes
 * @param {number} start
 * @param {number} end
 */
(bytes, start, end) => {
  return bytes.slice(start, end);
};

/**
 * @param {Uint8Array} b1
 * @param {Uint8Array} b2
 * @returns {number}
 */
function compare(b1, b2) {
  /* c8 ignore next 5 */
  if (isBuffer(b1) && isBuffer(b2)) {
    // probably not possible to get here in the current API
    // @ts-ignore Buffer
    return b1.compare(b2);
  }
  for (let i = 0; i < b1.length; i++) {
    if (b1[i] === b2[i]) {
      continue;
    }
    return b1[i] < b2[i] ? -1 : 1;
  } /* c8 ignore next 3 */
  return 0;
}

// The below code is taken from https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
// Licensed Apache-2.0.

/**
 * @param {string} str
 * @returns {number[]}
 */
function utf8ToBytes(str) {
  const out = [];
  let p = 0;
  for (let i = 0; i < str.length; i++) {
    let c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xFC00) === 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
      // Surrogate Pair
      c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
}

// The below code is mostly taken from https://github.com/feross/buffer
// Licensed MIT. Copyright (c) Feross Aboukhadijeh

/**
 * @param {Uint8Array} buf
 * @param {number} offset
 * @param {number} end
 * @returns {string}
 */
function utf8Slice(buf, offset, end) {
  const res = [];
  while (offset < end) {
    const firstByte = buf[offset];
    let codePoint = null;
    let bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;
    if (offset + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[offset + 1];
          if ((secondByte & 0xc0) === 0x80) {
            tempCodePoint = (firstByte & 0x1f) << 0x6 | secondByte & 0x3f;
            if (tempCodePoint > 0x7f) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[offset + 1];
          thirdByte = buf[offset + 2];
          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {
            tempCodePoint = (firstByte & 0xf) << 0xc | (secondByte & 0x3f) << 0x6 | thirdByte & 0x3f;
            /* c8 ignore next 3 */
            if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[offset + 1];
          thirdByte = buf[offset + 2];
          fourthByte = buf[offset + 3];
          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {
            tempCodePoint = (firstByte & 0xf) << 0x12 | (secondByte & 0x3f) << 0xc | (thirdByte & 0x3f) << 0x6 | fourthByte & 0x3f;
            if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    /* c8 ignore next 5 */
    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xfffd;
      bytesPerSequence = 1;
    } else if (codePoint > 0xffff) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3ff | 0xd800);
      codePoint = 0xdc00 | codePoint & 0x3ff;
    }
    res.push(codePoint);
    offset += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;

/**
 * @param {number[]} codePoints
 * @returns {string}
 */
function decodeCodePointsArray(codePoints) {
  const len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }
  /* c8 ignore next 10 */
  // Decode in chunks to avoid "call stack size exceeded".
  let res = '';
  let i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

const decodeErrPrefix = 'CBOR decode error:';
const encodeErrPrefix = 'CBOR encode error:';

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} need
 */
function assertEnoughData(data, pos, need) {
  if (data.length - pos < need) {
    throw new Error(`${decodeErrPrefix} not enough data for type`);
  }
}

/* globals BigInt */

const uintBoundaries = [24, 256, 65536, 4294967296, BigInt('18446744073709551616')];

/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */

/**
 * @param {Uint8Array} data
 * @param {number} offset
 * @param {DecodeOptions} options
 * @returns {number}
 */
function readUint8(data, offset, options) {
  assertEnoughData(data, offset, 1);
  const value = data[offset];
  if (options.strict === true && value < uintBoundaries[0]) {
    throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
  }
  return value;
}

/**
 * @param {Uint8Array} data
 * @param {number} offset
 * @param {DecodeOptions} options
 * @returns {number}
 */
function readUint16(data, offset, options) {
  assertEnoughData(data, offset, 2);
  const value = data[offset] << 8 | data[offset + 1];
  if (options.strict === true && value < uintBoundaries[1]) {
    throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
  }
  return value;
}

/**
 * @param {Uint8Array} data
 * @param {number} offset
 * @param {DecodeOptions} options
 * @returns {number}
 */
function readUint32(data, offset, options) {
  assertEnoughData(data, offset, 4);
  const value = data[offset] * 16777216 /* 2 ** 24 */ + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
  if (options.strict === true && value < uintBoundaries[2]) {
    throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
  }
  return value;
}

/**
 * @param {Uint8Array} data
 * @param {number} offset
 * @param {DecodeOptions} options
 * @returns {number|bigint}
 */
function readUint64(data, offset, options) {
  // assume BigInt, convert back to Number if within safe range
  assertEnoughData(data, offset, 8);
  const hi = data[offset] * 16777216 /* 2 ** 24 */ + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
  const lo = data[offset + 4] * 16777216 /* 2 ** 24 */ + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
  const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
  if (options.strict === true && value < uintBoundaries[3]) {
    throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
  }
  if (value <= Number.MAX_SAFE_INTEGER) {
    return Number(value);
  }
  if (options.allowBigInt === true) {
    return value;
  }
  throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
}

/* not required thanks to quick[] list
const oneByteTokens = new Array(24).fill(0).map((v, i) => new Token(Type.uint, i, 1))
export function decodeUintCompact (data, pos, minor, options) {
  return oneByteTokens[minor]
}
*/

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeUint8(data, pos, _minor, options) {
  return new Token(Type.uint, readUint8(data, pos + 1, options), 2);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeUint16(data, pos, _minor, options) {
  return new Token(Type.uint, readUint16(data, pos + 1, options), 3);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeUint32(data, pos, _minor, options) {
  return new Token(Type.uint, readUint32(data, pos + 1, options), 5);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeUint64(data, pos, _minor, options) {
  return new Token(Type.uint, readUint64(data, pos + 1, options), 9);
}

/**
 * @param {Bl} buf
 * @param {Token} token
 */
function encodeUint(buf, token) {
  return encodeUintValue(buf, 0, token.value);
}

/**
 * @param {Bl} buf
 * @param {number} major
 * @param {number|bigint} uint
 */
function encodeUintValue(buf, major, uint) {
  if (uint < uintBoundaries[0]) {
    const nuint = Number(uint);
    // pack into one byte, minor=0, additional=value
    buf.push([major | nuint]);
  } else if (uint < uintBoundaries[1]) {
    const nuint = Number(uint);
    // pack into two byte, minor=0, additional=24
    buf.push([major | 24, nuint]);
  } else if (uint < uintBoundaries[2]) {
    const nuint = Number(uint);
    // pack into three byte, minor=0, additional=25
    buf.push([major | 25, nuint >>> 8, nuint & 0xff]);
  } else if (uint < uintBoundaries[3]) {
    const nuint = Number(uint);
    // pack into five byte, minor=0, additional=26
    buf.push([major | 26, nuint >>> 24 & 0xff, nuint >>> 16 & 0xff, nuint >>> 8 & 0xff, nuint & 0xff]);
  } else {
    const buint = BigInt(uint);
    if (buint < uintBoundaries[4]) {
      // pack into nine byte, minor=0, additional=27
      const set = [major | 27, 0, 0, 0, 0, 0, 0, 0];
      // simulate bitwise above 32 bits
      let lo = Number(buint & BigInt(0xffffffff));
      let hi = Number(buint >> BigInt(32) & BigInt(0xffffffff));
      set[8] = lo & 0xff;
      lo = lo >> 8;
      set[7] = lo & 0xff;
      lo = lo >> 8;
      set[6] = lo & 0xff;
      lo = lo >> 8;
      set[5] = lo & 0xff;
      set[4] = hi & 0xff;
      hi = hi >> 8;
      set[3] = hi & 0xff;
      hi = hi >> 8;
      set[2] = hi & 0xff;
      hi = hi >> 8;
      set[1] = hi & 0xff;
      buf.push(set);
    } else {
      throw new Error(`${decodeErrPrefix} encountered BigInt larger than allowable range`);
    }
  }
}

/**
 * @param {Token} token
 * @returns {number}
 */
encodeUint.encodedSize = function encodedSize(token) {
  return encodeUintValue.encodedSize(token.value);
};

/**
 * @param {number} uint
 * @returns {number}
 */
encodeUintValue.encodedSize = function encodedSize(uint) {
  if (uint < uintBoundaries[0]) {
    return 1;
  }
  if (uint < uintBoundaries[1]) {
    return 2;
  }
  if (uint < uintBoundaries[2]) {
    return 3;
  }
  if (uint < uintBoundaries[3]) {
    return 5;
  }
  return 9;
};

/**
 * @param {Token} tok1
 * @param {Token} tok2
 * @returns {number}
 */
encodeUint.compareTokens = function compareTokens(tok1, tok2) {
  return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : /* c8 ignore next */0;
};

/* eslint-env es2020 */


/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeNegint8(data, pos, _minor, options) {
  return new Token(Type.negint, -1 - readUint8(data, pos + 1, options), 2);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeNegint16(data, pos, _minor, options) {
  return new Token(Type.negint, -1 - readUint16(data, pos + 1, options), 3);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeNegint32(data, pos, _minor, options) {
  return new Token(Type.negint, -1 - readUint32(data, pos + 1, options), 5);
}
const neg1b = BigInt(-1);
const pos1b = BigInt(1);

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeNegint64(data, pos, _minor, options) {
  const int = readUint64(data, pos + 1, options);
  if (typeof int !== 'bigint') {
    const value = -1 - int;
    if (value >= Number.MIN_SAFE_INTEGER) {
      return new Token(Type.negint, value, 9);
    }
  }
  if (options.allowBigInt !== true) {
    throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
  }
  return new Token(Type.negint, neg1b - BigInt(int), 9);
}

/**
 * @param {Bl} buf
 * @param {Token} token
 */
function encodeNegint(buf, token) {
  const negint = token.value;
  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;
  encodeUintValue(buf, token.type.majorEncoded, unsigned);
}

/**
 * @param {Token} token
 * @returns {number}
 */
encodeNegint.encodedSize = function encodedSize(token) {
  const negint = token.value;
  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;
  /* c8 ignore next 4 */
  // handled by quickEncode, we shouldn't get here but it's included for completeness
  if (unsigned < uintBoundaries[0]) {
    return 1;
  }
  if (unsigned < uintBoundaries[1]) {
    return 2;
  }
  if (unsigned < uintBoundaries[2]) {
    return 3;
  }
  if (unsigned < uintBoundaries[3]) {
    return 5;
  }
  return 9;
};

/**
 * @param {Token} tok1
 * @param {Token} tok2
 * @returns {number}
 */
encodeNegint.compareTokens = function compareTokens(tok1, tok2) {
  // opposite of the uint comparison since we store the uint version in bytes
  return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : /* c8 ignore next */0;
};

/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} prefix
 * @param {number} length
 * @returns {Token}
 */
function toToken$3(data, pos, prefix, length) {
  assertEnoughData(data, pos, prefix + length);
  const buf = slice(data, pos + prefix, pos + prefix + length);
  return new Token(Type.bytes, buf, prefix + length);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} minor
 * @param {DecodeOptions} _options
 * @returns {Token}
 */
function decodeBytesCompact(data, pos, minor, _options) {
  return toToken$3(data, pos, 1, minor);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeBytes8(data, pos, _minor, options) {
  return toToken$3(data, pos, 2, readUint8(data, pos + 1, options));
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeBytes16(data, pos, _minor, options) {
  return toToken$3(data, pos, 3, readUint16(data, pos + 1, options));
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeBytes32(data, pos, _minor, options) {
  return toToken$3(data, pos, 5, readUint32(data, pos + 1, options));
}

// TODO: maybe we shouldn't support this ..
/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeBytes64(data, pos, _minor, options) {
  const l = readUint64(data, pos + 1, options);
  if (typeof l === 'bigint') {
    throw new Error(`${decodeErrPrefix} 64-bit integer bytes lengths not supported`);
  }
  return toToken$3(data, pos, 9, l);
}

/**
 * `encodedBytes` allows for caching when we do a byte version of a string
 * for key sorting purposes
 * @param {Token} token
 * @returns {Uint8Array}
 */
function tokenBytes(token) {
  if (token.encodedBytes === undefined) {
    token.encodedBytes = token.type === Type.string ? fromString(token.value) : token.value;
  }
  // @ts-ignore c'mon
  return token.encodedBytes;
}

/**
 * @param {Bl} buf
 * @param {Token} token
 */
function encodeBytes(buf, token) {
  const bytes = tokenBytes(token);
  encodeUintValue(buf, token.type.majorEncoded, bytes.length);
  buf.push(bytes);
}

/**
 * @param {Token} token
 * @returns {number}
 */
encodeBytes.encodedSize = function encodedSize(token) {
  const bytes = tokenBytes(token);
  return encodeUintValue.encodedSize(bytes.length) + bytes.length;
};

/**
 * @param {Token} tok1
 * @param {Token} tok2
 * @returns {number}
 */
encodeBytes.compareTokens = function compareTokens(tok1, tok2) {
  return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
};

/**
 * @param {Uint8Array} b1
 * @param {Uint8Array} b2
 * @returns {number}
 */
function compareBytes(b1, b2) {
  return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare(b1, b2);
}

/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} prefix
 * @param {number} length
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function toToken$2(data, pos, prefix, length, options) {
  const totLength = prefix + length;
  assertEnoughData(data, pos, totLength);
  const tok = new Token(Type.string, toString$1(data, pos + prefix, pos + totLength), totLength);
  if (options.retainStringBytes === true) {
    tok.byteValue = slice(data, pos + prefix, pos + totLength);
  }
  return tok;
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeStringCompact(data, pos, minor, options) {
  return toToken$2(data, pos, 1, minor, options);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeString8(data, pos, _minor, options) {
  return toToken$2(data, pos, 2, readUint8(data, pos + 1, options), options);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeString16(data, pos, _minor, options) {
  return toToken$2(data, pos, 3, readUint16(data, pos + 1, options), options);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeString32(data, pos, _minor, options) {
  return toToken$2(data, pos, 5, readUint32(data, pos + 1, options), options);
}

// TODO: maybe we shouldn't support this ..
/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeString64(data, pos, _minor, options) {
  const l = readUint64(data, pos + 1, options);
  if (typeof l === 'bigint') {
    throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);
  }
  return toToken$2(data, pos, 9, l, options);
}
const encodeString = encodeBytes;

/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */

/**
 * @param {Uint8Array} _data
 * @param {number} _pos
 * @param {number} prefix
 * @param {number} length
 * @returns {Token}
 */
function toToken$1(_data, _pos, prefix, length) {
  return new Token(Type.array, length, prefix);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} minor
 * @param {DecodeOptions} _options
 * @returns {Token}
 */
function decodeArrayCompact(data, pos, minor, _options) {
  return toToken$1(data, pos, 1, minor);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeArray8(data, pos, _minor, options) {
  return toToken$1(data, pos, 2, readUint8(data, pos + 1, options));
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeArray16(data, pos, _minor, options) {
  return toToken$1(data, pos, 3, readUint16(data, pos + 1, options));
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeArray32(data, pos, _minor, options) {
  return toToken$1(data, pos, 5, readUint32(data, pos + 1, options));
}

// TODO: maybe we shouldn't support this ..
/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeArray64(data, pos, _minor, options) {
  const l = readUint64(data, pos + 1, options);
  if (typeof l === 'bigint') {
    throw new Error(`${decodeErrPrefix} 64-bit integer array lengths not supported`);
  }
  return toToken$1(data, pos, 9, l);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeArrayIndefinite(data, pos, _minor, options) {
  if (options.allowIndefinite === false) {
    throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
  }
  return toToken$1(data, pos, 1, Infinity);
}

/**
 * @param {Bl} buf
 * @param {Token} token
 */
function encodeArray(buf, token) {
  encodeUintValue(buf, Type.array.majorEncoded, token.value);
}

// using an array as a map key, are you sure about this? we can only sort
// by map length here, it's up to the encoder to decide to look deeper
encodeArray.compareTokens = encodeUint.compareTokens;

/**
 * @param {Token} token
 * @returns {number}
 */
encodeArray.encodedSize = function encodedSize(token) {
  return encodeUintValue.encodedSize(token.value);
};

/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */

/**
 * @param {Uint8Array} _data
 * @param {number} _pos
 * @param {number} prefix
 * @param {number} length
 * @returns {Token}
 */
function toToken(_data, _pos, prefix, length) {
  return new Token(Type.map, length, prefix);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} minor
 * @param {DecodeOptions} _options
 * @returns {Token}
 */
function decodeMapCompact(data, pos, minor, _options) {
  return toToken(data, pos, 1, minor);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeMap8(data, pos, _minor, options) {
  return toToken(data, pos, 2, readUint8(data, pos + 1, options));
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeMap16(data, pos, _minor, options) {
  return toToken(data, pos, 3, readUint16(data, pos + 1, options));
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeMap32(data, pos, _minor, options) {
  return toToken(data, pos, 5, readUint32(data, pos + 1, options));
}

// TODO: maybe we shouldn't support this ..
/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeMap64(data, pos, _minor, options) {
  const l = readUint64(data, pos + 1, options);
  if (typeof l === 'bigint') {
    throw new Error(`${decodeErrPrefix} 64-bit integer map lengths not supported`);
  }
  return toToken(data, pos, 9, l);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeMapIndefinite(data, pos, _minor, options) {
  if (options.allowIndefinite === false) {
    throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
  }
  return toToken(data, pos, 1, Infinity);
}

/**
 * @param {Bl} buf
 * @param {Token} token
 */
function encodeMap(buf, token) {
  encodeUintValue(buf, Type.map.majorEncoded, token.value);
}

// using a map as a map key, are you sure about this? we can only sort
// by map length here, it's up to the encoder to decide to look deeper
encodeMap.compareTokens = encodeUint.compareTokens;

/**
 * @param {Token} token
 * @returns {number}
 */
encodeMap.encodedSize = function encodedSize(token) {
  return encodeUintValue.encodedSize(token.value);
};

/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */

/**
 * @param {Uint8Array} _data
 * @param {number} _pos
 * @param {number} minor
 * @param {DecodeOptions} _options
 * @returns {Token}
 */
function decodeTagCompact(_data, _pos, minor, _options) {
  return new Token(Type.tag, minor, 1);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeTag8(data, pos, _minor, options) {
  return new Token(Type.tag, readUint8(data, pos + 1, options), 2);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeTag16(data, pos, _minor, options) {
  return new Token(Type.tag, readUint16(data, pos + 1, options), 3);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeTag32(data, pos, _minor, options) {
  return new Token(Type.tag, readUint32(data, pos + 1, options), 5);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeTag64(data, pos, _minor, options) {
  return new Token(Type.tag, readUint64(data, pos + 1, options), 9);
}

/**
 * @param {Bl} buf
 * @param {Token} token
 */
function encodeTag(buf, token) {
  encodeUintValue(buf, Type.tag.majorEncoded, token.value);
}
encodeTag.compareTokens = encodeUint.compareTokens;

/**
 * @param {Token} token
 * @returns {number}
 */
encodeTag.encodedSize = function encodedSize(token) {
  return encodeUintValue.encodedSize(token.value);
};

// TODO: shift some of the bytes logic to bytes-utils so we can use Buffer
// where possible


/**
 * @typedef {import('./bl.js').Bl} Bl
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 * @typedef {import('../interface').EncodeOptions} EncodeOptions
 */

const MINOR_FALSE = 20;
const MINOR_TRUE = 21;
const MINOR_NULL = 22;
const MINOR_UNDEFINED = 23;

/**
 * @param {Uint8Array} _data
 * @param {number} _pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeUndefined(_data, _pos, _minor, options) {
  if (options.allowUndefined === false) {
    throw new Error(`${decodeErrPrefix} undefined values are not supported`);
  } else if (options.coerceUndefinedToNull === true) {
    return new Token(Type.null, null, 1);
  }
  return new Token(Type.undefined, undefined, 1);
}

/**
 * @param {Uint8Array} _data
 * @param {number} _pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeBreak(_data, _pos, _minor, options) {
  if (options.allowIndefinite === false) {
    throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
  }
  return new Token(Type.break, undefined, 1);
}

/**
 * @param {number} value
 * @param {number} bytes
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function createToken(value, bytes, options) {
  if (options) {
    if (options.allowNaN === false && Number.isNaN(value)) {
      throw new Error(`${decodeErrPrefix} NaN values are not supported`);
    }
    if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
      throw new Error(`${decodeErrPrefix} Infinity values are not supported`);
    }
  }
  return new Token(Type.float, value, bytes);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeFloat16(data, pos, _minor, options) {
  return createToken(readFloat16(data, pos + 1), 3, options);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeFloat32(data, pos, _minor, options) {
  return createToken(readFloat32(data, pos + 1), 5, options);
}

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} _minor
 * @param {DecodeOptions} options
 * @returns {Token}
 */
function decodeFloat64(data, pos, _minor, options) {
  return createToken(readFloat64(data, pos + 1), 9, options);
}

/**
 * @param {Bl} buf
 * @param {Token} token
 * @param {EncodeOptions} options
 */
function encodeFloat(buf, token, options) {
  const float = token.value;
  if (float === false) {
    buf.push([Type.float.majorEncoded | MINOR_FALSE]);
  } else if (float === true) {
    buf.push([Type.float.majorEncoded | MINOR_TRUE]);
  } else if (float === null) {
    buf.push([Type.float.majorEncoded | MINOR_NULL]);
  } else if (float === undefined) {
    buf.push([Type.float.majorEncoded | MINOR_UNDEFINED]);
  } else {
    let decoded;
    let success = false;
    if (!options || options.float64 !== true) {
      encodeFloat16(float);
      decoded = readFloat16(ui8a, 1);
      if (float === decoded || Number.isNaN(float)) {
        ui8a[0] = 0xf9;
        buf.push(ui8a.slice(0, 3));
        success = true;
      } else {
        encodeFloat32(float);
        decoded = readFloat32(ui8a, 1);
        if (float === decoded) {
          ui8a[0] = 0xfa;
          buf.push(ui8a.slice(0, 5));
          success = true;
        }
      }
    }
    if (!success) {
      encodeFloat64(float);
      decoded = readFloat64(ui8a, 1);
      ui8a[0] = 0xfb;
      buf.push(ui8a.slice(0, 9));
    }
  }
}

/**
 * @param {Token} token
 * @param {EncodeOptions} options
 * @returns {number}
 */
encodeFloat.encodedSize = function encodedSize(token, options) {
  const float = token.value;
  if (float === false || float === true || float === null || float === undefined) {
    return 1;
  }
  if (!options || options.float64 !== true) {
    encodeFloat16(float);
    let decoded = readFloat16(ui8a, 1);
    if (float === decoded || Number.isNaN(float)) {
      return 3;
    }
    encodeFloat32(float);
    decoded = readFloat32(ui8a, 1);
    if (float === decoded) {
      return 5;
    }
  }
  return 9;
};
const buffer = new ArrayBuffer(9);
const dataView = new DataView(buffer, 1);
const ui8a = new Uint8Array(buffer, 0);

/**
 * @param {number} inp
 */
function encodeFloat16(inp) {
  if (inp === Infinity) {
    dataView.setUint16(0, 0x7c00, false);
  } else if (inp === -Infinity) {
    dataView.setUint16(0, 0xfc00, false);
  } else if (Number.isNaN(inp)) {
    dataView.setUint16(0, 0x7e00, false);
  } else {
    dataView.setFloat32(0, inp);
    const valu32 = dataView.getUint32(0);
    const exponent = (valu32 & 0x7f800000) >> 23;
    const mantissa = valu32 & 0x7fffff;

    /* c8 ignore next 6 */
    if (exponent === 0xff) {
      // too big, Infinity, but this should be hard (impossible?) to trigger
      dataView.setUint16(0, 0x7c00, false);
    } else if (exponent === 0x00) {
      // 0.0, -0.0 and subnormals, shouldn't be possible to get here because 0.0 should be counted as an int
      dataView.setUint16(0, (inp & 0x80000000) >> 16 | mantissa >> 13, false);
    } else {
      // standard numbers
      // chunks of logic here borrowed from https://github.com/PJK/libcbor/blob/c78f437182533e3efa8d963ff4b945bb635c2284/src/cbor/encoding.c#L127
      const logicalExponent = exponent - 127;
      // Now we know that 2^exponent <= 0 logically
      /* c8 ignore next 6 */
      if (logicalExponent < -24) {
        /* No unambiguous representation exists, this float is not a half float
          and is too small to be represented using a half, round off to zero.
          Consistent with the reference implementation. */
        // should be difficult (impossible?) to get here in JS
        dataView.setUint16(0, 0);
      } else if (logicalExponent < -14) {
        /* Offset the remaining decimal places by shifting the significand, the
          value is lost. This is an implementation decision that works around the
          absence of standard half-float in the language. */
        dataView.setUint16(0, (valu32 & 0x80000000) >> 16 | (/* sign bit */1 << 24 + logicalExponent), false);
      } else {
        dataView.setUint16(0, (valu32 & 0x80000000) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
      }
    }
  }
}

/**
 * @param {Uint8Array} ui8a
 * @param {number} pos
 * @returns {number}
 */
function readFloat16(ui8a, pos) {
  if (ui8a.length - pos < 2) {
    throw new Error(`${decodeErrPrefix} not enough data for float16`);
  }
  const half = (ui8a[pos] << 8) + ui8a[pos + 1];
  if (half === 0x7c00) {
    return Infinity;
  }
  if (half === 0xfc00) {
    return -Infinity;
  }
  if (half === 0x7e00) {
    return NaN;
  }
  const exp = half >> 10 & 0x1f;
  const mant = half & 0x3ff;
  let val;
  if (exp === 0) {
    val = mant * 2 ** -24;
  } else if (exp !== 31) {
    val = (mant + 1024) * 2 ** (exp - 25);
    /* c8 ignore next 4 */
  } else {
    // may not be possible to get here
    val = mant === 0 ? Infinity : NaN;
  }
  return half & 0x8000 ? -val : val;
}

/**
 * @param {number} inp
 */
function encodeFloat32(inp) {
  dataView.setFloat32(0, inp, false);
}

/**
 * @param {Uint8Array} ui8a
 * @param {number} pos
 * @returns {number}
 */
function readFloat32(ui8a, pos) {
  if (ui8a.length - pos < 4) {
    throw new Error(`${decodeErrPrefix} not enough data for float32`);
  }
  const offset = (ui8a.byteOffset || 0) + pos;
  return new DataView(ui8a.buffer, offset, 4).getFloat32(0, false);
}

/**
 * @param {number} inp
 */
function encodeFloat64(inp) {
  dataView.setFloat64(0, inp, false);
}

/**
 * @param {Uint8Array} ui8a
 * @param {number} pos
 * @returns {number}
 */
function readFloat64(ui8a, pos) {
  if (ui8a.length - pos < 8) {
    throw new Error(`${decodeErrPrefix} not enough data for float64`);
  }
  const offset = (ui8a.byteOffset || 0) + pos;
  return new DataView(ui8a.buffer, offset, 8).getFloat64(0, false);
}

/**
 * @param {Token} _tok1
 * @param {Token} _tok2
 * @returns {number}
 */
encodeFloat.compareTokens = encodeUint.compareTokens;
/*
encodeFloat.compareTokens = function compareTokens (_tok1, _tok2) {
  return _tok1
  throw new Error(`${encodeErrPrefix} cannot use floats as map keys`)
}
*/

/**
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 */

/**
 * @param {Uint8Array} data
 * @param {number} pos
 * @param {number} minor
 */
function invalidMinor(data, pos, minor) {
  throw new Error(`${decodeErrPrefix} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);
}

/**
 * @param {string} msg
 * @returns {()=>any}
 */
function errorer(msg) {
  return () => {
    throw new Error(`${decodeErrPrefix} ${msg}`);
  };
}

/** @type {((data:Uint8Array, pos:number, minor:number, options?:DecodeOptions) => any)[]} */
const jump = [];

// unsigned integer, 0x00..0x17 (0..23)
for (let i = 0; i <= 0x17; i++) {
  jump[i] = invalidMinor; // uint.decodeUintCompact, handled by quick[]
}
jump[0x18] = decodeUint8; // unsigned integer, one-byte uint8_t follows
jump[0x19] = decodeUint16; // unsigned integer, two-byte uint16_t follows
jump[0x1a] = decodeUint32; // unsigned integer, four-byte uint32_t follows
jump[0x1b] = decodeUint64; // unsigned integer, eight-byte uint64_t follows
jump[0x1c] = invalidMinor;
jump[0x1d] = invalidMinor;
jump[0x1e] = invalidMinor;
jump[0x1f] = invalidMinor;
// negative integer, -1-0x00..-1-0x17 (-1..-24)
for (let i = 0x20; i <= 0x37; i++) {
  jump[i] = invalidMinor; // negintDecode, handled by quick[]
}
jump[0x38] = decodeNegint8; // negative integer, -1-n one-byte uint8_t for n follows
jump[0x39] = decodeNegint16; // negative integer, -1-n two-byte uint16_t for n follows
jump[0x3a] = decodeNegint32; // negative integer, -1-n four-byte uint32_t for follows
jump[0x3b] = decodeNegint64; // negative integer, -1-n eight-byte uint64_t for follows
jump[0x3c] = invalidMinor;
jump[0x3d] = invalidMinor;
jump[0x3e] = invalidMinor;
jump[0x3f] = invalidMinor;
// byte string, 0x00..0x17 bytes follow
for (let i = 0x40; i <= 0x57; i++) {
  jump[i] = decodeBytesCompact;
}
jump[0x58] = decodeBytes8; // byte string, one-byte uint8_t for n, and then n bytes follow
jump[0x59] = decodeBytes16; // byte string, two-byte uint16_t for n, and then n bytes follow
jump[0x5a] = decodeBytes32; // byte string, four-byte uint32_t for n, and then n bytes follow
jump[0x5b] = decodeBytes64; // byte string, eight-byte uint64_t for n, and then n bytes follow
jump[0x5c] = invalidMinor;
jump[0x5d] = invalidMinor;
jump[0x5e] = invalidMinor;
jump[0x5f] = errorer('indefinite length bytes/strings are not supported'); // byte string, byte strings follow, terminated by "break"
// UTF-8 string 0x00..0x17 bytes follow
for (let i = 0x60; i <= 0x77; i++) {
  jump[i] = decodeStringCompact;
}
jump[0x78] = decodeString8; // UTF-8 string, one-byte uint8_t for n, and then n bytes follow
jump[0x79] = decodeString16; // UTF-8 string, two-byte uint16_t for n, and then n bytes follow
jump[0x7a] = decodeString32; // UTF-8 string, four-byte uint32_t for n, and then n bytes follow
jump[0x7b] = decodeString64; // UTF-8 string, eight-byte uint64_t for n, and then n bytes follow
jump[0x7c] = invalidMinor;
jump[0x7d] = invalidMinor;
jump[0x7e] = invalidMinor;
jump[0x7f] = errorer('indefinite length bytes/strings are not supported'); // UTF-8 strings follow, terminated by "break"
// array, 0x00..0x17 data items follow
for (let i = 0x80; i <= 0x97; i++) {
  jump[i] = decodeArrayCompact;
}
jump[0x98] = decodeArray8; // array, one-byte uint8_t for n, and then n data items follow
jump[0x99] = decodeArray16; // array, two-byte uint16_t for n, and then n data items follow
jump[0x9a] = decodeArray32; // array, four-byte uint32_t for n, and then n data items follow
jump[0x9b] = decodeArray64; // array, eight-byte uint64_t for n, and then n data items follow
jump[0x9c] = invalidMinor;
jump[0x9d] = invalidMinor;
jump[0x9e] = invalidMinor;
jump[0x9f] = decodeArrayIndefinite; // array, data items follow, terminated by "break"
// map, 0x00..0x17 pairs of data items follow
for (let i = 0xa0; i <= 0xb7; i++) {
  jump[i] = decodeMapCompact;
}
jump[0xb8] = decodeMap8; // map, one-byte uint8_t for n, and then n pairs of data items follow
jump[0xb9] = decodeMap16; // map, two-byte uint16_t for n, and then n pairs of data items follow
jump[0xba] = decodeMap32; // map, four-byte uint32_t for n, and then n pairs of data items follow
jump[0xbb] = decodeMap64; // map, eight-byte uint64_t for n, and then n pairs of data items follow
jump[0xbc] = invalidMinor;
jump[0xbd] = invalidMinor;
jump[0xbe] = invalidMinor;
jump[0xbf] = decodeMapIndefinite; // map, pairs of data items follow, terminated by "break"
// tags
for (let i = 0xc0; i <= 0xd7; i++) {
  jump[i] = decodeTagCompact;
}
jump[0xd8] = decodeTag8;
jump[0xd9] = decodeTag16;
jump[0xda] = decodeTag32;
jump[0xdb] = decodeTag64;
jump[0xdc] = invalidMinor;
jump[0xdd] = invalidMinor;
jump[0xde] = invalidMinor;
jump[0xdf] = invalidMinor;
// 0xe0..0xf3 simple values, unsupported
for (let i = 0xe0; i <= 0xf3; i++) {
  jump[i] = errorer('simple values are not supported');
}
jump[0xf4] = invalidMinor; // false, handled by quick[]
jump[0xf5] = invalidMinor; // true, handled by quick[]
jump[0xf6] = invalidMinor; // null, handled by quick[]
jump[0xf7] = decodeUndefined; // undefined
jump[0xf8] = errorer('simple values are not supported'); // simple value, one byte follows, unsupported
jump[0xf9] = decodeFloat16; // half-precision float (two-byte IEEE 754)
jump[0xfa] = decodeFloat32; // single-precision float (four-byte IEEE 754)
jump[0xfb] = decodeFloat64; // double-precision float (eight-byte IEEE 754)
jump[0xfc] = invalidMinor;
jump[0xfd] = invalidMinor;
jump[0xfe] = invalidMinor;
jump[0xff] = decodeBreak; // "break" stop code

/** @type {Token[]} */
const quick = [];
// ints <24
for (let i = 0; i < 24; i++) {
  quick[i] = new Token(Type.uint, i, 1);
}
// negints >= -24
for (let i = -1; i >= -24; i--) {
  quick[31 - i] = new Token(Type.negint, i, 1);
}
// empty bytes
quick[0x40] = new Token(Type.bytes, new Uint8Array(0), 1);
// empty string
quick[0x60] = new Token(Type.string, '', 1);
// empty list
quick[0x80] = new Token(Type.array, 0, 1);
// empty map
quick[0xa0] = new Token(Type.map, 0, 1);
// false
quick[0xf4] = new Token(Type.false, false, 1);
// true
quick[0xf5] = new Token(Type.true, true, 1);
// null
quick[0xf6] = new Token(Type.null, null, 1);

/** @returns {TokenTypeEncoder[]} */
function makeCborEncoders() {
  const encoders = [];
  encoders[Type.uint.major] = encodeUint;
  encoders[Type.negint.major] = encodeNegint;
  encoders[Type.bytes.major] = encodeBytes;
  encoders[Type.string.major] = encodeString;
  encoders[Type.array.major] = encodeArray;
  encoders[Type.map.major] = encodeMap;
  encoders[Type.tag.major] = encodeTag;
  encoders[Type.float.major] = encodeFloat;
  return encoders;
}
makeCborEncoders();

/** @implements {Reference} */
class Ref {
  /**
   * @param {object|any[]} obj
   * @param {Reference|undefined} parent
   */
  constructor(obj, parent) {
    this.obj = obj;
    this.parent = parent;
  }

  /**
   * @param {object|any[]} obj
   * @returns {boolean}
   */
  includes(obj) {
    /** @type {Reference|undefined} */
    let p = this;
    do {
      if (p.obj === obj) {
        return true;
      }
    } while (p = p.parent); // eslint-disable-line
    return false;
  }

  /**
   * @param {Reference|undefined} stack
   * @param {object|any[]} obj
   * @returns {Reference}
   */
  static createCheck(stack, obj) {
    if (stack && stack.includes(obj)) {
      throw new Error(`${encodeErrPrefix} object contains circular references`);
    }
    return new Ref(obj, stack);
  }
}
const simpleTokens = {
  null: new Token(Type.null, null),
  undefined: new Token(Type.undefined, undefined),
  true: new Token(Type.true, true),
  false: new Token(Type.false, false),
  emptyArray: new Token(Type.array, 0),
  emptyMap: new Token(Type.map, 0)
};

/** @type {{[typeName: string]: StrictTypeEncoder}} */
const typeEncoders = {
  /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  number(obj, _typ, _options, _refStack) {
    if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
      return new Token(Type.float, obj);
    } else if (obj >= 0) {
      return new Token(Type.uint, obj);
    } else {
      return new Token(Type.negint, obj);
    }
  },
  /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  bigint(obj, _typ, _options, _refStack) {
    if (obj >= BigInt(0)) {
      return new Token(Type.uint, obj);
    } else {
      return new Token(Type.negint, obj);
    }
  },
  /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  Uint8Array(obj, _typ, _options, _refStack) {
    return new Token(Type.bytes, obj);
  },
  /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  string(obj, _typ, _options, _refStack) {
    return new Token(Type.string, obj);
  },
  /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  boolean(obj, _typ, _options, _refStack) {
    return obj ? simpleTokens.true : simpleTokens.false;
  },
  /**
   * @param {any} _obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  null(_obj, _typ, _options, _refStack) {
    return simpleTokens.null;
  },
  /**
   * @param {any} _obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  undefined(_obj, _typ, _options, _refStack) {
    return simpleTokens.undefined;
  },
  /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  ArrayBuffer(obj, _typ, _options, _refStack) {
    return new Token(Type.bytes, new Uint8Array(obj));
  },
  /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} _options
   * @param {Reference} [_refStack]
   * @returns {TokenOrNestedTokens}
   */
  DataView(obj, _typ, _options, _refStack) {
    return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
  },
  /**
   * @param {any} obj
   * @param {string} _typ
   * @param {EncodeOptions} options
   * @param {Reference} [refStack]
   * @returns {TokenOrNestedTokens}
   */
  Array(obj, _typ, options, refStack) {
    if (!obj.length) {
      if (options.addBreakTokens === true) {
        return [simpleTokens.emptyArray, new Token(Type.break)];
      }
      return simpleTokens.emptyArray;
    }
    refStack = Ref.createCheck(refStack, obj);
    const entries = [];
    let i = 0;
    for (const e of obj) {
      entries[i++] = objectToTokens(e, options, refStack);
    }
    if (options.addBreakTokens) {
      return [new Token(Type.array, obj.length), entries, new Token(Type.break)];
    }
    return [new Token(Type.array, obj.length), entries];
  },
  /**
   * @param {any} obj
   * @param {string} typ
   * @param {EncodeOptions} options
   * @param {Reference} [refStack]
   * @returns {TokenOrNestedTokens}
   */
  Object(obj, typ, options, refStack) {
    // could be an Object or a Map
    const isMap = typ !== 'Object';
    // it's slightly quicker to use Object.keys() than Object.entries()
    const keys = isMap ? obj.keys() : Object.keys(obj);
    const length = isMap ? obj.size : keys.length;
    if (!length) {
      if (options.addBreakTokens === true) {
        return [simpleTokens.emptyMap, new Token(Type.break)];
      }
      return simpleTokens.emptyMap;
    }
    refStack = Ref.createCheck(refStack, obj);
    /** @type {TokenOrNestedTokens[]} */
    const entries = [];
    let i = 0;
    for (const key of keys) {
      entries[i++] = [objectToTokens(key, options, refStack), objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)];
    }
    sortMapEntries(entries, options);
    if (options.addBreakTokens) {
      return [new Token(Type.map, length), entries, new Token(Type.break)];
    }
    return [new Token(Type.map, length), entries];
  }
};
typeEncoders.Map = typeEncoders.Object;
typeEncoders.Buffer = typeEncoders.Uint8Array;
for (const typ of 'Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64'.split(' ')) {
  typeEncoders[`${typ}Array`] = typeEncoders.DataView;
}

/**
 * @param {any} obj
 * @param {EncodeOptions} [options]
 * @param {Reference} [refStack]
 * @returns {TokenOrNestedTokens}
 */
function objectToTokens(obj, options = {}, refStack) {
  const typ = is(obj);
  const customTypeEncoder = options && options.typeEncoders && /** @type {OptionalTypeEncoder} */options.typeEncoders[typ] || typeEncoders[typ];
  if (typeof customTypeEncoder === 'function') {
    const tokens = customTypeEncoder(obj, typ, options, refStack);
    if (tokens != null) {
      return tokens;
    }
  }
  const typeEncoder = typeEncoders[typ];
  if (!typeEncoder) {
    throw new Error(`${encodeErrPrefix} unsupported type: ${typ}`);
  }
  return typeEncoder(obj, typ, options, refStack);
}

/*
CBOR key sorting is a mess.

The canonicalisation recommendation from https://tools.ietf.org/html/rfc7049#section-3.9
includes the wording:

> The keys in every map must be sorted lowest value to highest.
> Sorting is performed on the bytes of the representation of the key
> data items without paying attention to the 3/5 bit splitting for
> major types.
> ...
>  *  If two keys have different lengths, the shorter one sorts
      earlier;
>  *  If two keys have the same length, the one with the lower value
      in (byte-wise) lexical order sorts earlier.

1. It is not clear what "bytes of the representation of the key" means: is it
   the CBOR representation, or the binary representation of the object itself?
   Consider the int and uint difference here.
2. It is not clear what "without paying attention to" means: do we include it
   and compare on that? Or do we omit the special prefix byte, (mostly) treating
   the key in its plain binary representation form.

The FIDO 2.0: Client To Authenticator Protocol spec takes the original CBOR
wording and clarifies it according to their understanding.
https://fidoalliance.org/specs/fido-v2.0-rd-20170927/fido-client-to-authenticator-protocol-v2.0-rd-20170927.html#message-encoding

> The keys in every map must be sorted lowest value to highest. Sorting is
> performed on the bytes of the representation of the key data items without
> paying attention to the 3/5 bit splitting for major types. The sorting rules
> are:
>  * If the major types are different, the one with the lower value in numerical
>    order sorts earlier.
>  * If two keys have different lengths, the shorter one sorts earlier;
>  * If two keys have the same length, the one with the lower value in
>    (byte-wise) lexical order sorts earlier.

Some other implementations, such as borc, do a full encode then do a
length-first, byte-wise-second comparison:
https://github.com/dignifiedquire/borc/blob/b6bae8b0bcde7c3976b0f0f0957208095c392a36/src/encoder.js#L358
https://github.com/dignifiedquire/borc/blob/b6bae8b0bcde7c3976b0f0f0957208095c392a36/src/utils.js#L143-L151

This has the benefit of being able to easily handle arbitrary keys, including
complex types (maps and arrays).

We'll opt for the FIDO approach, since it affords some efficies since we don't
need a full encode of each key to determine order and can defer to the types
to determine how to most efficiently order their values (i.e. int and uint
ordering can be done on the numbers, no need for byte-wise, for example).

Recommendation: stick to single key types or you'll get into trouble, and prefer
string keys because it's much simpler that way.
*/

/*
(UPDATE, Dec 2020)
https://tools.ietf.org/html/rfc8949 is the updated CBOR spec and clarifies some
of the questions above with a new recommendation for sorting order being much
closer to what would be expected in other environments (i.e. no length-first
weirdness).
This new sorting order is not yet implemented here but could be added as an
option. "Determinism" (canonicity) is system dependent and it's difficult to
change existing systems that are built with existing expectations. So if a new
ordering is introduced here, the old needs to be kept as well with the user
having the option.
*/

/**
 * @param {TokenOrNestedTokens[]} entries
 * @param {EncodeOptions} options
 */
function sortMapEntries(entries, options) {
  if (options.mapSorter) {
    entries.sort(options.mapSorter);
  }
}

/**
 * @typedef {import('./token.js').Token} Token
 * @typedef {import('../interface').DecodeOptions} DecodeOptions
 * @typedef {import('../interface').DecodeTokenizer} DecodeTokenizer
 */

const defaultDecodeOptions = {
  strict: false,
  allowIndefinite: true,
  allowUndefined: true,
  allowBigInt: true
};

/**
 * @implements {DecodeTokenizer}
 */
class Tokeniser {
  /**
   * @param {Uint8Array} data
   * @param {DecodeOptions} options
   */
  constructor(data, options = {}) {
    this._pos = 0;
    this.data = data;
    this.options = options;
  }
  pos() {
    return this._pos;
  }
  done() {
    return this._pos >= this.data.length;
  }
  next() {
    const byt = this.data[this._pos];
    let token = quick[byt];
    if (token === undefined) {
      const decoder = jump[byt];
      /* c8 ignore next 4 */
      // if we're here then there's something wrong with our jump or quick lists!
      if (!decoder) {
        throw new Error(`${decodeErrPrefix} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, '0')})`);
      }
      const minor = byt & 31;
      token = decoder(this.data, this._pos, minor, this.options);
    }
    // @ts-ignore we get to assume encodedLength is set (crossing fingers slightly)
    this._pos += token.encodedLength;
    return token;
  }
}
const DONE = Symbol.for('DONE');
const BREAK = Symbol.for('BREAK');

/**
 * @param {Token} token
 * @param {DecodeTokenizer} tokeniser
 * @param {DecodeOptions} options
 * @returns {any|BREAK|DONE}
 */
function tokenToArray(token, tokeniser, options) {
  const arr = [];
  for (let i = 0; i < token.value; i++) {
    const value = tokensToObject(tokeniser, options);
    if (value === BREAK) {
      if (token.value === Infinity) {
        // normal end to indefinite length array
        break;
      }
      throw new Error(`${decodeErrPrefix} got unexpected break to lengthed array`);
    }
    if (value === DONE) {
      throw new Error(`${decodeErrPrefix} found array but not enough entries (got ${i}, expected ${token.value})`);
    }
    arr[i] = value;
  }
  return arr;
}

/**
 * @param {Token} token
 * @param {DecodeTokenizer} tokeniser
 * @param {DecodeOptions} options
 * @returns {any|BREAK|DONE}
 */
function tokenToMap(token, tokeniser, options) {
  const useMaps = options.useMaps === true;
  const obj = useMaps ? undefined : {};
  const m = useMaps ? new Map() : undefined;
  for (let i = 0; i < token.value; i++) {
    const key = tokensToObject(tokeniser, options);
    if (key === BREAK) {
      if (token.value === Infinity) {
        // normal end to indefinite length map
        break;
      }
      throw new Error(`${decodeErrPrefix} got unexpected break to lengthed map`);
    }
    if (key === DONE) {
      throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no key], expected ${token.value})`);
    }
    if (useMaps !== true && typeof key !== 'string') {
      throw new Error(`${decodeErrPrefix} non-string keys not supported (got ${typeof key})`);
    }
    if (options.rejectDuplicateMapKeys === true) {
      // @ts-ignore
      if (useMaps && m.has(key) || !useMaps && key in obj) {
        throw new Error(`${decodeErrPrefix} found repeat map key "${key}"`);
      }
    }
    const value = tokensToObject(tokeniser, options);
    if (value === DONE) {
      throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no value], expected ${token.value})`);
    }
    if (useMaps) {
      // @ts-ignore TODO reconsider this .. maybe needs to be strict about key types
      m.set(key, value);
    } else {
      // @ts-ignore TODO reconsider this .. maybe needs to be strict about key types
      obj[key] = value;
    }
  }
  // @ts-ignore c'mon man
  return useMaps ? m : obj;
}

/**
 * @param {DecodeTokenizer} tokeniser
 * @param {DecodeOptions} options
 * @returns {any|BREAK|DONE}
 */
function tokensToObject(tokeniser, options) {
  // should we support array as an argument?
  // check for tokenIter[Symbol.iterator] and replace tokenIter with what that returns?
  if (tokeniser.done()) {
    return DONE;
  }
  const token = tokeniser.next();
  if (token.type === Type.break) {
    return BREAK;
  }
  if (token.type.terminal) {
    return token.value;
  }
  if (token.type === Type.array) {
    return tokenToArray(token, tokeniser, options);
  }
  if (token.type === Type.map) {
    return tokenToMap(token, tokeniser, options);
  }
  if (token.type === Type.tag) {
    if (options.tags && typeof options.tags[token.value] === 'function') {
      const tagged = tokensToObject(tokeniser, options);
      return options.tags[token.value](tagged);
    }
    throw new Error(`${decodeErrPrefix} tag not supported (${token.value})`);
  }
  /* c8 ignore next */
  throw new Error('unsupported');
}

/**
 * @param {Uint8Array} data
 * @param {DecodeOptions} [options]
 * @returns {[any, Uint8Array]}
 */
function decodeFirst(data, options) {
  if (!(data instanceof Uint8Array)) {
    throw new Error(`${decodeErrPrefix} data to decode must be a Uint8Array`);
  }
  options = Object.assign({}, defaultDecodeOptions, options);
  const tokeniser = options.tokenizer || new Tokeniser(data, options);
  const decoded = tokensToObject(tokeniser, options);
  if (decoded === DONE) {
    throw new Error(`${decodeErrPrefix} did not find any content to decode`);
  }
  if (decoded === BREAK) {
    throw new Error(`${decodeErrPrefix} got unexpected break`);
  }
  return [decoded, data.subarray(tokeniser.pos())];
}

/**
 * @param {Uint8Array} data
 * @param {DecodeOptions} [options]
 * @returns {any}
 */
function decode$a(data, options) {
  const [decoded, remainder] = decodeFirst(data, options);
  if (remainder.length > 0) {
    throw new Error(`${decodeErrPrefix} too many terminals, data makes no sense`);
  }
  return decoded;
}

function equals$3(aa, bb) {
  if (aa === bb) return true;
  if (aa.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii = 0; ii < aa.byteLength; ii++) {
    if (aa[ii] !== bb[ii]) {
      return false;
    }
  }
  return true;
}
function coerce$1(o) {
  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;
  if (o instanceof ArrayBuffer) return new Uint8Array(o);
  if (ArrayBuffer.isView(o)) {
    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
  }
  throw new Error('Unknown type, must be binary type');
}

/* eslint-disable */
// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
/**
 * @param {string} ALPHABET
 * @param {any} name
 */
function base$1(ALPHABET, name) {
  if (ALPHABET.length >= 255) {
    throw new TypeError('Alphabet too long');
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x + ' is ambiguous');
    }
    BASE_MAP[xc] = i;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
  /**
   * @param {any[] | Iterable<number>} source
   */
  function encode(source) {
    // @ts-ignore
    if (source instanceof Uint8Array) ;else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError('Expected Uint8Array');
    }
    if (source.length === 0) {
      return '';
    }
    // Skip & count leading zeroes.
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    // Allocate enough space in big-endian base58 representation.
    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size);
    // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin];
      // Apply "b58 = b58 * 256 + ch".
      var i = 0;
      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }
      length = i;
      pbegin++;
    }
    // Skip leading zeroes in base58 result.
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
    // Translate the result into a string.
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) {
      str += ALPHABET.charAt(b58[it2]);
    }
    return str;
  }
  /**
   * @param {string | string[]} source
   */
  function decodeUnsafe(source) {
    if (typeof source !== 'string') {
      throw new TypeError('Expected String');
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    // Skip leading spaces.
    if (source[psz] === ' ') {
      return;
    }
    // Skip and count leading '1's.
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    // Allocate enough space in big-endian base256 representation.
    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size);
    // Process the characters.
    while (source[psz]) {
      // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)];
      // Invalid character
      if (carry === 255) {
        return;
      }
      var i = 0;
      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }
      length = i;
      psz++;
    }
    // Skip trailing spaces.
    if (source[psz] === ' ') {
      return;
    }
    // Skip leading zeroes in b256.
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size - it4));
    var j = zeroes;
    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }
    return vch;
  }
  /**
   * @param {string | string[]} string
   */
  function decode(string) {
    var buffer = decodeUnsafe(string);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name} character`);
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
}
var src$1 = base$1;
var _brrp__multiformats_scope_baseX$1 = src$1;

/**
 * Class represents both BaseEncoder and MultibaseEncoder meaning it
 * can be used to encode to multibase or base encode without multibase
 * prefix.
 */
let Encoder$1 = class Encoder {
  name;
  prefix;
  baseEncode;
  constructor(name, prefix, baseEncode) {
    this.name = name;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error('Unknown type, must be binary type');
    }
  }
};
/**
 * Class represents both BaseDecoder and MultibaseDecoder so it could be used
 * to decode multibases (with matching prefix) or just base decode strings
 * with corresponding base encoding.
 */
let Decoder$1 = class Decoder {
  name;
  prefix;
  baseDecode;
  prefixCodePoint;
  constructor(name, prefix, baseDecode) {
    this.name = name;
    this.prefix = prefix;
    const prefixCodePoint = prefix.codePointAt(0);
    /* c8 ignore next 3 */
    if (prefixCodePoint === undefined) {
      throw new Error('Invalid prefix character');
    }
    this.prefixCodePoint = prefixCodePoint;
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === 'string') {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error('Can only multibase decode strings');
    }
  }
  or(decoder) {
    return or$1(this, decoder);
  }
};
let ComposedDecoder$1 = class ComposedDecoder {
  decoders;
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or$1(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder != null) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
function or$1(left, right) {
  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
  return new ComposedDecoder$1({
    ...(left.decoders ?? {
      [left.prefix]: left
    }),
    ...(right.decoders ?? {
      [right.prefix]: right
    })
  });
}
let Codec$1 = class Codec {
  name;
  prefix;
  baseEncode;
  baseDecode;
  encoder;
  decoder;
  constructor(name, prefix, baseEncode, baseDecode) {
    this.name = name;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder$1(name, prefix, baseEncode);
    this.decoder = new Decoder$1(name, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
function from$1({
  name,
  prefix,
  encode,
  decode
}) {
  return new Codec$1(name, prefix, encode, decode);
}
function baseX$1({
  name,
  prefix,
  alphabet
}) {
  const {
    encode,
    decode
  } = _brrp__multiformats_scope_baseX$1(alphabet, name);
  return from$1({
    prefix,
    name,
    encode,
    decode: text => coerce$1(decode(text))
  });
}
function decode$9(string, alphabet, bitsPerChar, name) {
  // Build the character lookup table:
  const codes = {};
  for (let i = 0; i < alphabet.length; ++i) {
    codes[alphabet[i]] = i;
  }
  // Count the padding bytes:
  let end = string.length;
  while (string[end - 1] === '=') {
    --end;
  }
  // Allocate the output:
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  // Parse the data:
  let bits = 0; // Number of bits currently in the buffer
  let buffer = 0; // Bits waiting to be written out, MSB first
  let written = 0; // Next byte to write
  for (let i = 0; i < end; ++i) {
    // Read one character from the string:
    const value = codes[string[i]];
    if (value === undefined) {
      throw new SyntaxError(`Non-${name} character`);
    }
    // Append the bits to the buffer:
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    // Write out some bits if the buffer has a byte's worth:
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 0xff & buffer >> bits;
    }
  }
  // Verify that we have received just enough bits:
  if (bits >= bitsPerChar || (0xff & buffer << 8 - bits) !== 0) {
    throw new SyntaxError('Unexpected end of data');
  }
  return out;
}
function encode$3(data, alphabet, bitsPerChar) {
  const pad = alphabet[alphabet.length - 1] === '=';
  const mask = (1 << bitsPerChar) - 1;
  let out = '';
  let bits = 0; // Number of bits currently in the buffer
  let buffer = 0; // Bits waiting to be written out, MSB first
  for (let i = 0; i < data.length; ++i) {
    // Slurp data into the buffer:
    buffer = buffer << 8 | data[i];
    bits += 8;
    // Write out as much as we can:
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet[mask & buffer >> bits];
    }
  }
  // Partial character:
  if (bits !== 0) {
    out += alphabet[mask & buffer << bitsPerChar - bits];
  }
  // Add padding characters until we hit a byte boundary:
  if (pad) {
    while ((out.length * bitsPerChar & 7) !== 0) {
      out += '=';
    }
  }
  return out;
}
/**
 * RFC4648 Factory
 */
function rfc4648$1({
  name,
  prefix,
  bitsPerChar,
  alphabet
}) {
  return from$1({
    prefix,
    name,
    encode(input) {
      return encode$3(input, alphabet, bitsPerChar);
    },
    decode(input) {
      return decode$9(input, alphabet, bitsPerChar, name);
    }
  });
}

const base32$1 = rfc4648$1({
  prefix: 'b',
  name: 'base32',
  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
  bitsPerChar: 5
});
rfc4648$1({
  prefix: 'B',
  name: 'base32upper',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
  bitsPerChar: 5
});
rfc4648$1({
  prefix: 'c',
  name: 'base32pad',
  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
  bitsPerChar: 5
});
rfc4648$1({
  prefix: 'C',
  name: 'base32padupper',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
  bitsPerChar: 5
});
rfc4648$1({
  prefix: 'v',
  name: 'base32hex',
  alphabet: '0123456789abcdefghijklmnopqrstuv',
  bitsPerChar: 5
});
rfc4648$1({
  prefix: 'V',
  name: 'base32hexupper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
  bitsPerChar: 5
});
rfc4648$1({
  prefix: 't',
  name: 'base32hexpad',
  alphabet: '0123456789abcdefghijklmnopqrstuv=',
  bitsPerChar: 5
});
rfc4648$1({
  prefix: 'T',
  name: 'base32hexpadupper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
  bitsPerChar: 5
});
rfc4648$1({
  prefix: 'h',
  name: 'base32z',
  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
  bitsPerChar: 5
});

const base36$1 = baseX$1({
  prefix: 'k',
  name: 'base36',
  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
});
baseX$1({
  prefix: 'K',
  name: 'base36upper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
});

const base58btc$1 = baseX$1({
  name: 'base58btc',
  prefix: 'z',
  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
});
baseX$1({
  name: 'base58flickr',
  prefix: 'Z',
  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
});

/* eslint-disable */
var encode_1$2 = encode$2;
var MSB$2 = 0x80,
  MSBALL$1 = -128,
  INT$1 = Math.pow(2, 31);
/**
 * @param {number} num
 * @param {number[]} out
 * @param {number} offset
 */
function encode$2(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT$1) {
    out[offset++] = num & 0xFF | MSB$2;
    num /= 128;
  }
  while (num & MSBALL$1) {
    out[offset++] = num & 0xFF | MSB$2;
    num >>>= 7;
  }
  out[offset] = num | 0;
  // @ts-ignore
  encode$2.bytes = offset - oldOffset + 1;
  return out;
}
var decode$8 = read$1;
var MSB$1$1 = 0x80,
  REST$1$1 = 0x7F;
/**
 * @param {string | any[]} buf
 * @param {number} offset
 */
function read$1(buf, offset) {
  var res = 0,
    offset = offset || 0,
    shift = 0,
    counter = offset,
    b,
    l = buf.length;
  do {
    if (counter >= l) {
      // @ts-ignore
      read$1.bytes = 0;
      throw new RangeError('Could not decode varint');
    }
    b = buf[counter++];
    res += shift < 28 ? (b & REST$1$1) << shift : (b & REST$1$1) * Math.pow(2, shift);
    shift += 7;
  } while (b >= MSB$1$1);
  // @ts-ignore
  read$1.bytes = counter - offset;
  return res;
}
var N1$1 = Math.pow(2, 7);
var N2$1 = Math.pow(2, 14);
var N3$1 = Math.pow(2, 21);
var N4$1 = Math.pow(2, 28);
var N5$1 = Math.pow(2, 35);
var N6$1 = Math.pow(2, 42);
var N7$1 = Math.pow(2, 49);
var N8$1 = Math.pow(2, 56);
var N9$1 = Math.pow(2, 63);
var length$2 = function (/** @type {number} */value) {
  return value < N1$1 ? 1 : value < N2$1 ? 2 : value < N3$1 ? 3 : value < N4$1 ? 4 : value < N5$1 ? 5 : value < N6$1 ? 6 : value < N7$1 ? 7 : value < N8$1 ? 8 : value < N9$1 ? 9 : 10;
};
var varint$3 = {
  encode: encode_1$2,
  decode: decode$8,
  encodingLength: length$2
};
var _brrp_varint$1 = varint$3;

function decode$7(data, offset = 0) {
  const code = _brrp_varint$1.decode(data, offset);
  return [code, _brrp_varint$1.decode.bytes];
}
function encodeTo$1(int, target, offset = 0) {
  _brrp_varint$1.encode(int, target, offset);
  return target;
}
function encodingLength$1(int) {
  return _brrp_varint$1.encodingLength(int);
}

/**
 * Creates a multihash digest.
 */
function create$1(code, digest) {
  const size = digest.byteLength;
  const sizeOffset = encodingLength$1(code);
  const digestOffset = sizeOffset + encodingLength$1(size);
  const bytes = new Uint8Array(digestOffset + size);
  encodeTo$1(code, bytes, 0);
  encodeTo$1(size, bytes, sizeOffset);
  bytes.set(digest, digestOffset);
  return new Digest$1(code, size, digest, bytes);
}
/**
 * Turns bytes representation of multihash digest into an instance.
 */
function decode$6(multihash) {
  const bytes = coerce$1(multihash);
  const [code, sizeOffset] = decode$7(bytes);
  const [size, digestOffset] = decode$7(bytes.subarray(sizeOffset));
  const digest = bytes.subarray(sizeOffset + digestOffset);
  if (digest.byteLength !== size) {
    throw new Error('Incorrect length');
  }
  return new Digest$1(code, size, digest, bytes);
}
function equals$2(a, b) {
  if (a === b) {
    return true;
  } else {
    const data = b;
    return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equals$3(a.bytes, data.bytes);
  }
}
/**
 * Represents a multihash digest which carries information about the
 * hashing algorithm and an actual hash digest.
 */
let Digest$1 = class Digest {
  code;
  size;
  digest;
  bytes;
  /**
   * Creates a multihash digest.
   */
  constructor(code, size, digest, bytes) {
    this.code = code;
    this.size = size;
    this.digest = digest;
    this.bytes = bytes;
  }
};

function format$2(link, base) {
  const {
    bytes,
    version
  } = link;
  switch (version) {
    case 0:
      return toStringV0$1(bytes, baseCache$1(link), base ?? base58btc$1.encoder);
    default:
      return toStringV1$1(bytes, baseCache$1(link), base ?? base32$1.encoder);
  }
}
const cache$1 = new WeakMap();
function baseCache$1(cid) {
  const baseCache = cache$1.get(cid);
  if (baseCache == null) {
    const baseCache = new Map();
    cache$1.set(cid, baseCache);
    return baseCache;
  }
  return baseCache;
}
let CID$1 = class CID {
  code;
  version;
  multihash;
  bytes;
  '/';
  /**
   * @param version - Version of the CID
   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
   * @param multihash - (Multi)hash of the of the content.
   */
  constructor(version, code, multihash, bytes) {
    this.code = code;
    this.version = version;
    this.multihash = multihash;
    this.bytes = bytes;
    // flag to serializers that this is a CID and
    // should be treated specially
    this['/'] = bytes;
  }
  /**
   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`
   * please either use `CID.asCID(cid)` or switch to new signalling mechanism
   *
   * @deprecated
   */
  get asCID() {
    return this;
  }
  // ArrayBufferView
  get byteOffset() {
    return this.bytes.byteOffset;
  }
  // ArrayBufferView
  get byteLength() {
    return this.bytes.byteLength;
  }
  toV0() {
    switch (this.version) {
      case 0:
        {
          return this;
        }
      case 1:
        {
          const {
            code,
            multihash
          } = this;
          if (code !== DAG_PB_CODE$1) {
            throw new Error('Cannot convert a non dag-pb CID to CIDv0');
          }
          // sha2-256
          if (multihash.code !== SHA_256_CODE$1) {
            throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
          }
          return CID.createV0(multihash);
        }
      default:
        {
          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
    }
  }
  toV1() {
    switch (this.version) {
      case 0:
        {
          const {
            code,
            digest
          } = this.multihash;
          const multihash = create$1(code, digest);
          return CID.createV1(this.code, multihash);
        }
      case 1:
        {
          return this;
        }
      default:
        {
          throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);
        }
    }
  }
  equals(other) {
    return CID.equals(this, other);
  }
  static equals(self, other) {
    const unknown = other;
    return unknown != null && self.code === unknown.code && self.version === unknown.version && equals$2(self.multihash, unknown.multihash);
  }
  toString(base) {
    return format$2(this, base);
  }
  toJSON() {
    return {
      '/': format$2(this)
    };
  }
  link() {
    return this;
  }
  [Symbol.toStringTag] = 'CID';
  // Legacy
  [Symbol.for('nodejs.util.inspect.custom')]() {
    return `CID(${this.toString()})`;
  }
  /**
   * Takes any input `value` and returns a `CID` instance if it was
   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`
   * it will return value back. If `value` is not instance of this CID
   * class, but is compatible CID it will return new instance of this
   * `CID` class. Otherwise returns null.
   *
   * This allows two different incompatible versions of CID library to
   * co-exist and interop as long as binary interface is compatible.
   */
  static asCID(input) {
    if (input == null) {
      return null;
    }
    const value = input;
    if (value instanceof CID) {
      // If value is instance of CID then we're all set.
      return value;
    } else if (value['/'] != null && value['/'] === value.bytes || value.asCID === value) {
      // If value isn't instance of this CID class but `this.asCID === this` or
      // `value['/'] === value.bytes` is true it is CID instance coming from a
      // different implementation (diff version or duplicate). In that case we
      // rebase it to this `CID` implementation so caller is guaranteed to get
      // instance with expected API.
      const {
        version,
        code,
        multihash,
        bytes
      } = value;
      return new CID(version, code, multihash, bytes ?? encodeCID$1(version, code, multihash.bytes));
    } else if (value[cidSymbol$1] === true) {
      // If value is a CID from older implementation that used to be tagged via
      // symbol we still rebase it to the this `CID` implementation by
      // delegating that to a constructor.
      const {
        version,
        multihash,
        code
      } = value;
      const digest = decode$6(multihash);
      return CID.create(version, code, digest);
    } else {
      // Otherwise value is not a CID (or an incompatible version of it) in
      // which case we return `null`.
      return null;
    }
  }
  /**
   * @param version - Version of the CID
   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
   * @param digest - (Multi)hash of the of the content.
   */
  static create(version, code, digest) {
    if (typeof code !== 'number') {
      throw new Error('String codecs are no longer supported');
    }
    if (!(digest.bytes instanceof Uint8Array)) {
      throw new Error('Invalid digest');
    }
    switch (version) {
      case 0:
        {
          if (code !== DAG_PB_CODE$1) {
            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE$1}) block encoding`);
          } else {
            return new CID(version, code, digest, digest.bytes);
          }
        }
      case 1:
        {
          const bytes = encodeCID$1(version, code, digest.bytes);
          return new CID(version, code, digest, bytes);
        }
      default:
        {
          throw new Error('Invalid version');
        }
    }
  }
  /**
   * Simplified version of `create` for CIDv0.
   */
  static createV0(digest) {
    return CID.create(0, DAG_PB_CODE$1, digest);
  }
  /**
   * Simplified version of `create` for CIDv1.
   *
   * @param code - Content encoding format code.
   * @param digest - Multihash of the content.
   */
  static createV1(code, digest) {
    return CID.create(1, code, digest);
  }
  /**
   * Decoded a CID from its binary representation. The byte array must contain
   * only the CID with no additional bytes.
   *
   * An error will be thrown if the bytes provided do not contain a valid
   * binary representation of a CID.
   */
  static decode(bytes) {
    const [cid, remainder] = CID.decodeFirst(bytes);
    if (remainder.length !== 0) {
      throw new Error('Incorrect length');
    }
    return cid;
  }
  /**
   * Decoded a CID from its binary representation at the beginning of a byte
   * array.
   *
   * Returns an array with the first element containing the CID and the second
   * element containing the remainder of the original byte array. The remainder
   * will be a zero-length byte array if the provided bytes only contained a
   * binary CID representation.
   */
  static decodeFirst(bytes) {
    const specs = CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce$1(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error('Incorrect length');
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest = new Digest$1(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);
    return [cid, bytes.subarray(specs.size)];
  }
  /**
   * Inspect the initial bytes of a CID to determine its properties.
   *
   * Involves decoding up to 4 varints. Typically this will require only 4 to 6
   * bytes but for larger multicodec code values and larger multihash digest
   * lengths these varints can be quite large. It is recommended that at least
   * 10 bytes be made available in the `initialBytes` argument for a complete
   * inspection.
   */
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i, length] = decode$7(initialBytes.subarray(offset));
      offset += length;
      return i;
    };
    let version = next();
    let codec = DAG_PB_CODE$1;
    if (version === 18) {
      // CIDv0
      version = 0;
      offset = 0;
    } else {
      codec = next();
    }
    if (version !== 0 && version !== 1) {
      throw new RangeError(`Invalid CID version ${version}`);
    }
    const prefixSize = offset;
    const multihashCode = next(); // multihash code
    const digestSize = next(); // multihash length
    const size = offset + digestSize;
    const multihashSize = size - prefixSize;
    return {
      version,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size
    };
  }
  /**
   * Takes cid in a string representation and creates an instance. If `base`
   * decoder is not provided will use a default from the configuration. It will
   * throw an error if encoding of the CID is not compatible with supplied (or
   * a default decoder).
   */
  static parse(source, base) {
    const [prefix, bytes] = parseCIDtoBytes$1(source, base);
    const cid = CID.decode(bytes);
    if (cid.version === 0 && source[0] !== 'Q') {
      throw Error('Version 0 CID string must not include multibase prefix');
    }
    // Cache string representation to avoid computing it on `this.toString()`
    baseCache$1(cid).set(prefix, source);
    return cid;
  }
};
function parseCIDtoBytes$1(source, base) {
  switch (source[0]) {
    // CIDv0 is parsed differently
    case 'Q':
      {
        const decoder = base ?? base58btc$1;
        return [base58btc$1.prefix, decoder.decode(`${base58btc$1.prefix}${source}`)];
      }
    case base58btc$1.prefix:
      {
        const decoder = base ?? base58btc$1;
        return [base58btc$1.prefix, decoder.decode(source)];
      }
    case base32$1.prefix:
      {
        const decoder = base ?? base32$1;
        return [base32$1.prefix, decoder.decode(source)];
      }
    case base36$1.prefix:
      {
        const decoder = base ?? base36$1;
        return [base36$1.prefix, decoder.decode(source)];
      }
    default:
      {
        if (base == null) {
          throw Error('To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided');
        }
        return [source[0], base.decode(source)];
      }
  }
}
function toStringV0$1(bytes, cache, base) {
  const {
    prefix
  } = base;
  if (prefix !== base58btc$1.prefix) {
    throw Error(`Cannot string encode V0 in ${base.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid = base.encode(bytes).slice(1);
    cache.set(prefix, cid);
    return cid;
  } else {
    return cid;
  }
}
function toStringV1$1(bytes, cache, base) {
  const {
    prefix
  } = base;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid = base.encode(bytes);
    cache.set(prefix, cid);
    return cid;
  } else {
    return cid;
  }
}
const DAG_PB_CODE$1 = 0x70;
const SHA_256_CODE$1 = 0x12;
function encodeCID$1(version, code, multihash) {
  const codeOffset = encodingLength$1(version);
  const hashOffset = codeOffset + encodingLength$1(code);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo$1(version, bytes, 0);
  encodeTo$1(code, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
}
const cidSymbol$1 = Symbol.for('@ipld/js-cid/CID');

// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692
const CID_CBOR_TAG = 42;

/**
 * @template T
 * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView
 */

/**
 * @template T
 * @typedef {import('multiformats/codecs/interface').ArrayBufferView<T>} ArrayBufferView
 */

/**
 * @template T
 * @param {ByteView<T> | ArrayBufferView<T>} buf
 * @returns {ByteView<T>}
 */
function toByteView(buf) {
  if (buf instanceof ArrayBuffer) {
    return new Uint8Array(buf, 0, buf.byteLength);
  }
  return buf;
}

/**
 * cidEncoder will receive all Objects during encode, it needs to filter out
 * anything that's not a CID and return `null` for that so it's encoded as
 * normal.
 *
 * @param {any} obj
 * @returns {cborg.Token[]|null}
 */
function cidEncoder(obj) {
  if (obj.asCID !== obj && obj['/'] !== obj.bytes) {
    return null; // any other kind of object
  }
  const cid = CID$1.asCID(obj);
  /* c8 ignore next 4 */
  // very unlikely case, and it'll probably throw a recursion error in cborg
  if (!cid) {
    return null;
  }
  const bytes = new Uint8Array(cid.bytes.byteLength + 1);
  bytes.set(cid.bytes, 1); // prefix is 0x00, for historical reasons
  return [new Token(Type.tag, CID_CBOR_TAG), new Token(Type.bytes, bytes)];
}

// eslint-disable-next-line jsdoc/require-returns-check
/**
 * Intercept all `undefined` values from an object walk and reject the entire
 * object if we find one.
 *
 * @returns {null}
 */
function undefinedEncoder() {
  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');
}

/**
 * Intercept all `number` values from an object walk and reject the entire
 * object if we find something that doesn't fit the IPLD data model (NaN &
 * Infinity).
 *
 * @param {number} num
 * @returns {null}
 */
function numberEncoder(num) {
  if (Number.isNaN(num)) {
    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');
  }
  if (num === Infinity || num === -Infinity) {
    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');
  }
  return null;
}
const _encodeOptions = {
  float64: true,
  typeEncoders: {
    Object: cidEncoder,
    undefined: undefinedEncoder,
    number: numberEncoder
  }
};
({
  ..._encodeOptions,
  typeEncoders: {
    ..._encodeOptions.typeEncoders
  }
});

/**
 * @param {Uint8Array} bytes
 * @returns {CID}
 */
function cidDecoder(bytes) {
  if (bytes[0] !== 0) {
    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');
  }
  return CID$1.decode(bytes.subarray(1)); // ignore leading 0x00
}
const _decodeOptions = {
  allowIndefinite: false,
  coerceUndefinedToNull: true,
  allowNaN: false,
  allowInfinity: false,
  allowBigInt: true,
  // this will lead to BigInt for ints outside of
  // safe-integer range, which may surprise users
  strict: true,
  useMaps: false,
  rejectDuplicateMapKeys: true,
  /** @type {import('cborg').TagDecoder[]} */
  tags: []
};
_decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
({
  ..._decodeOptions,
  tags: _decodeOptions.tags.slice()
});

/**
 * @template T
 * @param {ByteView<T> | ArrayBufferView<T>} data
 * @returns {T}
 */
const decode$5 = data => decode$a(toByteView(data), _decodeOptions);

function equals$1(aa, bb) {
  if (aa === bb) return true;
  if (aa.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii = 0; ii < aa.byteLength; ii++) {
    if (aa[ii] !== bb[ii]) {
      return false;
    }
  }
  return true;
}
function coerce(o) {
  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;
  if (o instanceof ArrayBuffer) return new Uint8Array(o);
  if (ArrayBuffer.isView(o)) {
    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
  }
  throw new Error('Unknown type, must be binary type');
}

/* eslint-disable */
// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
/**
 * @param {string} ALPHABET
 * @param {any} name
 */
function base(ALPHABET, name) {
  if (ALPHABET.length >= 255) {
    throw new TypeError('Alphabet too long');
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x + ' is ambiguous');
    }
    BASE_MAP[xc] = i;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
  /**
   * @param {any[] | Iterable<number>} source
   */
  function encode(source) {
    // @ts-ignore
    if (source instanceof Uint8Array) ;else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError('Expected Uint8Array');
    }
    if (source.length === 0) {
      return '';
    }
    // Skip & count leading zeroes.
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    // Allocate enough space in big-endian base58 representation.
    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size);
    // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin];
      // Apply "b58 = b58 * 256 + ch".
      var i = 0;
      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }
      length = i;
      pbegin++;
    }
    // Skip leading zeroes in base58 result.
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
    // Translate the result into a string.
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) {
      str += ALPHABET.charAt(b58[it2]);
    }
    return str;
  }
  /**
   * @param {string | string[]} source
   */
  function decodeUnsafe(source) {
    if (typeof source !== 'string') {
      throw new TypeError('Expected String');
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    // Skip leading spaces.
    if (source[psz] === ' ') {
      return;
    }
    // Skip and count leading '1's.
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    // Allocate enough space in big-endian base256 representation.
    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size);
    // Process the characters.
    while (source[psz]) {
      // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)];
      // Invalid character
      if (carry === 255) {
        return;
      }
      var i = 0;
      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }
      length = i;
      psz++;
    }
    // Skip trailing spaces.
    if (source[psz] === ' ') {
      return;
    }
    // Skip leading zeroes in b256.
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size - it4));
    var j = zeroes;
    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }
    return vch;
  }
  /**
   * @param {string | string[]} string
   */
  function decode(string) {
    var buffer = decodeUnsafe(string);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name} character`);
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
}
var src = base;
var _brrp__multiformats_scope_baseX = src;

/**
 * Class represents both BaseEncoder and MultibaseEncoder meaning it
 * can be used to encode to multibase or base encode without multibase
 * prefix.
 */
class Encoder {
  name;
  prefix;
  baseEncode;
  constructor(name, prefix, baseEncode) {
    this.name = name;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error('Unknown type, must be binary type');
    }
  }
}
/**
 * Class represents both BaseDecoder and MultibaseDecoder so it could be used
 * to decode multibases (with matching prefix) or just base decode strings
 * with corresponding base encoding.
 */
class Decoder {
  name;
  prefix;
  baseDecode;
  prefixCodePoint;
  constructor(name, prefix, baseDecode) {
    this.name = name;
    this.prefix = prefix;
    const prefixCodePoint = prefix.codePointAt(0);
    /* c8 ignore next 3 */
    if (prefixCodePoint === undefined) {
      throw new Error('Invalid prefix character');
    }
    this.prefixCodePoint = prefixCodePoint;
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === 'string') {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error('Can only multibase decode strings');
    }
  }
  or(decoder) {
    return or(this, decoder);
  }
}
class ComposedDecoder {
  decoders;
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder != null) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
}
function or(left, right) {
  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
  return new ComposedDecoder({
    ...(left.decoders ?? {
      [left.prefix]: left
    }),
    ...(right.decoders ?? {
      [right.prefix]: right
    })
  });
}
class Codec {
  name;
  prefix;
  baseEncode;
  baseDecode;
  encoder;
  decoder;
  constructor(name, prefix, baseEncode, baseDecode) {
    this.name = name;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder(name, prefix, baseEncode);
    this.decoder = new Decoder(name, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
}
function from({
  name,
  prefix,
  encode,
  decode
}) {
  return new Codec(name, prefix, encode, decode);
}
function baseX({
  name,
  prefix,
  alphabet
}) {
  const {
    encode,
    decode
  } = _brrp__multiformats_scope_baseX(alphabet, name);
  return from({
    prefix,
    name,
    encode,
    decode: text => coerce(decode(text))
  });
}
function decode$4(string, alphabet, bitsPerChar, name) {
  // Build the character lookup table:
  const codes = {};
  for (let i = 0; i < alphabet.length; ++i) {
    codes[alphabet[i]] = i;
  }
  // Count the padding bytes:
  let end = string.length;
  while (string[end - 1] === '=') {
    --end;
  }
  // Allocate the output:
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  // Parse the data:
  let bits = 0; // Number of bits currently in the buffer
  let buffer = 0; // Bits waiting to be written out, MSB first
  let written = 0; // Next byte to write
  for (let i = 0; i < end; ++i) {
    // Read one character from the string:
    const value = codes[string[i]];
    if (value === undefined) {
      throw new SyntaxError(`Non-${name} character`);
    }
    // Append the bits to the buffer:
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    // Write out some bits if the buffer has a byte's worth:
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 0xff & buffer >> bits;
    }
  }
  // Verify that we have received just enough bits:
  if (bits >= bitsPerChar || (0xff & buffer << 8 - bits) !== 0) {
    throw new SyntaxError('Unexpected end of data');
  }
  return out;
}
function encode$1(data, alphabet, bitsPerChar) {
  const pad = alphabet[alphabet.length - 1] === '=';
  const mask = (1 << bitsPerChar) - 1;
  let out = '';
  let bits = 0; // Number of bits currently in the buffer
  let buffer = 0; // Bits waiting to be written out, MSB first
  for (let i = 0; i < data.length; ++i) {
    // Slurp data into the buffer:
    buffer = buffer << 8 | data[i];
    bits += 8;
    // Write out as much as we can:
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet[mask & buffer >> bits];
    }
  }
  // Partial character:
  if (bits !== 0) {
    out += alphabet[mask & buffer << bitsPerChar - bits];
  }
  // Add padding characters until we hit a byte boundary:
  if (pad) {
    while ((out.length * bitsPerChar & 7) !== 0) {
      out += '=';
    }
  }
  return out;
}
/**
 * RFC4648 Factory
 */
function rfc4648({
  name,
  prefix,
  bitsPerChar,
  alphabet
}) {
  return from({
    prefix,
    name,
    encode(input) {
      return encode$1(input, alphabet, bitsPerChar);
    },
    decode(input) {
      return decode$4(input, alphabet, bitsPerChar, name);
    }
  });
}

const base32 = rfc4648({
  prefix: 'b',
  name: 'base32',
  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
  bitsPerChar: 5
});
rfc4648({
  prefix: 'B',
  name: 'base32upper',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
  bitsPerChar: 5
});
rfc4648({
  prefix: 'c',
  name: 'base32pad',
  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
  bitsPerChar: 5
});
rfc4648({
  prefix: 'C',
  name: 'base32padupper',
  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
  bitsPerChar: 5
});
rfc4648({
  prefix: 'v',
  name: 'base32hex',
  alphabet: '0123456789abcdefghijklmnopqrstuv',
  bitsPerChar: 5
});
rfc4648({
  prefix: 'V',
  name: 'base32hexupper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
  bitsPerChar: 5
});
rfc4648({
  prefix: 't',
  name: 'base32hexpad',
  alphabet: '0123456789abcdefghijklmnopqrstuv=',
  bitsPerChar: 5
});
rfc4648({
  prefix: 'T',
  name: 'base32hexpadupper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
  bitsPerChar: 5
});
rfc4648({
  prefix: 'h',
  name: 'base32z',
  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
  bitsPerChar: 5
});

const base36 = baseX({
  prefix: 'k',
  name: 'base36',
  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
});
baseX({
  prefix: 'K',
  name: 'base36upper',
  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
});

const base58btc = baseX({
  name: 'base58btc',
  prefix: 'z',
  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
});
baseX({
  name: 'base58flickr',
  prefix: 'Z',
  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
});

/* eslint-disable */
var encode_1$1 = encode;
var MSB = 0x80,
  MSBALL = -128,
  INT = Math.pow(2, 31);
/**
 * @param {number} num
 * @param {number[]} out
 * @param {number} offset
 */
function encode(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 0xFF | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 0xFF | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  // @ts-ignore
  encode.bytes = offset - oldOffset + 1;
  return out;
}
var decode$3 = read;
var MSB$1 = 0x80,
  REST$1 = 0x7F;
/**
 * @param {string | any[]} buf
 * @param {number} offset
 */
function read(buf, offset) {
  var res = 0,
    offset = offset || 0,
    shift = 0,
    counter = offset,
    b,
    l = buf.length;
  do {
    if (counter >= l) {
      // @ts-ignore
      read.bytes = 0;
      throw new RangeError('Could not decode varint');
    }
    b = buf[counter++];
    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b >= MSB$1);
  // @ts-ignore
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length$1 = function (/** @type {number} */value) {
  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint$2 = {
  encode: encode_1$1,
  decode: decode$3,
  encodingLength: length$1
};
var _brrp_varint = varint$2;

function decode$2(data, offset = 0) {
  const code = _brrp_varint.decode(data, offset);
  return [code, _brrp_varint.decode.bytes];
}
function encodeTo(int, target, offset = 0) {
  _brrp_varint.encode(int, target, offset);
  return target;
}
function encodingLength(int) {
  return _brrp_varint.encodingLength(int);
}

/**
 * Creates a multihash digest.
 */
function create(code, digest) {
  const size = digest.byteLength;
  const sizeOffset = encodingLength(code);
  const digestOffset = sizeOffset + encodingLength(size);
  const bytes = new Uint8Array(digestOffset + size);
  encodeTo(code, bytes, 0);
  encodeTo(size, bytes, sizeOffset);
  bytes.set(digest, digestOffset);
  return new Digest(code, size, digest, bytes);
}
/**
 * Turns bytes representation of multihash digest into an instance.
 */
function decode$1(multihash) {
  const bytes = coerce(multihash);
  const [code, sizeOffset] = decode$2(bytes);
  const [size, digestOffset] = decode$2(bytes.subarray(sizeOffset));
  const digest = bytes.subarray(sizeOffset + digestOffset);
  if (digest.byteLength !== size) {
    throw new Error('Incorrect length');
  }
  return new Digest(code, size, digest, bytes);
}
function equals(a, b) {
  if (a === b) {
    return true;
  } else {
    const data = b;
    return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equals$1(a.bytes, data.bytes);
  }
}
/**
 * Represents a multihash digest which carries information about the
 * hashing algorithm and an actual hash digest.
 */
class Digest {
  code;
  size;
  digest;
  bytes;
  /**
   * Creates a multihash digest.
   */
  constructor(code, size, digest, bytes) {
    this.code = code;
    this.size = size;
    this.digest = digest;
    this.bytes = bytes;
  }
}

function format$1(link, base) {
  const {
    bytes,
    version
  } = link;
  switch (version) {
    case 0:
      return toStringV0(bytes, baseCache(link), base ?? base58btc.encoder);
    default:
      return toStringV1(bytes, baseCache(link), base ?? base32.encoder);
  }
}
const cache = new WeakMap();
function baseCache(cid) {
  const baseCache = cache.get(cid);
  if (baseCache == null) {
    const baseCache = new Map();
    cache.set(cid, baseCache);
    return baseCache;
  }
  return baseCache;
}
class CID {
  code;
  version;
  multihash;
  bytes;
  '/';
  /**
   * @param version - Version of the CID
   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
   * @param multihash - (Multi)hash of the of the content.
   */
  constructor(version, code, multihash, bytes) {
    this.code = code;
    this.version = version;
    this.multihash = multihash;
    this.bytes = bytes;
    // flag to serializers that this is a CID and
    // should be treated specially
    this['/'] = bytes;
  }
  /**
   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`
   * please either use `CID.asCID(cid)` or switch to new signalling mechanism
   *
   * @deprecated
   */
  get asCID() {
    return this;
  }
  // ArrayBufferView
  get byteOffset() {
    return this.bytes.byteOffset;
  }
  // ArrayBufferView
  get byteLength() {
    return this.bytes.byteLength;
  }
  toV0() {
    switch (this.version) {
      case 0:
        {
          return this;
        }
      case 1:
        {
          const {
            code,
            multihash
          } = this;
          if (code !== DAG_PB_CODE) {
            throw new Error('Cannot convert a non dag-pb CID to CIDv0');
          }
          // sha2-256
          if (multihash.code !== SHA_256_CODE) {
            throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
          }
          return CID.createV0(multihash);
        }
      default:
        {
          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
    }
  }
  toV1() {
    switch (this.version) {
      case 0:
        {
          const {
            code,
            digest
          } = this.multihash;
          const multihash = create(code, digest);
          return CID.createV1(this.code, multihash);
        }
      case 1:
        {
          return this;
        }
      default:
        {
          throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);
        }
    }
  }
  equals(other) {
    return CID.equals(this, other);
  }
  static equals(self, other) {
    const unknown = other;
    return unknown != null && self.code === unknown.code && self.version === unknown.version && equals(self.multihash, unknown.multihash);
  }
  toString(base) {
    return format$1(this, base);
  }
  toJSON() {
    return {
      '/': format$1(this)
    };
  }
  link() {
    return this;
  }
  [Symbol.toStringTag] = 'CID';
  // Legacy
  [Symbol.for('nodejs.util.inspect.custom')]() {
    return `CID(${this.toString()})`;
  }
  /**
   * Takes any input `value` and returns a `CID` instance if it was
   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`
   * it will return value back. If `value` is not instance of this CID
   * class, but is compatible CID it will return new instance of this
   * `CID` class. Otherwise returns null.
   *
   * This allows two different incompatible versions of CID library to
   * co-exist and interop as long as binary interface is compatible.
   */
  static asCID(input) {
    if (input == null) {
      return null;
    }
    const value = input;
    if (value instanceof CID) {
      // If value is instance of CID then we're all set.
      return value;
    } else if (value['/'] != null && value['/'] === value.bytes || value.asCID === value) {
      // If value isn't instance of this CID class but `this.asCID === this` or
      // `value['/'] === value.bytes` is true it is CID instance coming from a
      // different implementation (diff version or duplicate). In that case we
      // rebase it to this `CID` implementation so caller is guaranteed to get
      // instance with expected API.
      const {
        version,
        code,
        multihash,
        bytes
      } = value;
      return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));
    } else if (value[cidSymbol] === true) {
      // If value is a CID from older implementation that used to be tagged via
      // symbol we still rebase it to the this `CID` implementation by
      // delegating that to a constructor.
      const {
        version,
        multihash,
        code
      } = value;
      const digest = decode$1(multihash);
      return CID.create(version, code, digest);
    } else {
      // Otherwise value is not a CID (or an incompatible version of it) in
      // which case we return `null`.
      return null;
    }
  }
  /**
   * @param version - Version of the CID
   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
   * @param digest - (Multi)hash of the of the content.
   */
  static create(version, code, digest) {
    if (typeof code !== 'number') {
      throw new Error('String codecs are no longer supported');
    }
    if (!(digest.bytes instanceof Uint8Array)) {
      throw new Error('Invalid digest');
    }
    switch (version) {
      case 0:
        {
          if (code !== DAG_PB_CODE) {
            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
          } else {
            return new CID(version, code, digest, digest.bytes);
          }
        }
      case 1:
        {
          const bytes = encodeCID(version, code, digest.bytes);
          return new CID(version, code, digest, bytes);
        }
      default:
        {
          throw new Error('Invalid version');
        }
    }
  }
  /**
   * Simplified version of `create` for CIDv0.
   */
  static createV0(digest) {
    return CID.create(0, DAG_PB_CODE, digest);
  }
  /**
   * Simplified version of `create` for CIDv1.
   *
   * @param code - Content encoding format code.
   * @param digest - Multihash of the content.
   */
  static createV1(code, digest) {
    return CID.create(1, code, digest);
  }
  /**
   * Decoded a CID from its binary representation. The byte array must contain
   * only the CID with no additional bytes.
   *
   * An error will be thrown if the bytes provided do not contain a valid
   * binary representation of a CID.
   */
  static decode(bytes) {
    const [cid, remainder] = CID.decodeFirst(bytes);
    if (remainder.length !== 0) {
      throw new Error('Incorrect length');
    }
    return cid;
  }
  /**
   * Decoded a CID from its binary representation at the beginning of a byte
   * array.
   *
   * Returns an array with the first element containing the CID and the second
   * element containing the remainder of the original byte array. The remainder
   * will be a zero-length byte array if the provided bytes only contained a
   * binary CID representation.
   */
  static decodeFirst(bytes) {
    const specs = CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error('Incorrect length');
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);
    return [cid, bytes.subarray(specs.size)];
  }
  /**
   * Inspect the initial bytes of a CID to determine its properties.
   *
   * Involves decoding up to 4 varints. Typically this will require only 4 to 6
   * bytes but for larger multicodec code values and larger multihash digest
   * lengths these varints can be quite large. It is recommended that at least
   * 10 bytes be made available in the `initialBytes` argument for a complete
   * inspection.
   */
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i, length] = decode$2(initialBytes.subarray(offset));
      offset += length;
      return i;
    };
    let version = next();
    let codec = DAG_PB_CODE;
    if (version === 18) {
      // CIDv0
      version = 0;
      offset = 0;
    } else {
      codec = next();
    }
    if (version !== 0 && version !== 1) {
      throw new RangeError(`Invalid CID version ${version}`);
    }
    const prefixSize = offset;
    const multihashCode = next(); // multihash code
    const digestSize = next(); // multihash length
    const size = offset + digestSize;
    const multihashSize = size - prefixSize;
    return {
      version,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size
    };
  }
  /**
   * Takes cid in a string representation and creates an instance. If `base`
   * decoder is not provided will use a default from the configuration. It will
   * throw an error if encoding of the CID is not compatible with supplied (or
   * a default decoder).
   */
  static parse(source, base) {
    const [prefix, bytes] = parseCIDtoBytes(source, base);
    const cid = CID.decode(bytes);
    if (cid.version === 0 && source[0] !== 'Q') {
      throw Error('Version 0 CID string must not include multibase prefix');
    }
    // Cache string representation to avoid computing it on `this.toString()`
    baseCache(cid).set(prefix, source);
    return cid;
  }
}
function parseCIDtoBytes(source, base) {
  switch (source[0]) {
    // CIDv0 is parsed differently
    case 'Q':
      {
        const decoder = base ?? base58btc;
        return [base58btc.prefix, decoder.decode(`${base58btc.prefix}${source}`)];
      }
    case base58btc.prefix:
      {
        const decoder = base ?? base58btc;
        return [base58btc.prefix, decoder.decode(source)];
      }
    case base32.prefix:
      {
        const decoder = base ?? base32;
        return [base32.prefix, decoder.decode(source)];
      }
    case base36.prefix:
      {
        const decoder = base ?? base36;
        return [base36.prefix, decoder.decode(source)];
      }
    default:
      {
        if (base == null) {
          throw Error('To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided');
        }
        return [source[0], base.decode(source)];
      }
  }
}
function toStringV0(bytes, cache, base) {
  const {
    prefix
  } = base;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid = base.encode(bytes).slice(1);
    cache.set(prefix, cid);
    return cid;
  } else {
    return cid;
  }
}
function toStringV1(bytes, cache, base) {
  const {
    prefix
  } = base;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid = base.encode(bytes);
    cache.set(prefix, cid);
    return cid;
  } else {
    return cid;
  }
}
const DAG_PB_CODE = 0x70;
const SHA_256_CODE = 0x12;
function encodeCID(version, code, multihash) {
  const codeOffset = encodingLength(version);
  const hashOffset = codeOffset + encodingLength(code);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version, bytes, 0);
  encodeTo(code, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
}
const cidSymbol = Symbol.for('@ipld/js-cid/CID');

var encode_1;
var hasRequiredEncode;
function requireEncode() {
  if (hasRequiredEncode) return encode_1;
  hasRequiredEncode = 1;
  encode_1 = encode;
  var MSB = 0x80,
    MSBALL = -128,
    INT = Math.pow(2, 31);
  function encode(num, out, offset) {
    if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
      encode.bytes = 0;
      throw new RangeError('Could not encode varint');
    }
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT) {
      out[offset++] = num & 0xFF | MSB;
      num /= 128;
    }
    while (num & MSBALL) {
      out[offset++] = num & 0xFF | MSB;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode.bytes = offset - oldOffset + 1;
    return out;
  }
  return encode_1;
}

var decode;
var hasRequiredDecode;
function requireDecode() {
  if (hasRequiredDecode) return decode;
  hasRequiredDecode = 1;
  decode = read;
  var MSB = 0x80,
    REST = 0x7F;
  function read(buf, offset) {
    var res = 0,
      offset = offset || 0,
      shift = 0,
      counter = offset,
      b,
      l = buf.length;
    do {
      if (counter >= l || shift > 49) {
        read.bytes = 0;
        throw new RangeError('Could not decode varint');
      }
      b = buf[counter++];
      res += shift < 28 ? (b & REST) << shift : (b & REST) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB);
    read.bytes = counter - offset;
    return res;
  }
  return decode;
}

var length;
var hasRequiredLength;
function requireLength() {
  if (hasRequiredLength) return length;
  hasRequiredLength = 1;
  var N1 = Math.pow(2, 7);
  var N2 = Math.pow(2, 14);
  var N3 = Math.pow(2, 21);
  var N4 = Math.pow(2, 28);
  var N5 = Math.pow(2, 35);
  var N6 = Math.pow(2, 42);
  var N7 = Math.pow(2, 49);
  var N8 = Math.pow(2, 56);
  var N9 = Math.pow(2, 63);
  length = function (value) {
    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
  };
  return length;
}

var varint$1;
var hasRequiredVarint;
function requireVarint() {
  if (hasRequiredVarint) return varint$1;
  hasRequiredVarint = 1;
  varint$1 = {
    encode: requireEncode(),
    decode: requireDecode(),
    encodingLength: requireLength()
  };
  return varint$1;
}

var varintExports = requireVarint();
var varint = /*@__PURE__*/getDefaultExportFromCjs(varintExports);

const CIDV0_BYTES = {
  SHA2_256: 0x12,
  LENGTH: 0x20,
  DAG_PB: 0x70
};
const V2_HEADER_LENGTH = /* characteristics */16 /* v1 offset */ + 8 /* v1 size */ + 8 /* index offset */ + 8;

/**
 * Decodes varint and seeks the buffer
 *
 * ```js
 * // needs bytes to be read first
 * const bytes = reader.upTo(8) // maybe async
 * ```
 *
 * @param {Uint8Array} bytes
 * @param {import('./coding').Seekable} seeker
 * @returns {number}
 */
function decodeVarint(bytes, seeker) {
  if (!bytes.length) {
    throw new Error('Unexpected end of data');
  }
  const i = varint.decode(bytes);
  seeker.seek(/** @type {number} */varint.decode.bytes);
  return i;
}

/**
 * Decode v2 header
 *
 * ```js
 * // needs bytes to be read first
 * const bytes = reader.exactly(V2_HEADER_LENGTH, true) // maybe async
 * ```
 *
 * @param {Uint8Array} bytes
 * @returns {import('./coding').CarV2FixedHeader}
 */
function decodeV2Header(bytes) {
  const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
  let offset = 0;
  const header = {
    version: 2,
    /** @type {[bigint, bigint]} */
    characteristics: [dv.getBigUint64(offset, true), dv.getBigUint64(offset += 8, true)],
    dataOffset: Number(dv.getBigUint64(offset += 8, true)),
    dataSize: Number(dv.getBigUint64(offset += 8, true)),
    indexOffset: Number(dv.getBigUint64(offset += 8, true))
  };
  return header;
}

/**
 * Checks the length of the multihash to be read afterwards
 *
 * ```js
 * // needs bytes to be read first
 * const bytes = reader.upTo(8) // maybe async
 * ```
 *
 * @param {Uint8Array} bytes
 */
function getMultihashLength(bytes) {
  // | code | length | .... |
  // where both code and length are varints, so we have to decode
  // them first before we can know total length

  varint.decode(bytes); // code
  const codeLength = /** @type {number} */varint.decode.bytes;
  const length = varint.decode(bytes.subarray(varint.decode.bytes));
  const lengthLength = /** @type {number} */varint.decode.bytes;
  const mhLength = codeLength + lengthLength + length;
  return mhLength;
}

/** Auto-generated with @ipld/schema@v4.2.0 at Thu Sep 14 2023 from IPLD Schema:
 *
 * # CarV1HeaderOrV2Pragma is a more relaxed form, and can parse {version:x} where
 * # roots are optional. This is typically useful for the {verison:2} CARv2
 * # pragma.
 *
 * type CarV1HeaderOrV2Pragma struct {
 * 	roots optional [&Any]
 * 	# roots is _not_ optional for CarV1 but we defer that check within code to
 * 	# gracefully handle the V2 case where it's just {version:X}
 * 	version Int
 * }
 *
 * # CarV1Header is the strict form of the header, and requires roots to be
 * # present. This is compatible with the CARv1 specification.
 *
 * # type CarV1Header struct {
 * # 	roots [&Any]
 * # 	version Int
 * # }
 *
 */

const Kinds = {
  Null: /** @returns {undefined|null} */(/** @type {any} */obj) => obj === null ? obj : undefined,
  Int: /** @returns {undefined|number} */(/** @type {any} */obj) => Number.isInteger(obj) ? obj : undefined,
  Float: /** @returns {undefined|number} */(/** @type {any} */obj) => typeof obj === 'number' && Number.isFinite(obj) ? obj : undefined,
  String: /** @returns {undefined|string} */(/** @type {any} */obj) => typeof obj === 'string' ? obj : undefined,
  Bool: /** @returns {undefined|boolean} */(/** @type {any} */obj) => typeof obj === 'boolean' ? obj : undefined,
  Bytes: /** @returns {undefined|Uint8Array} */(/** @type {any} */obj) => obj instanceof Uint8Array ? obj : undefined,
  Link: /** @returns {undefined|object} */(/** @type {any} */obj) => obj !== null && typeof obj === 'object' && obj.asCID === obj ? obj : undefined,
  List: /** @returns {undefined|Array<any>} */(/** @type {any} */obj) => Array.isArray(obj) ? obj : undefined,
  Map: /** @returns {undefined|object} */(/** @type {any} */obj) => obj !== null && typeof obj === 'object' && obj.asCID !== obj && !Array.isArray(obj) && !(obj instanceof Uint8Array) ? obj : undefined
};
/** @type {{ [k in string]: (obj:any)=>undefined|any}} */
const Types = {
  'CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)': Kinds.Link,
  'CarV1HeaderOrV2Pragma > roots (anon)': /** @returns {undefined|any} */(/** @type {any} */obj) => {
    if (Kinds.List(obj) === undefined) {
      return undefined;
    }
    for (let i = 0; i < obj.length; i++) {
      let v = obj[i];
      v = Types['CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)'](v);
      if (v === undefined) {
        return undefined;
      }
      if (v !== obj[i]) {
        const ret = obj.slice(0, i);
        for (let j = i; j < obj.length; j++) {
          let v = obj[j];
          v = Types['CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)'](v);
          if (v === undefined) {
            return undefined;
          }
          ret.push(v);
        }
        return ret;
      }
    }
    return obj;
  },
  Int: Kinds.Int,
  CarV1HeaderOrV2Pragma: /** @returns {undefined|any} */(/** @type {any} */obj) => {
    if (Kinds.Map(obj) === undefined) {
      return undefined;
    }
    const entries = Object.entries(obj);
    /** @type {{[k in string]: any}} */
    let ret = obj;
    let requiredCount = 1;
    for (let i = 0; i < entries.length; i++) {
      const [key, value] = entries[i];
      switch (key) {
        case 'roots':
          {
            const v = Types['CarV1HeaderOrV2Pragma > roots (anon)'](obj[key]);
            if (v === undefined) {
              return undefined;
            }
            if (v !== value || ret !== obj) {
              if (ret === obj) {
                /** @type {{[k in string]: any}} */
                ret = {};
                for (let j = 0; j < i; j++) {
                  ret[entries[j][0]] = entries[j][1];
                }
              }
              ret.roots = v;
            }
          }
          break;
        case 'version':
          {
            requiredCount--;
            const v = Types.Int(obj[key]);
            if (v === undefined) {
              return undefined;
            }
            if (v !== value || ret !== obj) {
              if (ret === obj) {
                /** @type {{[k in string]: any}} */
                ret = {};
                for (let j = 0; j < i; j++) {
                  ret[entries[j][0]] = entries[j][1];
                }
              }
              ret.version = v;
            }
          }
          break;
        default:
          return undefined;
      }
    }
    if (requiredCount > 0) {
      return undefined;
    }
    return ret;
  }
};
/** @type {{ [k in string]: (obj:any)=>undefined|any}} */
const Reprs = {
  'CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)': Kinds.Link,
  'CarV1HeaderOrV2Pragma > roots (anon)': /** @returns {undefined|any} */(/** @type {any} */obj) => {
    if (Kinds.List(obj) === undefined) {
      return undefined;
    }
    for (let i = 0; i < obj.length; i++) {
      let v = obj[i];
      v = Reprs['CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)'](v);
      if (v === undefined) {
        return undefined;
      }
      if (v !== obj[i]) {
        const ret = obj.slice(0, i);
        for (let j = i; j < obj.length; j++) {
          let v = obj[j];
          v = Reprs['CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)'](v);
          if (v === undefined) {
            return undefined;
          }
          ret.push(v);
        }
        return ret;
      }
    }
    return obj;
  },
  Int: Kinds.Int,
  CarV1HeaderOrV2Pragma: /** @returns {undefined|any} */(/** @type {any} */obj) => {
    if (Kinds.Map(obj) === undefined) {
      return undefined;
    }
    const entries = Object.entries(obj);
    /** @type {{[k in string]: any}} */
    let ret = obj;
    let requiredCount = 1;
    for (let i = 0; i < entries.length; i++) {
      const [key, value] = entries[i];
      switch (key) {
        case 'roots':
          {
            const v = Reprs['CarV1HeaderOrV2Pragma > roots (anon)'](value);
            if (v === undefined) {
              return undefined;
            }
            if (v !== value || ret !== obj) {
              if (ret === obj) {
                /** @type {{[k in string]: any}} */
                ret = {};
                for (let j = 0; j < i; j++) {
                  ret[entries[j][0]] = entries[j][1];
                }
              }
              ret.roots = v;
            }
          }
          break;
        case 'version':
          {
            requiredCount--;
            const v = Reprs.Int(value);
            if (v === undefined) {
              return undefined;
            }
            if (v !== value || ret !== obj) {
              if (ret === obj) {
                /** @type {{[k in string]: any}} */
                ret = {};
                for (let j = 0; j < i; j++) {
                  ret[entries[j][0]] = entries[j][1];
                }
              }
              ret.version = v;
            }
          }
          break;
        default:
          return undefined;
      }
    }
    if (requiredCount > 0) {
      return undefined;
    }
    return ret;
  }
};
const CarV1HeaderOrV2Pragma = {
  toTyped: Types.CarV1HeaderOrV2Pragma,
  toRepresentation: Reprs.CarV1HeaderOrV2Pragma
};

/**
 * @typedef {import('./api').Block} Block
 * @typedef {import('./api').BlockHeader} BlockHeader
 * @typedef {import('./api').BlockIndex} BlockIndex
 * @typedef {import('./coding').BytesReader} BytesReader
 * @typedef {import('./coding').CarHeader} CarHeader
 * @typedef {import('./coding').CarV2Header} CarV2Header
 * @typedef {import('./coding').CarV2FixedHeader} CarV2FixedHeader
 * @typedef {import('./coding').CarDecoder} CarDecoder
 */

/**
 * Reads header data from a `BytesReader`. The header may either be in the form
 * of a `CarHeader` or `CarV2Header` depending on the CAR being read.
 *
 * @name async decoder.readHeader(reader)
 * @param {BytesReader} reader
 * @param {number} [strictVersion]
 * @returns {Promise<CarHeader|CarV2Header>}
 */
async function readHeader(reader, strictVersion) {
  const length = decodeVarint(await reader.upTo(8), reader);
  if (length === 0) {
    throw new Error('Invalid CAR header (zero length)');
  }
  const header = await reader.exactly(length, true);
  const block = decode$5(header);
  if (CarV1HeaderOrV2Pragma.toTyped(block) === undefined) {
    throw new Error('Invalid CAR header format');
  }
  if (block.version !== 1 && block.version !== 2 || strictVersion !== undefined && block.version !== strictVersion) {
    throw new Error(`Invalid CAR version: ${block.version}${strictVersion !== undefined ? ` (expected ${strictVersion})` : ''}`);
  }
  if (block.version === 1) {
    // CarV1HeaderOrV2Pragma makes roots optional, let's make it mandatory
    if (!Array.isArray(block.roots)) {
      throw new Error('Invalid CAR header format');
    }
    return block;
  }
  // version 2
  if (block.roots !== undefined) {
    throw new Error('Invalid CAR header format');
  }
  const v2Header = decodeV2Header(await reader.exactly(V2_HEADER_LENGTH, true));
  reader.seek(v2Header.dataOffset - reader.pos);
  const v1Header = await readHeader(reader, 1);
  return Object.assign(v1Header, v2Header);
}

/**
 * @param {BytesReader} reader
 * @returns {Promise<CID>}
 */
async function readCid(reader) {
  const first = await reader.exactly(2, false);
  if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {
    // cidv0 32-byte sha2-256
    const bytes = await reader.exactly(34, true);
    const multihash = decode$1(bytes);
    return CID.create(0, CIDV0_BYTES.DAG_PB, multihash);
  }
  const version = decodeVarint(await reader.upTo(8), reader);
  if (version !== 1) {
    throw new Error(`Unexpected CID version (${version})`);
  }
  const codec = decodeVarint(await reader.upTo(8), reader);
  const bytes = await reader.exactly(getMultihashLength(await reader.upTo(8)), true);
  const multihash = decode$1(bytes);
  return CID.create(version, codec, multihash);
}

/**
 * Reads the leading data of an individual block from CAR data from a
 * `BytesReader`. Returns a `BlockHeader` object which contains
 * `{ cid, length, blockLength }` which can be used to either index the block
 * or read the block binary data.
 *
 * @name async decoder.readBlockHead(reader)
 * @param {BytesReader} reader
 * @returns {Promise<BlockHeader>}
 */
async function readBlockHead(reader) {
  // length includes a CID + Binary, where CID has a variable length
  // we have to deal with
  const start = reader.pos;
  let length = decodeVarint(await reader.upTo(8), reader);
  if (length === 0) {
    throw new Error('Invalid CAR section (zero length)');
  }
  length += reader.pos - start;
  const cid = await readCid(reader);
  const blockLength = length - Number(reader.pos - start); // subtract CID length

  return {
    cid,
    length,
    blockLength
  };
}

/**
 * @param {BytesReader} reader
 * @returns {Promise<Block>}
 */
async function readBlock(reader) {
  const {
    cid,
    blockLength
  } = await readBlockHead(reader);
  const bytes = await reader.exactly(blockLength, true);
  return {
    bytes,
    cid
  };
}

/**
 * @param {BytesReader} reader
 * @returns {Promise<BlockIndex>}
 */
async function readBlockIndex(reader) {
  const offset = reader.pos;
  const {
    cid,
    length,
    blockLength
  } = await readBlockHead(reader);
  const index = {
    cid,
    length,
    blockLength,
    offset,
    blockOffset: reader.pos
  };
  reader.seek(index.blockLength);
  return index;
}

/**
 * Creates a `CarDecoder` from a `BytesReader`. The `CarDecoder` is as async
 * interface that will consume the bytes from the `BytesReader` to yield a
 * `header()` and either `blocks()` or `blocksIndex()` data.
 *
 * @name decoder.createDecoder(reader)
 * @param {BytesReader} reader
 * @returns {CarDecoder}
 */
function createDecoder(reader) {
  const headerPromise = (async () => {
    const header = await readHeader(reader);
    if (header.version === 2) {
      const v1length = reader.pos - header.dataOffset;
      reader = limitReader(reader, header.dataSize - v1length);
    }
    return header;
  })();
  return {
    header: () => headerPromise,
    async *blocks() {
      await headerPromise;
      while ((await reader.upTo(8)).length > 0) {
        yield await readBlock(reader);
      }
    },
    async *blocksIndex() {
      await headerPromise;
      while ((await reader.upTo(8)).length > 0) {
        yield await readBlockIndex(reader);
      }
    }
  };
}

/**
 * Creates a `BytesReader` from a `Uint8Array`.
 *
 * @name decoder.bytesReader(bytes)
 * @param {Uint8Array} bytes
 * @returns {BytesReader}
 */
function bytesReader(bytes) {
  let pos = 0;

  /** @type {BytesReader} */
  return {
    async upTo(length) {
      const out = bytes.subarray(pos, pos + Math.min(length, bytes.length - pos));
      return out;
    },
    async exactly(length, seek = false) {
      if (length > bytes.length - pos) {
        throw new Error('Unexpected end of data');
      }
      const out = bytes.subarray(pos, pos + length);
      if (seek) {
        pos += length;
      }
      return out;
    },
    seek(length) {
      pos += length;
    },
    get pos() {
      return pos;
    }
  };
}

/**
 * @ignore
 * reusable reader for streams and files, we just need a way to read an
 * additional chunk (of some undetermined size) and a way to close the
 * reader when finished
 * @param {() => Promise<Uint8Array|null>} readChunk
 * @returns {BytesReader}
 */
function chunkReader(readChunk /*, closer */) {
  let pos = 0;
  let have = 0;
  let offset = 0;
  let currentChunk = new Uint8Array(0);
  const read = async (/** @type {number} */length) => {
    have = currentChunk.length - offset;
    const bufa = [currentChunk.subarray(offset)];
    while (have < length) {
      const chunk = await readChunk();
      if (chunk == null) {
        break;
      }
      /* c8 ignore next 8 */
      // undo this ignore ^ when we have a fd implementation that can seek()
      if (have < 0) {
        // because of a seek()
        /* c8 ignore next 4 */
        // toohard to test the else
        if (chunk.length > have) {
          bufa.push(chunk.subarray(-have));
        } // else discard
      } else {
        bufa.push(chunk);
      }
      have += chunk.length;
    }
    currentChunk = new Uint8Array(bufa.reduce((p, c) => p + c.length, 0));
    let off = 0;
    for (const b of bufa) {
      currentChunk.set(b, off);
      off += b.length;
    }
    offset = 0;
  };

  /** @type {BytesReader} */
  return {
    async upTo(length) {
      if (currentChunk.length - offset < length) {
        await read(length);
      }
      return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length));
    },
    async exactly(length, seek = false) {
      if (currentChunk.length - offset < length) {
        await read(length);
      }
      if (currentChunk.length - offset < length) {
        throw new Error('Unexpected end of data');
      }
      const out = currentChunk.subarray(offset, offset + length);
      if (seek) {
        pos += length;
        offset += length;
      }
      return out;
    },
    seek(length) {
      pos += length;
      offset += length;
    },
    get pos() {
      return pos;
    }
  };
}

/**
 * Creates a `BytesReader` from an `AsyncIterable<Uint8Array>`, which allows for
 * consumption of CAR data from a streaming source.
 *
 * @name decoder.asyncIterableReader(asyncIterable)
 * @param {AsyncIterable<Uint8Array>} asyncIterable
 * @returns {BytesReader}
 */
function asyncIterableReader(asyncIterable) {
  const iterator = asyncIterable[Symbol.asyncIterator]();
  async function readChunk() {
    const next = await iterator.next();
    if (next.done) {
      return null;
    }
    return next.value;
  }
  return chunkReader(readChunk);
}

/**
 * Wraps a `BytesReader` in a limiting `BytesReader` which limits maximum read
 * to `byteLimit` bytes. It _does not_ update `pos` of the original
 * `BytesReader`.
 *
 * @name decoder.limitReader(reader, byteLimit)
 * @param {BytesReader} reader
 * @param {number} byteLimit
 * @returns {BytesReader}
 */
function limitReader(reader, byteLimit) {
  let bytesRead = 0;

  /** @type {BytesReader} */
  return {
    async upTo(length) {
      let bytes = await reader.upTo(length);
      if (bytes.length + bytesRead > byteLimit) {
        bytes = bytes.subarray(0, byteLimit - bytesRead);
      }
      return bytes;
    },
    async exactly(length, seek = false) {
      const bytes = await reader.exactly(length, seek);
      if (bytes.length + bytesRead > byteLimit) {
        throw new Error('Unexpected end of data');
      }
      if (seek) {
        bytesRead += length;
      }
      return bytes;
    },
    seek(length) {
      bytesRead += length;
      reader.seek(length);
    },
    get pos() {
      return reader.pos;
    }
  };
}

/**
 * @typedef {import('multiformats').CID} CID
 * @typedef {import('./api').Block} Block
 * @typedef {import('./api').CarReader} CarReaderIface
 * @typedef {import('./coding').BytesReader} BytesReader
 * @typedef {import('./coding').CarHeader} CarHeader
 * @typedef {import('./coding').CarV2Header} CarV2Header
 */

/**
 * Provides blockstore-like access to a CAR.
 *
 * Implements the `RootsReader` interface:
 * {@link CarReader.getRoots `getRoots()`}. And the `BlockReader` interface:
 * {@link CarReader.get `get()`}, {@link CarReader.has `has()`},
 * {@link CarReader.blocks `blocks()`} (defined as a `BlockIterator`) and
 * {@link CarReader.cids `cids()`} (defined as a `CIDIterator`).
 *
 * Load this class with either `import { CarReader } from '@ipld/car/reader'`
 * (`const { CarReader } = require('@ipld/car/reader')`). Or
 * `import { CarReader } from '@ipld/car'` (`const { CarReader } = require('@ipld/car')`).
 * The former will likely result in smaller bundle sizes where this is
 * important.
 *
 * @name CarReader
 * @class
 * @implements {CarReaderIface}
 * @property {number} version The version number of the CAR referenced by this
 * reader (should be `1` or `2`).
 */
class CarReader {
  /**
   * @constructs CarReader
   * @param {CarHeader|CarV2Header} header
   * @param {Block[]} blocks
   */
  constructor(header, blocks) {
    this._header = header;
    this._blocks = blocks;
    this._keys = blocks.map(b => b.cid.toString());
  }

  /**
   * @property
   * @memberof CarReader
   * @instance
   */
  get version() {
    return this._header.version;
  }

  /**
   * Get the list of roots defined by the CAR referenced by this reader. May be
   * zero or more `CID`s.
   *
   * @function
   * @memberof CarReader
   * @instance
   * @async
   * @returns {Promise<CID[]>}
   */
  async getRoots() {
    return this._header.roots;
  }

  /**
   * Check whether a given `CID` exists within the CAR referenced by this
   * reader.
   *
   * @function
   * @memberof CarReader
   * @instance
   * @async
   * @param {CID} key
   * @returns {Promise<boolean>}
   */
  async has(key) {
    return this._keys.indexOf(key.toString()) > -1;
  }

  /**
   * Fetch a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) from the CAR
   * referenced by this reader matching the provided `CID`. In the case where
   * the provided `CID` doesn't exist within the CAR, `undefined` will be
   * returned.
   *
   * @function
   * @memberof CarReader
   * @instance
   * @async
   * @param {CID} key
   * @returns {Promise<Block | undefined>}
   */
  async get(key) {
    const index = this._keys.indexOf(key.toString());
    return index > -1 ? this._blocks[index] : undefined;
  }

  /**
   * Returns a `BlockIterator` (`AsyncIterable<Block>`) that iterates over all
   * of the `Block`s (`{ cid:CID, bytes:Uint8Array }` pairs) contained within
   * the CAR referenced by this reader.
   *
   * @function
   * @memberof CarReader
   * @instance
   * @async
   * @generator
   * @returns {AsyncGenerator<Block>}
   */
  async *blocks() {
    for (const block of this._blocks) {
      yield block;
    }
  }

  /**
   * Returns a `CIDIterator` (`AsyncIterable<CID>`) that iterates over all of
   * the `CID`s contained within the CAR referenced by this reader.
   *
   * @function
   * @memberof CarReader
   * @instance
   * @async
   * @generator
   * @returns {AsyncGenerator<CID>}
   */
  async *cids() {
    for (const block of this._blocks) {
      yield block.cid;
    }
  }

  /**
   * Instantiate a {@link CarReader} from a `Uint8Array` blob. This performs a
   * decode fully in memory and maintains the decoded state in memory for full
   * access to the data via the `CarReader` API.
   *
   * @async
   * @static
   * @memberof CarReader
   * @param {Uint8Array} bytes
   * @returns {Promise<CarReader>}
   */
  static async fromBytes(bytes) {
    if (!(bytes instanceof Uint8Array)) {
      throw new TypeError('fromBytes() requires a Uint8Array');
    }
    return decodeReaderComplete(bytesReader(bytes));
  }

  /**
   * Instantiate a {@link CarReader} from a `AsyncIterable<Uint8Array>`, such as
   * a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).
   * This performs a decode fully in memory and maintains the decoded state in
   * memory for full access to the data via the `CarReader` API.
   *
   * Care should be taken for large archives; this API may not be appropriate
   * where memory is a concern or the archive is potentially larger than the
   * amount of memory that the runtime can handle.
   *
   * @async
   * @static
   * @memberof CarReader
   * @param {AsyncIterable<Uint8Array>} asyncIterable
   * @returns {Promise<CarReader>}
   */
  static async fromIterable(asyncIterable) {
    if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {
      throw new TypeError('fromIterable() requires an async iterable');
    }
    return decodeReaderComplete(asyncIterableReader(asyncIterable));
  }
}

/**
 * @private
 * @param {BytesReader} reader
 * @returns {Promise<CarReader>}
 */
async function decodeReaderComplete(reader) {
  const decoder = createDecoder(reader);
  const header = await decoder.header();
  const blocks = [];
  for await (const block of decoder.blocks()) {
    blocks.push(block);
  }
  return new CarReader(header, blocks);
}

// @ts-check


/**
 * @typedef {{
 *   receiveTimestamp: number,
 *   since: string,
 *   time: string,
 *   messages: FirehoseRecord[],
 *   deletes?: FirehoseRecord[],
 *   unexpected?: FirehoseRecord[]
 * }} FirehoseBlock
 */

/**
 * @typedef {{
 *  'app.bsky.feed.like': import('@atproto/api').AppBskyFeedLike.Record,
 *  'app.bsky.feed.post': import('@atproto/api').AppBskyFeedPost.Record,
 *  'app.bsky.feed.repost': import('@atproto/api').AppBskyFeedRepost.Record,
 *  'app.bsky.feed.threadgate': import('@atproto/api').AppBskyFeedThreadgate.Record,
 *  'app.bsky.graph.follow': import('@atproto/api').AppBskyGraphFollow.Record,
 *  'app.bsky.graph.block': import('@atproto/api').AppBskyGraphBlock.Record,
 *  'app.bsky.graph.list': import('@atproto/api').AppBskyGraphList.Record,
 *  'app.bsky.graph.listitem': import('@atproto/api').AppBskyGraphListitem.Record,
 *  'app.bsky.graph.listblock': import('@atproto/api').AppBskyGraphListblock.Record,
 *  'app.bsky.actor.profile': import('@atproto/api').AppBskyActorProfile.Record
 *  'app.bsky.feed.generator': import('@atproto/api').AppBskyFeedGenerator.Record
 *  'app.bsky.feed.postgate': import('@atproto/api').AppBskyFeedPostgate.Record
 *  'chat.bsky.actor.declaration': import('@atproto/api').ChatBskyActorDeclaration.Record,
 *  'app.bsky.graph.starterpack': import('@atproto/api').AppBskyGraphStarterpack.Record
 * }} RepoRecord$Typed
 */

/**
 * @template {keyof RepoRecord$Typed} $Type
 * @typedef {{ repo: string, uri: string, action: 'create' | 'delete' | 'update', path: string, $type: $Type } &
 *  RepoRecord$Typed[$Type]
 * } FirehoseRecord$Typed
 */

/**
 * @typedef {FirehoseRecord$Typed<'app.bsky.feed.like'> |
 * FirehoseRecord$Typed<'app.bsky.feed.post'> |
 * FirehoseRecord$Typed<'app.bsky.feed.repost'> |
 * FirehoseRecord$Typed<'app.bsky.feed.threadgate'> |
 * FirehoseRecord$Typed<'app.bsky.graph.follow'> |
 * FirehoseRecord$Typed<'app.bsky.graph.block'> |
 * FirehoseRecord$Typed<'app.bsky.graph.list'> |
 * FirehoseRecord$Typed<'app.bsky.graph.listitem'> |
 * FirehoseRecord$Typed<'app.bsky.graph.listblock'> |
 * FirehoseRecord$Typed<'app.bsky.actor.profile'> |
 * FirehoseRecord$Typed<'app.bsky.feed.generator'> |
 * FirehoseRecord$Typed<'app.bsky.feed.postgate'> |
 * FirehoseRecord$Typed<'chat.bsky.actor.declaration'> |
 * FirehoseRecord$Typed<'app.bsky.graph.starterpack'>
 * } FirehoseRecord
 */

const known$Types = ['app.bsky.feed.like', 'app.bsky.feed.post', 'app.bsky.feed.repost', 'app.bsky.feed.threadgate', 'app.bsky.graph.follow', 'app.bsky.graph.block', 'app.bsky.graph.list', 'app.bsky.graph.listitem', 'app.bsky.graph.listblock', 'app.bsky.actor.profile', 'app.bsky.feed.generator', 'app.bsky.feed.postgate', 'chat.bsky.actor.declaration', 'app.bsky.graph.starterpack'];
firehose$1.knownTypes = known$Types;
let cbor_x_extended = false;
async function* firehoseRecords() {
  for await (const {
    messages,
    deletes,
    unexpected,
    ...rest
  } of firehose$1()) {
    if (deletes?.length) {
      for (const record of deletes) {
        yield {
          ...rest,
          action: 'delete',
          record
        };
      }
    }
    if (!messages.length) continue;
    for (const record of messages) {
      yield {
        ...rest,
        record
      };
    }
    for (const record of unexpected || []) {
      yield {
        ...rest,
        action: 'unexpected',
        record
      };
    }
  }
}

/**
 * @returns {AsyncGenerator<FirehoseBlock, void, void>}
 */
async function* firehose$1() {
  ensureCborXExtended();

  /** @type {typeof WebSocket} */
  const WebSocketImpl = typeof WebSocket === 'function' ? WebSocket : (/** @type {typeof WebSocket} */require('ws'));
  const wsAddress = 'wss://bsky.network/xrpc/com.atproto.sync.subscribeRepos';
  const ws = new WebSocketImpl(wsAddress);
  ws.addEventListener('message', handleMessage);
  ws.addEventListener('error', handleError);
  ws.addEventListener('close', handleClose);
  let buf = createAwaitPromise();
  let closed = false;
  try {
    while (true) {
      await buf.promise;
      const block = buf.block;
      buf = createAwaitPromise();
      if (closed) {
        if (block.messages.length || block.deletes?.length || block.unexpected?.length) yield block;
        break;
      }
      yield block;
    }
  } finally {
    if (!closed) {
      try {
        ws.close();
      } catch (error) {}
    }
  }
  function handleClose() {
    closed = true;
    buf.resolve();
  }
  function handleMessage(event) {
    const receiveTimestamp = Date.now();
    if (typeof event.data?.arrayBuffer === 'function') return event.data.arrayBuffer().then(arrayBuf => convertMessageBuf(receiveTimestamp, arrayBuf));else if (typeof event.data?.byteLength === 'number') return convertMessageBuf(receiveTimestamp, event.data);
  }

  /** @param {ArrayBuffer} messageBuf */
  async function convertMessageBuf(receiveTimestamp, messageBuf) {
    const entry = /** @type {any[]} */decodeMultiple(new Uint8Array(messageBuf));
    if (!entry || entry[0]?.op !== 1) return;
    const commit = entry[1];
    if (!commit.blocks) return; // TODO: alert unusual commit

    if (!commit.ops?.length) return; // TODO: alert unusual commit

    const car = await CarReader.fromBytes(commit.blocks);
    buf.block.receiveTimestamp = receiveTimestamp;
    buf.block.since = commit.since;
    buf.block.time = commit.time;
    for (const op of commit.ops) {
      const block = op.cid && (await car.get(/** @type {*} */op.cid));
      if (!block) continue; // TODO: alert unusual op

      const record = decode$b(block.bytes);
      // record.seq = commit.seq; 471603945
      // record.since = /** @type {string} */(commit.since); 3ksfhcmgghv2g
      // record.action = op.action;
      // record.cid = cid;
      // record.path = op.path;
      // record.timestamp = commit.time ? Date.parse(commit.time) : Date.now(); 2024-05-13T19:59:10.457Z

      record.repo = commit.repo;
      record.uri = 'at://' + commit.repo + '/' + op.path;
      record.action = op.action;
      let unexpected = op.action !== 'create' && op.action !== 'update' && op.action !== 'delete' || known$Types.indexOf(record.$type) < 0;
      if (unexpected) {
        console.warn('unexpected ', record);
        if (!buf.block.unexpected) buf.block.unexpected = [];
        buf.block.unexpected.push(record);
      } else if (op.action === 'delete') {
        if (!buf.block.deletes) buf.block.deletes = [];
        buf.block.deletes.push(record);
      } else {
        buf.block.messages.push(record);
      }
    }
    buf.resolve();
  }
  function handleError(error) {
    console.error(error);
    const errorText = error.message || 'WebSocket error ' + error;
    buf.reject(new Error(errorText));
  }
}

/** @returns {{
 *  block: FirehoseBlock,
 *  resolve: () => void,
 *  reject: (reason?: any) => void,
 *  promise: Promise<void>
 * }} */
function createAwaitPromise() {
  const result = {
    block: {
      messages: []
    }
  };
  result.promise = new Promise((resolve, reject) => {
    result.resolve = resolve;
    result.reject = reject;
  });
  return /** @type {*} */result;
}
function ensureCborXExtended() {
  if (cbor_x_extended) return;
  addExtension({
    Class: CID$2,
    tag: 42,
    encode: () => {
      throw new Error("cannot encode cids");
    },
    decode: bytes => {
      if (bytes[0] !== 0) throw new Error("invalid cid for cbor tag 42");
      return CID$2.decode(bytes.subarray(1)); // ignore leading 0x00
    }
  });
  cbor_x_extended = true;
}

// @ts-check

var READING_CYCLES_BEFORE_REST = 5000;
var COLLECTING_CYCLES_BEFORE_REST = 15000;

/**
 * @param {string} did
 * @param {ArrayBuffer | Uint8Array} messageBuf
 * @param {{ sleep?: number }} [options]
 */
async function readCAR(did, messageBuf, options) {
  const fullDID = unwrapShortDID(did);
  const bytes = messageBuf instanceof ArrayBuffer ? new Uint8Array(messageBuf) : messageBuf;
  const car = await CarReader.fromBytes(bytes);
  ensureCborXExtended();
  const recordsByCID = new Map();
  const keyByCID = new Map();
  let lastRest = Date.now();
  const errors = [];
  const blocks = typeof car._blocks === 'object' && car._blocks && Array.isArray(car._blocks) ? car._blocks : car.blocks();
  let entriesChunk = 0;
  for await (const block of blocks) {
    entriesChunk++;
    if (entriesChunk > READING_CYCLES_BEFORE_REST) {
      entriesChunk = 0;
      await restRegularly();
    }
    const record = decode$b(block.bytes);
    if (record.$type) recordsByCID.set(String(block.cid), record);else if (Array.isArray(record.e)) {
      let key = '';
      const decoder = new TextDecoder();
      for (const sub of record.e) {
        if (!sub.k || !sub.v) continue;
        try {
          const keySuffix = decoder.decode(sub.k);
          key = key.slice(0, sub.p || 0) + keySuffix;
          let cid;
          if (sub.v.multihash) {
            cid = sub.v;
          } else if (sub.v.value) {
            const expandWithoutZero = sub.v.value[0] ? sub.v.value : /** @type {Uint8Array} */sub.v.value.subarray(1);
            cid = CID$2.decode(expandWithoutZero);
          }
          if (!cid) continue;
          keyByCID.set(String(cid), key);
          entriesChunk++;
          if (entriesChunk > READING_CYCLES_BEFORE_REST) {
            entriesChunk = 0;
            await restRegularly();
          }
        } catch (error) {
          if (!errors.length) console.error(error);
          errors.push(error);
        }
      }
    }
  }

  /** @type {import('./firehose').FirehoseRecord[]} */
  const records = [];
  entriesChunk = 0;
  for (const entry of recordsByCID) {
    const cid = entry[0];
    /** @type {import('./firehose').FirehoseRecord} */
    const record = entry[1];
    record.repo = fullDID;
    const key = keyByCID.get(cid);
    if (key) {
      record.path = key;
      record.uri = 'at://' + fullDID + '/' + key;
    }

    // let's recreate the record, to pack the GC and avoid deoptimized objects
    records.push({
      ...record
    });
    entriesChunk++;
    if (entriesChunk > COLLECTING_CYCLES_BEFORE_REST) {
      entriesChunk = 0;
      await restRegularly();
    }
  }

  // record.seq = commit.seq; 471603945
  // record.since = /** @type {string} */(commit.since); 3ksfhcmgghv2g
  // record.action = op.action;
  // record.cid = cid;
  // record.path = op.path;
  // record.timestamp = commit.time ? Date.parse(commit.time) : Date.now(); 2024-05-13T19:59:10.457Z

  // record.repo = fullDID;
  // record.uri = fullDID + '/' + 'op.path';
  // record.action = 'create';

  return records;
  function restRegularly() {
    const now = Date.now();
    const sleep = typeof options?.sleep === 'number' ? options.sleep : 200;
    if (now - lastRest > sleep) {
      lastRest = now;
      return new Promise(resolve => setTimeout(resolve, 1)).then(setLastRestNow);
    }
  }
  function setLastRestNow() {
    lastRest = Date.now();
  }
}

var version = "0.2.97";

// @ts-check


/**
 * @typedef {{
 *  [shortDID: string]: number | undefined, error?: undefined, errorCount?: undefined, waitUntil?: undefined } | {
 *  error: Error,
 *  errorCount: number,
 *  waitUntil: number }} FirehoseShortDIDs
 */

/**
 * @param {(shortDID: string) => number} [filterShortDIDs]
 * @returns {AsyncGenerator<FirehoseShortDIDs>}
 */
async function* firehoseShortDIDs(filterShortDIDs) {
  /** @type {FirehoseShortDIDs} */
  let shortDIDs = {};
  let addedAny = false;
  let lastHealth = Date.now();
  let errorCount = 0;
  while (true) {
    try {
      for await (const block of firehose$1()) {
        lastHealth = Date.now();
        if (!block?.length) continue;
        for (const entry of block) {
          if (!entry.messages?.length) continue;
          for (const msg of entry.messages) {
            collectShortDIDs(msg);
          }
        }
        if (addedAny) {
          /** @type {(typeof shortDIDs) & { error?: undefined, errorCount?: number, waitUntil?: undefined }} */
          const report = shortDIDs;
          shortDIDs = {};
          addedAny = false;
          yield report;
        }
      }
    } catch (error) {
      errorCount++;
      const now = Date.now();
      let waitFor = Math.min(30000, Math.max(300, (now - lastHealth) / 3)) * (0.7 + Math.random() * 0.6);
      console.error('firehose error ' + errorCount + ', retry in ' + waitFor + 'ms ', error);
      yield {
        error: (/** @type {Error} */error),
        errorCount,
        waitUntil: now + waitFor
      };
      return new Promise(resolve => setTimeout(resolve, waitFor));
    }
  }

  /**
   * @param {import('./firehose').FirehoseRecord} msg 
   */
  function collectShortDIDs(msg) {
    addShortDID(msg.repo);
    switch (msg.$type) {
      case 'app.bsky.feed.like':
        addShortDID(breakFeedURIPostOnly(msg.subject?.uri)?.shortDID);
        return;
      case 'app.bsky.feed.post':
        addShortDID(breakFeedURIPostOnly(msg.reply?.parent?.uri)?.shortDID);
        addShortDID(breakFeedURIPostOnly(msg.reply?.root?.uri)?.shortDID);
        if (msg.embed?.$type === 'app.bsky.embed.record') addShortDID(breakFeedURIPostOnly(/** @type {*} */msg.embed?.record?.uri)?.shortDID);
        return;
      case 'app.bsky.feed.repost':
        addShortDID(breakFeedURIPostOnly(msg.subject?.uri)?.shortDID);
        return;
      case 'app.bsky.feed.threadgate':
        // TODO extend
        return;
      case 'app.bsky.graph.follow':
        addShortDID(msg.subject);
        return;
      case 'app.bsky.graph.block':
        addShortDID(msg.subject);
        return;
      case 'app.bsky.graph.list':
        // TODO extend
        return;
      case 'app.bsky.graph.listitem':
        addShortDID(msg.subject);
        return;
      case 'app.bsky.actor.profile':
        return;
    }
  }

  /**
   * @param {string | undefined} did
   * @param {number} [ratio]
   */
  function addShortDID(did, ratio) {
    if (!did) return;
    const shortDID = shortenDID(did);
    let increment = (typeof filterShortDIDs === 'function' ? filterShortDIDs(did) : 1) * (1);
    if (!increment) return;
    shortDIDs[shortDID] = (shortDIDs[shortDID] || 0) + increment;
    addedAny = true;
  }
}

// @ts-check

/**
 * @template [T=any]
 * @template [TBuffer = T[]]
 * @typedef {{
 *  yield: (item: T, combine?: (buffer: TBuffer | undefined, item?: T) => TBuffer) => Promise<void>,
 *  reject: (error: Error) => void,
 *  complete: () => void,
 *  isEnded: boolean,
 *  finally: Promise<void>
 * }} StreamParameters
 */

/**
 * @template [T=any]
 * @template [TBuffer = T[]]
 * @param {(args: StreamParameters<T, TBuffer>) => void } callback
 * @returns {AsyncGenerator<TBuffer, void, unknown>}
 */
function streamBuffer(callback) {
  let finallyTrigger = () => {
    args.isEnded = true;
  };
  let stop = false;

  /** @type {TBuffer | undefined} */
  let buffer;
  let continueTrigger = () => {};
  /** @type {Promise<void>} */
  let continuePromise = new Promise(resolve => continueTrigger = function continueTriggerInitiallySet() {
    resolve();
  });
  let yieldPassedTrigger = () => {};
  /** @type {Promise<void>} */
  let yieldPassedPromise = new Promise(resolve => yieldPassedTrigger = resolve);

  /** @type {{ error: Error } | undefined} */
  let rejectError;

  /** @type {Parameters<typeof callback>[0]} */
  const args = {
    yield: yieldFn,
    reject,
    complete,
    isEnded: false,
    finally: new Promise(resolve => {
      finallyTrigger = () => {
        args.isEnded = true;
        resolve();
      };
    })
  };
  callback(args);
  return iterate();

  /**
   * @returns {AsyncGenerator<TBuffer, void, unknown>}
   */
  async function* iterate() {
    try {
      while (!stop) {
        await continuePromise;
        if (rejectError) throw rejectError.error;
        if (stop) return;
        continuePromise = new Promise(resolve => continueTrigger = function continueTriggerSubsequentlySet() {
          resolve();
        });
        const yieldBuffer = buffer;
        buffer = undefined;
        if (yieldBuffer) {
          yield yieldBuffer;
          const yieldCompleted = yieldPassedTrigger;
          yieldPassedPromise = new Promise(resolve => yieldPassedTrigger = resolve);
          yieldCompleted();
        }
      }
    } finally {
      finallyTrigger();
    }
  }

  /**
   * @param {T} item
   * @param {(buffer: TBuffer | undefined, item: T) => TBuffer} [combine]
   */
  function yieldFn(item, combine) {
    if (stop) {
      console.error('Cannot yield after complete.');
      return /** @type Promise<void> */new Promise(resolve => resolve());
    }
    if (rejectError) {
      console.error('Cannot yield after reject.');
      return /** @type Promise<void> */new Promise(resolve => resolve());
    }
    if (typeof combine === 'function') {
      buffer = combine(buffer, item);
    } else {
      if (!buffer) buffer = /** @type {TBuffer} */[];
      /** @type {*} */
      buffer.push(item);
    }
    continueTrigger();
    return yieldPassedPromise;
  }

  /** @param {Error} error */
  function reject(error) {
    if (stop) {
      console.error('Cannot reject after complete.');
      return;
    }
    if (rejectError) {
      console.error('Cannot reject after reject.');
      return;
    }
    rejectError = {
      error
    };
    args.isEnded = true;
  }
  function complete() {
    stop = true;
    args.isEnded = true;
    continueTrigger();
  }
}

/**
 * @template T
 * @template [TProject=T extends Array ? T[0] : T]
 * @param {AsyncIterable<T>} input
 * @param {(item: T) => Iterable<TProject> | AsyncIterable<TProject>} [project]
 * @returns {AsyncIterable<TProject>}
 * }}
 */
async function* mergeMap(input, project) {
  for await (const item of input) {
    const mapped = item;
    for await (const subItem of (/** @type {AsyncIterable<TProject>} */mapped)) {
      yield subItem;
    }
  }
}

/**
 * @template T
 * @param {(arg: StreamParameters<T>) => void } callback
 */
function streamEvery(callback) {
  return mergeMap(streamBuffer(callback));
}

// @ts-check


/**
 * @typedef {{
 *  fetch?: typeof fetch
 * }} Overrides
 */

/** @typedef {import('./data/define-store').PLCDirectoryEntry} PLCDirectoryEntry */
/** @typedef {import('./data/define-store').PLCDirectoryAuditLogEntry} PlcDirectoryAuditLogEntry */

const FETCH_AHEAD_MSEC_MAX = 10000;
const FETCH_AHEAD_COUNT_MAX = 10000;

/**
 * @param {string | Date | number | null} [since]
 * @param {Overrides} [overrides]
 * @returns {AsyncGenerator<{ entries: PLCDirectoryEntry[], overlap: number }>}
 */
function plcDirectoryRaw(since, overrides) {
  const useFetch = overrides?.fetch || fetch;
  return streamBuffer(async stream => {
    const EXPORT_URL = 'https://plc.directory/export';
    let sinceTime;
    if (since) {
      if (typeof since === 'string') {
        since = new Date(since);
      } else if (typeof since === 'number') {
        since = new Date(since);
      }
      if (Number.isFinite(since.getTime())) sinceTime = since.toISOString();
    }
    const lastChunkLines = new Set();
    let lastWaitedForConsumptionAt = Date.now();
    let collectedEntriesSinceLastWaitedForConsumption = 0;
    while (true) {
      const nextChunkRe = await useFetch(EXPORT_URL + (sinceTime ? '?after=' + sinceTime : ''));
      if (stream.isEnded) return;
      const nextChunkText = await nextChunkRe.text();
      const chunkLines = nextChunkText.split('\n');
      let overlap = 0;
      const nextChunkEnitres = [];
      for (const line of chunkLines) {
        if (lastChunkLines.has(line)) {
          overlap++;
          continue;
        }
        if (!line) continue;
        nextChunkEnitres.push(JSON.parse(line));
      }
      if (nextChunkEnitres.length) {
        lastChunkLines.clear();
        for (const line of chunkLines) {
          lastChunkLines.add(line);
        }
        collectedEntriesSinceLastWaitedForConsumption += nextChunkEnitres.length;
      }
      const waitForConsumption = stream.yield({
        entries: nextChunkEnitres,
        overlap
      }, (buffer, item) => {
        if (!buffer) return item;
        buffer.entries = buffer.entries.concat(item.entries);
        buffer.overlap += item.overlap;
        return buffer;
      });
      if (stream.isEnded) return;
      const shouldWaitForConsumption = collectedEntriesSinceLastWaitedForConsumption > FETCH_AHEAD_COUNT_MAX || Date.now() - lastWaitedForConsumptionAt > FETCH_AHEAD_MSEC_MAX || !nextChunkEnitres.length;
      if (shouldWaitForConsumption) {
        await waitForConsumption;
        if (stream.isEnded) return;
      }

      /** @type {Date | undefined} */
      let nextSinceTime;
      // iterate backwards to find timestamp just before latest
      for (let i = 0; i < nextChunkEnitres.length; i++) {
        const entry = nextChunkEnitres[nextChunkEnitres.length - i - 1];
        if (entry.createdAt) {
          const timestamp = new Date(entry.createdAt);
          if (!nextSinceTime && timestamp.getTime()) {
            nextSinceTime = timestamp;
          } else if (nextSinceTime && timestamp.getTime() && timestamp.getTime() < nextSinceTime.getTime()) {
            sinceTime = timestamp.toISOString();
            break;
          }
        }
      }
    }
  });
}

/**
 * @typedef {{
 *  timestamp: number,
 *  shortDID: string,
 *  shortHandle?: string,
 *  shortPDC?: string;
 * }} PLCDirectoryEntryCompact
 */

/**
 * @param {string | Date | number | null} [since]
 * @param {Overrides} [overrides]
 * @returns {AsyncGenerator<{ entries: PLCDirectoryEntryCompact[] }>}
 */
async function* plcDirectoryCompact(since, overrides) {
  const iteration = plcDirectoryRaw(since, overrides);
  for await (const chunk of iteration) {
    const compactEntries = [];
    for (const entry of chunk.entries) {
      const timestamp = Date.parse(entry.createdAt);
      const compact = {
        timestamp,
        shortDID: shortenDID(entry.did),
        shortHandle: shortenHandle(entry.operation.alsoKnownAs?.[0] || entry.operation.handle),
        shortPDC: shortenPDS(entry.operation.services?.atproto_pds?.endpoint || entry.operation.service)
      };
      compactEntries.push(compact);
    }
    yield {
      entries: compactEntries
    };
  }
}

/**
 * @param {string} shortDID
 * @param {Overrides} [overrides]
 * @returns {Promise<PlcDirectoryAuditLogEntry[]>}
 */
async function plcDirectoryHistoryRaw(shortDID, overrides) {
  const useFetch = overrides?.fetch || fetch;
  const fullDID = unwrapShortDID(shortDID);
  /** @type {PlcDirectoryAuditLogEntry[]} */
  const entries = await useFetch(`https://plc.directory/${fullDID}/log/audit`).then(x => x.json());
  return entries;
}

/**
 * @param {string} shortDID
 * @param {Overrides} [overrides]
 * @returns {Promise<PLCDirectoryEntryCompact[]>}
 */
async function plcDirectoryHistoryCompact(shortDID, overrides) {
  const entries = await plcDirectoryHistoryRaw(shortDID, overrides);
  const compactEntries = [];
  for (const entry of entries) {
    const timestamp = Date.parse(entry.createdAt);
    const compact = {
      timestamp,
      shortDID: shortenDID(entry.did),
      shortHandle: shortenHandle(entry.operation.alsoKnownAs?.[0] || /** @type {*} */entry.operation.handle),
      shortPDC: shortenPDS(entry.operation.services?.atproto_pds?.endpoint || /** @type {*} */entry.operation.service)
    };
    compactEntries.push(compact);
  }
  return compactEntries;
}

// @ts-check


/**
 * @template {Function} TFunction
 * @param {TFunction} call
 * @param {{ maxConcurrency?: number, interval?: number }} _
 * @returns {TFunction & { prepopulate: (value: any, ...args: any[]) => void, evict: (...args: any[]) => void }}
 */
function throttledAsyncCache(call, {
  maxConcurrency = 3,
  interval = 100
} = {}) {
  const cache = multikeyMap();
  const outstandingRequests = new Set();
  const waitingRequests = new Set();
  var scheduleMoreLaterTimeout;
  throttledCall.prepopulate = prepopulate;
  throttledCall.evict = evict;
  return throttledCall;
  function prepopulate(value, ...args) {
    cache.set(...args, {
      value
    });
  }
  function evict(...args) {
    cache.delete(...args);
  }
  function throttledCall(...args) {
    let result = cache.get(...args);
    if (result) {
      if (isPromise(result.value)) result.priority++;
      return result.value;
    }
    let scheduleNow;
    const schedulePromise = new Promise(resolve => scheduleNow = resolve);
    const entry = {
      priority: 0,
      value: invokeCall(),
      scheduleNow
    };
    cache.set(...args, entry);
    waitingRequests.add(entry);
    scheduleAsAppropriate();
    return entry.value;
    async function invokeCall() {
      await schedulePromise;
      waitingRequests.delete(entry);
      outstandingRequests.add(entry);
      try {
        const result = await call(...args);
        entry.value = result;
        return result;
      } finally {
        outstandingRequests.delete(entry);
        scheduleAsAppropriate();
      }
    }
  }
  async function scheduleAsAppropriate() {
    if (outstandingRequests.size >= maxConcurrency) return;
    if (interval) {
      await new Promise(resolve => setTimeout(resolve, interval));
      if (outstandingRequests.size >= maxConcurrency) return;
    }
    const nextRequest = [...waitingRequests].sort((a, b) => b.priority - a.priority)[0];
    if (!nextRequest) return;
    nextRequest.scheduleNow();
    if (outstandingRequests.size < maxConcurrency) {
      clearTimeout(scheduleMoreLaterTimeout);
      scheduleMoreLaterTimeout = setTimeout(scheduleAsAppropriate, interval || 100);
    }
  }
}
function multikeyMap() {
  /** @type {Map & { _value?: any }} */
  const storeMap = new Map();
  const resultMap = {
    get,
    set,
    delete: deleteKeys,
    has,
    clear
  };
  return resultMap;
  function get(...keys) {
    let entry = storeMap;
    for (const key of keys) {
      entry = entry.get(key);
      if (!entry) return;
    }
    return entry._value;
  }
  function set(...keys) {
    let entry = storeMap;
    for (let i = 0; i < keys.length - 1; i++) {
      const key = keys[i];
      entry = entry.get(key) || entry.set(key, new Map()).get(key);
    }
    entry._value = keys[keys.length - 1];
    return resultMap;
  }
  function deleteKeys(...keys) {
    let entry = storeMap;
    for (let i = 0; i < keys.length - 1; i++) {
      const key = keys[i];
      entry = entry.get(key);
      if (!entry) return false;
    }
    return entry.delete(keys[keys.length - 1]);
  }
  function has(...keys) {
    let entry = storeMap;
    for (const key of keys) {
      entry = entry.get(key);
      if (!entry) return false;
    }
    return true;
  }
  function clear() {
    return storeMap.clear();
  }
}

var dexie_min$1 = {exports: {}};

var dexie_min = dexie_min$1.exports;
var hasRequiredDexie_min;
function requireDexie_min() {
  if (hasRequiredDexie_min) return dexie_min$1.exports;
  hasRequiredDexie_min = 1;
  (function (module, exports) {
    (function (e, t) {
      module.exports = t() ;
    })(dexie_min, function () {

      var s = function (e, t) {
        return (s = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (e, t) {
          e.__proto__ = t;
        } || function (e, t) {
          for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
        })(e, t);
      };
      var _ = function () {
        return (_ = Object.assign || function (e) {
          for (var t, n = 1, r = arguments.length; n < r; n++) for (var i in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
          return e;
        }).apply(this, arguments);
      };
      function i(e, t, n) {
        for (var r, i = 0, o = t.length; i < o; i++) !r && i in t || ((r = r || Array.prototype.slice.call(t, 0, i))[i] = t[i]);
        return e.concat(r || Array.prototype.slice.call(t));
      }
      var f = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : "undefined" != typeof window ? window : commonjsGlobal,
        x = Object.keys,
        k = Array.isArray;
      function a(t, n) {
        return "object" != typeof n || x(n).forEach(function (e) {
          t[e] = n[e];
        }), t;
      }
      "undefined" == typeof Promise || f.Promise || (f.Promise = Promise);
      var c = Object.getPrototypeOf,
        n = {}.hasOwnProperty;
      function m(e, t) {
        return n.call(e, t);
      }
      function r(t, n) {
        "function" == typeof n && (n = n(c(t))), ("undefined" == typeof Reflect ? x : Reflect.ownKeys)(n).forEach(function (e) {
          l(t, e, n[e]);
        });
      }
      var u = Object.defineProperty;
      function l(e, t, n, r) {
        u(e, t, a(n && m(n, "get") && "function" == typeof n.get ? {
          get: n.get,
          set: n.set,
          configurable: true
        } : {
          value: n,
          configurable: true,
          writable: true
        }, r));
      }
      function o(t) {
        return {
          from: function (e) {
            return t.prototype = Object.create(e.prototype), l(t.prototype, "constructor", t), {
              extend: r.bind(null, t.prototype)
            };
          }
        };
      }
      var h = Object.getOwnPropertyDescriptor;
      var d = [].slice;
      function b(e, t, n) {
        return d.call(e, t, n);
      }
      function p(e, t) {
        return t(e);
      }
      function y(e) {
        if (!e) throw new Error("Assertion Failed");
      }
      function v(e) {
        f.setImmediate ? setImmediate(e) : setTimeout(e, 0);
      }
      function O(e, t) {
        if ("string" == typeof t && m(e, t)) return e[t];
        if (!t) return e;
        if ("string" != typeof t) {
          for (var n = [], r = 0, i = t.length; r < i; ++r) {
            var o = O(e, t[r]);
            n.push(o);
          }
          return n;
        }
        var a = t.indexOf(".");
        if (-1 !== a) {
          var u = e[t.substr(0, a)];
          return null == u ? undefined : O(u, t.substr(a + 1));
        }
      }
      function P(e, t, n) {
        if (e && undefined !== t && !("isFrozen" in Object && Object.isFrozen(e))) if ("string" != typeof t && "length" in t) {
          y("string" != typeof n && "length" in n);
          for (var r = 0, i = t.length; r < i; ++r) P(e, t[r], n[r]);
        } else {
          var o,
            a,
            u = t.indexOf(".");
          -1 !== u ? (o = t.substr(0, u), "" === (a = t.substr(u + 1)) ? undefined === n ? k(e) && !isNaN(parseInt(o)) ? e.splice(o, 1) : delete e[o] : e[o] = n : P(u = !(u = e[o]) || !m(e, o) ? e[o] = {} : u, a, n)) : undefined === n ? k(e) && !isNaN(parseInt(t)) ? e.splice(t, 1) : delete e[t] : e[t] = n;
        }
      }
      function g(e) {
        var t,
          n = {};
        for (t in e) m(e, t) && (n[t] = e[t]);
        return n;
      }
      var t = [].concat;
      function w(e) {
        return t.apply([], e);
      }
      var e = "BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(w([8, 16, 32, 64].map(function (t) {
          return ["Int", "Uint", "Float"].map(function (e) {
            return e + t + "Array";
          });
        }))).filter(function (e) {
          return f[e];
        }),
        K = new Set(e.map(function (e) {
          return f[e];
        }));
      var E = null;
      function S(e) {
        E = new WeakMap();
        e = function e(t) {
          if (!t || "object" != typeof t) return t;
          var n = E.get(t);
          if (n) return n;
          if (k(t)) {
            n = [], E.set(t, n);
            for (var r = 0, i = t.length; r < i; ++r) n.push(e(t[r]));
          } else if (K.has(t.constructor)) n = t;else {
            var o,
              a = c(t);
            for (o in n = a === Object.prototype ? {} : Object.create(a), E.set(t, n), t) m(t, o) && (n[o] = e(t[o]));
          }
          return n;
        }(e);
        return E = null, e;
      }
      var j = {}.toString;
      function A(e) {
        return j.call(e).slice(8, -1);
      }
      var C = "undefined" != typeof Symbol ? Symbol.iterator : "@@iterator",
        T = "symbol" == typeof C ? function (e) {
          var t;
          return null != e && (t = e[C]) && t.apply(e);
        } : function () {
          return null;
        };
      function q(e, t) {
        t = e.indexOf(t);
        return 0 <= t && e.splice(t, 1), 0 <= t;
      }
      var D = {};
      function I(e) {
        var t, n, r, i;
        if (1 === arguments.length) {
          if (k(e)) return e.slice();
          if (this === D && "string" == typeof e) return [e];
          if (i = T(e)) {
            for (n = []; !(r = i.next()).done;) n.push(r.value);
            return n;
          }
          if (null == e) return [e];
          if ("number" != typeof (t = e.length)) return [e];
          for (n = new Array(t); t--;) n[t] = e[t];
          return n;
        }
        for (t = arguments.length, n = new Array(t); t--;) n[t] = arguments[t];
        return n;
      }
      var B = "undefined" != typeof Symbol ? function (e) {
          return "AsyncFunction" === e[Symbol.toStringTag];
        } : function () {
          return false;
        },
        R = ["Unknown", "Constraint", "Data", "TransactionInactive", "ReadOnly", "Version", "NotFound", "InvalidState", "InvalidAccess", "Abort", "Timeout", "QuotaExceeded", "Syntax", "DataClone"],
        M = ["Modify", "Bulk", "OpenFailed", "VersionChange", "Schema", "Upgrade", "InvalidTable", "MissingAPI", "NoSuchDatabase", "InvalidArgument", "SubTransaction", "Unsupported", "Internal", "DatabaseClosed", "PrematureCommit", "ForeignAwait"].concat(R),
        F = {
          VersionChanged: "Database version changed by other database connection",
          DatabaseClosed: "Database has been closed",
          Abort: "Transaction aborted",
          TransactionInactive: "Transaction has already completed or failed",
          MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
        };
      function N(e, t) {
        this.name = e, this.message = t;
      }
      function L(e, t) {
        return e + ". Errors: " + Object.keys(t).map(function (e) {
          return t[e].toString();
        }).filter(function (e, t, n) {
          return n.indexOf(e) === t;
        }).join("\n");
      }
      function U(e, t, n, r) {
        this.failures = t, this.failedKeys = r, this.successCount = n, this.message = L(e, t);
      }
      function V(e, t) {
        this.name = "BulkError", this.failures = Object.keys(t).map(function (e) {
          return t[e];
        }), this.failuresByPos = t, this.message = L(e, this.failures);
      }
      o(N).from(Error).extend({
        toString: function () {
          return this.name + ": " + this.message;
        }
      }), o(U).from(N), o(V).from(N);
      var z = M.reduce(function (e, t) {
          return e[t] = t + "Error", e;
        }, {}),
        W = N,
        Y = M.reduce(function (e, n) {
          var r = n + "Error";
          function t(e, t) {
            this.name = r, e ? "string" == typeof e ? (this.message = "".concat(e).concat(t ? "\n " + t : ""), this.inner = t || null) : "object" == typeof e && (this.message = "".concat(e.name, " ").concat(e.message), this.inner = e) : (this.message = F[n] || r, this.inner = null);
          }
          return o(t).from(W), e[n] = t, e;
        }, {});
      Y.Syntax = SyntaxError, Y.Type = TypeError, Y.Range = RangeError;
      var $ = R.reduce(function (e, t) {
        return e[t + "Error"] = Y[t], e;
      }, {});
      var Q = M.reduce(function (e, t) {
        return -1 === ["Syntax", "Type", "Range"].indexOf(t) && (e[t + "Error"] = Y[t]), e;
      }, {});
      function G() {}
      function X(e) {
        return e;
      }
      function H(t, n) {
        return null == t || t === X ? n : function (e) {
          return n(t(e));
        };
      }
      function J(e, t) {
        return function () {
          e.apply(this, arguments), t.apply(this, arguments);
        };
      }
      function Z(i, o) {
        return i === G ? o : function () {
          var e = i.apply(this, arguments);
          undefined !== e && (arguments[0] = e);
          var t = this.onsuccess,
            n = this.onerror;
          this.onsuccess = null, this.onerror = null;
          var r = o.apply(this, arguments);
          return t && (this.onsuccess = this.onsuccess ? J(t, this.onsuccess) : t), n && (this.onerror = this.onerror ? J(n, this.onerror) : n), undefined !== r ? r : e;
        };
      }
      function ee(n, r) {
        return n === G ? r : function () {
          n.apply(this, arguments);
          var e = this.onsuccess,
            t = this.onerror;
          this.onsuccess = this.onerror = null, r.apply(this, arguments), e && (this.onsuccess = this.onsuccess ? J(e, this.onsuccess) : e), t && (this.onerror = this.onerror ? J(t, this.onerror) : t);
        };
      }
      function te(i, o) {
        return i === G ? o : function (e) {
          var t = i.apply(this, arguments);
          a(e, t);
          var n = this.onsuccess,
            r = this.onerror;
          this.onsuccess = null, this.onerror = null;
          e = o.apply(this, arguments);
          return n && (this.onsuccess = this.onsuccess ? J(n, this.onsuccess) : n), r && (this.onerror = this.onerror ? J(r, this.onerror) : r), undefined === t ? undefined === e ? undefined : e : a(t, e);
        };
      }
      function ne(e, t) {
        return e === G ? t : function () {
          return false !== t.apply(this, arguments) && e.apply(this, arguments);
        };
      }
      function re(i, o) {
        return i === G ? o : function () {
          var e = i.apply(this, arguments);
          if (e && "function" == typeof e.then) {
            for (var t = this, n = arguments.length, r = new Array(n); n--;) r[n] = arguments[n];
            return e.then(function () {
              return o.apply(t, r);
            });
          }
          return o.apply(this, arguments);
        };
      }
      Q.ModifyError = U, Q.DexieError = N, Q.BulkError = V;
      var ie = "undefined" != typeof location && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
      function oe(e) {
        ie = e;
      }
      var ae = {},
        ue = 100,
        e = "undefined" == typeof Promise ? [] : function () {
          var e = Promise.resolve();
          if ("undefined" == typeof crypto || !crypto.subtle) return [e, c(e), e];
          var t = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
          return [t, c(t), e];
        }(),
        R = e[0],
        M = e[1],
        e = e[2],
        M = M && M.then,
        se = R && R.constructor,
        ce = !!e;
      var le = function (e, t) {
          be.push([e, t]), he && (queueMicrotask(Se), he = false);
        },
        fe = true,
        he = true,
        de = [],
        pe = [],
        ye = X,
        ve = {
          id: "global",
          global: true,
          ref: 0,
          unhandleds: [],
          onunhandled: G,
          pgp: false,
          env: {},
          finalize: G
        },
        me = ve,
        be = [],
        ge = 0,
        we = [];
      function _e(e) {
        if ("object" != typeof this) throw new TypeError("Promises must be constructed via new");
        this._listeners = [], this._lib = false;
        var t = this._PSD = me;
        if ("function" != typeof e) {
          if (e !== ae) throw new TypeError("Not a function");
          return this._state = arguments[1], this._value = arguments[2], void (false === this._state && Oe(this, this._value));
        }
        this._state = null, this._value = null, ++t.ref, function t(r, e) {
          try {
            e(function (n) {
              if (null === r._state) {
                if (n === r) throw new TypeError("A promise cannot be resolved with itself.");
                var e = r._lib && je();
                n && "function" == typeof n.then ? t(r, function (e, t) {
                  n instanceof _e ? n._then(e, t) : n.then(e, t);
                }) : (r._state = !0, r._value = n, Pe(r)), e && Ae();
              }
            }, Oe.bind(null, r));
          } catch (e) {
            Oe(r, e);
          }
        }(this, e);
      }
      var xe = {
        get: function () {
          var u = me,
            t = Me;
          function e(n, r) {
            var i = this,
              o = !u.global && (u !== me || t !== Me),
              a = o && !Ue(),
              e = new _e(function (e, t) {
                Ke(i, new ke(Qe(n, u, o, a), Qe(r, u, o, a), e, t, u));
              });
            return this._consoleTask && (e._consoleTask = this._consoleTask), e;
          }
          return e.prototype = ae, e;
        },
        set: function (e) {
          l(this, "then", e && e.prototype === ae ? xe : {
            get: function () {
              return e;
            },
            set: xe.set
          });
        }
      };
      function ke(e, t, n, r, i) {
        this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof t ? t : null, this.resolve = n, this.reject = r, this.psd = i;
      }
      function Oe(e, t) {
        var n, r;
        pe.push(t), null === e._state && (n = e._lib && je(), t = ye(t), e._state = false, e._value = t, r = e, de.some(function (e) {
          return e._value === r._value;
        }) || de.push(r), Pe(e), n && Ae());
      }
      function Pe(e) {
        var t = e._listeners;
        e._listeners = [];
        for (var n = 0, r = t.length; n < r; ++n) Ke(e, t[n]);
        var i = e._PSD;
        --i.ref || i.finalize(), 0 === ge && (++ge, le(function () {
          0 == --ge && Ce();
        }, []));
      }
      function Ke(e, t) {
        if (null !== e._state) {
          var n = e._state ? t.onFulfilled : t.onRejected;
          if (null === n) return (e._state ? t.resolve : t.reject)(e._value);
          ++t.psd.ref, ++ge, le(Ee, [n, e, t]);
        } else e._listeners.push(t);
      }
      function Ee(e, t, n) {
        try {
          var r,
            i = t._value;
          !t._state && pe.length && (pe = []), r = ie && t._consoleTask ? t._consoleTask.run(function () {
            return e(i);
          }) : e(i), t._state || -1 !== pe.indexOf(i) || function (e) {
            var t = de.length;
            for (; t;) if (de[--t]._value === e._value) return de.splice(t, 1);
          }(t), n.resolve(r);
        } catch (e) {
          n.reject(e);
        } finally {
          0 == --ge && Ce(), --n.psd.ref || n.psd.finalize();
        }
      }
      function Se() {
        $e(ve, function () {
          je() && Ae();
        });
      }
      function je() {
        var e = fe;
        return he = fe = false, e;
      }
      function Ae() {
        var e, t, n;
        do {
          for (; 0 < be.length;) for (e = be, be = [], n = e.length, t = 0; t < n; ++t) {
            var r = e[t];
            r[0].apply(null, r[1]);
          }
        } while (0 < be.length);
        he = fe = true;
      }
      function Ce() {
        var e = de;
        de = [], e.forEach(function (e) {
          e._PSD.onunhandled.call(null, e._value, e);
        });
        for (var t = we.slice(0), n = t.length; n;) t[--n]();
      }
      function Te(e) {
        return new _e(ae, false, e);
      }
      function qe(n, r) {
        var i = me;
        return function () {
          var e = je(),
            t = me;
          try {
            return We(i, !0), n.apply(this, arguments);
          } catch (e) {
            r && r(e);
          } finally {
            We(t, false), e && Ae();
          }
        };
      }
      r(_e.prototype, {
        then: xe,
        _then: function (e, t) {
          Ke(this, new ke(null, null, e, t, me));
        },
        catch: function (e) {
          if (1 === arguments.length) return this.then(null, e);
          var t = e,
            n = arguments[1];
          return "function" == typeof t ? this.then(null, function (e) {
            return (e instanceof t ? n : Te)(e);
          }) : this.then(null, function (e) {
            return (e && e.name === t ? n : Te)(e);
          });
        },
        finally: function (t) {
          return this.then(function (e) {
            return _e.resolve(t()).then(function () {
              return e;
            });
          }, function (e) {
            return _e.resolve(t()).then(function () {
              return Te(e);
            });
          });
        },
        timeout: function (r, i) {
          var o = this;
          return r < 1 / 0 ? new _e(function (e, t) {
            var n = setTimeout(function () {
              return t(new Y.Timeout(i));
            }, r);
            o.then(e, t).finally(clearTimeout.bind(null, n));
          }) : this;
        }
      }), "undefined" != typeof Symbol && Symbol.toStringTag && l(_e.prototype, Symbol.toStringTag, "Dexie.Promise"), ve.env = Ye(), r(_e, {
        all: function () {
          var o = I.apply(null, arguments).map(Ve);
          return new _e(function (n, r) {
            0 === o.length && n([]);
            var i = o.length;
            o.forEach(function (e, t) {
              return _e.resolve(e).then(function (e) {
                o[t] = e, --i || n(o);
              }, r);
            });
          });
        },
        resolve: function (n) {
          return n instanceof _e ? n : n && "function" == typeof n.then ? new _e(function (e, t) {
            n.then(e, t);
          }) : new _e(ae, true, n);
        },
        reject: Te,
        race: function () {
          var e = I.apply(null, arguments).map(Ve);
          return new _e(function (t, n) {
            e.map(function (e) {
              return _e.resolve(e).then(t, n);
            });
          });
        },
        PSD: {
          get: function () {
            return me;
          },
          set: function (e) {
            return me = e;
          }
        },
        totalEchoes: {
          get: function () {
            return Me;
          }
        },
        newPSD: Ne,
        usePSD: $e,
        scheduler: {
          get: function () {
            return le;
          },
          set: function (e) {
            le = e;
          }
        },
        rejectionMapper: {
          get: function () {
            return ye;
          },
          set: function (e) {
            ye = e;
          }
        },
        follow: function (i, n) {
          return new _e(function (e, t) {
            return Ne(function (n, r) {
              var e = me;
              e.unhandleds = [], e.onunhandled = r, e.finalize = J(function () {
                var t,
                  e = this;
                t = function () {
                  0 === e.unhandleds.length ? n() : r(e.unhandleds[0]);
                }, we.push(function e() {
                  t(), we.splice(we.indexOf(e), 1);
                }), ++ge, le(function () {
                  0 == --ge && Ce();
                }, []);
              }, e.finalize), i();
            }, n, e, t);
          });
        }
      }), se && (se.allSettled && l(_e, "allSettled", function () {
        var e = I.apply(null, arguments).map(Ve);
        return new _e(function (n) {
          0 === e.length && n([]);
          var r = e.length,
            i = new Array(r);
          e.forEach(function (e, t) {
            return _e.resolve(e).then(function (e) {
              return i[t] = {
                status: "fulfilled",
                value: e
              };
            }, function (e) {
              return i[t] = {
                status: "rejected",
                reason: e
              };
            }).then(function () {
              return --r || n(i);
            });
          });
        });
      }), se.any && "undefined" != typeof AggregateError && l(_e, "any", function () {
        var e = I.apply(null, arguments).map(Ve);
        return new _e(function (n, r) {
          0 === e.length && r(new AggregateError([]));
          var i = e.length,
            o = new Array(i);
          e.forEach(function (e, t) {
            return _e.resolve(e).then(function (e) {
              return n(e);
            }, function (e) {
              o[t] = e, --i || r(new AggregateError(o));
            });
          });
        });
      }), se.withResolvers && (_e.withResolvers = se.withResolvers));
      var De = {
          awaits: 0,
          echoes: 0,
          id: 0
        },
        Ie = 0,
        Be = [],
        Re = 0,
        Me = 0,
        Fe = 0;
      function Ne(e, t, n, r) {
        var i = me,
          o = Object.create(i);
        o.parent = i, o.ref = 0, o.global = false, o.id = ++Fe, ve.env, o.env = ce ? {
          Promise: _e,
          PromiseProp: {
            value: _e,
            configurable: true,
            writable: true
          },
          all: _e.all,
          race: _e.race,
          allSettled: _e.allSettled,
          any: _e.any,
          resolve: _e.resolve,
          reject: _e.reject
        } : {}, t && a(o, t), ++i.ref, o.finalize = function () {
          --this.parent.ref || this.parent.finalize();
        };
        r = $e(o, e, n, r);
        return 0 === o.ref && o.finalize(), r;
      }
      function Le() {
        return De.id || (De.id = ++Ie), ++De.awaits, De.echoes += ue, De.id;
      }
      function Ue() {
        return !!De.awaits && (0 == --De.awaits && (De.id = 0), De.echoes = De.awaits * ue, true);
      }
      function Ve(e) {
        return De.echoes && e && e.constructor === se ? (Le(), e.then(function (e) {
          return Ue(), e;
        }, function (e) {
          return Ue(), Xe(e);
        })) : e;
      }
      function ze() {
        var e = Be[Be.length - 1];
        Be.pop(), We(e, false);
      }
      function We(e, t) {
        var n,
          r = me;
        (t ? !De.echoes || Re++ && e === me : !Re || --Re && e === me) || queueMicrotask(t ? function (e) {
          ++Me, De.echoes && 0 != --De.echoes || (De.echoes = De.awaits = De.id = 0), Be.push(me), We(e, true);
        }.bind(null, e) : ze), e !== me && (me = e, r === ve && (ve.env = Ye()), ce && (n = ve.env.Promise, t = e.env, (r.global || e.global) && (Object.defineProperty(f, "Promise", t.PromiseProp), n.all = t.all, n.race = t.race, n.resolve = t.resolve, n.reject = t.reject, t.allSettled && (n.allSettled = t.allSettled), t.any && (n.any = t.any))));
      }
      function Ye() {
        var e = f.Promise;
        return ce ? {
          Promise: e,
          PromiseProp: Object.getOwnPropertyDescriptor(f, "Promise"),
          all: e.all,
          race: e.race,
          allSettled: e.allSettled,
          any: e.any,
          resolve: e.resolve,
          reject: e.reject
        } : {};
      }
      function $e(e, t, n, r, i) {
        var o = me;
        try {
          return We(e, !0), t(n, r, i);
        } finally {
          We(o, false);
        }
      }
      function Qe(t, n, r, i) {
        return "function" != typeof t ? t : function () {
          var e = me;
          r && Le(), We(n, true);
          try {
            return t.apply(this, arguments);
          } finally {
            We(e, false), i && queueMicrotask(Ue);
          }
        };
      }
      function Ge(e) {
        Promise === se && 0 === De.echoes ? 0 === Re ? e() : enqueueNativeMicroTask(e) : setTimeout(e, 0);
      }
      -1 === ("" + M).indexOf("[native code]") && (Le = Ue = G);
      var Xe = _e.reject;
      var He = String.fromCharCode(65535),
        Je = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",
        Ze = "String expected.",
        et = [],
        tt = "__dbnames",
        nt = "readonly",
        rt = "readwrite";
      function it(e, t) {
        return e ? t ? function () {
          return e.apply(this, arguments) && t.apply(this, arguments);
        } : e : t;
      }
      var ot = {
        type: 3,
        lower: -1 / 0,
        lowerOpen: false,
        upper: [[]],
        upperOpen: false
      };
      function at(t) {
        return "string" != typeof t || /\./.test(t) ? function (e) {
          return e;
        } : function (e) {
          return undefined === e[t] && t in e && delete (e = S(e))[t], e;
        };
      }
      function ut() {
        throw Y.Type();
      }
      function st(e, t) {
        try {
          var n = ct(e),
            r = ct(t);
          if (n !== r) return "Array" === n ? 1 : "Array" === r ? -1 : "binary" === n ? 1 : "binary" === r ? -1 : "string" === n ? 1 : "string" === r ? -1 : "Date" === n ? 1 : "Date" !== r ? NaN : -1;
          switch (n) {
            case "number":
            case "Date":
            case "string":
              return t < e ? 1 : e < t ? -1 : 0;
            case "binary":
              return function (e, t) {
                for (var n = e.length, r = t.length, i = n < r ? n : r, o = 0; o < i; ++o) if (e[o] !== t[o]) return e[o] < t[o] ? -1 : 1;
                return n === r ? 0 : n < r ? -1 : 1;
              }(lt(e), lt(t));
            case "Array":
              return function (e, t) {
                for (var n = e.length, r = t.length, i = n < r ? n : r, o = 0; o < i; ++o) {
                  var a = st(e[o], t[o]);
                  if (0 !== a) return a;
                }
                return n === r ? 0 : n < r ? -1 : 1;
              }(e, t);
          }
        } catch (e) {}
        return NaN;
      }
      function ct(e) {
        var t = typeof e;
        if ("object" != t) return t;
        if (ArrayBuffer.isView(e)) return "binary";
        e = A(e);
        return "ArrayBuffer" === e ? "binary" : e;
      }
      function lt(e) {
        return e instanceof Uint8Array ? e : ArrayBuffer.isView(e) ? new Uint8Array(e.buffer, e.byteOffset, e.byteLength) : new Uint8Array(e);
      }
      var ft = (ht.prototype._trans = function (e, r, t) {
        var n = this._tx || me.trans,
          i = this.name,
          o = ie && "undefined" != typeof console && console.createTask && console.createTask("Dexie: ".concat("readonly" === e ? "read" : "write", " ").concat(this.name));
        function a(e, t, n) {
          if (!n.schema[i]) throw new Y.NotFound("Table " + i + " not part of transaction");
          return r(n.idbtrans, n);
        }
        var u = je();
        try {
          var s = n && n.db._novip === this.db._novip ? n === me.trans ? n._promise(e, a, t) : Ne(function () {
            return n._promise(e, a, t);
          }, {
            trans: n,
            transless: me.transless || me
          }) : function t(n, r, i, o) {
            if (n.idbdb && (n._state.openComplete || me.letThrough || n._vip)) {
              var a = n._createTransaction(r, i, n._dbSchema);
              try {
                a.create(), n._state.PR1398_maxLoop = 3;
              } catch (e) {
                return e.name === z.InvalidState && n.isOpen() && 0 < --n._state.PR1398_maxLoop ? (console.warn("Dexie: Need to reopen db"), n.close({
                  disableAutoOpen: !1
                }), n.open().then(function () {
                  return t(n, r, i, o);
                })) : Xe(e);
              }
              return a._promise(r, function (e, t) {
                return Ne(function () {
                  return me.trans = a, o(e, t, a);
                });
              }).then(function (e) {
                if ("readwrite" === r) try {
                  a.idbtrans.commit();
                } catch (e) {}
                return "readonly" === r ? e : a._completion.then(function () {
                  return e;
                });
              });
            }
            if (n._state.openComplete) return Xe(new Y.DatabaseClosed(n._state.dbOpenError));
            if (!n._state.isBeingOpened) {
              if (!n._state.autoOpen) return Xe(new Y.DatabaseClosed());
              n.open().catch(G);
            }
            return n._state.dbReadyPromise.then(function () {
              return t(n, r, i, o);
            });
          }(this.db, e, [this.name], a);
          return o && (s._consoleTask = o, s = s.catch(function (e) {
            return console.trace(e), Xe(e);
          })), s;
        } finally {
          u && Ae();
        }
      }, ht.prototype.get = function (t, e) {
        var n = this;
        return t && t.constructor === Object ? this.where(t).first(e) : null == t ? Xe(new Y.Type("Invalid argument to Table.get()")) : this._trans("readonly", function (e) {
          return n.core.get({
            trans: e,
            key: t
          }).then(function (e) {
            return n.hook.reading.fire(e);
          });
        }).then(e);
      }, ht.prototype.where = function (o) {
        if ("string" == typeof o) return new this.db.WhereClause(this, o);
        if (k(o)) return new this.db.WhereClause(this, "[".concat(o.join("+"), "]"));
        var n = x(o);
        if (1 === n.length) return this.where(n[0]).equals(o[n[0]]);
        var e = this.schema.indexes.concat(this.schema.primKey).filter(function (t) {
          if (t.compound && n.every(function (e) {
            return 0 <= t.keyPath.indexOf(e);
          })) {
            for (var e = 0; e < n.length; ++e) if (-1 === n.indexOf(t.keyPath[e])) return false;
            return true;
          }
          return false;
        }).sort(function (e, t) {
          return e.keyPath.length - t.keyPath.length;
        })[0];
        if (e && this.db._maxKey !== He) {
          var t = e.keyPath.slice(0, n.length);
          return this.where(t).equals(t.map(function (e) {
            return o[e];
          }));
        }
        !e && ie && console.warn("The query ".concat(JSON.stringify(o), " on ").concat(this.name, " would benefit from a ") + "compound index [".concat(n.join("+"), "]"));
        var a = this.schema.idxByName;
        function u(e, t) {
          return 0 === st(e, t);
        }
        var r = n.reduce(function (e, t) {
            var n = e[0],
              r = e[1],
              e = a[t],
              i = o[t];
            return [n || e, n || !e ? it(r, e && e.multi ? function (e) {
              e = O(e, t);
              return k(e) && e.some(function (e) {
                return u(i, e);
              });
            } : function (e) {
              return u(i, O(e, t));
            }) : r];
          }, [null, null]),
          t = r[0],
          r = r[1];
        return t ? this.where(t.name).equals(o[t.keyPath]).filter(r) : e ? this.filter(r) : this.where(n).equals("");
      }, ht.prototype.filter = function (e) {
        return this.toCollection().and(e);
      }, ht.prototype.count = function (e) {
        return this.toCollection().count(e);
      }, ht.prototype.offset = function (e) {
        return this.toCollection().offset(e);
      }, ht.prototype.limit = function (e) {
        return this.toCollection().limit(e);
      }, ht.prototype.each = function (e) {
        return this.toCollection().each(e);
      }, ht.prototype.toArray = function (e) {
        return this.toCollection().toArray(e);
      }, ht.prototype.toCollection = function () {
        return new this.db.Collection(new this.db.WhereClause(this));
      }, ht.prototype.orderBy = function (e) {
        return new this.db.Collection(new this.db.WhereClause(this, k(e) ? "[".concat(e.join("+"), "]") : e));
      }, ht.prototype.reverse = function () {
        return this.toCollection().reverse();
      }, ht.prototype.mapToClass = function (r) {
        var e,
          t = this.db,
          n = this.name;
        function i() {
          return null !== e && e.apply(this, arguments) || this;
        }
        (this.schema.mappedClass = r).prototype instanceof ut && (function (e, t) {
          if ("function" != typeof t && null !== t) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
          function n() {
            this.constructor = e;
          }
          s(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());
        }(i, e = r), Object.defineProperty(i.prototype, "db", {
          get: function () {
            return t;
          },
          enumerable: false,
          configurable: true
        }), i.prototype.table = function () {
          return n;
        }, r = i);
        for (var o = new Set(), a = r.prototype; a; a = c(a)) Object.getOwnPropertyNames(a).forEach(function (e) {
          return o.add(e);
        });
        function u(e) {
          if (!e) return e;
          var t,
            n = Object.create(r.prototype);
          for (t in e) if (!o.has(t)) try {
            n[t] = e[t];
          } catch (e) {}
          return n;
        }
        return this.schema.readHook && this.hook.reading.unsubscribe(this.schema.readHook), this.schema.readHook = u, this.hook("reading", u), r;
      }, ht.prototype.defineClass = function () {
        return this.mapToClass(function (e) {
          a(this, e);
        });
      }, ht.prototype.add = function (t, n) {
        var r = this,
          e = this.schema.primKey,
          i = e.auto,
          o = e.keyPath,
          a = t;
        return o && i && (a = at(o)(t)), this._trans("readwrite", function (e) {
          return r.core.mutate({
            trans: e,
            type: "add",
            keys: null != n ? [n] : null,
            values: [a]
          });
        }).then(function (e) {
          return e.numFailures ? _e.reject(e.failures[0]) : e.lastResult;
        }).then(function (e) {
          if (o) try {
            P(t, o, e);
          } catch (e) {}
          return e;
        });
      }, ht.prototype.update = function (e, t) {
        if ("object" != typeof e || k(e)) return this.where(":id").equals(e).modify(t);
        e = O(e, this.schema.primKey.keyPath);
        return undefined === e ? Xe(new Y.InvalidArgument("Given object does not contain its primary key")) : this.where(":id").equals(e).modify(t);
      }, ht.prototype.put = function (t, n) {
        var r = this,
          e = this.schema.primKey,
          i = e.auto,
          o = e.keyPath,
          a = t;
        return o && i && (a = at(o)(t)), this._trans("readwrite", function (e) {
          return r.core.mutate({
            trans: e,
            type: "put",
            values: [a],
            keys: null != n ? [n] : null
          });
        }).then(function (e) {
          return e.numFailures ? _e.reject(e.failures[0]) : e.lastResult;
        }).then(function (e) {
          if (o) try {
            P(t, o, e);
          } catch (e) {}
          return e;
        });
      }, ht.prototype.delete = function (t) {
        var n = this;
        return this._trans("readwrite", function (e) {
          return n.core.mutate({
            trans: e,
            type: "delete",
            keys: [t]
          });
        }).then(function (e) {
          return e.numFailures ? _e.reject(e.failures[0]) : undefined;
        });
      }, ht.prototype.clear = function () {
        var t = this;
        return this._trans("readwrite", function (e) {
          return t.core.mutate({
            trans: e,
            type: "deleteRange",
            range: ot
          });
        }).then(function (e) {
          return e.numFailures ? _e.reject(e.failures[0]) : undefined;
        });
      }, ht.prototype.bulkGet = function (t) {
        var n = this;
        return this._trans("readonly", function (e) {
          return n.core.getMany({
            keys: t,
            trans: e
          }).then(function (e) {
            return e.map(function (e) {
              return n.hook.reading.fire(e);
            });
          });
        });
      }, ht.prototype.bulkAdd = function (r, e, t) {
        var o = this,
          a = Array.isArray(e) ? e : undefined,
          u = (t = t || (a ? undefined : e)) ? t.allKeys : undefined;
        return this._trans("readwrite", function (e) {
          var t = o.schema.primKey,
            n = t.auto,
            t = t.keyPath;
          if (t && a) throw new Y.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
          if (a && a.length !== r.length) throw new Y.InvalidArgument("Arguments objects and keys must have the same length");
          var i = r.length,
            t = t && n ? r.map(at(t)) : r;
          return o.core.mutate({
            trans: e,
            type: "add",
            keys: a,
            values: t,
            wantResults: u
          }).then(function (e) {
            var t = e.numFailures,
              n = e.results,
              r = e.lastResult,
              e = e.failures;
            if (0 === t) return u ? n : r;
            throw new V("".concat(o.name, ".bulkAdd(): ").concat(t, " of ").concat(i, " operations failed"), e);
          });
        });
      }, ht.prototype.bulkPut = function (r, e, t) {
        var o = this,
          a = Array.isArray(e) ? e : undefined,
          u = (t = t || (a ? undefined : e)) ? t.allKeys : undefined;
        return this._trans("readwrite", function (e) {
          var t = o.schema.primKey,
            n = t.auto,
            t = t.keyPath;
          if (t && a) throw new Y.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
          if (a && a.length !== r.length) throw new Y.InvalidArgument("Arguments objects and keys must have the same length");
          var i = r.length,
            t = t && n ? r.map(at(t)) : r;
          return o.core.mutate({
            trans: e,
            type: "put",
            keys: a,
            values: t,
            wantResults: u
          }).then(function (e) {
            var t = e.numFailures,
              n = e.results,
              r = e.lastResult,
              e = e.failures;
            if (0 === t) return u ? n : r;
            throw new V("".concat(o.name, ".bulkPut(): ").concat(t, " of ").concat(i, " operations failed"), e);
          });
        });
      }, ht.prototype.bulkUpdate = function (t) {
        var h = this,
          n = this.core,
          r = t.map(function (e) {
            return e.key;
          }),
          i = t.map(function (e) {
            return e.changes;
          }),
          d = [];
        return this._trans("readwrite", function (e) {
          return n.getMany({
            trans: e,
            keys: r,
            cache: "clone"
          }).then(function (c) {
            var l = [],
              f = [];
            t.forEach(function (e, t) {
              var n = e.key,
                r = e.changes,
                i = c[t];
              if (i) {
                for (var o = 0, a = Object.keys(r); o < a.length; o++) {
                  var u = a[o],
                    s = r[u];
                  if (u === h.schema.primKey.keyPath) {
                    if (0 !== st(s, n)) throw new Y.Constraint("Cannot update primary key in bulkUpdate()");
                  } else P(i, u, s);
                }
                d.push(t), l.push(n), f.push(i);
              }
            });
            var s = l.length;
            return n.mutate({
              trans: e,
              type: "put",
              keys: l,
              values: f,
              updates: {
                keys: r,
                changeSpecs: i
              }
            }).then(function (e) {
              var t = e.numFailures,
                n = e.failures;
              if (0 === t) return s;
              for (var r = 0, i = Object.keys(n); r < i.length; r++) {
                var o,
                  a = i[r],
                  u = d[Number(a)];
                null != u && (o = n[a], delete n[a], n[u] = o);
              }
              throw new V("".concat(h.name, ".bulkUpdate(): ").concat(t, " of ").concat(s, " operations failed"), n);
            });
          });
        });
      }, ht.prototype.bulkDelete = function (t) {
        var r = this,
          i = t.length;
        return this._trans("readwrite", function (e) {
          return r.core.mutate({
            trans: e,
            type: "delete",
            keys: t
          });
        }).then(function (e) {
          var t = e.numFailures,
            n = e.lastResult,
            e = e.failures;
          if (0 === t) return n;
          throw new V("".concat(r.name, ".bulkDelete(): ").concat(t, " of ").concat(i, " operations failed"), e);
        });
      }, ht);
      function ht() {}
      function dt(i) {
        function t(e, t) {
          if (t) {
            for (var n = arguments.length, r = new Array(n - 1); --n;) r[n - 1] = arguments[n];
            return a[e].subscribe.apply(null, r), i;
          }
          if ("string" == typeof e) return a[e];
        }
        var a = {};
        t.addEventType = u;
        for (var e = 1, n = arguments.length; e < n; ++e) u(arguments[e]);
        return t;
        function u(e, n, r) {
          if ("object" != typeof e) {
            var i;
            n = n || ne;
            var o = {
              subscribers: [],
              fire: r = r || G,
              subscribe: function (e) {
                -1 === o.subscribers.indexOf(e) && (o.subscribers.push(e), o.fire = n(o.fire, e));
              },
              unsubscribe: function (t) {
                o.subscribers = o.subscribers.filter(function (e) {
                  return e !== t;
                }), o.fire = o.subscribers.reduce(n, r);
              }
            };
            return a[e] = t[e] = o;
          }
          x(i = e).forEach(function (e) {
            var t = i[e];
            if (k(t)) u(e, i[e][0], i[e][1]);else {
              if ("asap" !== t) throw new Y.InvalidArgument("Invalid event config");
              var n = u(e, X, function () {
                for (var e = arguments.length, t = new Array(e); e--;) t[e] = arguments[e];
                n.subscribers.forEach(function (e) {
                  v(function () {
                    e.apply(null, t);
                  });
                });
              });
            }
          });
        }
      }
      function pt(e, t) {
        return o(t).from({
          prototype: e
        }), t;
      }
      function yt(e, t) {
        return !(e.filter || e.algorithm || e.or) && (t ? e.justLimit : !e.replayFilter);
      }
      function vt(e, t) {
        e.filter = it(e.filter, t);
      }
      function mt(e, t, n) {
        var r = e.replayFilter;
        e.replayFilter = r ? function () {
          return it(r(), t());
        } : t, e.justLimit = n && !r;
      }
      function bt(e, t) {
        if (e.isPrimKey) return t.primaryKey;
        var n = t.getIndexByKeyPath(e.index);
        if (!n) throw new Y.Schema("KeyPath " + e.index + " on object store " + t.name + " is not indexed");
        return n;
      }
      function gt(e, t, n) {
        var r = bt(e, t.schema);
        return t.openCursor({
          trans: n,
          values: !e.keysOnly,
          reverse: "prev" === e.dir,
          unique: !!e.unique,
          query: {
            index: r,
            range: e.range
          }
        });
      }
      function wt(e, o, t, n) {
        var a = e.replayFilter ? it(e.filter, e.replayFilter()) : e.filter;
        if (e.or) {
          var u = {},
            r = function (e, t, n) {
              var r, i;
              a && !a(t, n, function (e) {
                return t.stop(e);
              }, function (e) {
                return t.fail(e);
              }) || ("[object ArrayBuffer]" === (i = "" + (r = t.primaryKey)) && (i = "" + new Uint8Array(r)), m(u, i) || (u[i] = true, o(e, t, n)));
            };
          return Promise.all([e.or._iterate(r, t), _t(gt(e, n, t), e.algorithm, r, !e.keysOnly && e.valueMapper)]);
        }
        return _t(gt(e, n, t), it(e.algorithm, a), o, !e.keysOnly && e.valueMapper);
      }
      function _t(e, r, i, o) {
        var a = qe(o ? function (e, t, n) {
          return i(o(e), t, n);
        } : i);
        return e.then(function (n) {
          if (n) return n.start(function () {
            var t = function () {
              return n.continue();
            };
            r && !r(n, function (e) {
              return t = e;
            }, function (e) {
              n.stop(e), t = G;
            }, function (e) {
              n.fail(e), t = G;
            }) || a(n.value, n, function (e) {
              return t = e;
            }), t();
          });
        });
      }
      var e = Symbol(),
        xt = (kt.prototype.execute = function (e) {
          if (undefined !== this.add) {
            var t = this.add;
            if (k(t)) return i(i([], k(e) ? e : [], true), t).sort();
            if ("number" == typeof t) return (Number(e) || 0) + t;
            if ("bigint" == typeof t) try {
              return BigInt(e) + t;
            } catch (e) {
              return BigInt(0) + t;
            }
            throw new TypeError("Invalid term ".concat(t));
          }
          if (undefined !== this.remove) {
            var n = this.remove;
            if (k(n)) return k(e) ? e.filter(function (e) {
              return !n.includes(e);
            }).sort() : [];
            if ("number" == typeof n) return Number(e) - n;
            if ("bigint" == typeof n) try {
              return BigInt(e) - n;
            } catch (e) {
              return BigInt(0) - n;
            }
            throw new TypeError("Invalid subtrahend ".concat(n));
          }
          t = null === (t = this.replacePrefix) || undefined === t ? undefined : t[0];
          return t && "string" == typeof e && e.startsWith(t) ? this.replacePrefix[1] + e.substring(t.length) : e;
        }, kt);
      function kt(e) {
        Object.assign(this, e);
      }
      var Ot = (Pt.prototype._read = function (e, t) {
        var n = this._ctx;
        return n.error ? n.table._trans(null, Xe.bind(null, n.error)) : n.table._trans("readonly", e).then(t);
      }, Pt.prototype._write = function (e) {
        var t = this._ctx;
        return t.error ? t.table._trans(null, Xe.bind(null, t.error)) : t.table._trans("readwrite", e, "locked");
      }, Pt.prototype._addAlgorithm = function (e) {
        var t = this._ctx;
        t.algorithm = it(t.algorithm, e);
      }, Pt.prototype._iterate = function (e, t) {
        return wt(this._ctx, e, t, this._ctx.table.core);
      }, Pt.prototype.clone = function (e) {
        var t = Object.create(this.constructor.prototype),
          n = Object.create(this._ctx);
        return e && a(n, e), t._ctx = n, t;
      }, Pt.prototype.raw = function () {
        return this._ctx.valueMapper = null, this;
      }, Pt.prototype.each = function (t) {
        var n = this._ctx;
        return this._read(function (e) {
          return wt(n, t, e, n.table.core);
        });
      }, Pt.prototype.count = function (e) {
        var i = this;
        return this._read(function (e) {
          var t = i._ctx,
            n = t.table.core;
          if (yt(t, true)) return n.count({
            trans: e,
            query: {
              index: bt(t, n.schema),
              range: t.range
            }
          }).then(function (e) {
            return Math.min(e, t.limit);
          });
          var r = 0;
          return wt(t, function () {
            return ++r, false;
          }, e, n).then(function () {
            return r;
          });
        }).then(e);
      }, Pt.prototype.sortBy = function (e, t) {
        var n = e.split(".").reverse(),
          r = n[0],
          i = n.length - 1;
        function o(e, t) {
          return t ? o(e[n[t]], t - 1) : e[r];
        }
        var a = "next" === this._ctx.dir ? 1 : -1;
        function u(e, t) {
          return st(o(e, i), o(t, i)) * a;
        }
        return this.toArray(function (e) {
          return e.sort(u);
        }).then(t);
      }, Pt.prototype.toArray = function (e) {
        var o = this;
        return this._read(function (e) {
          var t = o._ctx;
          if ("next" === t.dir && yt(t, true) && 0 < t.limit) {
            var n = t.valueMapper,
              r = bt(t, t.table.core.schema);
            return t.table.core.query({
              trans: e,
              limit: t.limit,
              values: true,
              query: {
                index: r,
                range: t.range
              }
            }).then(function (e) {
              e = e.result;
              return n ? e.map(n) : e;
            });
          }
          var i = [];
          return wt(t, function (e) {
            return i.push(e);
          }, e, t.table.core).then(function () {
            return i;
          });
        }, e);
      }, Pt.prototype.offset = function (t) {
        var e = this._ctx;
        return t <= 0 || (e.offset += t, yt(e) ? mt(e, function () {
          var n = t;
          return function (e, t) {
            return 0 === n || (1 === n ? --n : t(function () {
              e.advance(n), n = 0;
            }), false);
          };
        }) : mt(e, function () {
          var e = t;
          return function () {
            return --e < 0;
          };
        })), this;
      }, Pt.prototype.limit = function (e) {
        return this._ctx.limit = Math.min(this._ctx.limit, e), mt(this._ctx, function () {
          var r = e;
          return function (e, t, n) {
            return --r <= 0 && t(n), 0 <= r;
          };
        }, true), this;
      }, Pt.prototype.until = function (r, i) {
        return vt(this._ctx, function (e, t, n) {
          return !r(e.value) || (t(n), i);
        }), this;
      }, Pt.prototype.first = function (e) {
        return this.limit(1).toArray(function (e) {
          return e[0];
        }).then(e);
      }, Pt.prototype.last = function (e) {
        return this.reverse().first(e);
      }, Pt.prototype.filter = function (t) {
        var e;
        return vt(this._ctx, function (e) {
          return t(e.value);
        }), (e = this._ctx).isMatch = it(e.isMatch, t), this;
      }, Pt.prototype.and = function (e) {
        return this.filter(e);
      }, Pt.prototype.or = function (e) {
        return new this.db.WhereClause(this._ctx.table, e, this);
      }, Pt.prototype.reverse = function () {
        return this._ctx.dir = "prev" === this._ctx.dir ? "next" : "prev", this._ondirectionchange && this._ondirectionchange(this._ctx.dir), this;
      }, Pt.prototype.desc = function () {
        return this.reverse();
      }, Pt.prototype.eachKey = function (n) {
        var e = this._ctx;
        return e.keysOnly = !e.isMatch, this.each(function (e, t) {
          n(t.key, t);
        });
      }, Pt.prototype.eachUniqueKey = function (e) {
        return this._ctx.unique = "unique", this.eachKey(e);
      }, Pt.prototype.eachPrimaryKey = function (n) {
        var e = this._ctx;
        return e.keysOnly = !e.isMatch, this.each(function (e, t) {
          n(t.primaryKey, t);
        });
      }, Pt.prototype.keys = function (e) {
        var t = this._ctx;
        t.keysOnly = !t.isMatch;
        var n = [];
        return this.each(function (e, t) {
          n.push(t.key);
        }).then(function () {
          return n;
        }).then(e);
      }, Pt.prototype.primaryKeys = function (e) {
        var n = this._ctx;
        if ("next" === n.dir && yt(n, true) && 0 < n.limit) return this._read(function (e) {
          var t = bt(n, n.table.core.schema);
          return n.table.core.query({
            trans: e,
            values: false,
            limit: n.limit,
            query: {
              index: t,
              range: n.range
            }
          });
        }).then(function (e) {
          return e.result;
        }).then(e);
        n.keysOnly = !n.isMatch;
        var r = [];
        return this.each(function (e, t) {
          r.push(t.primaryKey);
        }).then(function () {
          return r;
        }).then(e);
      }, Pt.prototype.uniqueKeys = function (e) {
        return this._ctx.unique = "unique", this.keys(e);
      }, Pt.prototype.firstKey = function (e) {
        return this.limit(1).keys(function (e) {
          return e[0];
        }).then(e);
      }, Pt.prototype.lastKey = function (e) {
        return this.reverse().firstKey(e);
      }, Pt.prototype.distinct = function () {
        var e = this._ctx,
          e = e.index && e.table.schema.idxByName[e.index];
        if (!e || !e.multi) return this;
        var n = {};
        return vt(this._ctx, function (e) {
          var t = e.primaryKey.toString(),
            e = m(n, t);
          return n[t] = true, !e;
        }), this;
      }, Pt.prototype.modify = function (w) {
        var n = this,
          r = this._ctx;
        return this._write(function (d) {
          var a, u, p;
          p = "function" == typeof w ? w : (a = x(w), u = a.length, function (e) {
            for (var t = false, n = 0; n < u; ++n) {
              var r = a[n],
                i = w[r],
                o = O(e, r);
              i instanceof xt ? (P(e, r, i.execute(o)), t = true) : o !== i && (P(e, r, i), t = true);
            }
            return t;
          });
          var y = r.table.core,
            e = y.schema.primaryKey,
            v = e.outbound,
            m = e.extractKey,
            b = 200,
            e = n.db._options.modifyChunkSize;
          e && (b = "object" == typeof e ? e[y.name] || e["*"] || 200 : e);
          function g(e, t) {
            var n = t.failures,
              t = t.numFailures;
            c += e - t;
            for (var r = 0, i = x(n); r < i.length; r++) {
              var o = i[r];
              s.push(n[o]);
            }
          }
          var s = [],
            c = 0,
            t = [];
          return n.clone().primaryKeys().then(function (l) {
            function f(s) {
              var c = Math.min(b, l.length - s);
              return y.getMany({
                trans: d,
                keys: l.slice(s, s + c),
                cache: "immutable"
              }).then(function (e) {
                for (var n = [], t = [], r = v ? [] : null, i = [], o = 0; o < c; ++o) {
                  var a = e[o],
                    u = {
                      value: S(a),
                      primKey: l[s + o]
                    };
                  false !== p.call(u, u.value, u) && (null == u.value ? i.push(l[s + o]) : v || 0 === st(m(a), m(u.value)) ? (t.push(u.value), v && r.push(l[s + o])) : (i.push(l[s + o]), n.push(u.value)));
                }
                return Promise.resolve(0 < n.length && y.mutate({
                  trans: d,
                  type: "add",
                  values: n
                }).then(function (e) {
                  for (var t in e.failures) i.splice(parseInt(t), 1);
                  g(n.length, e);
                })).then(function () {
                  return (0 < t.length || h && "object" == typeof w) && y.mutate({
                    trans: d,
                    type: "put",
                    keys: r,
                    values: t,
                    criteria: h,
                    changeSpec: "function" != typeof w && w,
                    isAdditionalChunk: 0 < s
                  }).then(function (e) {
                    return g(t.length, e);
                  });
                }).then(function () {
                  return (0 < i.length || h && w === Kt) && y.mutate({
                    trans: d,
                    type: "delete",
                    keys: i,
                    criteria: h,
                    isAdditionalChunk: 0 < s
                  }).then(function (e) {
                    return g(i.length, e);
                  });
                }).then(function () {
                  return l.length > s + c && f(s + b);
                });
              });
            }
            var h = yt(r) && r.limit === 1 / 0 && ("function" != typeof w || w === Kt) && {
              index: r.index,
              range: r.range
            };
            return f(0).then(function () {
              if (0 < s.length) throw new U("Error modifying one or more objects", s, c, t);
              return l.length;
            });
          });
        });
      }, Pt.prototype.delete = function () {
        var i = this._ctx,
          n = i.range;
        return yt(i) && (i.isPrimKey || 3 === n.type) ? this._write(function (e) {
          var t = i.table.core.schema.primaryKey,
            r = n;
          return i.table.core.count({
            trans: e,
            query: {
              index: t,
              range: r
            }
          }).then(function (n) {
            return i.table.core.mutate({
              trans: e,
              type: "deleteRange",
              range: r
            }).then(function (e) {
              var t = e.failures;
              e.lastResult, e.results;
              e = e.numFailures;
              if (e) throw new U("Could not delete some values", Object.keys(t).map(function (e) {
                return t[e];
              }), n - e);
              return n - e;
            });
          });
        }) : this.modify(Kt);
      }, Pt);
      function Pt() {}
      var Kt = function (e, t) {
        return t.value = null;
      };
      function Et(e, t) {
        return e < t ? -1 : e === t ? 0 : 1;
      }
      function St(e, t) {
        return t < e ? -1 : e === t ? 0 : 1;
      }
      function jt(e, t, n) {
        e = e instanceof Dt ? new e.Collection(e) : e;
        return e._ctx.error = new (n || TypeError)(t), e;
      }
      function At(e) {
        return new e.Collection(e, function () {
          return qt("");
        }).limit(0);
      }
      function Ct(e, s, n, r) {
        var i,
          c,
          l,
          f,
          h,
          d,
          p,
          y = n.length;
        if (!n.every(function (e) {
          return "string" == typeof e;
        })) return jt(e, Ze);
        function t(e) {
          i = "next" === e ? function (e) {
            return e.toUpperCase();
          } : function (e) {
            return e.toLowerCase();
          }, c = "next" === e ? function (e) {
            return e.toLowerCase();
          } : function (e) {
            return e.toUpperCase();
          }, l = "next" === e ? Et : St;
          var t = n.map(function (e) {
            return {
              lower: c(e),
              upper: i(e)
            };
          }).sort(function (e, t) {
            return l(e.lower, t.lower);
          });
          f = t.map(function (e) {
            return e.upper;
          }), h = t.map(function (e) {
            return e.lower;
          }), p = "next" === (d = e) ? "" : r;
        }
        t("next");
        e = new e.Collection(e, function () {
          return Tt(f[0], h[y - 1] + r);
        });
        e._ondirectionchange = function (e) {
          t(e);
        };
        var v = 0;
        return e._addAlgorithm(function (e, t, n) {
          var r = e.key;
          if ("string" != typeof r) return false;
          var i = c(r);
          if (s(i, h, v)) return true;
          for (var o = null, a = v; a < y; ++a) {
            var u = function (e, t, n, r, i, o) {
              for (var a = Math.min(e.length, r.length), u = -1, s = 0; s < a; ++s) {
                var c = t[s];
                if (c !== r[s]) return i(e[s], n[s]) < 0 ? e.substr(0, s) + n[s] + n.substr(s + 1) : i(e[s], r[s]) < 0 ? e.substr(0, s) + r[s] + n.substr(s + 1) : 0 <= u ? e.substr(0, u) + t[u] + n.substr(u + 1) : null;
                i(e[s], c) < 0 && (u = s);
              }
              return a < r.length && "next" === o ? e + n.substr(e.length) : a < e.length && "prev" === o ? e.substr(0, n.length) : u < 0 ? null : e.substr(0, u) + r[u] + n.substr(u + 1);
            }(r, i, f[a], h[a], l, d);
            null === u && null === o ? v = a + 1 : (null === o || 0 < l(o, u)) && (o = u);
          }
          return t(null !== o ? function () {
            e.continue(o + p);
          } : n), false;
        }), e;
      }
      function Tt(e, t, n, r) {
        return {
          type: 2,
          lower: e,
          upper: t,
          lowerOpen: n,
          upperOpen: r
        };
      }
      function qt(e) {
        return {
          type: 1,
          lower: e,
          upper: e
        };
      }
      var Dt = (Object.defineProperty(It.prototype, "Collection", {
        get: function () {
          return this._ctx.table.db.Collection;
        },
        enumerable: false,
        configurable: true
      }), It.prototype.between = function (e, t, n, r) {
        n = false !== n, r = true === r;
        try {
          return 0 < this._cmp(e, t) || 0 === this._cmp(e, t) && (n || r) && (!n || !r) ? At(this) : new this.Collection(this, function () {
            return Tt(e, t, !n, !r);
          });
        } catch (e) {
          return jt(this, Je);
        }
      }, It.prototype.equals = function (e) {
        return null == e ? jt(this, Je) : new this.Collection(this, function () {
          return qt(e);
        });
      }, It.prototype.above = function (e) {
        return null == e ? jt(this, Je) : new this.Collection(this, function () {
          return Tt(e, undefined, true);
        });
      }, It.prototype.aboveOrEqual = function (e) {
        return null == e ? jt(this, Je) : new this.Collection(this, function () {
          return Tt(e, undefined, false);
        });
      }, It.prototype.below = function (e) {
        return null == e ? jt(this, Je) : new this.Collection(this, function () {
          return Tt(undefined, e, false, true);
        });
      }, It.prototype.belowOrEqual = function (e) {
        return null == e ? jt(this, Je) : new this.Collection(this, function () {
          return Tt(undefined, e);
        });
      }, It.prototype.startsWith = function (e) {
        return "string" != typeof e ? jt(this, Ze) : this.between(e, e + He, true, true);
      }, It.prototype.startsWithIgnoreCase = function (e) {
        return "" === e ? this.startsWith(e) : Ct(this, function (e, t) {
          return 0 === e.indexOf(t[0]);
        }, [e], He);
      }, It.prototype.equalsIgnoreCase = function (e) {
        return Ct(this, function (e, t) {
          return e === t[0];
        }, [e], "");
      }, It.prototype.anyOfIgnoreCase = function () {
        var e = I.apply(D, arguments);
        return 0 === e.length ? At(this) : Ct(this, function (e, t) {
          return -1 !== t.indexOf(e);
        }, e, "");
      }, It.prototype.startsWithAnyOfIgnoreCase = function () {
        var e = I.apply(D, arguments);
        return 0 === e.length ? At(this) : Ct(this, function (t, e) {
          return e.some(function (e) {
            return 0 === t.indexOf(e);
          });
        }, e, He);
      }, It.prototype.anyOf = function () {
        var t = this,
          i = I.apply(D, arguments),
          o = this._cmp;
        try {
          i.sort(o);
        } catch (e) {
          return jt(this, Je);
        }
        if (0 === i.length) return At(this);
        var e = new this.Collection(this, function () {
          return Tt(i[0], i[i.length - 1]);
        });
        e._ondirectionchange = function (e) {
          o = "next" === e ? t._ascending : t._descending, i.sort(o);
        };
        var a = 0;
        return e._addAlgorithm(function (e, t, n) {
          for (var r = e.key; 0 < o(r, i[a]);) if (++a === i.length) return t(n), false;
          return 0 === o(r, i[a]) || (t(function () {
            e.continue(i[a]);
          }), false);
        }), e;
      }, It.prototype.notEqual = function (e) {
        return this.inAnyRange([[-1 / 0, e], [e, this.db._maxKey]], {
          includeLowers: false,
          includeUppers: false
        });
      }, It.prototype.noneOf = function () {
        var e = I.apply(D, arguments);
        if (0 === e.length) return new this.Collection(this);
        try {
          e.sort(this._ascending);
        } catch (e) {
          return jt(this, Je);
        }
        var t = e.reduce(function (e, t) {
          return e ? e.concat([[e[e.length - 1][1], t]]) : [[-1 / 0, t]];
        }, null);
        return t.push([e[e.length - 1], this.db._maxKey]), this.inAnyRange(t, {
          includeLowers: false,
          includeUppers: false
        });
      }, It.prototype.inAnyRange = function (e, t) {
        var o = this,
          a = this._cmp,
          u = this._ascending,
          n = this._descending,
          s = this._min,
          c = this._max;
        if (0 === e.length) return At(this);
        if (!e.every(function (e) {
          return undefined !== e[0] && undefined !== e[1] && u(e[0], e[1]) <= 0;
        })) return jt(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", Y.InvalidArgument);
        var r = !t || false !== t.includeLowers,
          i = t && true === t.includeUppers;
        var l,
          f = u;
        function h(e, t) {
          return f(e[0], t[0]);
        }
        try {
          (l = e.reduce(function (e, t) {
            for (var n = 0, r = e.length; n < r; ++n) {
              var i = e[n];
              if (a(t[0], i[1]) < 0 && 0 < a(t[1], i[0])) {
                i[0] = s(i[0], t[0]), i[1] = c(i[1], t[1]);
                break;
              }
            }
            return n === r && e.push(t), e;
          }, [])).sort(h);
        } catch (e) {
          return jt(this, Je);
        }
        var d = 0,
          p = i ? function (e) {
            return 0 < u(e, l[d][1]);
          } : function (e) {
            return 0 <= u(e, l[d][1]);
          },
          y = r ? function (e) {
            return 0 < n(e, l[d][0]);
          } : function (e) {
            return 0 <= n(e, l[d][0]);
          };
        var v = p,
          e = new this.Collection(this, function () {
            return Tt(l[0][0], l[l.length - 1][1], !r, !i);
          });
        return e._ondirectionchange = function (e) {
          f = "next" === e ? (v = p, u) : (v = y, n), l.sort(h);
        }, e._addAlgorithm(function (e, t, n) {
          for (var r, i = e.key; v(i);) if (++d === l.length) return t(n), false;
          return !p(r = i) && !y(r) || (0 === o._cmp(i, l[d][1]) || 0 === o._cmp(i, l[d][0]) || t(function () {
            f === u ? e.continue(l[d][0]) : e.continue(l[d][1]);
          }), false);
        }), e;
      }, It.prototype.startsWithAnyOf = function () {
        var e = I.apply(D, arguments);
        return e.every(function (e) {
          return "string" == typeof e;
        }) ? 0 === e.length ? At(this) : this.inAnyRange(e.map(function (e) {
          return [e, e + He];
        })) : jt(this, "startsWithAnyOf() only works with strings");
      }, It);
      function It() {}
      function Bt(t) {
        return qe(function (e) {
          return Rt(e), t(e.target.error), false;
        });
      }
      function Rt(e) {
        e.stopPropagation && e.stopPropagation(), e.preventDefault && e.preventDefault();
      }
      var Mt = "storagemutated",
        Ft = "x-storagemutated-1",
        Nt = dt(null, Mt),
        Lt = (Ut.prototype._lock = function () {
          return y(!me.global), ++this._reculock, 1 !== this._reculock || me.global || (me.lockOwnerFor = this), this;
        }, Ut.prototype._unlock = function () {
          if (y(!me.global), 0 == --this._reculock) for (me.global || (me.lockOwnerFor = null); 0 < this._blockedFuncs.length && !this._locked();) {
            var e = this._blockedFuncs.shift();
            try {
              $e(e[1], e[0]);
            } catch (e) {}
          }
          return this;
        }, Ut.prototype._locked = function () {
          return this._reculock && me.lockOwnerFor !== this;
        }, Ut.prototype.create = function (t) {
          var n = this;
          if (!this.mode) return this;
          var e = this.db.idbdb,
            r = this.db._state.dbOpenError;
          if (y(!this.idbtrans), !t && !e) switch (r && r.name) {
            case "DatabaseClosedError":
              throw new Y.DatabaseClosed(r);
            case "MissingAPIError":
              throw new Y.MissingAPI(r.message, r);
            default:
              throw new Y.OpenFailed(r);
          }
          if (!this.active) throw new Y.TransactionInactive();
          return y(null === this._completion._state), (t = this.idbtrans = t || (this.db.core || e).transaction(this.storeNames, this.mode, {
            durability: this.chromeTransactionDurability
          })).onerror = qe(function (e) {
            Rt(e), n._reject(t.error);
          }), t.onabort = qe(function (e) {
            Rt(e), n.active && n._reject(new Y.Abort(t.error)), n.active = false, n.on("abort").fire(e);
          }), t.oncomplete = qe(function () {
            n.active = false, n._resolve(), "mutatedParts" in t && Nt.storagemutated.fire(t.mutatedParts);
          }), this;
        }, Ut.prototype._promise = function (n, r, i) {
          var o = this;
          if ("readwrite" === n && "readwrite" !== this.mode) return Xe(new Y.ReadOnly("Transaction is readonly"));
          if (!this.active) return Xe(new Y.TransactionInactive());
          if (this._locked()) return new _e(function (e, t) {
            o._blockedFuncs.push([function () {
              o._promise(n, r, i).then(e, t);
            }, me]);
          });
          if (i) return Ne(function () {
            var e = new _e(function (e, t) {
              o._lock();
              var n = r(e, t, o);
              n && n.then && n.then(e, t);
            });
            return e.finally(function () {
              return o._unlock();
            }), e._lib = true, e;
          });
          var e = new _e(function (e, t) {
            var n = r(e, t, o);
            n && n.then && n.then(e, t);
          });
          return e._lib = true, e;
        }, Ut.prototype._root = function () {
          return this.parent ? this.parent._root() : this;
        }, Ut.prototype.waitFor = function (e) {
          var t,
            r = this._root(),
            i = _e.resolve(e);
          r._waitingFor ? r._waitingFor = r._waitingFor.then(function () {
            return i;
          }) : (r._waitingFor = i, r._waitingQueue = [], t = r.idbtrans.objectStore(r.storeNames[0]), function e() {
            for (++r._spinCount; r._waitingQueue.length;) r._waitingQueue.shift()();
            r._waitingFor && (t.get(-1 / 0).onsuccess = e);
          }());
          var o = r._waitingFor;
          return new _e(function (t, n) {
            i.then(function (e) {
              return r._waitingQueue.push(qe(t.bind(null, e)));
            }, function (e) {
              return r._waitingQueue.push(qe(n.bind(null, e)));
            }).finally(function () {
              r._waitingFor === o && (r._waitingFor = null);
            });
          });
        }, Ut.prototype.abort = function () {
          this.active && (this.active = false, this.idbtrans && this.idbtrans.abort(), this._reject(new Y.Abort()));
        }, Ut.prototype.table = function (e) {
          var t = this._memoizedTables || (this._memoizedTables = {});
          if (m(t, e)) return t[e];
          var n = this.schema[e];
          if (!n) throw new Y.NotFound("Table " + e + " not part of transaction");
          n = new this.db.Table(e, n, this);
          return n.core = this.db.core.table(e), t[e] = n;
        }, Ut);
      function Ut() {}
      function Vt(e, t, n, r, i, o, a) {
        return {
          name: e,
          keyPath: t,
          unique: n,
          multi: r,
          auto: i,
          compound: o,
          src: (n && !a ? "&" : "") + (r ? "*" : "") + (i ? "++" : "") + zt(t)
        };
      }
      function zt(e) {
        return "string" == typeof e ? e : e ? "[" + [].join.call(e, "+") + "]" : "";
      }
      function Wt(e, t, n) {
        return {
          name: e,
          primKey: t,
          indexes: n,
          mappedClass: null,
          idxByName: (r = function (e) {
            return [e.name, e];
          }, n.reduce(function (e, t, n) {
            n = r(t, n);
            return n && (e[n[0]] = n[1]), e;
          }, {}))
        };
        var r;
      }
      var Yt = function (e) {
        try {
          return e.only([[]]), Yt = function () {
            return [[]];
          }, [[]];
        } catch (e) {
          return Yt = function () {
            return He;
          }, He;
        }
      };
      function $t(t) {
        return null == t ? function () {} : "string" == typeof t ? 1 === (n = t).split(".").length ? function (e) {
          return e[n];
        } : function (e) {
          return O(e, n);
        } : function (e) {
          return O(e, t);
        };
        var n;
      }
      function Qt(e) {
        return [].slice.call(e);
      }
      var Gt = 0;
      function Xt(e) {
        return null == e ? ":id" : "string" == typeof e ? e : "[".concat(e.join("+"), "]");
      }
      function Ht(e, i, t) {
        function _(e) {
          if (3 === e.type) return null;
          if (4 === e.type) throw new Error("Cannot convert never type to IDBKeyRange");
          var t = e.lower,
            n = e.upper,
            r = e.lowerOpen,
            e = e.upperOpen;
          return undefined === t ? undefined === n ? null : i.upperBound(n, !!e) : undefined === n ? i.lowerBound(t, !!r) : i.bound(t, n, !!r, !!e);
        }
        function n(e) {
          var h,
            w = e.name;
          return {
            name: w,
            schema: e,
            mutate: function (e) {
              var y = e.trans,
                v = e.type,
                m = e.keys,
                b = e.values,
                g = e.range;
              return new Promise(function (t, e) {
                t = qe(t);
                var n = y.objectStore(w),
                  r = null == n.keyPath,
                  i = "put" === v || "add" === v;
                if (!i && "delete" !== v && "deleteRange" !== v) throw new Error("Invalid operation type: " + v);
                var o,
                  a = (m || b || {
                    length: 1
                  }).length;
                if (m && b && m.length !== b.length) throw new Error("Given keys array must have same length as given values array.");
                if (0 === a) return t({
                  numFailures: 0,
                  failures: {},
                  results: [],
                  lastResult: undefined
                });
                function u(e) {
                  ++l, Rt(e);
                }
                var s = [],
                  c = [],
                  l = 0;
                if ("deleteRange" === v) {
                  if (4 === g.type) return t({
                    numFailures: l,
                    failures: c,
                    results: [],
                    lastResult: undefined
                  });
                  3 === g.type ? s.push(o = n.clear()) : s.push(o = n.delete(_(g)));
                } else {
                  var r = i ? r ? [b, m] : [b, null] : [m, null],
                    f = r[0],
                    h = r[1];
                  if (i) for (var d = 0; d < a; ++d) s.push(o = h && undefined !== h[d] ? n[v](f[d], h[d]) : n[v](f[d])), o.onerror = u;else for (d = 0; d < a; ++d) s.push(o = n[v](f[d])), o.onerror = u;
                }
                function p(e) {
                  e = e.target.result, s.forEach(function (e, t) {
                    return null != e.error && (c[t] = e.error);
                  }), t({
                    numFailures: l,
                    failures: c,
                    results: "delete" === v ? m : s.map(function (e) {
                      return e.result;
                    }),
                    lastResult: e
                  });
                }
                o.onerror = function (e) {
                  u(e), p(e);
                }, o.onsuccess = p;
              });
            },
            getMany: function (e) {
              var f = e.trans,
                h = e.keys;
              return new Promise(function (t, e) {
                t = qe(t);
                for (var n, r = f.objectStore(w), i = h.length, o = new Array(i), a = 0, u = 0, s = function (e) {
                    e = e.target;
                    o[e._pos] = e.result, ++u === a && t(o);
                  }, c = Bt(e), l = 0; l < i; ++l) null != h[l] && ((n = r.get(h[l]))._pos = l, n.onsuccess = s, n.onerror = c, ++a);
                0 === a && t(o);
              });
            },
            get: function (e) {
              var r = e.trans,
                i = e.key;
              return new Promise(function (t, e) {
                t = qe(t);
                var n = r.objectStore(w).get(i);
                n.onsuccess = function (e) {
                  return t(e.target.result);
                }, n.onerror = Bt(e);
              });
            },
            query: (h = s, function (f) {
              return new Promise(function (n, e) {
                n = qe(n);
                var r,
                  i,
                  o,
                  t = f.trans,
                  a = f.values,
                  u = f.limit,
                  s = f.query,
                  c = u === 1 / 0 ? undefined : u,
                  l = s.index,
                  s = s.range,
                  t = t.objectStore(w),
                  l = l.isPrimaryKey ? t : t.index(l.name),
                  s = _(s);
                if (0 === u) return n({
                  result: []
                });
                h ? ((c = a ? l.getAll(s, c) : l.getAllKeys(s, c)).onsuccess = function (e) {
                  return n({
                    result: e.target.result
                  });
                }, c.onerror = Bt(e)) : (r = 0, i = !a && "openKeyCursor" in l ? l.openKeyCursor(s) : l.openCursor(s), o = [], i.onsuccess = function (e) {
                  var t = i.result;
                  return t ? (o.push(a ? t.value : t.primaryKey), ++r === u ? n({
                    result: o
                  }) : void t.continue()) : n({
                    result: o
                  });
                }, i.onerror = Bt(e));
              });
            }),
            openCursor: function (e) {
              var c = e.trans,
                o = e.values,
                a = e.query,
                u = e.reverse,
                l = e.unique;
              return new Promise(function (t, n) {
                t = qe(t);
                var e = a.index,
                  r = a.range,
                  i = c.objectStore(w),
                  i = e.isPrimaryKey ? i : i.index(e.name),
                  e = u ? l ? "prevunique" : "prev" : l ? "nextunique" : "next",
                  s = !o && "openKeyCursor" in i ? i.openKeyCursor(_(r), e) : i.openCursor(_(r), e);
                s.onerror = Bt(n), s.onsuccess = qe(function (e) {
                  var r,
                    i,
                    o,
                    a,
                    u = s.result;
                  u ? (u.___id = ++Gt, u.done = false, r = u.continue.bind(u), i = (i = u.continuePrimaryKey) && i.bind(u), o = u.advance.bind(u), a = function () {
                    throw new Error("Cursor not stopped");
                  }, u.trans = c, u.stop = u.continue = u.continuePrimaryKey = u.advance = function () {
                    throw new Error("Cursor not started");
                  }, u.fail = qe(n), u.next = function () {
                    var e = this,
                      t = 1;
                    return this.start(function () {
                      return t-- ? e.continue() : e.stop();
                    }).then(function () {
                      return e;
                    });
                  }, u.start = function (e) {
                    function t() {
                      if (s.result) try {
                        e();
                      } catch (e) {
                        u.fail(e);
                      } else u.done = true, u.start = function () {
                        throw new Error("Cursor behind last entry");
                      }, u.stop();
                    }
                    var n = new Promise(function (t, e) {
                      t = qe(t), s.onerror = Bt(e), u.fail = e, u.stop = function (e) {
                        u.stop = u.continue = u.continuePrimaryKey = u.advance = a, t(e);
                      };
                    });
                    return s.onsuccess = qe(function (e) {
                      s.onsuccess = t, t();
                    }), u.continue = r, u.continuePrimaryKey = i, u.advance = o, t(), n;
                  }, t(u)) : t(null);
                }, n);
              });
            },
            count: function (e) {
              var t = e.query,
                i = e.trans,
                o = t.index,
                a = t.range;
              return new Promise(function (t, e) {
                var n = i.objectStore(w),
                  r = o.isPrimaryKey ? n : n.index(o.name),
                  n = _(a),
                  r = n ? r.count(n) : r.count();
                r.onsuccess = qe(function (e) {
                  return t(e.target.result);
                }), r.onerror = Bt(e);
              });
            }
          };
        }
        var r,
          o,
          a,
          u = (o = t, a = Qt((r = e).objectStoreNames), {
            schema: {
              name: r.name,
              tables: a.map(function (e) {
                return o.objectStore(e);
              }).map(function (t) {
                var e = t.keyPath,
                  n = t.autoIncrement,
                  r = k(e),
                  i = {},
                  n = {
                    name: t.name,
                    primaryKey: {
                      name: null,
                      isPrimaryKey: true,
                      outbound: null == e,
                      compound: r,
                      keyPath: e,
                      autoIncrement: n,
                      unique: true,
                      extractKey: $t(e)
                    },
                    indexes: Qt(t.indexNames).map(function (e) {
                      return t.index(e);
                    }).map(function (e) {
                      var t = e.name,
                        n = e.unique,
                        r = e.multiEntry,
                        e = e.keyPath,
                        r = {
                          name: t,
                          compound: k(e),
                          keyPath: e,
                          unique: n,
                          multiEntry: r,
                          extractKey: $t(e)
                        };
                      return i[Xt(e)] = r;
                    }),
                    getIndexByKeyPath: function (e) {
                      return i[Xt(e)];
                    }
                  };
                return i[":id"] = n.primaryKey, null != e && (i[Xt(e)] = n.primaryKey), n;
              })
            },
            hasGetAll: 0 < a.length && "getAll" in o.objectStore(a[0]) && !("undefined" != typeof navigator && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
          }),
          t = u.schema,
          s = u.hasGetAll,
          u = t.tables.map(n),
          c = {};
        return u.forEach(function (e) {
          return c[e.name] = e;
        }), {
          stack: "dbcore",
          transaction: e.transaction.bind(e),
          table: function (e) {
            if (!c[e]) throw new Error("Table '".concat(e, "' not found"));
            return c[e];
          },
          MIN_KEY: -1 / 0,
          MAX_KEY: Yt(i),
          schema: t
        };
      }
      function Jt(e, t, n, r) {
        var i = n.IDBKeyRange;
        return n.indexedDB, {
          dbcore: (r = Ht(t, i, r), e.dbcore.reduce(function (e, t) {
            t = t.create;
            return _(_({}, e), t(e));
          }, r))
        };
      }
      function Zt(n, e) {
        var t = e.db,
          e = Jt(n._middlewares, t, n._deps, e);
        n.core = e.dbcore, n.tables.forEach(function (e) {
          var t = e.name;
          n.core.schema.tables.some(function (e) {
            return e.name === t;
          }) && (e.core = n.core.table(t), n[t] instanceof n.Table && (n[t].core = e.core));
        });
      }
      function en(i, e, t, o) {
        t.forEach(function (n) {
          var r = o[n];
          e.forEach(function (e) {
            var t = function e(t, n) {
              return h(t, n) || (t = c(t)) && e(t, n);
            }(e, n);
            (!t || "value" in t && undefined === t.value) && (e === i.Transaction.prototype || e instanceof i.Transaction ? l(e, n, {
              get: function () {
                return this.table(n);
              },
              set: function (e) {
                u(this, n, {
                  value: e,
                  writable: true,
                  configurable: true,
                  enumerable: true
                });
              }
            }) : e[n] = new i.Table(n, r));
          });
        });
      }
      function tn(n, e) {
        e.forEach(function (e) {
          for (var t in e) e[t] instanceof n.Table && delete e[t];
        });
      }
      function nn(e, t) {
        return e._cfg.version - t._cfg.version;
      }
      function rn(n, r, i, e) {
        var o = n._dbSchema;
        i.objectStoreNames.contains("$meta") && !o.$meta && (o.$meta = Wt("$meta", hn("")[0], []), n._storeNames.push("$meta"));
        var a = n._createTransaction("readwrite", n._storeNames, o);
        a.create(i), a._completion.catch(e);
        var u = a._reject.bind(a),
          s = me.transless || me;
        Ne(function () {
          return me.trans = a, me.transless = s, 0 !== r ? (Zt(n, i), t = r, ((e = a).storeNames.includes("$meta") ? e.table("$meta").get("version").then(function (e) {
            return null != e ? e : t;
          }) : _e.resolve(t)).then(function (e) {
            return c = e, l = a, f = i, t = [], e = (s = n)._versions, h = s._dbSchema = ln(0, s.idbdb, f), 0 !== (e = e.filter(function (e) {
              return e._cfg.version >= c;
            })).length ? (e.forEach(function (u) {
              t.push(function () {
                var t = h,
                  e = u._cfg.dbschema;
                fn(s, t, f), fn(s, e, f), h = s._dbSchema = e;
                var n = an(t, e);
                n.add.forEach(function (e) {
                  un(f, e[0], e[1].primKey, e[1].indexes);
                }), n.change.forEach(function (e) {
                  if (e.recreate) throw new Y.Upgrade("Not yet support for changing primary key");
                  var t = f.objectStore(e.name);
                  e.add.forEach(function (e) {
                    return cn(t, e);
                  }), e.change.forEach(function (e) {
                    t.deleteIndex(e.name), cn(t, e);
                  }), e.del.forEach(function (e) {
                    return t.deleteIndex(e);
                  });
                });
                var r = u._cfg.contentUpgrade;
                if (r && u._cfg.version > c) {
                  Zt(s, f), l._memoizedTables = {};
                  var i = g(e);
                  n.del.forEach(function (e) {
                    i[e] = t[e];
                  }), tn(s, [s.Transaction.prototype]), en(s, [s.Transaction.prototype], x(i), i), l.schema = i;
                  var o,
                    a = B(r);
                  a && Le();
                  n = _e.follow(function () {
                    var e;
                    (o = r(l)) && a && (e = Ue.bind(null, null), o.then(e, e));
                  });
                  return o && "function" == typeof o.then ? _e.resolve(o) : n.then(function () {
                    return o;
                  });
                }
              }), t.push(function (e) {
                var t,
                  n,
                  r = u._cfg.dbschema;
                t = r, n = e, [].slice.call(n.db.objectStoreNames).forEach(function (e) {
                  return null == t[e] && n.db.deleteObjectStore(e);
                }), tn(s, [s.Transaction.prototype]), en(s, [s.Transaction.prototype], s._storeNames, s._dbSchema), l.schema = s._dbSchema;
              }), t.push(function (e) {
                s.idbdb.objectStoreNames.contains("$meta") && (Math.ceil(s.idbdb.version / 10) === u._cfg.version ? (s.idbdb.deleteObjectStore("$meta"), delete s._dbSchema.$meta, s._storeNames = s._storeNames.filter(function (e) {
                  return "$meta" !== e;
                })) : e.objectStore("$meta").put(u._cfg.version, "version"));
              });
            }), function e() {
              return t.length ? _e.resolve(t.shift()(l.idbtrans)).then(e) : _e.resolve();
            }().then(function () {
              sn(h, f);
            })) : _e.resolve();
            var s, c, l, f, t, h;
          }).catch(u)) : (x(o).forEach(function (e) {
            un(i, e, o[e].primKey, o[e].indexes);
          }), Zt(n, i), void _e.follow(function () {
            return n.on.populate.fire(a);
          }).catch(u));
          var e, t;
        });
      }
      function on(e, r) {
        sn(e._dbSchema, r), r.db.version % 10 != 0 || r.objectStoreNames.contains("$meta") || r.db.createObjectStore("$meta").add(Math.ceil(r.db.version / 10 - 1), "version");
        var t = ln(0, e.idbdb, r);
        fn(e, e._dbSchema, r);
        for (var n = 0, i = an(t, e._dbSchema).change; n < i.length; n++) {
          var o = function (t) {
            if (t.change.length || t.recreate) return console.warn("Unable to patch indexes of table ".concat(t.name, " because it has changes on the type of index or primary key.")), {
              value: undefined
            };
            var n = r.objectStore(t.name);
            t.add.forEach(function (e) {
              ie && console.debug("Dexie upgrade patch: Creating missing index ".concat(t.name, ".").concat(e.src)), cn(n, e);
            });
          }(i[n]);
          if ("object" == typeof o) return o.value;
        }
      }
      function an(e, t) {
        var n,
          r = {
            del: [],
            add: [],
            change: []
          };
        for (n in e) t[n] || r.del.push(n);
        for (n in t) {
          var i = e[n],
            o = t[n];
          if (i) {
            var a = {
              name: n,
              def: o,
              recreate: false,
              del: [],
              add: [],
              change: []
            };
            if ("" + (i.primKey.keyPath || "") != "" + (o.primKey.keyPath || "") || i.primKey.auto !== o.primKey.auto) a.recreate = true, r.change.push(a);else {
              var u = i.idxByName,
                s = o.idxByName,
                c = undefined;
              for (c in u) s[c] || a.del.push(c);
              for (c in s) {
                var l = u[c],
                  f = s[c];
                l ? l.src !== f.src && a.change.push(f) : a.add.push(f);
              }
              (0 < a.del.length || 0 < a.add.length || 0 < a.change.length) && r.change.push(a);
            }
          } else r.add.push([n, o]);
        }
        return r;
      }
      function un(e, t, n, r) {
        var i = e.db.createObjectStore(t, n.keyPath ? {
          keyPath: n.keyPath,
          autoIncrement: n.auto
        } : {
          autoIncrement: n.auto
        });
        return r.forEach(function (e) {
          return cn(i, e);
        }), i;
      }
      function sn(t, n) {
        x(t).forEach(function (e) {
          n.db.objectStoreNames.contains(e) || (ie && console.debug("Dexie: Creating missing table", e), un(n, e, t[e].primKey, t[e].indexes));
        });
      }
      function cn(e, t) {
        e.createIndex(t.name, t.keyPath, {
          unique: t.unique,
          multiEntry: t.multi
        });
      }
      function ln(e, t, u) {
        var s = {};
        return b(t.objectStoreNames, 0).forEach(function (e) {
          for (var t = u.objectStore(e), n = Vt(zt(a = t.keyPath), a || "", true, false, !!t.autoIncrement, a && "string" != typeof a, true), r = [], i = 0; i < t.indexNames.length; ++i) {
            var o = t.index(t.indexNames[i]),
              a = o.keyPath,
              o = Vt(o.name, a, !!o.unique, !!o.multiEntry, false, a && "string" != typeof a, false);
            r.push(o);
          }
          s[e] = Wt(e, n, r);
        }), s;
      }
      function fn(e, t, n) {
        for (var r = n.db.objectStoreNames, i = 0; i < r.length; ++i) {
          var o = r[i],
            a = n.objectStore(o);
          e._hasGetAll = "getAll" in a;
          for (var u = 0; u < a.indexNames.length; ++u) {
            var s = a.indexNames[u],
              c = a.index(s).keyPath,
              l = "string" == typeof c ? c : "[" + b(c).join("+") + "]";
            !t[o] || (c = t[o].idxByName[l]) && (c.name = s, delete t[o].idxByName[l], t[o].idxByName[s] = c);
          }
        }
        "undefined" != typeof navigator && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && f.WorkerGlobalScope && f instanceof f.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604 && (e._hasGetAll = false);
      }
      function hn(e) {
        return e.split(",").map(function (e, t) {
          var n = (e = e.trim()).replace(/([&*]|\+\+)/g, ""),
            r = /^\[/.test(n) ? n.match(/^\[(.*)\]$/)[1].split("+") : n;
          return Vt(n, r || null, /\&/.test(e), /\*/.test(e), /\+\+/.test(e), k(r), 0 === t);
        });
      }
      var dn = (pn.prototype._parseStoresSpec = function (r, i) {
        x(r).forEach(function (e) {
          if (null !== r[e]) {
            var t = hn(r[e]),
              n = t.shift();
            if (n.unique = true, n.multi) throw new Y.Schema("Primary key cannot be multi-valued");
            t.forEach(function (e) {
              if (e.auto) throw new Y.Schema("Only primary key can be marked as autoIncrement (++)");
              if (!e.keyPath) throw new Y.Schema("Index must have a name and cannot be an empty string");
            }), i[e] = Wt(e, n, t);
          }
        });
      }, pn.prototype.stores = function (e) {
        var t = this.db;
        this._cfg.storesSource = this._cfg.storesSource ? a(this._cfg.storesSource, e) : e;
        var e = t._versions,
          n = {},
          r = {};
        return e.forEach(function (e) {
          a(n, e._cfg.storesSource), r = e._cfg.dbschema = {}, e._parseStoresSpec(n, r);
        }), t._dbSchema = r, tn(t, [t._allTables, t, t.Transaction.prototype]), en(t, [t._allTables, t, t.Transaction.prototype, this._cfg.tables], x(r), r), t._storeNames = x(r), this;
      }, pn.prototype.upgrade = function (e) {
        return this._cfg.contentUpgrade = re(this._cfg.contentUpgrade || G, e), this;
      }, pn);
      function pn() {}
      function yn(e, t) {
        var n = e._dbNamesDB;
        return n || (n = e._dbNamesDB = new er(tt, {
          addons: [],
          indexedDB: e,
          IDBKeyRange: t
        })).version(1).stores({
          dbnames: "name"
        }), n.table("dbnames");
      }
      function vn(e) {
        return e && "function" == typeof e.databases;
      }
      function mn(e) {
        return Ne(function () {
          return me.letThrough = true, e();
        });
      }
      function bn(e) {
        return !("from" in e);
      }
      var gn = function (e, t) {
        if (!this) {
          var n = new gn();
          return e && "d" in e && a(n, e), n;
        }
        a(this, arguments.length ? {
          d: 1,
          from: e,
          to: 1 < arguments.length ? t : e
        } : {
          d: 0
        });
      };
      function wn(e, t, n) {
        var r = st(t, n);
        if (!isNaN(r)) {
          if (0 < r) throw RangeError();
          if (bn(e)) return a(e, {
            from: t,
            to: n,
            d: 1
          });
          var i = e.l,
            r = e.r;
          if (st(n, e.from) < 0) return i ? wn(i, t, n) : e.l = {
            from: t,
            to: n,
            d: 1,
            l: null,
            r: null
          }, On(e);
          if (0 < st(t, e.to)) return r ? wn(r, t, n) : e.r = {
            from: t,
            to: n,
            d: 1,
            l: null,
            r: null
          }, On(e);
          st(t, e.from) < 0 && (e.from = t, e.l = null, e.d = r ? r.d + 1 : 1), 0 < st(n, e.to) && (e.to = n, e.r = null, e.d = e.l ? e.l.d + 1 : 1);
          n = !e.r;
          i && !e.l && _n(e, i), r && n && _n(e, r);
        }
      }
      function _n(e, t) {
        bn(t) || function e(t, n) {
          var r = n.from,
            i = n.to,
            o = n.l,
            n = n.r;
          wn(t, r, i), o && e(t, o), n && e(t, n);
        }(e, t);
      }
      function xn(e, t) {
        var n = kn(t),
          r = n.next();
        if (r.done) return false;
        for (var i = r.value, o = kn(e), a = o.next(i.from), u = a.value; !r.done && !a.done;) {
          if (st(u.from, i.to) <= 0 && 0 <= st(u.to, i.from)) return true;
          st(i.from, u.from) < 0 ? i = (r = n.next(u.from)).value : u = (a = o.next(i.from)).value;
        }
        return false;
      }
      function kn(e) {
        var n = bn(e) ? null : {
          s: 0,
          n: e
        };
        return {
          next: function (e) {
            for (var t = 0 < arguments.length; n;) switch (n.s) {
              case 0:
                if (n.s = 1, t) for (; n.n.l && st(e, n.n.from) < 0;) n = {
                  up: n,
                  n: n.n.l,
                  s: 1
                };else for (; n.n.l;) n = {
                  up: n,
                  n: n.n.l,
                  s: 1
                };
              case 1:
                if (n.s = 2, !t || st(e, n.n.to) <= 0) return {
                  value: n.n,
                  done: false
                };
              case 2:
                if (n.n.r) {
                  n.s = 3, n = {
                    up: n,
                    n: n.n.r,
                    s: 0
                  };
                  continue;
                }
              case 3:
                n = n.up;
            }
            return {
              done: true
            };
          }
        };
      }
      function On(e) {
        var t,
          n,
          r = ((null === (t = e.r) || undefined === t ? undefined : t.d) || 0) - ((null === (n = e.l) || undefined === n ? undefined : n.d) || 0),
          i = 1 < r ? "r" : r < -1 ? "l" : "";
        i && (t = "r" == i ? "l" : "r", n = _({}, e), r = e[i], e.from = r.from, e.to = r.to, e[i] = r[i], n[i] = r[t], (e[t] = n).d = Pn(n)), e.d = Pn(e);
      }
      function Pn(e) {
        var t = e.r,
          e = e.l;
        return (t ? e ? Math.max(t.d, e.d) : t.d : e ? e.d : 0) + 1;
      }
      function Kn(t, n) {
        return x(n).forEach(function (e) {
          t[e] ? _n(t[e], n[e]) : t[e] = function e(t) {
            var n,
              r,
              i = {};
            for (n in t) m(t, n) && (r = t[n], i[n] = !r || "object" != typeof r || K.has(r.constructor) ? r : e(r));
            return i;
          }(n[e]);
        }), t;
      }
      function En(t, n) {
        return t.all || n.all || Object.keys(t).some(function (e) {
          return n[e] && xn(n[e], t[e]);
        });
      }
      r(gn.prototype, ((M = {
        add: function (e) {
          return _n(this, e), this;
        },
        addKey: function (e) {
          return wn(this, e, e), this;
        },
        addKeys: function (e) {
          var t = this;
          return e.forEach(function (e) {
            return wn(t, e, e);
          }), this;
        },
        hasKey: function (e) {
          var t = kn(this).next(e).value;
          return t && st(t.from, e) <= 0 && 0 <= st(t.to, e);
        }
      })[C] = function () {
        return kn(this);
      }, M));
      var Sn = {},
        jn = {},
        An = false;
      function Cn(e) {
        Kn(jn, e), An || (An = true, setTimeout(function () {
          An = false, Tn(jn, !(jn = {}));
        }, 0));
      }
      function Tn(e, t) {
        undefined === t && (t = false);
        var n = new Set();
        if (e.all) for (var r = 0, i = Object.values(Sn); r < i.length; r++) qn(a = i[r], e, n, t);else for (var o in e) {
          var a,
            u = /^idb\:\/\/(.*)\/(.*)\//.exec(o);
          u && (o = u[1], u = u[2], (a = Sn["idb://".concat(o, "/").concat(u)]) && qn(a, e, n, t));
        }
        n.forEach(function (e) {
          return e();
        });
      }
      function qn(e, t, n, r) {
        for (var i = [], o = 0, a = Object.entries(e.queries.query); o < a.length; o++) {
          for (var u = a[o], s = u[0], c = [], l = 0, f = u[1]; l < f.length; l++) {
            var h = f[l];
            En(t, h.obsSet) ? h.subscribers.forEach(function (e) {
              return n.add(e);
            }) : r && c.push(h);
          }
          r && i.push([s, c]);
        }
        if (r) for (var d = 0, p = i; d < p.length; d++) {
          var y = p[d],
            s = y[0],
            c = y[1];
          e.queries.query[s] = c;
        }
      }
      function Dn(f) {
        var h = f._state,
          r = f._deps.indexedDB;
        if (h.isBeingOpened || f.idbdb) return h.dbReadyPromise.then(function () {
          return h.dbOpenError ? Xe(h.dbOpenError) : f;
        });
        h.isBeingOpened = true, h.dbOpenError = null, h.openComplete = false;
        var t = h.openCanceller,
          d = Math.round(10 * f.verno),
          p = false;
        function e() {
          if (h.openCanceller !== t) throw new Y.DatabaseClosed("db.open() was cancelled");
        }
        function y() {
          return new _e(function (s, n) {
            if (e(), !r) throw new Y.MissingAPI();
            var c = f.name,
              l = h.autoSchema || !d ? r.open(c) : r.open(c, d);
            if (!l) throw new Y.MissingAPI();
            l.onerror = Bt(n), l.onblocked = qe(f._fireOnBlocked), l.onupgradeneeded = qe(function (e) {
              var t;
              v = l.transaction, h.autoSchema && !f._options.allowEmptyDB ? (l.onerror = Rt, v.abort(), l.result.close(), (t = r.deleteDatabase(c)).onsuccess = t.onerror = qe(function () {
                n(new Y.NoSuchDatabase("Database ".concat(c, " doesnt exist")));
              })) : (v.onerror = Bt(n), e = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion, m = e < 1, f.idbdb = l.result, p && on(f, v), rn(f, e / 10, v, n));
            }, n), l.onsuccess = qe(function () {
              v = null;
              var e,
                t,
                n,
                r,
                i,
                o = f.idbdb = l.result,
                a = b(o.objectStoreNames);
              if (0 < a.length) try {
                var u = o.transaction(1 === (r = a).length ? r[0] : r, "readonly");
                if (h.autoSchema) t = o, n = u, (e = f).verno = t.version / 10, n = e._dbSchema = ln(0, t, n), e._storeNames = b(t.objectStoreNames, 0), en(e, [e._allTables], x(n), n);else if (fn(f, f._dbSchema, u), ((i = an(ln(0, (i = f).idbdb, u), i._dbSchema)).add.length || i.change.some(function (e) {
                  return e.add.length || e.change.length;
                })) && !p) return console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Dexie will add missing parts and increment native version number to workaround this."), o.close(), d = o.version + 1, p = !0, s(y());
                Zt(f, u);
              } catch (e) {}
              et.push(f), o.onversionchange = qe(function (e) {
                h.vcFired = true, f.on("versionchange").fire(e);
              }), o.onclose = qe(function (e) {
                f.on("close").fire(e);
              }), m && (i = f._deps, u = c, o = i.indexedDB, i = i.IDBKeyRange, vn(o) || u === tt || yn(o, i).put({
                name: u
              }).catch(G)), s();
            }, n);
          }).catch(function (e) {
            switch (null == e ? undefined : e.name) {
              case "UnknownError":
                if (0 < h.PR1398_maxLoop) return h.PR1398_maxLoop--, console.warn("Dexie: Workaround for Chrome UnknownError on open()"), y();
                break;
              case "VersionError":
                if (0 < d) return d = 0, y();
            }
            return _e.reject(e);
          });
        }
        var n,
          i = h.dbReadyResolve,
          v = null,
          m = false;
        return _e.race([t, ("undefined" == typeof navigator ? _e.resolve() : !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent) && indexedDB.databases ? new Promise(function (e) {
          function t() {
            return indexedDB.databases().finally(e);
          }
          n = setInterval(t, 100), t();
        }).finally(function () {
          return clearInterval(n);
        }) : Promise.resolve()).then(y)]).then(function () {
          return e(), h.onReadyBeingFired = [], _e.resolve(mn(function () {
            return f.on.ready.fire(f.vip);
          })).then(function e() {
            if (0 < h.onReadyBeingFired.length) {
              var t = h.onReadyBeingFired.reduce(re, G);
              return h.onReadyBeingFired = [], _e.resolve(mn(function () {
                return t(f.vip);
              })).then(e);
            }
          });
        }).finally(function () {
          h.openCanceller === t && (h.onReadyBeingFired = null, h.isBeingOpened = false);
        }).catch(function (e) {
          h.dbOpenError = e;
          try {
            v && v.abort();
          } catch (e) {}
          return t === h.openCanceller && f._close(), Xe(e);
        }).finally(function () {
          h.openComplete = true, i();
        }).then(function () {
          var n;
          return m && (n = {}, f.tables.forEach(function (t) {
            t.schema.indexes.forEach(function (e) {
              e.name && (n["idb://".concat(f.name, "/").concat(t.name, "/").concat(e.name)] = new gn(-1 / 0, [[[]]]));
            }), n["idb://".concat(f.name, "/").concat(t.name, "/")] = n["idb://".concat(f.name, "/").concat(t.name, "/:dels")] = new gn(-1 / 0, [[[]]]);
          }), Nt(Mt).fire(n), Tn(n, true)), f;
        });
      }
      function In(t) {
        function e(e) {
          return t.next(e);
        }
        var r = n(e),
          i = n(function (e) {
            return t.throw(e);
          });
        function n(n) {
          return function (e) {
            var t = n(e),
              e = t.value;
            return t.done ? e : e && "function" == typeof e.then ? e.then(r, i) : k(e) ? Promise.all(e).then(r, i) : r(e);
          };
        }
        return n(e)();
      }
      function Bn(e, t, n) {
        for (var r = k(e) ? e.slice() : [e], i = 0; i < n; ++i) r.push(t);
        return r;
      }
      var Rn = {
        stack: "dbcore",
        name: "VirtualIndexMiddleware",
        level: 1,
        create: function (f) {
          return _(_({}, f), {
            table: function (e) {
              var a = f.table(e),
                t = a.schema,
                u = {},
                s = [];
              function c(e, t, n) {
                var r = Xt(e),
                  i = u[r] = u[r] || [],
                  o = null == e ? 0 : "string" == typeof e ? 1 : e.length,
                  a = 0 < t,
                  a = _(_({}, n), {
                    name: a ? "".concat(r, "(virtual-from:").concat(n.name, ")") : n.name,
                    lowLevelIndex: n,
                    isVirtual: a,
                    keyTail: t,
                    keyLength: o,
                    extractKey: $t(e),
                    unique: !a && n.unique
                  });
                return i.push(a), a.isPrimaryKey || s.push(a), 1 < o && c(2 === o ? e[0] : e.slice(0, o - 1), t + 1, n), i.sort(function (e, t) {
                  return e.keyTail - t.keyTail;
                }), a;
              }
              e = c(t.primaryKey.keyPath, 0, t.primaryKey);
              u[":id"] = [e];
              for (var n = 0, r = t.indexes; n < r.length; n++) {
                var i = r[n];
                c(i.keyPath, 0, i);
              }
              function l(e) {
                var t,
                  n = e.query.index;
                return n.isVirtual ? _(_({}, e), {
                  query: {
                    index: n.lowLevelIndex,
                    range: (t = e.query.range, n = n.keyTail, {
                      type: 1 === t.type ? 2 : t.type,
                      lower: Bn(t.lower, t.lowerOpen ? f.MAX_KEY : f.MIN_KEY, n),
                      lowerOpen: true,
                      upper: Bn(t.upper, t.upperOpen ? f.MIN_KEY : f.MAX_KEY, n),
                      upperOpen: true
                    })
                  }
                }) : e;
              }
              return _(_({}, a), {
                schema: _(_({}, t), {
                  primaryKey: e,
                  indexes: s,
                  getIndexByKeyPath: function (e) {
                    return (e = u[Xt(e)]) && e[0];
                  }
                }),
                count: function (e) {
                  return a.count(l(e));
                },
                query: function (e) {
                  return a.query(l(e));
                },
                openCursor: function (t) {
                  var e = t.query.index,
                    r = e.keyTail,
                    n = e.isVirtual,
                    i = e.keyLength;
                  return n ? a.openCursor(l(t)).then(function (e) {
                    return e && o(e);
                  }) : a.openCursor(t);
                  function o(n) {
                    return Object.create(n, {
                      continue: {
                        value: function (e) {
                          null != e ? n.continue(Bn(e, t.reverse ? f.MAX_KEY : f.MIN_KEY, r)) : t.unique ? n.continue(n.key.slice(0, i).concat(t.reverse ? f.MIN_KEY : f.MAX_KEY, r)) : n.continue();
                        }
                      },
                      continuePrimaryKey: {
                        value: function (e, t) {
                          n.continuePrimaryKey(Bn(e, f.MAX_KEY, r), t);
                        }
                      },
                      primaryKey: {
                        get: function () {
                          return n.primaryKey;
                        }
                      },
                      key: {
                        get: function () {
                          var e = n.key;
                          return 1 === i ? e[0] : e.slice(0, i);
                        }
                      },
                      value: {
                        get: function () {
                          return n.value;
                        }
                      }
                    });
                  }
                }
              });
            }
          });
        }
      };
      function Mn(i, o, a, u) {
        return a = a || {}, u = u || "", x(i).forEach(function (e) {
          var t, n, r;
          m(o, e) ? (t = i[e], n = o[e], "object" == typeof t && "object" == typeof n && t && n ? (r = A(t)) !== A(n) ? a[u + e] = o[e] : "Object" === r ? Mn(t, n, a, u + e + ".") : t !== n && (a[u + e] = o[e]) : t !== n && (a[u + e] = o[e])) : a[u + e] = undefined;
        }), x(o).forEach(function (e) {
          m(i, e) || (a[u + e] = o[e]);
        }), a;
      }
      function Fn(e, t) {
        return "delete" === t.type ? t.keys : t.keys || t.values.map(e.extractKey);
      }
      var Nn = {
        stack: "dbcore",
        name: "HooksMiddleware",
        level: 2,
        create: function (e) {
          return _(_({}, e), {
            table: function (r) {
              var y = e.table(r),
                v = y.schema.primaryKey;
              return _(_({}, y), {
                mutate: function (e) {
                  var t = me.trans,
                    n = t.table(r).hook,
                    h = n.deleting,
                    d = n.creating,
                    p = n.updating;
                  switch (e.type) {
                    case "add":
                      if (d.fire === G) break;
                      return t._promise("readwrite", function () {
                        return a(e);
                      }, true);
                    case "put":
                      if (d.fire === G && p.fire === G) break;
                      return t._promise("readwrite", function () {
                        return a(e);
                      }, true);
                    case "delete":
                      if (h.fire === G) break;
                      return t._promise("readwrite", function () {
                        return a(e);
                      }, true);
                    case "deleteRange":
                      if (h.fire === G) break;
                      return t._promise("readwrite", function () {
                        return function n(r, i, o) {
                          return y.query({
                            trans: r,
                            values: false,
                            query: {
                              index: v,
                              range: i
                            },
                            limit: o
                          }).then(function (e) {
                            var t = e.result;
                            return a({
                              type: "delete",
                              keys: t,
                              trans: r
                            }).then(function (e) {
                              return 0 < e.numFailures ? Promise.reject(e.failures[0]) : t.length < o ? {
                                failures: [],
                                numFailures: 0,
                                lastResult: undefined
                              } : n(r, _(_({}, i), {
                                lower: t[t.length - 1],
                                lowerOpen: true
                              }), o);
                            });
                          });
                        }(e.trans, e.range, 1e4);
                      }, true);
                  }
                  return y.mutate(e);
                  function a(c) {
                    var e,
                      t,
                      n,
                      l = me.trans,
                      f = c.keys || Fn(v, c);
                    if (!f) throw new Error("Keys missing");
                    return "delete" !== (c = "add" === c.type || "put" === c.type ? _(_({}, c), {
                      keys: f
                    }) : _({}, c)).type && (c.values = i([], c.values)), c.keys && (c.keys = i([], c.keys)), e = y, n = f, ("add" === (t = c).type ? Promise.resolve([]) : e.getMany({
                      trans: t.trans,
                      keys: n,
                      cache: "immutable"
                    })).then(function (u) {
                      var s = f.map(function (e, t) {
                        var n,
                          r,
                          i,
                          o = u[t],
                          a = {
                            onerror: null,
                            onsuccess: null
                          };
                        return "delete" === c.type ? h.fire.call(a, e, o, l) : "add" === c.type || undefined === o ? (n = d.fire.call(a, e, c.values[t], l), null == e && null != n && (c.keys[t] = e = n, v.outbound || P(c.values[t], v.keyPath, e))) : (n = Mn(o, c.values[t]), (r = p.fire.call(a, n, e, o, l)) && (i = c.values[t], Object.keys(r).forEach(function (e) {
                          m(i, e) ? i[e] = r[e] : P(i, e, r[e]);
                        }))), a;
                      });
                      return y.mutate(c).then(function (e) {
                        for (var t = e.failures, n = e.results, r = e.numFailures, e = e.lastResult, i = 0; i < f.length; ++i) {
                          var o = (n || f)[i],
                            a = s[i];
                          null == o ? a.onerror && a.onerror(t[i]) : a.onsuccess && a.onsuccess("put" === c.type && u[i] ? c.values[i] : o);
                        }
                        return {
                          failures: t,
                          results: n,
                          numFailures: r,
                          lastResult: e
                        };
                      }).catch(function (t) {
                        return s.forEach(function (e) {
                          return e.onerror && e.onerror(t);
                        }), Promise.reject(t);
                      });
                    });
                  }
                }
              });
            }
          });
        }
      };
      function Ln(e, t, n) {
        try {
          if (!t) return null;
          if (t.keys.length < e.length) return null;
          for (var r = [], i = 0, o = 0; i < t.keys.length && o < e.length; ++i) 0 === st(t.keys[i], e[o]) && (r.push(n ? S(t.values[i]) : t.values[i]), ++o);
          return r.length === e.length ? r : null;
        } catch (e) {
          return null;
        }
      }
      var Un = {
        stack: "dbcore",
        level: -1,
        create: function (t) {
          return {
            table: function (e) {
              var n = t.table(e);
              return _(_({}, n), {
                getMany: function (t) {
                  if (!t.cache) return n.getMany(t);
                  var e = Ln(t.keys, t.trans._cache, "clone" === t.cache);
                  return e ? _e.resolve(e) : n.getMany(t).then(function (e) {
                    return t.trans._cache = {
                      keys: t.keys,
                      values: "clone" === t.cache ? S(e) : e
                    }, e;
                  });
                },
                mutate: function (e) {
                  return "add" !== e.type && (e.trans._cache = null), n.mutate(e);
                }
              });
            }
          };
        }
      };
      function Vn(e, t) {
        return "readonly" === e.trans.mode && !!e.subscr && !e.trans.explicit && "disabled" !== e.trans.db._options.cache && !t.schema.primaryKey.outbound;
      }
      function zn(e, t) {
        switch (e) {
          case "query":
            return t.values && !t.unique;
          case "get":
          case "getMany":
          case "count":
          case "openCursor":
            return false;
        }
      }
      var Wn = {
        stack: "dbcore",
        level: 0,
        name: "Observability",
        create: function (b) {
          var g = b.schema.name,
            w = new gn(b.MIN_KEY, b.MAX_KEY);
          return _(_({}, b), {
            transaction: function (e, t, n) {
              if (me.subscr && "readonly" !== t) throw new Y.ReadOnly("Readwrite transaction in liveQuery context. Querier source: ".concat(me.querier));
              return b.transaction(e, t, n);
            },
            table: function (d) {
              var p = b.table(d),
                y = p.schema,
                v = y.primaryKey,
                e = y.indexes,
                c = v.extractKey,
                l = v.outbound,
                m = v.autoIncrement && e.filter(function (e) {
                  return e.compound && e.keyPath.includes(v.keyPath);
                }),
                t = _(_({}, p), {
                  mutate: function (a) {
                    function u(e) {
                      return e = "idb://".concat(g, "/").concat(d, "/").concat(e), n[e] || (n[e] = new gn());
                    }
                    var e,
                      o,
                      s,
                      t = a.trans,
                      n = a.mutatedParts || (a.mutatedParts = {}),
                      r = u(""),
                      i = u(":dels"),
                      c = a.type,
                      l = "deleteRange" === a.type ? [a.range] : "delete" === a.type ? [a.keys] : a.values.length < 50 ? [Fn(v, a).filter(function (e) {
                        return e;
                      }), a.values] : [],
                      f = l[0],
                      h = l[1],
                      l = a.trans._cache;
                    return k(f) ? (r.addKeys(f), (l = "delete" === c || f.length === h.length ? Ln(f, l) : null) || i.addKeys(f), (l || h) && (e = u, o = l, s = h, y.indexes.forEach(function (t) {
                      var n = e(t.name || "");
                      function r(e) {
                        return null != e ? t.extractKey(e) : null;
                      }
                      function i(e) {
                        return t.multiEntry && k(e) ? e.forEach(function (e) {
                          return n.addKey(e);
                        }) : n.addKey(e);
                      }
                      (o || s).forEach(function (e, t) {
                        var n = o && r(o[t]),
                          t = s && r(s[t]);
                        0 !== st(n, t) && (null != n && i(n), null != t && i(t));
                      });
                    }))) : f ? (h = {
                      from: null !== (h = f.lower) && undefined !== h ? h : b.MIN_KEY,
                      to: null !== (h = f.upper) && undefined !== h ? h : b.MAX_KEY
                    }, i.add(h), r.add(h)) : (r.add(w), i.add(w), y.indexes.forEach(function (e) {
                      return u(e.name).add(w);
                    })), p.mutate(a).then(function (o) {
                      return !f || "add" !== a.type && "put" !== a.type || (r.addKeys(o.results), m && m.forEach(function (t) {
                        for (var e = a.values.map(function (e) {
                            return t.extractKey(e);
                          }), n = t.keyPath.findIndex(function (e) {
                            return e === v.keyPath;
                          }), r = 0, i = o.results.length; r < i; ++r) e[r][n] = o.results[r];
                        u(t.name).addKeys(e);
                      })), t.mutatedParts = Kn(t.mutatedParts || {}, n), o;
                    });
                  }
                }),
                e = function (e) {
                  var t = e.query,
                    e = t.index,
                    t = t.range;
                  return [e, new gn(null !== (e = t.lower) && undefined !== e ? e : b.MIN_KEY, null !== (t = t.upper) && undefined !== t ? t : b.MAX_KEY)];
                },
                f = {
                  get: function (e) {
                    return [v, new gn(e.key)];
                  },
                  getMany: function (e) {
                    return [v, new gn().addKeys(e.keys)];
                  },
                  count: e,
                  query: e,
                  openCursor: e
                };
              return x(f).forEach(function (s) {
                t[s] = function (i) {
                  var e = me.subscr,
                    t = !!e,
                    n = Vn(me, p) && zn(s, i) ? i.obsSet = {} : e;
                  if (t) {
                    var r = function (e) {
                        e = "idb://".concat(g, "/").concat(d, "/").concat(e);
                        return n[e] || (n[e] = new gn());
                      },
                      o = r(""),
                      a = r(":dels"),
                      e = f[s](i),
                      t = e[0],
                      e = e[1];
                    if (("query" === s && t.isPrimaryKey && !i.values ? a : r(t.name || "")).add(e), !t.isPrimaryKey) {
                      if ("count" !== s) {
                        var u = "query" === s && l && i.values && p.query(_(_({}, i), {
                          values: false
                        }));
                        return p[s].apply(this, arguments).then(function (t) {
                          if ("query" === s) {
                            if (l && i.values) return u.then(function (e) {
                              e = e.result;
                              return o.addKeys(e), t;
                            });
                            var e = i.values ? t.result.map(c) : t.result;
                            (i.values ? o : a).addKeys(e);
                          } else if ("openCursor" === s) {
                            var n = t,
                              r = i.values;
                            return n && Object.create(n, {
                              key: {
                                get: function () {
                                  return a.addKey(n.primaryKey), n.key;
                                }
                              },
                              primaryKey: {
                                get: function () {
                                  var e = n.primaryKey;
                                  return a.addKey(e), e;
                                }
                              },
                              value: {
                                get: function () {
                                  return r && o.addKey(n.primaryKey), n.value;
                                }
                              }
                            });
                          }
                          return t;
                        });
                      }
                      a.add(w);
                    }
                  }
                  return p[s].apply(this, arguments);
                };
              }), t;
            }
          });
        }
      };
      function Yn(e, t, n) {
        if (0 === n.numFailures) return t;
        if ("deleteRange" === t.type) return null;
        var r = t.keys ? t.keys.length : "values" in t && t.values ? t.values.length : 1;
        if (n.numFailures === r) return null;
        t = _({}, t);
        return k(t.keys) && (t.keys = t.keys.filter(function (e, t) {
          return !(t in n.failures);
        })), "values" in t && k(t.values) && (t.values = t.values.filter(function (e, t) {
          return !(t in n.failures);
        })), t;
      }
      function $n(e, t) {
        return n = e, (undefined === (r = t).lower || (r.lowerOpen ? 0 < st(n, r.lower) : 0 <= st(n, r.lower))) && (e = e, undefined === (t = t).upper || (t.upperOpen ? st(e, t.upper) < 0 : st(e, t.upper) <= 0));
        var n, r;
      }
      function Qn(e, d, t, n, r, i) {
        if (!t || 0 === t.length) return e;
        var o = d.query.index,
          p = o.multiEntry,
          y = d.query.range,
          v = n.schema.primaryKey.extractKey,
          m = o.extractKey,
          a = (o.lowLevelIndex || o).extractKey,
          t = t.reduce(function (e, t) {
            var n = e,
              r = [];
            if ("add" === t.type || "put" === t.type) for (var i = new gn(), o = t.values.length - 1; 0 <= o; --o) {
              var a,
                u = t.values[o],
                s = v(u);
              i.hasKey(s) || (a = m(u), (p && k(a) ? a.some(function (e) {
                return $n(e, y);
              }) : $n(a, y)) && (i.addKey(s), r.push(u)));
            }
            switch (t.type) {
              case "add":
                var c = new gn().addKeys(d.values ? e.map(function (e) {
                    return v(e);
                  }) : e),
                  n = e.concat(d.values ? r.filter(function (e) {
                    e = v(e);
                    return !c.hasKey(e) && (c.addKey(e), true);
                  }) : r.map(function (e) {
                    return v(e);
                  }).filter(function (e) {
                    return !c.hasKey(e) && (c.addKey(e), true);
                  }));
                break;
              case "put":
                var l = new gn().addKeys(t.values.map(function (e) {
                  return v(e);
                }));
                n = e.filter(function (e) {
                  return !l.hasKey(d.values ? v(e) : e);
                }).concat(d.values ? r : r.map(function (e) {
                  return v(e);
                }));
                break;
              case "delete":
                var f = new gn().addKeys(t.keys);
                n = e.filter(function (e) {
                  return !f.hasKey(d.values ? v(e) : e);
                });
                break;
              case "deleteRange":
                var h = t.range;
                n = e.filter(function (e) {
                  return !$n(v(e), h);
                });
            }
            return n;
          }, e);
        return t === e ? e : (t.sort(function (e, t) {
          return st(a(e), a(t)) || st(v(e), v(t));
        }), d.limit && d.limit < 1 / 0 && (t.length > d.limit ? t.length = d.limit : e.length === d.limit && t.length < d.limit && (r.dirty = true)), i ? Object.freeze(t) : t);
      }
      function Gn(e, t) {
        return 0 === st(e.lower, t.lower) && 0 === st(e.upper, t.upper) && !!e.lowerOpen == !!t.lowerOpen && !!e.upperOpen == !!t.upperOpen;
      }
      function Xn(e, t) {
        return function (e, t, n, r) {
          if (undefined === e) return undefined !== t ? -1 : 0;
          if (undefined === t) return 1;
          if (0 === (t = st(e, t))) {
            if (n && r) return 0;
            if (n) return 1;
            if (r) return -1;
          }
          return t;
        }(e.lower, t.lower, e.lowerOpen, t.lowerOpen) <= 0 && 0 <= function (e, t, n, r) {
          if (undefined === e) return undefined !== t ? 1 : 0;
          if (undefined === t) return -1;
          if (0 === (t = st(e, t))) {
            if (n && r) return 0;
            if (n) return -1;
            if (r) return 1;
          }
          return t;
        }(e.upper, t.upper, e.upperOpen, t.upperOpen);
      }
      function Hn(n, r, i, e) {
        n.subscribers.add(i), e.addEventListener("abort", function () {
          var e, t;
          n.subscribers.delete(i), 0 === n.subscribers.size && (e = n, t = r, setTimeout(function () {
            0 === e.subscribers.size && q(t, e);
          }, 3e3));
        });
      }
      var Jn = {
        stack: "dbcore",
        level: 0,
        name: "Cache",
        create: function (k) {
          var O = k.schema.name;
          return _(_({}, k), {
            transaction: function (g, w, e) {
              var _,
                t,
                x = k.transaction(g, w, e);
              return "readwrite" === w && (t = (_ = new AbortController()).signal, e = function (b) {
                return function () {
                  if (_.abort(), "readwrite" === w) {
                    for (var t = new Set(), e = 0, n = g; e < n.length; e++) {
                      var r = n[e],
                        i = Sn["idb://".concat(O, "/").concat(r)];
                      if (i) {
                        var o = k.table(r),
                          a = i.optimisticOps.filter(function (e) {
                            return e.trans === x;
                          });
                        if (x._explicit && b && x.mutatedParts) for (var u = 0, s = Object.values(i.queries.query); u < s.length; u++) for (var c = 0, l = (d = s[u]).slice(); c < l.length; c++) En((p = l[c]).obsSet, x.mutatedParts) && (q(d, p), p.subscribers.forEach(function (e) {
                          return t.add(e);
                        }));else if (0 < a.length) {
                          i.optimisticOps = i.optimisticOps.filter(function (e) {
                            return e.trans !== x;
                          });
                          for (var f = 0, h = Object.values(i.queries.query); f < h.length; f++) for (var d, p, y, v = 0, m = (d = h[f]).slice(); v < m.length; v++) null != (p = m[v]).res && x.mutatedParts && (b && !p.dirty ? (y = Object.isFrozen(p.res), y = Qn(p.res, p.req, a, o, p, y), p.dirty ? (q(d, p), p.subscribers.forEach(function (e) {
                            return t.add(e);
                          })) : y !== p.res && (p.res = y, p.promise = _e.resolve({
                            result: y
                          }))) : (p.dirty && q(d, p), p.subscribers.forEach(function (e) {
                            return t.add(e);
                          })));
                        }
                      }
                    }
                    t.forEach(function (e) {
                      return e();
                    });
                  }
                };
              }, x.addEventListener("abort", e(false), {
                signal: t
              }), x.addEventListener("error", e(false), {
                signal: t
              }), x.addEventListener("complete", e(true), {
                signal: t
              })), x;
            },
            table: function (c) {
              var l = k.table(c),
                i = l.schema.primaryKey;
              return _(_({}, l), {
                mutate: function (t) {
                  var e = me.trans;
                  if (i.outbound || "disabled" === e.db._options.cache || e.explicit || "readwrite" !== e.idbtrans.mode) return l.mutate(t);
                  var n = Sn["idb://".concat(O, "/").concat(c)];
                  if (!n) return l.mutate(t);
                  e = l.mutate(t);
                  return "add" !== t.type && "put" !== t.type || !(50 <= t.values.length || Fn(i, t).some(function (e) {
                    return null == e;
                  })) ? (n.optimisticOps.push(t), t.mutatedParts && Cn(t.mutatedParts), e.then(function (e) {
                    0 < e.numFailures && (q(n.optimisticOps, t), (e = Yn(0, t, e)) && n.optimisticOps.push(e), t.mutatedParts && Cn(t.mutatedParts));
                  }), e.catch(function () {
                    q(n.optimisticOps, t), t.mutatedParts && Cn(t.mutatedParts);
                  })) : e.then(function (r) {
                    var e = Yn(0, _(_({}, t), {
                      values: t.values.map(function (e, t) {
                        var n;
                        if (r.failures[t]) return e;
                        e = null !== (n = i.keyPath) && undefined !== n && n.includes(".") ? S(e) : _({}, e);
                        return P(e, i.keyPath, r.results[t]), e;
                      })
                    }), r);
                    n.optimisticOps.push(e), queueMicrotask(function () {
                      return t.mutatedParts && Cn(t.mutatedParts);
                    });
                  }), e;
                },
                query: function (t) {
                  if (!Vn(me, l) || !zn("query", t)) return l.query(t);
                  var i = "immutable" === (null === (o = me.trans) || undefined === o ? undefined : o.db._options.cache),
                    e = me,
                    n = e.requery,
                    r = e.signal,
                    o = function (e, t, n, r) {
                      var i = Sn["idb://".concat(e, "/").concat(t)];
                      if (!i) return [];
                      if (!(t = i.queries[n])) return [null, false, i, null];
                      var o = t[(r.query ? r.query.index.name : null) || ""];
                      if (!o) return [null, false, i, null];
                      switch (n) {
                        case "query":
                          var a = o.find(function (e) {
                            return e.req.limit === r.limit && e.req.values === r.values && Gn(e.req.query.range, r.query.range);
                          });
                          return a ? [a, true, i, o] : [o.find(function (e) {
                            return ("limit" in e.req ? e.req.limit : 1 / 0) >= r.limit && (!r.values || e.req.values) && Xn(e.req.query.range, r.query.range);
                          }), false, i, o];
                        case "count":
                          a = o.find(function (e) {
                            return Gn(e.req.query.range, r.query.range);
                          });
                          return [a, !!a, i, o];
                      }
                    }(O, c, "query", t),
                    a = o[0],
                    e = o[1],
                    u = o[2],
                    s = o[3];
                  return a && e ? a.obsSet = t.obsSet : (e = l.query(t).then(function (e) {
                    var t = e.result;
                    if (a && (a.res = t), i) {
                      for (var n = 0, r = t.length; n < r; ++n) Object.freeze(t[n]);
                      Object.freeze(t);
                    } else e.result = S(t);
                    return e;
                  }).catch(function (e) {
                    return s && a && q(s, a), Promise.reject(e);
                  }), a = {
                    obsSet: t.obsSet,
                    promise: e,
                    subscribers: new Set(),
                    type: "query",
                    req: t,
                    dirty: false
                  }, s ? s.push(a) : (s = [a], (u = u || (Sn["idb://".concat(O, "/").concat(c)] = {
                    queries: {
                      query: {},
                      count: {}
                    },
                    objs: new Map(),
                    optimisticOps: [],
                    unsignaledParts: {}
                  })).queries.query[t.query.index.name || ""] = s)), Hn(a, s, n, r), a.promise.then(function (e) {
                    return {
                      result: Qn(e.result, t, null == u ? undefined : u.optimisticOps, l, a, i)
                    };
                  });
                }
              });
            }
          });
        }
      };
      function Zn(e, r) {
        return new Proxy(e, {
          get: function (e, t, n) {
            return "db" === t ? r : Reflect.get(e, t, n);
          }
        });
      }
      var er = (tr.prototype.version = function (t) {
        if (isNaN(t) || t < .1) throw new Y.Type("Given version is not a positive number");
        if (t = Math.round(10 * t) / 10, this.idbdb || this._state.isBeingOpened) throw new Y.Schema("Cannot add version when database is open");
        this.verno = Math.max(this.verno, t);
        var e = this._versions,
          n = e.filter(function (e) {
            return e._cfg.version === t;
          })[0];
        return n || (n = new this.Version(t), e.push(n), e.sort(nn), n.stores({}), this._state.autoSchema = false, n);
      }, tr.prototype._whenReady = function (e) {
        var n = this;
        return this.idbdb && (this._state.openComplete || me.letThrough || this._vip) ? e() : new _e(function (e, t) {
          if (n._state.openComplete) return t(new Y.DatabaseClosed(n._state.dbOpenError));
          if (!n._state.isBeingOpened) {
            if (!n._state.autoOpen) return void t(new Y.DatabaseClosed());
            n.open().catch(G);
          }
          n._state.dbReadyPromise.then(e, t);
        }).then(e);
      }, tr.prototype.use = function (e) {
        var t = e.stack,
          n = e.create,
          r = e.level,
          i = e.name;
        i && this.unuse({
          stack: t,
          name: i
        });
        e = this._middlewares[t] || (this._middlewares[t] = []);
        return e.push({
          stack: t,
          create: n,
          level: null == r ? 10 : r,
          name: i
        }), e.sort(function (e, t) {
          return e.level - t.level;
        }), this;
      }, tr.prototype.unuse = function (e) {
        var t = e.stack,
          n = e.name,
          r = e.create;
        return t && this._middlewares[t] && (this._middlewares[t] = this._middlewares[t].filter(function (e) {
          return r ? e.create !== r : !!n && e.name !== n;
        })), this;
      }, tr.prototype.open = function () {
        var e = this;
        return $e(ve, function () {
          return Dn(e);
        });
      }, tr.prototype._close = function () {
        var n = this._state,
          e = et.indexOf(this);
        if (0 <= e && et.splice(e, 1), this.idbdb) {
          try {
            this.idbdb.close();
          } catch (e) {}
          this.idbdb = null;
        }
        n.isBeingOpened || (n.dbReadyPromise = new _e(function (e) {
          n.dbReadyResolve = e;
        }), n.openCanceller = new _e(function (e, t) {
          n.cancelOpen = t;
        }));
      }, tr.prototype.close = function (e) {
        var t = (undefined === e ? {
            disableAutoOpen: true
          } : e).disableAutoOpen,
          e = this._state;
        t ? (e.isBeingOpened && e.cancelOpen(new Y.DatabaseClosed()), this._close(), e.autoOpen = false, e.dbOpenError = new Y.DatabaseClosed()) : (this._close(), e.autoOpen = this._options.autoOpen || e.isBeingOpened, e.openComplete = false, e.dbOpenError = null);
      }, tr.prototype.delete = function (n) {
        var i = this;
        undefined === n && (n = {
          disableAutoOpen: true
        });
        var o = 0 < arguments.length && "object" != typeof arguments[0],
          a = this._state;
        return new _e(function (r, t) {
          function e() {
            i.close(n);
            var e = i._deps.indexedDB.deleteDatabase(i.name);
            e.onsuccess = qe(function () {
              var e, t, n;
              e = i._deps, t = i.name, n = e.indexedDB, e = e.IDBKeyRange, vn(n) || t === tt || yn(n, e).delete(t).catch(G), r();
            }), e.onerror = Bt(t), e.onblocked = i._fireOnBlocked;
          }
          if (o) throw new Y.InvalidArgument("Invalid closeOptions argument to db.delete()");
          a.isBeingOpened ? a.dbReadyPromise.then(e) : e();
        });
      }, tr.prototype.backendDB = function () {
        return this.idbdb;
      }, tr.prototype.isOpen = function () {
        return null !== this.idbdb;
      }, tr.prototype.hasBeenClosed = function () {
        var e = this._state.dbOpenError;
        return e && "DatabaseClosed" === e.name;
      }, tr.prototype.hasFailed = function () {
        return null !== this._state.dbOpenError;
      }, tr.prototype.dynamicallyOpened = function () {
        return this._state.autoSchema;
      }, Object.defineProperty(tr.prototype, "tables", {
        get: function () {
          var t = this;
          return x(this._allTables).map(function (e) {
            return t._allTables[e];
          });
        },
        enumerable: false,
        configurable: true
      }), tr.prototype.transaction = function () {
        var e = function (e, t, n) {
          var r = arguments.length;
          if (r < 2) throw new Y.InvalidArgument("Too few arguments");
          for (var i = new Array(r - 1); --r;) i[r - 1] = arguments[r];
          return n = i.pop(), [e, w(i), n];
        }.apply(this, arguments);
        return this._transaction.apply(this, e);
      }, tr.prototype._transaction = function (e, t, n) {
        var r = this,
          i = me.trans;
        i && i.db === this && -1 === e.indexOf("!") || (i = null);
        var o,
          a,
          u = -1 !== e.indexOf("?");
        e = e.replace("!", "").replace("?", "");
        try {
          if (a = t.map(function (e) {
            e = e instanceof r.Table ? e.name : e;
            if ("string" != typeof e) throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
            return e;
          }), "r" == e || e === nt) o = nt;else {
            if ("rw" != e && e != rt) throw new Y.InvalidArgument("Invalid transaction mode: " + e);
            o = rt;
          }
          if (i) {
            if (i.mode === nt && o === rt) {
              if (!u) throw new Y.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
              i = null;
            }
            i && a.forEach(function (e) {
              if (i && -1 === i.storeNames.indexOf(e)) {
                if (!u) throw new Y.SubTransaction("Table " + e + " not included in parent transaction.");
                i = null;
              }
            }), u && i && !i.active && (i = null);
          }
        } catch (n) {
          return i ? i._promise(null, function (e, t) {
            t(n);
          }) : Xe(n);
        }
        var s = function i(o, a, u, s, c) {
          return _e.resolve().then(function () {
            var e = me.transless || me,
              t = o._createTransaction(a, u, o._dbSchema, s);
            if (t.explicit = true, e = {
              trans: t,
              transless: e
            }, s) t.idbtrans = s.idbtrans;else try {
              t.create(), t.idbtrans._explicit = !0, o._state.PR1398_maxLoop = 3;
            } catch (e) {
              return e.name === z.InvalidState && o.isOpen() && 0 < --o._state.PR1398_maxLoop ? (console.warn("Dexie: Need to reopen db"), o.close({
                disableAutoOpen: false
              }), o.open().then(function () {
                return i(o, a, u, null, c);
              })) : Xe(e);
            }
            var n,
              r = B(c);
            return r && Le(), e = _e.follow(function () {
              var e;
              (n = c.call(t, t)) && (r ? (e = Ue.bind(null, null), n.then(e, e)) : "function" == typeof n.next && "function" == typeof n.throw && (n = In(n)));
            }, e), (n && "function" == typeof n.then ? _e.resolve(n).then(function (e) {
              return t.active ? e : Xe(new Y.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
            }) : e.then(function () {
              return n;
            })).then(function (e) {
              return s && t._resolve(), t._completion.then(function () {
                return e;
              });
            }).catch(function (e) {
              return t._reject(e), Xe(e);
            });
          });
        }.bind(null, this, o, a, i, n);
        return i ? i._promise(o, s, "lock") : me.trans ? $e(me.transless, function () {
          return r._whenReady(s);
        }) : this._whenReady(s);
      }, tr.prototype.table = function (e) {
        if (!m(this._allTables, e)) throw new Y.InvalidTable("Table ".concat(e, " does not exist"));
        return this._allTables[e];
      }, tr);
      function tr(e, t) {
        var o = this;
        this._middlewares = {}, this.verno = 0;
        var n = tr.dependencies;
        this._options = t = _({
          addons: tr.addons,
          autoOpen: true,
          indexedDB: n.indexedDB,
          IDBKeyRange: n.IDBKeyRange,
          cache: "cloned"
        }, t), this._deps = {
          indexedDB: t.indexedDB,
          IDBKeyRange: t.IDBKeyRange
        };
        n = t.addons;
        this._dbSchema = {}, this._versions = [], this._storeNames = [], this._allTables = {}, this.idbdb = null, this._novip = this;
        var a,
          r,
          u,
          i,
          s,
          c = {
            dbOpenError: null,
            isBeingOpened: false,
            onReadyBeingFired: null,
            openComplete: false,
            dbReadyResolve: G,
            dbReadyPromise: null,
            cancelOpen: G,
            openCanceller: null,
            autoSchema: true,
            PR1398_maxLoop: 3,
            autoOpen: t.autoOpen
          };
        c.dbReadyPromise = new _e(function (e) {
          c.dbReadyResolve = e;
        }), c.openCanceller = new _e(function (e, t) {
          c.cancelOpen = t;
        }), this._state = c, this.name = e, this.on = dt(this, "populate", "blocked", "versionchange", "close", {
          ready: [re, G]
        }), this.on.ready.subscribe = p(this.on.ready.subscribe, function (i) {
          return function (n, r) {
            tr.vip(function () {
              var t,
                e = o._state;
              e.openComplete ? (e.dbOpenError || _e.resolve().then(n), r && i(n)) : e.onReadyBeingFired ? (e.onReadyBeingFired.push(n), r && i(n)) : (i(n), t = o, r || i(function e() {
                t.on.ready.unsubscribe(n), t.on.ready.unsubscribe(e);
              }));
            });
          };
        }), this.Collection = (a = this, pt(Ot.prototype, function (e, t) {
          this.db = a;
          var n = ot,
            r = null;
          if (t) try {
            n = t();
          } catch (e) {
            r = e;
          }
          var i = e._ctx,
            t = i.table,
            e = t.hook.reading.fire;
          this._ctx = {
            table: t,
            index: i.index,
            isPrimKey: !i.index || t.schema.primKey.keyPath && i.index === t.schema.primKey.name,
            range: n,
            keysOnly: false,
            dir: "next",
            unique: "",
            algorithm: null,
            filter: null,
            replayFilter: null,
            justLimit: true,
            isMatch: null,
            offset: 0,
            limit: 1 / 0,
            error: r,
            or: i.or,
            valueMapper: e !== X ? e : null
          };
        })), this.Table = (r = this, pt(ft.prototype, function (e, t, n) {
          this.db = r, this._tx = n, this.name = e, this.schema = t, this.hook = r._allTables[e] ? r._allTables[e].hook : dt(null, {
            creating: [Z, G],
            reading: [H, X],
            updating: [te, G],
            deleting: [ee, G]
          });
        })), this.Transaction = (u = this, pt(Lt.prototype, function (e, t, n, r, i) {
          var o = this;
          this.db = u, this.mode = e, this.storeNames = t, this.schema = n, this.chromeTransactionDurability = r, this.idbtrans = null, this.on = dt(this, "complete", "error", "abort"), this.parent = i || null, this.active = true, this._reculock = 0, this._blockedFuncs = [], this._resolve = null, this._reject = null, this._waitingFor = null, this._waitingQueue = null, this._spinCount = 0, this._completion = new _e(function (e, t) {
            o._resolve = e, o._reject = t;
          }), this._completion.then(function () {
            o.active = false, o.on.complete.fire();
          }, function (e) {
            var t = o.active;
            return o.active = false, o.on.error.fire(e), o.parent ? o.parent._reject(e) : t && o.idbtrans && o.idbtrans.abort(), Xe(e);
          });
        })), this.Version = (i = this, pt(dn.prototype, function (e) {
          this.db = i, this._cfg = {
            version: e,
            storesSource: null,
            dbschema: {},
            tables: {},
            contentUpgrade: null
          };
        })), this.WhereClause = (s = this, pt(Dt.prototype, function (e, t, n) {
          if (this.db = s, this._ctx = {
            table: e,
            index: ":id" === t ? null : t,
            or: n
          }, this._cmp = this._ascending = st, this._descending = function (e, t) {
            return st(t, e);
          }, this._max = function (e, t) {
            return 0 < st(e, t) ? e : t;
          }, this._min = function (e, t) {
            return st(e, t) < 0 ? e : t;
          }, this._IDBKeyRange = s._deps.IDBKeyRange, !this._IDBKeyRange) throw new Y.MissingAPI();
        })), this.on("versionchange", function (e) {
          0 < e.newVersion ? console.warn("Another connection wants to upgrade database '".concat(o.name, "'. Closing db now to resume the upgrade.")) : console.warn("Another connection wants to delete database '".concat(o.name, "'. Closing db now to resume the delete request.")), o.close({
            disableAutoOpen: false
          });
        }), this.on("blocked", function (e) {
          !e.newVersion || e.newVersion < e.oldVersion ? console.warn("Dexie.delete('".concat(o.name, "') was blocked")) : console.warn("Upgrade '".concat(o.name, "' blocked by other connection holding version ").concat(e.oldVersion / 10));
        }), this._maxKey = Yt(t.IDBKeyRange), this._createTransaction = function (e, t, n, r) {
          return new o.Transaction(e, t, n, o._options.chromeTransactionDurability, r);
        }, this._fireOnBlocked = function (t) {
          o.on("blocked").fire(t), et.filter(function (e) {
            return e.name === o.name && e !== o && !e._state.vcFired;
          }).map(function (e) {
            return e.on("versionchange").fire(t);
          });
        }, this.use(Un), this.use(Jn), this.use(Wn), this.use(Rn), this.use(Nn);
        var l = new Proxy(this, {
          get: function (e, t, n) {
            if ("_vip" === t) return true;
            if ("table" === t) return function (e) {
              return Zn(o.table(e), l);
            };
            var r = Reflect.get(e, t, n);
            return r instanceof ft ? Zn(r, l) : "tables" === t ? r.map(function (e) {
              return Zn(e, l);
            }) : "_createTransaction" === t ? function () {
              return Zn(r.apply(this, arguments), l);
            } : r;
          }
        });
        this.vip = l, n.forEach(function (e) {
          return e(o);
        });
      }
      var nr,
        M = "undefined" != typeof Symbol && "observable" in Symbol ? Symbol.observable : "@@observable",
        rr = (ir.prototype.subscribe = function (e, t, n) {
          return this._subscribe(e && "function" != typeof e ? e : {
            next: e,
            error: t,
            complete: n
          });
        }, ir.prototype[M] = function () {
          return this;
        }, ir);
      function ir(e) {
        this._subscribe = e;
      }
      try {
        nr = {
          indexedDB: f.indexedDB || f.mozIndexedDB || f.webkitIndexedDB || f.msIndexedDB,
          IDBKeyRange: f.IDBKeyRange || f.webkitIDBKeyRange
        };
      } catch (e) {
        nr = {
          indexedDB: null,
          IDBKeyRange: null
        };
      }
      function or(h) {
        var d,
          p = false,
          e = new rr(function (r) {
            var i = B(h);
            var o,
              a = false,
              u = {},
              s = {},
              e = {
                get closed() {
                  return a;
                },
                unsubscribe: function () {
                  a || (a = true, o && o.abort(), c && Nt.storagemutated.unsubscribe(f));
                }
              };
            r.start && r.start(e);
            var c = false,
              l = function () {
                return Ge(t);
              };
            var f = function (e) {
                Kn(u, e), En(s, u) && l();
              },
              t = function () {
                var t, n, e;
                !a && nr.indexedDB && (u = {}, t = {}, o && o.abort(), o = new AbortController(), e = function (e) {
                  var t = je();
                  try {
                    i && Le();
                    var n = Ne(h, e);
                    return n = i ? n.finally(Ue) : n;
                  } finally {
                    t && Ae();
                  }
                }(n = {
                  subscr: t,
                  signal: o.signal,
                  requery: l,
                  querier: h,
                  trans: null
                }), Promise.resolve(e).then(function (e) {
                  p = true, d = e, a || n.signal.aborted || (u = {}, function (e) {
                    for (var t in e) if (m(e, t)) return;
                    return 1;
                  }(s = t) || c || (Nt(Mt, f), c = true), Ge(function () {
                    return !a && r.next && r.next(e);
                  }));
                }, function (e) {
                  p = false, ["DatabaseClosedError", "AbortError"].includes(null == e ? undefined : e.name) || a || Ge(function () {
                    a || r.error && r.error(e);
                  });
                }));
              };
            return setTimeout(l, 0), e;
          });
        return e.hasValue = function () {
          return p;
        }, e.getValue = function () {
          return d;
        }, e;
      }
      var ar = er;
      function ur(e) {
        var t = cr;
        try {
          cr = !0, Nt.storagemutated.fire(e), Tn(e, !0);
        } finally {
          cr = t;
        }
      }
      r(ar, _(_({}, Q), {
        delete: function (e) {
          return new ar(e, {
            addons: []
          }).delete();
        },
        exists: function (e) {
          return new ar(e, {
            addons: []
          }).open().then(function (e) {
            return e.close(), true;
          }).catch("NoSuchDatabaseError", function () {
            return false;
          });
        },
        getDatabaseNames: function (e) {
          try {
            return t = ar.dependencies, n = t.indexedDB, t = t.IDBKeyRange, (vn(n) ? Promise.resolve(n.databases()).then(function (e) {
              return e.map(function (e) {
                return e.name;
              }).filter(function (e) {
                return e !== tt;
              });
            }) : yn(n, t).toCollection().primaryKeys()).then(e);
          } catch (e) {
            return Xe(new Y.MissingAPI());
          }
          var t, n;
        },
        defineClass: function () {
          return function (e) {
            a(this, e);
          };
        },
        ignoreTransaction: function (e) {
          return me.trans ? $e(me.transless, e) : e();
        },
        vip: mn,
        async: function (t) {
          return function () {
            try {
              var e = In(t.apply(this, arguments));
              return e && "function" == typeof e.then ? e : _e.resolve(e);
            } catch (e) {
              return Xe(e);
            }
          };
        },
        spawn: function (e, t, n) {
          try {
            var r = In(e.apply(n, t || []));
            return r && "function" == typeof r.then ? r : _e.resolve(r);
          } catch (e) {
            return Xe(e);
          }
        },
        currentTransaction: {
          get: function () {
            return me.trans || null;
          }
        },
        waitFor: function (e, t) {
          t = _e.resolve("function" == typeof e ? ar.ignoreTransaction(e) : e).timeout(t || 6e4);
          return me.trans ? me.trans.waitFor(t) : t;
        },
        Promise: _e,
        debug: {
          get: function () {
            return ie;
          },
          set: function (e) {
            oe(e);
          }
        },
        derive: o,
        extend: a,
        props: r,
        override: p,
        Events: dt,
        on: Nt,
        liveQuery: or,
        extendObservabilitySet: Kn,
        getByKeyPath: O,
        setByKeyPath: P,
        delByKeyPath: function (t, e) {
          "string" == typeof e ? P(t, e, undefined) : "length" in e && [].map.call(e, function (e) {
            P(t, e, undefined);
          });
        },
        shallowClone: g,
        deepClone: S,
        getObjectDiff: Mn,
        cmp: st,
        asap: v,
        minKey: -1 / 0,
        addons: [],
        connections: et,
        errnames: z,
        dependencies: nr,
        cache: Sn,
        semVer: "4.0.10",
        version: "4.0.10".split(".").map(function (e) {
          return parseInt(e);
        }).reduce(function (e, t, n) {
          return e + t / Math.pow(10, 2 * n);
        })
      })), ar.maxKey = Yt(ar.dependencies.IDBKeyRange), "undefined" != typeof dispatchEvent && "undefined" != typeof addEventListener && (Nt(Mt, function (e) {
        cr || (e = new CustomEvent(Ft, {
          detail: e
        }), cr = true, dispatchEvent(e), cr = false);
      }), addEventListener(Ft, function (e) {
        e = e.detail;
        cr || ur(e);
      }));
      var sr,
        cr = false,
        lr = function () {};
      return "undefined" != typeof BroadcastChannel && ((lr = function () {
        (sr = new BroadcastChannel(Ft)).onmessage = function (e) {
          return e.data && ur(e.data);
        };
      })(), "function" == typeof sr.unref && sr.unref(), Nt(Mt, function (e) {
        cr || sr.postMessage(e);
      })), "undefined" != typeof addEventListener && (addEventListener("pagehide", function (e) {
        if (!er.disableBfCache && e.persisted) {
          ie && console.debug("Dexie: handling persisted pagehide"), null != sr && sr.close();
          for (var t = 0, n = et; t < n.length; t++) n[t].close({
            disableAutoOpen: false
          });
        }
      }), addEventListener("pageshow", function (e) {
        !er.disableBfCache && e.persisted && (ie && console.debug("Dexie: handling persisted pageshow"), lr(), ur({
          all: new gn(-1 / 0, [[]])
        }));
      })), _e.rejectionMapper = function (e, t) {
        return !e || e instanceof N || e instanceof TypeError || e instanceof SyntaxError || !e.name || !$[e.name] ? e : (t = new $[e.name](t || e.message, e), "stack" in e && l(t, "stack", {
          get: function () {
            return this.inner.stack;
          }
        }), t);
      }, oe(ie), _(er, Object.freeze({
        __proto__: null,
        Dexie: er,
        liveQuery: or,
        Entity: ut,
        cmp: st,
        PropModSymbol: e,
        PropModification: xt,
        replacePrefix: function (e, t) {
          return new xt({
            replacePrefix: [e, t]
          });
        },
        add: function (e) {
          return new xt({
            add: e
          });
        },
        remove: function (e) {
          return new xt({
            remove: e
          });
        },
        default: er,
        RangeSet: gn,
        mergeRanges: _n,
        rangesOverlap: xn
      }), {
        default: er
      }), er;
    });
  })(dexie_min$1);
  return dexie_min$1.exports;
}

var dexie_minExports = requireDexie_min();
var _Dexie = /*@__PURE__*/getDefaultExportFromCjs(dexie_minExports);

// Making the module version consumable via require - to prohibit
// multiple occurrancies of the same module in the same app
// (dual package hazard, https://nodejs.org/api/packages.html#dual-package-hazard)
const DexieSymbol = Symbol.for("Dexie");
const Dexie = globalThis[DexieSymbol] || (globalThis[DexieSymbol] = _Dexie);
if (_Dexie.semVer !== Dexie.semVer) {
  throw new Error(`Two different versions of Dexie loaded in the same app: ${_Dexie.semVer} and ${Dexie.semVer}`);
}

// @ts-check

/**
 * @param {string} shortDID
 * @returns {import('./store-data').RepositoryData}
 */
function createRepoData(shortDID) {
  const repoData = {
    shortDID,
    profile: undefined,
    posts: new Map(),
    postLastAccesses: new Map(),
    lastAccesses: []
  };
  return repoData;
}

// @ts-check

const NOT_WORD_CHARACTERS_REGEX = /[^\w\p{L}\d]+/gu;

/**
 * @param {string} text
 */
function breakIntoWords(text) {
  const words = text.split(NOT_WORD_CHARACTERS_REGEX);
  const result = [];
  for (const word of words) {
    if (word.length >= 3 && word !== text) {
      if (result.indexOf(word) < 0) result.push(word);
    }
  }
  return result;
}

/**
 * @param {string | null | undefined} text
 * @param {string[] | undefined} result
 */
function detectWordStartsNormalized(text, result) {
  if (!text) return result;
  const words = text.split(NOT_WORD_CHARACTERS_REGEX);
  for (const word of words) {
    if (word.length >= 3) {
      // TODO: normalize - remove accent marks etc.
      const wordStart = stripToBasic(word.slice(0, 3).toLowerCase());
      if (!result) result = [wordStart];
      if (result.indexOf(wordStart) < 0) result.push(wordStart);
    }
  }
  return result;
}
const normMap = {
  'á': 'a',
  'é': 'e',
  'í': 'i',
  'ó': 'o',
  'ú': 'u',
  'ü': 'u',
  'ñ': 'n',
  'ç': 'c',
  'à': 'a',
  'è': 'e',
  'ì': 'i',
  'ị': 'i',
  'ò': 'o',
  'ù': 'u',
  'ṅ': 'n',
  'ọ': 'o',
  'ụ': 'u',
  'а': 'a',
  'б': 'b',
  'в': 'v',
  'г': 'g',
  'ґ': 'g',
  'д': 'd',
  'е': 'e',
  'є': 'ye',
  'ж': 'zh',
  'з': 'z',
  'и': 'y',
  'і': 'i',
  'ї': 'i',
  'й': 'j',
  'к': 'k',
  'л': 'l',
  'м': 'm',
  'н': 'n',
  'о': 'o',
  'п': 'p',
  'р': 'r',
  'с': 's',
  'т': 't',
  'у': 'u',
  'ф': 'f',
  'х': 'h',
  'ц': 'c',
  'ч': 'ch',
  'ш': 'sh',
  'щ': 'shch',
  'ь': 'y',
  'ю': 'yu',
  'я': 'ya'
};
function substitute(ch) {
  return normMap[ch] || ch;
}
function createSubstituteRegExp() {
  const keys = Object.keys(normMap);
  keys.sort((k1, k2) => k2.length - k1.length);
  return new RegExp(`[${keys.join('|')}]`, 'g');
}
var substituteRegExp;
function stripToBasic(text) {
  if (!substituteRegExp) substituteRegExp = createSubstituteRegExp();
  return text.replace(substituteRegExp, substitute);
}

/**
 * Fuse.js v6.6.2 - Lightweight fuzzy-search (http://fusejs.io)
 *
 * Copyright (c) 2022 Kiro Risk (http://kiro.me)
 * All Rights Reserved. Apache Software License 2.0
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 */

function isArray(value) {
  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);
}
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  let result = value + '';
  return result == '0' && 1 / value == -Infinity ? '-0' : result;
}
function toString(value) {
  return value == null ? '' : baseToString(value);
}
function isString(value) {
  return typeof value === 'string';
}
function isNumber(value) {
  return typeof value === 'number';
}

// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js
function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';
}
function isObject(value) {
  return typeof value === 'object';
}

// Checks if `value` is object-like.
function isObjectLike(value) {
  return isObject(value) && value !== null;
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
function isBlank(value) {
  return !value.trim().length;
}

// Gets the `toStringTag` of `value`.
// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js
function getTag(value) {
  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);
}
const INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
const LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = key => `Invalid value for key ${key}`;
const PATTERN_LENGTH_TOO_LARGE = max => `Pattern length exceeds max of ${max}.`;
const MISSING_KEY_PROPERTY = name => `Missing ${name} property in key`;
const INVALID_KEY_WEIGHT_VALUE = key => `Property 'weight' in key '${key}' must be a positive integer`;
const hasOwn = Object.prototype.hasOwnProperty;
class KeyStore {
  constructor(keys) {
    this._keys = [];
    this._keyMap = {};
    let totalWeight = 0;
    keys.forEach(key => {
      let obj = createKey(key);
      totalWeight += obj.weight;
      this._keys.push(obj);
      this._keyMap[obj.id] = obj;
      totalWeight += obj.weight;
    });

    // Normalize weights so that their sum is equal to 1
    this._keys.forEach(key => {
      key.weight /= totalWeight;
    });
  }
  get(keyId) {
    return this._keyMap[keyId];
  }
  keys() {
    return this._keys;
  }
  toJSON() {
    return JSON.stringify(this._keys);
  }
}
function createKey(key) {
  let path = null;
  let id = null;
  let src = null;
  let weight = 1;
  let getFn = null;
  if (isString(key) || isArray(key)) {
    src = key;
    path = createKeyPath(key);
    id = createKeyId(key);
  } else {
    if (!hasOwn.call(key, 'name')) {
      throw new Error(MISSING_KEY_PROPERTY('name'));
    }
    const name = key.name;
    src = name;
    if (hasOwn.call(key, 'weight')) {
      weight = key.weight;
      if (weight <= 0) {
        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));
      }
    }
    path = createKeyPath(name);
    id = createKeyId(name);
    getFn = key.getFn;
  }
  return {
    path,
    id,
    weight,
    src,
    getFn
  };
}
function createKeyPath(key) {
  return isArray(key) ? key : key.split('.');
}
function createKeyId(key) {
  return isArray(key) ? key.join('.') : key;
}
function get(obj, path) {
  let list = [];
  let arr = false;
  const deepGet = (obj, path, index) => {
    if (!isDefined(obj)) {
      return;
    }
    if (!path[index]) {
      // If there's no path left, we've arrived at the object we care about.
      list.push(obj);
    } else {
      let key = path[index];
      const value = obj[key];
      if (!isDefined(value)) {
        return;
      }

      // If we're at the last value in the path, and if it's a string/number/bool,
      // add it to the list
      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {
        list.push(toString(value));
      } else if (isArray(value)) {
        arr = true;
        // Search each item in the array.
        for (let i = 0, len = value.length; i < len; i += 1) {
          deepGet(value[i], path, index + 1);
        }
      } else if (path.length) {
        // An object. Recurse further.
        deepGet(value, path, index + 1);
      }
    }
  };

  // Backwards compatibility (since path used to be a string)
  deepGet(obj, isString(path) ? path.split('.') : path, 0);
  return arr ? list : list[0];
}
const MatchOptions = {
  // Whether the matches should be included in the result set. When `true`, each record in the result
  // set will include the indices of the matched characters.
  // These can consequently be used for highlighting purposes.
  includeMatches: false,
  // When `true`, the matching function will continue to the end of a search pattern even if
  // a perfect match has already been located in the string.
  findAllMatches: false,
  // Minimum number of characters that must be matched before a result is considered a match
  minMatchCharLength: 1
};
const BasicOptions = {
  // When `true`, the algorithm continues searching to the end of the input even if a perfect
  // match is found before the end of the same input.
  isCaseSensitive: false,
  // When true, the matching function will continue to the end of a search pattern even if
  includeScore: false,
  // List of properties that will be searched. This also supports nested properties.
  keys: [],
  // Whether to sort the result list, by score
  shouldSort: true,
  // Default sort function: sort by ascending score, ascending index
  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1
};
const FuzzyOptions = {
  // Approximately where in the text is the pattern expected to be found?
  location: 0,
  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match
  // (of both letters and location), a threshold of '1.0' would match anything.
  threshold: 0.6,
  // Determines how close the match must be to the fuzzy location (specified above).
  // An exact letter match which is 'distance' characters away from the fuzzy location
  // would score as a complete mismatch. A distance of '0' requires the match be at
  // the exact location specified, a threshold of '1000' would require a perfect match
  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.
  distance: 100
};
const AdvancedOptions = {
  // When `true`, it enables the use of unix-like search commands
  useExtendedSearch: false,
  // The get function to use when fetching an object's properties.
  // The default will search nested paths *ie foo.bar.baz*
  getFn: get,
  // When `true`, search will ignore `location` and `distance`, so it won't matter
  // where in the string the pattern appears.
  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score
  ignoreLocation: false,
  // When `true`, the calculation for the relevance score (used for sorting) will
  // ignore the field-length norm.
  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm
  ignoreFieldNorm: false,
  // The weight to determine how much field length norm effects scoring.
  fieldNormWeight: 1
};
var Config = {
  ...BasicOptions,
  ...MatchOptions,
  ...FuzzyOptions,
  ...AdvancedOptions
};
const SPACE = /[^ ]+/g;

// Field-length norm: the shorter the field, the higher the weight.
// Set to 3 decimals to reduce index size.
function norm(weight = 1, mantissa = 3) {
  const cache = new Map();
  const m = Math.pow(10, mantissa);
  return {
    get(value) {
      const numTokens = value.match(SPACE).length;
      if (cache.has(numTokens)) {
        return cache.get(numTokens);
      }

      // Default function is 1/sqrt(x), weight makes that variable
      const norm = 1 / Math.pow(numTokens, 0.5 * weight);

      // In place of `toFixed(mantissa)`, for faster computation
      const n = parseFloat(Math.round(norm * m) / m);
      cache.set(numTokens, n);
      return n;
    },
    clear() {
      cache.clear();
    }
  };
}
class FuseIndex {
  constructor({
    getFn = Config.getFn,
    fieldNormWeight = Config.fieldNormWeight
  } = {}) {
    this.norm = norm(fieldNormWeight, 3);
    this.getFn = getFn;
    this.isCreated = false;
    this.setIndexRecords();
  }
  setSources(docs = []) {
    this.docs = docs;
  }
  setIndexRecords(records = []) {
    this.records = records;
  }
  setKeys(keys = []) {
    this.keys = keys;
    this._keysMap = {};
    keys.forEach((key, idx) => {
      this._keysMap[key.id] = idx;
    });
  }
  create() {
    if (this.isCreated || !this.docs.length) {
      return;
    }
    this.isCreated = true;

    // List is Array<String>
    if (isString(this.docs[0])) {
      this.docs.forEach((doc, docIndex) => {
        this._addString(doc, docIndex);
      });
    } else {
      // List is Array<Object>
      this.docs.forEach((doc, docIndex) => {
        this._addObject(doc, docIndex);
      });
    }
    this.norm.clear();
  }
  // Adds a doc to the end of the index
  add(doc) {
    const idx = this.size();
    if (isString(doc)) {
      this._addString(doc, idx);
    } else {
      this._addObject(doc, idx);
    }
  }
  // Removes the doc at the specified index of the index
  removeAt(idx) {
    this.records.splice(idx, 1);

    // Change ref index of every subsquent doc
    for (let i = idx, len = this.size(); i < len; i += 1) {
      this.records[i].i -= 1;
    }
  }
  getValueForItemAtKeyId(item, keyId) {
    return item[this._keysMap[keyId]];
  }
  size() {
    return this.records.length;
  }
  _addString(doc, docIndex) {
    if (!isDefined(doc) || isBlank(doc)) {
      return;
    }
    let record = {
      v: doc,
      i: docIndex,
      n: this.norm.get(doc)
    };
    this.records.push(record);
  }
  _addObject(doc, docIndex) {
    let record = {
      i: docIndex,
      $: {}
    };

    // Iterate over every key (i.e, path), and fetch the value at that key
    this.keys.forEach((key, keyIndex) => {
      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);
      if (!isDefined(value)) {
        return;
      }
      if (isArray(value)) {
        let subRecords = [];
        const stack = [{
          nestedArrIndex: -1,
          value
        }];
        while (stack.length) {
          const {
            nestedArrIndex,
            value
          } = stack.pop();
          if (!isDefined(value)) {
            continue;
          }
          if (isString(value) && !isBlank(value)) {
            let subRecord = {
              v: value,
              i: nestedArrIndex,
              n: this.norm.get(value)
            };
            subRecords.push(subRecord);
          } else if (isArray(value)) {
            value.forEach((item, k) => {
              stack.push({
                nestedArrIndex: k,
                value: item
              });
            });
          } else ;
        }
        record.$[keyIndex] = subRecords;
      } else if (isString(value) && !isBlank(value)) {
        let subRecord = {
          v: value,
          n: this.norm.get(value)
        };
        record.$[keyIndex] = subRecord;
      }
    });
    this.records.push(record);
  }
  toJSON() {
    return {
      keys: this.keys,
      records: this.records
    };
  }
}
function createIndex(keys, docs, {
  getFn = Config.getFn,
  fieldNormWeight = Config.fieldNormWeight
} = {}) {
  const myIndex = new FuseIndex({
    getFn,
    fieldNormWeight
  });
  myIndex.setKeys(keys.map(createKey));
  myIndex.setSources(docs);
  myIndex.create();
  return myIndex;
}
function parseIndex(data, {
  getFn = Config.getFn,
  fieldNormWeight = Config.fieldNormWeight
} = {}) {
  const {
    keys,
    records
  } = data;
  const myIndex = new FuseIndex({
    getFn,
    fieldNormWeight
  });
  myIndex.setKeys(keys);
  myIndex.setIndexRecords(records);
  return myIndex;
}
function computeScore$1(pattern, {
  errors = 0,
  currentLocation = 0,
  expectedLocation = 0,
  distance = Config.distance,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  const accuracy = errors / pattern.length;
  if (ignoreLocation) {
    return accuracy;
  }
  const proximity = Math.abs(expectedLocation - currentLocation);
  if (!distance) {
    // Dodge divide by zero error.
    return proximity ? 1.0 : accuracy;
  }
  return accuracy + proximity / distance;
}
function convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {
  let indices = [];
  let start = -1;
  let end = -1;
  let i = 0;
  for (let len = matchmask.length; i < len; i += 1) {
    let match = matchmask[i];
    if (match && start === -1) {
      start = i;
    } else if (!match && start !== -1) {
      end = i - 1;
      if (end - start + 1 >= minMatchCharLength) {
        indices.push([start, end]);
      }
      start = -1;
    }
  }

  // (i-1 - start) + 1 => i - start
  if (matchmask[i - 1] && i - start >= minMatchCharLength) {
    indices.push([start, i - 1]);
  }
  return indices;
}

// Machine word size
const MAX_BITS = 32;
function search(text, pattern, patternAlphabet, {
  location = Config.location,
  distance = Config.distance,
  threshold = Config.threshold,
  findAllMatches = Config.findAllMatches,
  minMatchCharLength = Config.minMatchCharLength,
  includeMatches = Config.includeMatches,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  if (pattern.length > MAX_BITS) {
    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
  }
  const patternLen = pattern.length;
  // Set starting location at beginning text and initialize the alphabet.
  const textLen = text.length;
  // Handle the case when location > text.length
  const expectedLocation = Math.max(0, Math.min(location, textLen));
  // Highest score beyond which we give up.
  let currentThreshold = threshold;
  // Is there a nearby exact match? (speedup)
  let bestLocation = expectedLocation;

  // Performance: only computer matches when the minMatchCharLength > 1
  // OR if `includeMatches` is true.
  const computeMatches = minMatchCharLength > 1 || includeMatches;
  // A mask of the matches, used for building the indices
  const matchMask = computeMatches ? Array(textLen) : [];
  let index;

  // Get all exact matches, here for speed up
  while ((index = text.indexOf(pattern, bestLocation)) > -1) {
    let score = computeScore$1(pattern, {
      currentLocation: index,
      expectedLocation,
      distance,
      ignoreLocation
    });
    currentThreshold = Math.min(score, currentThreshold);
    bestLocation = index + patternLen;
    if (computeMatches) {
      let i = 0;
      while (i < patternLen) {
        matchMask[index + i] = 1;
        i += 1;
      }
    }
  }

  // Reset the best location
  bestLocation = -1;
  let lastBitArr = [];
  let finalScore = 1;
  let binMax = patternLen + textLen;
  const mask = 1 << patternLen - 1;
  for (let i = 0; i < patternLen; i += 1) {
    // Scan for the best match; each iteration allows for one more error.
    // Run a binary search to determine how far from the match location we can stray
    // at this error level.
    let binMin = 0;
    let binMid = binMax;
    while (binMin < binMid) {
      const score = computeScore$1(pattern, {
        errors: i,
        currentLocation: expectedLocation + binMid,
        expectedLocation,
        distance,
        ignoreLocation
      });
      if (score <= currentThreshold) {
        binMin = binMid;
      } else {
        binMax = binMid;
      }
      binMid = Math.floor((binMax - binMin) / 2 + binMin);
    }

    // Use the result from this iteration as the maximum for the next.
    binMax = binMid;
    let start = Math.max(1, expectedLocation - binMid + 1);
    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;

    // Initialize the bit array
    let bitArr = Array(finish + 2);
    bitArr[finish + 1] = (1 << i) - 1;
    for (let j = finish; j >= start; j -= 1) {
      let currentLocation = j - 1;
      let charMatch = patternAlphabet[text.charAt(currentLocation)];
      if (computeMatches) {
        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)
        matchMask[currentLocation] = +!!charMatch;
      }

      // First pass: exact match
      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;

      // Subsequent passes: fuzzy match
      if (i) {
        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
      }
      if (bitArr[j] & mask) {
        finalScore = computeScore$1(pattern, {
          errors: i,
          currentLocation,
          expectedLocation,
          distance,
          ignoreLocation
        });

        // This match will almost certainly be better than any existing match.
        // But check anyway.
        if (finalScore <= currentThreshold) {
          // Indeed it is
          currentThreshold = finalScore;
          bestLocation = currentLocation;

          // Already passed `loc`, downhill from here on in.
          if (bestLocation <= expectedLocation) {
            break;
          }

          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.
          start = Math.max(1, 2 * expectedLocation - bestLocation);
        }
      }
    }

    // No hope for a (better) match at greater error levels.
    const score = computeScore$1(pattern, {
      errors: i + 1,
      currentLocation: expectedLocation,
      expectedLocation,
      distance,
      ignoreLocation
    });
    if (score > currentThreshold) {
      break;
    }
    lastBitArr = bitArr;
  }
  const result = {
    isMatch: bestLocation >= 0,
    // Count exact matches (those with a score of 0) to be "almost" exact
    score: Math.max(0.001, finalScore)
  };
  if (computeMatches) {
    const indices = convertMaskToIndices(matchMask, minMatchCharLength);
    if (!indices.length) {
      result.isMatch = false;
    } else if (includeMatches) {
      result.indices = indices;
    }
  }
  return result;
}
function createPatternAlphabet(pattern) {
  let mask = {};
  for (let i = 0, len = pattern.length; i < len; i += 1) {
    const char = pattern.charAt(i);
    mask[char] = (mask[char] || 0) | 1 << len - i - 1;
  }
  return mask;
}
class BitapSearch {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    this.options = {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreLocation
    };
    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    this.chunks = [];
    if (!this.pattern.length) {
      return;
    }
    const addChunk = (pattern, startIndex) => {
      this.chunks.push({
        pattern,
        alphabet: createPatternAlphabet(pattern),
        startIndex
      });
    };
    const len = this.pattern.length;
    if (len > MAX_BITS) {
      let i = 0;
      const remainder = len % MAX_BITS;
      const end = len - remainder;
      while (i < end) {
        addChunk(this.pattern.substr(i, MAX_BITS), i);
        i += MAX_BITS;
      }
      if (remainder) {
        const startIndex = len - MAX_BITS;
        addChunk(this.pattern.substr(startIndex), startIndex);
      }
    } else {
      addChunk(this.pattern, 0);
    }
  }
  searchIn(text) {
    const {
      isCaseSensitive,
      includeMatches
    } = this.options;
    if (!isCaseSensitive) {
      text = text.toLowerCase();
    }

    // Exact match
    if (this.pattern === text) {
      let result = {
        isMatch: true,
        score: 0
      };
      if (includeMatches) {
        result.indices = [[0, text.length - 1]];
      }
      return result;
    }

    // Otherwise, use Bitap algorithm
    const {
      location,
      distance,
      threshold,
      findAllMatches,
      minMatchCharLength,
      ignoreLocation
    } = this.options;
    let allIndices = [];
    let totalScore = 0;
    let hasMatches = false;
    this.chunks.forEach(({
      pattern,
      alphabet,
      startIndex
    }) => {
      const {
        isMatch,
        score,
        indices
      } = search(text, pattern, alphabet, {
        location: location + startIndex,
        distance,
        threshold,
        findAllMatches,
        minMatchCharLength,
        includeMatches,
        ignoreLocation
      });
      if (isMatch) {
        hasMatches = true;
      }
      totalScore += score;
      if (isMatch && indices) {
        allIndices = [...allIndices, ...indices];
      }
    });
    let result = {
      isMatch: hasMatches,
      score: hasMatches ? totalScore / this.chunks.length : 1
    };
    if (hasMatches && includeMatches) {
      result.indices = allIndices;
    }
    return result;
  }
}
class BaseMatch {
  constructor(pattern) {
    this.pattern = pattern;
  }
  static isMultiMatch(pattern) {
    return getMatch(pattern, this.multiRegex);
  }
  static isSingleMatch(pattern) {
    return getMatch(pattern, this.singleRegex);
  }
  search(/*text*/) {}
}
function getMatch(pattern, exp) {
  const matches = pattern.match(exp);
  return matches ? matches[1] : null;
}

// Token: 'file

class ExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return 'exact';
  }
  static get multiRegex() {
    return /^="(.*)"$/;
  }
  static get singleRegex() {
    return /^=(.*)$/;
  }
  search(text) {
    const isMatch = text === this.pattern;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
}

// Token: !fire

class InverseExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return 'inverse-exact';
  }
  static get multiRegex() {
    return /^!"(.*)"$/;
  }
  static get singleRegex() {
    return /^!(.*)$/;
  }
  search(text) {
    const index = text.indexOf(this.pattern);
    const isMatch = index === -1;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
}

// Token: ^file

class PrefixExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return 'prefix-exact';
  }
  static get multiRegex() {
    return /^\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^\^(.*)$/;
  }
  search(text) {
    const isMatch = text.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
}

// Token: !^fire

class InversePrefixExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return 'inverse-prefix-exact';
  }
  static get multiRegex() {
    return /^!\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^!\^(.*)$/;
  }
  search(text) {
    const isMatch = !text.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
}

// Token: .file$

class SuffixExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return 'suffix-exact';
  }
  static get multiRegex() {
    return /^"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^(.*)\$$/;
  }
  search(text) {
    const isMatch = text.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [text.length - this.pattern.length, text.length - 1]
    };
  }
}

// Token: !.file$

class InverseSuffixExactMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return 'inverse-suffix-exact';
  }
  static get multiRegex() {
    return /^!"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^!(.*)\$$/;
  }
  search(text) {
    const isMatch = !text.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text.length - 1]
    };
  }
}
class FuzzyMatch extends BaseMatch {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    super(pattern);
    this._bitapSearch = new BitapSearch(pattern, {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreLocation
    });
  }
  static get type() {
    return 'fuzzy';
  }
  static get multiRegex() {
    return /^"(.*)"$/;
  }
  static get singleRegex() {
    return /^(.*)$/;
  }
  search(text) {
    return this._bitapSearch.searchIn(text);
  }
}

// Token: 'file

class IncludeMatch extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return 'include';
  }
  static get multiRegex() {
    return /^'"(.*)"$/;
  }
  static get singleRegex() {
    return /^'(.*)$/;
  }
  search(text) {
    let location = 0;
    let index;
    const indices = [];
    const patternLen = this.pattern.length;

    // Get all exact matches
    while ((index = text.indexOf(this.pattern, location)) > -1) {
      location = index + patternLen;
      indices.push([index, location - 1]);
    }
    const isMatch = !!indices.length;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices
    };
  }
}

// ❗Order is important. DO NOT CHANGE.
const searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];
const searchersLen = searchers.length;

// Regex to split by spaces, but keep anything in quotes together
const SPACE_RE = / +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;
const OR_TOKEN = '|';

// Return a 2D array representation of the query, for simpler parsing.
// Example:
// "^core go$ | rb$ | py$ xy$" => [["^core", "go$"], ["rb$"], ["py$", "xy$"]]
function parseQuery(pattern, options = {}) {
  return pattern.split(OR_TOKEN).map(item => {
    let query = item.trim().split(SPACE_RE).filter(item => item && !!item.trim());
    let results = [];
    for (let i = 0, len = query.length; i < len; i += 1) {
      const queryItem = query[i];

      // 1. Handle multiple query match (i.e, once that are quoted, like `"hello world"`)
      let found = false;
      let idx = -1;
      while (!found && ++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isMultiMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          found = true;
        }
      }
      if (found) {
        continue;
      }

      // 2. Handle single query matches (i.e, once that are *not* quoted)
      idx = -1;
      while (++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isSingleMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          break;
        }
      }
    }
    return results;
  });
}

// These extended matchers can return an array of matches, as opposed
// to a singl match
const MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);

/**
 * Command-like searching
 * ======================
 *
 * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,
 * search in a given text.
 *
 * Search syntax:
 *
 * | Token       | Match type                 | Description                            |
 * | ----------- | -------------------------- | -------------------------------------- |
 * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |
 * | `=scheme`   | exact-match                | Items that are `scheme`                |
 * | `'python`   | include-match              | Items that include `python`            |
 * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |
 * | `^java`     | prefix-exact-match         | Items that start with `java`           |
 * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |
 * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |
 * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |
 *
 * A single pipe character acts as an OR operator. For example, the following
 * query matches entries that start with `core` and end with either`go`, `rb`,
 * or`py`.
 *
 * ```
 * ^core go$ | rb$ | py$
 * ```
 */
class ExtendedSearch {
  constructor(pattern, {
    isCaseSensitive = Config.isCaseSensitive,
    includeMatches = Config.includeMatches,
    minMatchCharLength = Config.minMatchCharLength,
    ignoreLocation = Config.ignoreLocation,
    findAllMatches = Config.findAllMatches,
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance
  } = {}) {
    this.query = null;
    this.options = {
      isCaseSensitive,
      includeMatches,
      minMatchCharLength,
      findAllMatches,
      ignoreLocation,
      location,
      threshold,
      distance
    };
    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    this.query = parseQuery(this.pattern, this.options);
  }
  static condition(_, options) {
    return options.useExtendedSearch;
  }
  searchIn(text) {
    const query = this.query;
    if (!query) {
      return {
        isMatch: false,
        score: 1
      };
    }
    const {
      includeMatches,
      isCaseSensitive
    } = this.options;
    text = isCaseSensitive ? text : text.toLowerCase();
    let numMatches = 0;
    let allIndices = [];
    let totalScore = 0;

    // ORs
    for (let i = 0, qLen = query.length; i < qLen; i += 1) {
      const searchers = query[i];

      // Reset indices
      allIndices.length = 0;
      numMatches = 0;

      // ANDs
      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {
        const searcher = searchers[j];
        const {
          isMatch,
          indices,
          score
        } = searcher.search(text);
        if (isMatch) {
          numMatches += 1;
          totalScore += score;
          if (includeMatches) {
            const type = searcher.constructor.type;
            if (MultiMatchSet.has(type)) {
              allIndices = [...allIndices, ...indices];
            } else {
              allIndices.push(indices);
            }
          }
        } else {
          totalScore = 0;
          numMatches = 0;
          allIndices.length = 0;
          break;
        }
      }

      // OR condition, so if TRUE, return
      if (numMatches) {
        let result = {
          isMatch: true,
          score: totalScore / numMatches
        };
        if (includeMatches) {
          result.indices = allIndices;
        }
        return result;
      }
    }

    // Nothing was matched
    return {
      isMatch: false,
      score: 1
    };
  }
}
const registeredSearchers = [];
function register(...args) {
  registeredSearchers.push(...args);
}
function createSearcher(pattern, options) {
  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {
    let searcherClass = registeredSearchers[i];
    if (searcherClass.condition(pattern, options)) {
      return new searcherClass(pattern, options);
    }
  }
  return new BitapSearch(pattern, options);
}
const LogicalOperator = {
  AND: '$and',
  OR: '$or'
};
const KeyType = {
  PATH: '$path',
  PATTERN: '$val'
};
const isExpression = query => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
const isPath = query => !!query[KeyType.PATH];
const isLeaf = query => !isArray(query) && isObject(query) && !isExpression(query);
const convertToExplicit = query => ({
  [LogicalOperator.AND]: Object.keys(query).map(key => ({
    [key]: query[key]
  }))
});

// When `auto` is `true`, the parse function will infer and initialize and add
// the appropriate `Searcher` instance
function parse(query, options, {
  auto = true
} = {}) {
  const next = query => {
    let keys = Object.keys(query);
    const isQueryPath = isPath(query);
    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {
      return next(convertToExplicit(query));
    }
    if (isLeaf(query)) {
      const key = isQueryPath ? query[KeyType.PATH] : keys[0];
      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];
      if (!isString(pattern)) {
        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
      }
      const obj = {
        keyId: createKeyId(key),
        pattern
      };
      if (auto) {
        obj.searcher = createSearcher(pattern, options);
      }
      return obj;
    }
    let node = {
      children: [],
      operator: keys[0]
    };
    keys.forEach(key => {
      const value = query[key];
      if (isArray(value)) {
        value.forEach(item => {
          node.children.push(next(item));
        });
      }
    });
    return node;
  };
  if (!isExpression(query)) {
    query = convertToExplicit(query);
  }
  return next(query);
}

// Practical scoring function
function computeScore(results, {
  ignoreFieldNorm = Config.ignoreFieldNorm
}) {
  results.forEach(result => {
    let totalScore = 1;
    result.matches.forEach(({
      key,
      norm,
      score
    }) => {
      const weight = key ? key.weight : null;
      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));
    });
    result.score = totalScore;
  });
}
function transformMatches(result, data) {
  const matches = result.matches;
  data.matches = [];
  if (!isDefined(matches)) {
    return;
  }
  matches.forEach(match => {
    if (!isDefined(match.indices) || !match.indices.length) {
      return;
    }
    const {
      indices,
      value
    } = match;
    let obj = {
      indices,
      value
    };
    if (match.key) {
      obj.key = match.key.src;
    }
    if (match.idx > -1) {
      obj.refIndex = match.idx;
    }
    data.matches.push(obj);
  });
}
function transformScore(result, data) {
  data.score = result.score;
}
function format(results, docs, {
  includeMatches = Config.includeMatches,
  includeScore = Config.includeScore
} = {}) {
  const transformers = [];
  if (includeMatches) transformers.push(transformMatches);
  if (includeScore) transformers.push(transformScore);
  return results.map(result => {
    const {
      idx
    } = result;
    const data = {
      item: docs[idx],
      refIndex: idx
    };
    if (transformers.length) {
      transformers.forEach(transformer => {
        transformer(result, data);
      });
    }
    return data;
  });
}
class Fuse {
  constructor(docs, options = {}, index) {
    this.options = {
      ...Config,
      ...options
    };
    if (this.options.useExtendedSearch && false) ;
    this._keyStore = new KeyStore(this.options.keys);
    this.setCollection(docs, index);
  }
  setCollection(docs, index) {
    this._docs = docs;
    if (index && !(index instanceof FuseIndex)) {
      throw new Error(INCORRECT_INDEX_TYPE);
    }
    this._myIndex = index || createIndex(this.options.keys, this._docs, {
      getFn: this.options.getFn,
      fieldNormWeight: this.options.fieldNormWeight
    });
  }
  add(doc) {
    if (!isDefined(doc)) {
      return;
    }
    this._docs.push(doc);
    this._myIndex.add(doc);
  }
  remove(predicate = (/* doc, idx */) => false) {
    const results = [];
    for (let i = 0, len = this._docs.length; i < len; i += 1) {
      const doc = this._docs[i];
      if (predicate(doc, i)) {
        this.removeAt(i);
        i -= 1;
        len -= 1;
        results.push(doc);
      }
    }
    return results;
  }
  removeAt(idx) {
    this._docs.splice(idx, 1);
    this._myIndex.removeAt(idx);
  }
  getIndex() {
    return this._myIndex;
  }
  search(query, {
    limit = -1
  } = {}) {
    const {
      includeMatches,
      includeScore,
      shouldSort,
      sortFn,
      ignoreFieldNorm
    } = this.options;
    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
    computeScore(results, {
      ignoreFieldNorm
    });
    if (shouldSort) {
      results.sort(sortFn);
    }
    if (isNumber(limit) && limit > -1) {
      results = results.slice(0, limit);
    }
    return format(results, this._docs, {
      includeMatches,
      includeScore
    });
  }
  _searchStringList(query) {
    const searcher = createSearcher(query, this.options);
    const {
      records
    } = this._myIndex;
    const results = [];

    // Iterate over every string in the index
    records.forEach(({
      v: text,
      i: idx,
      n: norm
    }) => {
      if (!isDefined(text)) {
        return;
      }
      const {
        isMatch,
        score,
        indices
      } = searcher.searchIn(text);
      if (isMatch) {
        results.push({
          item: text,
          idx,
          matches: [{
            score,
            value: text,
            norm,
            indices
          }]
        });
      }
    });
    return results;
  }
  _searchLogical(query) {
    const expression = parse(query, this.options);
    const evaluate = (node, item, idx) => {
      if (!node.children) {
        const {
          keyId,
          searcher
        } = node;
        const matches = this._findMatches({
          key: this._keyStore.get(keyId),
          value: this._myIndex.getValueForItemAtKeyId(item, keyId),
          searcher
        });
        if (matches && matches.length) {
          return [{
            idx,
            item,
            matches
          }];
        }
        return [];
      }
      const res = [];
      for (let i = 0, len = node.children.length; i < len; i += 1) {
        const child = node.children[i];
        const result = evaluate(child, item, idx);
        if (result.length) {
          res.push(...result);
        } else if (node.operator === LogicalOperator.AND) {
          return [];
        }
      }
      return res;
    };
    const records = this._myIndex.records;
    const resultMap = {};
    const results = [];
    records.forEach(({
      $: item,
      i: idx
    }) => {
      if (isDefined(item)) {
        let expResults = evaluate(expression, item, idx);
        if (expResults.length) {
          // Dedupe when adding
          if (!resultMap[idx]) {
            resultMap[idx] = {
              idx,
              item,
              matches: []
            };
            results.push(resultMap[idx]);
          }
          expResults.forEach(({
            matches
          }) => {
            resultMap[idx].matches.push(...matches);
          });
        }
      }
    });
    return results;
  }
  _searchObjectList(query) {
    const searcher = createSearcher(query, this.options);
    const {
      keys,
      records
    } = this._myIndex;
    const results = [];

    // List is Array<Object>
    records.forEach(({
      $: item,
      i: idx
    }) => {
      if (!isDefined(item)) {
        return;
      }
      let matches = [];

      // Iterate over every key (i.e, path), and fetch the value at that key
      keys.forEach((key, keyIndex) => {
        matches.push(...this._findMatches({
          key,
          value: item[keyIndex],
          searcher
        }));
      });
      if (matches.length) {
        results.push({
          idx,
          item,
          matches
        });
      }
    });
    return results;
  }
  _findMatches({
    key,
    value,
    searcher
  }) {
    if (!isDefined(value)) {
      return [];
    }
    let matches = [];
    if (isArray(value)) {
      value.forEach(({
        v: text,
        i: idx,
        n: norm
      }) => {
        if (!isDefined(text)) {
          return;
        }
        const {
          isMatch,
          score,
          indices
        } = searcher.searchIn(text);
        if (isMatch) {
          matches.push({
            score,
            key,
            value: text,
            idx,
            norm,
            indices
          });
        }
      });
    } else {
      const {
        v: text,
        n: norm
      } = value;
      const {
        isMatch,
        score,
        indices
      } = searcher.searchIn(text);
      if (isMatch) {
        matches.push({
          score,
          key,
          value: text,
          norm,
          indices
        });
      }
    }
    return matches;
  }
}
Fuse.version = '6.6.2';
Fuse.createIndex = createIndex;
Fuse.parseIndex = parseIndex;
Fuse.config = Config;
{
  Fuse.parseQuery = parse;
}
{
  register(ExtendedSearch);
}

// @ts-check

/**
 * @param {string} shortDID
 * @param {string} uri
 */
function createSpeculativePost(shortDID, uri) {
  /** @type {import('../..').CompactPost} */
  const speculativePost = {
    uri,
    shortDID,
    text: undefined,
    facets: undefined,
    embeds: undefined,
    threadStart: undefined,
    replyTo: undefined,
    words: undefined,
    likedBy: undefined,
    repostedBy: undefined,
    quoting: undefined,
    placeholder: true,
    asOf: undefined
  };
  return speculativePost;
}

// @ts-check

const DEFAULT_DB_NAME = 'coldsky-db-11may2024';
const DEFAULT_DB_DEBOUNCE_TIME = 2000;
const UPDATE_DB_MAX_TIME = 10000;

/**
 * @param {string} [dbName]
 */
function defineCacheIndexedDBStore(dbName) {
  const db =
  /**
   * @type {Dexie & {
   *  posts: import('dexie').Table<import('.').CompactPost, string>,
   *  profiles: import('dexie').Table<import('.').CompactProfile, string>,
   *  repoSync: import('dexie').Table<{shortDID: string, lastSyncRev: string }>
   * }}
   */
  new Dexie(dbName || DEFAULT_DB_NAME);

  // this is to clean up old posts, with incorrect URI
  db.version(3).stores({
    posts: 'uri, shortDID, replyTo, threadStart, *quoting, *words',
    profiles: 'shortDID, *handle, *words'
  });

  // incorrect URIs: at:// prefix missing
  db.version(4).stores({
    posts: null,
    profiles: 'shortDID, *handle, *words'
  });
  db.version(5).stores({
    posts: 'uri, shortDID, replyTo, threadStart, *quoting, *words',
    profiles: 'shortDID, *handle, *words'
  });

  // repoSync introduced
  db.version(6).stores({
    posts: 'uri, shortDID, replyTo, threadStart, *quoting, *words',
    profiles: 'shortDID, *handle, *words',
    repoSync: 'shortDID' // 
  });

  // incorrect URI: missing a slash in the middle
  db.version(7).stores({
    posts: null,
    profiles: 'shortDID, *handle, *words'
  });
  db.version(8).stores({
    posts: 'uri, shortDID, replyTo, threadStart, *quoting, *words',
    profiles: 'shortDID, *handle, *words',
    repoSync: 'shortDID'
  });
  db.version(9).stores({
    posts: 'uri, shortDID, replyTo, threadStart, *quoting, *words, *likedBy, repostedBy*',
    profiles: 'shortDID, *handle, *words',
    repoSync: 'shortDID'
  });
  //   .upgrade(async tr => {
  //   await tr.table('repoSync').toCollection().modify(rsync => {
  //     // likes were not being captured, so full re-download is required now
  //     delete rsync.lastSyncRev;
  //   });
  //   // await tr.table('posts').toCollection().modify(post => {
  //   //   if (post.likeCount)
  //   //     post.likedBy = Array(post.likeCount).fill('?');
  //   //   if (post.repostCount)
  //   //     post.repostedBy = Array(post.repostCount).fill('?');

  //   //   delete post.likeCount;
  //   //   delete post.repostCount;
  //   // });
  // });

  db.version(10);
  db.version(11);
  const memStore = defineStore({
    post: handlePostUpdate,
    profile: handleProfileUpdate
  });

  /**
   * @type {Map<string, import('.').CompactPost>}
   */
  let outstandingPostUpdatesByURI = new Map();
  /** @type {typeof outstandingPostUpdatesByURI} */
  let outstandingPostUpdatesInProgressByURI = new Map();

  /**
   * @type {Map<string, import('.').CompactProfile>}
   */
  let outstandingProfileUpdatesByShortDID = new Map();
  /** @type {typeof outstandingProfileUpdatesByShortDID} */
  let outstandingProfileUpdatesInProgressByShortDID = new Map();
  var queueTimeoutDebounce;
  var queueTimeoutMax;
  return {
    captureRecord: memStore.captureRecord,
    captureThreadView: memStore.captureThreadView,
    capturePostView: memStore.capturePostView,
    captureProfileView: memStore.captureProfileView,
    deleteRecord,
    capturePlcDirectoryEntries: memStore.capturePLCDirectoryEntries,
    getPostOnly,
    getPostThread,
    getProfile,
    searchPosts,
    searchProfiles,
    getLastRepoSyncRev,
    syncRepoWithData
  };
  function deleteRecord(rec) {
    // TODO: reconcile memStore and IndexedDB
  }

  /**
   * @param {import('.').CompactPost} post
   */
  function handlePostUpdate(post) {
    outstandingPostUpdatesByURI.set(post.uri, post);
    queueUpdate();
  }

  /**
   * @param {import('.').CompactProfile} profile
   */
  function handleProfileUpdate(profile) {
    outstandingProfileUpdatesByShortDID.set(profile.shortDID, profile);
    queueUpdate();
  }
  function queueUpdate() {
    if (outstandingPostUpdatesInProgressByURI.size || outstandingProfileUpdatesInProgressByShortDID.size) return;
    if (!queueTimeoutMax) queueTimeoutMax = setTimeout(performUpdate, UPDATE_DB_MAX_TIME);
    clearTimeout(queueTimeoutDebounce);
    queueTimeoutDebounce = setTimeout(performUpdate, DEFAULT_DB_DEBOUNCE_TIME);
  }
  var currentBulkUpdate;
  async function performUpdate() {
    if (outstandingPostUpdatesInProgressByURI.size || outstandingProfileUpdatesInProgressByShortDID.size) return;
    clearTimeout(queueTimeoutMax);
    clearTimeout(queueTimeoutDebounce);
    queueTimeoutMax = queueTimeoutDebounce = undefined;
    let BULK_UPDATE_BATCH_COUNT = 1023;
    currentBulkUpdate = (async () => {
      while (outstandingPostUpdatesByURI.size || outstandingProfileUpdatesByShortDID.size) {
        const postUpdates = [...outstandingPostUpdatesByURI.values()];
        const profileUpdates = [...outstandingProfileUpdatesByShortDID.values()];
        {
          // push post updates to in-progress map
          const tmp = outstandingPostUpdatesByURI;
          outstandingPostUpdatesByURI = outstandingPostUpdatesInProgressByURI;
          outstandingPostUpdatesInProgressByURI = tmp;
        }
        {
          // push profile updates to in-progress map
          const tmp = outstandingProfileUpdatesByShortDID;
          outstandingProfileUpdatesByShortDID = outstandingProfileUpdatesInProgressByShortDID;
          outstandingProfileUpdatesInProgressByShortDID = tmp;
        }
        for (let i = 0; i < Math.max(postUpdates.length, profileUpdates.length); i += BULK_UPDATE_BATCH_COUNT) {
          if (i) {
            await new Promise(resolve => setTimeout(resolve, 10));
          }
          const postBatch = postUpdates.slice(i, i + BULK_UPDATE_BATCH_COUNT);
          const profileBatch = profileUpdates.slice(i, i + BULK_UPDATE_BATCH_COUNT);
          const updateReport = {};
          updateReport.postsTotal = postUpdates.length;
          updateReport.profilesTotal = profileUpdates.length;
          let postUpdatePromise;
          if (postBatch.length) {
            postUpdatePromise = db.posts.bulkPut(updateReport.posts = postBatch);
          }
          let profileUpdatePromise;
          if (profileBatch.length) {
            profileUpdatePromise = db.profiles.bulkPut(updateReport.profiles = profileBatch);
          }
          const startBulkUpdate = Date.now();
          await postUpdatePromise;
          await profileUpdatePromise;
          console.log('dumping to indexedDB: ', updateReport, ' in ' + (Date.now() - startBulkUpdate).toLocaleString() + 'ms');
          for (const post of postBatch) {
            outstandingPostUpdatesInProgressByURI.delete(post.uri);
          }
          for (const profile of profileBatch) {
            outstandingProfileUpdatesInProgressByShortDID.delete(profile.shortDID);
          }
        }
      }
      currentBulkUpdate = undefined;
    })();
    await currentBulkUpdate;
  }

  /**
   * @param {string | undefined} uri
   */
  function getPostOnly(uri) {
    if (!uri) return;
    const parsedURL = breakFeedURIPostOnly(uri) || breakPostURL(uri);
    if (!parsedURL) return;
    let repo = memStore.repos.get(parsedURL.repo);
    if (repo) {
      const existingPost = repo.posts.get(uri);
      if (existingPost) return existingPost;
    }
    return db.posts.get(uri).then(post => {
      if (!post) return;

      // cache in memory now
      if (!repo) {
        repo = createRepoData(parsedURL.repo);
        memStore.repos.set(parsedURL.repo, repo);
      }
      repo.posts.set(post.uri, post);
      return post;
    });
  }

  /**
   * @param {string | undefined} url
   * @returns {Promise<import('.').CompactThreadPostSet | undefined> | undefined}
   */
  function getPostThread(url) {
    if (!url) return;
    return getPostThreadAsync(url);
  }

  /**
   * @param {string} uri
   * @returns {Promise<import('.').CompactThreadPostSet | undefined>}
   */
  async function getPostThreadAsync(uri) {
    const currentPostURIParsed = breakFeedURIPostOnly(uri);
    if (!currentPostURIParsed) return;
    const {
      shortDID,
      postID: currentPostID
    } = currentPostURIParsed;
    let currentPost = outstandingPostUpdatesByURI.get(uri) || outstandingPostUpdatesInProgressByURI.get(uri);
    if (!currentPost) currentPost = memStore.repos.get(shortDID)?.posts.get(currentPostID);
    if (!currentPost) await db.posts.get(uri);
    if (!currentPost) return;
    let threadStartURI = currentPost.threadStart || uri;
    const threadStartPostPromise = db.posts.get(threadStartURI);
    const dbPosts = await db.posts.where('threadStart').equals(threadStartURI).toArray();
    if (currentPost && !dbPosts.find(post => post.uri === currentPost.uri)) dbPosts.push(currentPost);
    const threadStartPost = await threadStartPostPromise;
    if (threadStartPost && !dbPosts.find(post => post.uri === threadStartPost.uri)) dbPosts.push(threadStartPost);
    const uncachedPostsForThread = [...outstandingPostUpdatesByURI.values(), ...outstandingPostUpdatesInProgressByURI.values()].filter(p => p.uri === currentPost?.uri || threadStartURI && p.threadStart === threadStartURI || p.uri === threadStartURI);
    const postsByUri = new Map(dbPosts.concat(uncachedPostsForThread).map(p => [p.uri, p]));
    const all = [...postsByUri.values()];
    const current = postsByUri.get(uri) || createSpeculativePost(shortDID, uri);
    let root = current?.threadStart ? postsByUri.get(current.threadStart) : undefined;
    if (!root) {
      const rootShortDID = breakFeedURIPostOnly(current.threadStart)?.shortDID;
      if (rootShortDID && current.threadStart) {
        const dbRoot = await db.posts.get(current.threadStart);
        if (dbRoot) root = dbRoot;else root = createSpeculativePost(rootShortDID, current.threadStart);
      }
      if (!root) root = current;
    }
    const knownUris = new Set(all.map(p => p.uri));
    const completeMissing = all.slice();
    while (true) {
      const p = completeMissing.pop();
      if (!p) break;
      if (p.replyTo && !knownUris.has(p.replyTo)) {
        const replyTo = await db.posts.get(p.replyTo);
        if (replyTo) {
          all.push(replyTo);
          knownUris.add(replyTo.uri);
          completeMissing.push(p);
        } else {
          const replyToShortDID = breakFeedURIPostOnly(p.replyTo)?.shortDID;
          if (replyToShortDID) {
            const speculative = createSpeculativePost(replyToShortDID, p.replyTo);
            all.push(speculative);
            knownUris.add(speculative.uri);
          }
        }
      }
    }
    return {
      all,
      root,
      current
    };
  }

  /**
   * @param {string | null | undefined} did
   * @param {string | null | undefined} text
   * @param {boolean} [likesAndReposts]
   * @param {{ add(uri: string): void }} [missingLikesAndReposts]
   * @returns {Promise<import('.').MatchCompactPost[]>}
   */
  async function searchPosts(did, text, likesAndReposts, missingLikesAndReposts) {
    const wordStarts = detectWordStartsNormalized(text, undefined);
    if (!wordStarts?.length && !did) return [];
    const words = breakIntoWords(text || '');
    words.push(text || '');
    const shortDID = shortenDID(did);
    const wordMatcher = !wordStarts ? () => true : /** @param {string} w */w => wordStarts.includes(w);

    /** @type {Map<string, import('.').CompactPost>} */
    const map = new Map();

    // search by both shortDID and words
    const dbPostsQuery = !shortDID ? db.posts.where('words').anyOf(wordStarts || []) : !wordStarts?.length ? db.posts.where('shortDID').equals(shortDID) : db.posts.where('shortDID').equals(shortDID).and(post => !!post.words && post.words.some(wordMatcher));
    const likesQuery = !likesAndReposts || !shortDID || !wordStarts?.length ? undefined : db.posts.where('likedBy').anyOf([shortDID]).and(post => !!post.words && post.words.some(wordMatcher) || !!missingLikesAndReposts && !!post.placeholder);
    const repostsQuery = !likesAndReposts || !shortDID || !wordStarts?.length ? undefined : db.posts.where('repostedBy').anyOf([shortDID]).and(post => !!post.words && post.words.some(wordMatcher) || !!missingLikesAndReposts && !!post.placeholder);
    const dbPostsPromise = dbPostsQuery.toArray();
    const likesPromise = likesQuery?.toArray();
    const repostsPromise = repostsQuery?.toArray();
    const dbPosts = await dbPostsPromise;
    const likes = await likesPromise;
    const reposts = await repostsPromise;
    const allPostsForShortDIDPromise = !shortDID ? undefined : db.posts.where('shortDID').equals(shortDID).count();
    for (const post of dbPosts) {
      map.set(post.uri, post);
    }
    if (likes) {
      for (const post of likes) {
        if (post.placeholder) missingLikesAndReposts?.add(post.uri);else map.set(post.uri, post);
      }
    }
    if (reposts) {
      for (const post of reposts) {
        if (post.placeholder) missingLikesAndReposts?.add(post.uri);else map.set(post.uri, post);
      }
    }
    for (const uncachedPost of outstandingPostUpdatesInProgressByURI.values()) {
      if (shortDID && uncachedPost.shortDID !== shortDID) continue;
      if (uncachedPost.words?.some(wordMatcher)) {
        map.set(uncachedPost.uri, uncachedPost);
      }
    }
    for (const uncachedPost of outstandingPostUpdatesByURI.values()) {
      if (shortDID && uncachedPost.shortDID !== shortDID) continue;
      if (uncachedPost.words?.some(wordMatcher)) {
        map.set(uncachedPost.uri, uncachedPost);
      }
    }
    const allPosts = [...map.values()];
    if (!text) {
      allPosts?.sort((a1, a2) => (a2.asOf || 0) - (a1.asOf || 0));
      return allPosts;
    }
    const FUSE_THRESHOLD = 0.6;
    const fuse = new Fuse(allPosts, {
      includeScore: true,
      keys: ['text'],
      includeMatches: true,
      shouldSort: true,
      findAllMatches: true,
      ignoreLocation: true,
      threshold: FUSE_THRESHOLD
    });
    const matches = fuse.search(text).filter(m => (m.score || 0) <= FUSE_THRESHOLD);

    /**
     * @type {import('.').MatchCompactPost[] & { processedAllCount?: number }}
     */
    const compact = matches.map(fuseMatch => {
      const joined = {
        ...fuseMatch,
        ...fuseMatch.item,
        item: undefined,
        searchWords: words
      };
      return joined;
    });
    if (allPostsForShortDIDPromise) compact.processedAllCount = await allPostsForShortDIDPromise;
    return compact;
  }

  /**
   * @param {string | undefined} did
   */
  function getProfile(did) {
    if (likelyDID(did)) {
      const shortDID = shortenDID(did);
      if (!shortDID) return;
      let repo = memStore.repos.get(shortDID);
      if (repo && repo.profile) return repo.profile;
      return db.profiles.get(shortDID).then(profile => {
        if (!profile) return;

        // cache in memory now
        if (!repo) {
          repo = createRepoData(shortDID);
          memStore.repos.set(shortDID, repo);
        }
        repo.profile = profile;
        return profile;
      });
    } else {
      const shortHandle = shortenHandle(did);
      if (!shortHandle) return;
      const matchingProfiles = [];
      for (const repo of memStore.repos.values()) {
        if (repo.profile?.handle === shortHandle) matchingProfiles.push(repo.profile);
      }
      if (matchingProfiles.length > 1) return undefined; // can it happen???
      if (matchingProfiles.length === 1) return matchingProfiles[0];
      return db.profiles.where('handle').equals(shortHandle).toArray().then(profiles => {
        if (profiles.length === 1) return profiles[0];
      });
    }
  }

  /**
   * @param {string} text
   * @param {{ max?: number }} [options]
   * @returns {Promise<import('..').MatchCompactProfile[] | undefined>}
   */
  async function searchProfiles(text, options) {
    if (!text) return;
    const wordStarts = detectWordStartsNormalized(text, undefined);
    if (!wordStarts?.length) return;
    const words = breakIntoWords(text);
    words.push(text);

    /** @type {Map<string, import('.').CompactProfile>} */
    const map = new Map();
    const dbProfiles = await db.profiles.where('words').anyOf(wordStarts).toArray();
    for (const prof of dbProfiles) {
      map.set(prof.shortDID, prof);
    }
    for (const repo of memStore.repos.values()) {
      if (repo.profile) map.set(repo.profile.shortDID, repo.profile);
    }
    const allProfiles = [...map.values()];
    const fuse = new Fuse(allProfiles, {
      includeScore: true,
      keys: ['handle', 'displayName', 'description'],
      includeMatches: true,
      shouldSort: true,
      findAllMatches: true
    });
    const matches = fuse.search(text, options?.max ? {
      limit: options?.max
    } : undefined);
    const profileWithSearchData = matches.map(fuseMatch => {
      return {
        ...fuseMatch,
        ...fuseMatch.item,
        searchWords: words,
        item: undefined
      };
    });
    return profileWithSearchData;
  }

  /**
   * @param {string} shortDID
   */
  async function getLastRepoSyncRev(shortDID) {
    return db.repoSync.get(shortDID).then(sync => sync?.lastSyncRev);
  }

  /**
   * @param {import('../firehose').FirehoseRecord[]} records
   * @param {number} now
   */
  async function syncRepoWithData(records, now) {
    let lastSync = '';
    for (const record of records) {
      if (record.$type === 'app.bsky.feed.like' || record.$type === 'app.bsky.feed.post') {
        const parsedURI = breakFeedURI(record.uri);
        if (parsedURI?.postID && parsedURI.postID > lastSync) {
          // only consider POSTs, not other feed URIs
          lastSync = parsedURI.postID;
        }
      }
    }
    const compact = [];
    for (const record of records) {
      const co = memStore.captureRecord(record, now);
      if (co) {
        compact.push(co);
      }
    }
    await currentBulkUpdate;
    await performUpdate();
    if (lastSync) {
      db.repoSync.put({
        shortDID: shortenDID(records[0].repo),
        lastSyncRev: lastSync
      });
    }
    return compact;
  }
}

// @ts-check


/** @typedef {import('..').CompactPost} CompactPost */
/** @typedef {import('..').CompactProfile} CompactProfile */

/**
 * @param {ReturnType<typeof import('../define-cache-indexedDB-store').defineCacheIndexedDBStore>} dbStore
 * @returns {AsyncGenerator<import('..').CompactFirehoseBlock>}
 */
async function* firehose(dbStore) {
  for await (const block of firehose$1()) {
    /** @type {Map<string, CompactPost>} */
    const updatedPosts = new Map();
    /** @type {Map<string, CompactProfile>} */
    const updatedProfiles = new Map();

    /** @type {import('../../firehose').FirehoseRecord[]} */
    const messages = [];

    /** @type {import('../../firehose').FirehoseRecord[] | undefined} */
    let deletes;

    /** @type {import('../../firehose').FirehoseRecord[] | undefined} */
    let unexpecteds;
    if (block.messages) {
      for (const rec of block.messages) {
        messages.push(rec);
        const updated = dbStore.captureRecord(rec, block.receiveTimestamp);
        if (updated) {
          if ('uri' in updated) updatedPosts.set(updated.uri, updated);else updatedProfiles.set(updated.shortDID, updated);
        }
      }
    }
    if (block.deletes?.length) {
      if (!deletes) deletes = [];
      for (const rec of block.deletes) {
        dbStore.deleteRecord(rec);
        deletes.push(rec);
      }
    }
    if (block.unexpected?.length) {
      if (!unexpecteds) unexpecteds = block.unexpected;else if (block.unexpected.length === 1) unexpecteds.push(block.unexpected[0]);else unexpecteds = unexpecteds.concat(block.unexpected);
    }
    yield {
      messages,
      posts: [...updatedPosts.values()],
      profiles: [...updatedProfiles.values()],
      deletes,
      unexpecteds
    };
  }
}

// @ts-check


/**
 * @typedef {{
 *  uri: string | null | undefined,
 *  agent_getRepoRecord_throttled: (repo, rkey, collection) => ReturnType<import('@atproto/api').BskyAgent['com']['atproto']['repo']['getRecord']>,
 *  dbStore: ReturnType<typeof import('../define-cache-indexedDB-store').defineCacheIndexedDBStore>
 * }} Args
 */

/**
 * @param {Args} args
 */
function getPostOnly(args) {
  if (!args.uri) return;
  const dbPost = args.dbStore.getPostOnly(args.uri);
  if (dbPost && !isPromise(dbPost) && !dbPost.placeholder) return dbPost;
  if (!dbPost || !isPromise(dbPost)) return getPostOnlyAsync(args);else return dbPost.then(post => post && !post.placeholder ? post : getPostOnlyAsync(args));
}

/**
 * @param {Args} _
 */
async function getPostOnlyAsync({
  uri,
  dbStore,
  agent_getRepoRecord_throttled
}) {
  if (!uri) return;
  const parsedURL = breakFeedURIPostOnly(uri);
  if (!parsedURL) throw new Error('Invalid post URI ' + JSON.stringify(uri));
  const postRecord =
  /**
  * @type {import('../../firehose').FirehoseRecord$Typed<'app.bsky.feed.post'>} */
  (await agent_getRepoRecord_throttled(unwrapShortDID(parsedURL.shortDID), parsedURL.postID, 'app.bsky.feed.post'))?.data?.value;
  postRecord.$type = 'app.bsky.feed.post';
  postRecord.repo = parsedURL.shortDID;
  postRecord.uri = uri;
  postRecord.action = 'create';
  const post = dbStore.captureRecord(postRecord, Date.now());
  if (post && 'uri' in post) return post;
}

// @ts-check


/**
 * @typedef {{
 *  uri: string | null | undefined,
 *  agent_getPostThread_throttled: (uri) => ReturnType<import('@atproto/api').BskyAgent['getPostThread']>,
 *  dbStore: ReturnType<typeof import('../define-cache-indexedDB-store').defineCacheIndexedDBStore>
 * }} Args
 */

/**
 * @param {Args} _
 * @returns {AsyncGenerator<import('..').CompactThreadPostSet | undefined>}
 */
async function* getPostThreadIncrementally({
  uri,
  dbStore,
  agent_getPostThread_throttled
}) {
  if (!uri) return;
  const parsedURL = breakFeedURIPostOnly(uri);
  if (!parsedURL) return;
  const remotePromise = agent_getPostThread_throttled(uri);
  const local = await dbStore.getPostThread(uri);
  if (local && !local.root.placeholder) yield local;
  const remoteThreadRaw = (await remotePromise)?.data?.thread;
  if (!('post' in remoteThreadRaw)) return;
  const remoteThreadRawPost = /** @type {import('../../../app-shared/firehose-threads').ThreadViewPost} */
  remoteThreadRaw;
  const onePart = dbStore.captureThreadView(/** @type {import('@atproto/api').AppBskyFeedDefs.ThreadViewPost} */remoteThreadRaw, Date.now());
  let allPlaceholders = [];
  const ignoreBrokenPlaceholderUris = new Set();
  const orphanRepliesPromise = scourAndInjectOrphanReplies();
  while (true) {
    const refreshedThread = await dbStore.getPostThread(uri);
    if (refreshedThread?.all?.length) {
      for (const post of refreshedThread.all) {
        if (post.placeholder && !ignoreBrokenPlaceholderUris.has(post.uri)) allPlaceholders.push(post.uri);
      }
    }
    yield refreshedThread;
    await orphanRepliesPromise;
    if (!allPlaceholders.length) break;
    {
      if (refreshedThread) allPlaceholders.push(refreshedThread.root.uri);else if (onePart) allPlaceholders.push(onePart.threadStart || onePart.uri);
    }
    const orphanRemotePromises = allPlaceholders.map(placeholderPostURI => (/** @type {const} */
    [placeholderPostURI, agent_getPostThread_throttled(placeholderPostURI)]));
    allPlaceholders = [];
    for (const [placeholderPost, orphanRemotePromise] of orphanRemotePromises) {
      try {
        const orphanRemoteRaw = (await orphanRemotePromise)?.data?.thread;
        if ('post' in orphanRemoteRaw) {
          dbStore.captureThreadView(/** @type {import('@atproto/api').AppBskyFeedDefs.ThreadViewPost} */orphanRemoteRaw, Date.now());
        }
      } catch (error) {
        console.warn('Orphan post may be missing ', error);
        ignoreBrokenPlaceholderUris.add(placeholderPost);
      }
    }
  }
  async function scourAndInjectOrphanReplies() {
    const orphanReplies = scourOrphanReplies(remoteThreadRawPost);
    const onlyUnknownPosts = (await Promise.all([...orphanReplies].map(async uri => {
      const dbPost = await dbStore.getPostOnly(uri);
      return dbPost ? '' : uri;
    }))).filter(Boolean);
    allPlaceholders = onlyUnknownPosts;
  }
}

/**
 * @param {import('../../../app-shared/firehose-threads').ThreadViewPost} remoteThreadRawPost
 * @param {Set<string>} [set]
 */
function scourOrphanReplies(remoteThreadRawPost, set) {
  if (!set) set = new Set();
  if (!remoteThreadRawPost.replies?.length && remoteThreadRawPost.post.replyCount) {
    console.log('orphan replies likely: ' + remoteThreadRawPost.post.replyCount + ' replies but no replies ', remoteThreadRawPost);
    set.add(remoteThreadRawPost.post.uri);
  }
  if (remoteThreadRawPost.replies?.length) {
    for (const reply of remoteThreadRawPost.replies) {
      if (!reply.post) {
        if (reply.uri && reply.blocked) {
          console.log('orphan replies likely: blocked reply but no post ', reply);
          set.add(/** @type {string} */reply.uri);
        }
        continue;
      }
      scourOrphanReplies(/** @type {import('../../../app-shared/firehose-threads').ThreadViewPost} */reply, set);
    }
  }
  return set;
}

// @ts-check


/**
 * @typedef {{
 *  didOrHandle: string | null | undefined,
 *  agent_getProfile_throttled: (did) => ReturnType<import('@atproto/api').BskyAgent['getProfile']>,
 *  agent_resolveHandle_throttled: (handle) => ReturnType<import('@atproto/api').BskyAgent['resolveHandle']>,
 *  dbStore: ReturnType<typeof import('../define-cache-indexedDB-store').defineCacheIndexedDBStore>
 * }} Args
 */

/**
 * @param {Args} _
 */
async function* getProfileIncrementally({
  didOrHandle,
  dbStore,
  agent_getProfile_throttled,
  agent_resolveHandle_throttled
}) {
  if (!didOrHandle) return;
  let profileRemotePromise;
  if (likelyDID(didOrHandle)) {
    profileRemotePromise = agent_getProfile_throttled(unwrapShortDID(didOrHandle));
  } else {
    const resolveHandlePromise = agent_resolveHandle_throttled(unwrapShortHandle(didOrHandle));
    if (isPromise(resolveHandlePromise)) {
      profileRemotePromise = (async () => {
        const rec = await resolveHandlePromise;
        const shortDID = shortenDID(rec.data.did);
        return agent_getProfile_throttled(unwrapShortDID(shortDID));
      })();
    } else {
      const rec = resolveHandlePromise;
      const shortDID = shortenDID(/** @type {*} */rec.data.did);
      profileRemotePromise = agent_getProfile_throttled(unwrapShortDID(shortDID));
    }
  }
  const profileLocal = await dbStore.getProfile(didOrHandle);
  if (profileLocal) yield profileLocal;
  const profileRemoteRaw = (await profileRemotePromise).data;
  const profileRemoteResolved = dbStore.captureProfileView(profileRemoteRaw, Date.now());
  yield profileRemoteResolved;
}

// @ts-check


/**
 * @typedef {{
 *  shortDID: string | null | undefined,
 *  agent_getProfile_throttled: (did) => ReturnType<import('@atproto/api').BskyAgent['getProfile']>,
 *  agent_resolveHandle_throttled: (handle) => ReturnType<import('@atproto/api').BskyAgent['resolveHandle']>,
 *  dbStore: ReturnType<typeof import('../define-cache-indexedDB-store').defineCacheIndexedDBStore>
 * }} Args
 */

/**
 * @param {Args} args
 */
async function syncRepo(args) {
  const {
    shortDID,
    dbStore
  } = args;
  if (!shortDID) return;
  if (!shortDID) return;
  const lastRepoSyncRev = await dbStore.getLastRepoSyncRev(shortDID);
  let profile = await dbStore.getProfile(shortDID);
  if (!profile) {
    const profileIterator = getProfileIncrementally({
      ...args,
      didOrHandle: shortDID
    });
    for await (const profileData of profileIterator) {
      if (!profileData) continue;
      const pds = profileData.history?.map(h => h.pds)?.find(Boolean);
      if (pds) {
        profile = profileData;
        break;
      }
    }
  }
  if (!profile) {
    console.error('Could not resolve profile ', shortDID);
    return;
  }
  const pds = /** @type {string} */profile.history?.map(h => h.pds)?.find(Boolean);
  const startDownloadCAR = Date.now();
  const repoData = await downloadCAR({
    shortDID,
    pds: pds,
    lastRev: lastRepoSyncRev
  });
  if (!repoData) return;
  console.log('@' + profile.handle + ' CAR ' + Math.round(repoData.byteLength / 1024).toLocaleString() + 'Kb downloaded in ', (Date.now() - startDownloadCAR) / 1000, 's');
  const startParse = Date.now();
  const parsed = await readCAR(unwrapShortDID(shortDID), repoData);
  console.log('@' + profile.handle + ' parsed repo in ', (Date.now() - startParse) / 1000, 's');
  const startUploadingToDB = Date.now();
  const uptick = await dbStore.syncRepoWithData(parsed, Date.now());
  console.log('@' + profile.handle + ' uploaded to DB in ', (Date.now() - startUploadingToDB) / 1000, 's');
  return uptick;
}

/**
 * @param {{
 *  shortDID: string,
 *  pds: string,
 *  lastRev?: string
 * }} _
 */
async function downloadCAR({
  shortDID,
  pds,
  lastRev
}) {
  const fullDID = unwrapShortDID(shortDID);
  const pdsAgent = new ColdskyAgent({
    service: pds
  });
  const repoData = await pdsAgent.com.atproto.sync.getRepo({
    did: fullDID,
    since: lastRev
  });
  return repoData.data;
}

// @ts-check


/**
 * @typedef {{
 *  shortDID: string | null | undefined,
 *  searchQuery: string | null | undefined,
 *  likesAndReposts?: boolean | undefined,
 *  agent_getProfile_throttled: (did) => ReturnType<import('@atproto/api').BskyAgent['getProfile']>,
 *  agent_resolveHandle_throttled: (handle) => ReturnType<import('@atproto/api').BskyAgent['resolveHandle']>,
 *  agent_searchPosts_throttled: (q: string, limit: number | undefined, sort: string | undefined, cursor?: string) => ReturnType<import('@atproto/api').BskyAgent['app']['bsky']['feed']['searchPosts']>,
 *  agent_getRepoRecord_throttled: (repo, rkey, collection) => ReturnType<import('@atproto/api').BskyAgent['com']['atproto']['repo']['getRecord']>,
 *  dbStore: ReturnType<typeof import('../define-cache-indexedDB-store').defineCacheIndexedDBStore>
 * }} Args
 */

/**
 * @param {Args} args
 * @returns {[] | AsyncGenerator<import('.').IncrementalMatchCompactPosts>}
 */
function searchPostsIncrementally(args) {
  const {
    shortDID,
    searchQuery
  } = args;
  if (shortDID) {
    return searchAccountHistoryPostsIncrementally(args);
  } else if (!searchQuery) {
    return [];
  } else {
    return searchAllPostsIncrementally(args);
  }
}

/**
 * @param {Args} args
 */
async function* searchAccountHistoryPostsIncrementally(args) {
  const {
    shortDID,
    searchQuery,
    likesAndReposts,
    dbStore,
    agent_searchPosts_throttled
  } = args;
  let REPORT_UPDATES_FREQUENCY_MSEC = 700;
  const cachedMatchesPromise = dbStore.searchPosts(shortDID, searchQuery, likesAndReposts);
  /** @type {Set<string> | undefined} */
  const missingLikesAndReposts = !likesAndReposts ? undefined : new Set();
  const allCachedHistoryPromise = !searchQuery ? cachedMatchesPromise : dbStore.searchPosts(shortDID, undefined, likesAndReposts, missingLikesAndReposts);
  const plcDirHistoryPromise = plcDirectoryHistoryRaw(/** @type {string} */shortDID);
  let lastSearchReport = 0;
  /** @type {import('..').CompactPost[] | undefined}  */
  let processedBatch;

  /** @type {import('.').IncrementalMatchCompactPosts | undefined} */
  let lastMatches = await cachedMatchesPromise;
  const allHistory = await allCachedHistoryPromise;

  /** @type {Set<string> | undefined} */
  let knownHistoryUri = new Set((allHistory || []).map(rec => rec.uri));
  if (lastMatches?.length) {
    lastMatches.cachedOnly = true;
    lastMatches.processedAllCount = knownHistoryUri.size;
    lastMatches.processedBatch = allHistory.slice();
    lastSearchReport = Date.now();
    yield lastMatches;
  }
  const plcDirHistoryRecords = await plcDirHistoryPromise;
  dbStore.capturePlcDirectoryEntries(plcDirHistoryRecords);
  const profile = await dbStore.getProfile(/** @type {string} */shortDID);
  const parallelSearch = streamEvery(/** @param {import('../../../package/akpa').StreamParameters<import('..').CompactPost[] | undefined>} streaming  */
  streaming => {
    const words = breakIntoWords(searchQuery || '');
    words.unshift(searchQuery || '');
    const waitForAllCompletionPromises = [];
    let fullRepoIndexed = false;
    const waitUntilPageIndexed = Promise.race([fetchPaginatedAndIndex(), downloadFullRepoAndIndex()]);
    waitForAllCompletionPromises.push(waitUntilPageIndexed);
    for (const word of words) {
      waitForAllCompletionPromises.push(searchForWord(word));
    }
    Promise.all(waitForAllCompletionPromises.map(p => p.catch(() => {}))).then(() => {
      streaming.complete();
    });
    async function fetchPaginatedAndIndex() {
      for await (const batch of indexAccountHistoryPostsFromRepository(args)) {
        if (fullRepoIndexed) return;
        streaming.yield(batch);
      }
    }

    /** @param {string} word */
    async function searchForWord(word) {
      const wordSearchQuery = 'from:' + unwrapShortHandle(profile?.handle || '') + ' ' + word;
      const searchResult = await agent_searchPosts_throttled(wordSearchQuery, undefined, 'latest');
      const batch = [];
      if (searchResult?.data?.posts?.length) {
        for (const postRaw of searchResult.data.posts) {
          if (fullRepoIndexed) return;
          const post = dbStore.capturePostView(postRaw, Date.now());
          if (post) batch.push(post);
        }
      }
      streaming.yield(batch);
    }
    async function downloadFullRepoAndIndex() {
      const postsAndProfiles = await syncRepo({
        ...args,
        shortDID
      });
      const ownPostsOnly = !postsAndProfiles ? [] : (/** @type {import('..').CompactPost[]} */
      postsAndProfiles.filter(post => isCompactPost(post) && post.shortDID === shortDID));
      streaming.yield(ownPostsOnly);
      fullRepoIndexed = true;
    }
  });

  /** @type {ReturnType<typeof getPostOnly>[]} */
  let queuedMissingLikesAndReposts = [];
  const addMissingLikesAndRepostsToTheQueue = () => {
    if (missingLikesAndReposts && missingLikesAndReposts.size > queuedMissingLikesAndReposts.length) {
      const arr = [...missingLikesAndReposts];
      for (let i = queuedMissingLikesAndReposts.length; i < arr.length; i++) {
        const uri = arr[i];
        queuedMissingLikesAndReposts[i] = getPostOnly({
          uri,
          dbStore,
          agent_getRepoRecord_throttled: args.agent_getRepoRecord_throttled
        });
      }
    }
  };
  for await (const searchResult of parallelSearch) {
    if (searchResult) {
      if (!processedBatch) processedBatch = searchResult;else processedBatch = processedBatch.concat(searchResult);
    }
    if (Date.now() - lastSearchReport > REPORT_UPDATES_FREQUENCY_MSEC) {
      /** @type {import('.').IncrementalMatchCompactPosts} */
      const newMatches = await dbStore.searchPosts(shortDID, searchQuery, likesAndReposts, missingLikesAndReposts);
      addMissingLikesAndRepostsToTheQueue();
      lastMatches = newMatches;
      lastSearchReport = Date.now();
      newMatches.processedBatch = processedBatch;
      if (!newMatches.processedAllCount) newMatches.processedAllCount = knownHistoryUri.size;
      processedBatch = undefined;
      yield newMatches;
      lastSearchReport = Date.now();
    }
  }
  if (queuedMissingLikesAndReposts.length) {
    await Promise.all(queuedMissingLikesAndReposts);
  }

  /** @type {import('.').IncrementalMatchCompactPosts} */
  const finalMatches = await dbStore.searchPosts(shortDID, searchQuery, likesAndReposts, missingLikesAndReposts);
  addMissingLikesAndRepostsToTheQueue();
  finalMatches.processedBatch = processedBatch;
  if (!finalMatches.processedAllCount) finalMatches.processedAllCount = knownHistoryUri.size;
  processedBatch = undefined;
  yield finalMatches;
}

/**
 * @param {Args} args
 */
async function* indexAccountHistoryPostsFromRepository(args) {
  const {
    shortDID,
    dbStore
  } = args;
  const plcDirHistoryPromise = plcDirectoryHistoryRaw(/** @type {string} */shortDID);

  /** @type {import('..').CompactPost[] | undefined}  */
  let processedBatch;
  const plcDirHistoryRecords = await plcDirHistoryPromise;
  dbStore.capturePlcDirectoryEntries(plcDirHistoryRecords);
  const profile = await dbStore.getProfile(/** @type {string} */shortDID);
  const pdsAgent = new ColdskyAgent({
    service: profile?.history?.[0].pds
  });
  let cursor = '';
  const fullDID = unwrapShortDID(/** @type {string} */shortDID);
  while (true) {
    const moreData = await pdsAgent.com.atproto.repo.listRecords({
      repo: unwrapShortDID(/** @type {string} */shortDID),
      cursor,
      collection: 'app.bsky.feed.post',
      limit: Math.random() * 10 + 88
    });
    if (moreData?.data?.records?.length) {
      for (const rec of moreData.data.records) {
        /** @type {import('../../firehose').FirehoseRecord$Typed<'app.bsky.feed.post'>} */
        const recEx = /** @type {*} */rec.value;
        recEx.$type = 'app.bsky.feed.post';
        recEx.uri = rec.uri;
        recEx.repo = fullDID;
        const post = /** @type {import('..').CompactPost} */dbStore.captureRecord(recEx, Date.now());
        if (post) {
          if (!processedBatch) processedBatch = [post];else processedBatch.push(post);
        }
      }
    }
    yield processedBatch;
    if (!moreData?.data?.cursor) break;
    cursor = moreData.data.cursor;
  }
}

/**
 * @param {Args} args
 * @returns {AsyncGenerator<import('.').IncrementalMatchCompactPosts>}
 */
async function* searchAllPostsIncrementally(args) {
  const {
    searchQuery,
    dbStore,
    agent_searchPosts_throttled
  } = args;
  const searchStringSanitised = (searchQuery || '').trim().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, ' ').replace(/\s+/g, ' ');
  let remoteSearchLatestPromise = agent_searchPosts_throttled(searchStringSanitised, 97, 'latest');
  const localResultsPromise = dbStore.searchPosts(undefined, searchQuery);
  /** @type {import('..').MatchCompactPost[] & { cachedOnly?: boolean }} */
  const localResults = await localResultsPromise;
  if (localResults?.length) {
    localResults.cachedOnly = true;
    yield localResults;
  }
  let cursor = '';
  while (true) {
    const remoteSearchData = (await remoteSearchLatestPromise).data;
    const now = Date.now();
    for (const postRaw of remoteSearchData?.posts || []) {
      dbStore.capturePostView(postRaw, now);
    }
    const refreshedResults = await dbStore.searchPosts(undefined, searchQuery);
    if (remoteSearchData?.cursor) {
      cursor = remoteSearchData.cursor;
      remoteSearchLatestPromise = agent_searchPosts_throttled(searchStringSanitised, 97, 'latest', cursor);
    }
    if (refreshedResults?.length) {
      yield refreshedResults;
    }
    if (!remoteSearchData?.cursor) break;
  }
}

// @ts-check


/**
 * @typedef {{
 *  shortDID: string | null | undefined,
 *  searchQuery: string | null | undefined,
 * likesAndReposts?: boolean | undefined,
 *  agent_getProfile_throttled: (did) => ReturnType<import('@atproto/api').BskyAgent['getProfile']>,
 *  agent_resolveHandle_throttled: (handle) => ReturnType<import('@atproto/api').BskyAgent['resolveHandle']>,
 *  agent_searchPosts_throttled: import('./search-posts-incrementally').Args['agent_searchPosts_throttled'],
 *  agent_getPostThread_throttled: (uri) => ReturnType<import('@atproto/api').BskyAgent['getPostThread']>,
 *  agent_getRepoRecord_throttled: (repo, rkey, collection) => ReturnType<import('@atproto/api').BskyAgent['com']['atproto']['repo']['getRecord']>,
 *  dbStore: ReturnType<typeof import('../define-cache-indexedDB-store').defineCacheIndexedDBStore>
 * }} Args
 */

/**
 * @param {Args} args
 * @returns {AsyncGenerator<import('.').IncrementalMatchThreadResult>}
 */
async function* getTimelineIncrementally(args) {
  const {
    shortDID,
    searchQuery,
    likesAndReposts
  } = args;
  const enrichPostToThreadParallel = throttledAsyncCache(
  /**
   * @param {string} uri
   * @param {boolean} shallow
   */
  (uri, shallow) => enrichPostToThread({
    ...args,
    uri,
    shallow
  }), {
    maxConcurrency: 10,
    interval: 1
  });
  let REPORT_INTERVAL_MSEC = 700;
  let PARALLELISE_THREAD_BATCH = 20;

  /** @type {import('..').CompactThreadPostSet[]} */
  let timeline = [];
  let lastReportTimestamp = Date.now() - REPORT_INTERVAL_MSEC / 2;

  /** @type {Map<string, number>} */
  let latestRelevantPostForThreadRootUri = new Map();

  /** @type {import('.').IncrementalMatchThreadResult | undefined} */
  let report;
  const searchPostIterator = searchAccountHistoryPostsIncrementally({
    ...args,
    shortDID,
    searchQuery,
    likesAndReposts
  });
  for await (const entries of searchPostIterator) {
    // start enriching posts to threads from the most recent
    entries.sort((a, b) => (b.asOf || 0) - (a.asOf || 0));
    let anyReported = false;
    for (let iEntry = 0; iEntry < entries.length; iEntry += PARALLELISE_THREAD_BATCH) {
      /** @type {typeof entries} */
      const entriesBatch = entries.slice(iEntry, iEntry + PARALLELISE_THREAD_BATCH);
      entriesBatch.cachedOnly = entries.cachedOnly;
      entriesBatch.processedAllCount = entries.processedAllCount;
      entriesBatch.processedBatch = entries.processedBatch;
      for await (const nextReport of processEntriesAndProduceBatchIfRequired(entriesBatch)) {
        if (nextReport) {
          anyReported = true;
          report = nextReport;
          yield report;
        }
      }
    }
    if (!anyReported) {
      /** @type {import('.').IncrementalMatchThreadResult} */
      const dummyBatch = timeline.slice();
      dummyBatch.cachedOnly = entries.cachedOnly;
      dummyBatch.processedAllCount = entries.processedAllCount;
      dummyBatch.processedBatch = entries.processedBatch;
      if (!report) report = dummyBatch;
      yield dummyBatch;
    }
  }

  /** @type {import('.').IncrementalMatchThreadResult} */
  const completeReport = timeline.slice();
  completeReport.cachedOnly = false;
  completeReport.processedAllCount = report ? report.processedAllCount : 0;
  completeReport.processedBatch = report?.processedBatch;
  completeReport.complete = true;
  yield completeReport;

  /**
   * @param {import('.').IncrementalMatchCompactPosts} entries
   */

  async function* processEntriesAndProduceBatchIfRequired(entries) {
    const threadPromises = entries.map(entry => enrichPostToThreadParallel(entry.threadStart || entry.uri, /* shallow */!!entries.cachedOnly));

    /** @type {Map<string, import('..').CompactPost>} */
    const searchMatchPosts = new Map();
    for (const post of entries) {
      searchMatchPosts.set(post.uri, post);
      if (!post.asOf) continue;
      const threadRootUri = post.threadStart || post.uri;
      let existingTimestamp = latestRelevantPostForThreadRootUri.get(threadRootUri);
      if (!existingTimestamp || existingTimestamp < post.asOf) latestRelevantPostForThreadRootUri.set(threadRootUri, post.asOf);
    }
    let reportDue = false;
    for (const threadPromise of threadPromises) {
      let postThreadRetrieved = await threadPromise;
      if (!postThreadRetrieved) continue;

      // Replace posts with search matches
      postThreadRetrieved = {
        ...postThreadRetrieved,
        all: postThreadRetrieved.all.map(post => searchMatchPosts.get(post.uri) || post),
        current: searchMatchPosts.get(postThreadRetrieved.current.uri) || postThreadRetrieved.current,
        root: searchMatchPosts.get(postThreadRetrieved.root.uri) || postThreadRetrieved.root
      };
      const timelineIndex = timeline.findIndex(t => t.root.uri === postThreadRetrieved.root.uri);
      if (timeline[timelineIndex] === postThreadRetrieved) continue;
      if (timelineIndex >= 0) timeline[timelineIndex] = postThreadRetrieved;else timeline.push(postThreadRetrieved);
      const now = Date.now();
      if (now - lastReportTimestamp > REPORT_INTERVAL_MSEC) {
        const report = makeReport();
        yield report;
      } else {
        reportDue = true;
      }
    }
    if (reportDue) {
      const report = makeReport();
      yield report;
    }
    function makeReport() {
      timeline.sort((a, b) => {
        const aTimestamp = latestRelevantPostForThreadRootUri.get(a.root.uri) || 0;
        const bTimestamp = latestRelevantPostForThreadRootUri.get(b.root.uri) || 0;
        return bTimestamp - aTimestamp;
      });

      /** @type {import('.').IncrementalMatchThreadResult | undefined} */
      const report = timeline.slice();
      report.cachedOnly = entries.cachedOnly;
      report.processedBatch = entries.processedBatch;
      report.processedAllCount = entries.processedAllCount;
      lastReportTimestamp = Date.now();
      reportDue = false;
      return report;
    }
  }
}

/**
 * @param {import( './get-post-thread-incrementally').Args & { shallow: boolean }} args
 */
async function enrichPostToThread(args) {
  try {
    let enrichedThread;
    for await (const thread of getPostThreadIncrementally(args)) {
      if (thread && args.shallow) return thread;
      if (thread) enrichedThread = thread;
    }
    return enrichedThread;
  } catch (error) {
    console.warn('Post ' + args.uri + ' could not be retrieved ', error);
  }
}

// @ts-check


/**
 * @typedef {{
 *  searchQuery: string,
 *  max?: number,
 *  agent_searchActorsTypeAhead_throttled: (q: string, limit: number | undefined) => ReturnType<import('@atproto/api').BskyAgent['searchActorsTypeahead']>
 *  agent_searchActors_throttled: (q: string, limit: number | undefined) => ReturnType<import('@atproto/api').BskyAgent['searchActors']>
 *  dbStore: ReturnType<typeof import('../define-cache-indexedDB-store').defineCacheIndexedDBStore>
 * }} Args
 */

/**
 * @param {Args} args
 */
async function* searchProfilesIncrementally(args) {
  const {
    searchQuery,
    max,
    dbStore
  } = args;
  const localSearchPromise = dbStore.searchProfiles(searchQuery, max ? {
    max
  } : undefined);
  const normalizedText = searchQuery?.trim() || '';
  if (!normalizedText) return async function* nothing() {}();
  const wholeTextSearchTypeahedPromise = directSearchAccountsTypeahead({
    ...args,
    searchQuery: normalizedText
  });
  const wholeTextSearchFullPromise = directSearchAccountsFull({
    ...args,
    searchQuery: normalizedText
  });
  const words = breakIntoWords(normalizedText);
  const wordSearchTypeaheadPromises = words.map(word => directSearchAccountsTypeahead({
    ...args,
    searchQuery: word
  }));
  const wordSearchFullPromises = words.map(word => directSearchAccountsFull({
    ...args,
    searchQuery: word
  }));
  const localResult = await localSearchPromise;
  if (localResult?.length) {
    yield localResult;
  }
  const searchResponses = await Promise.all([wholeTextSearchTypeahedPromise, wholeTextSearchFullPromise, ...wordSearchTypeaheadPromises, ...wordSearchFullPromises]);
  for (const searchMatchList of searchResponses) {
    for (const searchMatch of searchMatchList) {
      dbStore.captureProfileView(searchMatch, Date.now());
    }
  }
  const refreshedSearch = await dbStore.searchProfiles(searchQuery, max ? {
    max
  } : undefined);
  return refreshedSearch;
}

/**
* @param {Args} args
*/
async function directSearchAccountsTypeahead(args) {
  const {
    searchQuery,
    agent_searchActorsTypeAhead_throttled
  } = args;
  const result = (await agent_searchActorsTypeAhead_throttled(searchQuery, 100)).data?.actors;
  return result;
}

/**
 * @param {Args} args
 */
async function directSearchAccountsFull(args) {
  const {
    searchQuery,
    agent_searchActors_throttled
  } = args;
  const result = (await agent_searchActors_throttled(searchQuery, 100)).data?.actors;
  return result;
}

// @ts-check


/** @typedef {import('..').CompactPost} CompactPost */
/** @typedef {import('..').CompactProfile} CompactProfile */
/** @typedef {import('..').MatchCompactPost} MatchCompactPost */
/** @typedef {import('..').CompactThreadPostSet} CompactThreadPostSet */

/**
 * @param {{
 *  dbName?: string,
 *  service?: string
 * }} [options]
 */
function defineCachedStore({
  dbName,
  service
} = {}) {
  const dbStore = defineCacheIndexedDBStore(dbName);
  const agent = /** @type {*} */new ColdskyAgent({
    service: service || BSKY_PUBLIC_URL
  });
  const agent_getProfile_throttled = throttledAsyncCache(actor => agent.getProfile({
    actor
  }));
  const agent_resolveHandle_throttled = throttledAsyncCache(handle => agent.com.atproto.identity.resolveHandle({
    handle
  }));
  const agent_getPostThread_throttled = throttledAsyncCache(uri => agent.getPostThread({
    uri
  }));
  const agent_getRepoRecord_throttled = throttledAsyncCache((repo, rkey, collection) => {
    const postRecordPromise = agent.com.atproto.repo.getRecord({
      repo,
      rkey,
      collection
    });
    return postRecordPromise;
  });
  const agent_searchActorsTypeAhead_throttled = throttledAsyncCache((q, limit) => agent.searchActorsTypeahead({
    q,
    limit
  }));
  const agent_searchActors_throttled = throttledAsyncCache((q, limit) => agent.searchActors({
    q,
    limit
  }));
  const agent_searchPosts_throttled = throttledAsyncCache((q, limit, sort, cursor) => agent.app.bsky.feed.searchPosts({
    q,
    limit,
    sort,
    cursor
  }));
  return {
    firehose: () => firehose(dbStore),
    /** @param {string | null | undefined} uri */
    getPostOnly: uri => getPostOnly({
      uri,
      dbStore,
      agent_getRepoRecord_throttled
    }),
    /** @param {string | null | undefined} uri */
    getPostThreadIncrementally: uri => getPostThreadIncrementally({
      uri,
      dbStore,
      agent_getPostThread_throttled
    }),
    /** @param {string | null | undefined} didOrHandle */
    getProfileIncrementally: didOrHandle => getProfileIncrementally({
      didOrHandle,
      dbStore,
      agent_getProfile_throttled,
      agent_resolveHandle_throttled
    }),
    /**
     * @param {string | null | undefined} shortDID
     * @param {string | null | undefined} searchQuery
     * @param {boolean} [likesAndReposts]
     */
    searchPostsIncrementally: (shortDID, searchQuery, likesAndReposts) => searchPostsIncrementally({
      shortDID,
      searchQuery,
      likesAndReposts,
      dbStore,
      agent_getProfile_throttled,
      agent_resolveHandle_throttled,
      agent_searchPosts_throttled,
      agent_getRepoRecord_throttled
    }),
    searchProfilesIncrementally: (searchQuery, max) => searchProfilesIncrementally({
      searchQuery,
      max,
      dbStore,
      agent_searchActorsTypeAhead_throttled,
      agent_searchActors_throttled
    }),
    /**
     * @param {string | null | undefined} shortDID
     * @param {string | null | undefined} searchQuery
     * @param {boolean} [likesAndReposts]
     */
    getTimelineIncrementally: (shortDID, searchQuery, likesAndReposts) => getTimelineIncrementally({
      shortDID,
      searchQuery,
      likesAndReposts,
      dbStore,
      agent_getProfile_throttled,
      agent_resolveHandle_throttled,
      agent_getPostThread_throttled,
      agent_searchPosts_throttled,
      agent_getRepoRecord_throttled
    }),
    syncRepo: shortDID => syncRepo({
      shortDID,
      dbStore,
      agent_getProfile_throttled,
      agent_resolveHandle_throttled
    })
  };
}

// @ts-check


/**
 * @param {(import('./define-store').PLCDirectoryEntry | import('./define-store').PLCDirectoryAuditLogEntry)[]} recs
 * @param {Map<string, import('./store-data').RepositoryData>} store
 * @param {import('./define-store').Intercepts} [intercepts]
 */
function capturePLCDirectoryEntriesForStore(recs, store, intercepts) {
  /** @type {Map<string, typeof recs>} */
  const affectedRepos = new Map();
  for (const rec of recs) {
    const shortDID = shortenDID(rec.did);
    const existing = affectedRepos.get(shortDID);
    if (existing) existing.push(rec);else affectedRepos.set(shortDID, [rec]);
  }
  const updatedRepos = [];
  for (const [shortDID, recs] of affectedRepos) {
    const repoData = store.get(shortDID);
    const history = recs.map(entry => {
      const pds = shortenPDS(entry.operation.services?.atproto_pds?.endpoint || /** @type {*} */entry.operation.service);
      const shortHandle = shortenHandle(entry.operation.alsoKnownAs?.[0] || /** @type {*} */entry.operation.handle);
      const time = Date.parse(entry.createdAt);
      return {
        pds,
        shortHandle,
        time
      };
    });
    if (repoData) {
      if (repoData.profile?.history?.length) {
        for (const entry of repoData.profile.history) {
          history.push(entry);
        }
        history.sort((a, b) => b.time - a.time);
        let anyChange = false;
        repoData.profile.history = history.filter((entry, i) => {
          if (i && entry.time === history[i - 1].time && entry.pds === history[i - 1].pds && entry.shortHandle === history[i - 1].shortHandle) {
            anyChange = true;
            return false;
          }
          return true;
        });
        if (anyChange) {
          intercepts?.profile?.(repoData.profile);
          updatedRepos.push(repoData.profile);
        }
      } else {
        history.sort((a, b) => b.time - a.time);
        const lastHistoryEntry = history[0];
        if (!repoData.profile) {
          repoData.profile = {
            shortDID,
            handle: lastHistoryEntry?.shortHandle,
            displayName: undefined,
            description: undefined,
            avatar: undefined,
            banner: undefined,
            words: detectWordStartsNormalized(lastHistoryEntry?.shortHandle, undefined),
            followersCount: undefined,
            followsCount: undefined,
            postsCount: undefined,
            history,
            asOf: history[0]?.time
          };
        } else {
          repoData.profile.history = history;
        }
      }
    } else {
      history.sort((a, b) => b.time - a.time);
      const lastHistoryEntry = history[0];
      const repo = createRepoData(shortDID);
      repo.profile = {
        shortDID,
        handle: lastHistoryEntry?.shortHandle,
        displayName: undefined,
        description: undefined,
        avatar: undefined,
        banner: undefined,
        words: detectWordStartsNormalized(lastHistoryEntry?.shortHandle, undefined),
        followersCount: undefined,
        followsCount: undefined,
        postsCount: undefined,
        history,
        asOf: history[0]?.time
      };
      store.set(shortDID, repo);
      intercepts?.profile?.(repo.profile);
      updatedRepos.push(repo.profile);
    }
  }
  return updatedRepos;
}

// @ts-check


/**
 * @param {import('@atproto/api').AppBskyActorDefs.ProfileViewDetailed} profileView
 * @param {Map<string, import('./store-data').RepositoryData>} store
 * @param {number} now
 * @param {import('./define-store').Intercepts} [intercepts]
 */
function captureProfile(profileView, store, now, intercepts) {
  const shortDID = shortenDID(profileView.did);
  let repoData = store.get(shortDID);
  if (!repoData) store.set(shortDID, repoData = createRepoData(shortDID));
  if (!repoData.profile) {
    repoData.profile = /** @type {import('.').CompactProfile} */{
      shortDID,
      handle: profileView.handle
    };
  }
  const asOf = profileView.indexedAt ? Date.parse(profileView.indexedAt) : now;
  if (!repoData.profile?.asOf || repoData.profile.asOf <= asOf) {
    if ('handle' in profileView) repoData.profile.handle = profileView.handle;
    if ('displayName' in profileView) repoData.profile.displayName = profileView.displayName;
    if ('description' in profileView) repoData.profile.description = profileView.description;
    if ('avatar' in profileView) repoData.profile.avatar = profileView.avatar;
    if ('banner' in profileView) repoData.profile.banner = profileView.banner;
    if ('followersCount' in profileView) repoData.profile.followersCount = profileView.followersCount;
    if ('followsCount' in profileView) repoData.profile.followsCount = profileView.followsCount;
    if ('postsCount' in profileView) repoData.profile.postsCount = profileView.postsCount;
    let words = detectWordStartsNormalized(repoData.profile.handle, undefined);
    words = detectWordStartsNormalized(repoData.profile.displayName, words);
    words = detectWordStartsNormalized(repoData.profile.description, words);
    if (words) repoData.profile.words = words;
    repoData.profile.asOf = asOf;
  } else {
    // banner sometimes gets dropped from short profile views
    if (profileView.banner && !repoData.profile.banner) repoData.profile.banner = profileView.banner;
  }
  intercepts?.profile?.(repoData.profile);
  return repoData.profile;
}

// @ts-check


/**
 * @param {string} repo
 * @param {import('../..').RepoRecord$Typed['app.bsky.feed.like']} likeRecord
 * @param {Map<string, import('../store-data').RepositoryData>} store
 * @param {import('../define-store').Intercepts} [intercepts]
 */
function captureLikeRecord(repo, likeRecord, store, intercepts) {
  const shortDID = shortenDID(repo);
  let repoData = store.get(shortDID);
  if (!repoData) store.set(shortDID, repoData = createRepoData(shortDID));
  const existingPost = repoData.posts.get(likeRecord.subject.uri);
  if (existingPost) {
    if (existingPost.likedBy) {
      if (!existingPost.likedBy.includes(shortDID)) {
        let lastPlaceholderLike = existingPost.likedBy.length;
        while (lastPlaceholderLike > 0 && existingPost.likedBy[lastPlaceholderLike - 1] === '?') lastPlaceholderLike--;
        existingPost.likedBy[lastPlaceholderLike] = shortDID;
      }
    } else {
      existingPost.likedBy = [shortDID];
    }
    intercepts?.post?.(existingPost);
    return existingPost;
  } else {
    const speculativePost = createSpeculativePost(shortDID, likeRecord.subject.uri);
    speculativePost.likedBy = [shortDID];
    repoData.posts.set(likeRecord.subject.uri, speculativePost);
    intercepts?.post?.(speculativePost);
    return speculativePost;
  }
}

// @ts-check


/**
 * @param {string} shortDID
 * @param {import('../../firehose').RepoRecord$Typed['app.bsky.feed.post']['embed'] | undefined} embed
 */
function extractEmbeds(shortDID, embed) {
  if (!embed) return;

  /** @type {import('../..').CompactEmbed[] | undefined} */
  let embeds = undefined;
  embeds = addEmbedImages(shortDID, /** @type {import('@atproto/api').AppBskyEmbedImages.Main} */embed.images, embeds);
  embeds = addEmbedVideo(shortDID, /** @type {import('@atproto/api').AppBskyEmbedVideo.Main} */embed, embeds);
  embeds = addEmbedExternal(shortDID, /** @type {import('@atproto/api').AppBskyEmbedExternal.Main} */embed.external, embeds);
  embeds = addEmbedRecord(/** @type {import('@atproto/api').AppBskyEmbedRecord.Main} */embed.record, embeds);
  embeds = addEmbedRecordMedia(shortDID, /** @type {import('@atproto/api').AppBskyEmbedRecordWithMedia.Main} */embed, embeds);
  return embeds;
}

/**
 * @param {string} shortDID
 * @param {import('@atproto/api').AppBskyEmbedImages.Main['images'] | undefined} embedImages 
 * @param {import('../..').CompactEmbed[] | undefined} embeds 
 */
function addEmbedImages(shortDID, embedImages, embeds) {
  if (!embedImages?.length) return embeds;
  for (const img of embedImages) {
    if (!img) continue;
    embeds = addToArray(embeds, /** @type {import('../..').CompactEmbed} */{
      imgSrc: getFeedBlobUrl(shortDID, img.image?.ref?.toString()),
      description: img.alt || undefined,
      aspectRatio: img.aspectRatio
    });
  }
  return embeds;
}

/**
 * @param {string} shortDID
 * @param {import('@atproto/api').AppBskyEmbedVideo.Main | undefined} embedVideo 
 * @param {import('../..').CompactEmbed[] | undefined} embeds 
 */
function addEmbedVideo(shortDID, embedVideo, embeds) {
  embeds = addToArray(embeds, /** @type {import('../..').CompactEmbed} */{
    imgSrc: getFeedVideoBlobUrl(shortDID, embedVideo?.video?.ref?.toString()),
    description: embedVideo?.alt || undefined,
    aspectRatio: embedVideo?.aspectRatio
  });
  return embeds;
}

/**
 * @param {string} shortDID
 * @param {import('@atproto/api').AppBskyEmbedExternal.Main['external'] | undefined} embedExternal
 * @param {import('../..').CompactEmbed[] | undefined} embeds 
 */
function addEmbedExternal(shortDID, embedExternal, embeds) {
  if (!embedExternal?.uri) return embeds;
  return addToArray(embeds, /** @type {import('../..').CompactEmbed} */{
    url: embedExternal.uri || undefined,
    title: embedExternal.title || undefined,
    description: embedExternal.description || undefined,
    imgSrc: getFeedBlobUrl(shortDID, embedExternal.thumb?.ref?.toString())
  });
}

/**
 * @param {import('@atproto/api').AppBskyEmbedRecord.Main['record'] | undefined} embedRecord
 * @param {import('../..').CompactEmbed[] | undefined} embeds 
 */
function addEmbedRecord(embedRecord, embeds) {
  if (!embedRecord?.uri) return embeds;
  return addToArray(embeds, /** @type {import('../..').CompactEmbed} */{
    url: embedRecord.uri
  });
}

/**
 * @param {string} shortDID
 * @param {import('@atproto/api').AppBskyEmbedRecordWithMedia.Main | undefined} embedRecordMedia
 * @param {import('../..').CompactEmbed[] | undefined} embeds 
 */
function addEmbedRecordMedia(shortDID, embedRecordMedia, embeds) {
  embeds = addEmbedImages(shortDID, /** @type {import('@atproto/api').AppBskyEmbedImages.Main} */embedRecordMedia?.media?.images, embeds);
  embeds = addEmbedVideo(shortDID, /** @type {import('@atproto/api').AppBskyEmbedVideo.Main} */embedRecordMedia?.media, embeds);
  embeds = addEmbedExternal(shortDID, /** @type {import('@atproto/api').AppBskyEmbedExternal.Main} */embedRecordMedia?.media?.external, embeds);
  embeds = addEmbedRecord(/** @type {import('@atproto/api').AppBskyEmbedRecord.Main} */embedRecordMedia?.record?.record, embeds);
  return embeds;
}

// @ts-check

const encoder = new TextEncoder();

/**
 * @param {import('@atproto/api').AppBskyRichtextFacet.Main[] | undefined} facets
 * @param {string} text
 */
function extractFacets(facets, text) {
  if (!facets) return undefined;
  const codePoints = [...text];
  const utf8Lengths = codePoints.map(c => encoder.encode(c).length);
  /**
   * @type {import('../..').CompactFacet[]}
   */
  const compactFacets = [];
  for (const facet of facets) {
    let start = text.length;
    let length = 0;
    if (facet.index) {
      let facetByteStart = facet.index.byteStart;
      let facetByteEnd = facet.index.byteEnd;
      if (facetByteEnd < facetByteStart) {
        facetByteStart = facet.index.byteEnd;
        facetByteEnd = facet.index.byteStart;
      }
      let bytePos = 0;
      let charPos = 0;
      for (let i = 0; i < codePoints.length; i++) {
        const nextBytePos = bytePos + utf8Lengths[i];
        const nextCharPos = charPos + codePoints[i].length;
        if (facetByteStart >= bytePos && facetByteStart < nextBytePos) {
          start = charPos;
          length = text.length - start;
        }
        if (facetByteEnd <= nextBytePos) {
          length = nextCharPos - start;
          break;
        }
        bytePos = nextBytePos;
        charPos = nextCharPos;
      }
    }
    if (!facet.features?.length) {
      compactFacets.push({
        start,
        length
      });
      continue;
    }
    for (const feat of facet.features) {
      const facetMention = /** @type {import('@atproto/api/dist/client/types/app/bsky/richtext/facet').Mention} */feat;
      if (facetMention.did) compactFacets.push({
        start,
        length,
        mention: shortenDID(facetMention.did)
      });
      const facetLink = /** @type {import('@atproto/api/dist/client/types/app/bsky/richtext/facet').Link} */feat;
      if (facetLink.uri) compactFacets.push({
        start,
        length,
        url: facetLink.uri
      });
      const facetTag = /** @type {import('@atproto/api/dist/client/types/app/bsky/richtext/facet').Tag} */feat;
      if (facetTag.tag) compactFacets.push({
        start,
        length,
        tag: facetTag.tag
      });
    }
  }
  return compactFacets.length ? compactFacets : undefined;
}

// @ts-check


/**
 * @param {string | null | undefined} url
 * @param {string[] | undefined} quotes
 */
function detectQuoting(url, quotes) {
  const feedUri = breakFeedURIPostOnly(url);
  if (feedUri?.shortDID && feedUri.postID) return addToArrayUnique(quotes, makeFeedUri(feedUri.shortDID, feedUri.postID));
  const postUri = breakPostURL(url);
  if (postUri?.shortDID && postUri.postID) return addToArrayUnique(quotes, makeFeedUri(postUri.shortDID, postUri.postID));
}

// @ts-check


/**
 * @param {string} repo
 * @param {string} uri
 * @param {import('../firehose').RepoRecord$Typed['app.bsky.feed.post']} record
 * @param {number} asOf
 */
function makeCompactPost(repo, uri, record, asOf) {
  const shortDID = shortenDID(repo);

  /** @type {string[] | undefined} */
  let words = detectWordStartsNormalized(record.text, undefined);
  const embeds = extractEmbeds(repo, record.embed);
  const facets = extractFacets(record.facets, record.text);

  /** @type {string[] | undefined} */
  let quoting;
  if (embeds?.length) {
    for (const embed of embeds) {
      quoting = detectQuoting(embed.url, quoting);
      words = detectWordStartsNormalized(embed.title, words);
      words = detectWordStartsNormalized(embed.description, words);
      words = detectWordStartsNormalized(embed.url, words);
    }
  }
  if (facets?.length) {
    for (const facet of facets) {
      quoting = detectQuoting(facet.mention, quoting);
      quoting = detectQuoting(facet.url, quoting);
      words = detectWordStartsNormalized(facet.tag, words);
      words = detectWordStartsNormalized(facet.url, words);
    }
  }

  /** @type {import('..').CompactPost} */
  const compact = {
    uri,
    shortDID,
    text: record.text,
    facets,
    embeds,
    threadStart: record.reply?.root?.uri === uri ? undefined : record.reply?.root?.uri,
    replyTo: record.reply?.parent?.uri,
    words,
    likedBy: undefined,
    repostedBy: undefined,
    quoting,
    asOf: Date.parse(record.createdAt) || asOf,
    labels: undefined
  };
  return compact;
}

/**
 * @template T
 * @param {T[] | undefined} array
 * @param {T | undefined} element
 * @returns T[] | undefined
 */
function addToArray(array, element) {
  if (!element) return array;
  if (!array) return [element];
  array.push(element);
  return array;
}

/**
 * @template T
 * @param {T[] | undefined} array
 * @param {T | undefined} element
 * @returns T[] | undefined
 */
function addToArrayUnique(array, element) {
  if (!element) return array;
  if (!array) return [element];
  if (array.indexOf(element) >= 0) return array;
  array.push(element);
  return array;
}

// @ts-check


/**
 * @param {string} repo
 * @param {string} uri
 * @param {import('../..').RepoRecord$Typed['app.bsky.feed.post']} postRecord
 * @param {Map<string, import('../store-data').RepositoryData>} store
 * @param {number} asOf
 * @param {import('../define-store').Intercepts} [intercepts]
 */
function capturePostRecord(repo, uri, postRecord, store, asOf, intercepts) {
  const shortDID = shortenDID(repo);
  if (!shortDID || !uri || !postRecord) return;
  let repoData = store.get(shortDID);
  if (!repoData) {
    repoData = {
      shortDID,
      profile: undefined,
      posts: new Map()
      // postLastAccesses: new Map(),
      // lastAccesses: []
    };
    store.set(shortDID, repoData);
  }
  const existingPost = repoData.posts.get(uri);
  if (existingPost && !existingPost.placeholder && typeof existingPost.asOf === 'number' && existingPost.asOf > asOf) return existingPost;
  const createdPost = makeCompactPost(repo, uri, postRecord, asOf);
  if (existingPost) {
    createdPost.likedBy = existingPost.likedBy?.slice();
    createdPost.repostedBy = existingPost.repostedBy?.slice();
  }
  repoData.posts.set(uri, createdPost);
  intercepts?.post?.(createdPost);
  return createdPost;
}

// @ts-check


/**
 * @param {string} repo
 * @param {import('../..').RepoRecord$Typed['app.bsky.actor.profile']} profileRecord
 * @param {Map<string, import('../store-data').RepositoryData>} store
 * @param {number} asOf
 * @param {import('../define-store').Intercepts} [intercepts]
 */
function captureProfileRecord(repo, profileRecord, store, asOf, intercepts) {
  const shortDID = shortenDID(repo);
  let repoData = store.get(shortDID);
  if (!repoData) store.set(shortDID, repoData = createRepoData(shortDID));
  if (!repoData.profile) {
    repoData.profile = /** @type {import('..').CompactProfile} */{
      shortDID
      // handle: profileRecord.handle
    };
  }
  if ('displayName' in profileRecord) repoData.profile.displayName = profileRecord.displayName;
  if ('description' in profileRecord) repoData.profile.description = profileRecord.description;
  if ('avatar' in profileRecord) repoData.profile.avatar = getProfileBlobUrl(shortDID, profileRecord.avatar?.ref + '');
  if ('banner' in profileRecord) repoData.profile.banner = getProfileBlobUrl(shortDID, profileRecord.banner?.ref + '');
  let words = detectWordStartsNormalized(repoData.profile.handle, undefined);
  words = detectWordStartsNormalized(repoData.profile.displayName, words);
  words = detectWordStartsNormalized(repoData.profile.description, words);
  if (words) repoData.profile.words = words;
  repoData.profile.asOf = asOf;
  intercepts?.profile?.(repoData.profile);
  return repoData.profile;
}

// @ts-check


/**
 * @param {string} repo
 * @param {import('../..').RepoRecord$Typed['app.bsky.feed.repost']} repostRecord
 * @param {Map<string, import('../store-data').RepositoryData>} store
 * @param {import('../define-store').Intercepts} [intercepts]
 */
function captureRepostRecord(repo, repostRecord, store, intercepts) {
  const shortDID = shortenDID(repo);
  let repoData = store.get(shortDID);
  if (!repoData) store.set(shortDID, repoData = createRepoData(shortDID));
  const existingPost = repoData.posts.get(repostRecord.subject.uri);
  if (existingPost) {
    if (existingPost.repostedBy) {
      if (!existingPost.repostedBy.includes(shortDID)) {
        let lastPlaceholderRepost = existingPost.repostedBy.length;
        while (lastPlaceholderRepost > 0 && existingPost.repostedBy[lastPlaceholderRepost - 1] === '?') lastPlaceholderRepost--;
        existingPost.repostedBy[lastPlaceholderRepost] = shortDID;
      }
    } else {
      existingPost.repostedBy = [shortDID];
    }
    intercepts?.post?.(existingPost);
    return existingPost;
  } else {
    const speculativePost = createSpeculativePost(shortDID, repostRecord.subject.uri);
    speculativePost.repostedBy = [shortDID];
    repoData.posts.set(repostRecord.subject.uri, speculativePost);
    intercepts?.post?.(speculativePost);
    return speculativePost;
  }
}

// @ts-check


/** @typedef {import('../../firehose').RepoRecord$Typed} RepoRecord$Typed */

/**
 * @param {string} repo
 * @param {string} uri
 * @param {RepoRecord$Typed[keyof RepoRecord$Typed]} rec
 * @param {Map<string, import('../store-data').RepositoryData>} store
 * @param {number} asOf
 * @param {import('../define-store').Intercepts} [intercepts]
 */
function captureAllRecords(repo, uri, rec, store, asOf, intercepts) {
  switch (rec['$type']) {
    case 'app.bsky.feed.like':
      return captureLikeRecord(repo, /** @type {RepoRecord$Typed['app.bsky.feed.like']} */rec, store, intercepts);
    case 'app.bsky.feed.repost':
      return captureRepostRecord(repo, /** @type {RepoRecord$Typed['app.bsky.feed.repost']} */rec, store, intercepts);
    case 'app.bsky.feed.post':
      return capturePostRecord(repo, uri, /** @type {RepoRecord$Typed['app.bsky.feed.post']} */rec, store, asOf, intercepts);
    case 'app.bsky.actor.profile':
      return captureProfileRecord(repo, /** @type {RepoRecord$Typed['app.bsky.actor.profile']} */rec, store, asOf, intercepts);
  }
}

// @ts-check


/**
 * @param {import('@atproto/api').AppBskyFeedDefs.ThreadViewPost} threadView
 * @param {Map<string, import('./store-data').RepositoryData>} store
 * @param {number} now
 * @param {import('./define-store').Intercepts} [intercepts]
 */
function captureThread(threadView, store, now, intercepts) {
  return captureThreadViewPostOrVariants(threadView, undefined, store, now, intercepts);
}

/**
 * @param {import('@atproto/api').AppBskyFeedDefs.ThreadViewPost |
 *  import('@atproto/api').AppBskyFeedDefs.NotFoundPost |
 *  import('@atproto/api').AppBskyFeedDefs.BlockedPost | Record<string, unknown>} threadViewPostOrVariants
 * @param {{ threadStart?: string, replyTo?: string } | undefined} parentPostHint
 * @param {Map<string, import('./store-data').RepositoryData>} store
 * @param {number} now
 * @param {import('./define-store').Intercepts} [intercepts]
 */
function captureThreadViewPostOrVariants(threadViewPostOrVariants, parentPostHint, store, now, intercepts) {
  const threadViewPost = /** @type {import('@atproto/api').AppBskyFeedDefs.ThreadViewPost} */
  threadViewPostOrVariants;
  if (threadViewPost?.post) return captureThreadViewPost(threadViewPost, store, now, intercepts);
  const lostURI = /** @type {import('@atproto/api').AppBskyFeedDefs.NotFoundPost} */threadViewPostOrVariants.uri;
  const lostPost = getPostOrPlaceholder(lostURI, store);
  if (lostPost && parentPostHint) {
    const replyTo = parentPostHint.replyTo || parentPostHint.threadStart;
    const threadStart = parentPostHint.threadStart || parentPostHint.replyTo;
    if (lostPost.replyTo !== replyTo || lostPost.threadStart !== threadStart) {
      lostPost.replyTo = replyTo;
      lostPost.threadStart = threadStart;
      intercepts?.post?.(lostPost);
    }
  }
  return lostPost;
}

/**
 * @param {import('@atproto/api').AppBskyFeedDefs.ThreadViewPost} threadViewPost
 * @param {Map<string, import('./store-data').RepositoryData>} store
 * @param {number} now
 * @param {import('./define-store').Intercepts} [intercepts]
 */
function captureThreadViewPost(threadViewPost, store, now, intercepts) {
  const compactPost = capturePostView(threadViewPost.post, store, now, intercepts);
  if (threadViewPost.parent) captureThreadViewPostOrVariants(threadViewPost.parent, {
    threadStart: compactPost?.threadStart
  }, store, now, intercepts);
  if (threadViewPost.replies?.length) {
    for (const reply of threadViewPost.replies) captureThreadViewPostOrVariants(reply, compactPost, store, now, intercepts);
  }
  return compactPost;
}

/**
 * @param {import('@atproto/api').AppBskyFeedDefs.PostView | undefined} postView
 * @param {Map<string, import('./store-data').RepositoryData>} store
 * @param {number} now
 * @param {import('./define-store').Intercepts} [intercepts]
 */
function capturePostView(postView, store, now, intercepts) {
  if (!postView) return;
  captureProfile(postView.author, store, now, intercepts);
  const compactPost = capturePostRecord(postView.author.did, postView.uri, /** @type {*} */postView.record, store, now, intercepts);
  if (!compactPost) return;
  compactPost.likedBy = adjustCountWithPlaceholders(postView.likeCount, compactPost.likedBy);
  compactPost.repostedBy = adjustCountWithPlaceholders(postView.repostCount, compactPost.repostedBy);
  compactPost.labels = capturePostLabels(postView.labels);
  return compactPost;
}

/**
 * @param {number | undefined} count
 * @param {string[] | undefined} array
 */
function adjustCountWithPlaceholders(count, array) {
  if (typeof count !== 'number') return;
  if (!array || array.length < count) {
    if (!array) array = [];
    for (let i = array.length; i < count; i++) {
      array.push('?');
    }
  } else if (array.length > count) {
    let setLength = count;
    // do not remove non-placeholder likes
    while (array[setLength - 1] !== '?') setLength++;
    if (setLength < array.length) array.length = setLength;
  }
  return array;
}

/**
 * @param {import('@atproto/api').AppBskyFeedDefs.PostView['labels'] | undefined} labels
 */
function capturePostLabels(labels) {
  if (!labels?.length) return;
  /** @type {Record<string, string>} */
  let labelsObj = {};
  for (const lab of labels) {
    if (lab.neg) continue;
    labelsObj[lab.val] = lab.cts;
  }
  return labelsObj;
}

/**
 * @param {string | null | undefined} postURI
 * @param {Map<string, import('./store-data').RepositoryData>} store
 */
function getPostOrPlaceholder(postURI, store) {
  if (!postURI) return;
  const shortDID = breakFeedURIPostOnly(postURI)?.shortDID;
  if (!shortDID) return;
  let repoData = store.get(shortDID);
  if (!repoData) store.set(shortDID, repoData = createRepoData(shortDID));
  const existingPost = repoData.posts.get(postURI);
  if (existingPost) return existingPost;
  const speculativePost = createSpeculativePost(shortDID, postURI);
  repoData.posts.set(postURI, speculativePost);
  return speculativePost;
}

// @ts-check

/**
 * @typedef {{
 *  shortDID: string,
 *  profile: import('.').CompactProfile | undefined,
 *  posts: Map<string, import('.').CompactPost>,
 * }} RepositoryData
 */

// TODO: may need lastAccesses in RepositoryData?
//  *  postLastAccesses: Map<string, number[]>,
//  * lastAccesses: number[]

function storeData() {
  /**
   * @type {Map<string, RepositoryData>}
   */
  const repos = new Map();
  return {
    repos
  };
}

// @ts-check


/**
 * @typedef {{
 *  post?: (post: import('.').CompactPost) => void,
 *  profile?: (profile: import('.').CompactProfile) => void
 * }} Intercepts
 */

/**
 * @param {Intercepts} [intercepts]
 */
function defineStore(intercepts) {
  const store = storeData();
  return {
    captureRecord,
    captureThreadView,
    capturePostView: capturePostView$1,
    captureProfileView,
    capturePLCDirectoryEntries,
    repos: store.repos
  };

  /**
   * @param {import('../firehose').FirehoseRecord} record
   * @param {number} now
   */
  function captureRecord(record, now) {
    return captureAllRecords(record.repo, record.uri, record, store.repos, now, intercepts);
  }

  /**
   * @param {import('@atproto/api').AppBskyFeedDefs.ThreadViewPost} threadView
   * @param {number} now
   */
  function captureThreadView(threadView, now) {
    return captureThread(threadView, store.repos, now, intercepts);
  }

  /**
   * @param {import('@atproto/api').AppBskyFeedDefs.PostView} postView
   * @param {number} now
   */
  function capturePostView$1(postView, now) {
    return capturePostView(postView, store.repos, now, intercepts);
  }

  /**
   * @param {import('@atproto/api').AppBskyActorDefs.ProfileViewDetailed} profileView
   * @param {number} now
   */
  function captureProfileView(profileView, now) {
    return captureProfile(profileView, store.repos, now);
  }

  /**
   * @param {(PLCDirectoryEntry | PLCDirectoryAuditLogEntry)[]} recs
   */
  function capturePLCDirectoryEntries(recs) {
    return capturePLCDirectoryEntriesForStore(recs, store.repos, intercepts);
  }
}

/**
 * @typedef {{
 *  did: string,
 *  cid: string,
 *  nullified: boolean,
 *  createdAt: string,
 *  operation: {
 *    type: 'create' | 'plc_operation',
 *    sig: string,
 *    alsoKnownAs?: string[],
 *    handle?: string,
 *    prev: string | null,
 *    service?: string,
 *    services?: {
 *      atproto_pds?: {
 *        type: 'AtprotoPersonalDataServer',
 *        endpoint: string
 *      }
 *    },
 *    rotationKeys: any[],
 *    verificationMethods: {}
 *  }
 * }} PLCDirectoryEntry
 */

/**
 * @typedef {{
 *   did: string,
 *   operation: {
 *     sig: string,
 *     type: 'plc_operation' | string,
 *     services: {
 *       atproto_pds: {
 *         type: 'AtprotoPersonalDataServer' | string,
 *         endpoint: 'https://bsky.social' | string
 *      }
 *     },
 *     alsoKnownAs: ('at://mihailik.bsky.social' | string)[]
 *     rotationKeys: string[],
 *     verificationMethods: { atproto: string }
 *  },
 *  cid: string,
 *  nullified: boolean,
 *  createdAt: '2023-06-23T10:02:29.289Z' | string
 * }} PLCDirectoryAuditLogEntry
 */

// @ts-check

/**
 * @typedef {{
 *  shortDID: string,
 *  uri: string,
 *  placeholder?: boolean,
 *  text: string | undefined,
 *  facets: CompactFacet[] | undefined,
 *  embeds: CompactEmbed[] | undefined,
 *  quoting: string[] | undefined,
 *  threadStart: string | undefined,
 *  replyTo: string | undefined,
 *  words: string[] | undefined,
 *  repostedBy: string[] | undefined,
 *  likedBy: string[] | undefined,
 *  labels: Record<string, string> | undefined,
 *  asOf: number | undefined
 * }} CompactPost
 */

/**
 * @param {any} obj
 * @returns {obj is CompactPost}
 */
function isCompactPost(obj) {
  if (!obj) return false;
  if (typeof obj !== 'object') return false;
  return typeof obj.shortDID === 'string' && typeof obj.uri === 'string' && (obj.placeholder || typeof obj.text === 'string' || obj.embeds || obj.asOf);
}

const atproto = atproto_api_import;

// checkApplyGlobal();

// function checkApplyGlobal() {
//   if (typeof process !== 'undefined' && typeof process?.exit === 'function') {
//     if (typeof module !== 'undefined' && module?.exports) {
//       for (const key in all) {
//         module.exports[key] = all[key];
//       }
//     }
//     return;
//   }

//   if (typeof window !== 'undefined' && window) {
//     window['coldsky'] = all;
//   } else if (typeof global !== 'undefined' && global) {
//     global['coldsky'] = all;
//   }
// }

export { BSKY_NETWORK_URL, BSKY_PUBLIC_URL, BSKY_SOCIAL_URL, ColdskyAgent, atproto, breakFeedURI, breakFeedURIPostOnly, breakIntoWords, breakPostURL, defineCacheIndexedDBStore, defineCachedStore, defineStore, detectProfileURL, detectWordStartsNormalized, ensureCborXExtended, firehose$1 as firehose, firehoseRecords, firehoseShortDIDs, getFeedBlobUrl, getFeedVideoBlobUrl, getProfileBlobUrl, isCompactPost, isPromise, known$Types, likelyDID, makeBskyPostURL, makeFeedUri, parseTimestampOffset, plcDirectoryCompact, plcDirectoryHistoryCompact, plcDirectoryHistoryRaw, plcDirectoryRaw, readCAR, shortenDID, shortenHandle, shortenPDS, throttledAsyncCache, timestampOffsetToString, unwrapShortDID, unwrapShortHandle, unwrapShortPDS, version };
//# sourceMappingURL=libs.js.map

(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __knownSymbol = (name2, symbol) => {
    return (symbol = Symbol[name2]) ? symbol : Symbol.for("Symbol." + name2);
  };
  var __pow = Math.pow;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __objRest = (source, exclude) => {
    var target2 = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target2[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target2[prop] = source[prop];
      }
    return target2;
  };
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target2, all2) => {
    for (var name2 in all2)
      __defProp(target2, name2, { get: all2[name2], enumerable: true });
  };
  var __copyProps = (to, from6, except, desc) => {
    if (from6 && typeof from6 === "object" || typeof from6 === "function") {
      for (let key of __getOwnPropNames(from6))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from6[key], enumerable: !(desc = __getOwnPropDesc(from6, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target2, "default", { value: mod, enumerable: true }) : target2,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var __await = function(promise, isYieldStar) {
    this[0] = promise;
    this[1] = isYieldStar;
  };
  var __asyncGenerator = (__this, __arguments, generator) => {
    var resume = (k, v, yes, no) => {
      try {
        var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;
        Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === "return" ? k : "next", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume("throw", e, yes, no));
      } catch (e) {
        no(e);
      }
    };
    var method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no));
    var it = {};
    return generator = generator.apply(__this, __arguments), it[__knownSymbol("asyncIterator")] = () => it, method("next"), method("throw"), method("return"), it;
  };
  var __yieldStar = (value) => {
    var obj = value[__knownSymbol("asyncIterator")];
    var isAwait = false;
    var method;
    var it = {};
    if (obj == null) {
      obj = value[__knownSymbol("iterator")]();
      method = (k) => it[k] = (x) => obj[k](x);
    } else {
      obj = obj.call(value);
      method = (k) => it[k] = (v) => {
        if (isAwait) {
          isAwait = false;
          if (k === "throw")
            throw v;
          return v;
        }
        isAwait = true;
        return {
          done: false,
          value: new __await(new Promise((resolve) => {
            var x = obj[k](v);
            if (!(x instanceof Object))
              throw TypeError("Object expected");
            resolve(x);
          }), 1)
        };
      };
    }
    return it[__knownSymbol("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x) => {
      throw x;
    }, "return" in obj && method("return"), it;
  };
  var __forAwait = (obj, it, method) => (it = obj[__knownSymbol("asyncIterator")]) ? it.call(obj) : (obj = obj[__knownSymbol("iterator")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method("next"), method("return"), it);

  // node_modules/@atproto/syntax/dist/handle.js
  var require_handle = __commonJS({
    "node_modules/@atproto/syntax/dist/handle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DisallowedDomainError = exports.UnsupportedDomainError = exports.ReservedHandleError = exports.InvalidHandleError = exports.isValidTld = exports.isValidHandle = exports.normalizeAndEnsureValidHandle = exports.normalizeHandle = exports.ensureValidHandleRegex = exports.ensureValidHandle = exports.DISALLOWED_TLDS = exports.INVALID_HANDLE = void 0;
      exports.INVALID_HANDLE = "handle.invalid";
      exports.DISALLOWED_TLDS = [
        ".local",
        ".arpa",
        ".invalid",
        ".localhost",
        ".internal",
        ".example",
        ".alt",
        // policy could concievably change on ".onion" some day
        ".onion"
        // NOTE: .test is allowed in testing and devopment. In practical terms
        // "should" "never" actually resolve and get registered in production
      ];
      var ensureValidHandle = (handle) => {
        if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {
          throw new InvalidHandleError("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");
        }
        if (handle.length > 253) {
          throw new InvalidHandleError("Handle is too long (253 chars max)");
        }
        const labels = handle.split(".");
        if (labels.length < 2) {
          throw new InvalidHandleError("Handle domain needs at least two parts");
        }
        for (let i = 0; i < labels.length; i++) {
          const l = labels[i];
          if (l.length < 1) {
            throw new InvalidHandleError("Handle parts can not be empty");
          }
          if (l.length > 63) {
            throw new InvalidHandleError("Handle part too long (max 63 chars)");
          }
          if (l.endsWith("-") || l.startsWith("-")) {
            throw new InvalidHandleError("Handle parts can not start or end with hyphens");
          }
          if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {
            throw new InvalidHandleError("Handle final component (TLD) must start with ASCII letter");
          }
        }
      };
      exports.ensureValidHandle = ensureValidHandle;
      var ensureValidHandleRegex = (handle) => {
        if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(handle)) {
          throw new InvalidHandleError("Handle didn't validate via regex");
        }
        if (handle.length > 253) {
          throw new InvalidHandleError("Handle is too long (253 chars max)");
        }
      };
      exports.ensureValidHandleRegex = ensureValidHandleRegex;
      var normalizeHandle = (handle) => {
        return handle.toLowerCase();
      };
      exports.normalizeHandle = normalizeHandle;
      var normalizeAndEnsureValidHandle = (handle) => {
        const normalized = (0, exports.normalizeHandle)(handle);
        (0, exports.ensureValidHandle)(normalized);
        return normalized;
      };
      exports.normalizeAndEnsureValidHandle = normalizeAndEnsureValidHandle;
      var isValidHandle = (handle) => {
        try {
          (0, exports.ensureValidHandle)(handle);
        } catch (err) {
          if (err instanceof InvalidHandleError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidHandle = isValidHandle;
      var isValidTld = (handle) => {
        return !exports.DISALLOWED_TLDS.some((domain) => handle.endsWith(domain));
      };
      exports.isValidTld = isValidTld;
      var InvalidHandleError = class extends Error {
      };
      exports.InvalidHandleError = InvalidHandleError;
      var ReservedHandleError = class extends Error {
      };
      exports.ReservedHandleError = ReservedHandleError;
      var UnsupportedDomainError = class extends Error {
      };
      exports.UnsupportedDomainError = UnsupportedDomainError;
      var DisallowedDomainError = class extends Error {
      };
      exports.DisallowedDomainError = DisallowedDomainError;
    }
  });

  // node_modules/@atproto/syntax/dist/did.js
  var require_did = __commonJS({
    "node_modules/@atproto/syntax/dist/did.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidDidError = exports.ensureValidDidRegex = exports.ensureValidDid = void 0;
      var ensureValidDid = (did) => {
        if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {
          throw new InvalidDidError("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");
        }
        const parts = did.split(":");
        if (parts.length < 3) {
          throw new InvalidDidError("DID requires prefix, method, and method-specific content");
        }
        if (parts[0] != "did") {
          throw new InvalidDidError('DID requires "did:" prefix');
        }
        if (!/^[a-z]+$/.test(parts[1])) {
          throw new InvalidDidError("DID method must be lower-case letters");
        }
        if (did.endsWith(":") || did.endsWith("%")) {
          throw new InvalidDidError('DID can not end with ":" or "%"');
        }
        if (did.length > 2 * 1024) {
          throw new InvalidDidError("DID is too long (2048 chars max)");
        }
      };
      exports.ensureValidDid = ensureValidDid;
      var ensureValidDidRegex = (did) => {
        if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {
          throw new InvalidDidError("DID didn't validate via regex");
        }
        if (did.length > 2 * 1024) {
          throw new InvalidDidError("DID is too long (2048 chars max)");
        }
      };
      exports.ensureValidDidRegex = ensureValidDidRegex;
      var InvalidDidError = class extends Error {
      };
      exports.InvalidDidError = InvalidDidError;
    }
  });

  // node_modules/@atproto/syntax/dist/nsid.js
  var require_nsid = __commonJS({
    "node_modules/@atproto/syntax/dist/nsid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidNsidError = exports.ensureValidNsidRegex = exports.ensureValidNsid = exports.NSID = void 0;
      var NSID = class _NSID {
        static parse(nsid) {
          return new _NSID(nsid);
        }
        static create(authority, name2) {
          const segments = [...authority.split(".").reverse(), name2].join(".");
          return new _NSID(segments);
        }
        static isValid(nsid) {
          try {
            _NSID.parse(nsid);
            return true;
          } catch (e) {
            return false;
          }
        }
        constructor(nsid) {
          Object.defineProperty(this, "segments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          (0, exports.ensureValidNsid)(nsid);
          this.segments = nsid.split(".");
        }
        get authority() {
          return this.segments.slice(0, this.segments.length - 1).reverse().join(".");
        }
        get name() {
          return this.segments.at(this.segments.length - 1);
        }
        toString() {
          return this.segments.join(".");
        }
      };
      exports.NSID = NSID;
      var ensureValidNsid = (nsid) => {
        const toCheck = nsid;
        if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
          throw new InvalidNsidError("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");
        }
        if (toCheck.length > 253 + 1 + 63) {
          throw new InvalidNsidError("NSID is too long (317 chars max)");
        }
        const labels = toCheck.split(".");
        if (labels.length < 3) {
          throw new InvalidNsidError("NSID needs at least three parts");
        }
        for (let i = 0; i < labels.length; i++) {
          const l = labels[i];
          if (l.length < 1) {
            throw new InvalidNsidError("NSID parts can not be empty");
          }
          if (l.length > 63) {
            throw new InvalidNsidError("NSID part too long (max 63 chars)");
          }
          if (l.endsWith("-") || l.startsWith("-")) {
            throw new InvalidNsidError("NSID parts can not start or end with hyphen");
          }
          if (/^[0-9]/.test(l) && i == 0) {
            throw new InvalidNsidError("NSID first part may not start with a digit");
          }
          if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) {
            throw new InvalidNsidError("NSID name part must be only letters");
          }
        }
      };
      exports.ensureValidNsid = ensureValidNsid;
      var ensureValidNsidRegex = (nsid) => {
        if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(nsid)) {
          throw new InvalidNsidError("NSID didn't validate via regex");
        }
        if (nsid.length > 253 + 1 + 63) {
          throw new InvalidNsidError("NSID is too long (317 chars max)");
        }
      };
      exports.ensureValidNsidRegex = ensureValidNsidRegex;
      var InvalidNsidError = class extends Error {
      };
      exports.InvalidNsidError = InvalidNsidError;
    }
  });

  // node_modules/@atproto/syntax/dist/aturi_validation.js
  var require_aturi_validation = __commonJS({
    "node_modules/@atproto/syntax/dist/aturi_validation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ensureValidAtUriRegex = exports.ensureValidAtUri = void 0;
      var handle_1 = require_handle();
      var did_1 = require_did();
      var nsid_1 = require_nsid();
      var ensureValidAtUri = (uri) => {
        const uriParts = uri.split("#");
        if (uriParts.length > 2) {
          throw new Error('ATURI can have at most one "#", separating fragment out');
        }
        const fragmentPart = uriParts[1] || null;
        uri = uriParts[0];
        if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {
          throw new Error("Disallowed characters in ATURI (ASCII)");
        }
        const parts = uri.split("/");
        if (parts.length >= 3 && (parts[0] != "at:" || parts[1].length != 0)) {
          throw new Error('ATURI must start with "at://"');
        }
        if (parts.length < 3) {
          throw new Error("ATURI requires at least method and authority sections");
        }
        try {
          if (parts[2].startsWith("did:")) {
            (0, did_1.ensureValidDid)(parts[2]);
          } else {
            (0, handle_1.ensureValidHandle)(parts[2]);
          }
        } catch (e) {
          throw new Error("ATURI authority must be a valid handle or DID");
        }
        if (parts.length >= 4) {
          if (parts[3].length == 0) {
            throw new Error("ATURI can not have a slash after authority without a path segment");
          }
          try {
            (0, nsid_1.ensureValidNsid)(parts[3]);
          } catch (e) {
            throw new Error("ATURI requires first path segment (if supplied) to be valid NSID");
          }
        }
        if (parts.length >= 5) {
          if (parts[4].length == 0) {
            throw new Error("ATURI can not have a slash after collection, unless record key is provided");
          }
        }
        if (parts.length >= 6) {
          throw new Error("ATURI path can have at most two parts, and no trailing slash");
        }
        if (uriParts.length >= 2 && fragmentPart == null) {
          throw new Error("ATURI fragment must be non-empty and start with slash");
        }
        if (fragmentPart != null) {
          if (fragmentPart.length == 0 || fragmentPart[0] != "/") {
            throw new Error("ATURI fragment must be non-empty and start with slash");
          }
          if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
            throw new Error("Disallowed characters in ATURI fragment (ASCII)");
          }
        }
        if (uri.length > 8 * 1024) {
          throw new Error("ATURI is far too long");
        }
      };
      exports.ensureValidAtUri = ensureValidAtUri;
      var ensureValidAtUriRegex = (uri) => {
        const aturiRegex = new RegExp("^at:\\/\\/(?<authority>[a-zA-Z0-9._:%-]+)(\\/(?<collection>[a-zA-Z0-9-.]+)(\\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\\/[a-zA-Z0-9._~:@!$&%')(*+,;=\\-[\\]/\\\\]*))?$");
        const rm = uri.match(aturiRegex);
        if (!rm || !rm.groups) {
          throw new Error("ATURI didn't validate via regex");
        }
        const groups = rm.groups;
        try {
          (0, handle_1.ensureValidHandleRegex)(groups.authority);
        } catch (e) {
          try {
            (0, did_1.ensureValidDidRegex)(groups.authority);
          } catch (e2) {
            throw new Error("ATURI authority must be a valid handle or DID");
          }
        }
        if (groups.collection) {
          try {
            (0, nsid_1.ensureValidNsidRegex)(groups.collection);
          } catch (e) {
            throw new Error("ATURI collection path segment must be a valid NSID");
          }
        }
        if (uri.length > 8 * 1024) {
          throw new Error("ATURI is far too long");
        }
      };
      exports.ensureValidAtUriRegex = ensureValidAtUriRegex;
    }
  });

  // node_modules/@atproto/syntax/dist/aturi.js
  var require_aturi = __commonJS({
    "node_modules/@atproto/syntax/dist/aturi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AtUri = exports.ATP_URI_REGEX = void 0;
      __exportStar(require_aturi_validation(), exports);
      exports.ATP_URI_REGEX = // proto-    --did--------------   --name----------------   --path----   --query--   --hash--
      /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
      var RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
      var AtUri = class _AtUri {
        constructor(uri, base5) {
          Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "host", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "pathname", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "searchParams", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          let parsed;
          if (base5) {
            parsed = parse(base5);
            if (!parsed) {
              throw new Error(`Invalid at uri: ${base5}`);
            }
            const relativep = parseRelative(uri);
            if (!relativep) {
              throw new Error(`Invalid path: ${uri}`);
            }
            Object.assign(parsed, relativep);
          } else {
            parsed = parse(uri);
            if (!parsed) {
              throw new Error(`Invalid at uri: ${uri}`);
            }
          }
          this.hash = parsed.hash;
          this.host = parsed.host;
          this.pathname = parsed.pathname;
          this.searchParams = parsed.searchParams;
        }
        static make(handleOrDid, collection, rkey) {
          let str = handleOrDid;
          if (collection)
            str += "/" + collection;
          if (rkey)
            str += "/" + rkey;
          return new _AtUri(str);
        }
        get protocol() {
          return "at:";
        }
        get origin() {
          return `at://${this.host}`;
        }
        get hostname() {
          return this.host;
        }
        set hostname(v) {
          this.host = v;
        }
        get search() {
          return this.searchParams.toString();
        }
        set search(v) {
          this.searchParams = new URLSearchParams(v);
        }
        get collection() {
          return this.pathname.split("/").filter(Boolean)[0] || "";
        }
        set collection(v) {
          const parts = this.pathname.split("/").filter(Boolean);
          parts[0] = v;
          this.pathname = parts.join("/");
        }
        get rkey() {
          return this.pathname.split("/").filter(Boolean)[1] || "";
        }
        set rkey(v) {
          const parts = this.pathname.split("/").filter(Boolean);
          if (!parts[0])
            parts[0] = "undefined";
          parts[1] = v;
          this.pathname = parts.join("/");
        }
        get href() {
          return this.toString();
        }
        toString() {
          let path = this.pathname || "/";
          if (!path.startsWith("/")) {
            path = `/${path}`;
          }
          let qs = this.searchParams.toString();
          if (qs && !qs.startsWith("?")) {
            qs = `?${qs}`;
          }
          let hash = this.hash;
          if (hash && !hash.startsWith("#")) {
            hash = `#${hash}`;
          }
          return `at://${this.host}${path}${qs}${hash}`;
        }
      };
      exports.AtUri = AtUri;
      function parse(str) {
        const match = exports.ATP_URI_REGEX.exec(str);
        if (match) {
          return {
            hash: match[5] || "",
            host: match[2] || "",
            pathname: match[3] || "",
            searchParams: new URLSearchParams(match[4] || "")
          };
        }
        return void 0;
      }
      function parseRelative(str) {
        const match = RELATIVE_REGEX.exec(str);
        if (match) {
          return {
            hash: match[3] || "",
            pathname: match[1] || "",
            searchParams: new URLSearchParams(match[2] || "")
          };
        }
        return void 0;
      }
    }
  });

  // node_modules/@atproto/syntax/dist/tid.js
  var require_tid = __commonJS({
    "node_modules/@atproto/syntax/dist/tid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidTidError = exports.isValidTid = exports.ensureValidTid = void 0;
      var ensureValidTid = (tid) => {
        if (tid.length != 13) {
          throw new InvalidTidError("TID must be 13 characters");
        }
        if (!/^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/.test(tid)) {
          throw new InvalidTidError("TID syntax not valid (regex)");
        }
      };
      exports.ensureValidTid = ensureValidTid;
      var isValidTid = (tid) => {
        try {
          (0, exports.ensureValidTid)(tid);
        } catch (err) {
          if (err instanceof InvalidTidError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidTid = isValidTid;
      var InvalidTidError = class extends Error {
      };
      exports.InvalidTidError = InvalidTidError;
    }
  });

  // node_modules/@atproto/syntax/dist/recordkey.js
  var require_recordkey = __commonJS({
    "node_modules/@atproto/syntax/dist/recordkey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidRecordKeyError = exports.isValidRecordKey = exports.ensureValidRecordKey = void 0;
      var ensureValidRecordKey = (rkey) => {
        if (rkey.length > 512 || rkey.length < 1) {
          throw new InvalidRecordKeyError("record key must be 1 to 512 characters");
        }
        if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(rkey)) {
          throw new InvalidRecordKeyError("record key syntax not valid (regex)");
        }
        if (rkey == "." || rkey == "..")
          throw new InvalidRecordKeyError('record key can not be "." or ".."');
      };
      exports.ensureValidRecordKey = ensureValidRecordKey;
      var isValidRecordKey = (rkey) => {
        try {
          (0, exports.ensureValidRecordKey)(rkey);
        } catch (err) {
          if (err instanceof InvalidRecordKeyError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidRecordKey = isValidRecordKey;
      var InvalidRecordKeyError = class extends Error {
      };
      exports.InvalidRecordKeyError = InvalidRecordKeyError;
    }
  });

  // node_modules/@atproto/syntax/dist/datetime.js
  var require_datetime = __commonJS({
    "node_modules/@atproto/syntax/dist/datetime.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidDatetimeError = exports.normalizeDatetimeAlways = exports.normalizeDatetime = exports.isValidDatetime = exports.ensureValidDatetime = void 0;
      var ensureValidDatetime = (dtStr) => {
        const date = new Date(dtStr);
        if (isNaN(date.getTime())) {
          throw new InvalidDatetimeError("datetime did not parse as ISO 8601");
        }
        if (date.toISOString().startsWith("-")) {
          throw new InvalidDatetimeError("datetime normalized to a negative time");
        }
        if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(dtStr)) {
          throw new InvalidDatetimeError("datetime didn't validate via regex");
        }
        if (dtStr.length > 64) {
          throw new InvalidDatetimeError("datetime is too long (64 chars max)");
        }
        if (dtStr.endsWith("-00:00")) {
          throw new InvalidDatetimeError('datetime can not use "-00:00" for UTC timezone');
        }
        if (dtStr.startsWith("000")) {
          throw new InvalidDatetimeError("datetime so close to year zero not allowed");
        }
      };
      exports.ensureValidDatetime = ensureValidDatetime;
      var isValidDatetime = (dtStr) => {
        try {
          (0, exports.ensureValidDatetime)(dtStr);
        } catch (err) {
          if (err instanceof InvalidDatetimeError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidDatetime = isValidDatetime;
      var normalizeDatetime = (dtStr) => {
        if ((0, exports.isValidDatetime)(dtStr)) {
          const outStr = new Date(dtStr).toISOString();
          if ((0, exports.isValidDatetime)(outStr)) {
            return outStr;
          }
        }
        if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(dtStr)) {
          const date2 = /* @__PURE__ */ new Date(dtStr + "Z");
          if (!isNaN(date2.getTime())) {
            const tzStr = date2.toISOString();
            if ((0, exports.isValidDatetime)(tzStr)) {
              return tzStr;
            }
          }
        }
        const date = new Date(dtStr);
        if (isNaN(date.getTime())) {
          throw new InvalidDatetimeError("datetime did not parse as any timestamp format");
        }
        const isoStr = date.toISOString();
        if ((0, exports.isValidDatetime)(isoStr)) {
          return isoStr;
        } else {
          throw new InvalidDatetimeError("datetime normalized to invalid timestamp string");
        }
      };
      exports.normalizeDatetime = normalizeDatetime;
      var normalizeDatetimeAlways = (dtStr) => {
        try {
          return (0, exports.normalizeDatetime)(dtStr);
        } catch (err) {
          if (err instanceof InvalidDatetimeError) {
            return (/* @__PURE__ */ new Date(0)).toISOString();
          }
          throw err;
        }
      };
      exports.normalizeDatetimeAlways = normalizeDatetimeAlways;
      var InvalidDatetimeError = class extends Error {
      };
      exports.InvalidDatetimeError = InvalidDatetimeError;
    }
  });

  // node_modules/@atproto/syntax/dist/index.js
  var require_dist = __commonJS({
    "node_modules/@atproto/syntax/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_handle(), exports);
      __exportStar(require_did(), exports);
      __exportStar(require_nsid(), exports);
      __exportStar(require_aturi(), exports);
      __exportStar(require_tid(), exports);
      __exportStar(require_recordkey(), exports);
      __exportStar(require_datetime(), exports);
    }
  });

  // node_modules/zod/lib/helpers/util.js
  var require_util = __commonJS({
    "node_modules/zod/lib/helpers/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
      var util;
      (function(util2) {
        util2.assertEqual = (val) => val;
        function assertIs(_arg) {
        }
        util2.assertIs = assertIs;
        function assertNever(_x) {
          throw new Error();
        }
        util2.assertNever = assertNever;
        util2.arrayToEnum = (items) => {
          const obj = {};
          for (const item of items) {
            obj[item] = item;
          }
          return obj;
        };
        util2.getValidEnumValues = (obj) => {
          const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
          const filtered = {};
          for (const k of validKeys) {
            filtered[k] = obj[k];
          }
          return util2.objectValues(filtered);
        };
        util2.objectValues = (obj) => {
          return util2.objectKeys(obj).map(function(e) {
            return obj[e];
          });
        };
        util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
          const keys = [];
          for (const key in object) {
            if (Object.prototype.hasOwnProperty.call(object, key)) {
              keys.push(key);
            }
          }
          return keys;
        };
        util2.find = (arr, checker) => {
          for (const item of arr) {
            if (checker(item))
              return item;
          }
          return void 0;
        };
        util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
        function joinValues(array, separator = " | ") {
          return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
        }
        util2.joinValues = joinValues;
        util2.jsonStringifyReplacer = (_, value) => {
          if (typeof value === "bigint") {
            return value.toString();
          }
          return value;
        };
      })(util = exports.util || (exports.util = {}));
      var objectUtil;
      (function(objectUtil2) {
        objectUtil2.mergeShapes = (first, second) => {
          return __spreadValues(__spreadValues({}, first), second);
        };
      })(objectUtil = exports.objectUtil || (exports.objectUtil = {}));
      exports.ZodParsedType = util.arrayToEnum([
        "string",
        "nan",
        "number",
        "integer",
        "float",
        "boolean",
        "date",
        "bigint",
        "symbol",
        "function",
        "undefined",
        "null",
        "array",
        "object",
        "unknown",
        "promise",
        "void",
        "never",
        "map",
        "set"
      ]);
      var getParsedType = (data) => {
        const t = typeof data;
        switch (t) {
          case "undefined":
            return exports.ZodParsedType.undefined;
          case "string":
            return exports.ZodParsedType.string;
          case "number":
            return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
          case "boolean":
            return exports.ZodParsedType.boolean;
          case "function":
            return exports.ZodParsedType.function;
          case "bigint":
            return exports.ZodParsedType.bigint;
          case "symbol":
            return exports.ZodParsedType.symbol;
          case "object":
            if (Array.isArray(data)) {
              return exports.ZodParsedType.array;
            }
            if (data === null) {
              return exports.ZodParsedType.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
              return exports.ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
              return exports.ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
              return exports.ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
              return exports.ZodParsedType.date;
            }
            return exports.ZodParsedType.object;
          default:
            return exports.ZodParsedType.unknown;
        }
      };
      exports.getParsedType = getParsedType;
    }
  });

  // node_modules/zod/lib/ZodError.js
  var require_ZodError = __commonJS({
    "node_modules/zod/lib/ZodError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
      var util_1 = require_util();
      exports.ZodIssueCode = util_1.util.arrayToEnum([
        "invalid_type",
        "invalid_literal",
        "custom",
        "invalid_union",
        "invalid_union_discriminator",
        "invalid_enum_value",
        "unrecognized_keys",
        "invalid_arguments",
        "invalid_return_type",
        "invalid_date",
        "invalid_string",
        "too_small",
        "too_big",
        "invalid_intersection_types",
        "not_multiple_of",
        "not_finite"
      ]);
      var quotelessJson = (obj) => {
        const json = JSON.stringify(obj, null, 2);
        return json.replace(/"([^"]+)":/g, "$1:");
      };
      exports.quotelessJson = quotelessJson;
      var ZodError = class extends Error {
        constructor(issues) {
          super();
          this.issues = [];
          this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
          };
          this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
          };
          const actualProto = new.target.prototype;
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
          } else {
            this.__proto__ = actualProto;
          }
          this.name = "ZodError";
          this.issues = issues;
        }
        get errors() {
          return this.issues;
        }
        format(_mapper) {
          const mapper = _mapper || function(issue) {
            return issue.message;
          };
          const fieldErrors = { _errors: [] };
          const processError = (error) => {
            for (const issue of error.issues) {
              if (issue.code === "invalid_union") {
                issue.unionErrors.map(processError);
              } else if (issue.code === "invalid_return_type") {
                processError(issue.returnTypeError);
              } else if (issue.code === "invalid_arguments") {
                processError(issue.argumentsError);
              } else if (issue.path.length === 0) {
                fieldErrors._errors.push(mapper(issue));
              } else {
                let curr = fieldErrors;
                let i = 0;
                while (i < issue.path.length) {
                  const el = issue.path[i];
                  const terminal = i === issue.path.length - 1;
                  if (!terminal) {
                    curr[el] = curr[el] || { _errors: [] };
                  } else {
                    curr[el] = curr[el] || { _errors: [] };
                    curr[el]._errors.push(mapper(issue));
                  }
                  curr = curr[el];
                  i++;
                }
              }
            }
          };
          processError(this);
          return fieldErrors;
        }
        toString() {
          return this.message;
        }
        get message() {
          return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
        }
        get isEmpty() {
          return this.issues.length === 0;
        }
        flatten(mapper = (issue) => issue.message) {
          const fieldErrors = {};
          const formErrors = [];
          for (const sub of this.issues) {
            if (sub.path.length > 0) {
              fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
              fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
              formErrors.push(mapper(sub));
            }
          }
          return { formErrors, fieldErrors };
        }
        get formErrors() {
          return this.flatten();
        }
      };
      exports.ZodError = ZodError;
      ZodError.create = (issues) => {
        const error = new ZodError(issues);
        return error;
      };
    }
  });

  // node_modules/zod/lib/locales/en.js
  var require_en = __commonJS({
    "node_modules/zod/lib/locales/en.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util();
      var ZodError_1 = require_ZodError();
      var errorMap = (issue, _ctx) => {
        let message;
        switch (issue.code) {
          case ZodError_1.ZodIssueCode.invalid_type:
            if (issue.received === util_1.ZodParsedType.undefined) {
              message = "Required";
            } else {
              message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
          case ZodError_1.ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
            break;
          case ZodError_1.ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
            break;
          case ZodError_1.ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
          case ZodError_1.ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
            break;
          case ZodError_1.ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
          case ZodError_1.ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
          case ZodError_1.ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
          case ZodError_1.ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
          case ZodError_1.ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
              if ("includes" in issue.validation) {
                message = `Invalid input: must include "${issue.validation.includes}"`;
                if (typeof issue.validation.position === "number") {
                  message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                }
              } else if ("startsWith" in issue.validation) {
                message = `Invalid input: must start with "${issue.validation.startsWith}"`;
              } else if ("endsWith" in issue.validation) {
                message = `Invalid input: must end with "${issue.validation.endsWith}"`;
              } else {
                util_1.util.assertNever(issue.validation);
              }
            } else if (issue.validation !== "regex") {
              message = `Invalid ${issue.validation}`;
            } else {
              message = "Invalid";
            }
            break;
          case ZodError_1.ZodIssueCode.too_small:
            if (issue.type === "array")
              message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
              message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
              message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
              message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else
              message = "Invalid input";
            break;
          case ZodError_1.ZodIssueCode.too_big:
            if (issue.type === "array")
              message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
              message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
              message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
              message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
              message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
              message = "Invalid input";
            break;
          case ZodError_1.ZodIssueCode.custom:
            message = `Invalid input`;
            break;
          case ZodError_1.ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
          case ZodError_1.ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
          case ZodError_1.ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
          default:
            message = _ctx.defaultError;
            util_1.util.assertNever(issue);
        }
        return { message };
      };
      exports.default = errorMap;
    }
  });

  // node_modules/zod/lib/errors.js
  var require_errors = __commonJS({
    "node_modules/zod/lib/errors.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getErrorMap = exports.setErrorMap = exports.defaultErrorMap = void 0;
      var en_1 = __importDefault(require_en());
      exports.defaultErrorMap = en_1.default;
      var overrideErrorMap = en_1.default;
      function setErrorMap(map) {
        overrideErrorMap = map;
      }
      exports.setErrorMap = setErrorMap;
      function getErrorMap() {
        return overrideErrorMap;
      }
      exports.getErrorMap = getErrorMap;
    }
  });

  // node_modules/zod/lib/helpers/parseUtil.js
  var require_parseUtil = __commonJS({
    "node_modules/zod/lib/helpers/parseUtil.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
      var errors_1 = require_errors();
      var en_1 = __importDefault(require_en());
      var makeIssue = (params) => {
        const { data, path, errorMaps, issueData } = params;
        const fullPath = [...path, ...issueData.path || []];
        const fullIssue = __spreadProps(__spreadValues({}, issueData), {
          path: fullPath
        });
        let errorMessage = "";
        const maps = errorMaps.filter((m) => !!m).slice().reverse();
        for (const map of maps) {
          errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
        }
        return __spreadProps(__spreadValues({}, issueData), {
          path: fullPath,
          message: issueData.message || errorMessage
        });
      };
      exports.makeIssue = makeIssue;
      exports.EMPTY_PATH = [];
      function addIssueToContext(ctx, issueData) {
        const issue = (0, exports.makeIssue)({
          issueData,
          data: ctx.data,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            (0, errors_1.getErrorMap)(),
            en_1.default
            // then global default map
          ].filter((x) => !!x)
        });
        ctx.common.issues.push(issue);
      }
      exports.addIssueToContext = addIssueToContext;
      var ParseStatus = class _ParseStatus {
        constructor() {
          this.value = "valid";
        }
        dirty() {
          if (this.value === "valid")
            this.value = "dirty";
        }
        abort() {
          if (this.value !== "aborted")
            this.value = "aborted";
        }
        static mergeArray(status, results) {
          const arrayValue = [];
          for (const s of results) {
            if (s.status === "aborted")
              return exports.INVALID;
            if (s.status === "dirty")
              status.dirty();
            arrayValue.push(s.value);
          }
          return { status: status.value, value: arrayValue };
        }
        static mergeObjectAsync(status, pairs) {
          return __async(this, null, function* () {
            const syncPairs = [];
            for (const pair of pairs) {
              syncPairs.push({
                key: yield pair.key,
                value: yield pair.value
              });
            }
            return _ParseStatus.mergeObjectSync(status, syncPairs);
          });
        }
        static mergeObjectSync(status, pairs) {
          const finalObject = {};
          for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
              return exports.INVALID;
            if (value.status === "aborted")
              return exports.INVALID;
            if (key.status === "dirty")
              status.dirty();
            if (value.status === "dirty")
              status.dirty();
            if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
              finalObject[key.value] = value.value;
            }
          }
          return { status: status.value, value: finalObject };
        }
      };
      exports.ParseStatus = ParseStatus;
      exports.INVALID = Object.freeze({
        status: "aborted"
      });
      var DIRTY = (value) => ({ status: "dirty", value });
      exports.DIRTY = DIRTY;
      var OK = (value) => ({ status: "valid", value });
      exports.OK = OK;
      var isAborted = (x) => x.status === "aborted";
      exports.isAborted = isAborted;
      var isDirty = (x) => x.status === "dirty";
      exports.isDirty = isDirty;
      var isValid = (x) => x.status === "valid";
      exports.isValid = isValid;
      var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
      exports.isAsync = isAsync;
    }
  });

  // node_modules/zod/lib/helpers/typeAliases.js
  var require_typeAliases = __commonJS({
    "node_modules/zod/lib/helpers/typeAliases.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/zod/lib/helpers/errorUtil.js
  var require_errorUtil = __commonJS({
    "node_modules/zod/lib/helpers/errorUtil.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.errorUtil = void 0;
      var errorUtil;
      (function(errorUtil2) {
        errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
        errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
      })(errorUtil = exports.errorUtil || (exports.errorUtil = {}));
    }
  });

  // node_modules/zod/lib/types.js
  var require_types = __commonJS({
    "node_modules/zod/lib/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.date = exports.boolean = exports.bigint = exports.array = exports.any = exports.coerce = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodReadonly = exports.ZodPipeline = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodCatch = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodSymbol = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.ZodType = void 0;
      exports.NEVER = exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.symbol = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.pipeline = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = exports.function = exports.enum = exports.effect = exports.discriminatedUnion = void 0;
      var errors_1 = require_errors();
      var errorUtil_1 = require_errorUtil();
      var parseUtil_1 = require_parseUtil();
      var util_1 = require_util();
      var ZodError_1 = require_ZodError();
      var ParseInputLazyPath = class {
        constructor(parent, value, path, key) {
          this._cachedPath = [];
          this.parent = parent;
          this.data = value;
          this._path = path;
          this._key = key;
        }
        get path() {
          if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
              this._cachedPath.push(...this._path, ...this._key);
            } else {
              this._cachedPath.push(...this._path, this._key);
            }
          }
          return this._cachedPath;
        }
      };
      var handleResult = (ctx, result) => {
        if ((0, parseUtil_1.isValid)(result)) {
          return { success: true, data: result.value };
        } else {
          if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
          }
          return {
            success: false,
            get error() {
              if (this._error)
                return this._error;
              const error = new ZodError_1.ZodError(ctx.common.issues);
              this._error = error;
              return this._error;
            }
          };
        }
      };
      function processCreateParams(params) {
        if (!params)
          return {};
        const { errorMap, invalid_type_error, required_error, description } = params;
        if (errorMap && (invalid_type_error || required_error)) {
          throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
        }
        if (errorMap)
          return { errorMap, description };
        const customMap = (iss, ctx) => {
          if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
          if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
          }
          return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
        };
        return { errorMap: customMap, description };
      }
      var ZodType = class {
        constructor(def) {
          this.spa = this.safeParseAsync;
          this._def = def;
          this.parse = this.parse.bind(this);
          this.safeParse = this.safeParse.bind(this);
          this.parseAsync = this.parseAsync.bind(this);
          this.safeParseAsync = this.safeParseAsync.bind(this);
          this.spa = this.spa.bind(this);
          this.refine = this.refine.bind(this);
          this.refinement = this.refinement.bind(this);
          this.superRefine = this.superRefine.bind(this);
          this.optional = this.optional.bind(this);
          this.nullable = this.nullable.bind(this);
          this.nullish = this.nullish.bind(this);
          this.array = this.array.bind(this);
          this.promise = this.promise.bind(this);
          this.or = this.or.bind(this);
          this.and = this.and.bind(this);
          this.transform = this.transform.bind(this);
          this.brand = this.brand.bind(this);
          this.default = this.default.bind(this);
          this.catch = this.catch.bind(this);
          this.describe = this.describe.bind(this);
          this.pipe = this.pipe.bind(this);
          this.readonly = this.readonly.bind(this);
          this.isNullable = this.isNullable.bind(this);
          this.isOptional = this.isOptional.bind(this);
        }
        get description() {
          return this._def.description;
        }
        _getType(input) {
          return (0, util_1.getParsedType)(input.data);
        }
        _getOrReturnCtx(input, ctx) {
          return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: (0, util_1.getParsedType)(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          };
        }
        _processInputParams(input) {
          return {
            status: new parseUtil_1.ParseStatus(),
            ctx: {
              common: input.parent.common,
              data: input.data,
              parsedType: (0, util_1.getParsedType)(input.data),
              schemaErrorMap: this._def.errorMap,
              path: input.path,
              parent: input.parent
            }
          };
        }
        _parseSync(input) {
          const result = this._parse(input);
          if ((0, parseUtil_1.isAsync)(result)) {
            throw new Error("Synchronous parse encountered promise.");
          }
          return result;
        }
        _parseAsync(input) {
          const result = this._parse(input);
          return Promise.resolve(result);
        }
        parse(data, params) {
          const result = this.safeParse(data, params);
          if (result.success)
            return result.data;
          throw result.error;
        }
        safeParse(data, params) {
          var _a2;
          const ctx = {
            common: {
              issues: [],
              async: (_a2 = params === null || params === void 0 ? void 0 : params.async) !== null && _a2 !== void 0 ? _a2 : false,
              contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: (0, util_1.getParsedType)(data)
          };
          const result = this._parseSync({ data, path: ctx.path, parent: ctx });
          return handleResult(ctx, result);
        }
        parseAsync(data, params) {
          return __async(this, null, function* () {
            const result = yield this.safeParseAsync(data, params);
            if (result.success)
              return result.data;
            throw result.error;
          });
        }
        safeParseAsync(data, params) {
          return __async(this, null, function* () {
            const ctx = {
              common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true
              },
              path: (params === null || params === void 0 ? void 0 : params.path) || [],
              schemaErrorMap: this._def.errorMap,
              parent: null,
              data,
              parsedType: (0, util_1.getParsedType)(data)
            };
            const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
            const result = yield (0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult);
            return handleResult(ctx, result);
          });
        }
        refine(check, message) {
          const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
              return { message };
            } else if (typeof message === "function") {
              return message(val);
            } else {
              return message;
            }
          };
          return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue(__spreadValues({
              code: ZodError_1.ZodIssueCode.custom
            }, getIssueProperties(val)));
            if (typeof Promise !== "undefined" && result instanceof Promise) {
              return result.then((data) => {
                if (!data) {
                  setError();
                  return false;
                } else {
                  return true;
                }
              });
            }
            if (!result) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        refinement(check, refinementData) {
          return this._refinement((val, ctx) => {
            if (!check(val)) {
              ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
              return false;
            } else {
              return true;
            }
          });
        }
        _refinement(refinement) {
          return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement }
          });
        }
        superRefine(refinement) {
          return this._refinement(refinement);
        }
        optional() {
          return ZodOptional.create(this, this._def);
        }
        nullable() {
          return ZodNullable.create(this, this._def);
        }
        nullish() {
          return this.nullable().optional();
        }
        array() {
          return ZodArray.create(this, this._def);
        }
        promise() {
          return ZodPromise.create(this, this._def);
        }
        or(option) {
          return ZodUnion.create([this, option], this._def);
        }
        and(incoming) {
          return ZodIntersection.create(this, incoming, this._def);
        }
        transform(transform) {
          return new ZodEffects(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform }
          }));
        }
        default(def) {
          const defaultValueFunc = typeof def === "function" ? def : () => def;
          return new ZodDefault(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
          }));
        }
        brand() {
          return new ZodBranded(__spreadValues({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this
          }, processCreateParams(this._def)));
        }
        catch(def) {
          const catchValueFunc = typeof def === "function" ? def : () => def;
          return new ZodCatch(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch
          }));
        }
        describe(description) {
          const This = this.constructor;
          return new This(__spreadProps(__spreadValues({}, this._def), {
            description
          }));
        }
        pipe(target2) {
          return ZodPipeline.create(this, target2);
        }
        readonly() {
          return ZodReadonly.create(this);
        }
        isOptional() {
          return this.safeParse(void 0).success;
        }
        isNullable() {
          return this.safeParse(null).success;
        }
      };
      exports.ZodType = ZodType;
      exports.Schema = ZodType;
      exports.ZodSchema = ZodType;
      var cuidRegex = /^c[^\s-]{8,}$/i;
      var cuid2Regex = /^[a-z][a-z0-9]*$/;
      var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
      var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
      var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
      var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
      var emojiRegex;
      var ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
      var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
      var datetimeRegex = (args) => {
        if (args.precision) {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
          }
        } else if (args.precision === 0) {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
          }
        } else {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
          }
        }
      };
      function isValidIP(ip, version5) {
        if ((version5 === "v4" || !version5) && ipv4Regex.test(ip)) {
          return true;
        }
        if ((version5 === "v6" || !version5) && ipv6Regex.test(ip)) {
          return true;
        }
        return false;
      }
      var ZodString = class _ZodString extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = String(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.string) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(
              ctx2,
              {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.string,
                received: ctx2.parsedType
              }
              //
            );
            return parseUtil_1.INVALID;
          }
          const status = new parseUtil_1.ParseStatus();
          let ctx = void 0;
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              if (input.data.length < check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              if (input.data.length > check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "length") {
              const tooBig = input.data.length > check.value;
              const tooSmall = input.data.length < check.value;
              if (tooBig || tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                if (tooBig) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.too_big,
                    maximum: check.value,
                    type: "string",
                    inclusive: true,
                    exact: true,
                    message: check.message
                  });
                } else if (tooSmall) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.too_small,
                    minimum: check.value,
                    type: "string",
                    inclusive: true,
                    exact: true,
                    message: check.message
                  });
                }
                status.dirty();
              }
            } else if (check.kind === "email") {
              if (!emailRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "email",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "emoji") {
              if (!emojiRegex) {
                emojiRegex = new RegExp(_emojiRegex, "u");
              }
              if (!emojiRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "emoji",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "uuid") {
              if (!uuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "uuid",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "cuid") {
              if (!cuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "cuid",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "cuid2") {
              if (!cuid2Regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "cuid2",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "ulid") {
              if (!ulidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "ulid",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "url") {
              try {
                new URL(input.data);
              } catch (_a2) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "url",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "regex") {
              check.regex.lastIndex = 0;
              const testResult = check.regex.test(input.data);
              if (!testResult) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "regex",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "trim") {
              input.data = input.data.trim();
            } else if (check.kind === "includes") {
              if (!input.data.includes(check.value, check.position)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  validation: { includes: check.value, position: check.position },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "toLowerCase") {
              input.data = input.data.toLowerCase();
            } else if (check.kind === "toUpperCase") {
              input.data = input.data.toUpperCase();
            } else if (check.kind === "startsWith") {
              if (!input.data.startsWith(check.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  validation: { startsWith: check.value },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "endsWith") {
              if (!input.data.endsWith(check.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  validation: { endsWith: check.value },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "datetime") {
              const regex = datetimeRegex(check);
              if (!regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  validation: "datetime",
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "ip") {
              if (!isValidIP(input.data, check.version)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "ip",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util_1.util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        _regex(regex, validation, message) {
          return this.refinement((data) => regex.test(data), __spreadValues({
            validation,
            code: ZodError_1.ZodIssueCode.invalid_string
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        _addCheck(check) {
          return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, check]
          }));
        }
        email(message) {
          return this._addCheck(__spreadValues({ kind: "email" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        url(message) {
          return this._addCheck(__spreadValues({ kind: "url" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        emoji(message) {
          return this._addCheck(__spreadValues({ kind: "emoji" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        uuid(message) {
          return this._addCheck(__spreadValues({ kind: "uuid" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        cuid(message) {
          return this._addCheck(__spreadValues({ kind: "cuid" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        cuid2(message) {
          return this._addCheck(__spreadValues({ kind: "cuid2" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        ulid(message) {
          return this._addCheck(__spreadValues({ kind: "ulid" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        ip(options) {
          return this._addCheck(__spreadValues({ kind: "ip" }, errorUtil_1.errorUtil.errToObj(options)));
        }
        datetime(options) {
          var _a2;
          if (typeof options === "string") {
            return this._addCheck({
              kind: "datetime",
              precision: null,
              offset: false,
              message: options
            });
          }
          return this._addCheck(__spreadValues({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a2 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a2 !== void 0 ? _a2 : false
          }, errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)));
        }
        regex(regex, message) {
          return this._addCheck(__spreadValues({
            kind: "regex",
            regex
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        includes(value, options) {
          return this._addCheck(__spreadValues({
            kind: "includes",
            value,
            position: options === null || options === void 0 ? void 0 : options.position
          }, errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)));
        }
        startsWith(value, message) {
          return this._addCheck(__spreadValues({
            kind: "startsWith",
            value
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        endsWith(value, message) {
          return this._addCheck(__spreadValues({
            kind: "endsWith",
            value
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        min(minLength, message) {
          return this._addCheck(__spreadValues({
            kind: "min",
            value: minLength
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        max(maxLength, message) {
          return this._addCheck(__spreadValues({
            kind: "max",
            value: maxLength
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        length(len, message) {
          return this._addCheck(__spreadValues({
            kind: "length",
            value: len
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        /**
         * @deprecated Use z.string().min(1) instead.
         * @see {@link ZodString.min}
         */
        nonempty(message) {
          return this.min(1, errorUtil_1.errorUtil.errToObj(message));
        }
        trim() {
          return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, { kind: "trim" }]
          }));
        }
        toLowerCase() {
          return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, { kind: "toLowerCase" }]
          }));
        }
        toUpperCase() {
          return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, { kind: "toUpperCase" }]
          }));
        }
        get isDatetime() {
          return !!this._def.checks.find((ch) => ch.kind === "datetime");
        }
        get isEmail() {
          return !!this._def.checks.find((ch) => ch.kind === "email");
        }
        get isURL() {
          return !!this._def.checks.find((ch) => ch.kind === "url");
        }
        get isEmoji() {
          return !!this._def.checks.find((ch) => ch.kind === "emoji");
        }
        get isUUID() {
          return !!this._def.checks.find((ch) => ch.kind === "uuid");
        }
        get isCUID() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid");
        }
        get isCUID2() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid2");
        }
        get isULID() {
          return !!this._def.checks.find((ch) => ch.kind === "ulid");
        }
        get isIP() {
          return !!this._def.checks.find((ch) => ch.kind === "ip");
        }
        get minLength() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxLength() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      exports.ZodString = ZodString;
      ZodString.create = (params) => {
        var _a2;
        return new ZodString(__spreadValues({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodString,
          coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false
        }, processCreateParams(params)));
      };
      function floatSafeRemainder(val, step) {
        const valDecCount = (val.toString().split(".")[1] || "").length;
        const stepDecCount = (step.toString().split(".")[1] || "").length;
        const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
        const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
        const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
        return valInt % stepInt / Math.pow(10, decCount);
      }
      var ZodNumber = class _ZodNumber extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
          this.step = this.multipleOf;
        }
        _parse(input) {
          if (this._def.coerce) {
            input.data = Number(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.number) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.number,
              received: ctx2.parsedType
            });
            return parseUtil_1.INVALID;
          }
          let ctx = void 0;
          const status = new parseUtil_1.ParseStatus();
          for (const check of this._def.checks) {
            if (check.kind === "int") {
              if (!util_1.util.isInteger(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: "integer",
                  received: "float",
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "min") {
              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "number",
                  inclusive: check.inclusive,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "number",
                  inclusive: check.inclusive,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "multipleOf") {
              if (floatSafeRemainder(input.data, check.value) !== 0) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.not_multiple_of,
                  multipleOf: check.value,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "finite") {
              if (!Number.isFinite(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.not_finite,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util_1.util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        gte(value, message) {
          return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
        }
        gt(value, message) {
          return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
        }
        lte(value, message) {
          return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
        }
        lt(value, message) {
          return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
          return new _ZodNumber(__spreadProps(__spreadValues({}, this._def), {
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil_1.errorUtil.toString(message)
              }
            ]
          }));
        }
        _addCheck(check) {
          return new _ZodNumber(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, check]
          }));
        }
        int(message) {
          return this._addCheck({
            kind: "int",
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        positive(message) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        negative(message) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        nonpositive(message) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        nonnegative(message) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        multipleOf(value, message) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        finite(message) {
          return this._addCheck({
            kind: "finite",
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        safe(message) {
          return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil_1.errorUtil.toString(message)
          })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
        get isInt() {
          return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
        }
        get isFinite() {
          let max = null, min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
              return true;
            } else if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            } else if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return Number.isFinite(min) && Number.isFinite(max);
        }
      };
      exports.ZodNumber = ZodNumber;
      ZodNumber.create = (params) => {
        return new ZodNumber(__spreadValues({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodNumber,
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false
        }, processCreateParams(params)));
      };
      var ZodBigInt = class _ZodBigInt extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
        }
        _parse(input) {
          if (this._def.coerce) {
            input.data = BigInt(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.bigint) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.bigint,
              received: ctx2.parsedType
            });
            return parseUtil_1.INVALID;
          }
          let ctx = void 0;
          const status = new parseUtil_1.ParseStatus();
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  type: "bigint",
                  minimum: check.value,
                  inclusive: check.inclusive,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  type: "bigint",
                  maximum: check.value,
                  inclusive: check.inclusive,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "multipleOf") {
              if (input.data % check.value !== BigInt(0)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.not_multiple_of,
                  multipleOf: check.value,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util_1.util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        gte(value, message) {
          return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
        }
        gt(value, message) {
          return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
        }
        lte(value, message) {
          return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
        }
        lt(value, message) {
          return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
          return new _ZodBigInt(__spreadProps(__spreadValues({}, this._def), {
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil_1.errorUtil.toString(message)
              }
            ]
          }));
        }
        _addCheck(check) {
          return new _ZodBigInt(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, check]
          }));
        }
        positive(message) {
          return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        negative(message) {
          return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        nonpositive(message) {
          return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        nonnegative(message) {
          return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        multipleOf(value, message) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      exports.ZodBigInt = ZodBigInt;
      ZodBigInt.create = (params) => {
        var _a2;
        return new ZodBigInt(__spreadValues({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodBigInt,
          coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false
        }, processCreateParams(params)));
      };
      var ZodBoolean = class extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = Boolean(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.boolean,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodBoolean = ZodBoolean;
      ZodBoolean.create = (params) => {
        return new ZodBoolean(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodBoolean,
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false
        }, processCreateParams(params)));
      };
      var ZodDate = class _ZodDate extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = new Date(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.date) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.date,
              received: ctx2.parsedType
            });
            return parseUtil_1.INVALID;
          }
          if (isNaN(input.data.getTime())) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_date
            });
            return parseUtil_1.INVALID;
          }
          const status = new parseUtil_1.ParseStatus();
          let ctx = void 0;
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              if (input.data.getTime() < check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  message: check.message,
                  inclusive: true,
                  exact: false,
                  minimum: check.value,
                  type: "date"
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              if (input.data.getTime() > check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  message: check.message,
                  inclusive: true,
                  exact: false,
                  maximum: check.value,
                  type: "date"
                });
                status.dirty();
              }
            } else {
              util_1.util.assertNever(check);
            }
          }
          return {
            status: status.value,
            value: new Date(input.data.getTime())
          };
        }
        _addCheck(check) {
          return new _ZodDate(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, check]
          }));
        }
        min(minDate, message) {
          return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        max(maxDate, message) {
          return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        get minDate() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min != null ? new Date(min) : null;
        }
        get maxDate() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max != null ? new Date(max) : null;
        }
      };
      exports.ZodDate = ZodDate;
      ZodDate.create = (params) => {
        return new ZodDate(__spreadValues({
          checks: [],
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
          typeName: ZodFirstPartyTypeKind.ZodDate
        }, processCreateParams(params)));
      };
      var ZodSymbol = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.symbol,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodSymbol = ZodSymbol;
      ZodSymbol.create = (params) => {
        return new ZodSymbol(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodSymbol
        }, processCreateParams(params)));
      };
      var ZodUndefined = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.undefined,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodUndefined = ZodUndefined;
      ZodUndefined.create = (params) => {
        return new ZodUndefined(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodUndefined
        }, processCreateParams(params)));
      };
      var ZodNull = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.null,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodNull = ZodNull;
      ZodNull.create = (params) => {
        return new ZodNull(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodNull
        }, processCreateParams(params)));
      };
      var ZodAny = class extends ZodType {
        constructor() {
          super(...arguments);
          this._any = true;
        }
        _parse(input) {
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodAny = ZodAny;
      ZodAny.create = (params) => {
        return new ZodAny(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodAny
        }, processCreateParams(params)));
      };
      var ZodUnknown = class extends ZodType {
        constructor() {
          super(...arguments);
          this._unknown = true;
        }
        _parse(input) {
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodUnknown = ZodUnknown;
      ZodUnknown.create = (params) => {
        return new ZodUnknown(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodUnknown
        }, processCreateParams(params)));
      };
      var ZodNever = class extends ZodType {
        _parse(input) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.never,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
      };
      exports.ZodNever = ZodNever;
      ZodNever.create = (params) => {
        return new ZodNever(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodNever
        }, processCreateParams(params)));
      };
      var ZodVoid = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.void,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodVoid = ZodVoid;
      ZodVoid.create = (params) => {
        return new ZodVoid(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodVoid
        }, processCreateParams(params)));
      };
      var ZodArray = class _ZodArray extends ZodType {
        _parse(input) {
          const { ctx, status } = this._processInputParams(input);
          const def = this._def;
          if (ctx.parsedType !== util_1.ZodParsedType.array) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.array,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
                minimum: tooSmall ? def.exactLength.value : void 0,
                maximum: tooBig ? def.exactLength.value : void 0,
                type: "array",
                inclusive: true,
                exact: true,
                message: def.exactLength.message
              });
              status.dirty();
            }
          }
          if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: def.minLength.value,
                type: "array",
                inclusive: true,
                exact: false,
                message: def.minLength.message
              });
              status.dirty();
            }
          }
          if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: def.maxLength.value,
                type: "array",
                inclusive: true,
                exact: false,
                message: def.maxLength.message
              });
              status.dirty();
            }
          }
          if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
              return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result2) => {
              return parseUtil_1.ParseStatus.mergeArray(status, result2);
            });
          }
          const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          });
          return parseUtil_1.ParseStatus.mergeArray(status, result);
        }
        get element() {
          return this._def.type;
        }
        min(minLength, message) {
          return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
            minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        max(maxLength, message) {
          return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
            maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        length(len, message) {
          return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
            exactLength: { value: len, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        nonempty(message) {
          return this.min(1, message);
        }
      };
      exports.ZodArray = ZodArray;
      ZodArray.create = (schema, params) => {
        return new ZodArray(__spreadValues({
          type: schema,
          minLength: null,
          maxLength: null,
          exactLength: null,
          typeName: ZodFirstPartyTypeKind.ZodArray
        }, processCreateParams(params)));
      };
      function deepPartialify(schema) {
        if (schema instanceof ZodObject) {
          const newShape = {};
          for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
          }
          return new ZodObject(__spreadProps(__spreadValues({}, schema._def), {
            shape: () => newShape
          }));
        } else if (schema instanceof ZodArray) {
          return new ZodArray(__spreadProps(__spreadValues({}, schema._def), {
            type: deepPartialify(schema.element)
          }));
        } else if (schema instanceof ZodOptional) {
          return ZodOptional.create(deepPartialify(schema.unwrap()));
        } else if (schema instanceof ZodNullable) {
          return ZodNullable.create(deepPartialify(schema.unwrap()));
        } else if (schema instanceof ZodTuple) {
          return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
        } else {
          return schema;
        }
      }
      var ZodObject = class _ZodObject extends ZodType {
        constructor() {
          super(...arguments);
          this._cached = null;
          this.nonstrict = this.passthrough;
          this.augment = this.extend;
        }
        _getCached() {
          if (this._cached !== null)
            return this._cached;
          const shape = this._def.shape();
          const keys = util_1.util.objectKeys(shape);
          return this._cached = { shape, keys };
        }
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.object) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.object,
              received: ctx2.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const { status, ctx } = this._processInputParams(input);
          const { shape, keys: shapeKeys } = this._getCached();
          const extraKeys = [];
          if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
              if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
              }
            }
          }
          const pairs = [];
          for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
              alwaysSet: key in ctx.data
            });
          }
          if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
              for (const key of extraKeys) {
                pairs.push({
                  key: { status: "valid", value: key },
                  value: { status: "valid", value: ctx.data[key] }
                });
              }
            } else if (unknownKeys === "strict") {
              if (extraKeys.length > 0) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.unrecognized_keys,
                  keys: extraKeys
                });
                status.dirty();
              }
            } else if (unknownKeys === "strip") {
            } else {
              throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
          } else {
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
              const value = ctx.data[key];
              pairs.push({
                key: { status: "valid", value: key },
                value: catchall._parse(
                  new ParseInputLazyPath(ctx, value, ctx.path, key)
                  //, ctx.child(key), value, getParsedType(value)
                ),
                alwaysSet: key in ctx.data
              });
            }
          }
          if (ctx.common.async) {
            return Promise.resolve().then(() => __async(this, null, function* () {
              const syncPairs = [];
              for (const pair of pairs) {
                const key = yield pair.key;
                syncPairs.push({
                  key,
                  value: yield pair.value,
                  alwaysSet: pair.alwaysSet
                });
              }
              return syncPairs;
            })).then((syncPairs) => {
              return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
            });
          } else {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get shape() {
          return this._def.shape();
        }
        strict(message) {
          errorUtil_1.errorUtil.errToObj;
          return new _ZodObject(__spreadValues(__spreadProps(__spreadValues({}, this._def), {
            unknownKeys: "strict"
          }), message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a2, _b, _c, _d;
              const defaultError = (_c = (_b = (_a2 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a2, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}));
        }
        strip() {
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            unknownKeys: "strip"
          }));
        }
        passthrough() {
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            unknownKeys: "passthrough"
          }));
        }
        // const AugmentFactory =
        //   <Def extends ZodObjectDef>(def: Def) =>
        //   <Augmentation extends ZodRawShape>(
        //     augmentation: Augmentation
        //   ): ZodObject<
        //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
        //     Def["unknownKeys"],
        //     Def["catchall"]
        //   > => {
        //     return new ZodObject({
        //       ...def,
        //       shape: () => ({
        //         ...def.shape(),
        //         ...augmentation,
        //       }),
        //     }) as any;
        //   };
        extend(augmentation) {
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => __spreadValues(__spreadValues({}, this._def.shape()), augmentation)
          }));
        }
        /**
         * Prior to zod@1.0.12 there was a bug in the
         * inferred type of merged objects. Please
         * upgrade if you are experiencing issues.
         */
        merge(merging) {
          const merged = new _ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => __spreadValues(__spreadValues({}, this._def.shape()), merging._def.shape()),
            typeName: ZodFirstPartyTypeKind.ZodObject
          });
          return merged;
        }
        // merge<
        //   Incoming extends AnyZodObject,
        //   Augmentation extends Incoming["shape"],
        //   NewOutput extends {
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   },
        //   NewInput extends {
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }
        // >(
        //   merging: Incoming
        // ): ZodObject<
        //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
        //   Incoming["_def"]["unknownKeys"],
        //   Incoming["_def"]["catchall"],
        //   NewOutput,
        //   NewInput
        // > {
        //   const merged: any = new ZodObject({
        //     unknownKeys: merging._def.unknownKeys,
        //     catchall: merging._def.catchall,
        //     shape: () =>
        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
        //     typeName: ZodFirstPartyTypeKind.ZodObject,
        //   }) as any;
        //   return merged;
        // }
        setKey(key, schema) {
          return this.augment({ [key]: schema });
        }
        // merge<Incoming extends AnyZodObject>(
        //   merging: Incoming
        // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
        // ZodObject<
        //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
        //   Incoming["_def"]["unknownKeys"],
        //   Incoming["_def"]["catchall"]
        // > {
        //   // const mergedShape = objectUtil.mergeShapes(
        //   //   this._def.shape(),
        //   //   merging._def.shape()
        //   // );
        //   const merged: any = new ZodObject({
        //     unknownKeys: merging._def.unknownKeys,
        //     catchall: merging._def.catchall,
        //     shape: () =>
        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
        //     typeName: ZodFirstPartyTypeKind.ZodObject,
        //   }) as any;
        //   return merged;
        // }
        catchall(index) {
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            catchall: index
          }));
        }
        pick(mask) {
          const shape = {};
          util_1.util.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
              shape[key] = this.shape[key];
            }
          });
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => shape
          }));
        }
        omit(mask) {
          const shape = {};
          util_1.util.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
              shape[key] = this.shape[key];
            }
          });
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => shape
          }));
        }
        /**
         * @deprecated
         */
        deepPartial() {
          return deepPartialify(this);
        }
        partial(mask) {
          const newShape = {};
          util_1.util.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
              newShape[key] = fieldSchema;
            } else {
              newShape[key] = fieldSchema.optional();
            }
          });
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => newShape
          }));
        }
        required(mask) {
          const newShape = {};
          util_1.util.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
              newShape[key] = this.shape[key];
            } else {
              const fieldSchema = this.shape[key];
              let newField = fieldSchema;
              while (newField instanceof ZodOptional) {
                newField = newField._def.innerType;
              }
              newShape[key] = newField;
            }
          });
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => newShape
          }));
        }
        keyof() {
          return createZodEnum(util_1.util.objectKeys(this.shape));
        }
      };
      exports.ZodObject = ZodObject;
      ZodObject.create = (shape, params) => {
        return new ZodObject(__spreadValues({
          shape: () => shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject
        }, processCreateParams(params)));
      };
      ZodObject.strictCreate = (shape, params) => {
        return new ZodObject(__spreadValues({
          shape: () => shape,
          unknownKeys: "strict",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject
        }, processCreateParams(params)));
      };
      ZodObject.lazycreate = (shape, params) => {
        return new ZodObject(__spreadValues({
          shape,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject
        }, processCreateParams(params)));
      };
      var ZodUnion = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const options = this._def.options;
          function handleResults(results) {
            for (const result of results) {
              if (result.result.status === "valid") {
                return result.result;
              }
            }
            for (const result of results) {
              if (result.result.status === "dirty") {
                ctx.common.issues.push(...result.ctx.common.issues);
                return result.result;
              }
            }
            const unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_union,
              unionErrors
            });
            return parseUtil_1.INVALID;
          }
          if (ctx.common.async) {
            return Promise.all(options.map((option) => __async(this, null, function* () {
              const childCtx = __spreadProps(__spreadValues({}, ctx), {
                common: __spreadProps(__spreadValues({}, ctx.common), {
                  issues: []
                }),
                parent: null
              });
              return {
                result: yield option._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: childCtx
                }),
                ctx: childCtx
              };
            }))).then(handleResults);
          } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options) {
              const childCtx = __spreadProps(__spreadValues({}, ctx), {
                common: __spreadProps(__spreadValues({}, ctx.common), {
                  issues: []
                }),
                parent: null
              });
              const result = option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              });
              if (result.status === "valid") {
                return result;
              } else if (result.status === "dirty" && !dirty) {
                dirty = { result, ctx: childCtx };
              }
              if (childCtx.common.issues.length) {
                issues.push(childCtx.common.issues);
              }
            }
            if (dirty) {
              ctx.common.issues.push(...dirty.ctx.common.issues);
              return dirty.result;
            }
            const unionErrors = issues.map((issues2) => new ZodError_1.ZodError(issues2));
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_union,
              unionErrors
            });
            return parseUtil_1.INVALID;
          }
        }
        get options() {
          return this._def.options;
        }
      };
      exports.ZodUnion = ZodUnion;
      ZodUnion.create = (types, params) => {
        return new ZodUnion(__spreadValues({
          options: types,
          typeName: ZodFirstPartyTypeKind.ZodUnion
        }, processCreateParams(params)));
      };
      var getDiscriminator = (type) => {
        if (type instanceof ZodLazy) {
          return getDiscriminator(type.schema);
        } else if (type instanceof ZodEffects) {
          return getDiscriminator(type.innerType());
        } else if (type instanceof ZodLiteral) {
          return [type.value];
        } else if (type instanceof ZodEnum) {
          return type.options;
        } else if (type instanceof ZodNativeEnum) {
          return Object.keys(type.enum);
        } else if (type instanceof ZodDefault) {
          return getDiscriminator(type._def.innerType);
        } else if (type instanceof ZodUndefined) {
          return [void 0];
        } else if (type instanceof ZodNull) {
          return [null];
        } else {
          return null;
        }
      };
      var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.object) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.object,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const discriminator = this.discriminator;
          const discriminatorValue = ctx.data[discriminator];
          const option = this.optionsMap.get(discriminatorValue);
          if (!option) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
              options: Array.from(this.optionsMap.keys()),
              path: [discriminator]
            });
            return parseUtil_1.INVALID;
          }
          if (ctx.common.async) {
            return option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          } else {
            return option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          }
        }
        get discriminator() {
          return this._def.discriminator;
        }
        get options() {
          return this._def.options;
        }
        get optionsMap() {
          return this._def.optionsMap;
        }
        /**
         * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
         * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
         * have a different value for each object in the union.
         * @param discriminator the name of the discriminator property
         * @param types an array of object schemas
         * @param params
         */
        static create(discriminator, options, params) {
          const optionsMap = /* @__PURE__ */ new Map();
          for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) {
              throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
              if (optionsMap.has(value)) {
                throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
              }
              optionsMap.set(value, type);
            }
          }
          return new _ZodDiscriminatedUnion(__spreadValues({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap
          }, processCreateParams(params)));
        }
      };
      exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
      function mergeValues(a, b) {
        const aType = (0, util_1.getParsedType)(a);
        const bType = (0, util_1.getParsedType)(b);
        if (a === b) {
          return { valid: true, data: a };
        } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
          const bKeys = util_1.util.objectKeys(b);
          const sharedKeys = util_1.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
          const newObj = __spreadValues(__spreadValues({}, a), b);
          for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
              return { valid: false };
            }
            newObj[key] = sharedValue.data;
          }
          return { valid: true, data: newObj };
        } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
          if (a.length !== b.length) {
            return { valid: false };
          }
          const newArray = [];
          for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
              return { valid: false };
            }
            newArray.push(sharedValue.data);
          }
          return { valid: true, data: newArray };
        } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a === +b) {
          return { valid: true, data: a };
        } else {
          return { valid: false };
        }
      }
      var ZodIntersection = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const handleParsed = (parsedLeft, parsedRight) => {
            if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
              return parseUtil_1.INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_intersection_types
              });
              return parseUtil_1.INVALID;
            }
            if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
              status.dirty();
            }
            return { status: status.value, value: merged.data };
          };
          if (ctx.common.async) {
            return Promise.all([
              this._def.left._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              }),
              this._def.right._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              })
            ]).then(([left, right]) => handleParsed(left, right));
          } else {
            return handleParsed(this._def.left._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }), this._def.right._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }));
          }
        }
      };
      exports.ZodIntersection = ZodIntersection;
      ZodIntersection.create = (left, right, params) => {
        return new ZodIntersection(__spreadValues({
          left,
          right,
          typeName: ZodFirstPartyTypeKind.ZodIntersection
        }, processCreateParams(params)));
      };
      var ZodTuple = class _ZodTuple extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.array) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.array,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          if (ctx.data.length < this._def.items.length) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: this._def.items.length,
              inclusive: true,
              exact: false,
              type: "array"
            });
            return parseUtil_1.INVALID;
          }
          const rest = this._def.rest;
          if (!rest && ctx.data.length > this._def.items.length) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: this._def.items.length,
              inclusive: true,
              exact: false,
              type: "array"
            });
            status.dirty();
          }
          const items = [...ctx.data].map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
              return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
          }).filter((x) => !!x);
          if (ctx.common.async) {
            return Promise.all(items).then((results) => {
              return parseUtil_1.ParseStatus.mergeArray(status, results);
            });
          } else {
            return parseUtil_1.ParseStatus.mergeArray(status, items);
          }
        }
        get items() {
          return this._def.items;
        }
        rest(rest) {
          return new _ZodTuple(__spreadProps(__spreadValues({}, this._def), {
            rest
          }));
        }
      };
      exports.ZodTuple = ZodTuple;
      ZodTuple.create = (schemas, params) => {
        if (!Array.isArray(schemas)) {
          throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
        }
        return new ZodTuple(__spreadValues({
          items: schemas,
          typeName: ZodFirstPartyTypeKind.ZodTuple,
          rest: null
        }, processCreateParams(params)));
      };
      var ZodRecord = class _ZodRecord extends ZodType {
        get keySchema() {
          return this._def.keyType;
        }
        get valueSchema() {
          return this._def.valueType;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.object) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.object,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const pairs = [];
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          for (const key in ctx.data) {
            pairs.push({
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
              value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
            });
          }
          if (ctx.common.async) {
            return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
          } else {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get element() {
          return this._def.valueType;
        }
        static create(first, second, third) {
          if (second instanceof ZodType) {
            return new _ZodRecord(__spreadValues({
              keyType: first,
              valueType: second,
              typeName: ZodFirstPartyTypeKind.ZodRecord
            }, processCreateParams(third)));
          }
          return new _ZodRecord(__spreadValues({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord
          }, processCreateParams(second)));
        }
      };
      exports.ZodRecord = ZodRecord;
      var ZodMap = class extends ZodType {
        get keySchema() {
          return this._def.keyType;
        }
        get valueSchema() {
          return this._def.valueType;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.map) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.map,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
              value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
            };
          });
          if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(() => __async(this, null, function* () {
              for (const pair of pairs) {
                const key = yield pair.key;
                const value = yield pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                  return parseUtil_1.INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                  status.dirty();
                }
                finalMap.set(key.value, value.value);
              }
              return { status: status.value, value: finalMap };
            }));
          } else {
            const finalMap = /* @__PURE__ */ new Map();
            for (const pair of pairs) {
              const key = pair.key;
              const value = pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return parseUtil_1.INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          }
        }
      };
      exports.ZodMap = ZodMap;
      ZodMap.create = (keyType, valueType, params) => {
        return new ZodMap(__spreadValues({
          valueType,
          keyType,
          typeName: ZodFirstPartyTypeKind.ZodMap
        }, processCreateParams(params)));
      };
      var ZodSet = class _ZodSet extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.set) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.set,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const def = this._def;
          if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: def.minSize.value,
                type: "set",
                inclusive: true,
                exact: false,
                message: def.minSize.message
              });
              status.dirty();
            }
          }
          if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: def.maxSize.value,
                type: "set",
                inclusive: true,
                exact: false,
                message: def.maxSize.message
              });
              status.dirty();
            }
          }
          const valueType = this._def.valueType;
          function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2) {
              if (element.status === "aborted")
                return parseUtil_1.INVALID;
              if (element.status === "dirty")
                status.dirty();
              parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
          }
          const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
          if (ctx.common.async) {
            return Promise.all(elements).then((elements2) => finalizeSet(elements2));
          } else {
            return finalizeSet(elements);
          }
        }
        min(minSize, message) {
          return new _ZodSet(__spreadProps(__spreadValues({}, this._def), {
            minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        max(maxSize, message) {
          return new _ZodSet(__spreadProps(__spreadValues({}, this._def), {
            maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        size(size, message) {
          return this.min(size, message).max(size, message);
        }
        nonempty(message) {
          return this.min(1, message);
        }
      };
      exports.ZodSet = ZodSet;
      ZodSet.create = (valueType, params) => {
        return new ZodSet(__spreadValues({
          valueType,
          minSize: null,
          maxSize: null,
          typeName: ZodFirstPartyTypeKind.ZodSet
        }, processCreateParams(params)));
      };
      var ZodFunction = class _ZodFunction extends ZodType {
        constructor() {
          super(...arguments);
          this.validate = this.implement;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.function) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.function,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          function makeArgsIssue(args, error) {
            return (0, parseUtil_1.makeIssue)({
              data: args,
              path: ctx.path,
              errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                (0, errors_1.getErrorMap)(),
                errors_1.defaultErrorMap
              ].filter((x) => !!x),
              issueData: {
                code: ZodError_1.ZodIssueCode.invalid_arguments,
                argumentsError: error
              }
            });
          }
          function makeReturnsIssue(returns, error) {
            return (0, parseUtil_1.makeIssue)({
              data: returns,
              path: ctx.path,
              errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                (0, errors_1.getErrorMap)(),
                errors_1.defaultErrorMap
              ].filter((x) => !!x),
              issueData: {
                code: ZodError_1.ZodIssueCode.invalid_return_type,
                returnTypeError: error
              }
            });
          }
          const params = { errorMap: ctx.common.contextualErrorMap };
          const fn = ctx.data;
          if (this._def.returns instanceof ZodPromise) {
            const me = this;
            return (0, parseUtil_1.OK)(function(...args) {
              return __async(this, null, function* () {
                const error = new ZodError_1.ZodError([]);
                const parsedArgs = yield me._def.args.parseAsync(args, params).catch((e) => {
                  error.addIssue(makeArgsIssue(args, e));
                  throw error;
                });
                const result = yield Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = yield me._def.returns._def.type.parseAsync(result, params).catch((e) => {
                  error.addIssue(makeReturnsIssue(result, e));
                  throw error;
                });
                return parsedReturns;
              });
            });
          } else {
            const me = this;
            return (0, parseUtil_1.OK)(function(...args) {
              const parsedArgs = me._def.args.safeParse(args, params);
              if (!parsedArgs.success) {
                throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
              }
              const result = Reflect.apply(fn, this, parsedArgs.data);
              const parsedReturns = me._def.returns.safeParse(result, params);
              if (!parsedReturns.success) {
                throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
              }
              return parsedReturns.data;
            });
          }
        }
        parameters() {
          return this._def.args;
        }
        returnType() {
          return this._def.returns;
        }
        args(...items) {
          return new _ZodFunction(__spreadProps(__spreadValues({}, this._def), {
            args: ZodTuple.create(items).rest(ZodUnknown.create())
          }));
        }
        returns(returnType) {
          return new _ZodFunction(__spreadProps(__spreadValues({}, this._def), {
            returns: returnType
          }));
        }
        implement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        strictImplement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        static create(args, returns, params) {
          return new _ZodFunction(__spreadValues({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction
          }, processCreateParams(params)));
        }
      };
      exports.ZodFunction = ZodFunction;
      var ZodLazy = class extends ZodType {
        get schema() {
          return this._def.getter();
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const lazySchema = this._def.getter();
          return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
        }
      };
      exports.ZodLazy = ZodLazy;
      ZodLazy.create = (getter, params) => {
        return new ZodLazy(__spreadValues({
          getter,
          typeName: ZodFirstPartyTypeKind.ZodLazy
        }, processCreateParams(params)));
      };
      var ZodLiteral = class extends ZodType {
        _parse(input) {
          if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_1.ZodIssueCode.invalid_literal,
              expected: this._def.value
            });
            return parseUtil_1.INVALID;
          }
          return { status: "valid", value: input.data };
        }
        get value() {
          return this._def.value;
        }
      };
      exports.ZodLiteral = ZodLiteral;
      ZodLiteral.create = (value, params) => {
        return new ZodLiteral(__spreadValues({
          value,
          typeName: ZodFirstPartyTypeKind.ZodLiteral
        }, processCreateParams(params)));
      };
      function createZodEnum(values, params) {
        return new ZodEnum(__spreadValues({
          values,
          typeName: ZodFirstPartyTypeKind.ZodEnum
        }, processCreateParams(params)));
      }
      var ZodEnum = class _ZodEnum extends ZodType {
        _parse(input) {
          if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            (0, parseUtil_1.addIssueToContext)(ctx, {
              expected: util_1.util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodError_1.ZodIssueCode.invalid_type
            });
            return parseUtil_1.INVALID;
          }
          if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            (0, parseUtil_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_1.ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
        get options() {
          return this._def.values;
        }
        get enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Values() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        extract(values) {
          return _ZodEnum.create(values);
        }
        exclude(values) {
          return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
        }
      };
      exports.ZodEnum = ZodEnum;
      ZodEnum.create = createZodEnum;
      var ZodNativeEnum = class extends ZodType {
        _parse(input) {
          const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
          const ctx = this._getOrReturnCtx(input);
          if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
            const expectedValues = util_1.util.objectValues(nativeEnumValues);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              expected: util_1.util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodError_1.ZodIssueCode.invalid_type
            });
            return parseUtil_1.INVALID;
          }
          if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util_1.util.objectValues(nativeEnumValues);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_1.ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
        get enum() {
          return this._def.values;
        }
      };
      exports.ZodNativeEnum = ZodNativeEnum;
      ZodNativeEnum.create = (values, params) => {
        return new ZodNativeEnum(__spreadValues({
          values,
          typeName: ZodFirstPartyTypeKind.ZodNativeEnum
        }, processCreateParams(params)));
      };
      var ZodPromise = class extends ZodType {
        unwrap() {
          return this._def.type;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.promise,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
          return (0, parseUtil_1.OK)(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
              path: ctx.path,
              errorMap: ctx.common.contextualErrorMap
            });
          }));
        }
      };
      exports.ZodPromise = ZodPromise;
      ZodPromise.create = (schema, params) => {
        return new ZodPromise(__spreadValues({
          type: schema,
          typeName: ZodFirstPartyTypeKind.ZodPromise
        }, processCreateParams(params)));
      };
      var ZodEffects = class extends ZodType {
        innerType() {
          return this._def.schema;
        }
        sourceType() {
          return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const effect = this._def.effect || null;
          const checkCtx = {
            addIssue: (arg) => {
              (0, parseUtil_1.addIssueToContext)(ctx, arg);
              if (arg.fatal) {
                status.abort();
              } else {
                status.dirty();
              }
            },
            get path() {
              return ctx.path;
            }
          };
          checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
          if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.issues.length) {
              return {
                status: "dirty",
                value: ctx.data
              };
            }
            if (ctx.common.async) {
              return Promise.resolve(processed).then((processed2) => {
                return this._def.schema._parseAsync({
                  data: processed2,
                  path: ctx.path,
                  parent: ctx
                });
              });
            } else {
              return this._def.schema._parseSync({
                data: processed,
                path: ctx.path,
                parent: ctx
              });
            }
          }
          if (effect.type === "refinement") {
            const executeRefinement = (acc) => {
              const result = effect.refinement(acc, checkCtx);
              if (ctx.common.async) {
                return Promise.resolve(result);
              }
              if (result instanceof Promise) {
                throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
              }
              return acc;
            };
            if (ctx.common.async === false) {
              const inner = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inner.status === "aborted")
                return parseUtil_1.INVALID;
              if (inner.status === "dirty")
                status.dirty();
              executeRefinement(inner.value);
              return { status: status.value, value: inner.value };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
                if (inner.status === "aborted")
                  return parseUtil_1.INVALID;
                if (inner.status === "dirty")
                  status.dirty();
                return executeRefinement(inner.value).then(() => {
                  return { status: status.value, value: inner.value };
                });
              });
            }
          }
          if (effect.type === "transform") {
            if (ctx.common.async === false) {
              const base5 = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (!(0, parseUtil_1.isValid)(base5))
                return base5;
              const result = effect.transform(base5.value, checkCtx);
              if (result instanceof Promise) {
                throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
              }
              return { status: status.value, value: result };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base5) => {
                if (!(0, parseUtil_1.isValid)(base5))
                  return base5;
                return Promise.resolve(effect.transform(base5.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
              });
            }
          }
          util_1.util.assertNever(effect);
        }
      };
      exports.ZodEffects = ZodEffects;
      exports.ZodTransformer = ZodEffects;
      ZodEffects.create = (schema, effect, params) => {
        return new ZodEffects(__spreadValues({
          schema,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect
        }, processCreateParams(params)));
      };
      ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
        return new ZodEffects(__spreadValues({
          schema,
          effect: { type: "preprocess", transform: preprocess },
          typeName: ZodFirstPartyTypeKind.ZodEffects
        }, processCreateParams(params)));
      };
      var ZodOptional = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === util_1.ZodParsedType.undefined) {
            return (0, parseUtil_1.OK)(void 0);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      exports.ZodOptional = ZodOptional;
      ZodOptional.create = (type, params) => {
        return new ZodOptional(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodOptional
        }, processCreateParams(params)));
      };
      var ZodNullable = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === util_1.ZodParsedType.null) {
            return (0, parseUtil_1.OK)(null);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      exports.ZodNullable = ZodNullable;
      ZodNullable.create = (type, params) => {
        return new ZodNullable(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodNullable
        }, processCreateParams(params)));
      };
      var ZodDefault = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          let data = ctx.data;
          if (ctx.parsedType === util_1.ZodParsedType.undefined) {
            data = this._def.defaultValue();
          }
          return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        removeDefault() {
          return this._def.innerType;
        }
      };
      exports.ZodDefault = ZodDefault;
      ZodDefault.create = (type, params) => {
        return new ZodDefault(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodDefault,
          defaultValue: typeof params.default === "function" ? params.default : () => params.default
        }, processCreateParams(params)));
      };
      var ZodCatch = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const newCtx = __spreadProps(__spreadValues({}, ctx), {
            common: __spreadProps(__spreadValues({}, ctx.common), {
              issues: []
            })
          });
          const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: __spreadValues({}, newCtx)
          });
          if ((0, parseUtil_1.isAsync)(result)) {
            return result.then((result2) => {
              return {
                status: "valid",
                value: result2.status === "valid" ? result2.value : this._def.catchValue({
                  get error() {
                    return new ZodError_1.ZodError(newCtx.common.issues);
                  },
                  input: newCtx.data
                })
              };
            });
          } else {
            return {
              status: "valid",
              value: result.status === "valid" ? result.value : this._def.catchValue({
                get error() {
                  return new ZodError_1.ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          }
        }
        removeCatch() {
          return this._def.innerType;
        }
      };
      exports.ZodCatch = ZodCatch;
      ZodCatch.create = (type, params) => {
        return new ZodCatch(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodCatch,
          catchValue: typeof params.catch === "function" ? params.catch : () => params.catch
        }, processCreateParams(params)));
      };
      var ZodNaN = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.nan,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return { status: "valid", value: input.data };
        }
      };
      exports.ZodNaN = ZodNaN;
      ZodNaN.create = (params) => {
        return new ZodNaN(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodNaN
        }, processCreateParams(params)));
      };
      exports.BRAND = Symbol("zod_brand");
      var ZodBranded = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const data = ctx.data;
          return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        unwrap() {
          return this._def.type;
        }
      };
      exports.ZodBranded = ZodBranded;
      var ZodPipeline = class _ZodPipeline extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.common.async) {
            const handleAsync = () => __async(this, null, function* () {
              const inResult = yield this._def.in._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inResult.status === "aborted")
                return parseUtil_1.INVALID;
              if (inResult.status === "dirty") {
                status.dirty();
                return (0, parseUtil_1.DIRTY)(inResult.value);
              } else {
                return this._def.out._parseAsync({
                  data: inResult.value,
                  path: ctx.path,
                  parent: ctx
                });
              }
            });
            return handleAsync();
          } else {
            const inResult = this._def.in._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return parseUtil_1.INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return {
                status: "dirty",
                value: inResult.value
              };
            } else {
              return this._def.out._parseSync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          }
        }
        static create(a, b) {
          return new _ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline
          });
        }
      };
      exports.ZodPipeline = ZodPipeline;
      var ZodReadonly = class extends ZodType {
        _parse(input) {
          const result = this._def.innerType._parse(input);
          if ((0, parseUtil_1.isValid)(result)) {
            result.value = Object.freeze(result.value);
          }
          return result;
        }
      };
      exports.ZodReadonly = ZodReadonly;
      ZodReadonly.create = (type, params) => {
        return new ZodReadonly(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodReadonly
        }, processCreateParams(params)));
      };
      var custom = (check, params = {}, fatal) => {
        if (check)
          return ZodAny.create().superRefine((data, ctx) => {
            var _a2, _b;
            if (!check(data)) {
              const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
              const _fatal = (_b = (_a2 = p.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b !== void 0 ? _b : true;
              const p2 = typeof p === "string" ? { message: p } : p;
              ctx.addIssue(__spreadProps(__spreadValues({ code: "custom" }, p2), { fatal: _fatal }));
            }
          });
        return ZodAny.create();
      };
      exports.custom = custom;
      exports.late = {
        object: ZodObject.lazycreate
      };
      var ZodFirstPartyTypeKind;
      (function(ZodFirstPartyTypeKind2) {
        ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
        ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
        ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
        ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
        ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
        ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
        ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
        ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
        ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
        ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
        ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
        ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
        ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
        ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
        ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
        ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
        ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
        ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
        ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
        ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
        ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
        ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
        ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
        ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
        ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
        ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
        ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
        ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
        ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
        ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
        ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
        ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
        ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
        ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
        ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
        ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
      })(ZodFirstPartyTypeKind = exports.ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = {}));
      var instanceOfType = (cls, params = {
        message: `Input not instance of ${cls.name}`
      }) => (0, exports.custom)((data) => data instanceof cls, params);
      exports.instanceof = instanceOfType;
      var stringType = ZodString.create;
      exports.string = stringType;
      var numberType = ZodNumber.create;
      exports.number = numberType;
      var nanType = ZodNaN.create;
      exports.nan = nanType;
      var bigIntType = ZodBigInt.create;
      exports.bigint = bigIntType;
      var booleanType = ZodBoolean.create;
      exports.boolean = booleanType;
      var dateType = ZodDate.create;
      exports.date = dateType;
      var symbolType = ZodSymbol.create;
      exports.symbol = symbolType;
      var undefinedType = ZodUndefined.create;
      exports.undefined = undefinedType;
      var nullType = ZodNull.create;
      exports.null = nullType;
      var anyType = ZodAny.create;
      exports.any = anyType;
      var unknownType = ZodUnknown.create;
      exports.unknown = unknownType;
      var neverType = ZodNever.create;
      exports.never = neverType;
      var voidType = ZodVoid.create;
      exports.void = voidType;
      var arrayType = ZodArray.create;
      exports.array = arrayType;
      var objectType = ZodObject.create;
      exports.object = objectType;
      var strictObjectType = ZodObject.strictCreate;
      exports.strictObject = strictObjectType;
      var unionType = ZodUnion.create;
      exports.union = unionType;
      var discriminatedUnionType = ZodDiscriminatedUnion.create;
      exports.discriminatedUnion = discriminatedUnionType;
      var intersectionType = ZodIntersection.create;
      exports.intersection = intersectionType;
      var tupleType = ZodTuple.create;
      exports.tuple = tupleType;
      var recordType = ZodRecord.create;
      exports.record = recordType;
      var mapType = ZodMap.create;
      exports.map = mapType;
      var setType = ZodSet.create;
      exports.set = setType;
      var functionType = ZodFunction.create;
      exports.function = functionType;
      var lazyType = ZodLazy.create;
      exports.lazy = lazyType;
      var literalType = ZodLiteral.create;
      exports.literal = literalType;
      var enumType = ZodEnum.create;
      exports.enum = enumType;
      var nativeEnumType = ZodNativeEnum.create;
      exports.nativeEnum = nativeEnumType;
      var promiseType = ZodPromise.create;
      exports.promise = promiseType;
      var effectsType = ZodEffects.create;
      exports.effect = effectsType;
      exports.transformer = effectsType;
      var optionalType = ZodOptional.create;
      exports.optional = optionalType;
      var nullableType = ZodNullable.create;
      exports.nullable = nullableType;
      var preprocessType = ZodEffects.createWithPreprocess;
      exports.preprocess = preprocessType;
      var pipelineType = ZodPipeline.create;
      exports.pipeline = pipelineType;
      var ostring = () => stringType().optional();
      exports.ostring = ostring;
      var onumber = () => numberType().optional();
      exports.onumber = onumber;
      var oboolean = () => booleanType().optional();
      exports.oboolean = oboolean;
      exports.coerce = {
        string: (arg) => ZodString.create(__spreadProps(__spreadValues({}, arg), { coerce: true })),
        number: (arg) => ZodNumber.create(__spreadProps(__spreadValues({}, arg), { coerce: true })),
        boolean: (arg) => ZodBoolean.create(__spreadProps(__spreadValues({}, arg), {
          coerce: true
        })),
        bigint: (arg) => ZodBigInt.create(__spreadProps(__spreadValues({}, arg), { coerce: true })),
        date: (arg) => ZodDate.create(__spreadProps(__spreadValues({}, arg), { coerce: true }))
      };
      exports.NEVER = parseUtil_1.INVALID;
    }
  });

  // node_modules/zod/lib/external.js
  var require_external = __commonJS({
    "node_modules/zod/lib/external.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_errors(), exports);
      __exportStar(require_parseUtil(), exports);
      __exportStar(require_typeAliases(), exports);
      __exportStar(require_util(), exports);
      __exportStar(require_types(), exports);
      __exportStar(require_ZodError(), exports);
    }
  });

  // node_modules/zod/lib/index.js
  var require_lib = __commonJS({
    "node_modules/zod/lib/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.z = void 0;
      var z = __importStar(require_external());
      exports.z = z;
      __exportStar(require_external(), exports);
      exports.default = z;
    }
  });

  // node_modules/@atproto/common-web/dist/check.js
  var require_check = __commonJS({
    "node_modules/@atproto/common-web/dist/check.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isObject = exports.assure = exports.is = void 0;
      var is2 = (obj, def) => {
        return def.safeParse(obj).success;
      };
      exports.is = is2;
      var assure = (def, obj) => {
        return def.parse(obj);
      };
      exports.assure = assure;
      var isObject = (obj) => {
        return typeof obj === "object" && obj !== null;
      };
      exports.isObject = isObject;
    }
  });

  // node_modules/@atproto/common-web/dist/util.js
  var require_util2 = __commonJS({
    "node_modules/@atproto/common-web/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseIntWithFallback = exports.dedupeStrs = exports.range = exports.chunkArray = exports.errHasMsg = exports.isErrnoException = exports.asyncFilter = exports.s32decode = exports.s32encode = exports.streamToBuffer = exports.flattenUint8Arrays = exports.bailableWait = exports.wait = exports.jitter = exports.noUndefinedVals = void 0;
      var noUndefinedVals = (obj) => {
        Object.keys(obj).forEach((k) => {
          if (obj[k] === void 0) {
            delete obj[k];
          }
        });
        return obj;
      };
      exports.noUndefinedVals = noUndefinedVals;
      var jitter = (maxMs) => {
        return Math.round((Math.random() - 0.5) * maxMs * 2);
      };
      exports.jitter = jitter;
      var wait = (ms) => {
        return new Promise((res) => setTimeout(res, ms));
      };
      exports.wait = wait;
      var bailableWait = (ms) => {
        let bail;
        const waitPromise = new Promise((res) => {
          const timeout = setTimeout(res, ms);
          bail = () => {
            clearTimeout(timeout);
            res();
          };
        });
        return { bail, wait: () => waitPromise };
      };
      exports.bailableWait = bailableWait;
      var flattenUint8Arrays = (arrs) => {
        const length5 = arrs.reduce((acc, cur) => {
          return acc + cur.length;
        }, 0);
        const flattened = new Uint8Array(length5);
        let offset = 0;
        arrs.forEach((arr) => {
          flattened.set(arr, offset);
          offset += arr.length;
        });
        return flattened;
      };
      exports.flattenUint8Arrays = flattenUint8Arrays;
      var streamToBuffer = (stream) => __async(exports, null, function* () {
        const arrays = [];
        try {
          for (var iter = __forAwait(stream), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
            const chunk = temp.value;
            arrays.push(chunk);
          }
        } catch (temp) {
          error = [temp];
        } finally {
          try {
            more && (temp = iter.return) && (yield temp.call(iter));
          } finally {
            if (error)
              throw error[0];
          }
        }
        return (0, exports.flattenUint8Arrays)(arrays);
      });
      exports.streamToBuffer = streamToBuffer;
      var S32_CHAR = "234567abcdefghijklmnopqrstuvwxyz";
      var s32encode = (i) => {
        let s = "";
        while (i) {
          const c = i % 32;
          i = Math.floor(i / 32);
          s = S32_CHAR.charAt(c) + s;
        }
        return s;
      };
      exports.s32encode = s32encode;
      var s32decode = (s) => {
        let i = 0;
        for (const c of s) {
          i = i * 32 + S32_CHAR.indexOf(c);
        }
        return i;
      };
      exports.s32decode = s32decode;
      var asyncFilter = (arr, fn) => __async(exports, null, function* () {
        const results = yield Promise.all(arr.map((t) => fn(t)));
        return arr.filter((_, i) => results[i]);
      });
      exports.asyncFilter = asyncFilter;
      var isErrnoException = (err) => {
        return !!err && err["code"];
      };
      exports.isErrnoException = isErrnoException;
      var errHasMsg = (err, msg) => {
        return !!err && typeof err === "object" && err["message"] === msg;
      };
      exports.errHasMsg = errHasMsg;
      var chunkArray = (arr, chunkSize) => {
        return arr.reduce((acc, cur, i) => {
          const chunkI = Math.floor(i / chunkSize);
          if (!acc[chunkI]) {
            acc[chunkI] = [];
          }
          acc[chunkI].push(cur);
          return acc;
        }, []);
      };
      exports.chunkArray = chunkArray;
      var range = (num) => {
        const nums = [];
        for (let i = 0; i < num; i++) {
          nums.push(i);
        }
        return nums;
      };
      exports.range = range;
      var dedupeStrs = (strs) => {
        return [...new Set(strs)];
      };
      exports.dedupeStrs = dedupeStrs;
      var parseIntWithFallback = (value, fallback) => {
        const parsed = parseInt(value || "", 10);
        return isNaN(parsed) ? fallback : parsed;
      };
      exports.parseIntWithFallback = parseIntWithFallback;
    }
  });

  // node_modules/@atproto/common-web/dist/arrays.js
  var require_arrays = __commonJS({
    "node_modules/@atproto/common-web/dist/arrays.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mapDefined = exports.keyBy = void 0;
      var keyBy = (arr, key) => {
        return arr.reduce((acc, cur) => {
          acc[cur[key]] = cur;
          return acc;
        }, {});
      };
      exports.keyBy = keyBy;
      var mapDefined = (arr, fn) => {
        const output = [];
        for (const item of arr) {
          const val = fn(item);
          if (val !== void 0) {
            output.push(val);
          }
        }
        return output;
      };
      exports.mapDefined = mapDefined;
    }
  });

  // node_modules/@atproto/common-web/dist/async.js
  var require_async = __commonJS({
    "node_modules/@atproto/common-web/dist/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.handleAllSettledErrors = exports.AsyncBufferFullError = exports.AsyncBuffer = exports.allComplete = exports.createDeferrables = exports.createDeferrable = exports.readFromGenerator = void 0;
      var util_1 = require_util2();
      var readFromGenerator = (_0, _1, ..._2) => __async(exports, [_0, _1, ..._2], function* (gen, isDone, waitFor = Promise.resolve(), maxLength = Number.MAX_SAFE_INTEGER) {
        const evts = [];
        let bail;
        let hasBroke = false;
        const awaitDone = () => __async(exports, null, function* () {
          if (yield isDone(evts.at(-1))) {
            return true;
          }
          const bailable = (0, util_1.bailableWait)(20);
          yield bailable.wait();
          bail = bailable.bail;
          if (hasBroke)
            return false;
          return yield awaitDone();
        });
        const breakOn = new Promise((resolve) => {
          waitFor.then(() => {
            awaitDone().then(() => resolve());
          });
        });
        try {
          while (evts.length < maxLength) {
            const maybeEvt = yield Promise.race([gen.next(), breakOn]);
            if (!maybeEvt)
              break;
            const evt = maybeEvt;
            if (evt.done)
              break;
            evts.push(evt.value);
          }
        } finally {
          hasBroke = true;
          bail && bail();
        }
        return evts;
      });
      exports.readFromGenerator = readFromGenerator;
      var createDeferrable = () => {
        let resolve;
        const promise = new Promise((res) => {
          resolve = () => res();
        });
        return { resolve, complete: promise };
      };
      exports.createDeferrable = createDeferrable;
      var createDeferrables = (count) => {
        const list = [];
        for (let i = 0; i < count; i++) {
          list.push((0, exports.createDeferrable)());
        }
        return list;
      };
      exports.createDeferrables = createDeferrables;
      var allComplete = (deferrables) => __async(exports, null, function* () {
        yield Promise.all(deferrables.map((d) => d.complete));
      });
      exports.allComplete = allComplete;
      var AsyncBuffer = class {
        constructor(maxSize) {
          Object.defineProperty(this, "maxSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: maxSize
          });
          Object.defineProperty(this, "buffer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "promise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "resolve", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "closed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "toThrow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.promise = Promise.resolve();
          this.resolve = () => null;
          this.resetPromise();
        }
        get curr() {
          return this.buffer;
        }
        get size() {
          return this.buffer.length;
        }
        get isClosed() {
          return this.closed;
        }
        resetPromise() {
          this.promise = new Promise((r) => this.resolve = r);
        }
        push(item) {
          this.buffer.push(item);
          this.resolve();
        }
        pushMany(items) {
          items.forEach((i) => this.buffer.push(i));
          this.resolve();
        }
        events() {
          return __asyncGenerator(this, null, function* () {
            while (true) {
              if (this.closed && this.buffer.length === 0) {
                if (this.toThrow) {
                  throw this.toThrow;
                } else {
                  return;
                }
              }
              yield new __await(this.promise);
              if (this.toThrow) {
                throw this.toThrow;
              }
              if (this.maxSize && this.size > this.maxSize) {
                throw new AsyncBufferFullError(this.maxSize);
              }
              const [first, ...rest] = this.buffer;
              if (first) {
                this.buffer = rest;
                yield first;
              } else {
                this.resetPromise();
              }
            }
          });
        }
        throw(err) {
          this.toThrow = err;
          this.closed = true;
          this.resolve();
        }
        close() {
          this.closed = true;
          this.resolve();
        }
      };
      exports.AsyncBuffer = AsyncBuffer;
      var AsyncBufferFullError = class extends Error {
        constructor(maxSize) {
          super(`ReachedMaxBufferSize: ${maxSize}`);
        }
      };
      exports.AsyncBufferFullError = AsyncBufferFullError;
      var handleAllSettledErrors = (results) => {
        const errors = results.filter(isRejected).map((res) => res.reason);
        if (errors.length === 0) {
          return;
        }
        if (errors.length === 1) {
          throw errors[0];
        }
        throw new AggregateError(errors, "Multiple errors: " + errors.map((err) => err == null ? void 0 : err.message).join("\n"));
      };
      exports.handleAllSettledErrors = handleAllSettledErrors;
      var isRejected = (result) => {
        return result.status === "rejected";
      };
    }
  });

  // node_modules/@atproto/common-web/dist/tid.js
  var require_tid2 = __commonJS({
    "node_modules/@atproto/common-web/dist/tid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TID = void 0;
      var util_1 = require_util2();
      var TID_LEN = 13;
      var lastTimestamp = 0;
      var timestampCount = 0;
      var clockid = null;
      function dedash(str) {
        return str.replaceAll("-", "");
      }
      var TID = class _TID {
        constructor(str) {
          Object.defineProperty(this, "str", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          const noDashes = dedash(str);
          if (noDashes.length !== TID_LEN) {
            throw new Error(`Poorly formatted TID: ${noDashes.length} length`);
          }
          this.str = noDashes;
        }
        static next(prev) {
          const time = Math.max(Date.now(), lastTimestamp);
          if (time === lastTimestamp) {
            timestampCount++;
          }
          lastTimestamp = time;
          const timestamp = time * 1e3 + timestampCount;
          if (clockid === null) {
            clockid = Math.floor(Math.random() * 32);
          }
          const tid = _TID.fromTime(timestamp, clockid);
          if (!prev || tid.newerThan(prev)) {
            return tid;
          }
          return _TID.fromTime(prev.timestamp() + 1, clockid);
        }
        static nextStr(prev) {
          return _TID.next(prev ? new _TID(prev) : void 0).toString();
        }
        static fromTime(timestamp, clockid2) {
          const str = `${(0, util_1.s32encode)(timestamp)}${(0, util_1.s32encode)(clockid2).padStart(2, "2")}`;
          return new _TID(str);
        }
        static fromStr(str) {
          return new _TID(str);
        }
        static oldestFirst(a, b) {
          return a.compareTo(b);
        }
        static newestFirst(a, b) {
          return b.compareTo(a);
        }
        static is(str) {
          return dedash(str).length === TID_LEN;
        }
        timestamp() {
          return (0, util_1.s32decode)(this.str.slice(0, 11));
        }
        clockid() {
          return (0, util_1.s32decode)(this.str.slice(11, 13));
        }
        formatted() {
          const str = this.toString();
          return `${str.slice(0, 4)}-${str.slice(4, 7)}-${str.slice(7, 11)}-${str.slice(11, 13)}`;
        }
        toString() {
          return this.str;
        }
        // newer > older
        compareTo(other) {
          if (this.str > other.str)
            return 1;
          if (this.str < other.str)
            return -1;
          return 0;
        }
        equals(other) {
          return this.str === other.str;
        }
        newerThan(other) {
          return this.compareTo(other) > 0;
        }
        olderThan(other) {
          return this.compareTo(other) < 0;
        }
      };
      exports.TID = TID;
      exports.default = TID;
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/vendor/varint.js
  function encode(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT) {
      out[offset++] = num & 255 | MSB;
      num /= 128;
    }
    while (num & MSBALL) {
      out[offset++] = num & 255 | MSB;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode.bytes = offset - oldOffset + 1;
    return out;
  }
  function read(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$1);
    read.bytes = counter - offset;
    return res;
  }
  var encode_1, MSB, REST, MSBALL, INT, decode, MSB$1, REST$1, N1, N2, N3, N4, N5, N6, N7, N8, N9, length, varint, _brrp_varint, varint_default;
  var init_varint = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/vendor/varint.js"() {
      encode_1 = encode;
      MSB = 128;
      REST = 127;
      MSBALL = ~REST;
      INT = Math.pow(2, 31);
      decode = read;
      MSB$1 = 128;
      REST$1 = 127;
      N1 = Math.pow(2, 7);
      N2 = Math.pow(2, 14);
      N3 = Math.pow(2, 21);
      N4 = Math.pow(2, 28);
      N5 = Math.pow(2, 35);
      N6 = Math.pow(2, 42);
      N7 = Math.pow(2, 49);
      N8 = Math.pow(2, 56);
      N9 = Math.pow(2, 63);
      length = function(value) {
        return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
      };
      varint = {
        encode: encode_1,
        decode,
        encodingLength: length
      };
      _brrp_varint = varint;
      varint_default = _brrp_varint;
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/src/varint.js
  var decode2, encodeTo, encodingLength;
  var init_varint2 = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/src/varint.js"() {
      init_varint();
      decode2 = (data, offset = 0) => {
        const code2 = varint_default.decode(data, offset);
        return [
          code2,
          varint_default.decode.bytes
        ];
      };
      encodeTo = (int, target2, offset = 0) => {
        varint_default.encode(int, target2, offset);
        return target2;
      };
      encodingLength = (int) => {
        return varint_default.encodingLength(int);
      };
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bytes.js
  var empty, equals, coerce;
  var init_bytes = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bytes.js"() {
      empty = new Uint8Array(0);
      equals = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/src/hashes/digest.js
  var create, decode3, equals2, Digest;
  var init_digest = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/src/hashes/digest.js"() {
      init_bytes();
      init_varint2();
      create = (code2, digest2) => {
        const size = digest2.byteLength;
        const sizeOffset = encodingLength(code2);
        const digestOffset = sizeOffset + encodingLength(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo(code2, bytes, 0);
        encodeTo(size, bytes, sizeOffset);
        bytes.set(digest2, digestOffset);
        return new Digest(code2, size, digest2, bytes);
      };
      decode3 = (multihash) => {
        const bytes = coerce(multihash);
        const [code2, sizeOffset] = decode2(bytes);
        const [size, digestOffset] = decode2(bytes.subarray(sizeOffset));
        const digest2 = bytes.subarray(sizeOffset + digestOffset);
        if (digest2.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest(code2, size, digest2, bytes);
      };
      equals2 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          return a.code === b.code && a.size === b.size && equals(a.bytes, b.bytes);
        }
      };
      Digest = class {
        constructor(code2, size, digest2, bytes) {
          this.code = code2;
          this.size = size;
          this.digest = digest2;
          this.bytes = bytes;
        }
      };
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/vendor/base-x.js
  function base(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode13(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length5 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length5) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length5 = i2;
        pbegin++;
      }
      var it2 = size - length5;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length5 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length5) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length5 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length5;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode21(string2) {
      var buffer2 = decodeUnsafe(string2);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode13,
      decodeUnsafe,
      decode: decode21
    };
  }
  var src, _brrp__multiformats_scope_baseX, base_x_default;
  var init_base_x = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/vendor/base-x.js"() {
      src = base;
      _brrp__multiformats_scope_baseX = src;
      base_x_default = _brrp__multiformats_scope_baseX;
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base.js
  var Encoder, Decoder, ComposedDecoder, or, Codec, from, baseX, decode4, encode2, rfc4648;
  var init_base = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base.js"() {
      init_base_x();
      init_bytes();
      Encoder = class {
        constructor(name2, prefix, baseEncode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
        }
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder = class {
        constructor(name2, prefix, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder2) {
          return or(this, decoder2);
        }
      };
      ComposedDecoder = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder2) {
          return or(this, decoder2);
        }
        decode(input) {
          const prefix = input[0];
          const decoder2 = this.decoders[prefix];
          if (decoder2) {
            return decoder2.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or = (left, right) => new ComposedDecoder(__spreadValues(__spreadValues({}, left.decoders || { [left.prefix]: left }), right.decoders || { [right.prefix]: right }));
      Codec = class {
        constructor(name2, prefix, baseEncode, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder(name2, prefix, baseEncode);
          this.decoder = new Decoder(name2, prefix, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from = ({ name: name2, prefix, encode: encode13, decode: decode21 }) => new Codec(name2, prefix, encode13, decode21);
      baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
        const { encode: encode13, decode: decode21 } = base_x_default(alphabet2, name2);
        return from({
          prefix,
          name: name2,
          encode: encode13,
          decode: (text) => coerce(decode21(text))
        });
      };
      decode4 = (string2, alphabet2, bitsPerChar, name2) => {
        const codes = {};
        for (let i = 0; i < alphabet2.length; ++i) {
          codes[alphabet2[i]] = i;
        }
        let end = string2.length;
        while (string2[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string2[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name2} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode2 = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer2 = buffer2 << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
        return from({
          prefix,
          name: name2,
          encode(input) {
            return encode2(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode4(input, alphabet2, bitsPerChar, name2);
          }
        });
      };
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base58.js
  var base58btc, base58flickr;
  var init_base58 = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base58.js"() {
      init_base();
      base58btc = baseX({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr = baseX({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base32.js
  var base32, base32upper, base32pad, base32padupper, base32hex, base32hexupper, base32hexpad, base32hexpadupper, base32z;
  var init_base32 = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base32.js"() {
      init_base();
      base32 = rfc4648({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper = rfc4648({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad = rfc4648({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper = rfc4648({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex = rfc4648({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper = rfc4648({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad = rfc4648({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper = rfc4648({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z = rfc4648({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // node_modules/@atproto/common-web/node_modules/multiformats/esm/src/cid.js
  var cid_exports = {};
  __export(cid_exports, {
    CID: () => CID
  });
  var CID, parseCIDtoBytes, toStringV0, toStringV1, DAG_PB_CODE, SHA_256_CODE, encodeCID, cidSymbol, readonly, hidden, version, deprecate, IS_CID_DEPRECATION;
  var init_cid = __esm({
    "node_modules/@atproto/common-web/node_modules/multiformats/esm/src/cid.js"() {
      init_varint2();
      init_digest();
      init_base58();
      init_base32();
      init_bytes();
      CID = class _CID {
        constructor(version5, code2, multihash, bytes) {
          this.code = code2;
          this.version = version5;
          this.multihash = multihash;
          this.bytes = bytes;
          this.byteOffset = bytes.byteOffset;
          this.byteLength = bytes.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code2, multihash } = this;
              if (code2 !== DAG_PB_CODE) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return _CID.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code2, digest: digest2 } = this.multihash;
              const multihash = create(code2, digest2);
              return _CID.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
        }
        toString(base5) {
          const { bytes, version: version5, _baseCache } = this;
          switch (version5) {
            case 0:
              return toStringV0(bytes, _baseCache, base5 || base58btc.encoder);
            default:
              return toStringV1(bytes, _baseCache, base5 || base32.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate(/^0\.0/, IS_CID_DEPRECATION);
          return !!(value && (value[cidSymbol] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof _CID) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version5, code: code2, multihash, bytes } = value;
            return new _CID(version5, code2, multihash, bytes || encodeCID(version5, code2, multihash.bytes));
          } else if (value != null && value[cidSymbol] === true) {
            const { version: version5, multihash, code: code2 } = value;
            const digest2 = decode3(multihash);
            return _CID.create(version5, code2, digest2);
          } else {
            return null;
          }
        }
        static create(version5, code2, digest2) {
          if (typeof code2 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version5) {
            case 0: {
              if (code2 !== DAG_PB_CODE) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
              } else {
                return new _CID(version5, code2, digest2, digest2.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID(version5, code2, digest2.bytes);
              return new _CID(version5, code2, digest2, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest2) {
          return _CID.create(0, DAG_PB_CODE, digest2);
        }
        static createV1(code2, digest2) {
          return _CID.create(1, code2, digest2);
        }
        static decode(bytes) {
          const [cid, remainder] = _CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        static decodeFirst(bytes) {
          const specs = _CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
          return [
            cid,
            bytes.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next = () => {
            const [i, length5] = decode2(initialBytes.subarray(offset));
            offset += length5;
            return i;
          };
          let version5 = next();
          let codec = DAG_PB_CODE;
          if (version5 === 18) {
            version5 = 0;
            offset = 0;
          } else if (version5 === 1) {
            codec = next();
          }
          if (version5 !== 0 && version5 !== 1) {
            throw new RangeError(`Invalid CID version ${version5}`);
          }
          const prefixSize = offset;
          const multihashCode = next();
          const digestSize = next();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version5,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base5) {
          const [prefix, bytes] = parseCIDtoBytes(source, base5);
          const cid = _CID.decode(bytes);
          cid._baseCache.set(prefix, source);
          return cid;
        }
      };
      parseCIDtoBytes = (source, base5) => {
        switch (source[0]) {
          case "Q": {
            const decoder2 = base5 || base58btc;
            return [
              base58btc.prefix,
              decoder2.decode(`${base58btc.prefix}${source}`)
            ];
          }
          case base58btc.prefix: {
            const decoder2 = base5 || base58btc;
            return [
              base58btc.prefix,
              decoder2.decode(source)
            ];
          }
          case base32.prefix: {
            const decoder2 = base5 || base32;
            return [
              base32.prefix,
              decoder2.decode(source)
            ];
          }
          default: {
            if (base5 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base5.decode(source)
            ];
          }
        }
      };
      toStringV0 = (bytes, cache2, base5) => {
        const { prefix } = base5;
        if (prefix !== base58btc.prefix) {
          throw Error(`Cannot string encode V0 in ${base5.name} encoding`);
        }
        const cid = cache2.get(prefix);
        if (cid == null) {
          const cid2 = base5.encode(bytes).slice(1);
          cache2.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV1 = (bytes, cache2, base5) => {
        const { prefix } = base5;
        const cid = cache2.get(prefix);
        if (cid == null) {
          const cid2 = base5.encode(bytes);
          cache2.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE = 112;
      SHA_256_CODE = 18;
      encodeCID = (version5, code2, multihash) => {
        const codeOffset = encodingLength(version5);
        const hashOffset = codeOffset + encodingLength(code2);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo(version5, bytes, 0);
        encodeTo(code2, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol = Symbol.for("@ipld/js-cid/CID");
      readonly = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      hidden = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      version = "0.0.0-dev";
      deprecate = (range, message) => {
        if (range.test(version)) {
          console.warn(message);
        } else {
          throw new Error(message);
        }
      };
      IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    }
  });

  // node_modules/uint8arrays/esm/src/compare.js
  function compare(a, b) {
    for (let i = 0; i < a.byteLength; i++) {
      if (a[i] < b[i]) {
        return -1;
      }
      if (a[i] > b[i]) {
        return 1;
      }
    }
    if (a.byteLength > b.byteLength) {
      return 1;
    }
    if (a.byteLength < b.byteLength) {
      return -1;
    }
    return 0;
  }
  var init_compare = __esm({
    "node_modules/uint8arrays/esm/src/compare.js"() {
    }
  });

  // node_modules/uint8arrays/esm/src/concat.js
  function concat(arrays, length5) {
    if (!length5) {
      length5 = arrays.reduce((acc, curr) => acc + curr.length, 0);
    }
    const output = new Uint8Array(length5);
    let offset = 0;
    for (const arr of arrays) {
      output.set(arr, offset);
      offset += arr.length;
    }
    return output;
  }
  var init_concat = __esm({
    "node_modules/uint8arrays/esm/src/concat.js"() {
    }
  });

  // node_modules/uint8arrays/esm/src/equals.js
  function equals3(a, b) {
    if (a === b) {
      return true;
    }
    if (a.byteLength !== b.byteLength) {
      return false;
    }
    for (let i = 0; i < a.byteLength; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  }
  var init_equals = __esm({
    "node_modules/uint8arrays/esm/src/equals.js"() {
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/vendor/base-x.js
  function base2(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode13(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length5 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length5) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length5 = i2;
        pbegin++;
      }
      var it2 = size - length5;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length5 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length5) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length5 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length5;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode21(string2) {
      var buffer2 = decodeUnsafe(string2);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode13,
      decodeUnsafe,
      decode: decode21
    };
  }
  var src2, _brrp__multiformats_scope_baseX2, base_x_default2;
  var init_base_x2 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/vendor/base-x.js"() {
      src2 = base2;
      _brrp__multiformats_scope_baseX2 = src2;
      base_x_default2 = _brrp__multiformats_scope_baseX2;
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bytes.js
  var empty2, equals4, coerce2, fromString, toString;
  var init_bytes2 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bytes.js"() {
      empty2 = new Uint8Array(0);
      equals4 = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce2 = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
      fromString = (str) => new TextEncoder().encode(str);
      toString = (b) => new TextDecoder().decode(b);
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base.js
  var Encoder2, Decoder2, ComposedDecoder2, or2, Codec2, from2, baseX2, decode5, encode3, rfc46482;
  var init_base2 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base.js"() {
      init_base_x2();
      init_bytes2();
      Encoder2 = class {
        constructor(name2, prefix, baseEncode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
        }
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder2 = class {
        constructor(name2, prefix, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder2) {
          return or2(this, decoder2);
        }
      };
      ComposedDecoder2 = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder2) {
          return or2(this, decoder2);
        }
        decode(input) {
          const prefix = input[0];
          const decoder2 = this.decoders[prefix];
          if (decoder2) {
            return decoder2.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or2 = (left, right) => new ComposedDecoder2(__spreadValues(__spreadValues({}, left.decoders || { [left.prefix]: left }), right.decoders || { [right.prefix]: right }));
      Codec2 = class {
        constructor(name2, prefix, baseEncode, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder2(name2, prefix, baseEncode);
          this.decoder = new Decoder2(name2, prefix, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from2 = ({ name: name2, prefix, encode: encode13, decode: decode21 }) => new Codec2(name2, prefix, encode13, decode21);
      baseX2 = ({ prefix, name: name2, alphabet: alphabet2 }) => {
        const { encode: encode13, decode: decode21 } = base_x_default2(alphabet2, name2);
        return from2({
          prefix,
          name: name2,
          encode: encode13,
          decode: (text) => coerce2(decode21(text))
        });
      };
      decode5 = (string2, alphabet2, bitsPerChar, name2) => {
        const codes = {};
        for (let i = 0; i < alphabet2.length; ++i) {
          codes[alphabet2[i]] = i;
        }
        let end = string2.length;
        while (string2[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string2[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name2} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode3 = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer2 = buffer2 << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc46482 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
        return from2({
          prefix,
          name: name2,
          encode(input) {
            return encode3(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode5(input, alphabet2, bitsPerChar, name2);
          }
        });
      };
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/identity.js
  var identity_exports = {};
  __export(identity_exports, {
    identity: () => identity
  });
  var identity;
  var init_identity = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/identity.js"() {
      init_base2();
      init_bytes2();
      identity = from2({
        prefix: "\0",
        name: "identity",
        encode: (buf2) => toString(buf2),
        decode: (str) => fromString(str)
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base2.js
  var base2_exports = {};
  __export(base2_exports, {
    base2: () => base22
  });
  var base22;
  var init_base22 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base2.js"() {
      init_base2();
      base22 = rfc46482({
        prefix: "0",
        name: "base2",
        alphabet: "01",
        bitsPerChar: 1
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base8.js
  var base8_exports = {};
  __export(base8_exports, {
    base8: () => base8
  });
  var base8;
  var init_base8 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base8.js"() {
      init_base2();
      base8 = rfc46482({
        prefix: "7",
        name: "base8",
        alphabet: "01234567",
        bitsPerChar: 3
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base10.js
  var base10_exports = {};
  __export(base10_exports, {
    base10: () => base10
  });
  var base10;
  var init_base10 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base10.js"() {
      init_base2();
      base10 = baseX2({
        prefix: "9",
        name: "base10",
        alphabet: "0123456789"
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base16.js
  var base16_exports = {};
  __export(base16_exports, {
    base16: () => base16,
    base16upper: () => base16upper
  });
  var base16, base16upper;
  var init_base16 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base16.js"() {
      init_base2();
      base16 = rfc46482({
        prefix: "f",
        name: "base16",
        alphabet: "0123456789abcdef",
        bitsPerChar: 4
      });
      base16upper = rfc46482({
        prefix: "F",
        name: "base16upper",
        alphabet: "0123456789ABCDEF",
        bitsPerChar: 4
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base32.js
  var base32_exports = {};
  __export(base32_exports, {
    base32: () => base322,
    base32hex: () => base32hex2,
    base32hexpad: () => base32hexpad2,
    base32hexpadupper: () => base32hexpadupper2,
    base32hexupper: () => base32hexupper2,
    base32pad: () => base32pad2,
    base32padupper: () => base32padupper2,
    base32upper: () => base32upper2,
    base32z: () => base32z2
  });
  var base322, base32upper2, base32pad2, base32padupper2, base32hex2, base32hexupper2, base32hexpad2, base32hexpadupper2, base32z2;
  var init_base322 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base32.js"() {
      init_base2();
      base322 = rfc46482({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper2 = rfc46482({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad2 = rfc46482({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper2 = rfc46482({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex2 = rfc46482({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper2 = rfc46482({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad2 = rfc46482({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper2 = rfc46482({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z2 = rfc46482({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base36.js
  var base36_exports = {};
  __export(base36_exports, {
    base36: () => base36,
    base36upper: () => base36upper
  });
  var base36, base36upper;
  var init_base36 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base36.js"() {
      init_base2();
      base36 = baseX2({
        prefix: "k",
        name: "base36",
        alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
      });
      base36upper = baseX2({
        prefix: "K",
        name: "base36upper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base58.js
  var base58_exports = {};
  __export(base58_exports, {
    base58btc: () => base58btc2,
    base58flickr: () => base58flickr2
  });
  var base58btc2, base58flickr2;
  var init_base582 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base58.js"() {
      init_base2();
      base58btc2 = baseX2({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr2 = baseX2({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base64.js
  var base64_exports = {};
  __export(base64_exports, {
    base64: () => base64,
    base64pad: () => base64pad,
    base64url: () => base64url,
    base64urlpad: () => base64urlpad
  });
  var base64, base64pad, base64url, base64urlpad;
  var init_base64 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base64.js"() {
      init_base2();
      base64 = rfc46482({
        prefix: "m",
        name: "base64",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        bitsPerChar: 6
      });
      base64pad = rfc46482({
        prefix: "M",
        name: "base64pad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        bitsPerChar: 6
      });
      base64url = rfc46482({
        prefix: "u",
        name: "base64url",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
        bitsPerChar: 6
      });
      base64urlpad = rfc46482({
        prefix: "U",
        name: "base64urlpad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
        bitsPerChar: 6
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base256emoji.js
  var base256emoji_exports = {};
  __export(base256emoji_exports, {
    base256emoji: () => base256emoji
  });
  function encode4(data) {
    return data.reduce((p, c) => {
      p += alphabetBytesToChars[c];
      return p;
    }, "");
  }
  function decode6(str) {
    const byts = [];
    for (const char of str) {
      const byt = alphabetCharsToBytes[char.codePointAt(0)];
      if (byt === void 0) {
        throw new Error(`Non-base256emoji character: ${char}`);
      }
      byts.push(byt);
    }
    return new Uint8Array(byts);
  }
  var alphabet, alphabetBytesToChars, alphabetCharsToBytes, base256emoji;
  var init_base256emoji = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base256emoji.js"() {
      init_base2();
      alphabet = Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}");
      alphabetBytesToChars = alphabet.reduce((p, c, i) => {
        p[i] = c;
        return p;
      }, []);
      alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
        p[c.codePointAt(0)] = i;
        return p;
      }, []);
      base256emoji = from2({
        prefix: "\u{1F680}",
        name: "base256emoji",
        encode: encode4,
        decode: decode6
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/vendor/varint.js
  function encode5(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT2) {
      out[offset++] = num & 255 | MSB2;
      num /= 128;
    }
    while (num & MSBALL2) {
      out[offset++] = num & 255 | MSB2;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode5.bytes = offset - oldOffset + 1;
    return out;
  }
  function read2(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read2.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$12) << shift : (b & REST$12) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$12);
    read2.bytes = counter - offset;
    return res;
  }
  var encode_12, MSB2, REST2, MSBALL2, INT2, decode7, MSB$12, REST$12, N12, N22, N32, N42, N52, N62, N72, N82, N92, length2, varint2, _brrp_varint2, varint_default2;
  var init_varint3 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/vendor/varint.js"() {
      encode_12 = encode5;
      MSB2 = 128;
      REST2 = 127;
      MSBALL2 = ~REST2;
      INT2 = Math.pow(2, 31);
      decode7 = read2;
      MSB$12 = 128;
      REST$12 = 127;
      N12 = Math.pow(2, 7);
      N22 = Math.pow(2, 14);
      N32 = Math.pow(2, 21);
      N42 = Math.pow(2, 28);
      N52 = Math.pow(2, 35);
      N62 = Math.pow(2, 42);
      N72 = Math.pow(2, 49);
      N82 = Math.pow(2, 56);
      N92 = Math.pow(2, 63);
      length2 = function(value) {
        return value < N12 ? 1 : value < N22 ? 2 : value < N32 ? 3 : value < N42 ? 4 : value < N52 ? 5 : value < N62 ? 6 : value < N72 ? 7 : value < N82 ? 8 : value < N92 ? 9 : 10;
      };
      varint2 = {
        encode: encode_12,
        decode: decode7,
        encodingLength: length2
      };
      _brrp_varint2 = varint2;
      varint_default2 = _brrp_varint2;
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/varint.js
  var decode8, encodeTo2, encodingLength2;
  var init_varint4 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/varint.js"() {
      init_varint3();
      decode8 = (data, offset = 0) => {
        const code2 = varint_default2.decode(data, offset);
        return [
          code2,
          varint_default2.decode.bytes
        ];
      };
      encodeTo2 = (int, target2, offset = 0) => {
        varint_default2.encode(int, target2, offset);
        return target2;
      };
      encodingLength2 = (int) => {
        return varint_default2.encodingLength(int);
      };
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/digest.js
  var create2, decode9, equals5, Digest2;
  var init_digest2 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/digest.js"() {
      init_bytes2();
      init_varint4();
      create2 = (code2, digest2) => {
        const size = digest2.byteLength;
        const sizeOffset = encodingLength2(code2);
        const digestOffset = sizeOffset + encodingLength2(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo2(code2, bytes, 0);
        encodeTo2(size, bytes, sizeOffset);
        bytes.set(digest2, digestOffset);
        return new Digest2(code2, size, digest2, bytes);
      };
      decode9 = (multihash) => {
        const bytes = coerce2(multihash);
        const [code2, sizeOffset] = decode8(bytes);
        const [size, digestOffset] = decode8(bytes.subarray(sizeOffset));
        const digest2 = bytes.subarray(sizeOffset + digestOffset);
        if (digest2.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest2(code2, size, digest2, bytes);
      };
      equals5 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          return a.code === b.code && a.size === b.size && equals4(a.bytes, b.bytes);
        }
      };
      Digest2 = class {
        constructor(code2, size, digest2, bytes) {
          this.code = code2;
          this.size = size;
          this.digest = digest2;
          this.bytes = bytes;
        }
      };
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/hasher.js
  var from3, Hasher;
  var init_hasher = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/hasher.js"() {
      init_digest2();
      from3 = ({ name: name2, code: code2, encode: encode13 }) => new Hasher(name2, code2, encode13);
      Hasher = class {
        constructor(name2, code2, encode13) {
          this.name = name2;
          this.code = code2;
          this.encode = encode13;
        }
        digest(input) {
          if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/sha2-browser.js
  var sha2_browser_exports = {};
  __export(sha2_browser_exports, {
    sha256: () => sha256,
    sha512: () => sha512
  });
  var sha, sha256, sha512;
  var init_sha2_browser = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/sha2-browser.js"() {
      init_hasher();
      sha = (name2) => (data) => __async(void 0, null, function* () {
        return new Uint8Array(yield crypto.subtle.digest(name2, data));
      });
      sha256 = from3({
        name: "sha2-256",
        code: 18,
        encode: sha("SHA-256")
      });
      sha512 = from3({
        name: "sha2-512",
        code: 19,
        encode: sha("SHA-512")
      });
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/identity.js
  var identity_exports2 = {};
  __export(identity_exports2, {
    identity: () => identity2
  });
  var code, name, encode6, digest, identity2;
  var init_identity2 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/identity.js"() {
      init_bytes2();
      init_digest2();
      code = 0;
      name = "identity";
      encode6 = coerce2;
      digest = (input) => create2(code, encode6(input));
      identity2 = {
        code,
        name,
        encode: encode6,
        digest
      };
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/codecs/raw.js
  var init_raw = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/codecs/raw.js"() {
      init_bytes2();
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/codecs/json.js
  var textEncoder, textDecoder;
  var init_json = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/codecs/json.js"() {
      textEncoder = new TextEncoder();
      textDecoder = new TextDecoder();
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/cid.js
  var CID2, parseCIDtoBytes2, toStringV02, toStringV12, DAG_PB_CODE2, SHA_256_CODE2, encodeCID2, cidSymbol2, readonly2, hidden2, version2, deprecate2, IS_CID_DEPRECATION2;
  var init_cid2 = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/cid.js"() {
      init_varint4();
      init_digest2();
      init_base582();
      init_base322();
      init_bytes2();
      CID2 = class _CID {
        constructor(version5, code2, multihash, bytes) {
          this.code = code2;
          this.version = version5;
          this.multihash = multihash;
          this.bytes = bytes;
          this.byteOffset = bytes.byteOffset;
          this.byteLength = bytes.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden2,
            byteLength: hidden2,
            code: readonly2,
            version: readonly2,
            multihash: readonly2,
            bytes: readonly2,
            _baseCache: hidden2,
            asCID: hidden2
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code2, multihash } = this;
              if (code2 !== DAG_PB_CODE2) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE2) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return _CID.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code2, digest: digest2 } = this.multihash;
              const multihash = create2(code2, digest2);
              return _CID.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals5(this.multihash, other.multihash);
        }
        toString(base5) {
          const { bytes, version: version5, _baseCache } = this;
          switch (version5) {
            case 0:
              return toStringV02(bytes, _baseCache, base5 || base58btc2.encoder);
            default:
              return toStringV12(bytes, _baseCache, base5 || base322.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate2(/^0\.0/, IS_CID_DEPRECATION2);
          return !!(value && (value[cidSymbol2] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof _CID) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version5, code: code2, multihash, bytes } = value;
            return new _CID(version5, code2, multihash, bytes || encodeCID2(version5, code2, multihash.bytes));
          } else if (value != null && value[cidSymbol2] === true) {
            const { version: version5, multihash, code: code2 } = value;
            const digest2 = decode9(multihash);
            return _CID.create(version5, code2, digest2);
          } else {
            return null;
          }
        }
        static create(version5, code2, digest2) {
          if (typeof code2 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version5) {
            case 0: {
              if (code2 !== DAG_PB_CODE2) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE2}) block encoding`);
              } else {
                return new _CID(version5, code2, digest2, digest2.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID2(version5, code2, digest2.bytes);
              return new _CID(version5, code2, digest2, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest2) {
          return _CID.create(0, DAG_PB_CODE2, digest2);
        }
        static createV1(code2, digest2) {
          return _CID.create(1, code2, digest2);
        }
        static decode(bytes) {
          const [cid, remainder] = _CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        static decodeFirst(bytes) {
          const specs = _CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce2(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest2 = new Digest2(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
          return [
            cid,
            bytes.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next = () => {
            const [i, length5] = decode8(initialBytes.subarray(offset));
            offset += length5;
            return i;
          };
          let version5 = next();
          let codec = DAG_PB_CODE2;
          if (version5 === 18) {
            version5 = 0;
            offset = 0;
          } else if (version5 === 1) {
            codec = next();
          }
          if (version5 !== 0 && version5 !== 1) {
            throw new RangeError(`Invalid CID version ${version5}`);
          }
          const prefixSize = offset;
          const multihashCode = next();
          const digestSize = next();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version5,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base5) {
          const [prefix, bytes] = parseCIDtoBytes2(source, base5);
          const cid = _CID.decode(bytes);
          cid._baseCache.set(prefix, source);
          return cid;
        }
      };
      parseCIDtoBytes2 = (source, base5) => {
        switch (source[0]) {
          case "Q": {
            const decoder2 = base5 || base58btc2;
            return [
              base58btc2.prefix,
              decoder2.decode(`${base58btc2.prefix}${source}`)
            ];
          }
          case base58btc2.prefix: {
            const decoder2 = base5 || base58btc2;
            return [
              base58btc2.prefix,
              decoder2.decode(source)
            ];
          }
          case base322.prefix: {
            const decoder2 = base5 || base322;
            return [
              base322.prefix,
              decoder2.decode(source)
            ];
          }
          default: {
            if (base5 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base5.decode(source)
            ];
          }
        }
      };
      toStringV02 = (bytes, cache2, base5) => {
        const { prefix } = base5;
        if (prefix !== base58btc2.prefix) {
          throw Error(`Cannot string encode V0 in ${base5.name} encoding`);
        }
        const cid = cache2.get(prefix);
        if (cid == null) {
          const cid2 = base5.encode(bytes).slice(1);
          cache2.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV12 = (bytes, cache2, base5) => {
        const { prefix } = base5;
        const cid = cache2.get(prefix);
        if (cid == null) {
          const cid2 = base5.encode(bytes);
          cache2.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE2 = 112;
      SHA_256_CODE2 = 18;
      encodeCID2 = (version5, code2, multihash) => {
        const codeOffset = encodingLength2(version5);
        const hashOffset = codeOffset + encodingLength2(code2);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo2(version5, bytes, 0);
        encodeTo2(code2, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol2 = Symbol.for("@ipld/js-cid/CID");
      readonly2 = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      hidden2 = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      version2 = "0.0.0-dev";
      deprecate2 = (range, message) => {
        if (range.test(version2)) {
          console.warn(message);
        } else {
          throw new Error(message);
        }
      };
      IS_CID_DEPRECATION2 = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/index.js
  var init_src = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/index.js"() {
      init_cid2();
      init_varint4();
      init_bytes2();
      init_hasher();
      init_digest2();
    }
  });

  // node_modules/uint8arrays/node_modules/multiformats/esm/src/basics.js
  var bases, hashes;
  var init_basics = __esm({
    "node_modules/uint8arrays/node_modules/multiformats/esm/src/basics.js"() {
      init_identity();
      init_base22();
      init_base8();
      init_base10();
      init_base16();
      init_base322();
      init_base36();
      init_base582();
      init_base64();
      init_base256emoji();
      init_sha2_browser();
      init_identity2();
      init_raw();
      init_json();
      init_src();
      bases = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, identity_exports), base2_exports), base8_exports), base10_exports), base16_exports), base32_exports), base36_exports), base58_exports), base64_exports), base256emoji_exports);
      hashes = __spreadValues(__spreadValues({}, sha2_browser_exports), identity_exports2);
    }
  });

  // node_modules/uint8arrays/esm/src/util/bases.js
  function createCodec(name2, prefix, encode13, decode21) {
    return {
      name: name2,
      prefix,
      encoder: {
        name: name2,
        prefix,
        encode: encode13
      },
      decoder: { decode: decode21 }
    };
  }
  var string, ascii, BASES, bases_default;
  var init_bases = __esm({
    "node_modules/uint8arrays/esm/src/util/bases.js"() {
      init_basics();
      string = createCodec("utf8", "u", (buf2) => {
        const decoder2 = new TextDecoder("utf8");
        return "u" + decoder2.decode(buf2);
      }, (str) => {
        const encoder = new TextEncoder();
        return encoder.encode(str.substring(1));
      });
      ascii = createCodec("ascii", "a", (buf2) => {
        let string2 = "a";
        for (let i = 0; i < buf2.length; i++) {
          string2 += String.fromCharCode(buf2[i]);
        }
        return string2;
      }, (str) => {
        str = str.substring(1);
        const buf2 = new Uint8Array(str.length);
        for (let i = 0; i < str.length; i++) {
          buf2[i] = str.charCodeAt(i);
        }
        return buf2;
      });
      BASES = __spreadValues({
        utf8: string,
        "utf-8": string,
        hex: bases.base16,
        latin1: ascii,
        ascii,
        binary: ascii
      }, bases);
      bases_default = BASES;
    }
  });

  // node_modules/uint8arrays/esm/src/from-string.js
  function fromString2(string2, encoding = "utf8") {
    const base5 = bases_default[encoding];
    if (!base5) {
      throw new Error(`Unsupported encoding "${encoding}"`);
    }
    return base5.decoder.decode(`${base5.prefix}${string2}`);
  }
  var init_from_string = __esm({
    "node_modules/uint8arrays/esm/src/from-string.js"() {
      init_bases();
    }
  });

  // node_modules/uint8arrays/esm/src/to-string.js
  function toString2(array, encoding = "utf8") {
    const base5 = bases_default[encoding];
    if (!base5) {
      throw new Error(`Unsupported encoding "${encoding}"`);
    }
    return base5.encoder.encode(array).substring(1);
  }
  var init_to_string = __esm({
    "node_modules/uint8arrays/esm/src/to-string.js"() {
      init_bases();
    }
  });

  // node_modules/uint8arrays/esm/src/xor.js
  function xor(a, b) {
    if (a.length !== b.length) {
      throw new Error("Inputs should have the same length");
    }
    const result = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
      result[i] = a[i] ^ b[i];
    }
    return result;
  }
  var init_xor = __esm({
    "node_modules/uint8arrays/esm/src/xor.js"() {
    }
  });

  // node_modules/uint8arrays/esm/src/index.js
  var src_exports = {};
  __export(src_exports, {
    compare: () => compare,
    concat: () => concat,
    equals: () => equals3,
    fromString: () => fromString2,
    toString: () => toString2,
    xor: () => xor
  });
  var init_src2 = __esm({
    "node_modules/uint8arrays/esm/src/index.js"() {
      init_compare();
      init_concat();
      init_equals();
      init_from_string();
      init_to_string();
      init_xor();
    }
  });

  // node_modules/@atproto/common-web/dist/ipld.js
  var require_ipld = __commonJS({
    "node_modules/@atproto/common-web/dist/ipld.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ipldEquals = exports.ipldToJson = exports.jsonToIpld = void 0;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var ui8 = __importStar((init_src2(), __toCommonJS(src_exports)));
      var jsonToIpld = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.jsonToIpld)(item));
        }
        if (val && typeof val === "object") {
          if (typeof val["$link"] === "string" && Object.keys(val).length === 1) {
            return cid_1.CID.parse(val["$link"]);
          }
          if (typeof val["$bytes"] === "string" && Object.keys(val).length === 1) {
            return ui8.fromString(val["$bytes"], "base64");
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.jsonToIpld)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.jsonToIpld = jsonToIpld;
      var ipldToJson = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.ipldToJson)(item));
        }
        if (val && typeof val === "object") {
          if (val instanceof Uint8Array) {
            return {
              $bytes: ui8.toString(val, "base64")
            };
          }
          if (cid_1.CID.asCID(val)) {
            return {
              $link: val.toString()
            };
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.ipldToJson)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.ipldToJson = ipldToJson;
      var ipldEquals = (a, b) => {
        var _a2;
        if (Array.isArray(a) && Array.isArray(b)) {
          if (a.length !== b.length)
            return false;
          for (let i = 0; i < a.length; i++) {
            if (!(0, exports.ipldEquals)(a[i], b[i]))
              return false;
          }
          return true;
        }
        if (a && b && typeof a === "object" && typeof b === "object") {
          if (a instanceof Uint8Array && b instanceof Uint8Array) {
            return ui8.equals(a, b);
          }
          if (cid_1.CID.asCID(a) && cid_1.CID.asCID(b)) {
            return (_a2 = cid_1.CID.asCID(a)) == null ? void 0 : _a2.equals(cid_1.CID.asCID(b));
          }
          if (Object.keys(a).length !== Object.keys(b).length)
            return false;
          for (const key of Object.keys(a)) {
            if (!(0, exports.ipldEquals)(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a === b;
      };
      exports.ipldEquals = ipldEquals;
    }
  });

  // node_modules/@atproto/common-web/dist/retry.js
  var require_retry = __commonJS({
    "node_modules/@atproto/common-web/dist/retry.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.backoffMs = exports.retry = void 0;
      var util_1 = require_util2();
      function retry(_0) {
        return __async(this, arguments, function* (fn, opts = {}) {
          const { maxRetries = 3, retryable = () => true, getWaitMs = backoffMs } = opts;
          let retries = 0;
          let doneError;
          while (!doneError) {
            try {
              return yield fn();
            } catch (err) {
              const waitMs = getWaitMs(retries);
              const willRetry = retries < maxRetries && waitMs !== null && retryable(err);
              if (willRetry) {
                retries += 1;
                if (waitMs !== 0) {
                  yield (0, util_1.wait)(waitMs);
                }
              } else {
                doneError = err;
              }
            }
          }
          throw doneError;
        });
      }
      exports.retry = retry;
      function backoffMs(n, multiplier = 100, max = 1e3) {
        const exponentialMs = Math.pow(2, n) * multiplier;
        const ms = Math.min(exponentialMs, max);
        return jitter(ms);
      }
      exports.backoffMs = backoffMs;
      function jitter(value) {
        const delta = value * 0.15;
        return value + randomRange(-delta, delta);
      }
      function randomRange(from6, to) {
        const rand = Math.random() * (to - from6);
        return rand + from6;
      }
    }
  });

  // node_modules/@atproto/common-web/dist/types.js
  var require_types2 = __commonJS({
    "node_modules/@atproto/common-web/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.def = exports.schema = void 0;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var zod_1 = require_lib();
      var cidSchema = zod_1.z.any().refine((obj) => cid_1.CID.asCID(obj) !== null, {
        message: "Not a CID"
      }).transform((obj) => cid_1.CID.asCID(obj));
      exports.schema = {
        cid: cidSchema,
        bytes: zod_1.z.instanceof(Uint8Array),
        string: zod_1.z.string(),
        array: zod_1.z.array(zod_1.z.unknown()),
        map: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()),
        unknown: zod_1.z.unknown()
      };
      exports.def = {
        cid: {
          name: "cid",
          schema: exports.schema.cid
        },
        bytes: {
          name: "bytes",
          schema: exports.schema.bytes
        },
        string: {
          name: "string",
          schema: exports.schema.string
        },
        map: {
          name: "map",
          schema: exports.schema.map
        },
        unknown: {
          name: "unknown",
          schema: exports.schema.unknown
        }
      };
    }
  });

  // node_modules/@atproto/common-web/dist/times.js
  var require_times = __commonJS({
    "node_modules/@atproto/common-web/dist/times.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.addHoursToDate = exports.lessThanAgoMs = exports.DAY = exports.HOUR = exports.MINUTE = exports.SECOND = void 0;
      exports.SECOND = 1e3;
      exports.MINUTE = exports.SECOND * 60;
      exports.HOUR = exports.MINUTE * 60;
      exports.DAY = exports.HOUR * 24;
      var lessThanAgoMs = (time, range) => {
        return Date.now() < time.getTime() + range;
      };
      exports.lessThanAgoMs = lessThanAgoMs;
      var addHoursToDate = (hours, startingDate) => {
        const currentDate = startingDate ? new Date(startingDate) : /* @__PURE__ */ new Date();
        currentDate.setHours(currentDate.getHours() + hours);
        return currentDate;
      };
      exports.addHoursToDate = addHoursToDate;
    }
  });

  // node_modules/graphemer/lib/boundaries.js
  var require_boundaries = __commonJS({
    "node_modules/graphemer/lib/boundaries.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;
      var CLUSTER_BREAK;
      (function(CLUSTER_BREAK2) {
        CLUSTER_BREAK2[CLUSTER_BREAK2["CR"] = 0] = "CR";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LF"] = 1] = "LF";
        CLUSTER_BREAK2[CLUSTER_BREAK2["CONTROL"] = 2] = "CONTROL";
        CLUSTER_BREAK2[CLUSTER_BREAK2["EXTEND"] = 3] = "EXTEND";
        CLUSTER_BREAK2[CLUSTER_BREAK2["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
        CLUSTER_BREAK2[CLUSTER_BREAK2["SPACINGMARK"] = 5] = "SPACINGMARK";
        CLUSTER_BREAK2[CLUSTER_BREAK2["L"] = 6] = "L";
        CLUSTER_BREAK2[CLUSTER_BREAK2["V"] = 7] = "V";
        CLUSTER_BREAK2[CLUSTER_BREAK2["T"] = 8] = "T";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LV"] = 9] = "LV";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LVT"] = 10] = "LVT";
        CLUSTER_BREAK2[CLUSTER_BREAK2["OTHER"] = 11] = "OTHER";
        CLUSTER_BREAK2[CLUSTER_BREAK2["PREPEND"] = 12] = "PREPEND";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE"] = 13] = "E_BASE";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_MODIFIER"] = 14] = "E_MODIFIER";
        CLUSTER_BREAK2[CLUSTER_BREAK2["ZWJ"] = 15] = "ZWJ";
        CLUSTER_BREAK2[CLUSTER_BREAK2["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
      })(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
      exports.EXTENDED_PICTOGRAPHIC = 101;
    }
  });

  // node_modules/graphemer/lib/GraphemerHelper.js
  var require_GraphemerHelper = __commonJS({
    "node_modules/graphemer/lib/GraphemerHelper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var boundaries_1 = require_boundaries();
      var NotBreak = 0;
      var BreakStart = 1;
      var Break = 2;
      var BreakLastRegional = 3;
      var BreakPenultimateRegional = 4;
      var GraphemerHelper = class {
        /**
         * Check if the the character at the position {pos} of the string is surrogate
         * @param str {string}
         * @param pos {number}
         * @returns {boolean}
         */
        static isSurrogate(str, pos) {
          return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;
        }
        /**
         * The String.prototype.codePointAt polyfill
         * Private function, gets a Unicode code point from a JavaScript UTF-16 string
         * handling surrogate pairs appropriately
         * @param str {string}
         * @param idx {number}
         * @returns {number}
         */
        static codePointAt(str, idx) {
          if (idx === void 0) {
            idx = 0;
          }
          const code2 = str.charCodeAt(idx);
          if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {
            const hi = code2;
            const low = str.charCodeAt(idx + 1);
            if (56320 <= low && low <= 57343) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return hi;
          }
          if (56320 <= code2 && code2 <= 57343 && idx >= 1) {
            const hi = str.charCodeAt(idx - 1);
            const low = code2;
            if (55296 <= hi && hi <= 56319) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return low;
          }
          return code2;
        }
        //
        /**
         * Private function, returns whether a break is allowed between the two given grapheme breaking classes
         * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
         * @param start {number}
         * @param mid {Array<number>}
         * @param end {number}
         * @param startEmoji {number}
         * @param midEmoji {Array<number>}
         * @param endEmoji {number}
         * @returns {number}
         */
        static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
          const all2 = [start].concat(mid).concat([end]);
          const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);
          const previous = all2[all2.length - 2];
          const next = end;
          const nextEmoji = endEmoji;
          const rIIndex = all2.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
          if (rIIndex > 0 && all2.slice(1, rIIndex).every(function(c) {
            return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
          }) && [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {
            if (all2.filter(function(c) {
              return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
            }).length % 2 === 1) {
              return BreakLastRegional;
            } else {
              return BreakPenultimateRegional;
            }
          }
          if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {
            return NotBreak;
          } else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) {
            return BreakStart;
          } else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) {
            return BreakStart;
          } else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) {
            return NotBreak;
          } else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {
            return NotBreak;
          } else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) {
            return NotBreak;
          } else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {
            return NotBreak;
          } else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {
            return NotBreak;
          } else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {
            return NotBreak;
          }
          const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
          if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all2.slice(previousNonExtendIndex + 1, -2).every(function(c) {
            return c === boundaries_1.CLUSTER_BREAK.EXTEND;
          }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {
            return NotBreak;
          }
          if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {
            return Break;
          }
          if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {
            return NotBreak;
          }
          return BreakStart;
        }
      };
      exports.default = GraphemerHelper;
    }
  });

  // node_modules/graphemer/lib/GraphemerIterator.js
  var require_GraphemerIterator = __commonJS({
    "node_modules/graphemer/lib/GraphemerIterator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var GraphemerIterator = class {
        constructor(str, nextBreak) {
          this._index = 0;
          this._str = str;
          this._nextBreak = nextBreak;
        }
        [Symbol.iterator]() {
          return this;
        }
        next() {
          let brk;
          if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
            const value = this._str.slice(this._index, brk);
            this._index = brk;
            return { value, done: false };
          }
          if (this._index < this._str.length) {
            const value = this._str.slice(this._index);
            this._index = this._str.length;
            return { value, done: false };
          }
          return { value: void 0, done: true };
        }
      };
      exports.default = GraphemerIterator;
    }
  });

  // node_modules/graphemer/lib/Graphemer.js
  var require_Graphemer = __commonJS({
    "node_modules/graphemer/lib/Graphemer.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var boundaries_1 = require_boundaries();
      var GraphemerHelper_1 = __importDefault(require_GraphemerHelper());
      var GraphemerIterator_1 = __importDefault(require_GraphemerIterator());
      var Graphemer = class _Graphemer {
        /**
         * Returns the next grapheme break in the string after the given index
         * @param string {string}
         * @param index {number}
         * @returns {number}
         */
        static nextBreak(string2, index) {
          if (index === void 0) {
            index = 0;
          }
          if (index < 0) {
            return 0;
          }
          if (index >= string2.length - 1) {
            return string2.length;
          }
          const prevCP = GraphemerHelper_1.default.codePointAt(string2, index);
          const prev = _Graphemer.getGraphemeBreakProperty(prevCP);
          const prevEmoji = _Graphemer.getEmojiProperty(prevCP);
          const mid = [];
          const midEmoji = [];
          for (let i = index + 1; i < string2.length; i++) {
            if (GraphemerHelper_1.default.isSurrogate(string2, i - 1)) {
              continue;
            }
            const nextCP = GraphemerHelper_1.default.codePointAt(string2, i);
            const next = _Graphemer.getGraphemeBreakProperty(nextCP);
            const nextEmoji = _Graphemer.getEmojiProperty(nextCP);
            if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) {
              return i;
            }
            mid.push(next);
            midEmoji.push(nextEmoji);
          }
          return string2.length;
        }
        /**
         * Breaks the given string into an array of grapheme clusters
         * @param str {string}
         * @returns {string[]}
         */
        splitGraphemes(str) {
          const res = [];
          let index = 0;
          let brk;
          while ((brk = _Graphemer.nextBreak(str, index)) < str.length) {
            res.push(str.slice(index, brk));
            index = brk;
          }
          if (index < str.length) {
            res.push(str.slice(index));
          }
          return res;
        }
        /**
         * Returns an iterator of grapheme clusters in the given string
         * @param str {string}
         * @returns {GraphemerIterator}
         */
        iterateGraphemes(str) {
          return new GraphemerIterator_1.default(str, _Graphemer.nextBreak);
        }
        /**
         * Returns the number of grapheme clusters in the given string
         * @param str {string}
         * @returns {number}
         */
        countGraphemes(str) {
          let count = 0;
          let index = 0;
          let brk;
          while ((brk = _Graphemer.nextBreak(str, index)) < str.length) {
            index = brk;
            count++;
          }
          if (index < str.length) {
            count++;
          }
          return count;
        }
        /**
         * Given a Unicode code point, determines this symbol's grapheme break property
         * @param code {number} Unicode code point
         * @returns {number}
         */
        static getGraphemeBreakProperty(code2) {
          if (code2 < 48905) {
            if (code2 < 44116) {
              if (code2 < 4141) {
                if (code2 < 2818) {
                  if (code2 < 2363) {
                    if (code2 < 1759) {
                      if (code2 < 1471) {
                        if (code2 < 127) {
                          if (code2 < 11) {
                            if (code2 < 10) {
                              if (0 <= code2 && code2 <= 9) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (10 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LF;
                              }
                            }
                          } else {
                            if (code2 < 13) {
                              if (11 <= code2 && code2 <= 12) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 14) {
                                if (13 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.CR;
                                }
                              } else {
                                if (14 <= code2 && code2 <= 31) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 768) {
                            if (code2 < 173) {
                              if (127 <= code2 && code2 <= 159) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (173 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            }
                          } else {
                            if (code2 < 1155) {
                              if (768 <= code2 && code2 <= 879) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1425) {
                                if (1155 <= code2 && code2 <= 1161) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1425 <= code2 && code2 <= 1469) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 1552) {
                          if (code2 < 1476) {
                            if (code2 < 1473) {
                              if (1471 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1473 <= code2 && code2 <= 1474) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 1479) {
                              if (1476 <= code2 && code2 <= 1477) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1536) {
                                if (1479 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1536 <= code2 && code2 <= 1541) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 1648) {
                            if (code2 < 1564) {
                              if (1552 <= code2 && code2 <= 1562) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1611) {
                                if (1564 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (1611 <= code2 && code2 <= 1631) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 1750) {
                              if (1648 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1757) {
                                if (1750 <= code2 && code2 <= 1756) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1757 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2075) {
                        if (code2 < 1840) {
                          if (code2 < 1770) {
                            if (code2 < 1767) {
                              if (1759 <= code2 && code2 <= 1764) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1767 <= code2 && code2 <= 1768) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 1807) {
                              if (1770 <= code2 && code2 <= 1773) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1807 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                              if (1809 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 2027) {
                            if (code2 < 1958) {
                              if (1840 <= code2 && code2 <= 1866) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1958 <= code2 && code2 <= 1968) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2045) {
                              if (2027 <= code2 && code2 <= 2035) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2070) {
                                if (2045 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2070 <= code2 && code2 <= 2073) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2200) {
                          if (code2 < 2089) {
                            if (code2 < 2085) {
                              if (2075 <= code2 && code2 <= 2083) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2085 <= code2 && code2 <= 2087) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2137) {
                              if (2089 <= code2 && code2 <= 2093) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2192) {
                                if (2137 <= code2 && code2 <= 2139) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2192 <= code2 && code2 <= 2193) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2275) {
                            if (code2 < 2250) {
                              if (2200 <= code2 && code2 <= 2207) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2274) {
                                if (2250 <= code2 && code2 <= 2273) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2274 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2307) {
                              if (2275 <= code2 && code2 <= 2306) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2307 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (2362 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 2561) {
                      if (code2 < 2434) {
                        if (code2 < 2381) {
                          if (code2 < 2366) {
                            if (2363 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (2364 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2369) {
                              if (2366 <= code2 && code2 <= 2368) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2377) {
                                if (2369 <= code2 && code2 <= 2376) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2377 <= code2 && code2 <= 2380) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2385) {
                            if (code2 < 2382) {
                              if (2381 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2382 <= code2 && code2 <= 2383) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2402) {
                              if (2385 <= code2 && code2 <= 2391) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2433) {
                                if (2402 <= code2 && code2 <= 2403) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2433 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2503) {
                          if (code2 < 2494) {
                            if (code2 < 2492) {
                              if (2434 <= code2 && code2 <= 2435) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2492 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2495) {
                              if (2494 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2497) {
                                if (2495 <= code2 && code2 <= 2496) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2497 <= code2 && code2 <= 2500) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2519) {
                            if (code2 < 2507) {
                              if (2503 <= code2 && code2 <= 2504) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2509) {
                                if (2507 <= code2 && code2 <= 2508) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2509 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2530) {
                              if (2519 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2558) {
                                if (2530 <= code2 && code2 <= 2531) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2558 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2691) {
                        if (code2 < 2631) {
                          if (code2 < 2620) {
                            if (code2 < 2563) {
                              if (2561 <= code2 && code2 <= 2562) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2563 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2622) {
                              if (2620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2625) {
                                if (2622 <= code2 && code2 <= 2624) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2625 <= code2 && code2 <= 2626) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2672) {
                            if (code2 < 2635) {
                              if (2631 <= code2 && code2 <= 2632) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2641) {
                                if (2635 <= code2 && code2 <= 2637) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2641 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2677) {
                              if (2672 <= code2 && code2 <= 2673) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2689) {
                                if (2677 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2689 <= code2 && code2 <= 2690) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2761) {
                          if (code2 < 2750) {
                            if (2691 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (2748 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2753) {
                              if (2750 <= code2 && code2 <= 2752) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2759) {
                                if (2753 <= code2 && code2 <= 2757) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2759 <= code2 && code2 <= 2760) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2786) {
                            if (code2 < 2763) {
                              if (2761 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2765) {
                                if (2763 <= code2 && code2 <= 2764) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2765 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2810) {
                              if (2786 <= code2 && code2 <= 2787) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2817) {
                                if (2810 <= code2 && code2 <= 2815) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2817 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 3315) {
                    if (code2 < 3076) {
                      if (code2 < 2946) {
                        if (code2 < 2887) {
                          if (code2 < 2878) {
                            if (code2 < 2876) {
                              if (2818 <= code2 && code2 <= 2819) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2876 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2880) {
                              if (2878 <= code2 && code2 <= 2879) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2881) {
                                if (2880 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2881 <= code2 && code2 <= 2884) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2893) {
                            if (code2 < 2891) {
                              if (2887 <= code2 && code2 <= 2888) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2891 <= code2 && code2 <= 2892) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2901) {
                              if (2893 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2914) {
                                if (2901 <= code2 && code2 <= 2903) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2914 <= code2 && code2 <= 2915) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3014) {
                          if (code2 < 3007) {
                            if (2946 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3006 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3008) {
                              if (3007 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3009) {
                                if (3008 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3009 <= code2 && code2 <= 3010) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3031) {
                            if (code2 < 3018) {
                              if (3014 <= code2 && code2 <= 3016) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3021) {
                                if (3018 <= code2 && code2 <= 3020) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3021 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3072) {
                              if (3031 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3073) {
                                if (3072 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3073 <= code2 && code2 <= 3075) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3262) {
                        if (code2 < 3146) {
                          if (code2 < 3134) {
                            if (3076 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3132 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3137) {
                              if (3134 <= code2 && code2 <= 3136) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3142) {
                                if (3137 <= code2 && code2 <= 3140) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3142 <= code2 && code2 <= 3144) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3201) {
                            if (code2 < 3157) {
                              if (3146 <= code2 && code2 <= 3149) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3170) {
                                if (3157 <= code2 && code2 <= 3158) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3170 <= code2 && code2 <= 3171) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3202) {
                              if (3201 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3260) {
                                if (3202 <= code2 && code2 <= 3203) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3260 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3270) {
                          if (code2 < 3264) {
                            if (3262 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (3263 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3266) {
                              if (3264 <= code2 && code2 <= 3265) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3267) {
                                if (3266 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3267 <= code2 && code2 <= 3268) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3276) {
                            if (code2 < 3271) {
                              if (3270 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3274) {
                                if (3271 <= code2 && code2 <= 3272) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3274 <= code2 && code2 <= 3275) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3285) {
                              if (3276 <= code2 && code2 <= 3277) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3298) {
                                if (3285 <= code2 && code2 <= 3286) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3298 <= code2 && code2 <= 3299) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 3551) {
                      if (code2 < 3406) {
                        if (code2 < 3391) {
                          if (code2 < 3330) {
                            if (code2 < 3328) {
                              if (3315 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3328 <= code2 && code2 <= 3329) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 3387) {
                              if (3330 <= code2 && code2 <= 3331) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3390) {
                                if (3387 <= code2 && code2 <= 3388) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3390 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3398) {
                            if (code2 < 3393) {
                              if (3391 <= code2 && code2 <= 3392) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3393 <= code2 && code2 <= 3396) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 3402) {
                              if (3398 <= code2 && code2 <= 3400) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3405) {
                                if (3402 <= code2 && code2 <= 3404) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3405 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3530) {
                          if (code2 < 3426) {
                            if (3406 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                            if (3415 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3457) {
                              if (3426 <= code2 && code2 <= 3427) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3458) {
                                if (3457 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3458 <= code2 && code2 <= 3459) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3538) {
                            if (code2 < 3535) {
                              if (3530 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3536) {
                                if (3535 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3536 <= code2 && code2 <= 3537) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3542) {
                              if (3538 <= code2 && code2 <= 3540) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3544) {
                                if (3542 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3544 <= code2 && code2 <= 3550) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3893) {
                        if (code2 < 3655) {
                          if (code2 < 3633) {
                            if (code2 < 3570) {
                              if (3551 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3570 <= code2 && code2 <= 3571) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 3635) {
                              if (3633 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3636) {
                                if (3635 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3636 <= code2 && code2 <= 3642) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3764) {
                            if (code2 < 3761) {
                              if (3655 <= code2 && code2 <= 3662) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3761 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (3763 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 3784) {
                              if (3764 <= code2 && code2 <= 3772) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3864) {
                                if (3784 <= code2 && code2 <= 3790) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3864 <= code2 && code2 <= 3865) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3967) {
                          if (code2 < 3897) {
                            if (3893 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3895 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3902) {
                              if (3897 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3953) {
                                if (3902 <= code2 && code2 <= 3903) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3953 <= code2 && code2 <= 3966) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3981) {
                            if (code2 < 3968) {
                              if (3967 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3974) {
                                if (3968 <= code2 && code2 <= 3972) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3974 <= code2 && code2 <= 3975) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3993) {
                              if (3981 <= code2 && code2 <= 3991) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4038) {
                                if (3993 <= code2 && code2 <= 4028) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4038 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 7204) {
                  if (code2 < 6448) {
                    if (code2 < 5938) {
                      if (code2 < 4226) {
                        if (code2 < 4157) {
                          if (code2 < 4146) {
                            if (code2 < 4145) {
                              if (4141 <= code2 && code2 <= 4144) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4145 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 4153) {
                              if (4146 <= code2 && code2 <= 4151) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4155) {
                                if (4153 <= code2 && code2 <= 4154) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4155 <= code2 && code2 <= 4156) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 4184) {
                            if (code2 < 4182) {
                              if (4157 <= code2 && code2 <= 4158) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4182 <= code2 && code2 <= 4183) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 4190) {
                              if (4184 <= code2 && code2 <= 4185) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4209) {
                                if (4190 <= code2 && code2 <= 4192) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4209 <= code2 && code2 <= 4212) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 4352) {
                          if (code2 < 4229) {
                            if (4226 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (4228 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 4237) {
                              if (4229 <= code2 && code2 <= 4230) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4237 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (4253 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 4957) {
                            if (code2 < 4448) {
                              if (4352 <= code2 && code2 <= 4447) {
                                return boundaries_1.CLUSTER_BREAK.L;
                              }
                            } else {
                              if (code2 < 4520) {
                                if (4448 <= code2 && code2 <= 4519) {
                                  return boundaries_1.CLUSTER_BREAK.V;
                                }
                              } else {
                                if (4520 <= code2 && code2 <= 4607) {
                                  return boundaries_1.CLUSTER_BREAK.T;
                                }
                              }
                            }
                          } else {
                            if (code2 < 5906) {
                              if (4957 <= code2 && code2 <= 4959) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 5909) {
                                if (5906 <= code2 && code2 <= 5908) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (5909 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 6089) {
                        if (code2 < 6070) {
                          if (code2 < 5970) {
                            if (code2 < 5940) {
                              if (5938 <= code2 && code2 <= 5939) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (5940 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 6002) {
                              if (5970 <= code2 && code2 <= 5971) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6068) {
                                if (6002 <= code2 && code2 <= 6003) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6068 <= code2 && code2 <= 6069) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6078) {
                            if (code2 < 6071) {
                              if (6070 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6071 <= code2 && code2 <= 6077) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6086) {
                              if (6078 <= code2 && code2 <= 6085) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6087) {
                                if (6086 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6087 <= code2 && code2 <= 6088) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6277) {
                          if (code2 < 6155) {
                            if (code2 < 6109) {
                              if (6089 <= code2 && code2 <= 6099) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6109 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6158) {
                              if (6155 <= code2 && code2 <= 6157) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6158 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                              if (6159 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 6435) {
                            if (code2 < 6313) {
                              if (6277 <= code2 && code2 <= 6278) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6432) {
                                if (6313 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6432 <= code2 && code2 <= 6434) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 6439) {
                              if (6435 <= code2 && code2 <= 6438) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6441) {
                                if (6439 <= code2 && code2 <= 6440) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6441 <= code2 && code2 <= 6443) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 6971) {
                      if (code2 < 6744) {
                        if (code2 < 6681) {
                          if (code2 < 6451) {
                            if (code2 < 6450) {
                              if (6448 <= code2 && code2 <= 6449) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6450 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6457) {
                              if (6451 <= code2 && code2 <= 6456) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6679) {
                                if (6457 <= code2 && code2 <= 6459) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6679 <= code2 && code2 <= 6680) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6741) {
                            if (code2 < 6683) {
                              if (6681 <= code2 && code2 <= 6682) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6683 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6742) {
                              if (6741 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6742 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (6743 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6771) {
                          if (code2 < 6754) {
                            if (code2 < 6752) {
                              if (6744 <= code2 && code2 <= 6750) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6752 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6757) {
                              if (6754 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6765) {
                                if (6757 <= code2 && code2 <= 6764) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6765 <= code2 && code2 <= 6770) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6912) {
                            if (code2 < 6783) {
                              if (6771 <= code2 && code2 <= 6780) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6832) {
                                if (6783 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6832 <= code2 && code2 <= 6862) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 6916) {
                              if (6912 <= code2 && code2 <= 6915) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6964) {
                                if (6916 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (6964 <= code2 && code2 <= 6970) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 7080) {
                        if (code2 < 7019) {
                          if (code2 < 6973) {
                            if (6971 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (6972 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 6978) {
                              if (6973 <= code2 && code2 <= 6977) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6979) {
                                if (6978 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6979 <= code2 && code2 <= 6980) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 7073) {
                            if (code2 < 7040) {
                              if (7019 <= code2 && code2 <= 7027) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 7042) {
                                if (7040 <= code2 && code2 <= 7041) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7042 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 7074) {
                              if (7073 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7078) {
                                if (7074 <= code2 && code2 <= 7077) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7078 <= code2 && code2 <= 7079) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 7144) {
                          if (code2 < 7083) {
                            if (code2 < 7082) {
                              if (7080 <= code2 && code2 <= 7081) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7082 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 7142) {
                              if (7083 <= code2 && code2 <= 7085) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7142 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (7143 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 7150) {
                            if (code2 < 7146) {
                              if (7144 <= code2 && code2 <= 7145) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 7149) {
                                if (7146 <= code2 && code2 <= 7148) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (7149 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 7151) {
                              if (7150 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7154) {
                                if (7151 <= code2 && code2 <= 7153) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7154 <= code2 && code2 <= 7155) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 43346) {
                    if (code2 < 11647) {
                      if (code2 < 7415) {
                        if (code2 < 7380) {
                          if (code2 < 7220) {
                            if (code2 < 7212) {
                              if (7204 <= code2 && code2 <= 7211) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (7212 <= code2 && code2 <= 7219) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 7222) {
                              if (7220 <= code2 && code2 <= 7221) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7376) {
                                if (7222 <= code2 && code2 <= 7223) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7376 <= code2 && code2 <= 7378) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 7394) {
                            if (code2 < 7393) {
                              if (7380 <= code2 && code2 <= 7392) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7393 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 7405) {
                              if (7394 <= code2 && code2 <= 7400) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7405 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (7412 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 8205) {
                          if (code2 < 7616) {
                            if (code2 < 7416) {
                              if (7415 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (7416 <= code2 && code2 <= 7417) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 8203) {
                              if (7616 <= code2 && code2 <= 7679) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (8203 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                              if (8204 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 8288) {
                            if (code2 < 8206) {
                              if (8205 === code2) {
                                return boundaries_1.CLUSTER_BREAK.ZWJ;
                              }
                            } else {
                              if (code2 < 8232) {
                                if (8206 <= code2 && code2 <= 8207) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (8232 <= code2 && code2 <= 8238) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          } else {
                            if (code2 < 8400) {
                              if (8288 <= code2 && code2 <= 8303) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 11503) {
                                if (8400 <= code2 && code2 <= 8432) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (11503 <= code2 && code2 <= 11505) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 43043) {
                        if (code2 < 42612) {
                          if (code2 < 12330) {
                            if (code2 < 11744) {
                              if (11647 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (11744 <= code2 && code2 <= 11775) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 12441) {
                              if (12330 <= code2 && code2 <= 12335) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 42607) {
                                if (12441 <= code2 && code2 <= 12442) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (42607 <= code2 && code2 <= 42610) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43010) {
                            if (code2 < 42654) {
                              if (42612 <= code2 && code2 <= 42621) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 42736) {
                                if (42654 <= code2 && code2 <= 42655) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (42736 <= code2 && code2 <= 42737) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 43014) {
                              if (43010 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43014 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43019 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43188) {
                          if (code2 < 43047) {
                            if (code2 < 43045) {
                              if (43043 <= code2 && code2 <= 43044) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43045 <= code2 && code2 <= 43046) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43052) {
                              if (43047 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43136) {
                                if (43052 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43136 <= code2 && code2 <= 43137) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43263) {
                            if (code2 < 43204) {
                              if (43188 <= code2 && code2 <= 43203) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43232) {
                                if (43204 <= code2 && code2 <= 43205) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43232 <= code2 && code2 <= 43249) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 43302) {
                              if (43263 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 43335) {
                                if (43302 <= code2 && code2 <= 43309) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43335 <= code2 && code2 <= 43345) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 43698) {
                      if (code2 < 43493) {
                        if (code2 < 43444) {
                          if (code2 < 43392) {
                            if (code2 < 43360) {
                              if (43346 <= code2 && code2 <= 43347) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43360 <= code2 && code2 <= 43388) {
                                return boundaries_1.CLUSTER_BREAK.L;
                              }
                            }
                          } else {
                            if (code2 < 43395) {
                              if (43392 <= code2 && code2 <= 43394) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43395 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (43443 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 43450) {
                            if (code2 < 43446) {
                              if (43444 <= code2 && code2 <= 43445) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43446 <= code2 && code2 <= 43449) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43452) {
                              if (43450 <= code2 && code2 <= 43451) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43454) {
                                if (43452 <= code2 && code2 <= 43453) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43454 <= code2 && code2 <= 43456) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43573) {
                          if (code2 < 43567) {
                            if (code2 < 43561) {
                              if (43493 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43561 <= code2 && code2 <= 43566) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43569) {
                              if (43567 <= code2 && code2 <= 43568) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43571) {
                                if (43569 <= code2 && code2 <= 43570) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43571 <= code2 && code2 <= 43572) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43597) {
                            if (code2 < 43587) {
                              if (43573 <= code2 && code2 <= 43574) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43587 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43596 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43644) {
                              if (43597 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43644 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43696 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44006) {
                        if (code2 < 43756) {
                          if (code2 < 43710) {
                            if (code2 < 43703) {
                              if (43698 <= code2 && code2 <= 43700) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43703 <= code2 && code2 <= 43704) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43713) {
                              if (43710 <= code2 && code2 <= 43711) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43713 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43755 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 43766) {
                            if (code2 < 43758) {
                              if (43756 <= code2 && code2 <= 43757) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 43765) {
                                if (43758 <= code2 && code2 <= 43759) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (43765 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44003) {
                              if (43766 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 44005) {
                                if (44003 <= code2 && code2 <= 44004) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (44005 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44032) {
                          if (code2 < 44009) {
                            if (code2 < 44008) {
                              if (44006 <= code2 && code2 <= 44007) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (44008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 44012) {
                              if (44009 <= code2 && code2 <= 44010) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (44012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (44013 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 44061) {
                            if (code2 < 44033) {
                              if (44032 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44060) {
                                if (44033 <= code2 && code2 <= 44059) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44060 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44088) {
                              if (44061 <= code2 && code2 <= 44087) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44089) {
                                if (44088 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44089 <= code2 && code2 <= 44115) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 46497) {
                if (code2 < 45293) {
                  if (code2 < 44704) {
                    if (code2 < 44397) {
                      if (code2 < 44256) {
                        if (code2 < 44173) {
                          if (code2 < 44144) {
                            if (code2 < 44117) {
                              if (44116 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44117 <= code2 && code2 <= 44143) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44145) {
                              if (44144 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44172) {
                                if (44145 <= code2 && code2 <= 44171) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44172 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44201) {
                            if (code2 < 44200) {
                              if (44173 <= code2 && code2 <= 44199) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44200 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44228) {
                              if (44201 <= code2 && code2 <= 44227) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44229) {
                                if (44228 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44229 <= code2 && code2 <= 44255) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44313) {
                          if (code2 < 44284) {
                            if (code2 < 44257) {
                              if (44256 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44257 <= code2 && code2 <= 44283) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44285) {
                              if (44284 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44312) {
                                if (44285 <= code2 && code2 <= 44311) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44312 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44368) {
                            if (code2 < 44340) {
                              if (44313 <= code2 && code2 <= 44339) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44341) {
                                if (44340 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44341 <= code2 && code2 <= 44367) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44369) {
                              if (44368 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44396) {
                                if (44369 <= code2 && code2 <= 44395) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44396 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44537) {
                        if (code2 < 44480) {
                          if (code2 < 44425) {
                            if (code2 < 44424) {
                              if (44397 <= code2 && code2 <= 44423) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44424 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44452) {
                              if (44425 <= code2 && code2 <= 44451) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44453) {
                                if (44452 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44453 <= code2 && code2 <= 44479) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44508) {
                            if (code2 < 44481) {
                              if (44480 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44481 <= code2 && code2 <= 44507) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44509) {
                              if (44508 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44536) {
                                if (44509 <= code2 && code2 <= 44535) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44536 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44620) {
                          if (code2 < 44565) {
                            if (code2 < 44564) {
                              if (44537 <= code2 && code2 <= 44563) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44564 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44592) {
                              if (44565 <= code2 && code2 <= 44591) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44593) {
                                if (44592 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44593 <= code2 && code2 <= 44619) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44649) {
                            if (code2 < 44621) {
                              if (44620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44648) {
                                if (44621 <= code2 && code2 <= 44647) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44648 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44676) {
                              if (44649 <= code2 && code2 <= 44675) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44677) {
                                if (44676 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44677 <= code2 && code2 <= 44703) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 44985) {
                      if (code2 < 44844) {
                        if (code2 < 44761) {
                          if (code2 < 44732) {
                            if (code2 < 44705) {
                              if (44704 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44705 <= code2 && code2 <= 44731) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44733) {
                              if (44732 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44760) {
                                if (44733 <= code2 && code2 <= 44759) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44760 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44789) {
                            if (code2 < 44788) {
                              if (44761 <= code2 && code2 <= 44787) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44788 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44816) {
                              if (44789 <= code2 && code2 <= 44815) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44817) {
                                if (44816 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44817 <= code2 && code2 <= 44843) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44901) {
                          if (code2 < 44872) {
                            if (code2 < 44845) {
                              if (44844 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44845 <= code2 && code2 <= 44871) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44873) {
                              if (44872 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44900) {
                                if (44873 <= code2 && code2 <= 44899) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44900 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44956) {
                            if (code2 < 44928) {
                              if (44901 <= code2 && code2 <= 44927) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44929) {
                                if (44928 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44929 <= code2 && code2 <= 44955) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44957) {
                              if (44956 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44984) {
                                if (44957 <= code2 && code2 <= 44983) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44984 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45152) {
                        if (code2 < 45068) {
                          if (code2 < 45013) {
                            if (code2 < 45012) {
                              if (44985 <= code2 && code2 <= 45011) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45040) {
                              if (45013 <= code2 && code2 <= 45039) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45041) {
                                if (45040 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45041 <= code2 && code2 <= 45067) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45097) {
                            if (code2 < 45069) {
                              if (45068 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45096) {
                                if (45069 <= code2 && code2 <= 45095) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45096 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45124) {
                              if (45097 <= code2 && code2 <= 45123) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45125) {
                                if (45124 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45125 <= code2 && code2 <= 45151) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45209) {
                          if (code2 < 45180) {
                            if (code2 < 45153) {
                              if (45152 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45153 <= code2 && code2 <= 45179) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45181) {
                              if (45180 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45208) {
                                if (45181 <= code2 && code2 <= 45207) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45208 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45264) {
                            if (code2 < 45236) {
                              if (45209 <= code2 && code2 <= 45235) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45237) {
                                if (45236 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45237 <= code2 && code2 <= 45263) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45265) {
                              if (45264 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45292) {
                                if (45265 <= code2 && code2 <= 45291) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45292 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 45908) {
                    if (code2 < 45600) {
                      if (code2 < 45433) {
                        if (code2 < 45376) {
                          if (code2 < 45321) {
                            if (code2 < 45320) {
                              if (45293 <= code2 && code2 <= 45319) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45320 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45348) {
                              if (45321 <= code2 && code2 <= 45347) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45349) {
                                if (45348 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45349 <= code2 && code2 <= 45375) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45404) {
                            if (code2 < 45377) {
                              if (45376 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45377 <= code2 && code2 <= 45403) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45405) {
                              if (45404 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45432) {
                                if (45405 <= code2 && code2 <= 45431) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45432 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45516) {
                          if (code2 < 45461) {
                            if (code2 < 45460) {
                              if (45433 <= code2 && code2 <= 45459) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45460 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45488) {
                              if (45461 <= code2 && code2 <= 45487) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45489) {
                                if (45488 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45489 <= code2 && code2 <= 45515) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45545) {
                            if (code2 < 45517) {
                              if (45516 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45544) {
                                if (45517 <= code2 && code2 <= 45543) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45544 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45572) {
                              if (45545 <= code2 && code2 <= 45571) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45573) {
                                if (45572 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45573 <= code2 && code2 <= 45599) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45741) {
                        if (code2 < 45657) {
                          if (code2 < 45628) {
                            if (code2 < 45601) {
                              if (45600 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45601 <= code2 && code2 <= 45627) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45629) {
                              if (45628 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45656) {
                                if (45629 <= code2 && code2 <= 45655) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45656 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45712) {
                            if (code2 < 45684) {
                              if (45657 <= code2 && code2 <= 45683) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45685) {
                                if (45684 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45685 <= code2 && code2 <= 45711) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45713) {
                              if (45712 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45740) {
                                if (45713 <= code2 && code2 <= 45739) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45740 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45824) {
                          if (code2 < 45769) {
                            if (code2 < 45768) {
                              if (45741 <= code2 && code2 <= 45767) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45768 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45796) {
                              if (45769 <= code2 && code2 <= 45795) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45797) {
                                if (45796 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45797 <= code2 && code2 <= 45823) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45853) {
                            if (code2 < 45825) {
                              if (45824 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45852) {
                                if (45825 <= code2 && code2 <= 45851) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45852 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45880) {
                              if (45853 <= code2 && code2 <= 45879) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45881) {
                                if (45880 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45881 <= code2 && code2 <= 45907) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 46189) {
                      if (code2 < 46048) {
                        if (code2 < 45965) {
                          if (code2 < 45936) {
                            if (code2 < 45909) {
                              if (45908 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45909 <= code2 && code2 <= 45935) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45937) {
                              if (45936 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45964) {
                                if (45937 <= code2 && code2 <= 45963) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45964 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45993) {
                            if (code2 < 45992) {
                              if (45965 <= code2 && code2 <= 45991) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45992 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46020) {
                              if (45993 <= code2 && code2 <= 46019) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46021) {
                                if (46020 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46021 <= code2 && code2 <= 46047) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46105) {
                          if (code2 < 46076) {
                            if (code2 < 46049) {
                              if (46048 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46049 <= code2 && code2 <= 46075) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46077) {
                              if (46076 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46104) {
                                if (46077 <= code2 && code2 <= 46103) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46104 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46160) {
                            if (code2 < 46132) {
                              if (46105 <= code2 && code2 <= 46131) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46133) {
                                if (46132 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46133 <= code2 && code2 <= 46159) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46161) {
                              if (46160 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46188) {
                                if (46161 <= code2 && code2 <= 46187) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46188 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46356) {
                        if (code2 < 46272) {
                          if (code2 < 46217) {
                            if (code2 < 46216) {
                              if (46189 <= code2 && code2 <= 46215) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46216 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46244) {
                              if (46217 <= code2 && code2 <= 46243) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46245) {
                                if (46244 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46245 <= code2 && code2 <= 46271) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46301) {
                            if (code2 < 46273) {
                              if (46272 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46300) {
                                if (46273 <= code2 && code2 <= 46299) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46300 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46328) {
                              if (46301 <= code2 && code2 <= 46327) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46329) {
                                if (46328 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46329 <= code2 && code2 <= 46355) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46413) {
                          if (code2 < 46384) {
                            if (code2 < 46357) {
                              if (46356 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46357 <= code2 && code2 <= 46383) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46385) {
                              if (46384 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46412) {
                                if (46385 <= code2 && code2 <= 46411) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46412 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46468) {
                            if (code2 < 46440) {
                              if (46413 <= code2 && code2 <= 46439) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46441) {
                                if (46440 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46441 <= code2 && code2 <= 46467) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46469) {
                              if (46468 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46496) {
                                if (46469 <= code2 && code2 <= 46495) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46496 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 47701) {
                  if (code2 < 47112) {
                    if (code2 < 46804) {
                      if (code2 < 46637) {
                        if (code2 < 46580) {
                          if (code2 < 46525) {
                            if (code2 < 46524) {
                              if (46497 <= code2 && code2 <= 46523) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46524 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46552) {
                              if (46525 <= code2 && code2 <= 46551) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46553) {
                                if (46552 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46553 <= code2 && code2 <= 46579) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46608) {
                            if (code2 < 46581) {
                              if (46580 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46581 <= code2 && code2 <= 46607) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46609) {
                              if (46608 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46636) {
                                if (46609 <= code2 && code2 <= 46635) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46636 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46720) {
                          if (code2 < 46665) {
                            if (code2 < 46664) {
                              if (46637 <= code2 && code2 <= 46663) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46664 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46692) {
                              if (46665 <= code2 && code2 <= 46691) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46693) {
                                if (46692 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46693 <= code2 && code2 <= 46719) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46749) {
                            if (code2 < 46721) {
                              if (46720 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46748) {
                                if (46721 <= code2 && code2 <= 46747) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46748 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46776) {
                              if (46749 <= code2 && code2 <= 46775) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46777) {
                                if (46776 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46777 <= code2 && code2 <= 46803) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46945) {
                        if (code2 < 46861) {
                          if (code2 < 46832) {
                            if (code2 < 46805) {
                              if (46804 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46805 <= code2 && code2 <= 46831) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46833) {
                              if (46832 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46860) {
                                if (46833 <= code2 && code2 <= 46859) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46860 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46916) {
                            if (code2 < 46888) {
                              if (46861 <= code2 && code2 <= 46887) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46889) {
                                if (46888 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46889 <= code2 && code2 <= 46915) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46917) {
                              if (46916 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46944) {
                                if (46917 <= code2 && code2 <= 46943) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46944 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47028) {
                          if (code2 < 46973) {
                            if (code2 < 46972) {
                              if (46945 <= code2 && code2 <= 46971) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46972 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47e3) {
                              if (46973 <= code2 && code2 <= 46999) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47001) {
                                if (47e3 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47001 <= code2 && code2 <= 47027) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47057) {
                            if (code2 < 47029) {
                              if (47028 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47056) {
                                if (47029 <= code2 && code2 <= 47055) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47056 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47084) {
                              if (47057 <= code2 && code2 <= 47083) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47085) {
                                if (47084 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47085 <= code2 && code2 <= 47111) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 47393) {
                      if (code2 < 47252) {
                        if (code2 < 47169) {
                          if (code2 < 47140) {
                            if (code2 < 47113) {
                              if (47112 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47113 <= code2 && code2 <= 47139) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47141) {
                              if (47140 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47168) {
                                if (47141 <= code2 && code2 <= 47167) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47168 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47197) {
                            if (code2 < 47196) {
                              if (47169 <= code2 && code2 <= 47195) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47196 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47224) {
                              if (47197 <= code2 && code2 <= 47223) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47225) {
                                if (47224 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47225 <= code2 && code2 <= 47251) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47309) {
                          if (code2 < 47280) {
                            if (code2 < 47253) {
                              if (47252 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47253 <= code2 && code2 <= 47279) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47281) {
                              if (47280 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47308) {
                                if (47281 <= code2 && code2 <= 47307) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47308 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47364) {
                            if (code2 < 47336) {
                              if (47309 <= code2 && code2 <= 47335) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47337) {
                                if (47336 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47337 <= code2 && code2 <= 47363) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47365) {
                              if (47364 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47392) {
                                if (47365 <= code2 && code2 <= 47391) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47392 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 47560) {
                        if (code2 < 47476) {
                          if (code2 < 47421) {
                            if (code2 < 47420) {
                              if (47393 <= code2 && code2 <= 47419) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47420 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47448) {
                              if (47421 <= code2 && code2 <= 47447) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47449) {
                                if (47448 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47449 <= code2 && code2 <= 47475) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47505) {
                            if (code2 < 47477) {
                              if (47476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47504) {
                                if (47477 <= code2 && code2 <= 47503) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47504 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47532) {
                              if (47505 <= code2 && code2 <= 47531) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47533) {
                                if (47532 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47533 <= code2 && code2 <= 47559) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47617) {
                          if (code2 < 47588) {
                            if (code2 < 47561) {
                              if (47560 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47561 <= code2 && code2 <= 47587) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47589) {
                              if (47588 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47616) {
                                if (47589 <= code2 && code2 <= 47615) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47616 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47672) {
                            if (code2 < 47644) {
                              if (47617 <= code2 && code2 <= 47643) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47645) {
                                if (47644 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47645 <= code2 && code2 <= 47671) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47673) {
                              if (47672 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47700) {
                                if (47673 <= code2 && code2 <= 47699) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47700 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 48316) {
                    if (code2 < 48008) {
                      if (code2 < 47841) {
                        if (code2 < 47784) {
                          if (code2 < 47729) {
                            if (code2 < 47728) {
                              if (47701 <= code2 && code2 <= 47727) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47728 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47756) {
                              if (47729 <= code2 && code2 <= 47755) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47757) {
                                if (47756 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47757 <= code2 && code2 <= 47783) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47812) {
                            if (code2 < 47785) {
                              if (47784 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47785 <= code2 && code2 <= 47811) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47813) {
                              if (47812 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47840) {
                                if (47813 <= code2 && code2 <= 47839) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47840 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47924) {
                          if (code2 < 47869) {
                            if (code2 < 47868) {
                              if (47841 <= code2 && code2 <= 47867) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47868 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47896) {
                              if (47869 <= code2 && code2 <= 47895) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47897) {
                                if (47896 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47897 <= code2 && code2 <= 47923) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47953) {
                            if (code2 < 47925) {
                              if (47924 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47952) {
                                if (47925 <= code2 && code2 <= 47951) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47952 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47980) {
                              if (47953 <= code2 && code2 <= 47979) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47981) {
                                if (47980 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47981 <= code2 && code2 <= 48007) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48149) {
                        if (code2 < 48065) {
                          if (code2 < 48036) {
                            if (code2 < 48009) {
                              if (48008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48009 <= code2 && code2 <= 48035) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48037) {
                              if (48036 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48064) {
                                if (48037 <= code2 && code2 <= 48063) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48064 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48120) {
                            if (code2 < 48092) {
                              if (48065 <= code2 && code2 <= 48091) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48093) {
                                if (48092 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48093 <= code2 && code2 <= 48119) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48121) {
                              if (48120 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48148) {
                                if (48121 <= code2 && code2 <= 48147) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48148 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48232) {
                          if (code2 < 48177) {
                            if (code2 < 48176) {
                              if (48149 <= code2 && code2 <= 48175) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48176 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48204) {
                              if (48177 <= code2 && code2 <= 48203) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48205) {
                                if (48204 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48205 <= code2 && code2 <= 48231) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48261) {
                            if (code2 < 48233) {
                              if (48232 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48260) {
                                if (48233 <= code2 && code2 <= 48259) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48260 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48288) {
                              if (48261 <= code2 && code2 <= 48287) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48289) {
                                if (48288 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48289 <= code2 && code2 <= 48315) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 48597) {
                      if (code2 < 48456) {
                        if (code2 < 48373) {
                          if (code2 < 48344) {
                            if (code2 < 48317) {
                              if (48316 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48317 <= code2 && code2 <= 48343) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48345) {
                              if (48344 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48372) {
                                if (48345 <= code2 && code2 <= 48371) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48372 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48401) {
                            if (code2 < 48400) {
                              if (48373 <= code2 && code2 <= 48399) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48400 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48428) {
                              if (48401 <= code2 && code2 <= 48427) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48429) {
                                if (48428 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48429 <= code2 && code2 <= 48455) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48513) {
                          if (code2 < 48484) {
                            if (code2 < 48457) {
                              if (48456 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48457 <= code2 && code2 <= 48483) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48485) {
                              if (48484 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48512) {
                                if (48485 <= code2 && code2 <= 48511) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48512 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48568) {
                            if (code2 < 48540) {
                              if (48513 <= code2 && code2 <= 48539) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48541) {
                                if (48540 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48541 <= code2 && code2 <= 48567) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48569) {
                              if (48568 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48596) {
                                if (48569 <= code2 && code2 <= 48595) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48596 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48764) {
                        if (code2 < 48680) {
                          if (code2 < 48625) {
                            if (code2 < 48624) {
                              if (48597 <= code2 && code2 <= 48623) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48624 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48652) {
                              if (48625 <= code2 && code2 <= 48651) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48653) {
                                if (48652 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48653 <= code2 && code2 <= 48679) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48709) {
                            if (code2 < 48681) {
                              if (48680 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48708) {
                                if (48681 <= code2 && code2 <= 48707) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48708 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48736) {
                              if (48709 <= code2 && code2 <= 48735) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48737) {
                                if (48736 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48737 <= code2 && code2 <= 48763) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48821) {
                          if (code2 < 48792) {
                            if (code2 < 48765) {
                              if (48764 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48765 <= code2 && code2 <= 48791) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48793) {
                              if (48792 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48820) {
                                if (48793 <= code2 && code2 <= 48819) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48820 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48876) {
                            if (code2 < 48848) {
                              if (48821 <= code2 && code2 <= 48847) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48849) {
                                if (48848 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48849 <= code2 && code2 <= 48875) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48877) {
                              if (48876 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48904) {
                                if (48877 <= code2 && code2 <= 48903) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48904 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 53720) {
              if (code2 < 51312) {
                if (code2 < 50108) {
                  if (code2 < 49493) {
                    if (code2 < 49212) {
                      if (code2 < 49045) {
                        if (code2 < 48988) {
                          if (code2 < 48933) {
                            if (code2 < 48932) {
                              if (48905 <= code2 && code2 <= 48931) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48932 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48960) {
                              if (48933 <= code2 && code2 <= 48959) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48961) {
                                if (48960 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48961 <= code2 && code2 <= 48987) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49016) {
                            if (code2 < 48989) {
                              if (48988 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48989 <= code2 && code2 <= 49015) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49017) {
                              if (49016 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49044) {
                                if (49017 <= code2 && code2 <= 49043) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49044 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49128) {
                          if (code2 < 49073) {
                            if (code2 < 49072) {
                              if (49045 <= code2 && code2 <= 49071) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49072 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49100) {
                              if (49073 <= code2 && code2 <= 49099) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49101) {
                                if (49100 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49101 <= code2 && code2 <= 49127) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49157) {
                            if (code2 < 49129) {
                              if (49128 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49156) {
                                if (49129 <= code2 && code2 <= 49155) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49156 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49184) {
                              if (49157 <= code2 && code2 <= 49183) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49185) {
                                if (49184 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49185 <= code2 && code2 <= 49211) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49352) {
                        if (code2 < 49269) {
                          if (code2 < 49240) {
                            if (code2 < 49213) {
                              if (49212 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49213 <= code2 && code2 <= 49239) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49241) {
                              if (49240 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49268) {
                                if (49241 <= code2 && code2 <= 49267) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49268 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49297) {
                            if (code2 < 49296) {
                              if (49269 <= code2 && code2 <= 49295) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49296 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49324) {
                              if (49297 <= code2 && code2 <= 49323) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49325) {
                                if (49324 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49325 <= code2 && code2 <= 49351) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49409) {
                          if (code2 < 49380) {
                            if (code2 < 49353) {
                              if (49352 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49353 <= code2 && code2 <= 49379) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49381) {
                              if (49380 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49408) {
                                if (49381 <= code2 && code2 <= 49407) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49408 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49464) {
                            if (code2 < 49436) {
                              if (49409 <= code2 && code2 <= 49435) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49437) {
                                if (49436 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49437 <= code2 && code2 <= 49463) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49465) {
                              if (49464 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49492) {
                                if (49465 <= code2 && code2 <= 49491) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49492 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 49800) {
                      if (code2 < 49633) {
                        if (code2 < 49576) {
                          if (code2 < 49521) {
                            if (code2 < 49520) {
                              if (49493 <= code2 && code2 <= 49519) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49520 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49548) {
                              if (49521 <= code2 && code2 <= 49547) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49549) {
                                if (49548 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49549 <= code2 && code2 <= 49575) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49604) {
                            if (code2 < 49577) {
                              if (49576 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49577 <= code2 && code2 <= 49603) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49605) {
                              if (49604 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49632) {
                                if (49605 <= code2 && code2 <= 49631) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49632 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49716) {
                          if (code2 < 49661) {
                            if (code2 < 49660) {
                              if (49633 <= code2 && code2 <= 49659) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49660 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49688) {
                              if (49661 <= code2 && code2 <= 49687) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49689) {
                                if (49688 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49689 <= code2 && code2 <= 49715) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49745) {
                            if (code2 < 49717) {
                              if (49716 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49744) {
                                if (49717 <= code2 && code2 <= 49743) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49744 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49772) {
                              if (49745 <= code2 && code2 <= 49771) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49773) {
                                if (49772 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49773 <= code2 && code2 <= 49799) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49941) {
                        if (code2 < 49857) {
                          if (code2 < 49828) {
                            if (code2 < 49801) {
                              if (49800 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49801 <= code2 && code2 <= 49827) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49829) {
                              if (49828 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49856) {
                                if (49829 <= code2 && code2 <= 49855) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49856 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49912) {
                            if (code2 < 49884) {
                              if (49857 <= code2 && code2 <= 49883) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49885) {
                                if (49884 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49885 <= code2 && code2 <= 49911) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49913) {
                              if (49912 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49940) {
                                if (49913 <= code2 && code2 <= 49939) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49940 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50024) {
                          if (code2 < 49969) {
                            if (code2 < 49968) {
                              if (49941 <= code2 && code2 <= 49967) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49968 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49996) {
                              if (49969 <= code2 && code2 <= 49995) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49997) {
                                if (49996 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49997 <= code2 && code2 <= 50023) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50053) {
                            if (code2 < 50025) {
                              if (50024 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50052) {
                                if (50025 <= code2 && code2 <= 50051) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50052 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50080) {
                              if (50053 <= code2 && code2 <= 50079) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50081) {
                                if (50080 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50081 <= code2 && code2 <= 50107) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 50697) {
                    if (code2 < 50389) {
                      if (code2 < 50248) {
                        if (code2 < 50165) {
                          if (code2 < 50136) {
                            if (code2 < 50109) {
                              if (50108 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50109 <= code2 && code2 <= 50135) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50137) {
                              if (50136 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50164) {
                                if (50137 <= code2 && code2 <= 50163) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50164 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50193) {
                            if (code2 < 50192) {
                              if (50165 <= code2 && code2 <= 50191) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50192 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50220) {
                              if (50193 <= code2 && code2 <= 50219) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50221) {
                                if (50220 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50221 <= code2 && code2 <= 50247) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50305) {
                          if (code2 < 50276) {
                            if (code2 < 50249) {
                              if (50248 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50249 <= code2 && code2 <= 50275) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50277) {
                              if (50276 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50304) {
                                if (50277 <= code2 && code2 <= 50303) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50304 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50360) {
                            if (code2 < 50332) {
                              if (50305 <= code2 && code2 <= 50331) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50333) {
                                if (50332 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50333 <= code2 && code2 <= 50359) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50361) {
                              if (50360 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50388) {
                                if (50361 <= code2 && code2 <= 50387) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50388 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 50556) {
                        if (code2 < 50472) {
                          if (code2 < 50417) {
                            if (code2 < 50416) {
                              if (50389 <= code2 && code2 <= 50415) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50416 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50444) {
                              if (50417 <= code2 && code2 <= 50443) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50445) {
                                if (50444 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50445 <= code2 && code2 <= 50471) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50501) {
                            if (code2 < 50473) {
                              if (50472 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50500) {
                                if (50473 <= code2 && code2 <= 50499) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50500 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50528) {
                              if (50501 <= code2 && code2 <= 50527) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50529) {
                                if (50528 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50529 <= code2 && code2 <= 50555) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50613) {
                          if (code2 < 50584) {
                            if (code2 < 50557) {
                              if (50556 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50557 <= code2 && code2 <= 50583) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50585) {
                              if (50584 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50612) {
                                if (50585 <= code2 && code2 <= 50611) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50612 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50668) {
                            if (code2 < 50640) {
                              if (50613 <= code2 && code2 <= 50639) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50641) {
                                if (50640 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50641 <= code2 && code2 <= 50667) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50669) {
                              if (50668 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50696) {
                                if (50669 <= code2 && code2 <= 50695) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50696 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 51004) {
                      if (code2 < 50837) {
                        if (code2 < 50780) {
                          if (code2 < 50725) {
                            if (code2 < 50724) {
                              if (50697 <= code2 && code2 <= 50723) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50724 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50752) {
                              if (50725 <= code2 && code2 <= 50751) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50753) {
                                if (50752 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50753 <= code2 && code2 <= 50779) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50808) {
                            if (code2 < 50781) {
                              if (50780 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50781 <= code2 && code2 <= 50807) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50809) {
                              if (50808 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50836) {
                                if (50809 <= code2 && code2 <= 50835) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50836 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50920) {
                          if (code2 < 50865) {
                            if (code2 < 50864) {
                              if (50837 <= code2 && code2 <= 50863) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50864 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50892) {
                              if (50865 <= code2 && code2 <= 50891) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50893) {
                                if (50892 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50893 <= code2 && code2 <= 50919) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50949) {
                            if (code2 < 50921) {
                              if (50920 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50948) {
                                if (50921 <= code2 && code2 <= 50947) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50948 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50976) {
                              if (50949 <= code2 && code2 <= 50975) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50977) {
                                if (50976 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50977 <= code2 && code2 <= 51003) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51145) {
                        if (code2 < 51061) {
                          if (code2 < 51032) {
                            if (code2 < 51005) {
                              if (51004 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51005 <= code2 && code2 <= 51031) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51033) {
                              if (51032 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51060) {
                                if (51033 <= code2 && code2 <= 51059) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51060 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51116) {
                            if (code2 < 51088) {
                              if (51061 <= code2 && code2 <= 51087) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51089) {
                                if (51088 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51089 <= code2 && code2 <= 51115) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51117) {
                              if (51116 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51144) {
                                if (51117 <= code2 && code2 <= 51143) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51144 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51228) {
                          if (code2 < 51173) {
                            if (code2 < 51172) {
                              if (51145 <= code2 && code2 <= 51171) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51172 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51200) {
                              if (51173 <= code2 && code2 <= 51199) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51201) {
                                if (51200 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51201 <= code2 && code2 <= 51227) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51257) {
                            if (code2 < 51229) {
                              if (51228 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51256) {
                                if (51229 <= code2 && code2 <= 51255) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51256 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51284) {
                              if (51257 <= code2 && code2 <= 51283) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51285) {
                                if (51284 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51285 <= code2 && code2 <= 51311) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 52516) {
                  if (code2 < 51901) {
                    if (code2 < 51593) {
                      if (code2 < 51452) {
                        if (code2 < 51369) {
                          if (code2 < 51340) {
                            if (code2 < 51313) {
                              if (51312 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51313 <= code2 && code2 <= 51339) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51341) {
                              if (51340 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51368) {
                                if (51341 <= code2 && code2 <= 51367) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51368 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51397) {
                            if (code2 < 51396) {
                              if (51369 <= code2 && code2 <= 51395) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51396 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51424) {
                              if (51397 <= code2 && code2 <= 51423) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51425) {
                                if (51424 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51425 <= code2 && code2 <= 51451) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51509) {
                          if (code2 < 51480) {
                            if (code2 < 51453) {
                              if (51452 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51453 <= code2 && code2 <= 51479) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51481) {
                              if (51480 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51508) {
                                if (51481 <= code2 && code2 <= 51507) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51508 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51564) {
                            if (code2 < 51536) {
                              if (51509 <= code2 && code2 <= 51535) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51537) {
                                if (51536 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51537 <= code2 && code2 <= 51563) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51565) {
                              if (51564 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51592) {
                                if (51565 <= code2 && code2 <= 51591) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51592 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51760) {
                        if (code2 < 51676) {
                          if (code2 < 51621) {
                            if (code2 < 51620) {
                              if (51593 <= code2 && code2 <= 51619) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51648) {
                              if (51621 <= code2 && code2 <= 51647) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51649) {
                                if (51648 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51649 <= code2 && code2 <= 51675) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51705) {
                            if (code2 < 51677) {
                              if (51676 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51704) {
                                if (51677 <= code2 && code2 <= 51703) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51704 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51732) {
                              if (51705 <= code2 && code2 <= 51731) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51733) {
                                if (51732 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51733 <= code2 && code2 <= 51759) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51817) {
                          if (code2 < 51788) {
                            if (code2 < 51761) {
                              if (51760 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51761 <= code2 && code2 <= 51787) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51789) {
                              if (51788 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51816) {
                                if (51789 <= code2 && code2 <= 51815) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51816 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51872) {
                            if (code2 < 51844) {
                              if (51817 <= code2 && code2 <= 51843) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51845) {
                                if (51844 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51845 <= code2 && code2 <= 51871) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51873) {
                              if (51872 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51900) {
                                if (51873 <= code2 && code2 <= 51899) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51900 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 52208) {
                      if (code2 < 52041) {
                        if (code2 < 51984) {
                          if (code2 < 51929) {
                            if (code2 < 51928) {
                              if (51901 <= code2 && code2 <= 51927) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51928 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51956) {
                              if (51929 <= code2 && code2 <= 51955) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51957) {
                                if (51956 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51957 <= code2 && code2 <= 51983) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52012) {
                            if (code2 < 51985) {
                              if (51984 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51985 <= code2 && code2 <= 52011) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52013) {
                              if (52012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52040) {
                                if (52013 <= code2 && code2 <= 52039) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52040 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52124) {
                          if (code2 < 52069) {
                            if (code2 < 52068) {
                              if (52041 <= code2 && code2 <= 52067) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52068 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52096) {
                              if (52069 <= code2 && code2 <= 52095) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52097) {
                                if (52096 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52097 <= code2 && code2 <= 52123) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52153) {
                            if (code2 < 52125) {
                              if (52124 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52152) {
                                if (52125 <= code2 && code2 <= 52151) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52152 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52180) {
                              if (52153 <= code2 && code2 <= 52179) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52181) {
                                if (52180 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52181 <= code2 && code2 <= 52207) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52349) {
                        if (code2 < 52265) {
                          if (code2 < 52236) {
                            if (code2 < 52209) {
                              if (52208 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52209 <= code2 && code2 <= 52235) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52237) {
                              if (52236 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52264) {
                                if (52237 <= code2 && code2 <= 52263) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52264 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52320) {
                            if (code2 < 52292) {
                              if (52265 <= code2 && code2 <= 52291) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52293) {
                                if (52292 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52293 <= code2 && code2 <= 52319) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52321) {
                              if (52320 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52348) {
                                if (52321 <= code2 && code2 <= 52347) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52348 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52432) {
                          if (code2 < 52377) {
                            if (code2 < 52376) {
                              if (52349 <= code2 && code2 <= 52375) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52376 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52404) {
                              if (52377 <= code2 && code2 <= 52403) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52405) {
                                if (52404 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52405 <= code2 && code2 <= 52431) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52461) {
                            if (code2 < 52433) {
                              if (52432 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52460) {
                                if (52433 <= code2 && code2 <= 52459) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52460 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52488) {
                              if (52461 <= code2 && code2 <= 52487) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52489) {
                                if (52488 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52489 <= code2 && code2 <= 52515) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 53105) {
                    if (code2 < 52797) {
                      if (code2 < 52656) {
                        if (code2 < 52573) {
                          if (code2 < 52544) {
                            if (code2 < 52517) {
                              if (52516 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52517 <= code2 && code2 <= 52543) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52545) {
                              if (52544 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52572) {
                                if (52545 <= code2 && code2 <= 52571) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52572 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52601) {
                            if (code2 < 52600) {
                              if (52573 <= code2 && code2 <= 52599) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52600 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52628) {
                              if (52601 <= code2 && code2 <= 52627) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52629) {
                                if (52628 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52629 <= code2 && code2 <= 52655) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52713) {
                          if (code2 < 52684) {
                            if (code2 < 52657) {
                              if (52656 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52657 <= code2 && code2 <= 52683) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52685) {
                              if (52684 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52712) {
                                if (52685 <= code2 && code2 <= 52711) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52712 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52768) {
                            if (code2 < 52740) {
                              if (52713 <= code2 && code2 <= 52739) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52741) {
                                if (52740 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52741 <= code2 && code2 <= 52767) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52769) {
                              if (52768 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52796) {
                                if (52769 <= code2 && code2 <= 52795) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52796 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52964) {
                        if (code2 < 52880) {
                          if (code2 < 52825) {
                            if (code2 < 52824) {
                              if (52797 <= code2 && code2 <= 52823) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52824 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52852) {
                              if (52825 <= code2 && code2 <= 52851) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52853) {
                                if (52852 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52853 <= code2 && code2 <= 52879) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52909) {
                            if (code2 < 52881) {
                              if (52880 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52908) {
                                if (52881 <= code2 && code2 <= 52907) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52908 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52936) {
                              if (52909 <= code2 && code2 <= 52935) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52937) {
                                if (52936 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52937 <= code2 && code2 <= 52963) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53021) {
                          if (code2 < 52992) {
                            if (code2 < 52965) {
                              if (52964 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52965 <= code2 && code2 <= 52991) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52993) {
                              if (52992 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53020) {
                                if (52993 <= code2 && code2 <= 53019) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53020 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53076) {
                            if (code2 < 53048) {
                              if (53021 <= code2 && code2 <= 53047) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53049) {
                                if (53048 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53049 <= code2 && code2 <= 53075) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53077) {
                              if (53076 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53104) {
                                if (53077 <= code2 && code2 <= 53103) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53104 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 53412) {
                      if (code2 < 53245) {
                        if (code2 < 53188) {
                          if (code2 < 53133) {
                            if (code2 < 53132) {
                              if (53105 <= code2 && code2 <= 53131) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53132 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53160) {
                              if (53133 <= code2 && code2 <= 53159) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53161) {
                                if (53160 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53161 <= code2 && code2 <= 53187) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53216) {
                            if (code2 < 53189) {
                              if (53188 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53189 <= code2 && code2 <= 53215) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53217) {
                              if (53216 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53244) {
                                if (53217 <= code2 && code2 <= 53243) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53244 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53328) {
                          if (code2 < 53273) {
                            if (code2 < 53272) {
                              if (53245 <= code2 && code2 <= 53271) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53272 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53300) {
                              if (53273 <= code2 && code2 <= 53299) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53301) {
                                if (53300 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53301 <= code2 && code2 <= 53327) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53357) {
                            if (code2 < 53329) {
                              if (53328 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53356) {
                                if (53329 <= code2 && code2 <= 53355) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53356 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53384) {
                              if (53357 <= code2 && code2 <= 53383) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53385) {
                                if (53384 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53385 <= code2 && code2 <= 53411) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53553) {
                        if (code2 < 53469) {
                          if (code2 < 53440) {
                            if (code2 < 53413) {
                              if (53412 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53413 <= code2 && code2 <= 53439) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53441) {
                              if (53440 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53468) {
                                if (53441 <= code2 && code2 <= 53467) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53468 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53524) {
                            if (code2 < 53496) {
                              if (53469 <= code2 && code2 <= 53495) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53497) {
                                if (53496 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53497 <= code2 && code2 <= 53523) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53525) {
                              if (53524 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53552) {
                                if (53525 <= code2 && code2 <= 53551) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53552 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53636) {
                          if (code2 < 53581) {
                            if (code2 < 53580) {
                              if (53553 <= code2 && code2 <= 53579) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53580 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53608) {
                              if (53581 <= code2 && code2 <= 53607) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53609) {
                                if (53608 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53609 <= code2 && code2 <= 53635) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53665) {
                            if (code2 < 53637) {
                              if (53636 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53664) {
                                if (53637 <= code2 && code2 <= 53663) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53664 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53692) {
                              if (53665 <= code2 && code2 <= 53691) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53693) {
                                if (53692 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53693 <= code2 && code2 <= 53719) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 70459) {
                if (code2 < 54897) {
                  if (code2 < 54308) {
                    if (code2 < 54001) {
                      if (code2 < 53860) {
                        if (code2 < 53777) {
                          if (code2 < 53748) {
                            if (code2 < 53721) {
                              if (53720 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53721 <= code2 && code2 <= 53747) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53749) {
                              if (53748 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53776) {
                                if (53749 <= code2 && code2 <= 53775) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53776 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53805) {
                            if (code2 < 53804) {
                              if (53777 <= code2 && code2 <= 53803) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53804 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53832) {
                              if (53805 <= code2 && code2 <= 53831) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53833) {
                                if (53832 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53833 <= code2 && code2 <= 53859) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53917) {
                          if (code2 < 53888) {
                            if (code2 < 53861) {
                              if (53860 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53861 <= code2 && code2 <= 53887) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53889) {
                              if (53888 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53916) {
                                if (53889 <= code2 && code2 <= 53915) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53916 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53972) {
                            if (code2 < 53944) {
                              if (53917 <= code2 && code2 <= 53943) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53945) {
                                if (53944 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53945 <= code2 && code2 <= 53971) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53973) {
                              if (53972 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54e3) {
                                if (53973 <= code2 && code2 <= 53999) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54e3 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54141) {
                        if (code2 < 54084) {
                          if (code2 < 54029) {
                            if (code2 < 54028) {
                              if (54001 <= code2 && code2 <= 54027) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54028 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54056) {
                              if (54029 <= code2 && code2 <= 54055) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54057) {
                                if (54056 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54057 <= code2 && code2 <= 54083) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54112) {
                            if (code2 < 54085) {
                              if (54084 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54085 <= code2 && code2 <= 54111) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54113) {
                              if (54112 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54140) {
                                if (54113 <= code2 && code2 <= 54139) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54140 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54224) {
                          if (code2 < 54169) {
                            if (code2 < 54168) {
                              if (54141 <= code2 && code2 <= 54167) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54168 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54196) {
                              if (54169 <= code2 && code2 <= 54195) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54197) {
                                if (54196 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54197 <= code2 && code2 <= 54223) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54253) {
                            if (code2 < 54225) {
                              if (54224 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54252) {
                                if (54225 <= code2 && code2 <= 54251) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54252 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54280) {
                              if (54253 <= code2 && code2 <= 54279) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54281) {
                                if (54280 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54281 <= code2 && code2 <= 54307) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 54589) {
                      if (code2 < 54448) {
                        if (code2 < 54365) {
                          if (code2 < 54336) {
                            if (code2 < 54309) {
                              if (54308 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54309 <= code2 && code2 <= 54335) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54337) {
                              if (54336 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54364) {
                                if (54337 <= code2 && code2 <= 54363) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54364 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54393) {
                            if (code2 < 54392) {
                              if (54365 <= code2 && code2 <= 54391) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54392 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54420) {
                              if (54393 <= code2 && code2 <= 54419) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54421) {
                                if (54420 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54421 <= code2 && code2 <= 54447) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54505) {
                          if (code2 < 54476) {
                            if (code2 < 54449) {
                              if (54448 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54449 <= code2 && code2 <= 54475) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54477) {
                              if (54476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54504) {
                                if (54477 <= code2 && code2 <= 54503) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54504 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54560) {
                            if (code2 < 54532) {
                              if (54505 <= code2 && code2 <= 54531) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54533) {
                                if (54532 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54533 <= code2 && code2 <= 54559) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54561) {
                              if (54560 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54588) {
                                if (54561 <= code2 && code2 <= 54587) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54588 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54756) {
                        if (code2 < 54672) {
                          if (code2 < 54617) {
                            if (code2 < 54616) {
                              if (54589 <= code2 && code2 <= 54615) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54616 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54644) {
                              if (54617 <= code2 && code2 <= 54643) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54645) {
                                if (54644 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54645 <= code2 && code2 <= 54671) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54701) {
                            if (code2 < 54673) {
                              if (54672 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54700) {
                                if (54673 <= code2 && code2 <= 54699) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54700 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54728) {
                              if (54701 <= code2 && code2 <= 54727) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54729) {
                                if (54728 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54729 <= code2 && code2 <= 54755) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54813) {
                          if (code2 < 54784) {
                            if (code2 < 54757) {
                              if (54756 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54757 <= code2 && code2 <= 54783) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54785) {
                              if (54784 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54812) {
                                if (54785 <= code2 && code2 <= 54811) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54812 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54868) {
                            if (code2 < 54840) {
                              if (54813 <= code2 && code2 <= 54839) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54841) {
                                if (54840 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54841 <= code2 && code2 <= 54867) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54869) {
                              if (54868 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54896) {
                                if (54869 <= code2 && code2 <= 54895) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54896 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 69632) {
                    if (code2 < 55216) {
                      if (code2 < 55037) {
                        if (code2 < 54980) {
                          if (code2 < 54925) {
                            if (code2 < 54924) {
                              if (54897 <= code2 && code2 <= 54923) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54924 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54952) {
                              if (54925 <= code2 && code2 <= 54951) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54953) {
                                if (54952 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54953 <= code2 && code2 <= 54979) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 55008) {
                            if (code2 < 54981) {
                              if (54980 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54981 <= code2 && code2 <= 55007) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 55009) {
                              if (55008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 55036) {
                                if (55009 <= code2 && code2 <= 55035) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (55036 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 55120) {
                          if (code2 < 55065) {
                            if (code2 < 55064) {
                              if (55037 <= code2 && code2 <= 55063) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (55064 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 55092) {
                              if (55065 <= code2 && code2 <= 55091) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 55093) {
                                if (55092 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (55093 <= code2 && code2 <= 55119) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 55149) {
                            if (code2 < 55121) {
                              if (55120 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 55148) {
                                if (55121 <= code2 && code2 <= 55147) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (55148 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 55176) {
                              if (55149 <= code2 && code2 <= 55175) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 55177) {
                                if (55176 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (55177 <= code2 && code2 <= 55203) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 68097) {
                        if (code2 < 65279) {
                          if (code2 < 64286) {
                            if (code2 < 55243) {
                              if (55216 <= code2 && code2 <= 55238) {
                                return boundaries_1.CLUSTER_BREAK.V;
                              }
                            } else {
                              if (55243 <= code2 && code2 <= 55291) {
                                return boundaries_1.CLUSTER_BREAK.T;
                              }
                            }
                          } else {
                            if (code2 < 65024) {
                              if (64286 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 65056) {
                                if (65024 <= code2 && code2 <= 65039) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (65056 <= code2 && code2 <= 65071) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 66045) {
                            if (code2 < 65438) {
                              if (65279 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 65520) {
                                if (65438 <= code2 && code2 <= 65439) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (65520 <= code2 && code2 <= 65531) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          } else {
                            if (code2 < 66272) {
                              if (66045 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 66422) {
                                if (66272 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (66422 <= code2 && code2 <= 66426) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 68325) {
                          if (code2 < 68108) {
                            if (code2 < 68101) {
                              if (68097 <= code2 && code2 <= 68099) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (68101 <= code2 && code2 <= 68102) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 68152) {
                              if (68108 <= code2 && code2 <= 68111) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 68159) {
                                if (68152 <= code2 && code2 <= 68154) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (68159 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 69373) {
                            if (code2 < 68900) {
                              if (68325 <= code2 && code2 <= 68326) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69291) {
                                if (68900 <= code2 && code2 <= 68903) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69291 <= code2 && code2 <= 69292) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 69446) {
                              if (69373 <= code2 && code2 <= 69375) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69506) {
                                if (69446 <= code2 && code2 <= 69456) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69506 <= code2 && code2 <= 69509) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 70016) {
                      if (code2 < 69815) {
                        if (code2 < 69747) {
                          if (code2 < 69634) {
                            if (69632 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (69633 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 69688) {
                              if (69634 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 69744) {
                                if (69688 <= code2 && code2 <= 69702) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69744 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 69762) {
                            if (code2 < 69759) {
                              if (69747 <= code2 && code2 <= 69748) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (69759 <= code2 && code2 <= 69761) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 69808) {
                              if (69762 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 69811) {
                                if (69808 <= code2 && code2 <= 69810) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (69811 <= code2 && code2 <= 69814) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 69888) {
                          if (code2 < 69821) {
                            if (code2 < 69817) {
                              if (69815 <= code2 && code2 <= 69816) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (69817 <= code2 && code2 <= 69818) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 69826) {
                              if (69821 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (69826 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (69837 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 69933) {
                            if (code2 < 69927) {
                              if (69888 <= code2 && code2 <= 69890) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69932) {
                                if (69927 <= code2 && code2 <= 69931) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69932 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 69957) {
                              if (69933 <= code2 && code2 <= 69940) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70003) {
                                if (69957 <= code2 && code2 <= 69958) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70003 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 70194) {
                        if (code2 < 70082) {
                          if (code2 < 70067) {
                            if (code2 < 70018) {
                              if (70016 <= code2 && code2 <= 70017) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70018 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70070) {
                              if (70067 <= code2 && code2 <= 70069) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70079) {
                                if (70070 <= code2 && code2 <= 70078) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70079 <= code2 && code2 <= 70080) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70095) {
                            if (code2 < 70089) {
                              if (70082 <= code2 && code2 <= 70083) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 70094) {
                                if (70089 <= code2 && code2 <= 70092) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70094 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 70188) {
                              if (70095 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70191) {
                                if (70188 <= code2 && code2 <= 70190) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70191 <= code2 && code2 <= 70193) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70209) {
                          if (code2 < 70197) {
                            if (code2 < 70196) {
                              if (70194 <= code2 && code2 <= 70195) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70196 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70198) {
                              if (70197 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70206) {
                                if (70198 <= code2 && code2 <= 70199) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70206 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70371) {
                            if (code2 < 70367) {
                              if (70209 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70368) {
                                if (70367 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70368 <= code2 && code2 <= 70370) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 70400) {
                              if (70371 <= code2 && code2 <= 70378) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70402) {
                                if (70400 <= code2 && code2 <= 70401) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70402 <= code2 && code2 <= 70403) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 72343) {
                  if (code2 < 71339) {
                    if (code2 < 70841) {
                      if (code2 < 70512) {
                        if (code2 < 70471) {
                          if (code2 < 70463) {
                            if (code2 < 70462) {
                              if (70459 <= code2 && code2 <= 70460) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70462 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70464) {
                              if (70463 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70465) {
                                if (70464 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70465 <= code2 && code2 <= 70468) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70487) {
                            if (code2 < 70475) {
                              if (70471 <= code2 && code2 <= 70472) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70475 <= code2 && code2 <= 70477) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70498) {
                              if (70487 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70502) {
                                if (70498 <= code2 && code2 <= 70499) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70502 <= code2 && code2 <= 70508) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70725) {
                          if (code2 < 70712) {
                            if (code2 < 70709) {
                              if (70512 <= code2 && code2 <= 70516) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70709 <= code2 && code2 <= 70711) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70720) {
                              if (70712 <= code2 && code2 <= 70719) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70722) {
                                if (70720 <= code2 && code2 <= 70721) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70722 <= code2 && code2 <= 70724) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70832) {
                            if (code2 < 70726) {
                              if (70725 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70726 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (70750 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70833) {
                              if (70832 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70835) {
                                if (70833 <= code2 && code2 <= 70834) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70835 <= code2 && code2 <= 70840) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 71096) {
                        if (code2 < 70847) {
                          if (code2 < 70843) {
                            if (70841 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (70842 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70845) {
                              if (70843 <= code2 && code2 <= 70844) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70845 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (70846 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 71087) {
                            if (code2 < 70849) {
                              if (70847 <= code2 && code2 <= 70848) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70850) {
                                if (70849 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70850 <= code2 && code2 <= 70851) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71088) {
                              if (71087 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71090) {
                                if (71088 <= code2 && code2 <= 71089) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71090 <= code2 && code2 <= 71093) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71216) {
                          if (code2 < 71102) {
                            if (code2 < 71100) {
                              if (71096 <= code2 && code2 <= 71099) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (71100 <= code2 && code2 <= 71101) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 71103) {
                              if (71102 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 71132) {
                                if (71103 <= code2 && code2 <= 71104) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71132 <= code2 && code2 <= 71133) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71229) {
                            if (code2 < 71219) {
                              if (71216 <= code2 && code2 <= 71218) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 71227) {
                                if (71219 <= code2 && code2 <= 71226) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71227 <= code2 && code2 <= 71228) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71230) {
                              if (71229 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71231) {
                                if (71230 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71231 <= code2 && code2 <= 71232) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 71999) {
                      if (code2 < 71463) {
                        if (code2 < 71350) {
                          if (code2 < 71341) {
                            if (71339 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (71340 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 71342) {
                              if (71341 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71344) {
                                if (71342 <= code2 && code2 <= 71343) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71344 <= code2 && code2 <= 71349) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71453) {
                            if (71350 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (71351 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71458) {
                              if (71453 <= code2 && code2 <= 71455) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71462) {
                                if (71458 <= code2 && code2 <= 71461) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71462 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71984) {
                          if (code2 < 71727) {
                            if (code2 < 71724) {
                              if (71463 <= code2 && code2 <= 71467) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71724 <= code2 && code2 <= 71726) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 71736) {
                              if (71727 <= code2 && code2 <= 71735) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71737) {
                                if (71736 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71737 <= code2 && code2 <= 71738) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71995) {
                            if (code2 < 71985) {
                              if (71984 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71991) {
                                if (71985 <= code2 && code2 <= 71989) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71991 <= code2 && code2 <= 71992) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71997) {
                              if (71995 <= code2 && code2 <= 71996) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71997 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (71998 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 72193) {
                        if (code2 < 72145) {
                          if (code2 < 72001) {
                            if (71999 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                            if (72e3 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 72002) {
                              if (72001 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (72002 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (72003 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 72156) {
                            if (code2 < 72148) {
                              if (72145 <= code2 && code2 <= 72147) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72154) {
                                if (72148 <= code2 && code2 <= 72151) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72154 <= code2 && code2 <= 72155) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 72160) {
                              if (72156 <= code2 && code2 <= 72159) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72160 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (72164 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 72263) {
                          if (code2 < 72249) {
                            if (code2 < 72243) {
                              if (72193 <= code2 && code2 <= 72202) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (72243 <= code2 && code2 <= 72248) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72250) {
                              if (72249 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72251) {
                                if (72250 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              } else {
                                if (72251 <= code2 && code2 <= 72254) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 72281) {
                            if (code2 < 72273) {
                              if (72263 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72279) {
                                if (72273 <= code2 && code2 <= 72278) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72279 <= code2 && code2 <= 72280) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 72324) {
                              if (72281 <= code2 && code2 <= 72283) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72330) {
                                if (72324 <= code2 && code2 <= 72329) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              } else {
                                if (72330 <= code2 && code2 <= 72342) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 94033) {
                    if (code2 < 73104) {
                      if (code2 < 72881) {
                        if (code2 < 72766) {
                          if (code2 < 72751) {
                            if (code2 < 72344) {
                              if (72343 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72344 <= code2 && code2 <= 72345) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72752) {
                              if (72751 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72760) {
                                if (72752 <= code2 && code2 <= 72758) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72760 <= code2 && code2 <= 72765) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 72850) {
                            if (72766 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (72767 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 72873) {
                              if (72850 <= code2 && code2 <= 72871) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72874) {
                                if (72873 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (72874 <= code2 && code2 <= 72880) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 73018) {
                          if (code2 < 72884) {
                            if (code2 < 72882) {
                              if (72881 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72882 <= code2 && code2 <= 72883) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72885) {
                              if (72884 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 73009) {
                                if (72885 <= code2 && code2 <= 72886) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73009 <= code2 && code2 <= 73014) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 73030) {
                            if (code2 < 73020) {
                              if (73018 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 73023) {
                                if (73020 <= code2 && code2 <= 73021) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73023 <= code2 && code2 <= 73029) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 73031) {
                              if (73030 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 73098) {
                                if (73031 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73098 <= code2 && code2 <= 73102) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 73526) {
                        if (code2 < 73459) {
                          if (code2 < 73109) {
                            if (code2 < 73107) {
                              if (73104 <= code2 && code2 <= 73105) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73107 <= code2 && code2 <= 73108) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 73110) {
                              if (73109 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73110 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (73111 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 73474) {
                            if (code2 < 73461) {
                              if (73459 <= code2 && code2 <= 73460) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 73472) {
                                if (73461 <= code2 && code2 <= 73462) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (73472 <= code2 && code2 <= 73473) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 73475) {
                              if (73474 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 73524) {
                                if (73475 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (73524 <= code2 && code2 <= 73525) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 78896) {
                          if (code2 < 73536) {
                            if (code2 < 73534) {
                              if (73526 <= code2 && code2 <= 73530) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73534 <= code2 && code2 <= 73535) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 73537) {
                              if (73536 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73537 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (73538 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 92912) {
                            if (code2 < 78912) {
                              if (78896 <= code2 && code2 <= 78911) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 78919) {
                                if (78912 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (78919 <= code2 && code2 <= 78933) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 92976) {
                              if (92912 <= code2 && code2 <= 92916) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 94031) {
                                if (92976 <= code2 && code2 <= 92982) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (94031 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 121476) {
                      if (code2 < 119143) {
                        if (code2 < 113824) {
                          if (code2 < 94180) {
                            if (code2 < 94095) {
                              if (94033 <= code2 && code2 <= 94087) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (94095 <= code2 && code2 <= 94098) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 94192) {
                              if (94180 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 113821) {
                                if (94192 <= code2 && code2 <= 94193) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (113821 <= code2 && code2 <= 113822) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 118576) {
                            if (code2 < 118528) {
                              if (113824 <= code2 && code2 <= 113827) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (118528 <= code2 && code2 <= 118573) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 119141) {
                              if (118576 <= code2 && code2 <= 118598) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (119141 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (119142 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 119173) {
                          if (code2 < 119150) {
                            if (code2 < 119149) {
                              if (119143 <= code2 && code2 <= 119145) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (119149 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 119155) {
                              if (119150 <= code2 && code2 <= 119154) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 119163) {
                                if (119155 <= code2 && code2 <= 119162) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (119163 <= code2 && code2 <= 119170) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 121344) {
                            if (code2 < 119210) {
                              if (119173 <= code2 && code2 <= 119179) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 119362) {
                                if (119210 <= code2 && code2 <= 119213) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (119362 <= code2 && code2 <= 119364) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 121403) {
                              if (121344 <= code2 && code2 <= 121398) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 121461) {
                                if (121403 <= code2 && code2 <= 121452) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (121461 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 123628) {
                        if (code2 < 122907) {
                          if (code2 < 121505) {
                            if (code2 < 121499) {
                              if (121476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (121499 <= code2 && code2 <= 121503) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 122880) {
                              if (121505 <= code2 && code2 <= 121519) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 122888) {
                                if (122880 <= code2 && code2 <= 122886) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (122888 <= code2 && code2 <= 122904) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 123023) {
                            if (code2 < 122915) {
                              if (122907 <= code2 && code2 <= 122913) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 122918) {
                                if (122915 <= code2 && code2 <= 122916) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (122918 <= code2 && code2 <= 122922) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 123184) {
                              if (123023 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 123566) {
                                if (123184 <= code2 && code2 <= 123190) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (123566 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 127995) {
                          if (code2 < 125136) {
                            if (code2 < 124140) {
                              if (123628 <= code2 && code2 <= 123631) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (124140 <= code2 && code2 <= 124143) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 125252) {
                              if (125136 <= code2 && code2 <= 125142) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 127462) {
                                if (125252 <= code2 && code2 <= 125258) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (127462 <= code2 && code2 <= 127487) {
                                  return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 917632) {
                            if (code2 < 917504) {
                              if (127995 <= code2 && code2 <= 127999) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 917536) {
                                if (917504 <= code2 && code2 <= 917535) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (917536 <= code2 && code2 <= 917631) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 917760) {
                              if (917632 <= code2 && code2 <= 917759) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 918e3) {
                                if (917760 <= code2 && code2 <= 917999) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (918e3 <= code2 && code2 <= 921599) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return boundaries_1.CLUSTER_BREAK.OTHER;
        }
        /**
         * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
         * @param code {number} Unicode code point
         * @returns {number}
         */
        static getEmojiProperty(code2) {
          if (code2 < 10160) {
            if (code2 < 9728) {
              if (code2 < 9e3) {
                if (code2 < 8482) {
                  if (code2 < 8252) {
                    if (169 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (174 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (8252 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (8265 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 8596) {
                    if (8482 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (8505 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 8617) {
                      if (8596 <= code2 && code2 <= 8601) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 8986) {
                        if (8617 <= code2 && code2 <= 8618) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (8986 <= code2 && code2 <= 8987) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 9410) {
                  if (code2 < 9167) {
                    if (9e3 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (9096 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 9193) {
                      if (9167 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9208) {
                        if (9193 <= code2 && code2 <= 9203) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9208 <= code2 && code2 <= 9210) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 9654) {
                    if (code2 < 9642) {
                      if (9410 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9642 <= code2 && code2 <= 9643) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 9664) {
                      if (9654 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9723) {
                        if (9664 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9723 <= code2 && code2 <= 9726) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 10035) {
                if (code2 < 10004) {
                  if (code2 < 9748) {
                    if (code2 < 9735) {
                      if (9728 <= code2 && code2 <= 9733) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9735 <= code2 && code2 <= 9746) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 9872) {
                      if (9748 <= code2 && code2 <= 9861) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9992) {
                        if (9872 <= code2 && code2 <= 9989) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9992 <= code2 && code2 <= 10002) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 10013) {
                    if (10004 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (10006 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 10017) {
                      if (10013 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10017 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (10024 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 10067) {
                  if (code2 < 10055) {
                    if (code2 < 10052) {
                      if (10035 <= code2 && code2 <= 10036) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10052 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 10060) {
                      if (10055 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10060 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (10062 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                } else {
                  if (code2 < 10083) {
                    if (code2 < 10071) {
                      if (10067 <= code2 && code2 <= 10069) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10071 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 10133) {
                      if (10083 <= code2 && code2 <= 10087) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 10145) {
                        if (10133 <= code2 && code2 <= 10135) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (10145 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 127489) {
              if (code2 < 12951) {
                if (code2 < 11035) {
                  if (code2 < 10548) {
                    if (10160 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (10175 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 11013) {
                      if (10548 <= code2 && code2 <= 10549) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (11013 <= code2 && code2 <= 11015) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                } else {
                  if (code2 < 11093) {
                    if (code2 < 11088) {
                      if (11035 <= code2 && code2 <= 11036) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (11088 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 12336) {
                      if (11093 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (12336 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (12349 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 127340) {
                  if (code2 < 126976) {
                    if (12951 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (12953 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 127245) {
                      if (126976 <= code2 && code2 <= 127231) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127279) {
                        if (127245 <= code2 && code2 <= 127247) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127279 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 127374) {
                    if (code2 < 127358) {
                      if (127340 <= code2 && code2 <= 127345) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127358 <= code2 && code2 <= 127359) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 127377) {
                      if (127374 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127405) {
                        if (127377 <= code2 && code2 <= 127386) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127405 <= code2 && code2 <= 127461) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 128981) {
                if (code2 < 127561) {
                  if (code2 < 127535) {
                    if (code2 < 127514) {
                      if (127489 <= code2 && code2 <= 127503) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127514 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 127538) {
                      if (127535 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127548) {
                        if (127538 <= code2 && code2 <= 127546) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127548 <= code2 && code2 <= 127551) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 128326) {
                    if (code2 < 128e3) {
                      if (127561 <= code2 && code2 <= 127994) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (128e3 <= code2 && code2 <= 128317) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 128640) {
                      if (128326 <= code2 && code2 <= 128591) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 128884) {
                        if (128640 <= code2 && code2 <= 128767) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (128884 <= code2 && code2 <= 128895) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 129198) {
                  if (code2 < 129096) {
                    if (code2 < 129036) {
                      if (128981 <= code2 && code2 <= 129023) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (129036 <= code2 && code2 <= 129039) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 129114) {
                      if (129096 <= code2 && code2 <= 129103) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 129160) {
                        if (129114 <= code2 && code2 <= 129119) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (129160 <= code2 && code2 <= 129167) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 129340) {
                    if (code2 < 129292) {
                      if (129198 <= code2 && code2 <= 129279) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (129292 <= code2 && code2 <= 129338) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 129351) {
                      if (129340 <= code2 && code2 <= 129349) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 130048) {
                        if (129351 <= code2 && code2 <= 129791) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (130048 <= code2 && code2 <= 131069) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return boundaries_1.CLUSTER_BREAK.OTHER;
        }
      };
      exports.default = Graphemer;
    }
  });

  // node_modules/graphemer/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/graphemer/lib/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var Graphemer_1 = __importDefault(require_Graphemer());
      exports.default = Graphemer_1.default;
    }
  });

  // node_modules/@atproto/common-web/dist/strings.js
  var require_strings = __commonJS({
    "node_modules/@atproto/common-web/dist/strings.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLanguage = exports.parseLanguage = exports.b64UrlToUtf8 = exports.utf8ToB64Url = exports.graphemeLen = exports.utf8Len = void 0;
      var graphemer_1 = __importDefault(require_lib2());
      var ui8 = __importStar((init_src2(), __toCommonJS(src_exports)));
      var utf8Len = (str) => {
        return new TextEncoder().encode(str).byteLength;
      };
      exports.utf8Len = utf8Len;
      var graphemeLen = (str) => {
        const splitter = new graphemer_1.default();
        return splitter.countGraphemes(str);
      };
      exports.graphemeLen = graphemeLen;
      var utf8ToB64Url = (utf8) => {
        return ui8.toString(ui8.fromString(utf8, "utf8"), "base64url");
      };
      exports.utf8ToB64Url = utf8ToB64Url;
      var b64UrlToUtf8 = (b64) => {
        return ui8.toString(ui8.fromString(b64, "base64url"), "utf8");
      };
      exports.b64UrlToUtf8 = b64UrlToUtf8;
      var parseLanguage = (langTag) => {
        const parsed = langTag.match(bcp47Regexp);
        if (!(parsed == null ? void 0 : parsed.groups))
          return null;
        const parts = parsed.groups;
        return {
          grandfathered: parts.grandfathered,
          language: parts.language,
          extlang: parts.extlang,
          script: parts.script,
          region: parts.region,
          variant: parts.variant,
          extension: parts.extension,
          privateUse: parts.privateUseA || parts.privateUseB
        };
      };
      exports.parseLanguage = parseLanguage;
      var validateLanguage = (langTag) => {
        return bcp47Regexp.test(langTag);
      };
      exports.validateLanguage = validateLanguage;
      var bcp47Regexp = new RegExp("^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$");
    }
  });

  // node_modules/@atproto/common-web/dist/did-doc.js
  var require_did_doc = __commonJS({
    "node_modules/@atproto/common-web/dist/did-doc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.didDocument = exports.getServiceEndpoint = exports.getNotifEndpoint = exports.getFeedGenEndpoint = exports.getPdsEndpoint = exports.getSigningDidKey = exports.getVerificationMaterial = exports.getSigningKey = exports.getHandle = exports.getDid = exports.isValidDidDoc = void 0;
      var zod_1 = require_lib();
      var isValidDidDoc = (doc) => {
        return exports.didDocument.safeParse(doc).success;
      };
      exports.isValidDidDoc = isValidDidDoc;
      var getDid = (doc) => {
        const id = doc.id;
        if (typeof id !== "string") {
          throw new Error("No `id` on document");
        }
        return id;
      };
      exports.getDid = getDid;
      var getHandle = (doc) => {
        const aka = doc.alsoKnownAs;
        if (!aka)
          return void 0;
        const found = aka.find((name2) => name2.startsWith("at://"));
        if (!found)
          return void 0;
        return found.slice(5);
      };
      exports.getHandle = getHandle;
      var getSigningKey = (doc) => {
        return (0, exports.getVerificationMaterial)(doc, "atproto");
      };
      exports.getSigningKey = getSigningKey;
      var getVerificationMaterial = (doc, keyId) => {
        const did = (0, exports.getDid)(doc);
        let keys = doc.verificationMethod;
        if (!keys)
          return void 0;
        if (typeof keys !== "object")
          return void 0;
        if (!Array.isArray(keys)) {
          keys = [keys];
        }
        const found = keys.find((key) => key.id === `#${keyId}` || key.id === `${did}#${keyId}`);
        if (!(found == null ? void 0 : found.publicKeyMultibase))
          return void 0;
        return {
          type: found.type,
          publicKeyMultibase: found.publicKeyMultibase
        };
      };
      exports.getVerificationMaterial = getVerificationMaterial;
      var getSigningDidKey = (doc) => {
        const parsed = (0, exports.getSigningKey)(doc);
        if (!parsed)
          return;
        return `did:key:${parsed.publicKeyMultibase}`;
      };
      exports.getSigningDidKey = getSigningDidKey;
      var getPdsEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#atproto_pds",
          type: "AtprotoPersonalDataServer"
        });
      };
      exports.getPdsEndpoint = getPdsEndpoint;
      var getFeedGenEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#bsky_fg",
          type: "BskyFeedGenerator"
        });
      };
      exports.getFeedGenEndpoint = getFeedGenEndpoint;
      var getNotifEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#bsky_notif",
          type: "BskyNotificationService"
        });
      };
      exports.getNotifEndpoint = getNotifEndpoint;
      var getServiceEndpoint = (doc, opts) => {
        const did = (0, exports.getDid)(doc);
        let services = doc.service;
        if (!services)
          return void 0;
        if (typeof services !== "object")
          return void 0;
        if (!Array.isArray(services)) {
          services = [services];
        }
        const found = services.find((service2) => service2.id === opts.id || service2.id === `${did}${opts.id}`);
        if (!found)
          return void 0;
        if (opts.type && found.type !== opts.type) {
          return void 0;
        }
        if (typeof found.serviceEndpoint !== "string") {
          return void 0;
        }
        return validateUrl(found.serviceEndpoint);
      };
      exports.getServiceEndpoint = getServiceEndpoint;
      var validateUrl = (urlStr) => {
        let url;
        try {
          url = new URL(urlStr);
        } catch (e) {
          return void 0;
        }
        if (!["http:", "https:"].includes(url.protocol)) {
          return void 0;
        } else if (!url.hostname) {
          return void 0;
        } else {
          return urlStr;
        }
      };
      var verificationMethod = zod_1.z.object({
        id: zod_1.z.string(),
        type: zod_1.z.string(),
        controller: zod_1.z.string(),
        publicKeyMultibase: zod_1.z.string().optional()
      });
      var service = zod_1.z.object({
        id: zod_1.z.string(),
        type: zod_1.z.string(),
        serviceEndpoint: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.unknown())])
      });
      exports.didDocument = zod_1.z.object({
        id: zod_1.z.string(),
        alsoKnownAs: zod_1.z.array(zod_1.z.string()).optional(),
        verificationMethod: zod_1.z.array(verificationMethod).optional(),
        service: zod_1.z.array(service).optional()
      });
    }
  });

  // node_modules/@atproto/common-web/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/@atproto/common-web/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.util = exports.check = void 0;
      exports.check = __importStar(require_check());
      exports.util = __importStar(require_util2());
      __exportStar(require_arrays(), exports);
      __exportStar(require_async(), exports);
      __exportStar(require_util2(), exports);
      __exportStar(require_tid2(), exports);
      __exportStar(require_ipld(), exports);
      __exportStar(require_retry(), exports);
      __exportStar(require_types2(), exports);
      __exportStar(require_times(), exports);
      __exportStar(require_strings(), exports);
      __exportStar(require_did_doc(), exports);
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/vendor/varint.js
  function encode7(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT3) {
      out[offset++] = num & 255 | MSB3;
      num /= 128;
    }
    while (num & MSBALL3) {
      out[offset++] = num & 255 | MSB3;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode7.bytes = offset - oldOffset + 1;
    return out;
  }
  function read3(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read3.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$13) << shift : (b & REST$13) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$13);
    read3.bytes = counter - offset;
    return res;
  }
  var encode_13, MSB3, REST3, MSBALL3, INT3, decode10, MSB$13, REST$13, N13, N23, N33, N43, N53, N63, N73, N83, N93, length3, varint3, _brrp_varint3, varint_default3;
  var init_varint5 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/vendor/varint.js"() {
      encode_13 = encode7;
      MSB3 = 128;
      REST3 = 127;
      MSBALL3 = ~REST3;
      INT3 = Math.pow(2, 31);
      decode10 = read3;
      MSB$13 = 128;
      REST$13 = 127;
      N13 = Math.pow(2, 7);
      N23 = Math.pow(2, 14);
      N33 = Math.pow(2, 21);
      N43 = Math.pow(2, 28);
      N53 = Math.pow(2, 35);
      N63 = Math.pow(2, 42);
      N73 = Math.pow(2, 49);
      N83 = Math.pow(2, 56);
      N93 = Math.pow(2, 63);
      length3 = function(value) {
        return value < N13 ? 1 : value < N23 ? 2 : value < N33 ? 3 : value < N43 ? 4 : value < N53 ? 5 : value < N63 ? 6 : value < N73 ? 7 : value < N83 ? 8 : value < N93 ? 9 : 10;
      };
      varint3 = {
        encode: encode_13,
        decode: decode10,
        encodingLength: length3
      };
      _brrp_varint3 = varint3;
      varint_default3 = _brrp_varint3;
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/varint.js
  var decode11, encodeTo3, encodingLength3;
  var init_varint6 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/varint.js"() {
      init_varint5();
      decode11 = (data, offset = 0) => {
        const code2 = varint_default3.decode(data, offset);
        return [
          code2,
          varint_default3.decode.bytes
        ];
      };
      encodeTo3 = (int, target2, offset = 0) => {
        varint_default3.encode(int, target2, offset);
        return target2;
      };
      encodingLength3 = (int) => {
        return varint_default3.encodingLength(int);
      };
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bytes.js
  var empty3, equals6, coerce3;
  var init_bytes3 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bytes.js"() {
      empty3 = new Uint8Array(0);
      equals6 = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce3 = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/hashes/digest.js
  var create3, decode12, equals7, Digest3;
  var init_digest3 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/hashes/digest.js"() {
      init_bytes3();
      init_varint6();
      create3 = (code2, digest2) => {
        const size = digest2.byteLength;
        const sizeOffset = encodingLength3(code2);
        const digestOffset = sizeOffset + encodingLength3(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo3(code2, bytes, 0);
        encodeTo3(size, bytes, sizeOffset);
        bytes.set(digest2, digestOffset);
        return new Digest3(code2, size, digest2, bytes);
      };
      decode12 = (multihash) => {
        const bytes = coerce3(multihash);
        const [code2, sizeOffset] = decode11(bytes);
        const [size, digestOffset] = decode11(bytes.subarray(sizeOffset));
        const digest2 = bytes.subarray(sizeOffset + digestOffset);
        if (digest2.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest3(code2, size, digest2, bytes);
      };
      equals7 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          return a.code === b.code && a.size === b.size && equals6(a.bytes, b.bytes);
        }
      };
      Digest3 = class {
        constructor(code2, size, digest2, bytes) {
          this.code = code2;
          this.size = size;
          this.digest = digest2;
          this.bytes = bytes;
        }
      };
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/vendor/base-x.js
  function base3(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode13(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length5 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length5) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length5 = i2;
        pbegin++;
      }
      var it2 = size - length5;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length5 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length5) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length5 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length5;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode21(string2) {
      var buffer2 = decodeUnsafe(string2);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode13,
      decodeUnsafe,
      decode: decode21
    };
  }
  var src3, _brrp__multiformats_scope_baseX3, base_x_default3;
  var init_base_x3 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/vendor/base-x.js"() {
      src3 = base3;
      _brrp__multiformats_scope_baseX3 = src3;
      base_x_default3 = _brrp__multiformats_scope_baseX3;
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base.js
  var Encoder3, Decoder3, ComposedDecoder3, or3, Codec3, from4, baseX3, decode13, encode8, rfc46483;
  var init_base3 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base.js"() {
      init_base_x3();
      init_bytes3();
      Encoder3 = class {
        constructor(name2, prefix, baseEncode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
        }
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder3 = class {
        constructor(name2, prefix, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          if (prefix.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder2) {
          return or3(this, decoder2);
        }
      };
      ComposedDecoder3 = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder2) {
          return or3(this, decoder2);
        }
        decode(input) {
          const prefix = input[0];
          const decoder2 = this.decoders[prefix];
          if (decoder2) {
            return decoder2.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or3 = (left, right) => new ComposedDecoder3(__spreadValues(__spreadValues({}, left.decoders || { [left.prefix]: left }), right.decoders || { [right.prefix]: right }));
      Codec3 = class {
        constructor(name2, prefix, baseEncode, baseDecode) {
          this.name = name2;
          this.prefix = prefix;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder3(name2, prefix, baseEncode);
          this.decoder = new Decoder3(name2, prefix, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from4 = ({ name: name2, prefix, encode: encode13, decode: decode21 }) => new Codec3(name2, prefix, encode13, decode21);
      baseX3 = ({ prefix, name: name2, alphabet: alphabet2 }) => {
        const { encode: encode13, decode: decode21 } = base_x_default3(alphabet2, name2);
        return from4({
          prefix,
          name: name2,
          encode: encode13,
          decode: (text) => coerce3(decode21(text))
        });
      };
      decode13 = (string2, alphabet2, bitsPerChar, name2) => {
        const codes = {};
        for (let i = 0; i < alphabet2.length; ++i) {
          codes[alphabet2[i]] = i;
        }
        let end = string2.length;
        while (string2[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string2[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name2} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode8 = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer2 = buffer2 << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc46483 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
        return from4({
          prefix,
          name: name2,
          encode(input) {
            return encode8(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode13(input, alphabet2, bitsPerChar, name2);
          }
        });
      };
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base58.js
  var base58btc3, base58flickr3;
  var init_base583 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base58.js"() {
      init_base3();
      base58btc3 = baseX3({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr3 = baseX3({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base32.js
  var base323, base32upper3, base32pad3, base32padupper3, base32hex3, base32hexupper3, base32hexpad3, base32hexpadupper3, base32z3;
  var init_base323 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base32.js"() {
      init_base3();
      base323 = rfc46483({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper3 = rfc46483({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad3 = rfc46483({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper3 = rfc46483({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex3 = rfc46483({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper3 = rfc46483({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad3 = rfc46483({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper3 = rfc46483({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z3 = rfc46483({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/cid.js
  var cid_exports2 = {};
  __export(cid_exports2, {
    CID: () => CID3
  });
  var CID3, parseCIDtoBytes3, toStringV03, toStringV13, DAG_PB_CODE3, SHA_256_CODE3, encodeCID3, cidSymbol3, readonly3, hidden3, version3, deprecate3, IS_CID_DEPRECATION3;
  var init_cid3 = __esm({
    "node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/cid.js"() {
      init_varint6();
      init_digest3();
      init_base583();
      init_base323();
      init_bytes3();
      CID3 = class _CID {
        constructor(version5, code2, multihash, bytes) {
          this.code = code2;
          this.version = version5;
          this.multihash = multihash;
          this.bytes = bytes;
          this.byteOffset = bytes.byteOffset;
          this.byteLength = bytes.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden3,
            byteLength: hidden3,
            code: readonly3,
            version: readonly3,
            multihash: readonly3,
            bytes: readonly3,
            _baseCache: hidden3,
            asCID: hidden3
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code2, multihash } = this;
              if (code2 !== DAG_PB_CODE3) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE3) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return _CID.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code2, digest: digest2 } = this.multihash;
              const multihash = create3(code2, digest2);
              return _CID.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals7(this.multihash, other.multihash);
        }
        toString(base5) {
          const { bytes, version: version5, _baseCache } = this;
          switch (version5) {
            case 0:
              return toStringV03(bytes, _baseCache, base5 || base58btc3.encoder);
            default:
              return toStringV13(bytes, _baseCache, base5 || base323.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate3(/^0\.0/, IS_CID_DEPRECATION3);
          return !!(value && (value[cidSymbol3] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof _CID) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version5, code: code2, multihash, bytes } = value;
            return new _CID(version5, code2, multihash, bytes || encodeCID3(version5, code2, multihash.bytes));
          } else if (value != null && value[cidSymbol3] === true) {
            const { version: version5, multihash, code: code2 } = value;
            const digest2 = decode12(multihash);
            return _CID.create(version5, code2, digest2);
          } else {
            return null;
          }
        }
        static create(version5, code2, digest2) {
          if (typeof code2 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version5) {
            case 0: {
              if (code2 !== DAG_PB_CODE3) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE3}) block encoding`);
              } else {
                return new _CID(version5, code2, digest2, digest2.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID3(version5, code2, digest2.bytes);
              return new _CID(version5, code2, digest2, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest2) {
          return _CID.create(0, DAG_PB_CODE3, digest2);
        }
        static createV1(code2, digest2) {
          return _CID.create(1, code2, digest2);
        }
        static decode(bytes) {
          const [cid, remainder] = _CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        static decodeFirst(bytes) {
          const specs = _CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce3(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest2 = new Digest3(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
          return [
            cid,
            bytes.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next = () => {
            const [i, length5] = decode11(initialBytes.subarray(offset));
            offset += length5;
            return i;
          };
          let version5 = next();
          let codec = DAG_PB_CODE3;
          if (version5 === 18) {
            version5 = 0;
            offset = 0;
          } else if (version5 === 1) {
            codec = next();
          }
          if (version5 !== 0 && version5 !== 1) {
            throw new RangeError(`Invalid CID version ${version5}`);
          }
          const prefixSize = offset;
          const multihashCode = next();
          const digestSize = next();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version5,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base5) {
          const [prefix, bytes] = parseCIDtoBytes3(source, base5);
          const cid = _CID.decode(bytes);
          cid._baseCache.set(prefix, source);
          return cid;
        }
      };
      parseCIDtoBytes3 = (source, base5) => {
        switch (source[0]) {
          case "Q": {
            const decoder2 = base5 || base58btc3;
            return [
              base58btc3.prefix,
              decoder2.decode(`${base58btc3.prefix}${source}`)
            ];
          }
          case base58btc3.prefix: {
            const decoder2 = base5 || base58btc3;
            return [
              base58btc3.prefix,
              decoder2.decode(source)
            ];
          }
          case base323.prefix: {
            const decoder2 = base5 || base323;
            return [
              base323.prefix,
              decoder2.decode(source)
            ];
          }
          default: {
            if (base5 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base5.decode(source)
            ];
          }
        }
      };
      toStringV03 = (bytes, cache2, base5) => {
        const { prefix } = base5;
        if (prefix !== base58btc3.prefix) {
          throw Error(`Cannot string encode V0 in ${base5.name} encoding`);
        }
        const cid = cache2.get(prefix);
        if (cid == null) {
          const cid2 = base5.encode(bytes).slice(1);
          cache2.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV13 = (bytes, cache2, base5) => {
        const { prefix } = base5;
        const cid = cache2.get(prefix);
        if (cid == null) {
          const cid2 = base5.encode(bytes);
          cache2.set(prefix, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE3 = 112;
      SHA_256_CODE3 = 18;
      encodeCID3 = (version5, code2, multihash) => {
        const codeOffset = encodingLength3(version5);
        const hashOffset = codeOffset + encodingLength3(code2);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo3(version5, bytes, 0);
        encodeTo3(code2, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol3 = Symbol.for("@ipld/js-cid/CID");
      readonly3 = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      hidden3 = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      version3 = "0.0.0-dev";
      deprecate3 = (range, message) => {
        if (range.test(version3)) {
          console.warn(message);
        } else {
          throw new Error(message);
        }
      };
      IS_CID_DEPRECATION3 = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    }
  });

  // node_modules/iso-datestring-validator/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/iso-datestring-validator/dist/index.js"(exports) {
      (() => {
        "use strict";
        var e = { d: (t2, r2) => {
          for (var n2 in r2)
            e.o(r2, n2) && !e.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: r2[n2] });
        }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        } }, t = {};
        function r(e2, t2) {
          return void 0 === t2 && (t2 = "-"), new RegExp("^(?!0{4}" + t2 + "0{2}" + t2 + "0{2})((?=[0-9]{4}" + t2 + "(((0[^2])|1[0-2])|02(?=" + t2 + "(([0-1][0-9])|2[0-8])))" + t2 + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t2 + "02" + t2 + "29))([0-9]{4})" + t2 + "(?!((0[469])|11)" + t2 + "31)((0[1,3-9]|1[0-2])|(02(?!" + t2 + "3)))" + t2 + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e2);
        }
        function n(e2) {
          var t2 = /\D/.exec(e2);
          return t2 ? t2[0] : "";
        }
        function i(e2, t2, r2) {
          void 0 === t2 && (t2 = ":"), void 0 === r2 && (r2 = false);
          var i2 = new RegExp("^([0-1]|2(?=([0-3])|4" + t2 + "00))[0-9]" + t2 + "[0-5][0-9](" + t2 + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
          if (!r2 || !/[Z+\-]/.test(e2))
            return i2.test(e2);
          if (/Z$/.test(e2))
            return i2.test(e2.replace("Z", ""));
          var o2 = e2.includes("+"), a2 = e2.split(/[+-]/), u2 = a2[0], d2 = a2[1];
          return i2.test(u2) && function(e3, t3, r3) {
            return void 0 === r3 && (r3 = ":"), new RegExp(t3 ? "^(0(?!(2" + r3 + "4)|0" + r3 + "3)|1(?=([0-1]|2(?=" + r3 + "[04])|[34](?=" + r3 + "0))))([03469](?=" + r3 + "[03])|[17](?=" + r3 + "0)|2(?=" + r3 + "[04])|5(?=" + r3 + "[034])|8(?=" + r3 + "[04]))" + r3 + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r3 + "[03])|[0-24-8](?=" + r3 + "00))" + r3 + "[03]0$").test(e3);
          }(d2, o2, n(d2));
        }
        function o(e2) {
          var t2 = e2.split("T"), o2 = t2[0], a2 = t2[1], u2 = r(o2, n(o2));
          if (!a2)
            return false;
          var d2, s = (d2 = a2.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d2) ? d2[0] : "");
          return u2 && i(a2, s, true);
        }
        function a(e2, t2) {
          return void 0 === t2 && (t2 = "-"), new RegExp("^[0-9]{4}" + t2 + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e2);
        }
        e.r(t), e.d(t, { isValidDate: () => r, isValidISODateString: () => o, isValidTime: () => i, isValidYearMonth: () => a });
        var u = exports;
        for (var d in t)
          u[d] = t[d];
        t.__esModule && Object.defineProperty(u, "__esModule", { value: true });
      })();
    }
  });

  // node_modules/@atproto/lexicon/dist/validators/formats.js
  var require_formats = __commonJS({
    "node_modules/@atproto/lexicon/dist/validators/formats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.language = exports.cid = exports.nsid = exports.atIdentifier = exports.handle = exports.did = exports.atUri = exports.uri = exports.datetime = void 0;
      var iso_datestring_validator_1 = require_dist3();
      var cid_1 = (init_cid3(), __toCommonJS(cid_exports2));
      var types_1 = require_types3();
      var syntax_1 = require_dist();
      var common_web_1 = require_dist2();
      function datetime(path, value) {
        try {
          if (!(0, iso_datestring_validator_1.isValidISODateString)(value)) {
            throw new Error();
          }
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)
          };
        }
        return { success: true, value };
      }
      exports.datetime = datetime;
      function uri(path, value) {
        const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
        if (!isUri) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a uri`)
          };
        }
        return { success: true, value };
      }
      exports.uri = uri;
      function atUri(path, value) {
        try {
          (0, syntax_1.ensureValidAtUri)(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid at-uri`)
          };
        }
        return { success: true, value };
      }
      exports.atUri = atUri;
      function did(path, value) {
        try {
          (0, syntax_1.ensureValidDid)(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid did`)
          };
        }
        return { success: true, value };
      }
      exports.did = did;
      function handle(path, value) {
        try {
          (0, syntax_1.ensureValidHandle)(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid handle`)
          };
        }
        return { success: true, value };
      }
      exports.handle = handle;
      function atIdentifier(path, value) {
        const isDid = did(path, value);
        if (!isDid.success) {
          const isHandle = handle(path, value);
          if (!isHandle.success) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be a valid did or a handle`)
            };
          }
        }
        return { success: true, value };
      }
      exports.atIdentifier = atIdentifier;
      function nsid(path, value) {
        try {
          (0, syntax_1.ensureValidNsid)(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid nsid`)
          };
        }
        return { success: true, value };
      }
      exports.nsid = nsid;
      function cid(path, value) {
        try {
          cid_1.CID.parse(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a cid string`)
          };
        }
        return { success: true, value };
      }
      exports.cid = cid;
      function language(path, value) {
        if ((0, common_web_1.validateLanguage)(value)) {
          return { success: true, value };
        }
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a well-formed BCP 47 language tag`)
        };
      }
      exports.language = language;
    }
  });

  // node_modules/@atproto/lexicon/dist/validators/primitives.js
  var require_primitives = __commonJS({
    "node_modules/@atproto/lexicon/dist/validators/primitives.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unknown = exports.cidLink = exports.bytes = exports.string = exports.integer = exports.boolean = exports.validate = void 0;
      var common_web_1 = require_dist2();
      var cid_1 = (init_cid3(), __toCommonJS(cid_exports2));
      var formats = __importStar(require_formats());
      var types_1 = require_types3();
      function validate(lexicons, path, def, value) {
        switch (def.type) {
          case "boolean":
            return boolean(lexicons, path, def, value);
          case "integer":
            return integer(lexicons, path, def, value);
          case "string":
            return string2(lexicons, path, def, value);
          case "bytes":
            return bytes(lexicons, path, def, value);
          case "cid-link":
            return cidLink(lexicons, path, def, value);
          case "unknown":
            return unknown(lexicons, path, def, value);
          default:
            return {
              success: false,
              error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
            };
        }
      }
      exports.validate = validate;
      function boolean(lexicons, path, def, value) {
        def = def;
        const type = typeof value;
        if (type === "undefined") {
          if (typeof def.default === "boolean") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a boolean`)
          };
        } else if (type !== "boolean") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a boolean`)
          };
        }
        if (typeof def.const === "boolean") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        return { success: true, value };
      }
      exports.boolean = boolean;
      function integer(lexicons, path, def, value) {
        def = def;
        const type = typeof value;
        if (type === "undefined") {
          if (typeof def.default === "number") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an integer`)
          };
        } else if (!Number.isInteger(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an integer`)
          };
        }
        if (typeof def.const === "number") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        if (Array.isArray(def.enum)) {
          if (!def.enum.includes(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be one of (${def.enum.join("|")})`)
            };
          }
        }
        if (typeof def.maximum === "number") {
          if (value > def.maximum) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} can not be greater than ${def.maximum}`)
            };
          }
        }
        if (typeof def.minimum === "number") {
          if (value < def.minimum) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} can not be less than ${def.minimum}`)
            };
          }
        }
        return { success: true, value };
      }
      exports.integer = integer;
      function string2(lexicons, path, def, value) {
        def = def;
        if (typeof value === "undefined") {
          if (typeof def.default === "string") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a string`)
          };
        } else if (typeof value !== "string") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a string`)
          };
        }
        if (typeof def.const === "string") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        if (Array.isArray(def.enum)) {
          if (!def.enum.includes(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be one of (${def.enum.join("|")})`)
            };
          }
        }
        if (typeof def.maxLength === "number") {
          if ((0, common_web_1.utf8Len)(value) > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be longer than ${def.maxLength} characters`)
            };
          }
        }
        if (typeof def.minLength === "number") {
          if ((0, common_web_1.utf8Len)(value) < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
            };
          }
        }
        if (typeof def.maxGraphemes === "number") {
          if ((0, common_web_1.graphemeLen)(value) > def.maxGraphemes) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be longer than ${def.maxGraphemes} graphemes`)
            };
          }
        }
        if (typeof def.minGraphemes === "number") {
          if ((0, common_web_1.graphemeLen)(value) < def.minGraphemes) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
            };
          }
        }
        if (typeof def.format === "string") {
          switch (def.format) {
            case "datetime":
              return formats.datetime(path, value);
            case "uri":
              return formats.uri(path, value);
            case "at-uri":
              return formats.atUri(path, value);
            case "did":
              return formats.did(path, value);
            case "handle":
              return formats.handle(path, value);
            case "at-identifier":
              return formats.atIdentifier(path, value);
            case "nsid":
              return formats.nsid(path, value);
            case "cid":
              return formats.cid(path, value);
            case "language":
              return formats.language(path, value);
          }
        }
        return { success: true, value };
      }
      exports.string = string2;
      function bytes(lexicons, path, def, value) {
        def = def;
        if (!value || !(value instanceof Uint8Array)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a byte array`)
          };
        }
        if (typeof def.maxLength === "number") {
          if (value.byteLength > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be larger than ${def.maxLength} bytes`)
            };
          }
        }
        if (typeof def.minLength === "number") {
          if (value.byteLength < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be smaller than ${def.minLength} bytes`)
            };
          }
        }
        return { success: true, value };
      }
      exports.bytes = bytes;
      function cidLink(lexicons, path, def, value) {
        if (cid_1.CID.asCID(value) === null) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a CID`)
          };
        }
        return { success: true, value };
      }
      exports.cidLink = cidLink;
      function unknown(lexicons, path, def, value) {
        if (!value || typeof value !== "object") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object`)
          };
        }
        return { success: true, value };
      }
      exports.unknown = unknown;
    }
  });

  // node_modules/@atproto/lexicon/dist/blob-refs.js
  var require_blob_refs = __commonJS({
    "node_modules/@atproto/lexicon/dist/blob-refs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BlobRef = exports.jsonBlobRef = exports.untypedJsonBlobRef = exports.typedJsonBlobRef = void 0;
      var common_web_1 = require_dist2();
      var cid_1 = (init_cid3(), __toCommonJS(cid_exports2));
      var zod_1 = require_lib();
      exports.typedJsonBlobRef = zod_1.z.object({
        $type: zod_1.z.literal("blob"),
        ref: common_web_1.schema.cid,
        mimeType: zod_1.z.string(),
        size: zod_1.z.number()
      }).strict();
      exports.untypedJsonBlobRef = zod_1.z.object({
        cid: zod_1.z.string(),
        mimeType: zod_1.z.string()
      }).strict();
      exports.jsonBlobRef = zod_1.z.union([exports.typedJsonBlobRef, exports.untypedJsonBlobRef]);
      var BlobRef = class _BlobRef {
        constructor(ref, mimeType, size, original) {
          Object.defineProperty(this, "ref", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ref
          });
          Object.defineProperty(this, "mimeType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mimeType
          });
          Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: size
          });
          Object.defineProperty(this, "original", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.original = original != null ? original : {
            $type: "blob",
            ref,
            mimeType,
            size
          };
        }
        static asBlobRef(obj) {
          if (common_web_1.check.is(obj, exports.jsonBlobRef)) {
            return _BlobRef.fromJsonRef(obj);
          }
          return null;
        }
        static fromJsonRef(json) {
          if (common_web_1.check.is(json, exports.typedJsonBlobRef)) {
            return new _BlobRef(json.ref, json.mimeType, json.size);
          } else {
            return new _BlobRef(cid_1.CID.parse(json.cid), json.mimeType, -1, json);
          }
        }
        ipld() {
          return {
            $type: "blob",
            ref: this.ref,
            mimeType: this.mimeType,
            size: this.size
          };
        }
        toJSON() {
          return (0, common_web_1.ipldToJson)(this.ipld());
        }
      };
      exports.BlobRef = BlobRef;
    }
  });

  // node_modules/@atproto/lexicon/dist/validators/blob.js
  var require_blob = __commonJS({
    "node_modules/@atproto/lexicon/dist/validators/blob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.blob = void 0;
      var blob_refs_1 = require_blob_refs();
      var types_1 = require_types3();
      function blob(lexicons, path, def, value) {
        if (!value || !(value instanceof blob_refs_1.BlobRef)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} should be a blob ref`)
          };
        }
        return { success: true, value };
      }
      exports.blob = blob;
    }
  });

  // node_modules/@atproto/lexicon/dist/validators/complex.js
  var require_complex = __commonJS({
    "node_modules/@atproto/lexicon/dist/validators/complex.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.object = exports.array = exports.validate = void 0;
      var types_1 = require_types3();
      var util_1 = require_util3();
      var Primitives = __importStar(require_primitives());
      var Blob2 = __importStar(require_blob());
      function validate(lexicons, path, def, value) {
        switch (def.type) {
          case "boolean":
            return Primitives.boolean(lexicons, path, def, value);
          case "integer":
            return Primitives.integer(lexicons, path, def, value);
          case "string":
            return Primitives.string(lexicons, path, def, value);
          case "bytes":
            return Primitives.bytes(lexicons, path, def, value);
          case "cid-link":
            return Primitives.cidLink(lexicons, path, def, value);
          case "unknown":
            return Primitives.unknown(lexicons, path, def, value);
          case "object":
            return object(lexicons, path, def, value);
          case "array":
            return array(lexicons, path, def, value);
          case "blob":
            return Blob2.blob(lexicons, path, def, value);
          default:
            return {
              success: false,
              error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
            };
        }
      }
      exports.validate = validate;
      function array(lexicons, path, def, value) {
        if (!Array.isArray(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an array`)
          };
        }
        if (typeof def.maxLength === "number") {
          if (value.length > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`)
            };
          }
        }
        if (typeof def.minLength === "number") {
          if (value.length < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`)
            };
          }
        }
        const itemsDef = def.items;
        for (let i = 0; i < value.length; i++) {
          const itemValue = value[i];
          const itemPath = `${path}/${i}`;
          const res = (0, util_1.validateOneOf)(lexicons, itemPath, itemsDef, itemValue);
          if (!res.success) {
            return res;
          }
        }
        return { success: true, value };
      }
      exports.array = array;
      function object(lexicons, path, def, value) {
        def = def;
        if (!value || typeof value !== "object") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object`)
          };
        }
        const requiredProps = new Set(def.required);
        const nullableProps = new Set(def.nullable);
        let resultValue = value;
        if (typeof def.properties === "object") {
          for (const key in def.properties) {
            if (value[key] === null && nullableProps.has(key)) {
              continue;
            }
            const propDef = def.properties[key];
            const propPath = `${path}/${key}`;
            const validated = (0, util_1.validateOneOf)(lexicons, propPath, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === "undefined";
            if (propIsUndefined && requiredProps.has(key)) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must have the property "${key}"`)
              };
            } else if (!propIsUndefined && !validated.success) {
              return validated;
            }
            if (propValue !== value[key]) {
              if (resultValue === value) {
                resultValue = __spreadValues({}, value);
              }
              resultValue[key] = propValue;
            }
          }
        }
        return { success: true, value: resultValue };
      }
      exports.object = object;
    }
  });

  // node_modules/@atproto/lexicon/dist/util.js
  var require_util3 = __commonJS({
    "node_modules/@atproto/lexicon/dist/util.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.requiredPropertiesRefinement = exports.toConcreteTypes = exports.assertValidOneOf = exports.validateOneOf = exports.toLexUri = void 0;
      var ComplexValidators = __importStar(require_complex());
      var types_1 = require_types3();
      var zod_1 = require_lib();
      function toLexUri(str, baseUri) {
        if (str.split("#").length > 2) {
          throw new Error("Uri can only have one hash segment");
        }
        if (str.startsWith("lex:")) {
          return str;
        }
        if (str.startsWith("#")) {
          if (!baseUri) {
            throw new Error(`Unable to resolve uri without anchor: ${str}`);
          }
          return `${baseUri}${str}`;
        }
        return `lex:${str}`;
      }
      exports.toLexUri = toLexUri;
      function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
        let error;
        let concreteDefs;
        if (def.type === "union") {
          if (!(0, types_1.isDiscriminatedObject)(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`)
            };
          }
          if (!refsContainType(def.refs, value.$type)) {
            if (def.closed) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(", ")}`)
              };
            }
            return { success: true, value };
          } else {
            concreteDefs = toConcreteTypes(lexicons, {
              type: "ref",
              ref: value.$type
            });
          }
        } else {
          concreteDefs = toConcreteTypes(lexicons, def);
        }
        for (const concreteDef of concreteDefs) {
          const result = mustBeObj ? ComplexValidators.object(lexicons, path, concreteDef, value) : ComplexValidators.validate(lexicons, path, concreteDef, value);
          if (result.success) {
            return result;
          }
          error != null ? error : error = result.error;
        }
        if (concreteDefs.length > 1) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} did not match any of the expected definitions`)
          };
        }
        return { success: false, error };
      }
      exports.validateOneOf = validateOneOf;
      function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
        const res = validateOneOf(lexicons, path, def, value, mustBeObj);
        if (!res.success)
          throw res.error;
        return res.value;
      }
      exports.assertValidOneOf = assertValidOneOf;
      function toConcreteTypes(lexicons, def) {
        if (def.type === "ref") {
          return [lexicons.getDefOrThrow(def.ref)];
        } else if (def.type === "union") {
          return def.refs.map((ref) => lexicons.getDefOrThrow(ref)).flat();
        } else {
          return [def];
        }
      }
      exports.toConcreteTypes = toConcreteTypes;
      function requiredPropertiesRefinement(object, ctx) {
        if (object.required === void 0) {
          return;
        }
        if (!Array.isArray(object.required)) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.invalid_type,
            received: typeof object.required,
            expected: "array"
          });
          return;
        }
        if (object.properties === void 0) {
          if (object.required.length > 0) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Required fields defined but no properties defined`
            });
          }
          return;
        }
        for (const field of object.required) {
          if (object.properties[field] === void 0) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Required field "${field}" not defined`
            });
          }
        }
      }
      exports.requiredPropertiesRefinement = requiredPropertiesRefinement;
      var refsContainType = (refs, type) => {
        const lexUri = toLexUri(type);
        if (refs.includes(lexUri)) {
          return true;
        }
        if (lexUri.endsWith("#main")) {
          return refs.includes(lexUri.replace("#main", ""));
        } else {
          return refs.includes(lexUri + "#main");
        }
      };
    }
  });

  // node_modules/@atproto/lexicon/dist/types.js
  var require_types3 = __commonJS({
    "node_modules/@atproto/lexicon/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LexiconDefNotFoundError = exports.InvalidLexiconError = exports.ValidationError = exports.parseLexiconDoc = exports.isDiscriminatedObject = exports.discriminatedObject = exports.hasProp = exports.isObj = exports.isValidLexiconDoc = exports.lexiconDoc = exports.lexUserType = exports.lexRecord = exports.lexXrpcSubscription = exports.lexXrpcProcedure = exports.lexXrpcQuery = exports.lexXrpcError = exports.lexXrpcSubscriptionMessage = exports.lexXrpcBody = exports.lexXrpcParameters = exports.lexObject = exports.lexToken = exports.lexPrimitiveArray = exports.lexArray = exports.lexBlob = exports.lexRefVariant = exports.lexRefUnion = exports.lexRef = exports.lexIpldType = exports.lexCidLink = exports.lexBytes = exports.lexPrimitive = exports.lexUnknown = exports.lexString = exports.lexStringFormat = exports.lexInteger = exports.lexBoolean = void 0;
      var zod_1 = require_lib();
      var syntax_1 = require_dist();
      var util_1 = require_util3();
      exports.lexBoolean = zod_1.z.object({
        type: zod_1.z.literal("boolean"),
        description: zod_1.z.string().optional(),
        default: zod_1.z.boolean().optional(),
        const: zod_1.z.boolean().optional()
      }).strict();
      exports.lexInteger = zod_1.z.object({
        type: zod_1.z.literal("integer"),
        description: zod_1.z.string().optional(),
        default: zod_1.z.number().int().optional(),
        minimum: zod_1.z.number().int().optional(),
        maximum: zod_1.z.number().int().optional(),
        enum: zod_1.z.number().int().array().optional(),
        const: zod_1.z.number().int().optional()
      }).strict();
      exports.lexStringFormat = zod_1.z.enum([
        "datetime",
        "uri",
        "at-uri",
        "did",
        "handle",
        "at-identifier",
        "nsid",
        "cid",
        "language"
      ]);
      exports.lexString = zod_1.z.object({
        type: zod_1.z.literal("string"),
        format: exports.lexStringFormat.optional(),
        description: zod_1.z.string().optional(),
        default: zod_1.z.string().optional(),
        minLength: zod_1.z.number().int().optional(),
        maxLength: zod_1.z.number().int().optional(),
        minGraphemes: zod_1.z.number().int().optional(),
        maxGraphemes: zod_1.z.number().int().optional(),
        enum: zod_1.z.string().array().optional(),
        const: zod_1.z.string().optional(),
        knownValues: zod_1.z.string().array().optional()
      }).strict();
      exports.lexUnknown = zod_1.z.object({
        type: zod_1.z.literal("unknown"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexPrimitive = zod_1.z.discriminatedUnion("type", [
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown
      ]);
      exports.lexBytes = zod_1.z.object({
        type: zod_1.z.literal("bytes"),
        description: zod_1.z.string().optional(),
        maxLength: zod_1.z.number().optional(),
        minLength: zod_1.z.number().optional()
      }).strict();
      exports.lexCidLink = zod_1.z.object({
        type: zod_1.z.literal("cid-link"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexIpldType = zod_1.z.discriminatedUnion("type", [exports.lexBytes, exports.lexCidLink]);
      exports.lexRef = zod_1.z.object({
        type: zod_1.z.literal("ref"),
        description: zod_1.z.string().optional(),
        ref: zod_1.z.string()
      }).strict();
      exports.lexRefUnion = zod_1.z.object({
        type: zod_1.z.literal("union"),
        description: zod_1.z.string().optional(),
        refs: zod_1.z.string().array(),
        closed: zod_1.z.boolean().optional()
      }).strict();
      exports.lexRefVariant = zod_1.z.discriminatedUnion("type", [exports.lexRef, exports.lexRefUnion]);
      exports.lexBlob = zod_1.z.object({
        type: zod_1.z.literal("blob"),
        description: zod_1.z.string().optional(),
        accept: zod_1.z.string().array().optional(),
        maxSize: zod_1.z.number().optional()
      }).strict();
      exports.lexArray = zod_1.z.object({
        type: zod_1.z.literal("array"),
        description: zod_1.z.string().optional(),
        items: zod_1.z.union([exports.lexPrimitive, exports.lexIpldType, exports.lexBlob, exports.lexRefVariant]),
        minLength: zod_1.z.number().int().optional(),
        maxLength: zod_1.z.number().int().optional()
      }).strict();
      exports.lexPrimitiveArray = exports.lexArray.merge(zod_1.z.object({
        items: exports.lexPrimitive
      }).strict());
      exports.lexToken = zod_1.z.object({
        type: zod_1.z.literal("token"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexObject = zod_1.z.object({
        type: zod_1.z.literal("object"),
        description: zod_1.z.string().optional(),
        required: zod_1.z.string().array().optional(),
        nullable: zod_1.z.string().array().optional(),
        properties: zod_1.z.record(zod_1.z.union([exports.lexRefVariant, exports.lexIpldType, exports.lexArray, exports.lexBlob, exports.lexPrimitive]))
      }).strict().superRefine(util_1.requiredPropertiesRefinement);
      exports.lexXrpcParameters = zod_1.z.object({
        type: zod_1.z.literal("params"),
        description: zod_1.z.string().optional(),
        required: zod_1.z.string().array().optional(),
        properties: zod_1.z.record(zod_1.z.union([exports.lexPrimitive, exports.lexPrimitiveArray]))
      }).strict().superRefine(util_1.requiredPropertiesRefinement);
      exports.lexXrpcBody = zod_1.z.object({
        description: zod_1.z.string().optional(),
        encoding: zod_1.z.string(),
        schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
      }).strict();
      exports.lexXrpcSubscriptionMessage = zod_1.z.object({
        description: zod_1.z.string().optional(),
        schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
      }).strict();
      exports.lexXrpcError = zod_1.z.object({
        name: zod_1.z.string(),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexXrpcQuery = zod_1.z.object({
        type: zod_1.z.literal("query"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        output: exports.lexXrpcBody.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexXrpcProcedure = zod_1.z.object({
        type: zod_1.z.literal("procedure"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        input: exports.lexXrpcBody.optional(),
        output: exports.lexXrpcBody.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexXrpcSubscription = zod_1.z.object({
        type: zod_1.z.literal("subscription"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        message: exports.lexXrpcSubscriptionMessage.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexRecord = zod_1.z.object({
        type: zod_1.z.literal("record"),
        description: zod_1.z.string().optional(),
        key: zod_1.z.string().optional(),
        record: exports.lexObject
      }).strict();
      exports.lexUserType = zod_1.z.custom((val) => {
        if (!val || typeof val !== "object") {
          return;
        }
        if (val["type"] === void 0) {
          return;
        }
        switch (val["type"]) {
          case "record":
            return exports.lexRecord.parse(val);
          case "query":
            return exports.lexXrpcQuery.parse(val);
          case "procedure":
            return exports.lexXrpcProcedure.parse(val);
          case "subscription":
            return exports.lexXrpcSubscription.parse(val);
          case "blob":
            return exports.lexBlob.parse(val);
          case "array":
            return exports.lexArray.parse(val);
          case "token":
            return exports.lexToken.parse(val);
          case "object":
            return exports.lexObject.parse(val);
          case "boolean":
            return exports.lexBoolean.parse(val);
          case "integer":
            return exports.lexInteger.parse(val);
          case "string":
            return exports.lexString.parse(val);
          case "bytes":
            return exports.lexBytes.parse(val);
          case "cid-link":
            return exports.lexCidLink.parse(val);
          case "unknown":
            return exports.lexUnknown.parse(val);
        }
      }, (val) => {
        if (!val || typeof val !== "object") {
          return {
            message: "Must be an object",
            fatal: true
          };
        }
        if (val["type"] === void 0) {
          return {
            message: "Must have a type",
            fatal: true
          };
        }
        return {
          message: `Invalid type: ${val["type"]} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
          fatal: true
        };
      });
      exports.lexiconDoc = zod_1.z.object({
        lexicon: zod_1.z.literal(1),
        id: zod_1.z.string().refine((v) => syntax_1.NSID.isValid(v), {
          message: "Must be a valid NSID"
        }),
        revision: zod_1.z.number().optional(),
        description: zod_1.z.string().optional(),
        defs: zod_1.z.record(exports.lexUserType)
      }).strict().superRefine((doc, ctx) => {
        for (const defId in doc.defs) {
          const def = doc.defs[defId];
          if (defId !== "main" && (def.type === "record" || def.type === "procedure" || def.type === "query" || def.type === "subscription")) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Records, procedures, queries, and subscriptions must be the main definition.`
            });
          }
        }
      });
      function isValidLexiconDoc(v) {
        return exports.lexiconDoc.safeParse(v).success;
      }
      exports.isValidLexiconDoc = isValidLexiconDoc;
      function isObj(obj) {
        return obj !== null && typeof obj === "object";
      }
      exports.isObj = isObj;
      function hasProp(data, prop) {
        return prop in data;
      }
      exports.hasProp = hasProp;
      exports.discriminatedObject = zod_1.z.object({ $type: zod_1.z.string() });
      function isDiscriminatedObject(value) {
        return exports.discriminatedObject.safeParse(value).success;
      }
      exports.isDiscriminatedObject = isDiscriminatedObject;
      function parseLexiconDoc(v) {
        exports.lexiconDoc.parse(v);
        return v;
      }
      exports.parseLexiconDoc = parseLexiconDoc;
      var ValidationError = class extends Error {
      };
      exports.ValidationError = ValidationError;
      var InvalidLexiconError = class extends Error {
      };
      exports.InvalidLexiconError = InvalidLexiconError;
      var LexiconDefNotFoundError = class extends Error {
      };
      exports.LexiconDefNotFoundError = LexiconDefNotFoundError;
    }
  });

  // node_modules/@atproto/lexicon/dist/validators/xrpc.js
  var require_xrpc = __commonJS({
    "node_modules/@atproto/lexicon/dist/validators/xrpc.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.params = void 0;
      var types_1 = require_types3();
      var PrimitiveValidators = __importStar(require_primitives());
      var complex_1 = require_complex();
      function params(lexicons, path, def, val) {
        var _a2;
        const value = val && typeof val === "object" ? val : {};
        const requiredProps = new Set((_a2 = def.required) != null ? _a2 : []);
        let resultValue = value;
        if (typeof def.properties === "object") {
          for (const key in def.properties) {
            const propDef = def.properties[key];
            const validated = propDef.type === "array" ? (0, complex_1.array)(lexicons, key, propDef, value[key]) : PrimitiveValidators.validate(lexicons, key, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === "undefined";
            if (propIsUndefined && requiredProps.has(key)) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must have the property "${key}"`)
              };
            } else if (!propIsUndefined && !validated.success) {
              return validated;
            }
            if (propValue !== value[key]) {
              if (resultValue === value) {
                resultValue = __spreadValues({}, value);
              }
              resultValue[key] = propValue;
            }
          }
        }
        return { success: true, value: resultValue };
      }
      exports.params = params;
    }
  });

  // node_modules/@atproto/lexicon/dist/validation.js
  var require_validation = __commonJS({
    "node_modules/@atproto/lexicon/dist/validation.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assertValidXrpcMessage = exports.assertValidXrpcOutput = exports.assertValidXrpcInput = exports.assertValidXrpcParams = exports.assertValidRecord = void 0;
      var util_1 = require_util3();
      var ComplexValidators = __importStar(require_complex());
      var XrpcValidators = __importStar(require_xrpc());
      function assertValidRecord(lexicons, def, value) {
        const res = ComplexValidators.object(lexicons, "Record", def.record, value);
        if (!res.success)
          throw res.error;
        return res.value;
      }
      exports.assertValidRecord = assertValidRecord;
      function assertValidXrpcParams(lexicons, def, value) {
        if (def.parameters) {
          const res = XrpcValidators.params(lexicons, "Params", def.parameters, value);
          if (!res.success)
            throw res.error;
          return res.value;
        }
      }
      exports.assertValidXrpcParams = assertValidXrpcParams;
      function assertValidXrpcInput(lexicons, def, value) {
        var _a2;
        if ((_a2 = def.input) == null ? void 0 : _a2.schema) {
          return (0, util_1.assertValidOneOf)(lexicons, "Input", def.input.schema, value, true);
        }
      }
      exports.assertValidXrpcInput = assertValidXrpcInput;
      function assertValidXrpcOutput(lexicons, def, value) {
        var _a2;
        if ((_a2 = def.output) == null ? void 0 : _a2.schema) {
          return (0, util_1.assertValidOneOf)(lexicons, "Output", def.output.schema, value, true);
        }
      }
      exports.assertValidXrpcOutput = assertValidXrpcOutput;
      function assertValidXrpcMessage(lexicons, def, value) {
        var _a2;
        if ((_a2 = def.message) == null ? void 0 : _a2.schema) {
          return (0, util_1.assertValidOneOf)(lexicons, "Message", def.message.schema, value, true);
        }
      }
      exports.assertValidXrpcMessage = assertValidXrpcMessage;
    }
  });

  // node_modules/@atproto/lexicon/dist/lexicons.js
  var require_lexicons = __commonJS({
    "node_modules/@atproto/lexicon/dist/lexicons.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Lexicons = void 0;
      var types_1 = require_types3();
      var validation_1 = require_validation();
      var util_1 = require_util3();
      var ComplexValidators = __importStar(require_complex());
      var Lexicons = class {
        constructor(docs) {
          Object.defineProperty(this, "docs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ new Map()
          });
          Object.defineProperty(this, "defs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ new Map()
          });
          if (docs == null ? void 0 : docs.length) {
            for (const doc of docs) {
              this.add(doc);
            }
          }
        }
        /**
         * Add a lexicon doc.
         */
        add(doc) {
          const uri = (0, util_1.toLexUri)(doc.id);
          if (this.docs.has(uri)) {
            throw new Error(`${uri} has already been registered`);
          }
          resolveRefUris(doc, uri);
          this.docs.set(uri, doc);
          for (const [defUri, def] of iterDefs(doc)) {
            this.defs.set(defUri, def);
          }
        }
        /**
         * Remove a lexicon doc.
         */
        remove(uri) {
          uri = (0, util_1.toLexUri)(uri);
          const doc = this.docs.get(uri);
          if (!doc) {
            throw new Error(`Unable to remove "${uri}": does not exist`);
          }
          for (const [defUri, _def] of iterDefs(doc)) {
            this.defs.delete(defUri);
          }
          this.docs.delete(uri);
        }
        /**
         * Get a lexicon doc.
         */
        get(uri) {
          uri = (0, util_1.toLexUri)(uri);
          return this.docs.get(uri);
        }
        /**
         * Get a definition.
         */
        getDef(uri) {
          uri = (0, util_1.toLexUri)(uri);
          return this.defs.get(uri);
        }
        getDefOrThrow(uri, types) {
          const def = this.getDef(uri);
          if (!def) {
            throw new types_1.LexiconDefNotFoundError(`Lexicon not found: ${uri}`);
          }
          if (types && !types.includes(def.type)) {
            throw new types_1.InvalidLexiconError(`Not a ${types.join(" or ")} lexicon: ${uri}`);
          }
          return def;
        }
        /**
         * Validate a record or object.
         */
        validate(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["record", "object"]);
          if (!(0, types_1.isObj)(value)) {
            throw new types_1.ValidationError(`Value must be an object`);
          }
          if (def.type === "record") {
            return ComplexValidators.object(this, "Record", def.record, value);
          } else if (def.type === "object") {
            return ComplexValidators.object(this, "Object", def, value);
          } else {
            throw new types_1.InvalidLexiconError("Definition must be a record or object");
          }
        }
        /**
         * Validate a record and throw on any error.
         */
        assertValidRecord(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["record"]);
          if (!(0, types_1.isObj)(value)) {
            throw new types_1.ValidationError(`Record must be an object`);
          }
          if (!(0, types_1.hasProp)(value, "$type") || typeof value.$type !== "string") {
            throw new types_1.ValidationError(`Record/$type must be a string`);
          }
          const $type = value.$type || "";
          if ((0, util_1.toLexUri)($type) !== lexUri) {
            throw new types_1.ValidationError(`Invalid $type: must be ${lexUri}, got ${$type}`);
          }
          return (0, validation_1.assertValidRecord)(this, def, value);
        }
        /**
         * Validate xrpc query params and throw on any error.
         */
        assertValidXrpcParams(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, [
            "query",
            "procedure",
            "subscription"
          ]);
          return (0, validation_1.assertValidXrpcParams)(this, def, value);
        }
        /**
         * Validate xrpc input body and throw on any error.
         */
        assertValidXrpcInput(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["procedure"]);
          return (0, validation_1.assertValidXrpcInput)(this, def, value);
        }
        /**
         * Validate xrpc output body and throw on any error.
         */
        assertValidXrpcOutput(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["query", "procedure"]);
          return (0, validation_1.assertValidXrpcOutput)(this, def, value);
        }
        /**
         * Validate xrpc subscription message and throw on any error.
         */
        assertValidXrpcMessage(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["subscription"]);
          return (0, validation_1.assertValidXrpcMessage)(this, def, value);
        }
        /**
         * Resolve a lex uri given a ref
         */
        resolveLexUri(lexUri, ref) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          return (0, util_1.toLexUri)(ref, lexUri);
        }
      };
      exports.Lexicons = Lexicons;
      function* iterDefs(doc) {
        for (const defId in doc.defs) {
          yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];
          if (defId === "main") {
            yield [`lex:${doc.id}`, doc.defs[defId]];
          }
        }
      }
      function resolveRefUris(obj, baseUri) {
        for (const k in obj) {
          if (obj.type === "ref") {
            obj.ref = (0, util_1.toLexUri)(obj.ref, baseUri);
          } else if (obj.type === "union") {
            obj.refs = obj.refs.map((ref) => (0, util_1.toLexUri)(ref, baseUri));
          } else if (Array.isArray(obj[k])) {
            obj[k] = obj[k].map((item) => {
              if (typeof item === "string") {
                return item.startsWith("#") ? (0, util_1.toLexUri)(item, baseUri) : item;
              } else if (item && typeof item === "object") {
                return resolveRefUris(item, baseUri);
              }
              return item;
            });
          } else if (obj[k] && typeof obj[k] === "object") {
            obj[k] = resolveRefUris(obj[k], baseUri);
          }
        }
        return obj;
      }
    }
  });

  // node_modules/@atproto/lexicon/dist/serialize.js
  var require_serialize = __commonJS({
    "node_modules/@atproto/lexicon/dist/serialize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.ipldToLex = exports.lexToIpld = void 0;
      var common_web_1 = require_dist2();
      var cid_1 = (init_cid3(), __toCommonJS(cid_exports2));
      var blob_refs_1 = require_blob_refs();
      var lexToIpld = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.lexToIpld)(item));
        }
        if (val && typeof val === "object") {
          if (val instanceof blob_refs_1.BlobRef) {
            return val.original;
          }
          if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
            return val;
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.lexToIpld)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.lexToIpld = lexToIpld;
      var ipldToLex = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.ipldToLex)(item));
        }
        if (val && typeof val === "object") {
          if ((val["$type"] === "blob" || typeof val["cid"] === "string" && typeof val["mimeType"] === "string") && common_web_1.check.is(val, blob_refs_1.jsonBlobRef)) {
            return blob_refs_1.BlobRef.fromJsonRef(val);
          }
          if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
            return val;
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.ipldToLex)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.ipldToLex = ipldToLex;
      var lexToJson = (val) => {
        return (0, common_web_1.ipldToJson)((0, exports.lexToIpld)(val));
      };
      exports.lexToJson = lexToJson;
      var stringifyLex = (val) => {
        return JSON.stringify((0, exports.lexToJson)(val));
      };
      exports.stringifyLex = stringifyLex;
      var jsonToLex = (val) => {
        return (0, exports.ipldToLex)((0, common_web_1.jsonToIpld)(val));
      };
      exports.jsonToLex = jsonToLex;
      var jsonStringToLex = (val) => {
        return (0, exports.jsonToLex)(JSON.parse(val));
      };
      exports.jsonStringToLex = jsonStringToLex;
    }
  });

  // node_modules/@atproto/lexicon/dist/index.js
  var require_dist4 = __commonJS({
    "node_modules/@atproto/lexicon/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_types3(), exports);
      __exportStar(require_lexicons(), exports);
      __exportStar(require_blob_refs(), exports);
      __exportStar(require_serialize(), exports);
    }
  });

  // node_modules/@atproto/api/dist/types.js
  var require_types4 = __commonJS({
    "node_modules/@atproto/api/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@atproto/api/dist/const.js
  var require_const = __commonJS({
    "node_modules/@atproto/api/dist/const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BSKY_LABELER_DID = void 0;
      exports.BSKY_LABELER_DID = "did:plc:ar7c4by46qjdydhdevvrndac";
    }
  });

  // node_modules/@atproto/api/dist/util.js
  var require_util4 = __commonJS({
    "node_modules/@atproto/api/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sanitizeMutedWordValue = void 0;
      function sanitizeMutedWordValue(value) {
        return value.trim().replace(/^#(?!\ufe0f)/, "").replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, "");
      }
      exports.sanitizeMutedWordValue = sanitizeMutedWordValue;
    }
  });

  // node_modules/@atproto/xrpc/dist/types.js
  var require_types5 = __commonJS({
    "node_modules/@atproto/xrpc/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.XRPCInvalidResponseError = exports.XRPCError = exports.XRPCResponse = exports.ResponseTypeStrings = exports.ResponseTypeNames = exports.ResponseType = exports.errorResponseBody = void 0;
      var zod_1 = require_lib();
      exports.errorResponseBody = zod_1.z.object({
        error: zod_1.z.string().optional(),
        message: zod_1.z.string().optional()
      });
      var ResponseType;
      (function(ResponseType2) {
        ResponseType2[ResponseType2["Unknown"] = 1] = "Unknown";
        ResponseType2[ResponseType2["InvalidResponse"] = 2] = "InvalidResponse";
        ResponseType2[ResponseType2["Success"] = 200] = "Success";
        ResponseType2[ResponseType2["InvalidRequest"] = 400] = "InvalidRequest";
        ResponseType2[ResponseType2["AuthRequired"] = 401] = "AuthRequired";
        ResponseType2[ResponseType2["Forbidden"] = 403] = "Forbidden";
        ResponseType2[ResponseType2["XRPCNotSupported"] = 404] = "XRPCNotSupported";
        ResponseType2[ResponseType2["PayloadTooLarge"] = 413] = "PayloadTooLarge";
        ResponseType2[ResponseType2["RateLimitExceeded"] = 429] = "RateLimitExceeded";
        ResponseType2[ResponseType2["InternalServerError"] = 500] = "InternalServerError";
        ResponseType2[ResponseType2["MethodNotImplemented"] = 501] = "MethodNotImplemented";
        ResponseType2[ResponseType2["UpstreamFailure"] = 502] = "UpstreamFailure";
        ResponseType2[ResponseType2["NotEnoughResources"] = 503] = "NotEnoughResources";
        ResponseType2[ResponseType2["UpstreamTimeout"] = 504] = "UpstreamTimeout";
      })(ResponseType || (exports.ResponseType = ResponseType = {}));
      exports.ResponseTypeNames = {
        [ResponseType.InvalidResponse]: "InvalidResponse",
        [ResponseType.Success]: "Success",
        [ResponseType.InvalidRequest]: "InvalidRequest",
        [ResponseType.AuthRequired]: "AuthenticationRequired",
        [ResponseType.Forbidden]: "Forbidden",
        [ResponseType.XRPCNotSupported]: "XRPCNotSupported",
        [ResponseType.PayloadTooLarge]: "PayloadTooLarge",
        [ResponseType.RateLimitExceeded]: "RateLimitExceeded",
        [ResponseType.InternalServerError]: "InternalServerError",
        [ResponseType.MethodNotImplemented]: "MethodNotImplemented",
        [ResponseType.UpstreamFailure]: "UpstreamFailure",
        [ResponseType.NotEnoughResources]: "NotEnoughResources",
        [ResponseType.UpstreamTimeout]: "UpstreamTimeout"
      };
      exports.ResponseTypeStrings = {
        [ResponseType.InvalidResponse]: "Invalid Response",
        [ResponseType.Success]: "Success",
        [ResponseType.InvalidRequest]: "Invalid Request",
        [ResponseType.AuthRequired]: "Authentication Required",
        [ResponseType.Forbidden]: "Forbidden",
        [ResponseType.XRPCNotSupported]: "XRPC Not Supported",
        [ResponseType.PayloadTooLarge]: "Payload Too Large",
        [ResponseType.RateLimitExceeded]: "Rate Limit Exceeded",
        [ResponseType.InternalServerError]: "Internal Server Error",
        [ResponseType.MethodNotImplemented]: "Method Not Implemented",
        [ResponseType.UpstreamFailure]: "Upstream Failure",
        [ResponseType.NotEnoughResources]: "Not Enough Resources",
        [ResponseType.UpstreamTimeout]: "Upstream Timeout"
      };
      var XRPCResponse = class {
        constructor(data, headers) {
          Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: data
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: headers
          });
          Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
          });
        }
      };
      exports.XRPCResponse = XRPCResponse;
      var XRPCError = class extends Error {
        constructor(status, error, message, headers) {
          super(message || error || exports.ResponseTypeStrings[status]);
          Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: status
          });
          Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: error
          });
          Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          if (!this.error) {
            this.error = exports.ResponseTypeNames[status];
          }
          this.headers = headers;
        }
      };
      exports.XRPCError = XRPCError;
      var XRPCInvalidResponseError = class extends XRPCError {
        constructor(lexiconNsid, validationError, responseBody) {
          super(ResponseType.InvalidResponse, exports.ResponseTypeStrings[ResponseType.InvalidResponse], `The server gave an invalid response and may be out of date.`);
          Object.defineProperty(this, "lexiconNsid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: lexiconNsid
          });
          Object.defineProperty(this, "validationError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: validationError
          });
          Object.defineProperty(this, "responseBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: responseBody
          });
        }
      };
      exports.XRPCInvalidResponseError = XRPCInvalidResponseError;
    }
  });

  // node_modules/@atproto/xrpc/dist/util.js
  var require_util5 = __commonJS({
    "node_modules/@atproto/xrpc/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.httpResponseBodyParse = exports.httpResponseCodeToEnum = exports.encodeMethodCallBody = exports.constructMethodCallHeaders = exports.normalizeHeaders = exports.encodeQueryParam = exports.constructMethodCallUri = exports.getMethodSchemaHTTPMethod = void 0;
      var lexicon_1 = require_dist4();
      var types_1 = require_types5();
      function getMethodSchemaHTTPMethod(schema) {
        if (schema.type === "procedure") {
          return "post";
        }
        return "get";
      }
      exports.getMethodSchemaHTTPMethod = getMethodSchemaHTTPMethod;
      function constructMethodCallUri(nsid, schema, serviceUri, params) {
        var _a2, _b;
        const uri = new URL(serviceUri);
        uri.pathname = `/xrpc/${nsid}`;
        if (params) {
          for (const [key, value] of Object.entries(params)) {
            const paramSchema = (_b = (_a2 = schema.parameters) == null ? void 0 : _a2.properties) == null ? void 0 : _b[key];
            if (!paramSchema) {
              throw new Error(`Invalid query parameter: ${key}`);
            }
            if (value !== void 0) {
              if (paramSchema.type === "array") {
                const vals = [];
                vals.concat(value).forEach((val) => {
                  uri.searchParams.append(key, encodeQueryParam(paramSchema.items.type, val));
                });
              } else {
                uri.searchParams.set(key, encodeQueryParam(paramSchema.type, value));
              }
            }
          }
        }
        return uri.toString();
      }
      exports.constructMethodCallUri = constructMethodCallUri;
      function encodeQueryParam(type, value) {
        if (type === "string" || type === "unknown") {
          return String(value);
        }
        if (type === "float") {
          return String(Number(value));
        } else if (type === "integer") {
          return String(Number(value) | 0);
        } else if (type === "boolean") {
          return value ? "true" : "false";
        } else if (type === "datetime") {
          if (value instanceof Date) {
            return value.toISOString();
          }
          return String(value);
        }
        throw new Error(`Unsupported query param type: ${type}`);
      }
      exports.encodeQueryParam = encodeQueryParam;
      function normalizeHeaders(headers) {
        const normalized = {};
        for (const [header, value] of Object.entries(headers)) {
          normalized[header.toLowerCase()] = value;
        }
        return normalized;
      }
      exports.normalizeHeaders = normalizeHeaders;
      function constructMethodCallHeaders(schema, data, opts) {
        const headers = (opts == null ? void 0 : opts.headers) || {};
        if (schema.type === "procedure") {
          if (opts == null ? void 0 : opts.encoding) {
            headers["Content-Type"] = opts.encoding;
          }
          if (data && typeof data === "object") {
            if (!headers["Content-Type"]) {
              headers["Content-Type"] = "application/json";
            }
          }
        }
        return headers;
      }
      exports.constructMethodCallHeaders = constructMethodCallHeaders;
      function encodeMethodCallBody(headers, data) {
        if (!headers["content-type"] || typeof data === "undefined") {
          return void 0;
        }
        if (data instanceof ArrayBuffer) {
          return data;
        }
        if (headers["content-type"].startsWith("text/")) {
          return new TextEncoder().encode(data.toString());
        }
        if (headers["content-type"].startsWith("application/json")) {
          return new TextEncoder().encode((0, lexicon_1.stringifyLex)(data));
        }
        return data;
      }
      exports.encodeMethodCallBody = encodeMethodCallBody;
      function httpResponseCodeToEnum(status) {
        let resCode;
        if (status in types_1.ResponseType) {
          resCode = status;
        } else if (status >= 100 && status < 200) {
          resCode = types_1.ResponseType.XRPCNotSupported;
        } else if (status >= 200 && status < 300) {
          resCode = types_1.ResponseType.Success;
        } else if (status >= 300 && status < 400) {
          resCode = types_1.ResponseType.XRPCNotSupported;
        } else if (status >= 400 && status < 500) {
          resCode = types_1.ResponseType.InvalidRequest;
        } else {
          resCode = types_1.ResponseType.InternalServerError;
        }
        return resCode;
      }
      exports.httpResponseCodeToEnum = httpResponseCodeToEnum;
      function httpResponseBodyParse(mimeType, data) {
        if (mimeType) {
          if (mimeType.includes("application/json") && (data == null ? void 0 : data.byteLength)) {
            try {
              const str = new TextDecoder().decode(data);
              return (0, lexicon_1.jsonStringToLex)(str);
            } catch (e) {
              throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, `Failed to parse response body: ${String(e)}`);
            }
          }
          if (mimeType.startsWith("text/") && (data == null ? void 0 : data.byteLength)) {
            try {
              return new TextDecoder().decode(data);
            } catch (e) {
              throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, `Failed to parse response body: ${String(e)}`);
            }
          }
        }
        if (data instanceof ArrayBuffer) {
          return new Uint8Array(data);
        }
        return data;
      }
      exports.httpResponseBodyParse = httpResponseBodyParse;
    }
  });

  // node_modules/@atproto/xrpc/dist/client.js
  var require_client = __commonJS({
    "node_modules/@atproto/xrpc/dist/client.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.defaultFetchHandler = exports.ServiceClient = exports.Client = void 0;
      var lexicon_1 = require_dist4();
      var util_1 = require_util5();
      var types_1 = require_types5();
      var Client = class {
        constructor() {
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: defaultFetchHandler
          });
          Object.defineProperty(this, "lex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new lexicon_1.Lexicons()
          });
        }
        // method calls
        //
        call(serviceUri, methodNsid, params, data, opts) {
          return __async(this, null, function* () {
            return this.service(serviceUri).call(methodNsid, params, data, opts);
          });
        }
        service(serviceUri) {
          return new ServiceClient(this, serviceUri);
        }
        // schemas
        // =
        addLexicon(doc) {
          this.lex.add(doc);
        }
        addLexicons(docs) {
          for (const doc of docs) {
            this.addLexicon(doc);
          }
        }
        removeLexicon(uri) {
          this.lex.remove(uri);
        }
      };
      exports.Client = Client;
      var ServiceClient = class {
        constructor(baseClient, serviceUri) {
          Object.defineProperty(this, "baseClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
          });
          this.baseClient = baseClient;
          this.uri = typeof serviceUri === "string" ? new URL(serviceUri) : serviceUri;
        }
        setHeader(key, value) {
          this.headers[key] = value;
        }
        unsetHeader(key) {
          delete this.headers[key];
        }
        call(methodNsid, params, data, opts) {
          return __async(this, null, function* () {
            const def = this.baseClient.lex.getDefOrThrow(methodNsid);
            if (!def || def.type !== "query" && def.type !== "procedure") {
              throw new Error(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
            }
            const httpMethod = (0, util_1.getMethodSchemaHTTPMethod)(def);
            const httpUri = (0, util_1.constructMethodCallUri)(methodNsid, def, this.uri, params);
            const httpHeaders = (0, util_1.constructMethodCallHeaders)(def, data, {
              headers: __spreadValues(__spreadValues({}, this.headers), opts == null ? void 0 : opts.headers),
              encoding: opts == null ? void 0 : opts.encoding
            });
            const res = yield this.baseClient.fetch(httpUri, httpMethod, httpHeaders, data);
            const resCode = (0, util_1.httpResponseCodeToEnum)(res.status);
            if (resCode === types_1.ResponseType.Success) {
              try {
                this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body);
              } catch (e) {
                if (e instanceof lexicon_1.ValidationError) {
                  throw new types_1.XRPCInvalidResponseError(methodNsid, e, res.body);
                } else {
                  throw e;
                }
              }
              return new types_1.XRPCResponse(res.body, res.headers);
            } else {
              if (res.body && isErrorResponseBody(res.body)) {
                throw new types_1.XRPCError(resCode, res.body.error, res.body.message, res.headers);
              } else {
                throw new types_1.XRPCError(resCode);
              }
            }
          });
        }
      };
      exports.ServiceClient = ServiceClient;
      function defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody) {
        return __async(this, null, function* () {
          try {
            const headers = (0, util_1.normalizeHeaders)(httpHeaders);
            const reqInit = {
              method: httpMethod,
              headers,
              body: (0, util_1.encodeMethodCallBody)(headers, httpReqBody),
              duplex: "half"
            };
            const res = yield fetch(httpUri, reqInit);
            const resBody = yield res.arrayBuffer();
            return {
              status: res.status,
              headers: Object.fromEntries(res.headers.entries()),
              body: (0, util_1.httpResponseBodyParse)(res.headers.get("content-type"), resBody)
            };
          } catch (e) {
            throw new types_1.XRPCError(types_1.ResponseType.Unknown, String(e));
          }
        });
      }
      exports.defaultFetchHandler = defaultFetchHandler;
      function isErrorResponseBody(v) {
        return types_1.errorResponseBody.safeParse(v).success;
      }
    }
  });

  // node_modules/@atproto/xrpc/dist/index.js
  var require_dist5 = __commonJS({
    "node_modules/@atproto/xrpc/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_types5(), exports);
      __exportStar(require_client(), exports);
      var client_1 = require_client();
      var defaultInst = new client_1.Client();
      exports.default = defaultInst;
    }
  });

  // node_modules/@atproto/api/dist/client/lexicons.js
  var require_lexicons2 = __commonJS({
    "node_modules/@atproto/api/dist/client/lexicons.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ids = exports.lexicons = exports.schemas = exports.schemaDict = void 0;
      var lexicon_1 = require_dist4();
      exports.schemaDict = {
        ComAtprotoAdminDefs: {
          lexicon: 1,
          id: "com.atproto.admin.defs",
          defs: {
            statusAttr: {
              type: "object",
              required: ["applied"],
              properties: {
                applied: {
                  type: "boolean"
                },
                ref: {
                  type: "string"
                }
              }
            },
            accountView: {
              type: "object",
              required: ["did", "handle", "indexedAt"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invites: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                },
                invitesDisabled: {
                  type: "boolean"
                },
                emailConfirmedAt: {
                  type: "string",
                  format: "datetime"
                },
                inviteNote: {
                  type: "string"
                }
              }
            },
            repoRef: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            repoBlobRef: {
              type: "object",
              required: ["did", "cid"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                recordUri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        ComAtprotoAdminDeleteAccount: {
          lexicon: 1,
          id: "com.atproto.admin.deleteAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a user account as an administrator.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminDisableAccountInvites: {
          lexicon: 1,
          id: "com.atproto.admin.disableAccountInvites",
          defs: {
            main: {
              type: "procedure",
              description: "Disable an account from receiving new invite codes, but does not invalidate existing codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account"],
                  properties: {
                    account: {
                      type: "string",
                      format: "did"
                    },
                    note: {
                      type: "string",
                      description: "Optional reason for disabled invites."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminDisableInviteCodes: {
          lexicon: 1,
          id: "com.atproto.admin.disableInviteCodes",
          defs: {
            main: {
              type: "procedure",
              description: "Disable some set of codes and/or all codes associated with a set of users.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    accounts: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminEnableAccountInvites: {
          lexicon: 1,
          id: "com.atproto.admin.enableAccountInvites",
          defs: {
            main: {
              type: "procedure",
              description: "Re-enable an account's ability to receive invite codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account"],
                  properties: {
                    account: {
                      type: "string",
                      format: "did"
                    },
                    note: {
                      type: "string",
                      description: "Optional reason for enabled invites."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetAccountInfo: {
          lexicon: 1,
          id: "com.atproto.admin.getAccountInfo",
          defs: {
            main: {
              type: "query",
              description: "Get details about an account.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#accountView"
                }
              }
            }
          }
        },
        ComAtprotoAdminGetAccountInfos: {
          lexicon: 1,
          id: "com.atproto.admin.getAccountInfos",
          defs: {
            main: {
              type: "query",
              description: "Get details about some accounts.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["infos"],
                  properties: {
                    infos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#accountView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetInviteCodes: {
          lexicon: 1,
          id: "com.atproto.admin.getInviteCodes",
          defs: {
            main: {
              type: "query",
              description: "Get an admin view of invite codes.",
              parameters: {
                type: "params",
                properties: {
                  sort: {
                    type: "string",
                    knownValues: ["recent", "usage"],
                    default: "recent"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 500,
                    default: 100
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetSubjectStatus: {
          lexicon: 1,
          id: "com.atproto.admin.getSubjectStatus",
          defs: {
            main: {
              type: "query",
              description: "Get the service-specific admin status of a subject (account, record, or blob).",
              parameters: {
                type: "params",
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  blob: {
                    type: "string",
                    format: "cid"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminSendEmail: {
          lexicon: 1,
          id: "com.atproto.admin.sendEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Send email to a user's account email address.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["recipientDid", "content", "senderDid"],
                  properties: {
                    recipientDid: {
                      type: "string",
                      format: "did"
                    },
                    content: {
                      type: "string"
                    },
                    subject: {
                      type: "string"
                    },
                    senderDid: {
                      type: "string",
                      format: "did"
                    },
                    comment: {
                      type: "string",
                      description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["sent"],
                  properties: {
                    sent: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountEmail: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account", "email"],
                  properties: {
                    account: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo."
                    },
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountHandle: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's handle.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "handle"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountPassword: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Update the password for a user account as an administrator.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "password"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateSubjectStatus: {
          lexicon: 1,
          id: "com.atproto.admin.updateSubjectStatus",
          defs: {
            main: {
              type: "procedure",
              description: "Update the service-specific admin status of a subject (account, record, or blob).",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityGetRecommendedDidCredentials: {
          lexicon: 1,
          id: "com.atproto.identity.getRecommendedDidCredentials",
          defs: {
            main: {
              type: "query",
              description: "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    rotationKeys: {
                      description: "Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.",
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    alsoKnownAs: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    verificationMethods: {
                      type: "unknown"
                    },
                    services: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityRequestPlcOperationSignature: {
          lexicon: 1,
          id: "com.atproto.identity.requestPlcOperationSignature",
          defs: {
            main: {
              type: "procedure",
              description: "Request an email with a code to in order to request a signed PLC operation. Requires Auth."
            }
          }
        },
        ComAtprotoIdentityResolveHandle: {
          lexicon: 1,
          id: "com.atproto.identity.resolveHandle",
          defs: {
            main: {
              type: "query",
              description: "Resolves a handle (domain name) to a DID.",
              parameters: {
                type: "params",
                required: ["handle"],
                properties: {
                  handle: {
                    type: "string",
                    format: "handle",
                    description: "The handle to resolve."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentitySignPlcOperation: {
          lexicon: 1,
          id: "com.atproto.identity.signPlcOperation",
          defs: {
            main: {
              type: "procedure",
              description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    token: {
                      description: "A token received through com.atproto.identity.requestPlcOperationSignature",
                      type: "string"
                    },
                    rotationKeys: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    alsoKnownAs: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    verificationMethods: {
                      type: "unknown"
                    },
                    services: {
                      type: "unknown"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["operation"],
                  properties: {
                    operation: {
                      type: "unknown",
                      description: "A signed DID PLC operation."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentitySubmitPlcOperation: {
          lexicon: 1,
          id: "com.atproto.identity.submitPlcOperation",
          defs: {
            main: {
              type: "procedure",
              description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["operation"],
                  properties: {
                    operation: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityUpdateHandle: {
          lexicon: 1,
          id: "com.atproto.identity.updateHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle"],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle",
                      description: "The new handle."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoLabelDefs: {
          lexicon: 1,
          id: "com.atproto.label.defs",
          defs: {
            label: {
              type: "object",
              description: "Metadata tag on an atproto resource (eg, repo or record).",
              required: ["src", "uri", "val", "cts"],
              properties: {
                ver: {
                  type: "integer",
                  description: "The AT Protocol version of the label object."
                },
                src: {
                  type: "string",
                  format: "did",
                  description: "DID of the actor who created this label."
                },
                uri: {
                  type: "string",
                  format: "uri",
                  description: "AT URI of the record, repository (account), or other resource that this label applies to."
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
                },
                val: {
                  type: "string",
                  maxLength: 128,
                  description: "The short string name of the value or type of this label."
                },
                neg: {
                  type: "boolean",
                  description: "If true, this is a negation label, overwriting a previous label."
                },
                cts: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp when this label was created."
                },
                exp: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp at which this label expires (no longer applies)."
                },
                sig: {
                  type: "bytes",
                  description: "Signature of dag-cbor encoded label."
                }
              }
            },
            selfLabels: {
              type: "object",
              description: "Metadata tags on an atproto record, published by the author within the record.",
              required: ["values"],
              properties: {
                values: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#selfLabel"
                  },
                  maxLength: 10
                }
              }
            },
            selfLabel: {
              type: "object",
              description: "Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.",
              required: ["val"],
              properties: {
                val: {
                  type: "string",
                  maxLength: 128,
                  description: "The short string name of the value or type of this label."
                }
              }
            },
            labelValueDefinition: {
              type: "object",
              description: "Declares a label value and its expected interpertations and behaviors.",
              required: ["identifier", "severity", "blurs", "locales"],
              properties: {
                identifier: {
                  type: "string",
                  description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
                  maxLength: 100,
                  maxGraphemes: 100
                },
                severity: {
                  type: "string",
                  description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
                  knownValues: ["inform", "alert", "none"]
                },
                blurs: {
                  type: "string",
                  description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
                  knownValues: ["content", "media", "none"]
                },
                defaultSetting: {
                  type: "string",
                  description: "The default setting for this label.",
                  knownValues: ["ignore", "warn", "hide"],
                  default: "warn"
                },
                adultOnly: {
                  type: "boolean",
                  description: "Does the user need to have adult content enabled in order to configure this label?"
                },
                locales: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValueDefinitionStrings"
                  }
                }
              }
            },
            labelValueDefinitionStrings: {
              type: "object",
              description: "Strings which describe the label in the UI, localized into a specific language.",
              required: ["lang", "name", "description"],
              properties: {
                lang: {
                  type: "string",
                  description: "The code of the language these strings are written in.",
                  format: "language"
                },
                name: {
                  type: "string",
                  description: "A short human-readable name for the label.",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  description: "A longer description of what the label means and why it might be applied.",
                  maxGraphemes: 1e4,
                  maxLength: 1e5
                }
              }
            },
            labelValue: {
              type: "string",
              knownValues: [
                "!hide",
                "!no-promote",
                "!warn",
                "!no-unauthenticated",
                "dmca-violation",
                "doxxing",
                "porn",
                "sexual",
                "nudity",
                "nsfl",
                "gore"
              ]
            }
          }
        },
        ComAtprotoLabelQueryLabels: {
          lexicon: 1,
          id: "com.atproto.label.queryLabels",
          defs: {
            main: {
              type: "query",
              description: "Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.",
              parameters: {
                type: "params",
                required: ["uriPatterns"],
                properties: {
                  uriPatterns: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
                  },
                  sources: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    },
                    description: "Optional list of label sources (DIDs) to filter on."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 250,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["labels"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    labels: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.label.defs#label"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoLabelSubscribeLabels: {
          lexicon: 1,
          id: "com.atproto.label.subscribeLabels",
          defs: {
            main: {
              type: "subscription",
              description: "Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "integer",
                    description: "The last known event seq number to backfill from."
                  }
                }
              },
              message: {
                schema: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.label.subscribeLabels#labels",
                    "lex:com.atproto.label.subscribeLabels#info"
                  ]
                }
              },
              errors: [
                {
                  name: "FutureCursor"
                }
              ]
            },
            labels: {
              type: "object",
              required: ["seq", "labels"],
              properties: {
                seq: {
                  type: "integer"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            info: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  knownValues: ["OutdatedCursor"]
                },
                message: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoModerationCreateReport: {
          lexicon: 1,
          id: "com.atproto.moderation.createReport",
          defs: {
            main: {
              type: "procedure",
              description: "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["reasonType", "subject"],
                  properties: {
                    reasonType: {
                      type: "ref",
                      description: "Indicates the broad category of violation the report is for.",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                      type: "string",
                      description: "Additional context about the content and violation."
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "id",
                    "reasonType",
                    "subject",
                    "reportedBy",
                    "createdAt"
                  ],
                  properties: {
                    id: {
                      type: "integer"
                    },
                    reasonType: {
                      type: "ref",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                      type: "string",
                      maxGraphemes: 2e3,
                      maxLength: 2e4
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    },
                    reportedBy: {
                      type: "string",
                      format: "did"
                    },
                    createdAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoModerationDefs: {
          lexicon: 1,
          id: "com.atproto.moderation.defs",
          defs: {
            reasonType: {
              type: "string",
              knownValues: [
                "com.atproto.moderation.defs#reasonSpam",
                "com.atproto.moderation.defs#reasonViolation",
                "com.atproto.moderation.defs#reasonMisleading",
                "com.atproto.moderation.defs#reasonSexual",
                "com.atproto.moderation.defs#reasonRude",
                "com.atproto.moderation.defs#reasonOther",
                "com.atproto.moderation.defs#reasonAppeal"
              ]
            },
            reasonSpam: {
              type: "token",
              description: "Spam: frequent unwanted promotion, replies, mentions"
            },
            reasonViolation: {
              type: "token",
              description: "Direct violation of server rules, laws, terms of service"
            },
            reasonMisleading: {
              type: "token",
              description: "Misleading identity, affiliation, or content"
            },
            reasonSexual: {
              type: "token",
              description: "Unwanted or mislabeled sexual content"
            },
            reasonRude: {
              type: "token",
              description: "Rude, harassing, explicit, or otherwise unwelcoming behavior"
            },
            reasonOther: {
              type: "token",
              description: "Other: reports not falling under another report category"
            },
            reasonAppeal: {
              type: "token",
              description: "Appeal: appeal a previously taken moderation action"
            }
          }
        },
        ComAtprotoRepoApplyWrites: {
          lexicon: 1,
          id: "com.atproto.repo.applyWrites",
          defs: {
            main: {
              type: "procedure",
              description: "Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "writes"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data, for all operations."
                    },
                    writes: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:com.atproto.repo.applyWrites#create",
                          "lex:com.atproto.repo.applyWrites#update",
                          "lex:com.atproto.repo.applyWrites#delete"
                        ],
                        closed: true
                      }
                    },
                    swapCommit: {
                      type: "string",
                      description: "If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap",
                  description: "Indicates that the 'swapCommit' parameter did not match current commit."
                }
              ]
            },
            create: {
              type: "object",
              description: "Operation which creates a new record.",
              required: ["collection", "value"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string",
                  maxLength: 15
                },
                value: {
                  type: "unknown"
                }
              }
            },
            update: {
              type: "object",
              description: "Operation which updates an existing record.",
              required: ["collection", "rkey", "value"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string"
                },
                value: {
                  type: "unknown"
                }
              }
            },
            delete: {
              type: "object",
              description: "Operation which deletes an existing record.",
              required: ["collection", "rkey"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoRepoCreateRecord: {
          lexicon: 1,
          id: "com.atproto.repo.createRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Create a single new repository record. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "record"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The Record Key.",
                      maxLength: 15
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data."
                    },
                    record: {
                      type: "unknown",
                      description: "The record itself. Must contain a $type field."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "cid"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap",
                  description: "Indicates that 'swapCommit' didn't match current repo commit."
                }
              ]
            }
          }
        },
        ComAtprotoRepoDeleteRecord: {
          lexicon: 1,
          id: "com.atproto.repo.deleteRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "rkey"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The Record Key."
                    },
                    swapRecord: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous record by CID."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoDescribeRepo: {
          lexicon: 1,
          id: "com.atproto.repo.describeRepo",
          defs: {
            main: {
              type: "query",
              description: "Get information about an account and repository, including the list of collections. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "handle",
                    "did",
                    "didDoc",
                    "collections",
                    "handleIsCorrect"
                  ],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown",
                      description: "The complete DID document for this account."
                    },
                    collections: {
                      type: "array",
                      description: "List of all the collections (NSIDs) for which this repo contains at least one record.",
                      items: {
                        type: "string",
                        format: "nsid"
                      }
                    },
                    handleIsCorrect: {
                      type: "boolean",
                      description: "Indicates if handle is currently valid (resolves bi-directionally)"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoRepoGetRecord: {
          lexicon: 1,
          id: "com.atproto.repo.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get a single record from a repository. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo", "collection", "rkey"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record collection."
                  },
                  rkey: {
                    type: "string",
                    description: "The Record Key."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "The CID of the version of the record. If not specified, then return the most recent version."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "value"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    value: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoRepoImportRepo: {
          lexicon: 1,
          id: "com.atproto.repo.importRepo",
          defs: {
            main: {
              type: "procedure",
              description: "Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.",
              input: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoRepoListMissingBlobs: {
          lexicon: 1,
          id: "com.atproto.repo.listMissingBlobs",
          defs: {
            main: {
              type: "query",
              description: "Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blobs"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    blobs: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.listMissingBlobs#recordBlob"
                      }
                    }
                  }
                }
              }
            },
            recordBlob: {
              type: "object",
              required: ["cid", "recordUri"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                recordUri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        ComAtprotoRepoListRecords: {
          lexicon: 1,
          id: "com.atproto.repo.listRecords",
          defs: {
            main: {
              type: "query",
              description: "List a range of records in a repository, matching a specific collection. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo", "collection"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record type."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50,
                    description: "The number of records to return."
                  },
                  cursor: {
                    type: "string"
                  },
                  rkeyStart: {
                    type: "string",
                    description: "DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)"
                  },
                  rkeyEnd: {
                    type: "string",
                    description: "DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)"
                  },
                  reverse: {
                    type: "boolean",
                    description: "Flag to reverse the order of the returned records."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["records"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    records: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.listRecords#record"
                      }
                    }
                  }
                }
              }
            },
            record: {
              type: "object",
              required: ["uri", "cid", "value"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                }
              }
            }
          }
        },
        ComAtprotoRepoPutRecord: {
          lexicon: 1,
          id: "com.atproto.repo.putRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "rkey", "record"],
                  nullable: ["swapRecord"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The Record Key.",
                      maxLength: 15
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data."
                    },
                    record: {
                      type: "unknown",
                      description: "The record to write."
                    },
                    swapRecord: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation"
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "cid"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoStrongRef: {
          lexicon: 1,
          id: "com.atproto.repo.strongRef",
          description: "A URI with a content-hash fingerprint.",
          defs: {
            main: {
              type: "object",
              required: ["uri", "cid"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                }
              }
            }
          }
        },
        ComAtprotoRepoUploadBlob: {
          lexicon: 1,
          id: "com.atproto.repo.uploadBlob",
          defs: {
            main: {
              type: "procedure",
              description: "Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.",
              input: {
                encoding: "*/*"
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blob"],
                  properties: {
                    blob: {
                      type: "blob"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerActivateAccount: {
          lexicon: 1,
          id: "com.atproto.server.activateAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."
            }
          }
        },
        ComAtprotoServerCheckAccountStatus: {
          lexicon: 1,
          id: "com.atproto.server.checkAccountStatus",
          defs: {
            main: {
              type: "query",
              description: "Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "activated",
                    "validDid",
                    "repoCommit",
                    "repoRev",
                    "repoBlocks",
                    "indexedRecords",
                    "privateStateValues",
                    "expectedBlobs",
                    "importedBlobs"
                  ],
                  properties: {
                    activated: {
                      type: "boolean"
                    },
                    validDid: {
                      type: "boolean"
                    },
                    repoCommit: {
                      type: "string",
                      format: "cid"
                    },
                    repoRev: {
                      type: "string"
                    },
                    repoBlocks: {
                      type: "integer"
                    },
                    indexedRecords: {
                      type: "integer"
                    },
                    privateStateValues: {
                      type: "integer"
                    },
                    expectedBlobs: {
                      type: "integer"
                    },
                    importedBlobs: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerConfirmEmail: {
          lexicon: 1,
          id: "com.atproto.server.confirmEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Confirm an email using a token from com.atproto.server.requestEmailConfirmation.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email", "token"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    token: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountNotFound"
                },
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                },
                {
                  name: "InvalidEmail"
                }
              ]
            }
          }
        },
        ComAtprotoServerCreateAccount: {
          lexicon: 1,
          id: "com.atproto.server.createAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Create an account. Implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle",
                      description: "Requested handle for the account."
                    },
                    did: {
                      type: "string",
                      format: "did",
                      description: "Pre-existing atproto DID, being imported to a new account."
                    },
                    inviteCode: {
                      type: "string"
                    },
                    verificationCode: {
                      type: "string"
                    },
                    verificationPhone: {
                      type: "string"
                    },
                    password: {
                      type: "string",
                      description: "Initial account password. May need to meet instance-specific password strength requirements."
                    },
                    recoveryKey: {
                      type: "string",
                      description: "DID PLC rotation key (aka, recovery key) to be included in PLC creation operation."
                    },
                    plcOp: {
                      type: "unknown",
                      description: "A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  description: "Account login session returned on successful account creation.",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did",
                      description: "The DID of the new account."
                    },
                    didDoc: {
                      type: "unknown",
                      description: "Complete DID document."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidHandle"
                },
                {
                  name: "InvalidPassword"
                },
                {
                  name: "InvalidInviteCode"
                },
                {
                  name: "HandleNotAvailable"
                },
                {
                  name: "UnsupportedDomain"
                },
                {
                  name: "UnresolvableDid"
                },
                {
                  name: "IncompatibleDidDoc"
                }
              ]
            }
          }
        },
        ComAtprotoServerCreateAppPassword: {
          lexicon: 1,
          id: "com.atproto.server.createAppPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Create an App Password.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string",
                      description: "A short name for the App Password, to help distinguish them."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.server.createAppPassword#appPassword"
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            },
            appPassword: {
              type: "object",
              required: ["name", "password", "createdAt"],
              properties: {
                name: {
                  type: "string"
                },
                password: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerCreateInviteCode: {
          lexicon: 1,
          id: "com.atproto.server.createInviteCode",
          defs: {
            main: {
              type: "procedure",
              description: "Create an invite code.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["useCount"],
                  properties: {
                    useCount: {
                      type: "integer"
                    },
                    forAccount: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["code"],
                  properties: {
                    code: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateInviteCodes: {
          lexicon: 1,
          id: "com.atproto.server.createInviteCodes",
          defs: {
            main: {
              type: "procedure",
              description: "Create invite codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codeCount", "useCount"],
                  properties: {
                    codeCount: {
                      type: "integer",
                      default: 1
                    },
                    useCount: {
                      type: "integer"
                    },
                    forAccounts: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "did"
                      }
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.createInviteCodes#accountCodes"
                      }
                    }
                  }
                }
              }
            },
            accountCodes: {
              type: "object",
              required: ["account", "codes"],
              properties: {
                account: {
                  type: "string"
                },
                codes: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateSession: {
          lexicon: 1,
          id: "com.atproto.server.createSession",
          defs: {
            main: {
              type: "procedure",
              description: "Create an authentication session.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["identifier", "password"],
                  properties: {
                    identifier: {
                      type: "string",
                      description: "Handle or other identifier supported by the server for the authenticating user."
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown"
                    },
                    email: {
                      type: "string"
                    },
                    emailConfirmed: {
                      type: "boolean"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            }
          }
        },
        ComAtprotoServerDeactivateAccount: {
          lexicon: 1,
          id: "com.atproto.server.deactivateAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    deleteAfter: {
                      type: "string",
                      format: "datetime",
                      description: "A recommendation to server as to how long they should hold onto the deactivated account before deleting."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerDefs: {
          lexicon: 1,
          id: "com.atproto.server.defs",
          defs: {
            inviteCode: {
              type: "object",
              required: [
                "code",
                "available",
                "disabled",
                "forAccount",
                "createdBy",
                "createdAt",
                "uses"
              ],
              properties: {
                code: {
                  type: "string"
                },
                available: {
                  type: "integer"
                },
                disabled: {
                  type: "boolean"
                },
                forAccount: {
                  type: "string"
                },
                createdBy: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                uses: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCodeUse"
                  }
                }
              }
            },
            inviteCodeUse: {
              type: "object",
              required: ["usedBy", "usedAt"],
              properties: {
                usedBy: {
                  type: "string",
                  format: "did"
                },
                usedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerDeleteAccount: {
          lexicon: 1,
          id: "com.atproto.server.deleteAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "password", "token"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    password: {
                      type: "string"
                    },
                    token: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                }
              ]
            }
          }
        },
        ComAtprotoServerDeleteSession: {
          lexicon: 1,
          id: "com.atproto.server.deleteSession",
          defs: {
            main: {
              type: "procedure",
              description: "Delete the current session. Requires auth."
            }
          }
        },
        ComAtprotoServerDescribeServer: {
          lexicon: 1,
          id: "com.atproto.server.describeServer",
          defs: {
            main: {
              type: "query",
              description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "availableUserDomains"],
                  properties: {
                    inviteCodeRequired: {
                      type: "boolean",
                      description: "If true, an invite code must be supplied to create an account on this instance."
                    },
                    phoneVerificationRequired: {
                      type: "boolean",
                      description: "If true, a phone verification token must be supplied to create an account on this instance."
                    },
                    availableUserDomains: {
                      type: "array",
                      description: "List of domain suffixes that can be used in account handles.",
                      items: {
                        type: "string"
                      }
                    },
                    links: {
                      type: "ref",
                      description: "URLs of service policy documents.",
                      ref: "lex:com.atproto.server.describeServer#links"
                    },
                    contact: {
                      type: "ref",
                      description: "Contact information",
                      ref: "lex:com.atproto.server.describeServer#contact"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            },
            links: {
              type: "object",
              properties: {
                privacyPolicy: {
                  type: "string"
                },
                termsOfService: {
                  type: "string"
                }
              }
            },
            contact: {
              type: "object",
              properties: {
                email: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoServerGetAccountInviteCodes: {
          lexicon: 1,
          id: "com.atproto.server.getAccountInviteCodes",
          defs: {
            main: {
              type: "query",
              description: "Get all invite codes for the current account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  includeUsed: {
                    type: "boolean",
                    default: true
                  },
                  createAvailable: {
                    type: "boolean",
                    default: true,
                    description: "Controls whether any new 'earned' but not 'created' invites should be created."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "DuplicateCreate"
                }
              ]
            }
          }
        },
        ComAtprotoServerGetServiceAuth: {
          lexicon: 1,
          id: "com.atproto.server.getServiceAuth",
          defs: {
            main: {
              type: "query",
              description: "Get a signed token on behalf of the requesting DID for the requested service.",
              parameters: {
                type: "params",
                required: ["aud"],
                properties: {
                  aud: {
                    type: "string",
                    format: "did",
                    description: "The DID of the service that the token will be used to authenticate with"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["token"],
                  properties: {
                    token: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerGetSession: {
          lexicon: 1,
          id: "com.atproto.server.getSession",
          defs: {
            main: {
              type: "query",
              description: "Get information about the current auth session. Requires auth.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle", "did"],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    email: {
                      type: "string"
                    },
                    emailConfirmed: {
                      type: "boolean"
                    },
                    didDoc: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerListAppPasswords: {
          lexicon: 1,
          id: "com.atproto.server.listAppPasswords",
          defs: {
            main: {
              type: "query",
              description: "List all App Passwords.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["passwords"],
                  properties: {
                    passwords: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.listAppPasswords#appPassword"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            },
            appPassword: {
              type: "object",
              required: ["name", "createdAt"],
              properties: {
                name: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerRefreshSession: {
          lexicon: 1,
          id: "com.atproto.server.refreshSession",
          defs: {
            main: {
              type: "procedure",
              description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            }
          }
        },
        ComAtprotoServerRequestAccountDelete: {
          lexicon: 1,
          id: "com.atproto.server.requestAccountDelete",
          defs: {
            main: {
              type: "procedure",
              description: "Initiate a user account deletion via email."
            }
          }
        },
        ComAtprotoServerRequestEmailConfirmation: {
          lexicon: 1,
          id: "com.atproto.server.requestEmailConfirmation",
          defs: {
            main: {
              type: "procedure",
              description: "Request an email with a code to confirm ownership of email."
            }
          }
        },
        ComAtprotoServerRequestEmailUpdate: {
          lexicon: 1,
          id: "com.atproto.server.requestEmailUpdate",
          defs: {
            main: {
              type: "procedure",
              description: "Request a token in order to update email.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["tokenRequired"],
                  properties: {
                    tokenRequired: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerRequestPasswordReset: {
          lexicon: 1,
          id: "com.atproto.server.requestPasswordReset",
          defs: {
            main: {
              type: "procedure",
              description: "Initiate a user account password reset via email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email"],
                  properties: {
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerReserveSigningKey: {
          lexicon: 1,
          id: "com.atproto.server.reserveSigningKey",
          defs: {
            main: {
              type: "procedure",
              description: "Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    did: {
                      type: "string",
                      format: "did",
                      description: "The DID to reserve a key for."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["signingKey"],
                  properties: {
                    signingKey: {
                      type: "string",
                      description: "The public key for the reserved signing key, in did:key serialization."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerResetPassword: {
          lexicon: 1,
          id: "com.atproto.server.resetPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Reset a user account password using a token.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["token", "password"],
                  properties: {
                    token: {
                      type: "string"
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                }
              ]
            }
          }
        },
        ComAtprotoServerRevokeAppPassword: {
          lexicon: 1,
          id: "com.atproto.server.revokeAppPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Revoke an App Password by name.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerUpdateEmail: {
          lexicon: 1,
          id: "com.atproto.server.updateEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Update an account's email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    token: {
                      type: "string",
                      description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                },
                {
                  name: "TokenRequired"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetBlob: {
          lexicon: 1,
          id: "com.atproto.sync.getBlob",
          defs: {
            main: {
              type: "query",
              description: "Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did", "cid"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the account."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "The CID of the blob to fetch"
                  }
                }
              },
              output: {
                encoding: "*/*"
              }
            }
          }
        },
        ComAtprotoSyncGetBlocks: {
          lexicon: 1,
          id: "com.atproto.sync.getBlocks",
          defs: {
            main: {
              type: "query",
              description: "Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did", "cids"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  cids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetCheckout: {
          lexicon: 1,
          id: "com.atproto.sync.getCheckout",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED - please use com.atproto.sync.getRepo instead",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetHead: {
          lexicon: 1,
          id: "com.atproto.sync.getHead",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["root"],
                  properties: {
                    root: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "HeadNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetLatestCommit: {
          lexicon: 1,
          id: "com.atproto.sync.getLatestCommit",
          defs: {
            main: {
              type: "query",
              description: "Get the current commit CID & revision of the specified repo. Does not require auth.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["cid", "rev"],
                  properties: {
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    rev: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetRecord: {
          lexicon: 1,
          id: "com.atproto.sync.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.",
              parameters: {
                type: "params",
                required: ["did", "collection", "rkey"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid"
                  },
                  rkey: {
                    type: "string",
                    description: "Record Key"
                  },
                  commit: {
                    type: "string",
                    format: "cid",
                    description: "An optional past commit CID."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetRepo: {
          lexicon: 1,
          id: "com.atproto.sync.getRepo",
          defs: {
            main: {
              type: "query",
              description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  since: {
                    type: "string",
                    description: "The revision ('rev') of the repo to create a diff from."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncListBlobs: {
          lexicon: 1,
          id: "com.atproto.sync.listBlobs",
          defs: {
            main: {
              type: "query",
              description: "List blob CIDso for an account, since some repo revision. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  since: {
                    type: "string",
                    description: "Optional revision of the repo to list blobs since."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["cids"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    cids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "cid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncListRepos: {
          lexicon: 1,
          id: "com.atproto.sync.listRepos",
          defs: {
            main: {
              type: "query",
              description: "Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.sync.listRepos#repo"
                      }
                    }
                  }
                }
              }
            },
            repo: {
              type: "object",
              required: ["did", "head", "rev"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                head: {
                  type: "string",
                  format: "cid",
                  description: "Current repo commit CID"
                },
                rev: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoSyncNotifyOfUpdate: {
          lexicon: 1,
          id: "com.atproto.sync.notifyOfUpdate",
          defs: {
            main: {
              type: "procedure",
              description: "Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string",
                      description: "Hostname of the current service (usually a PDS) that is notifying of update."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncRequestCrawl: {
          lexicon: 1,
          id: "com.atproto.sync.requestCrawl",
          defs: {
            main: {
              type: "procedure",
              description: "Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string",
                      description: "Hostname of the current service (eg, PDS) that is requesting to be crawled."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncSubscribeRepos: {
          lexicon: 1,
          id: "com.atproto.sync.subscribeRepos",
          defs: {
            main: {
              type: "subscription",
              description: "Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "integer",
                    description: "The last known event seq number to backfill from."
                  }
                }
              },
              message: {
                schema: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.sync.subscribeRepos#commit",
                    "lex:com.atproto.sync.subscribeRepos#identity",
                    "lex:com.atproto.sync.subscribeRepos#handle",
                    "lex:com.atproto.sync.subscribeRepos#migrate",
                    "lex:com.atproto.sync.subscribeRepos#tombstone",
                    "lex:com.atproto.sync.subscribeRepos#info"
                  ]
                }
              },
              errors: [
                {
                  name: "FutureCursor"
                },
                {
                  name: "ConsumerTooSlow",
                  description: "If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection."
                }
              ]
            },
            commit: {
              type: "object",
              description: "Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.",
              required: [
                "seq",
                "rebase",
                "tooBig",
                "repo",
                "commit",
                "rev",
                "since",
                "blocks",
                "ops",
                "blobs",
                "time"
              ],
              nullable: ["prev", "since"],
              properties: {
                seq: {
                  type: "integer",
                  description: "The stream sequence number of this message."
                },
                rebase: {
                  type: "boolean",
                  description: "DEPRECATED -- unused"
                },
                tooBig: {
                  type: "boolean",
                  description: "Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data."
                },
                repo: {
                  type: "string",
                  format: "did",
                  description: "The repo this event comes from."
                },
                commit: {
                  type: "cid-link",
                  description: "Repo commit object CID."
                },
                prev: {
                  type: "cid-link",
                  description: "DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability."
                },
                rev: {
                  type: "string",
                  description: "The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event."
                },
                since: {
                  type: "string",
                  description: "The rev of the last emitted commit from this repo (if any)."
                },
                blocks: {
                  type: "bytes",
                  description: "CAR file containing relevant blocks, as a diff since the previous repo state.",
                  maxLength: 1e6
                },
                ops: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.sync.subscribeRepos#repoOp",
                    description: "List of repo mutation operations in this commit (eg, records created, updated, or deleted)."
                  },
                  maxLength: 200
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "cid-link",
                    description: "List of new blobs (by CID) referenced by records in this commit."
                  }
                },
                time: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp of when this message was originally broadcast."
                }
              }
            },
            identity: {
              type: "object",
              description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
              required: ["seq", "did", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            handle: {
              type: "object",
              description: "Represents an update of the account's handle, or transition to/from invalid state. NOTE: Will be deprecated in favor of #identity.",
              required: ["seq", "did", "handle", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            migrate: {
              type: "object",
              description: "Represents an account moving from one PDS instance to another. NOTE: not implemented; account migration uses #identity instead",
              required: ["seq", "did", "migrateTo", "time"],
              nullable: ["migrateTo"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                migrateTo: {
                  type: "string"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            tombstone: {
              type: "object",
              description: "Indicates that an account has been deleted. NOTE: may be deprecated in favor of #identity or a future #account event",
              required: ["seq", "did", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            info: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  knownValues: ["OutdatedCursor"]
                },
                message: {
                  type: "string"
                }
              }
            },
            repoOp: {
              type: "object",
              description: "A repo operation, ie a mutation of a single record.",
              required: ["action", "path", "cid"],
              nullable: ["cid"],
              properties: {
                action: {
                  type: "string",
                  knownValues: ["create", "update", "delete"]
                },
                path: {
                  type: "string"
                },
                cid: {
                  type: "cid-link",
                  description: "For creates and updates, the new record CID. For deletions, null."
                }
              }
            }
          }
        },
        ComAtprotoTempCheckSignupQueue: {
          lexicon: 1,
          id: "com.atproto.temp.checkSignupQueue",
          defs: {
            main: {
              type: "query",
              description: "Check accounts location in signup queue.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["activated"],
                  properties: {
                    activated: {
                      type: "boolean"
                    },
                    placeInQueue: {
                      type: "integer"
                    },
                    estimatedTimeMs: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoTempFetchLabels: {
          lexicon: 1,
          id: "com.atproto.temp.fetchLabels",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.",
              parameters: {
                type: "params",
                properties: {
                  since: {
                    type: "integer"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 250,
                    default: 50
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["labels"],
                  properties: {
                    labels: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.label.defs#label"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoTempRequestPhoneVerification: {
          lexicon: 1,
          id: "com.atproto.temp.requestPhoneVerification",
          defs: {
            main: {
              type: "procedure",
              description: "Request a verification code to be sent to the supplied phone number",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["phoneNumber"],
                  properties: {
                    phoneNumber: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorDefs: {
          lexicon: 1,
          id: "app.bsky.actor.defs",
          defs: {
            profileViewBasic: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                avatar: {
                  type: "string"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            profileView: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "string"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            profileViewDetailed: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "string"
                },
                banner: {
                  type: "string"
                },
                followersCount: {
                  type: "integer"
                },
                followsCount: {
                  type: "integer"
                },
                postsCount: {
                  type: "integer"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            profileAssociated: {
              type: "object",
              properties: {
                lists: {
                  type: "integer"
                },
                feedgens: {
                  type: "integer"
                },
                labeler: {
                  type: "boolean"
                }
              }
            },
            viewerState: {
              type: "object",
              description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
              properties: {
                muted: {
                  type: "boolean"
                },
                mutedByList: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                },
                blockedBy: {
                  type: "boolean"
                },
                blocking: {
                  type: "string",
                  format: "at-uri"
                },
                blockingByList: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                },
                following: {
                  type: "string",
                  format: "at-uri"
                },
                followedBy: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            preferences: {
              type: "array",
              items: {
                type: "union",
                refs: [
                  "lex:app.bsky.actor.defs#adultContentPref",
                  "lex:app.bsky.actor.defs#contentLabelPref",
                  "lex:app.bsky.actor.defs#savedFeedsPref",
                  "lex:app.bsky.actor.defs#personalDetailsPref",
                  "lex:app.bsky.actor.defs#feedViewPref",
                  "lex:app.bsky.actor.defs#threadViewPref",
                  "lex:app.bsky.actor.defs#interestsPref",
                  "lex:app.bsky.actor.defs#mutedWordsPref",
                  "lex:app.bsky.actor.defs#hiddenPostsPref"
                ]
              }
            },
            adultContentPref: {
              type: "object",
              required: ["enabled"],
              properties: {
                enabled: {
                  type: "boolean",
                  default: false
                }
              }
            },
            contentLabelPref: {
              type: "object",
              required: ["label", "visibility"],
              properties: {
                labelerDid: {
                  type: "string",
                  description: "Which labeler does this preference apply to? If undefined, applies globally.",
                  format: "did"
                },
                label: {
                  type: "string"
                },
                visibility: {
                  type: "string",
                  knownValues: ["ignore", "show", "warn", "hide"]
                }
              }
            },
            savedFeedsPref: {
              type: "object",
              required: ["pinned", "saved"],
              properties: {
                pinned: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                },
                saved: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                },
                timelineIndex: {
                  type: "integer"
                }
              }
            },
            personalDetailsPref: {
              type: "object",
              properties: {
                birthDate: {
                  type: "string",
                  format: "datetime",
                  description: "The birth date of account owner."
                }
              }
            },
            feedViewPref: {
              type: "object",
              required: ["feed"],
              properties: {
                feed: {
                  type: "string",
                  description: "The URI of the feed, or an identifier which describes the feed."
                },
                hideReplies: {
                  type: "boolean",
                  description: "Hide replies in the feed."
                },
                hideRepliesByUnfollowed: {
                  type: "boolean",
                  description: "Hide replies in the feed if they are not by followed users.",
                  default: true
                },
                hideRepliesByLikeCount: {
                  type: "integer",
                  description: "Hide replies in the feed if they do not have this number of likes."
                },
                hideReposts: {
                  type: "boolean",
                  description: "Hide reposts in the feed."
                },
                hideQuotePosts: {
                  type: "boolean",
                  description: "Hide quote posts in the feed."
                }
              }
            },
            threadViewPref: {
              type: "object",
              properties: {
                sort: {
                  type: "string",
                  description: "Sorting mode for threads.",
                  knownValues: ["oldest", "newest", "most-likes", "random"]
                },
                prioritizeFollowedUsers: {
                  type: "boolean",
                  description: "Show followed users at the top of all replies."
                }
              }
            },
            interestsPref: {
              type: "object",
              required: ["tags"],
              properties: {
                tags: {
                  type: "array",
                  maxLength: 100,
                  items: {
                    type: "string",
                    maxLength: 640,
                    maxGraphemes: 64
                  },
                  description: "A list of tags which describe the account owner's interests gathered during onboarding."
                }
              }
            },
            mutedWordTarget: {
              type: "string",
              knownValues: ["content", "tag"],
              maxLength: 640,
              maxGraphemes: 64
            },
            mutedWord: {
              type: "object",
              description: "A word that the account owner has muted.",
              required: ["value", "targets"],
              properties: {
                value: {
                  type: "string",
                  description: "The muted word itself.",
                  maxLength: 1e4,
                  maxGraphemes: 1e3
                },
                targets: {
                  type: "array",
                  description: "The intended targets of the muted word.",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#mutedWordTarget"
                  }
                }
              }
            },
            mutedWordsPref: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#mutedWord"
                  },
                  description: "A list of words the account owner has muted."
                }
              }
            },
            hiddenPostsPref: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  },
                  description: "A list of URIs of posts the account owner has hidden."
                }
              }
            },
            labelersPref: {
              type: "object",
              required: ["labelers"],
              properties: {
                labelers: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#labelerPrefItem"
                  }
                }
              }
            },
            labelerPrefItem: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        },
        AppBskyActorGetPreferences: {
          lexicon: 1,
          id: "app.bsky.actor.getPreferences",
          defs: {
            main: {
              type: "query",
              description: "Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.",
              parameters: {
                type: "params",
                properties: {}
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["preferences"],
                  properties: {
                    preferences: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#preferences"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorGetProfile: {
          lexicon: 1,
          id: "app.bsky.actor.getProfile",
          defs: {
            main: {
              type: "query",
              description: "Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "Handle or DID of account to fetch profile of."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                }
              }
            }
          }
        },
        AppBskyActorGetProfiles: {
          lexicon: 1,
          id: "app.bsky.actor.getProfiles",
          defs: {
            main: {
              type: "query",
              description: "Get detailed profile views of multiple actors.",
              parameters: {
                type: "params",
                required: ["actors"],
                properties: {
                  actors: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-identifier"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["profiles"],
                  properties: {
                    profiles: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorGetSuggestions: {
          lexicon: 1,
          id: "app.bsky.actor.getSuggestions",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorProfile: {
          lexicon: 1,
          id: "app.bsky.actor.profile",
          defs: {
            main: {
              type: "record",
              description: "A declaration of a Bluesky account profile.",
              key: "literal:self",
              record: {
                type: "object",
                properties: {
                  displayName: {
                    type: "string",
                    maxGraphemes: 64,
                    maxLength: 640
                  },
                  description: {
                    type: "string",
                    description: "Free-form profile description text.",
                    maxGraphemes: 256,
                    maxLength: 2560
                  },
                  avatar: {
                    type: "blob",
                    description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  banner: {
                    type: "blob",
                    description: "Larger horizontal image to display behind profile view.",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values, specific to the Bluesky application, on the overall account.",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  }
                }
              }
            }
          }
        },
        AppBskyActorPutPreferences: {
          lexicon: 1,
          id: "app.bsky.actor.putPreferences",
          defs: {
            main: {
              type: "procedure",
              description: "Set the private preferences attached to the account.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["preferences"],
                  properties: {
                    preferences: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#preferences"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorSearchActors: {
          lexicon: 1,
          id: "app.bsky.actor.searchActors",
          defs: {
            main: {
              type: "query",
              description: "Find actors (profiles) matching search criteria. Does not require auth.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead."
                  },
                  q: {
                    type: "string",
                    description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorSearchActorsTypeahead: {
          lexicon: 1,
          id: "app.bsky.actor.searchActorsTypeahead",
          defs: {
            main: {
              type: "query",
              description: "Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead."
                  },
                  q: {
                    type: "string",
                    description: "Search query prefix; not a full query string."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewBasic"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyEmbedExternal: {
          lexicon: 1,
          id: "app.bsky.embed.external",
          defs: {
            main: {
              type: "object",
              description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
              required: ["external"],
              properties: {
                external: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.external#external"
                }
              }
            },
            external: {
              type: "object",
              required: ["uri", "title", "description"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                },
                title: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                thumb: {
                  type: "blob",
                  accept: ["image/*"],
                  maxSize: 1e6
                }
              }
            },
            view: {
              type: "object",
              required: ["external"],
              properties: {
                external: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.external#viewExternal"
                }
              }
            },
            viewExternal: {
              type: "object",
              required: ["uri", "title", "description"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                },
                title: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                thumb: {
                  type: "string"
                }
              }
            }
          }
        },
        AppBskyEmbedImages: {
          lexicon: 1,
          id: "app.bsky.embed.images",
          description: "A set of images embedded in a Bluesky record (eg, a post).",
          defs: {
            main: {
              type: "object",
              required: ["images"],
              properties: {
                images: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.images#image"
                  },
                  maxLength: 4
                }
              }
            },
            image: {
              type: "object",
              required: ["image", "alt"],
              properties: {
                image: {
                  type: "blob",
                  accept: ["image/*"],
                  maxSize: 1e6
                },
                alt: {
                  type: "string",
                  description: "Alt text description of the image, for accessibility."
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.images#aspectRatio"
                }
              }
            },
            aspectRatio: {
              type: "object",
              description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.",
              required: ["width", "height"],
              properties: {
                width: {
                  type: "integer",
                  minimum: 1
                },
                height: {
                  type: "integer",
                  minimum: 1
                }
              }
            },
            view: {
              type: "object",
              required: ["images"],
              properties: {
                images: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.images#viewImage"
                  },
                  maxLength: 4
                }
              }
            },
            viewImage: {
              type: "object",
              required: ["thumb", "fullsize", "alt"],
              properties: {
                thumb: {
                  type: "string",
                  description: "Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View."
                },
                fullsize: {
                  type: "string",
                  description: "Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View."
                },
                alt: {
                  type: "string",
                  description: "Alt text description of the image, for accessibility."
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.images#aspectRatio"
                }
              }
            }
          }
        },
        AppBskyEmbedRecord: {
          lexicon: 1,
          id: "app.bsky.embed.record",
          description: "A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.",
          defs: {
            main: {
              type: "object",
              required: ["record"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                }
              }
            },
            view: {
              type: "object",
              required: ["record"],
              properties: {
                record: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.record#viewRecord",
                    "lex:app.bsky.embed.record#viewNotFound",
                    "lex:app.bsky.embed.record#viewBlocked",
                    "lex:app.bsky.feed.defs#generatorView",
                    "lex:app.bsky.graph.defs#listView",
                    "lex:app.bsky.labeler.defs#labelerView"
                  ]
                }
              }
            },
            viewRecord: {
              type: "object",
              required: ["uri", "cid", "author", "value", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                value: {
                  type: "unknown",
                  description: "The record data itself."
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                embeds: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.embed.images#view",
                      "lex:app.bsky.embed.external#view",
                      "lex:app.bsky.embed.record#view",
                      "lex:app.bsky.embed.recordWithMedia#view"
                    ]
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            viewNotFound: {
              type: "object",
              required: ["uri", "notFound"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            viewBlocked: {
              type: "object",
              required: ["uri", "blocked", "author"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blocked: {
                  type: "boolean",
                  const: true
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#blockedAuthor"
                }
              }
            }
          }
        },
        AppBskyEmbedRecordWithMedia: {
          lexicon: 1,
          id: "app.bsky.embed.recordWithMedia",
          description: "A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.",
          defs: {
            main: {
              type: "object",
              required: ["record", "media"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.record"
                },
                media: {
                  type: "union",
                  refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.external"]
                }
              }
            },
            view: {
              type: "object",
              required: ["record", "media"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.record#view"
                },
                media: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.external#view"
                  ]
                }
              }
            }
          }
        },
        AppBskyFeedDefs: {
          lexicon: 1,
          id: "app.bsky.feed.defs",
          defs: {
            postView: {
              type: "object",
              required: ["uri", "cid", "author", "record", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                record: {
                  type: "unknown"
                },
                embed: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.external#view",
                    "lex:app.bsky.embed.record#view",
                    "lex:app.bsky.embed.recordWithMedia#view"
                  ]
                },
                replyCount: {
                  type: "integer"
                },
                repostCount: {
                  type: "integer"
                },
                likeCount: {
                  type: "integer"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                threadgate: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#threadgateView"
                }
              }
            },
            viewerState: {
              type: "object",
              description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
              properties: {
                repost: {
                  type: "string",
                  format: "at-uri"
                },
                like: {
                  type: "string",
                  format: "at-uri"
                },
                replyDisabled: {
                  type: "boolean"
                }
              }
            },
            feedViewPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#postView"
                },
                reply: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#replyRef"
                },
                reason: {
                  type: "union",
                  refs: ["lex:app.bsky.feed.defs#reasonRepost"]
                }
              }
            },
            replyRef: {
              type: "object",
              required: ["root", "parent"],
              properties: {
                root: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#postView",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                parent: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#postView",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                }
              }
            },
            reasonRepost: {
              type: "object",
              required: ["by", "indexedAt"],
              properties: {
                by: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            threadViewPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#postView"
                },
                parent: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#threadViewPost",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                replies: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.feed.defs#threadViewPost",
                      "lex:app.bsky.feed.defs#notFoundPost",
                      "lex:app.bsky.feed.defs#blockedPost"
                    ]
                  }
                }
              }
            },
            notFoundPost: {
              type: "object",
              required: ["uri", "notFound"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            blockedPost: {
              type: "object",
              required: ["uri", "blocked", "author"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blocked: {
                  type: "boolean",
                  const: true
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#blockedAuthor"
                }
              }
            },
            blockedAuthor: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                }
              }
            },
            generatorView: {
              type: "object",
              required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                displayName: {
                  type: "string"
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "string"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#generatorViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            generatorViewerState: {
              type: "object",
              properties: {
                like: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            skeletonFeedPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "string",
                  format: "at-uri"
                },
                reason: {
                  type: "union",
                  refs: ["lex:app.bsky.feed.defs#skeletonReasonRepost"]
                }
              }
            },
            skeletonReasonRepost: {
              type: "object",
              required: ["repost"],
              properties: {
                repost: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            threadgateView: {
              type: "object",
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                record: {
                  type: "unknown"
                },
                lists: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listViewBasic"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedDescribeFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.describeFeedGenerator",
          defs: {
            main: {
              type: "query",
              description: "Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "feeds"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.describeFeedGenerator#feed"
                      }
                    },
                    links: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.describeFeedGenerator#links"
                    }
                  }
                }
              }
            },
            feed: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            links: {
              type: "object",
              properties: {
                privacyPolicy: {
                  type: "string"
                },
                termsOfService: {
                  type: "string"
                }
              }
            }
          }
        },
        AppBskyFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.generator",
          defs: {
            main: {
              type: "record",
              description: "Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.",
              key: "any",
              record: {
                type: "object",
                required: ["did", "displayName", "createdAt"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  displayName: {
                    type: "string",
                    maxGraphemes: 24,
                    maxLength: 240
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetActorFeeds: {
          lexicon: 1,
          id: "app.bsky.feed.getActorFeeds",
          defs: {
            main: {
              type: "query",
              description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetActorLikes: {
          lexicon: 1,
          id: "app.bsky.feed.getActorLikes",
          defs: {
            main: {
              type: "query",
              description: "Get a list of posts liked by an actor. Does not require auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BlockedActor"
                },
                {
                  name: "BlockedByActor"
                }
              ]
            }
          }
        },
        AppBskyFeedGetAuthorFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getAuthorFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  filter: {
                    type: "string",
                    description: "Combinations of post/repost types to include in response.",
                    knownValues: [
                      "posts_with_replies",
                      "posts_no_replies",
                      "posts_with_media",
                      "posts_and_author_threads"
                    ],
                    default: "posts_with_replies"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BlockedActor"
                },
                {
                  name: "BlockedByActor"
                }
              ]
            }
          }
        },
        AppBskyFeedGetFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        },
        AppBskyFeedGetFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedGenerator",
          defs: {
            main: {
              type: "query",
              description: "Get information about a feed generator. Implemented by AppView.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri",
                    description: "AT-URI of the feed generator record."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["view", "isOnline", "isValid"],
                  properties: {
                    view: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#generatorView"
                    },
                    isOnline: {
                      type: "boolean",
                      description: "Indicates whether the feed generator service has been online recently, or else seems to be inactive."
                    },
                    isValid: {
                      type: "boolean",
                      description: "Indicates whether the feed generator service is compatible with the record declaration."
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetFeedGenerators: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedGenerators",
          defs: {
            main: {
              type: "query",
              description: "Get information about a list of feed generators.",
              parameters: {
                type: "params",
                required: ["feeds"],
                properties: {
                  feeds: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetFeedSkeleton: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference to feed generator record describing the specific feed being requested."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        },
        AppBskyFeedGetLikes: {
          lexicon: 1,
          id: "app.bsky.feed.getLikes",
          defs: {
            main: {
              type: "query",
              description: "Get like records which reference a subject (by AT-URI and CID).",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "AT-URI of the subject (eg, a post record)."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "CID of the subject record (aka, specific version of record), to filter likes."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "likes"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    likes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.getLikes#like"
                      }
                    }
                  }
                }
              }
            },
            like: {
              type: "object",
              required: ["indexedAt", "createdAt", "actor"],
              properties: {
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                actor: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                }
              }
            }
          }
        },
        AppBskyFeedGetListFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getListFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.",
              parameters: {
                type: "params",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the list record."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownList"
                }
              ]
            }
          }
        },
        AppBskyFeedGetPostThread: {
          lexicon: 1,
          id: "app.bsky.feed.getPostThread",
          defs: {
            main: {
              type: "query",
              description: "Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to post record."
                  },
                  depth: {
                    type: "integer",
                    description: "How many levels of reply depth should be included in response.",
                    default: 6,
                    minimum: 0,
                    maximum: 1e3
                  },
                  parentHeight: {
                    type: "integer",
                    description: "How many levels of parent (and grandparent, etc) post to include.",
                    default: 80,
                    minimum: 0,
                    maximum: 1e3
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["thread"],
                  properties: {
                    thread: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.feed.defs#threadViewPost",
                        "lex:app.bsky.feed.defs#notFoundPost",
                        "lex:app.bsky.feed.defs#blockedPost"
                      ]
                    }
                  }
                }
              },
              errors: [
                {
                  name: "NotFound"
                }
              ]
            }
          }
        },
        AppBskyFeedGetPosts: {
          lexicon: 1,
          id: "app.bsky.feed.getPosts",
          defs: {
            main: {
              type: "query",
              description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
              parameters: {
                type: "params",
                required: ["uris"],
                properties: {
                  uris: {
                    type: "array",
                    description: "List of post AT-URIs to return hydrated views for.",
                    items: {
                      type: "string",
                      format: "at-uri"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetRepostedBy: {
          lexicon: 1,
          id: "app.bsky.feed.getRepostedBy",
          defs: {
            main: {
              type: "query",
              description: "Get a list of reposts for a given post.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) of post record"
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "If supplied, filters to reposts of specific version (by CID) of the post record."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "repostedBy"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    repostedBy: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetSuggestedFeeds: {
          lexicon: 1,
          id: "app.bsky.feed.getSuggestedFeeds",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested feeds (feed generators) for the requesting account.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetTimeline: {
          lexicon: 1,
          id: "app.bsky.feed.getTimeline",
          defs: {
            main: {
              type: "query",
              description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
              parameters: {
                type: "params",
                properties: {
                  algorithm: {
                    type: "string",
                    description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedLike: {
          lexicon: 1,
          id: "app.bsky.feed.like",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a 'like' of a piece of subject content.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedPost: {
          lexicon: 1,
          id: "app.bsky.feed.post",
          defs: {
            main: {
              type: "record",
              description: "Record containing a Bluesky post.",
              key: "tid",
              record: {
                type: "object",
                required: ["text", "createdAt"],
                properties: {
                  text: {
                    type: "string",
                    maxLength: 3e3,
                    maxGraphemes: 300,
                    description: "The primary post content. May be an empty string, if there are embeds."
                  },
                  entities: {
                    type: "array",
                    description: "DEPRECATED: replaced by app.bsky.richtext.facet.",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.post#entity"
                    }
                  },
                  facets: {
                    type: "array",
                    description: "Annotations of text (mentions, URLs, hashtags, etc)",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  reply: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.post#replyRef"
                  },
                  embed: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.embed.images",
                      "lex:app.bsky.embed.external",
                      "lex:app.bsky.embed.record",
                      "lex:app.bsky.embed.recordWithMedia"
                    ]
                  },
                  langs: {
                    type: "array",
                    description: "Indicates human language of post primary text content.",
                    maxLength: 3,
                    items: {
                      type: "string",
                      format: "language"
                    }
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values for this post. Effectively content warnings.",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  tags: {
                    type: "array",
                    description: "Additional hashtags, in addition to any included in post text and facets.",
                    maxLength: 8,
                    items: {
                      type: "string",
                      maxLength: 640,
                      maxGraphemes: 64
                    }
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime",
                    description: "Client-declared timestamp when this post was originally created."
                  }
                }
              }
            },
            replyRef: {
              type: "object",
              required: ["root", "parent"],
              properties: {
                root: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                parent: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                }
              }
            },
            entity: {
              type: "object",
              description: "Deprecated: use facets instead.",
              required: ["index", "type", "value"],
              properties: {
                index: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.post#textSlice"
                },
                type: {
                  type: "string",
                  description: "Expected values are 'mention' and 'link'."
                },
                value: {
                  type: "string"
                }
              }
            },
            textSlice: {
              type: "object",
              description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.",
              required: ["start", "end"],
              properties: {
                start: {
                  type: "integer",
                  minimum: 0
                },
                end: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        },
        AppBskyFeedRepost: {
          lexicon: 1,
          id: "app.bsky.feed.repost",
          defs: {
            main: {
              description: "Record representing a 'repost' of an existing Bluesky post.",
              type: "record",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedSearchPosts: {
          lexicon: 1,
          id: "app.bsky.feed.searchPosts",
          defs: {
            main: {
              type: "query",
              description: "Find posts matching search criteria, returning views of those posts.",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        AppBskyFeedThreadgate: {
          lexicon: 1,
          id: "app.bsky.feed.threadgate",
          defs: {
            main: {
              type: "record",
              key: "tid",
              description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository..",
              record: {
                type: "object",
                required: ["post", "createdAt"],
                properties: {
                  post: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the post record."
                  },
                  allow: {
                    type: "array",
                    maxLength: 5,
                    items: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.feed.threadgate#mentionRule",
                        "lex:app.bsky.feed.threadgate#followingRule",
                        "lex:app.bsky.feed.threadgate#listRule"
                      ]
                    }
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            },
            mentionRule: {
              type: "object",
              description: "Allow replies from actors mentioned in your post.",
              properties: {}
            },
            followingRule: {
              type: "object",
              description: "Allow replies from actors you follow.",
              properties: {}
            },
            listRule: {
              type: "object",
              description: "Allow replies from actors on a list.",
              required: ["list"],
              properties: {
                list: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        AppBskyGraphBlock: {
          lexicon: 1,
          id: "app.bsky.graph.block",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did",
                    description: "DID of the account to be blocked."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphDefs: {
          lexicon: 1,
          id: "app.bsky.graph.defs",
          defs: {
            listViewBasic: {
              type: "object",
              required: ["uri", "cid", "name", "purpose"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1
                },
                purpose: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                avatar: {
                  type: "string"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listView: {
              type: "object",
              required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1
                },
                purpose: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "string"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listItemView: {
              type: "object",
              required: ["uri", "subject"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                subject: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                }
              }
            },
            listPurpose: {
              type: "string",
              knownValues: [
                "app.bsky.graph.defs#modlist",
                "app.bsky.graph.defs#curatelist"
              ]
            },
            modlist: {
              type: "token",
              description: "A list of actors to apply an aggregate moderation action (mute/block) on."
            },
            curatelist: {
              type: "token",
              description: "A list of actors used for curation purposes such as list feeds or interaction gating."
            },
            listViewerState: {
              type: "object",
              properties: {
                muted: {
                  type: "boolean"
                },
                blocked: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            notFoundActor: {
              type: "object",
              description: "indicates that a handle or DID could not be resolved",
              required: ["actor", "notFound"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            relationship: {
              type: "object",
              description: "lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                following: {
                  type: "string",
                  format: "at-uri",
                  description: "if the actor follows this DID, this is the AT-URI of the follow record"
                },
                followedBy: {
                  type: "string",
                  format: "at-uri",
                  description: "if the actor is followed by this DID, contains the AT-URI of the follow record"
                }
              }
            }
          }
        },
        AppBskyGraphFollow: {
          lexicon: 1,
          id: "app.bsky.graph.follow",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetBlocks: {
          lexicon: 1,
          id: "app.bsky.graph.getBlocks",
          defs: {
            main: {
              type: "query",
              description: "Enumerates which accounts the requesting account is currently blocking. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blocks"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    blocks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetFollowers: {
          lexicon: 1,
          id: "app.bsky.graph.getFollowers",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts which follow a specified account (actor).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "followers"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    followers: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetFollows: {
          lexicon: 1,
          id: "app.bsky.graph.getFollows",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts which a specified account (actor) follows.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "follows"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    follows: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetList: {
          lexicon: 1,
          id: "app.bsky.graph.getList",
          defs: {
            main: {
              type: "query",
              description: "Gets a 'view' (with additional context) of a specified list.",
              parameters: {
                type: "params",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) of the list record to hydrate."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list", "items"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    list: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#listView"
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listItemView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetListBlocks: {
          lexicon: 1,
          id: "app.bsky.graph.getListBlocks",
          defs: {
            main: {
              type: "query",
              description: "Get mod lists that the requesting account (actor) is blocking. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetListMutes: {
          lexicon: 1,
          id: "app.bsky.graph.getListMutes",
          defs: {
            main: {
              type: "query",
              description: "Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetLists: {
          lexicon: 1,
          id: "app.bsky.graph.getLists",
          defs: {
            main: {
              type: "query",
              description: "Enumerates the lists created by a specified account (actor).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "The account (actor) to enumerate lists from."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetMutes: {
          lexicon: 1,
          id: "app.bsky.graph.getMutes",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["mutes"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    mutes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetRelationships: {
          lexicon: 1,
          id: "app.bsky.graph.getRelationships",
          defs: {
            main: {
              type: "query",
              description: "Enumerates public relationships between one account, and a list of other accounts. Does not require auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "Primary account requesting relationships for."
                  },
                  others: {
                    type: "array",
                    description: "List of 'other' accounts to be related back to the primary.",
                    maxLength: 30,
                    items: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["relationships"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "did"
                    },
                    relationships: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:app.bsky.graph.defs#relationship",
                          "lex:app.bsky.graph.defs#notFoundActor"
                        ]
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ActorNotFound",
                  description: "the primary actor at-identifier could not be resolved"
                }
              ]
            }
          }
        },
        AppBskyGraphGetSuggestedFollowsByActor: {
          lexicon: 1,
          id: "app.bsky.graph.getSuggestedFollowsByActor",
          defs: {
            main: {
              type: "query",
              description: "Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["suggestions"],
                  properties: {
                    suggestions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphList: {
          lexicon: 1,
          id: "app.bsky.graph.list",
          defs: {
            main: {
              type: "record",
              description: "Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.",
              key: "tid",
              record: {
                type: "object",
                required: ["name", "purpose", "createdAt"],
                properties: {
                  purpose: {
                    type: "ref",
                    description: "Defines the purpose of the list (aka, moderation-oriented or curration-oriented)",
                    ref: "lex:app.bsky.graph.defs#listPurpose"
                  },
                  name: {
                    type: "string",
                    maxLength: 64,
                    minLength: 1,
                    description: "Display name for list; can not be empty."
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphListblock: {
          lexicon: 1,
          id: "app.bsky.graph.listblock",
          defs: {
            main: {
              type: "record",
              description: "Record representing a block relationship against an entire an entire list of accounts (actors).",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the mod list record."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphListitem: {
          lexicon: 1,
          id: "app.bsky.graph.listitem",
          defs: {
            main: {
              type: "record",
              description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "list", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did",
                    description: "The account which is included on the list."
                  },
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the list record (app.bsky.graph.list)."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteActor: {
          lexicon: 1,
          id: "app.bsky.graph.muteActor",
          defs: {
            main: {
              type: "procedure",
              description: "Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteActorList: {
          lexicon: 1,
          id: "app.bsky.graph.muteActorList",
          defs: {
            main: {
              type: "procedure",
              description: "Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list"],
                  properties: {
                    list: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteActor: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteActor",
          defs: {
            main: {
              type: "procedure",
              description: "Unmutes the specified account. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteActorList: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteActorList",
          defs: {
            main: {
              type: "procedure",
              description: "Unmutes the specified list of accounts. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list"],
                  properties: {
                    list: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerDefs: {
          lexicon: 1,
          id: "app.bsky.labeler.defs",
          defs: {
            labelerView: {
              type: "object",
              required: ["uri", "cid", "creator", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            labelerViewDetailed: {
              type: "object",
              required: ["uri", "cid", "creator", "policies", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                policies: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerPolicies"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            labelerViewerState: {
              type: "object",
              properties: {
                like: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            labelerPolicies: {
              type: "object",
              required: ["labelValues"],
              properties: {
                labelValues: {
                  type: "array",
                  description: "The label values which this labeler publishes. May include global or custom labels.",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValue"
                  }
                },
                labelValueDefinitions: {
                  type: "array",
                  description: "Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValueDefinition"
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerGetServices: {
          lexicon: 1,
          id: "app.bsky.labeler.getServices",
          defs: {
            main: {
              type: "query",
              description: "Get information about a list of labeler services.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  },
                  detailed: {
                    type: "boolean",
                    default: false
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["views"],
                  properties: {
                    views: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:app.bsky.labeler.defs#labelerView",
                          "lex:app.bsky.labeler.defs#labelerViewDetailed"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerService: {
          lexicon: 1,
          id: "app.bsky.labeler.service",
          defs: {
            main: {
              type: "record",
              description: "A declaration of the existence of labeler service.",
              key: "literal:self",
              record: {
                type: "object",
                required: ["policies", "createdAt"],
                properties: {
                  policies: {
                    type: "ref",
                    ref: "lex:app.bsky.labeler.defs#labelerPolicies"
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationGetUnreadCount: {
          lexicon: 1,
          id: "app.bsky.notification.getUnreadCount",
          defs: {
            main: {
              type: "query",
              description: "Count the number of unread notifications for the requesting account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["count"],
                  properties: {
                    count: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationListNotifications: {
          lexicon: 1,
          id: "app.bsky.notification.listNotifications",
          defs: {
            main: {
              type: "query",
              description: "Enumerate notifications for the requesting account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["notifications"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    notifications: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.notification.listNotifications#notification"
                      }
                    },
                    seenAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            },
            notification: {
              type: "object",
              required: [
                "uri",
                "cid",
                "author",
                "reason",
                "record",
                "isRead",
                "indexedAt"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                reason: {
                  type: "string",
                  description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.",
                  knownValues: [
                    "like",
                    "repost",
                    "follow",
                    "mention",
                    "reply",
                    "quote"
                  ]
                },
                reasonSubject: {
                  type: "string",
                  format: "at-uri"
                },
                record: {
                  type: "unknown"
                },
                isRead: {
                  type: "boolean"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationRegisterPush: {
          lexicon: 1,
          id: "app.bsky.notification.registerPush",
          defs: {
            main: {
              type: "procedure",
              description: "Register to receive push notifications, via a specified service, for the requesting account. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["serviceDid", "token", "platform", "appId"],
                  properties: {
                    serviceDid: {
                      type: "string",
                      format: "did"
                    },
                    token: {
                      type: "string"
                    },
                    platform: {
                      type: "string",
                      knownValues: ["ios", "android", "web"]
                    },
                    appId: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationUpdateSeen: {
          lexicon: 1,
          id: "app.bsky.notification.updateSeen",
          defs: {
            main: {
              type: "procedure",
              description: "Notify server that the requesting account has seen notifications. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["seenAt"],
                  properties: {
                    seenAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyRichtextFacet: {
          lexicon: 1,
          id: "app.bsky.richtext.facet",
          defs: {
            main: {
              type: "object",
              description: "Annotation of a sub-string within rich text.",
              required: ["index", "features"],
              properties: {
                index: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet#byteSlice"
                },
                features: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.richtext.facet#mention",
                      "lex:app.bsky.richtext.facet#link",
                      "lex:app.bsky.richtext.facet#tag"
                    ]
                  }
                }
              }
            },
            mention: {
              type: "object",
              description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            link: {
              type: "object",
              description: "Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                }
              }
            },
            tag: {
              type: "object",
              description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
              required: ["tag"],
              properties: {
                tag: {
                  type: "string",
                  maxLength: 640,
                  maxGraphemes: 64
                }
              }
            },
            byteSlice: {
              type: "object",
              description: "Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.",
              required: ["byteStart", "byteEnd"],
              properties: {
                byteStart: {
                  type: "integer",
                  minimum: 0
                },
                byteEnd: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        },
        AppBskyUnspeccedDefs: {
          lexicon: 1,
          id: "app.bsky.unspecced.defs",
          defs: {
            skeletonSearchPost: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            skeletonSearchActor: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetPopularFeedGenerators: {
          lexicon: 1,
          id: "app.bsky.unspecced.getPopularFeedGenerators",
          defs: {
            main: {
              type: "query",
              description: "An unspecced view of globally popular feed generators.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  query: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetTaggedSuggestions: {
          lexicon: 1,
          id: "app.bsky.unspecced.getTaggedSuggestions",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggestions (feeds and users) tagged with categories",
              parameters: {
                type: "params",
                properties: {}
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["suggestions"],
                  properties: {
                    suggestions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.getTaggedSuggestions#suggestion"
                      }
                    }
                  }
                }
              }
            },
            suggestion: {
              type: "object",
              required: ["tag", "subjectType", "subject"],
              properties: {
                tag: {
                  type: "string"
                },
                subjectType: {
                  type: "string",
                  knownValues: ["actor", "feed"]
                },
                subject: {
                  type: "string",
                  format: "uri"
                }
              }
            }
          }
        },
        AppBskyUnspeccedSearchActorsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.searchActorsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Backend Actors (profile) search, returns only skeleton.",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax."
                  },
                  typeahead: {
                    type: "boolean",
                    description: "If true, acts as fast/simple 'typeahead' query."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        AppBskyUnspeccedSearchPostsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.searchPostsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Backend Posts search, returns only skeleton",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonSearchPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        ToolsOzoneCommunicationCreateTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.createTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to create a new, re-usable communication (email for now) template.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "contentMarkdown", "name"],
                  properties: {
                    name: {
                      type: "string",
                      description: "Name of the template."
                    },
                    contentMarkdown: {
                      type: "string",
                      description: "Content of the template, markdown supported, can contain variable placeholders."
                    },
                    subject: {
                      type: "string",
                      description: "Subject of the message, used in emails."
                    },
                    createdBy: {
                      type: "string",
                      format: "did",
                      description: "DID of the user who is creating the template."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.communication.defs#templateView"
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationDefs: {
          lexicon: 1,
          id: "tools.ozone.communication.defs",
          defs: {
            templateView: {
              type: "object",
              required: [
                "id",
                "name",
                "contentMarkdown",
                "disabled",
                "lastUpdatedBy",
                "createdAt",
                "updatedAt"
              ],
              properties: {
                id: {
                  type: "string"
                },
                name: {
                  type: "string",
                  description: "Name of the template."
                },
                subject: {
                  type: "string",
                  description: "Content of the template, can contain markdown and variable placeholders."
                },
                contentMarkdown: {
                  type: "string",
                  description: "Subject of the message, used in emails."
                },
                disabled: {
                  type: "boolean"
                },
                lastUpdatedBy: {
                  type: "string",
                  format: "did",
                  description: "DID of the user who last updated the template."
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationDeleteTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.deleteTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a communication template.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["id"],
                  properties: {
                    id: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationListTemplates: {
          lexicon: 1,
          id: "tools.ozone.communication.listTemplates",
          defs: {
            main: {
              type: "query",
              description: "Get list of all communication templates.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["communicationTemplates"],
                  properties: {
                    communicationTemplates: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.communication.defs#templateView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationUpdateTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.updateTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["id"],
                  properties: {
                    id: {
                      type: "string",
                      description: "ID of the template to be updated."
                    },
                    name: {
                      type: "string",
                      description: "Name of the template."
                    },
                    contentMarkdown: {
                      type: "string",
                      description: "Content of the template, markdown supported, can contain variable placeholders."
                    },
                    subject: {
                      type: "string",
                      description: "Subject of the message, used in emails."
                    },
                    updatedBy: {
                      type: "string",
                      format: "did",
                      description: "DID of the user who is updating the template."
                    },
                    disabled: {
                      type: "boolean"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.communication.defs#templateView"
                }
              }
            }
          }
        },
        ToolsOzoneModerationDefs: {
          lexicon: 1,
          id: "tools.ozone.moderation.defs",
          defs: {
            modEventView: {
              type: "object",
              required: [
                "id",
                "event",
                "subject",
                "subjectBlobCids",
                "createdBy",
                "createdAt"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                event: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#modEventTakedown",
                    "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                    "lex:tools.ozone.moderation.defs#modEventComment",
                    "lex:tools.ozone.moderation.defs#modEventReport",
                    "lex:tools.ozone.moderation.defs#modEventLabel",
                    "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                    "lex:tools.ozone.moderation.defs#modEventEscalate",
                    "lex:tools.ozone.moderation.defs#modEventMute",
                    "lex:tools.ozone.moderation.defs#modEventEmail",
                    "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                    "lex:tools.ozone.moderation.defs#modEventDivert"
                  ]
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                subjectBlobCids: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                creatorHandle: {
                  type: "string"
                },
                subjectHandle: {
                  type: "string"
                }
              }
            },
            modEventViewDetail: {
              type: "object",
              required: [
                "id",
                "event",
                "subject",
                "subjectBlobs",
                "createdBy",
                "createdAt"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                event: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#modEventTakedown",
                    "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                    "lex:tools.ozone.moderation.defs#modEventComment",
                    "lex:tools.ozone.moderation.defs#modEventReport",
                    "lex:tools.ozone.moderation.defs#modEventLabel",
                    "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                    "lex:tools.ozone.moderation.defs#modEventEscalate",
                    "lex:tools.ozone.moderation.defs#modEventMute",
                    "lex:tools.ozone.moderation.defs#modEventEmail",
                    "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                    "lex:tools.ozone.moderation.defs#modEventDivert"
                  ]
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#repoView",
                    "lex:tools.ozone.moderation.defs#repoViewNotFound",
                    "lex:tools.ozone.moderation.defs#recordView",
                    "lex:tools.ozone.moderation.defs#recordViewNotFound"
                  ]
                },
                subjectBlobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#blobView"
                  }
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            subjectStatusView: {
              type: "object",
              required: ["id", "subject", "createdAt", "updatedAt", "reviewState"],
              properties: {
                id: {
                  type: "integer"
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                subjectBlobCids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                },
                subjectRepoHandle: {
                  type: "string"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing when the last update was made to the moderation status of the subject"
                },
                createdAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing the first moderation status impacting event was emitted on the subject"
                },
                reviewState: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectReviewState"
                },
                comment: {
                  type: "string",
                  description: "Sticky comment on the subject."
                },
                muteUntil: {
                  type: "string",
                  format: "datetime"
                },
                lastReviewedBy: {
                  type: "string",
                  format: "did"
                },
                lastReviewedAt: {
                  type: "string",
                  format: "datetime"
                },
                lastReportedAt: {
                  type: "string",
                  format: "datetime"
                },
                lastAppealedAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing when the author of the subject appealed a moderation action"
                },
                takendown: {
                  type: "boolean"
                },
                appealed: {
                  type: "boolean",
                  description: "True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators."
                },
                suspendUntil: {
                  type: "string",
                  format: "datetime"
                },
                tags: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            },
            subjectReviewState: {
              type: "string",
              knownValues: [
                "lex:tools.ozone.moderation.defs#reviewOpen",
                "lex:tools.ozone.moderation.defs#reviewEscalated",
                "lex:tools.ozone.moderation.defs#reviewClosed",
                "lex:tools.ozone.moderation.defs#reviewNone"
              ]
            },
            reviewOpen: {
              type: "token",
              description: "Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator"
            },
            reviewEscalated: {
              type: "token",
              description: "Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator"
            },
            reviewClosed: {
              type: "token",
              description: "Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator"
            },
            reviewNone: {
              type: "token",
              description: "Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it"
            },
            modEventTakedown: {
              type: "object",
              description: "Take down a subject permanently or temporarily",
              properties: {
                comment: {
                  type: "string"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long the takedown should be in effect before automatically expiring."
                }
              }
            },
            modEventReverseTakedown: {
              type: "object",
              description: "Revert take down action on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe reasoning behind the reversal."
                }
              }
            },
            modEventResolveAppeal: {
              type: "object",
              description: "Resolve appeal on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe resolution."
                }
              }
            },
            modEventComment: {
              type: "object",
              description: "Add a comment to a subject",
              required: ["comment"],
              properties: {
                comment: {
                  type: "string"
                },
                sticky: {
                  type: "boolean",
                  description: "Make the comment persistent on the subject"
                }
              }
            },
            modEventReport: {
              type: "object",
              description: "Report a subject",
              required: ["reportType"],
              properties: {
                comment: {
                  type: "string"
                },
                reportType: {
                  type: "ref",
                  ref: "lex:com.atproto.moderation.defs#reasonType"
                }
              }
            },
            modEventLabel: {
              type: "object",
              description: "Apply/Negate labels on a subject",
              required: ["createLabelVals", "negateLabelVals"],
              properties: {
                comment: {
                  type: "string"
                },
                createLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                negateLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            },
            modEventAcknowledge: {
              type: "object",
              properties: {
                comment: {
                  type: "string"
                }
              }
            },
            modEventEscalate: {
              type: "object",
              properties: {
                comment: {
                  type: "string"
                }
              }
            },
            modEventMute: {
              type: "object",
              description: "Mute incoming reports on a subject",
              required: ["durationInHours"],
              properties: {
                comment: {
                  type: "string"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long the subject should remain muted."
                }
              }
            },
            modEventUnmute: {
              type: "object",
              description: "Unmute action on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe reasoning behind the reversal."
                }
              }
            },
            modEventEmail: {
              type: "object",
              description: "Keep a log of outgoing email to a user",
              required: ["subjectLine"],
              properties: {
                subjectLine: {
                  type: "string",
                  description: "The subject line of the email sent to the user."
                },
                content: {
                  type: "string",
                  description: "The content of the email sent to the user."
                },
                comment: {
                  type: "string",
                  description: "Additional comment about the outgoing comm."
                }
              }
            },
            modEventDivert: {
              type: "object",
              description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
              properties: {
                comment: {
                  type: "string"
                }
              }
            },
            modEventTag: {
              type: "object",
              description: "Add/Remove a tag on a subject",
              required: ["add", "remove"],
              properties: {
                add: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "Tags to be added to the subject. If already exists, won't be duplicated."
                },
                remove: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."
                },
                comment: {
                  type: "string",
                  description: "Additional comment about added/removed tags."
                }
              }
            },
            repoView: {
              type: "object",
              required: [
                "did",
                "handle",
                "relatedRecords",
                "indexedAt",
                "moderation"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invitesDisabled: {
                  type: "boolean"
                },
                inviteNote: {
                  type: "string"
                }
              }
            },
            repoViewDetail: {
              type: "object",
              required: [
                "did",
                "handle",
                "relatedRecords",
                "indexedAt",
                "moderation"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderationDetail"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invites: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                },
                invitesDisabled: {
                  type: "boolean"
                },
                inviteNote: {
                  type: "string"
                },
                emailConfirmedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            repoViewNotFound: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            recordView: {
              type: "object",
              required: [
                "uri",
                "cid",
                "value",
                "blobCids",
                "indexedAt",
                "moderation",
                "repo"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                },
                blobCids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                },
                repo: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoView"
                }
              }
            },
            recordViewDetail: {
              type: "object",
              required: [
                "uri",
                "cid",
                "value",
                "blobs",
                "indexedAt",
                "moderation",
                "repo"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#blobView"
                  }
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderationDetail"
                },
                repo: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoView"
                }
              }
            },
            recordViewNotFound: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            moderation: {
              type: "object",
              properties: {
                subjectStatus: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                }
              }
            },
            moderationDetail: {
              type: "object",
              properties: {
                subjectStatus: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                }
              }
            },
            blobView: {
              type: "object",
              required: ["cid", "mimeType", "size", "createdAt"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                mimeType: {
                  type: "string"
                },
                size: {
                  type: "integer"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                details: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#imageDetails",
                    "lex:tools.ozone.moderation.defs#videoDetails"
                  ]
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                }
              }
            },
            imageDetails: {
              type: "object",
              required: ["width", "height"],
              properties: {
                width: {
                  type: "integer"
                },
                height: {
                  type: "integer"
                }
              }
            },
            videoDetails: {
              type: "object",
              required: ["width", "height", "length"],
              properties: {
                width: {
                  type: "integer"
                },
                height: {
                  type: "integer"
                },
                length: {
                  type: "integer"
                }
              }
            }
          }
        },
        ToolsOzoneModerationEmitEvent: {
          lexicon: 1,
          id: "tools.ozone.moderation.emitEvent",
          defs: {
            main: {
              type: "procedure",
              description: "Take a moderation action on an actor.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["event", "subject", "createdBy"],
                  properties: {
                    event: {
                      type: "union",
                      refs: [
                        "lex:tools.ozone.moderation.defs#modEventTakedown",
                        "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                        "lex:tools.ozone.moderation.defs#modEventEscalate",
                        "lex:tools.ozone.moderation.defs#modEventComment",
                        "lex:tools.ozone.moderation.defs#modEventLabel",
                        "lex:tools.ozone.moderation.defs#modEventReport",
                        "lex:tools.ozone.moderation.defs#modEventMute",
                        "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                        "lex:tools.ozone.moderation.defs#modEventUnmute",
                        "lex:tools.ozone.moderation.defs#modEventEmail",
                        "lex:tools.ozone.moderation.defs#modEventTag"
                      ]
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    },
                    subjectBlobCids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "cid"
                      }
                    },
                    createdBy: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#modEventView"
                }
              },
              errors: [
                {
                  name: "SubjectHasAction"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationGetEvent: {
          lexicon: 1,
          id: "tools.ozone.moderation.getEvent",
          defs: {
            main: {
              type: "query",
              description: "Get details about a moderation event.",
              parameters: {
                type: "params",
                required: ["id"],
                properties: {
                  id: {
                    type: "integer"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#modEventViewDetail"
                }
              }
            }
          }
        },
        ToolsOzoneModerationGetRecord: {
          lexicon: 1,
          id: "tools.ozone.moderation.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get details about a record.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#recordViewDetail"
                }
              },
              errors: [
                {
                  name: "RecordNotFound"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationGetRepo: {
          lexicon: 1,
          id: "tools.ozone.moderation.getRepo",
          defs: {
            main: {
              type: "query",
              description: "Get details about a repository.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoViewDetail"
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationQueryEvents: {
          lexicon: 1,
          id: "tools.ozone.moderation.queryEvents",
          defs: {
            main: {
              type: "query",
              description: "List moderation events related to a subject.",
              parameters: {
                type: "params",
                properties: {
                  types: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned."
                  },
                  createdBy: {
                    type: "string",
                    format: "did"
                  },
                  sortDirection: {
                    type: "string",
                    default: "desc",
                    enum: ["asc", "desc"],
                    description: "Sort direction for the events. Defaults to descending order of created at timestamp."
                  },
                  createdAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Retrieve events created after a given timestamp"
                  },
                  createdBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Retrieve events created before a given timestamp"
                  },
                  subject: {
                    type: "string",
                    format: "uri"
                  },
                  includeAllUserRecords: {
                    type: "boolean",
                    default: false,
                    description: "If true, events on all record types (posts, lists, profile etc.) owned by the did are returned"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  hasComment: {
                    type: "boolean",
                    description: "If true, only events with comments are returned"
                  },
                  comment: {
                    type: "string",
                    description: "If specified, only events with comments containing the keyword are returned"
                  },
                  addedLabels: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these labels were added are returned"
                  },
                  removedLabels: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these labels were removed are returned"
                  },
                  addedTags: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these tags were added are returned"
                  },
                  removedTags: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these tags were removed are returned"
                  },
                  reportTypes: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["events"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    events: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#modEventView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationQueryStatuses: {
          lexicon: 1,
          id: "tools.ozone.moderation.queryStatuses",
          defs: {
            main: {
              type: "query",
              description: "View moderation statuses of subjects (record or repo).",
              parameters: {
                type: "params",
                properties: {
                  subject: {
                    type: "string",
                    format: "uri"
                  },
                  comment: {
                    type: "string",
                    description: "Search subjects by keyword from comments"
                  },
                  reportedAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reported after a given timestamp"
                  },
                  reportedBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reported before a given timestamp"
                  },
                  reviewedAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reviewed after a given timestamp"
                  },
                  reviewedBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reviewed before a given timestamp"
                  },
                  includeMuted: {
                    type: "boolean",
                    description: "By default, we don't include muted subjects in the results. Set this to true to include them."
                  },
                  reviewState: {
                    type: "string",
                    description: "Specify when fetching subjects in a certain state"
                  },
                  ignoreSubjects: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "uri"
                    }
                  },
                  lastReviewedBy: {
                    type: "string",
                    format: "did",
                    description: "Get all subject statuses that were reviewed by a specific moderator"
                  },
                  sortField: {
                    type: "string",
                    default: "lastReportedAt",
                    enum: ["lastReviewedAt", "lastReportedAt"]
                  },
                  sortDirection: {
                    type: "string",
                    default: "desc",
                    enum: ["asc", "desc"]
                  },
                  takendown: {
                    type: "boolean",
                    description: "Get subjects that were taken down"
                  },
                  appealed: {
                    type: "boolean",
                    description: "Get subjects in unresolved appealed status"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  tags: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  excludeTags: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subjectStatuses"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    subjectStatuses: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationSearchRepos: {
          lexicon: 1,
          id: "tools.ozone.moderation.searchRepos",
          defs: {
            main: {
              type: "query",
              description: "Find repositories based on a search term.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead"
                  },
                  q: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#repoView"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      exports.schemas = Object.values(exports.schemaDict);
      exports.lexicons = new lexicon_1.Lexicons(exports.schemas);
      exports.ids = {
        ComAtprotoAdminDefs: "com.atproto.admin.defs",
        ComAtprotoAdminDeleteAccount: "com.atproto.admin.deleteAccount",
        ComAtprotoAdminDisableAccountInvites: "com.atproto.admin.disableAccountInvites",
        ComAtprotoAdminDisableInviteCodes: "com.atproto.admin.disableInviteCodes",
        ComAtprotoAdminEnableAccountInvites: "com.atproto.admin.enableAccountInvites",
        ComAtprotoAdminGetAccountInfo: "com.atproto.admin.getAccountInfo",
        ComAtprotoAdminGetAccountInfos: "com.atproto.admin.getAccountInfos",
        ComAtprotoAdminGetInviteCodes: "com.atproto.admin.getInviteCodes",
        ComAtprotoAdminGetSubjectStatus: "com.atproto.admin.getSubjectStatus",
        ComAtprotoAdminSendEmail: "com.atproto.admin.sendEmail",
        ComAtprotoAdminUpdateAccountEmail: "com.atproto.admin.updateAccountEmail",
        ComAtprotoAdminUpdateAccountHandle: "com.atproto.admin.updateAccountHandle",
        ComAtprotoAdminUpdateAccountPassword: "com.atproto.admin.updateAccountPassword",
        ComAtprotoAdminUpdateSubjectStatus: "com.atproto.admin.updateSubjectStatus",
        ComAtprotoIdentityGetRecommendedDidCredentials: "com.atproto.identity.getRecommendedDidCredentials",
        ComAtprotoIdentityRequestPlcOperationSignature: "com.atproto.identity.requestPlcOperationSignature",
        ComAtprotoIdentityResolveHandle: "com.atproto.identity.resolveHandle",
        ComAtprotoIdentitySignPlcOperation: "com.atproto.identity.signPlcOperation",
        ComAtprotoIdentitySubmitPlcOperation: "com.atproto.identity.submitPlcOperation",
        ComAtprotoIdentityUpdateHandle: "com.atproto.identity.updateHandle",
        ComAtprotoLabelDefs: "com.atproto.label.defs",
        ComAtprotoLabelQueryLabels: "com.atproto.label.queryLabels",
        ComAtprotoLabelSubscribeLabels: "com.atproto.label.subscribeLabels",
        ComAtprotoModerationCreateReport: "com.atproto.moderation.createReport",
        ComAtprotoModerationDefs: "com.atproto.moderation.defs",
        ComAtprotoRepoApplyWrites: "com.atproto.repo.applyWrites",
        ComAtprotoRepoCreateRecord: "com.atproto.repo.createRecord",
        ComAtprotoRepoDeleteRecord: "com.atproto.repo.deleteRecord",
        ComAtprotoRepoDescribeRepo: "com.atproto.repo.describeRepo",
        ComAtprotoRepoGetRecord: "com.atproto.repo.getRecord",
        ComAtprotoRepoImportRepo: "com.atproto.repo.importRepo",
        ComAtprotoRepoListMissingBlobs: "com.atproto.repo.listMissingBlobs",
        ComAtprotoRepoListRecords: "com.atproto.repo.listRecords",
        ComAtprotoRepoPutRecord: "com.atproto.repo.putRecord",
        ComAtprotoRepoStrongRef: "com.atproto.repo.strongRef",
        ComAtprotoRepoUploadBlob: "com.atproto.repo.uploadBlob",
        ComAtprotoServerActivateAccount: "com.atproto.server.activateAccount",
        ComAtprotoServerCheckAccountStatus: "com.atproto.server.checkAccountStatus",
        ComAtprotoServerConfirmEmail: "com.atproto.server.confirmEmail",
        ComAtprotoServerCreateAccount: "com.atproto.server.createAccount",
        ComAtprotoServerCreateAppPassword: "com.atproto.server.createAppPassword",
        ComAtprotoServerCreateInviteCode: "com.atproto.server.createInviteCode",
        ComAtprotoServerCreateInviteCodes: "com.atproto.server.createInviteCodes",
        ComAtprotoServerCreateSession: "com.atproto.server.createSession",
        ComAtprotoServerDeactivateAccount: "com.atproto.server.deactivateAccount",
        ComAtprotoServerDefs: "com.atproto.server.defs",
        ComAtprotoServerDeleteAccount: "com.atproto.server.deleteAccount",
        ComAtprotoServerDeleteSession: "com.atproto.server.deleteSession",
        ComAtprotoServerDescribeServer: "com.atproto.server.describeServer",
        ComAtprotoServerGetAccountInviteCodes: "com.atproto.server.getAccountInviteCodes",
        ComAtprotoServerGetServiceAuth: "com.atproto.server.getServiceAuth",
        ComAtprotoServerGetSession: "com.atproto.server.getSession",
        ComAtprotoServerListAppPasswords: "com.atproto.server.listAppPasswords",
        ComAtprotoServerRefreshSession: "com.atproto.server.refreshSession",
        ComAtprotoServerRequestAccountDelete: "com.atproto.server.requestAccountDelete",
        ComAtprotoServerRequestEmailConfirmation: "com.atproto.server.requestEmailConfirmation",
        ComAtprotoServerRequestEmailUpdate: "com.atproto.server.requestEmailUpdate",
        ComAtprotoServerRequestPasswordReset: "com.atproto.server.requestPasswordReset",
        ComAtprotoServerReserveSigningKey: "com.atproto.server.reserveSigningKey",
        ComAtprotoServerResetPassword: "com.atproto.server.resetPassword",
        ComAtprotoServerRevokeAppPassword: "com.atproto.server.revokeAppPassword",
        ComAtprotoServerUpdateEmail: "com.atproto.server.updateEmail",
        ComAtprotoSyncGetBlob: "com.atproto.sync.getBlob",
        ComAtprotoSyncGetBlocks: "com.atproto.sync.getBlocks",
        ComAtprotoSyncGetCheckout: "com.atproto.sync.getCheckout",
        ComAtprotoSyncGetHead: "com.atproto.sync.getHead",
        ComAtprotoSyncGetLatestCommit: "com.atproto.sync.getLatestCommit",
        ComAtprotoSyncGetRecord: "com.atproto.sync.getRecord",
        ComAtprotoSyncGetRepo: "com.atproto.sync.getRepo",
        ComAtprotoSyncListBlobs: "com.atproto.sync.listBlobs",
        ComAtprotoSyncListRepos: "com.atproto.sync.listRepos",
        ComAtprotoSyncNotifyOfUpdate: "com.atproto.sync.notifyOfUpdate",
        ComAtprotoSyncRequestCrawl: "com.atproto.sync.requestCrawl",
        ComAtprotoSyncSubscribeRepos: "com.atproto.sync.subscribeRepos",
        ComAtprotoTempCheckSignupQueue: "com.atproto.temp.checkSignupQueue",
        ComAtprotoTempFetchLabels: "com.atproto.temp.fetchLabels",
        ComAtprotoTempRequestPhoneVerification: "com.atproto.temp.requestPhoneVerification",
        AppBskyActorDefs: "app.bsky.actor.defs",
        AppBskyActorGetPreferences: "app.bsky.actor.getPreferences",
        AppBskyActorGetProfile: "app.bsky.actor.getProfile",
        AppBskyActorGetProfiles: "app.bsky.actor.getProfiles",
        AppBskyActorGetSuggestions: "app.bsky.actor.getSuggestions",
        AppBskyActorProfile: "app.bsky.actor.profile",
        AppBskyActorPutPreferences: "app.bsky.actor.putPreferences",
        AppBskyActorSearchActors: "app.bsky.actor.searchActors",
        AppBskyActorSearchActorsTypeahead: "app.bsky.actor.searchActorsTypeahead",
        AppBskyEmbedExternal: "app.bsky.embed.external",
        AppBskyEmbedImages: "app.bsky.embed.images",
        AppBskyEmbedRecord: "app.bsky.embed.record",
        AppBskyEmbedRecordWithMedia: "app.bsky.embed.recordWithMedia",
        AppBskyFeedDefs: "app.bsky.feed.defs",
        AppBskyFeedDescribeFeedGenerator: "app.bsky.feed.describeFeedGenerator",
        AppBskyFeedGenerator: "app.bsky.feed.generator",
        AppBskyFeedGetActorFeeds: "app.bsky.feed.getActorFeeds",
        AppBskyFeedGetActorLikes: "app.bsky.feed.getActorLikes",
        AppBskyFeedGetAuthorFeed: "app.bsky.feed.getAuthorFeed",
        AppBskyFeedGetFeed: "app.bsky.feed.getFeed",
        AppBskyFeedGetFeedGenerator: "app.bsky.feed.getFeedGenerator",
        AppBskyFeedGetFeedGenerators: "app.bsky.feed.getFeedGenerators",
        AppBskyFeedGetFeedSkeleton: "app.bsky.feed.getFeedSkeleton",
        AppBskyFeedGetLikes: "app.bsky.feed.getLikes",
        AppBskyFeedGetListFeed: "app.bsky.feed.getListFeed",
        AppBskyFeedGetPostThread: "app.bsky.feed.getPostThread",
        AppBskyFeedGetPosts: "app.bsky.feed.getPosts",
        AppBskyFeedGetRepostedBy: "app.bsky.feed.getRepostedBy",
        AppBskyFeedGetSuggestedFeeds: "app.bsky.feed.getSuggestedFeeds",
        AppBskyFeedGetTimeline: "app.bsky.feed.getTimeline",
        AppBskyFeedLike: "app.bsky.feed.like",
        AppBskyFeedPost: "app.bsky.feed.post",
        AppBskyFeedRepost: "app.bsky.feed.repost",
        AppBskyFeedSearchPosts: "app.bsky.feed.searchPosts",
        AppBskyFeedThreadgate: "app.bsky.feed.threadgate",
        AppBskyGraphBlock: "app.bsky.graph.block",
        AppBskyGraphDefs: "app.bsky.graph.defs",
        AppBskyGraphFollow: "app.bsky.graph.follow",
        AppBskyGraphGetBlocks: "app.bsky.graph.getBlocks",
        AppBskyGraphGetFollowers: "app.bsky.graph.getFollowers",
        AppBskyGraphGetFollows: "app.bsky.graph.getFollows",
        AppBskyGraphGetList: "app.bsky.graph.getList",
        AppBskyGraphGetListBlocks: "app.bsky.graph.getListBlocks",
        AppBskyGraphGetListMutes: "app.bsky.graph.getListMutes",
        AppBskyGraphGetLists: "app.bsky.graph.getLists",
        AppBskyGraphGetMutes: "app.bsky.graph.getMutes",
        AppBskyGraphGetRelationships: "app.bsky.graph.getRelationships",
        AppBskyGraphGetSuggestedFollowsByActor: "app.bsky.graph.getSuggestedFollowsByActor",
        AppBskyGraphList: "app.bsky.graph.list",
        AppBskyGraphListblock: "app.bsky.graph.listblock",
        AppBskyGraphListitem: "app.bsky.graph.listitem",
        AppBskyGraphMuteActor: "app.bsky.graph.muteActor",
        AppBskyGraphMuteActorList: "app.bsky.graph.muteActorList",
        AppBskyGraphUnmuteActor: "app.bsky.graph.unmuteActor",
        AppBskyGraphUnmuteActorList: "app.bsky.graph.unmuteActorList",
        AppBskyLabelerDefs: "app.bsky.labeler.defs",
        AppBskyLabelerGetServices: "app.bsky.labeler.getServices",
        AppBskyLabelerService: "app.bsky.labeler.service",
        AppBskyNotificationGetUnreadCount: "app.bsky.notification.getUnreadCount",
        AppBskyNotificationListNotifications: "app.bsky.notification.listNotifications",
        AppBskyNotificationRegisterPush: "app.bsky.notification.registerPush",
        AppBskyNotificationUpdateSeen: "app.bsky.notification.updateSeen",
        AppBskyRichtextFacet: "app.bsky.richtext.facet",
        AppBskyUnspeccedDefs: "app.bsky.unspecced.defs",
        AppBskyUnspeccedGetPopularFeedGenerators: "app.bsky.unspecced.getPopularFeedGenerators",
        AppBskyUnspeccedGetTaggedSuggestions: "app.bsky.unspecced.getTaggedSuggestions",
        AppBskyUnspeccedSearchActorsSkeleton: "app.bsky.unspecced.searchActorsSkeleton",
        AppBskyUnspeccedSearchPostsSkeleton: "app.bsky.unspecced.searchPostsSkeleton",
        ToolsOzoneCommunicationCreateTemplate: "tools.ozone.communication.createTemplate",
        ToolsOzoneCommunicationDefs: "tools.ozone.communication.defs",
        ToolsOzoneCommunicationDeleteTemplate: "tools.ozone.communication.deleteTemplate",
        ToolsOzoneCommunicationListTemplates: "tools.ozone.communication.listTemplates",
        ToolsOzoneCommunicationUpdateTemplate: "tools.ozone.communication.updateTemplate",
        ToolsOzoneModerationDefs: "tools.ozone.moderation.defs",
        ToolsOzoneModerationEmitEvent: "tools.ozone.moderation.emitEvent",
        ToolsOzoneModerationGetEvent: "tools.ozone.moderation.getEvent",
        ToolsOzoneModerationGetRecord: "tools.ozone.moderation.getRecord",
        ToolsOzoneModerationGetRepo: "tools.ozone.moderation.getRepo",
        ToolsOzoneModerationQueryEvents: "tools.ozone.moderation.queryEvents",
        ToolsOzoneModerationQueryStatuses: "tools.ozone.moderation.queryStatuses",
        ToolsOzoneModerationSearchRepos: "tools.ozone.moderation.searchRepos"
      };
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js
  var require_deleteAccount = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js
  var require_disableAccountInvites = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js
  var require_disableInviteCodes = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js
  var require_enableAccountInvites = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js
  var require_getAccountInfo = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js
  var require_getAccountInfos = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js
  var require_getInviteCodes = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js
  var require_getSubjectStatus = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js
  var require_sendEmail = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js
  var require_updateAccountEmail = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js
  var require_updateAccountHandle = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js
  var require_updateAccountPassword = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js
  var require_updateSubjectStatus = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js
  var require_getRecommendedDidCredentials = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js
  var require_requestPlcOperationSignature = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js
  var require_resolveHandle = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js
  var require_signPlcOperation = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js
  var require_submitPlcOperation = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js
  var require_updateHandle = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js
  var require_queryLabels = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js
  var require_createReport = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/util.js
  var require_util6 = __commonJS({
    "node_modules/@atproto/api/dist/client/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasProp = exports.isObj = void 0;
      function isObj(v) {
        return typeof v === "object" && v !== null;
      }
      exports.isObj = isObj;
      function hasProp(data, prop) {
        return prop in data;
      }
      exports.hasProp = hasProp;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js
  var require_applyWrites = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateDelete = exports.isDelete = exports.validateUpdate = exports.isUpdate = exports.validateCreate = exports.isCreate = exports.toKnownErr = exports.InvalidSwapError = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isCreate(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.applyWrites#create";
      }
      exports.isCreate = isCreate;
      function validateCreate(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#create", v);
      }
      exports.validateCreate = validateCreate;
      function isUpdate(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.applyWrites#update";
      }
      exports.isUpdate = isUpdate;
      function validateUpdate(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#update", v);
      }
      exports.validateUpdate = validateUpdate;
      function isDelete(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.applyWrites#delete";
      }
      exports.isDelete = isDelete;
      function validateDelete(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#delete", v);
      }
      exports.validateDelete = validateDelete;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js
  var require_createRecord = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidSwapError = void 0;
      var xrpc_1 = require_dist5();
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js
  var require_deleteRecord = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidSwapError = void 0;
      var xrpc_1 = require_dist5();
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js
  var require_describeRepo = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js
  var require_getRecord = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js
  var require_importRepo = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js
  var require_listMissingBlobs = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecordBlob = exports.isRecordBlob = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isRecordBlob(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.listMissingBlobs#recordBlob";
      }
      exports.isRecordBlob = isRecordBlob;
      function validateRecordBlob(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.listMissingBlobs#recordBlob", v);
      }
      exports.validateRecordBlob = validateRecordBlob;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js
  var require_listRecords = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.listRecords#record";
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.listRecords#record", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js
  var require_putRecord = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidSwapError = void 0;
      var xrpc_1 = require_dist5();
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js
  var require_uploadBlob = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js
  var require_activateAccount = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js
  var require_checkAccountStatus = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js
  var require_confirmEmail = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidEmailError = exports.InvalidTokenError = exports.ExpiredTokenError = exports.AccountNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var AccountNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountNotFoundError = AccountNotFoundError;
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      var InvalidEmailError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidEmailError = InvalidEmailError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountNotFound")
            return new AccountNotFoundError(e);
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
          if (e.error === "InvalidEmail")
            return new InvalidEmailError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js
  var require_createAccount = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.IncompatibleDidDocError = exports.UnresolvableDidError = exports.UnsupportedDomainError = exports.HandleNotAvailableError = exports.InvalidInviteCodeError = exports.InvalidPasswordError = exports.InvalidHandleError = void 0;
      var xrpc_1 = require_dist5();
      var InvalidHandleError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidHandleError = InvalidHandleError;
      var InvalidPasswordError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidPasswordError = InvalidPasswordError;
      var InvalidInviteCodeError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidInviteCodeError = InvalidInviteCodeError;
      var HandleNotAvailableError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.HandleNotAvailableError = HandleNotAvailableError;
      var UnsupportedDomainError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnsupportedDomainError = UnsupportedDomainError;
      var UnresolvableDidError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnresolvableDidError = UnresolvableDidError;
      var IncompatibleDidDocError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.IncompatibleDidDocError = IncompatibleDidDocError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidHandle")
            return new InvalidHandleError(e);
          if (e.error === "InvalidPassword")
            return new InvalidPasswordError(e);
          if (e.error === "InvalidInviteCode")
            return new InvalidInviteCodeError(e);
          if (e.error === "HandleNotAvailable")
            return new HandleNotAvailableError(e);
          if (e.error === "UnsupportedDomain")
            return new UnsupportedDomainError(e);
          if (e.error === "UnresolvableDid")
            return new UnresolvableDidError(e);
          if (e.error === "IncompatibleDidDoc")
            return new IncompatibleDidDocError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js
  var require_createAppPassword = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAppPassword = exports.isAppPassword = exports.toKnownErr = exports.AccountTakedownError = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isAppPassword(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.createAppPassword#appPassword";
      }
      exports.isAppPassword = isAppPassword;
      function validateAppPassword(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.createAppPassword#appPassword", v);
      }
      exports.validateAppPassword = validateAppPassword;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js
  var require_createInviteCode = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js
  var require_createInviteCodes = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAccountCodes = exports.isAccountCodes = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isAccountCodes(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.createInviteCodes#accountCodes";
      }
      exports.isAccountCodes = isAccountCodes;
      function validateAccountCodes(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.createInviteCodes#accountCodes", v);
      }
      exports.validateAccountCodes = validateAccountCodes;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js
  var require_createSession = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.AccountTakedownError = void 0;
      var xrpc_1 = require_dist5();
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js
  var require_deactivateAccount = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js
  var require_deleteAccount2 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      var xrpc_1 = require_dist5();
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js
  var require_deleteSession = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js
  var require_describeServer = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateContact = exports.isContact = exports.validateLinks = exports.isLinks = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isLinks(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.describeServer#links";
      }
      exports.isLinks = isLinks;
      function validateLinks(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.describeServer#links", v);
      }
      exports.validateLinks = validateLinks;
      function isContact(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.describeServer#contact";
      }
      exports.isContact = isContact;
      function validateContact(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.describeServer#contact", v);
      }
      exports.validateContact = validateContact;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js
  var require_getAccountInviteCodes = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.DuplicateCreateError = void 0;
      var xrpc_1 = require_dist5();
      var DuplicateCreateError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.DuplicateCreateError = DuplicateCreateError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "DuplicateCreate")
            return new DuplicateCreateError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js
  var require_getServiceAuth = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js
  var require_getSession = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js
  var require_listAppPasswords = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAppPassword = exports.isAppPassword = exports.toKnownErr = exports.AccountTakedownError = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isAppPassword(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.listAppPasswords#appPassword";
      }
      exports.isAppPassword = isAppPassword;
      function validateAppPassword(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.listAppPasswords#appPassword", v);
      }
      exports.validateAppPassword = validateAppPassword;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js
  var require_refreshSession = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.AccountTakedownError = void 0;
      var xrpc_1 = require_dist5();
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js
  var require_requestAccountDelete = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js
  var require_requestEmailConfirmation = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js
  var require_requestEmailUpdate = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js
  var require_requestPasswordReset = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js
  var require_reserveSigningKey = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js
  var require_resetPassword = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      var xrpc_1 = require_dist5();
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js
  var require_revokeAppPassword = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js
  var require_updateEmail = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.TokenRequiredError = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      var xrpc_1 = require_dist5();
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      var TokenRequiredError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.TokenRequiredError = TokenRequiredError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
          if (e.error === "TokenRequired")
            return new TokenRequiredError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js
  var require_getBlob = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js
  var require_getBlocks = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js
  var require_getCheckout = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js
  var require_getHead = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.HeadNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var HeadNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.HeadNotFoundError = HeadNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "HeadNotFound")
            return new HeadNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js
  var require_getLatestCommit = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.RepoNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js
  var require_getRecord2 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js
  var require_getRepo = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js
  var require_listBlobs = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js
  var require_listRepos = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRepo = exports.isRepo = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isRepo(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.listRepos#repo";
      }
      exports.isRepo = isRepo;
      function validateRepo(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.listRepos#repo", v);
      }
      exports.validateRepo = validateRepo;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js
  var require_notifyOfUpdate = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js
  var require_requestCrawl = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js
  var require_checkSignupQueue = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js
  var require_fetchLabels = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js
  var require_requestPhoneVerification = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js
  var require_getPreferences = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js
  var require_getProfile = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js
  var require_getProfiles = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js
  var require_getSuggestions = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js
  var require_putPreferences = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js
  var require_searchActors = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js
  var require_searchActorsTypeahead = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js
  var require_describeFeedGenerator = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLinks = exports.isLinks = exports.validateFeed = exports.isFeed = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isFeed(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.describeFeedGenerator#feed";
      }
      exports.isFeed = isFeed;
      function validateFeed(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.describeFeedGenerator#feed", v);
      }
      exports.validateFeed = validateFeed;
      function isLinks(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.describeFeedGenerator#links";
      }
      exports.isLinks = isLinks;
      function validateLinks(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.describeFeedGenerator#links", v);
      }
      exports.validateLinks = validateLinks;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js
  var require_getActorFeeds = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js
  var require_getActorLikes = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BlockedByActorError = exports.BlockedActorError = void 0;
      var xrpc_1 = require_dist5();
      var BlockedActorError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BlockedActorError = BlockedActorError;
      var BlockedByActorError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BlockedByActorError = BlockedByActorError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BlockedActor")
            return new BlockedActorError(e);
          if (e.error === "BlockedByActor")
            return new BlockedByActorError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js
  var require_getAuthorFeed = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BlockedByActorError = exports.BlockedActorError = void 0;
      var xrpc_1 = require_dist5();
      var BlockedActorError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BlockedActorError = BlockedActorError;
      var BlockedByActorError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BlockedByActorError = BlockedByActorError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BlockedActor")
            return new BlockedActorError(e);
          if (e.error === "BlockedByActor")
            return new BlockedByActorError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js
  var require_getFeed = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.UnknownFeedError = void 0;
      var xrpc_1 = require_dist5();
      var UnknownFeedError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnknownFeedError = UnknownFeedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js
  var require_getFeedGenerator = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js
  var require_getFeedGenerators = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js
  var require_getFeedSkeleton = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.UnknownFeedError = void 0;
      var xrpc_1 = require_dist5();
      var UnknownFeedError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnknownFeedError = UnknownFeedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js
  var require_getLikes = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLike = exports.isLike = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isLike(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.getLikes#like";
      }
      exports.isLike = isLike;
      function validateLike(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.getLikes#like", v);
      }
      exports.validateLike = validateLike;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js
  var require_getListFeed = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.UnknownListError = void 0;
      var xrpc_1 = require_dist5();
      var UnknownListError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnknownListError = UnknownListError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownList")
            return new UnknownListError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js
  var require_getPostThread = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.NotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var NotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.NotFoundError = NotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "NotFound")
            return new NotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js
  var require_getPosts = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js
  var require_getRepostedBy = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js
  var require_getSuggestedFeeds = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js
  var require_getTimeline = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js
  var require_searchPosts = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BadQueryStringError = void 0;
      var xrpc_1 = require_dist5();
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js
  var require_getBlocks2 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js
  var require_getFollowers = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js
  var require_getFollows = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js
  var require_getList = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js
  var require_getListBlocks = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js
  var require_getListMutes = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js
  var require_getLists = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js
  var require_getMutes = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js
  var require_getRelationships = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.ActorNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var ActorNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ActorNotFoundError = ActorNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ActorNotFound")
            return new ActorNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js
  var require_getSuggestedFollowsByActor = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js
  var require_muteActor = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js
  var require_muteActorList = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js
  var require_unmuteActor = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js
  var require_unmuteActorList = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js
  var require_getServices = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js
  var require_getUnreadCount = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js
  var require_listNotifications = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateNotification = exports.isNotification = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isNotification(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.notification.listNotifications#notification";
      }
      exports.isNotification = isNotification;
      function validateNotification(v) {
        return lexicons_1.lexicons.validate("app.bsky.notification.listNotifications#notification", v);
      }
      exports.validateNotification = validateNotification;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js
  var require_registerPush = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js
  var require_updateSeen = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js
  var require_getPopularFeedGenerators = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js
  var require_getTaggedSuggestions = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateSuggestion = exports.isSuggestion = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isSuggestion(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.unspecced.getTaggedSuggestions#suggestion";
      }
      exports.isSuggestion = isSuggestion;
      function validateSuggestion(v) {
        return lexicons_1.lexicons.validate("app.bsky.unspecced.getTaggedSuggestions#suggestion", v);
      }
      exports.validateSuggestion = validateSuggestion;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js
  var require_searchActorsSkeleton = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BadQueryStringError = void 0;
      var xrpc_1 = require_dist5();
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js
  var require_searchPostsSkeleton = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BadQueryStringError = void 0;
      var xrpc_1 = require_dist5();
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js
  var require_createTemplate = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js
  var require_deleteTemplate = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js
  var require_listTemplates = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js
  var require_updateTemplate = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js
  var require_emitEvent = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.SubjectHasActionError = void 0;
      var xrpc_1 = require_dist5();
      var SubjectHasActionError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.SubjectHasActionError = SubjectHasActionError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "SubjectHasAction")
            return new SubjectHasActionError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js
  var require_getEvent = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js
  var require_getRecord3 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.RecordNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var RecordNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.RecordNotFoundError = RecordNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RecordNotFound")
            return new RecordNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js
  var require_getRepo2 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.RepoNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js
  var require_queryEvents = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js
  var require_queryStatuses = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js
  var require_searchRepos = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js
  var require_defs = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRepoBlobRef = exports.isRepoBlobRef = exports.validateRepoRef = exports.isRepoRef = exports.validateAccountView = exports.isAccountView = exports.validateStatusAttr = exports.isStatusAttr = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isStatusAttr(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.admin.defs#statusAttr";
      }
      exports.isStatusAttr = isStatusAttr;
      function validateStatusAttr(v) {
        return lexicons_1.lexicons.validate("com.atproto.admin.defs#statusAttr", v);
      }
      exports.validateStatusAttr = validateStatusAttr;
      function isAccountView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.admin.defs#accountView";
      }
      exports.isAccountView = isAccountView;
      function validateAccountView(v) {
        return lexicons_1.lexicons.validate("com.atproto.admin.defs#accountView", v);
      }
      exports.validateAccountView = validateAccountView;
      function isRepoRef(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.admin.defs#repoRef";
      }
      exports.isRepoRef = isRepoRef;
      function validateRepoRef(v) {
        return lexicons_1.lexicons.validate("com.atproto.admin.defs#repoRef", v);
      }
      exports.validateRepoRef = validateRepoRef;
      function isRepoBlobRef(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.admin.defs#repoBlobRef";
      }
      exports.isRepoBlobRef = isRepoBlobRef;
      function validateRepoBlobRef(v) {
        return lexicons_1.lexicons.validate("com.atproto.admin.defs#repoBlobRef", v);
      }
      exports.validateRepoBlobRef = validateRepoBlobRef;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js
  var require_defs2 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLabelValueDefinitionStrings = exports.isLabelValueDefinitionStrings = exports.validateLabelValueDefinition = exports.isLabelValueDefinition = exports.validateSelfLabel = exports.isSelfLabel = exports.validateSelfLabels = exports.isSelfLabels = exports.validateLabel = exports.isLabel = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isLabel(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#label";
      }
      exports.isLabel = isLabel;
      function validateLabel(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#label", v);
      }
      exports.validateLabel = validateLabel;
      function isSelfLabels(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#selfLabels";
      }
      exports.isSelfLabels = isSelfLabels;
      function validateSelfLabels(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#selfLabels", v);
      }
      exports.validateSelfLabels = validateSelfLabels;
      function isSelfLabel(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#selfLabel";
      }
      exports.isSelfLabel = isSelfLabel;
      function validateSelfLabel(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#selfLabel", v);
      }
      exports.validateSelfLabel = validateSelfLabel;
      function isLabelValueDefinition(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#labelValueDefinition";
      }
      exports.isLabelValueDefinition = isLabelValueDefinition;
      function validateLabelValueDefinition(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#labelValueDefinition", v);
      }
      exports.validateLabelValueDefinition = validateLabelValueDefinition;
      function isLabelValueDefinitionStrings(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#labelValueDefinitionStrings";
      }
      exports.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
      function validateLabelValueDefinitionStrings(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#labelValueDefinitionStrings", v);
      }
      exports.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js
  var require_subscribeLabels = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateInfo = exports.isInfo = exports.validateLabels = exports.isLabels = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isLabels(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.subscribeLabels#labels";
      }
      exports.isLabels = isLabels;
      function validateLabels(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.subscribeLabels#labels", v);
      }
      exports.validateLabels = validateLabels;
      function isInfo(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.subscribeLabels#info";
      }
      exports.isInfo = isInfo;
      function validateInfo(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.subscribeLabels#info", v);
      }
      exports.validateInfo = validateInfo;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js
  var require_defs3 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.REASONAPPEAL = exports.REASONOTHER = exports.REASONRUDE = exports.REASONSEXUAL = exports.REASONMISLEADING = exports.REASONVIOLATION = exports.REASONSPAM = void 0;
      exports.REASONSPAM = "com.atproto.moderation.defs#reasonSpam";
      exports.REASONVIOLATION = "com.atproto.moderation.defs#reasonViolation";
      exports.REASONMISLEADING = "com.atproto.moderation.defs#reasonMisleading";
      exports.REASONSEXUAL = "com.atproto.moderation.defs#reasonSexual";
      exports.REASONRUDE = "com.atproto.moderation.defs#reasonRude";
      exports.REASONOTHER = "com.atproto.moderation.defs#reasonOther";
      exports.REASONAPPEAL = "com.atproto.moderation.defs#reasonAppeal";
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js
  var require_strongRef = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "com.atproto.repo.strongRef#main" || v.$type === "com.atproto.repo.strongRef");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.strongRef#main", v);
      }
      exports.validateMain = validateMain;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js
  var require_defs4 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateInviteCodeUse = exports.isInviteCodeUse = exports.validateInviteCode = exports.isInviteCode = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isInviteCode(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.defs#inviteCode";
      }
      exports.isInviteCode = isInviteCode;
      function validateInviteCode(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.defs#inviteCode", v);
      }
      exports.validateInviteCode = validateInviteCode;
      function isInviteCodeUse(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.defs#inviteCodeUse";
      }
      exports.isInviteCodeUse = isInviteCodeUse;
      function validateInviteCodeUse(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.defs#inviteCodeUse", v);
      }
      exports.validateInviteCodeUse = validateInviteCodeUse;
    }
  });

  // node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js
  var require_subscribeRepos = __commonJS({
    "node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRepoOp = exports.isRepoOp = exports.validateInfo = exports.isInfo = exports.validateTombstone = exports.isTombstone = exports.validateMigrate = exports.isMigrate = exports.validateHandle = exports.isHandle = exports.validateIdentity = exports.isIdentity = exports.validateCommit = exports.isCommit = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isCommit(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#commit";
      }
      exports.isCommit = isCommit;
      function validateCommit(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#commit", v);
      }
      exports.validateCommit = validateCommit;
      function isIdentity(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#identity";
      }
      exports.isIdentity = isIdentity;
      function validateIdentity(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#identity", v);
      }
      exports.validateIdentity = validateIdentity;
      function isHandle(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#handle";
      }
      exports.isHandle = isHandle;
      function validateHandle(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#handle", v);
      }
      exports.validateHandle = validateHandle;
      function isMigrate(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#migrate";
      }
      exports.isMigrate = isMigrate;
      function validateMigrate(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#migrate", v);
      }
      exports.validateMigrate = validateMigrate;
      function isTombstone(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#tombstone";
      }
      exports.isTombstone = isTombstone;
      function validateTombstone(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#tombstone", v);
      }
      exports.validateTombstone = validateTombstone;
      function isInfo(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#info";
      }
      exports.isInfo = isInfo;
      function validateInfo(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#info", v);
      }
      exports.validateInfo = validateInfo;
      function isRepoOp(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#repoOp";
      }
      exports.isRepoOp = isRepoOp;
      function validateRepoOp(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#repoOp", v);
      }
      exports.validateRepoOp = validateRepoOp;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js
  var require_defs5 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLabelerPrefItem = exports.isLabelerPrefItem = exports.validateLabelersPref = exports.isLabelersPref = exports.validateHiddenPostsPref = exports.isHiddenPostsPref = exports.validateMutedWordsPref = exports.isMutedWordsPref = exports.validateMutedWord = exports.isMutedWord = exports.validateInterestsPref = exports.isInterestsPref = exports.validateThreadViewPref = exports.isThreadViewPref = exports.validateFeedViewPref = exports.isFeedViewPref = exports.validatePersonalDetailsPref = exports.isPersonalDetailsPref = exports.validateSavedFeedsPref = exports.isSavedFeedsPref = exports.validateContentLabelPref = exports.isContentLabelPref = exports.validateAdultContentPref = exports.isAdultContentPref = exports.validateViewerState = exports.isViewerState = exports.validateProfileAssociated = exports.isProfileAssociated = exports.validateProfileViewDetailed = exports.isProfileViewDetailed = exports.validateProfileView = exports.isProfileView = exports.validateProfileViewBasic = exports.isProfileViewBasic = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isProfileViewBasic(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#profileViewBasic";
      }
      exports.isProfileViewBasic = isProfileViewBasic;
      function validateProfileViewBasic(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileViewBasic", v);
      }
      exports.validateProfileViewBasic = validateProfileViewBasic;
      function isProfileView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#profileView";
      }
      exports.isProfileView = isProfileView;
      function validateProfileView(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileView", v);
      }
      exports.validateProfileView = validateProfileView;
      function isProfileViewDetailed(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#profileViewDetailed";
      }
      exports.isProfileViewDetailed = isProfileViewDetailed;
      function validateProfileViewDetailed(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileViewDetailed", v);
      }
      exports.validateProfileViewDetailed = validateProfileViewDetailed;
      function isProfileAssociated(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#profileAssociated";
      }
      exports.isProfileAssociated = isProfileAssociated;
      function validateProfileAssociated(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileAssociated", v);
      }
      exports.validateProfileAssociated = validateProfileAssociated;
      function isViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#viewerState";
      }
      exports.isViewerState = isViewerState;
      function validateViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#viewerState", v);
      }
      exports.validateViewerState = validateViewerState;
      function isAdultContentPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#adultContentPref";
      }
      exports.isAdultContentPref = isAdultContentPref;
      function validateAdultContentPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#adultContentPref", v);
      }
      exports.validateAdultContentPref = validateAdultContentPref;
      function isContentLabelPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#contentLabelPref";
      }
      exports.isContentLabelPref = isContentLabelPref;
      function validateContentLabelPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#contentLabelPref", v);
      }
      exports.validateContentLabelPref = validateContentLabelPref;
      function isSavedFeedsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#savedFeedsPref";
      }
      exports.isSavedFeedsPref = isSavedFeedsPref;
      function validateSavedFeedsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#savedFeedsPref", v);
      }
      exports.validateSavedFeedsPref = validateSavedFeedsPref;
      function isPersonalDetailsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#personalDetailsPref";
      }
      exports.isPersonalDetailsPref = isPersonalDetailsPref;
      function validatePersonalDetailsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#personalDetailsPref", v);
      }
      exports.validatePersonalDetailsPref = validatePersonalDetailsPref;
      function isFeedViewPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#feedViewPref";
      }
      exports.isFeedViewPref = isFeedViewPref;
      function validateFeedViewPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#feedViewPref", v);
      }
      exports.validateFeedViewPref = validateFeedViewPref;
      function isThreadViewPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#threadViewPref";
      }
      exports.isThreadViewPref = isThreadViewPref;
      function validateThreadViewPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#threadViewPref", v);
      }
      exports.validateThreadViewPref = validateThreadViewPref;
      function isInterestsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#interestsPref";
      }
      exports.isInterestsPref = isInterestsPref;
      function validateInterestsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#interestsPref", v);
      }
      exports.validateInterestsPref = validateInterestsPref;
      function isMutedWord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#mutedWord";
      }
      exports.isMutedWord = isMutedWord;
      function validateMutedWord(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#mutedWord", v);
      }
      exports.validateMutedWord = validateMutedWord;
      function isMutedWordsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#mutedWordsPref";
      }
      exports.isMutedWordsPref = isMutedWordsPref;
      function validateMutedWordsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#mutedWordsPref", v);
      }
      exports.validateMutedWordsPref = validateMutedWordsPref;
      function isHiddenPostsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#hiddenPostsPref";
      }
      exports.isHiddenPostsPref = isHiddenPostsPref;
      function validateHiddenPostsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#hiddenPostsPref", v);
      }
      exports.validateHiddenPostsPref = validateHiddenPostsPref;
      function isLabelersPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#labelersPref";
      }
      exports.isLabelersPref = isLabelersPref;
      function validateLabelersPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#labelersPref", v);
      }
      exports.validateLabelersPref = validateLabelersPref;
      function isLabelerPrefItem(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#labelerPrefItem";
      }
      exports.isLabelerPrefItem = isLabelerPrefItem;
      function validateLabelerPrefItem(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#labelerPrefItem", v);
      }
      exports.validateLabelerPrefItem = validateLabelerPrefItem;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js
  var require_profile = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.actor.profile#main" || v.$type === "app.bsky.actor.profile");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.profile#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js
  var require_external2 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateViewExternal = exports.isViewExternal = exports.validateView = exports.isView = exports.validateExternal = exports.isExternal = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.embed.external#main" || v.$type === "app.bsky.embed.external");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.external#main", v);
      }
      exports.validateMain = validateMain;
      function isExternal(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.external#external";
      }
      exports.isExternal = isExternal;
      function validateExternal(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.external#external", v);
      }
      exports.validateExternal = validateExternal;
      function isView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.external#view";
      }
      exports.isView = isView;
      function validateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.external#view", v);
      }
      exports.validateView = validateView;
      function isViewExternal(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.external#viewExternal";
      }
      exports.isViewExternal = isViewExternal;
      function validateViewExternal(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.external#viewExternal", v);
      }
      exports.validateViewExternal = validateViewExternal;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js
  var require_images = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateViewImage = exports.isViewImage = exports.validateView = exports.isView = exports.validateAspectRatio = exports.isAspectRatio = exports.validateImage = exports.isImage = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.embed.images#main" || v.$type === "app.bsky.embed.images");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#main", v);
      }
      exports.validateMain = validateMain;
      function isImage(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.images#image";
      }
      exports.isImage = isImage;
      function validateImage(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#image", v);
      }
      exports.validateImage = validateImage;
      function isAspectRatio(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.images#aspectRatio";
      }
      exports.isAspectRatio = isAspectRatio;
      function validateAspectRatio(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#aspectRatio", v);
      }
      exports.validateAspectRatio = validateAspectRatio;
      function isView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.images#view";
      }
      exports.isView = isView;
      function validateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#view", v);
      }
      exports.validateView = validateView;
      function isViewImage(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.images#viewImage";
      }
      exports.isViewImage = isViewImage;
      function validateViewImage(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#viewImage", v);
      }
      exports.validateViewImage = validateViewImage;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js
  var require_record = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateViewBlocked = exports.isViewBlocked = exports.validateViewNotFound = exports.isViewNotFound = exports.validateViewRecord = exports.isViewRecord = exports.validateView = exports.isView = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.embed.record#main" || v.$type === "app.bsky.embed.record");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#main", v);
      }
      exports.validateMain = validateMain;
      function isView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.record#view";
      }
      exports.isView = isView;
      function validateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#view", v);
      }
      exports.validateView = validateView;
      function isViewRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.record#viewRecord";
      }
      exports.isViewRecord = isViewRecord;
      function validateViewRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#viewRecord", v);
      }
      exports.validateViewRecord = validateViewRecord;
      function isViewNotFound(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.record#viewNotFound";
      }
      exports.isViewNotFound = isViewNotFound;
      function validateViewNotFound(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#viewNotFound", v);
      }
      exports.validateViewNotFound = validateViewNotFound;
      function isViewBlocked(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.record#viewBlocked";
      }
      exports.isViewBlocked = isViewBlocked;
      function validateViewBlocked(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#viewBlocked", v);
      }
      exports.validateViewBlocked = validateViewBlocked;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js
  var require_recordWithMedia = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateView = exports.isView = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.embed.recordWithMedia#main" || v.$type === "app.bsky.embed.recordWithMedia");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.recordWithMedia#main", v);
      }
      exports.validateMain = validateMain;
      function isView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.recordWithMedia#view";
      }
      exports.isView = isView;
      function validateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.recordWithMedia#view", v);
      }
      exports.validateView = validateView;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js
  var require_defs6 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateThreadgateView = exports.isThreadgateView = exports.validateSkeletonReasonRepost = exports.isSkeletonReasonRepost = exports.validateSkeletonFeedPost = exports.isSkeletonFeedPost = exports.validateGeneratorViewerState = exports.isGeneratorViewerState = exports.validateGeneratorView = exports.isGeneratorView = exports.validateBlockedAuthor = exports.isBlockedAuthor = exports.validateBlockedPost = exports.isBlockedPost = exports.validateNotFoundPost = exports.isNotFoundPost = exports.validateThreadViewPost = exports.isThreadViewPost = exports.validateReasonRepost = exports.isReasonRepost = exports.validateReplyRef = exports.isReplyRef = exports.validateFeedViewPost = exports.isFeedViewPost = exports.validateViewerState = exports.isViewerState = exports.validatePostView = exports.isPostView = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isPostView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#postView";
      }
      exports.isPostView = isPostView;
      function validatePostView(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#postView", v);
      }
      exports.validatePostView = validatePostView;
      function isViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#viewerState";
      }
      exports.isViewerState = isViewerState;
      function validateViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#viewerState", v);
      }
      exports.validateViewerState = validateViewerState;
      function isFeedViewPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#feedViewPost";
      }
      exports.isFeedViewPost = isFeedViewPost;
      function validateFeedViewPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#feedViewPost", v);
      }
      exports.validateFeedViewPost = validateFeedViewPost;
      function isReplyRef(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#replyRef";
      }
      exports.isReplyRef = isReplyRef;
      function validateReplyRef(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#replyRef", v);
      }
      exports.validateReplyRef = validateReplyRef;
      function isReasonRepost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#reasonRepost";
      }
      exports.isReasonRepost = isReasonRepost;
      function validateReasonRepost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#reasonRepost", v);
      }
      exports.validateReasonRepost = validateReasonRepost;
      function isThreadViewPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#threadViewPost";
      }
      exports.isThreadViewPost = isThreadViewPost;
      function validateThreadViewPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#threadViewPost", v);
      }
      exports.validateThreadViewPost = validateThreadViewPost;
      function isNotFoundPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#notFoundPost";
      }
      exports.isNotFoundPost = isNotFoundPost;
      function validateNotFoundPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#notFoundPost", v);
      }
      exports.validateNotFoundPost = validateNotFoundPost;
      function isBlockedPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#blockedPost";
      }
      exports.isBlockedPost = isBlockedPost;
      function validateBlockedPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#blockedPost", v);
      }
      exports.validateBlockedPost = validateBlockedPost;
      function isBlockedAuthor(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#blockedAuthor";
      }
      exports.isBlockedAuthor = isBlockedAuthor;
      function validateBlockedAuthor(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#blockedAuthor", v);
      }
      exports.validateBlockedAuthor = validateBlockedAuthor;
      function isGeneratorView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#generatorView";
      }
      exports.isGeneratorView = isGeneratorView;
      function validateGeneratorView(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#generatorView", v);
      }
      exports.validateGeneratorView = validateGeneratorView;
      function isGeneratorViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#generatorViewerState";
      }
      exports.isGeneratorViewerState = isGeneratorViewerState;
      function validateGeneratorViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#generatorViewerState", v);
      }
      exports.validateGeneratorViewerState = validateGeneratorViewerState;
      function isSkeletonFeedPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#skeletonFeedPost";
      }
      exports.isSkeletonFeedPost = isSkeletonFeedPost;
      function validateSkeletonFeedPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#skeletonFeedPost", v);
      }
      exports.validateSkeletonFeedPost = validateSkeletonFeedPost;
      function isSkeletonReasonRepost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#skeletonReasonRepost";
      }
      exports.isSkeletonReasonRepost = isSkeletonReasonRepost;
      function validateSkeletonReasonRepost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#skeletonReasonRepost", v);
      }
      exports.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
      function isThreadgateView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#threadgateView";
      }
      exports.isThreadgateView = isThreadgateView;
      function validateThreadgateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#threadgateView", v);
      }
      exports.validateThreadgateView = validateThreadgateView;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js
  var require_generator = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.generator#main" || v.$type === "app.bsky.feed.generator");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.generator#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js
  var require_like = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.like#main" || v.$type === "app.bsky.feed.like");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.like#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js
  var require_post = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateTextSlice = exports.isTextSlice = exports.validateEntity = exports.isEntity = exports.validateReplyRef = exports.isReplyRef = exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.post#main" || v.$type === "app.bsky.feed.post");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.post#main", v);
      }
      exports.validateRecord = validateRecord;
      function isReplyRef(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.post#replyRef";
      }
      exports.isReplyRef = isReplyRef;
      function validateReplyRef(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.post#replyRef", v);
      }
      exports.validateReplyRef = validateReplyRef;
      function isEntity(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.post#entity";
      }
      exports.isEntity = isEntity;
      function validateEntity(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.post#entity", v);
      }
      exports.validateEntity = validateEntity;
      function isTextSlice(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.post#textSlice";
      }
      exports.isTextSlice = isTextSlice;
      function validateTextSlice(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.post#textSlice", v);
      }
      exports.validateTextSlice = validateTextSlice;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js
  var require_repost = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.repost#main" || v.$type === "app.bsky.feed.repost");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.repost#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js
  var require_threadgate = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateListRule = exports.isListRule = exports.validateFollowingRule = exports.isFollowingRule = exports.validateMentionRule = exports.isMentionRule = exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.threadgate#main" || v.$type === "app.bsky.feed.threadgate");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#main", v);
      }
      exports.validateRecord = validateRecord;
      function isMentionRule(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.threadgate#mentionRule";
      }
      exports.isMentionRule = isMentionRule;
      function validateMentionRule(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#mentionRule", v);
      }
      exports.validateMentionRule = validateMentionRule;
      function isFollowingRule(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.threadgate#followingRule";
      }
      exports.isFollowingRule = isFollowingRule;
      function validateFollowingRule(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#followingRule", v);
      }
      exports.validateFollowingRule = validateFollowingRule;
      function isListRule(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.threadgate#listRule";
      }
      exports.isListRule = isListRule;
      function validateListRule(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#listRule", v);
      }
      exports.validateListRule = validateListRule;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js
  var require_block = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.block#main" || v.$type === "app.bsky.graph.block");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.block#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js
  var require_defs7 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRelationship = exports.isRelationship = exports.validateNotFoundActor = exports.isNotFoundActor = exports.validateListViewerState = exports.isListViewerState = exports.CURATELIST = exports.MODLIST = exports.validateListItemView = exports.isListItemView = exports.validateListView = exports.isListView = exports.validateListViewBasic = exports.isListViewBasic = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isListViewBasic(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#listViewBasic";
      }
      exports.isListViewBasic = isListViewBasic;
      function validateListViewBasic(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#listViewBasic", v);
      }
      exports.validateListViewBasic = validateListViewBasic;
      function isListView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#listView";
      }
      exports.isListView = isListView;
      function validateListView(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#listView", v);
      }
      exports.validateListView = validateListView;
      function isListItemView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#listItemView";
      }
      exports.isListItemView = isListItemView;
      function validateListItemView(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#listItemView", v);
      }
      exports.validateListItemView = validateListItemView;
      exports.MODLIST = "app.bsky.graph.defs#modlist";
      exports.CURATELIST = "app.bsky.graph.defs#curatelist";
      function isListViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#listViewerState";
      }
      exports.isListViewerState = isListViewerState;
      function validateListViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#listViewerState", v);
      }
      exports.validateListViewerState = validateListViewerState;
      function isNotFoundActor(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#notFoundActor";
      }
      exports.isNotFoundActor = isNotFoundActor;
      function validateNotFoundActor(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#notFoundActor", v);
      }
      exports.validateNotFoundActor = validateNotFoundActor;
      function isRelationship(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#relationship";
      }
      exports.isRelationship = isRelationship;
      function validateRelationship(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#relationship", v);
      }
      exports.validateRelationship = validateRelationship;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js
  var require_follow = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.follow#main" || v.$type === "app.bsky.graph.follow");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.follow#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js
  var require_list = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.list#main" || v.$type === "app.bsky.graph.list");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.list#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js
  var require_listblock = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.listblock#main" || v.$type === "app.bsky.graph.listblock");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.listblock#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js
  var require_listitem = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.listitem#main" || v.$type === "app.bsky.graph.listitem");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.listitem#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js
  var require_defs8 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLabelerPolicies = exports.isLabelerPolicies = exports.validateLabelerViewerState = exports.isLabelerViewerState = exports.validateLabelerViewDetailed = exports.isLabelerViewDetailed = exports.validateLabelerView = exports.isLabelerView = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isLabelerView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.labeler.defs#labelerView";
      }
      exports.isLabelerView = isLabelerView;
      function validateLabelerView(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerView", v);
      }
      exports.validateLabelerView = validateLabelerView;
      function isLabelerViewDetailed(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.labeler.defs#labelerViewDetailed";
      }
      exports.isLabelerViewDetailed = isLabelerViewDetailed;
      function validateLabelerViewDetailed(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerViewDetailed", v);
      }
      exports.validateLabelerViewDetailed = validateLabelerViewDetailed;
      function isLabelerViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.labeler.defs#labelerViewerState";
      }
      exports.isLabelerViewerState = isLabelerViewerState;
      function validateLabelerViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerViewerState", v);
      }
      exports.validateLabelerViewerState = validateLabelerViewerState;
      function isLabelerPolicies(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.labeler.defs#labelerPolicies";
      }
      exports.isLabelerPolicies = isLabelerPolicies;
      function validateLabelerPolicies(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerPolicies", v);
      }
      exports.validateLabelerPolicies = validateLabelerPolicies;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js
  var require_service = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.labeler.service#main" || v.$type === "app.bsky.labeler.service");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.service#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js
  var require_facet = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateByteSlice = exports.isByteSlice = exports.validateTag = exports.isTag = exports.validateLink = exports.isLink = exports.validateMention = exports.isMention = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.richtext.facet#main" || v.$type === "app.bsky.richtext.facet");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#main", v);
      }
      exports.validateMain = validateMain;
      function isMention(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.richtext.facet#mention";
      }
      exports.isMention = isMention;
      function validateMention(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#mention", v);
      }
      exports.validateMention = validateMention;
      function isLink(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.richtext.facet#link";
      }
      exports.isLink = isLink;
      function validateLink(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#link", v);
      }
      exports.validateLink = validateLink;
      function isTag(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.richtext.facet#tag";
      }
      exports.isTag = isTag;
      function validateTag(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#tag", v);
      }
      exports.validateTag = validateTag;
      function isByteSlice(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.richtext.facet#byteSlice";
      }
      exports.isByteSlice = isByteSlice;
      function validateByteSlice(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#byteSlice", v);
      }
      exports.validateByteSlice = validateByteSlice;
    }
  });

  // node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js
  var require_defs9 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateSkeletonSearchActor = exports.isSkeletonSearchActor = exports.validateSkeletonSearchPost = exports.isSkeletonSearchPost = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isSkeletonSearchPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.unspecced.defs#skeletonSearchPost";
      }
      exports.isSkeletonSearchPost = isSkeletonSearchPost;
      function validateSkeletonSearchPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchPost", v);
      }
      exports.validateSkeletonSearchPost = validateSkeletonSearchPost;
      function isSkeletonSearchActor(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.unspecced.defs#skeletonSearchActor";
      }
      exports.isSkeletonSearchActor = isSkeletonSearchActor;
      function validateSkeletonSearchActor(v) {
        return lexicons_1.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchActor", v);
      }
      exports.validateSkeletonSearchActor = validateSkeletonSearchActor;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js
  var require_defs10 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateTemplateView = exports.isTemplateView = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isTemplateView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.communication.defs#templateView";
      }
      exports.isTemplateView = isTemplateView;
      function validateTemplateView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.communication.defs#templateView", v);
      }
      exports.validateTemplateView = validateTemplateView;
    }
  });

  // node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js
  var require_defs11 = __commonJS({
    "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateModeration = exports.isModeration = exports.validateRecordViewNotFound = exports.isRecordViewNotFound = exports.validateRecordViewDetail = exports.isRecordViewDetail = exports.validateRecordView = exports.isRecordView = exports.validateRepoViewNotFound = exports.isRepoViewNotFound = exports.validateRepoViewDetail = exports.isRepoViewDetail = exports.validateRepoView = exports.isRepoView = exports.validateModEventTag = exports.isModEventTag = exports.validateModEventDivert = exports.isModEventDivert = exports.validateModEventEmail = exports.isModEventEmail = exports.validateModEventUnmute = exports.isModEventUnmute = exports.validateModEventMute = exports.isModEventMute = exports.validateModEventEscalate = exports.isModEventEscalate = exports.validateModEventAcknowledge = exports.isModEventAcknowledge = exports.validateModEventLabel = exports.isModEventLabel = exports.validateModEventReport = exports.isModEventReport = exports.validateModEventComment = exports.isModEventComment = exports.validateModEventResolveAppeal = exports.isModEventResolveAppeal = exports.validateModEventReverseTakedown = exports.isModEventReverseTakedown = exports.validateModEventTakedown = exports.isModEventTakedown = exports.REVIEWNONE = exports.REVIEWCLOSED = exports.REVIEWESCALATED = exports.REVIEWOPEN = exports.validateSubjectStatusView = exports.isSubjectStatusView = exports.validateModEventViewDetail = exports.isModEventViewDetail = exports.validateModEventView = exports.isModEventView = void 0;
      exports.validateVideoDetails = exports.isVideoDetails = exports.validateImageDetails = exports.isImageDetails = exports.validateBlobView = exports.isBlobView = exports.validateModerationDetail = exports.isModerationDetail = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isModEventView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventView";
      }
      exports.isModEventView = isModEventView;
      function validateModEventView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventView", v);
      }
      exports.validateModEventView = validateModEventView;
      function isModEventViewDetail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventViewDetail";
      }
      exports.isModEventViewDetail = isModEventViewDetail;
      function validateModEventViewDetail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventViewDetail", v);
      }
      exports.validateModEventViewDetail = validateModEventViewDetail;
      function isSubjectStatusView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#subjectStatusView";
      }
      exports.isSubjectStatusView = isSubjectStatusView;
      function validateSubjectStatusView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#subjectStatusView", v);
      }
      exports.validateSubjectStatusView = validateSubjectStatusView;
      exports.REVIEWOPEN = "tools.ozone.moderation.defs#reviewOpen";
      exports.REVIEWESCALATED = "tools.ozone.moderation.defs#reviewEscalated";
      exports.REVIEWCLOSED = "tools.ozone.moderation.defs#reviewClosed";
      exports.REVIEWNONE = "tools.ozone.moderation.defs#reviewNone";
      function isModEventTakedown(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventTakedown";
      }
      exports.isModEventTakedown = isModEventTakedown;
      function validateModEventTakedown(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventTakedown", v);
      }
      exports.validateModEventTakedown = validateModEventTakedown;
      function isModEventReverseTakedown(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventReverseTakedown";
      }
      exports.isModEventReverseTakedown = isModEventReverseTakedown;
      function validateModEventReverseTakedown(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventReverseTakedown", v);
      }
      exports.validateModEventReverseTakedown = validateModEventReverseTakedown;
      function isModEventResolveAppeal(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventResolveAppeal";
      }
      exports.isModEventResolveAppeal = isModEventResolveAppeal;
      function validateModEventResolveAppeal(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventResolveAppeal", v);
      }
      exports.validateModEventResolveAppeal = validateModEventResolveAppeal;
      function isModEventComment(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventComment";
      }
      exports.isModEventComment = isModEventComment;
      function validateModEventComment(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventComment", v);
      }
      exports.validateModEventComment = validateModEventComment;
      function isModEventReport(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventReport";
      }
      exports.isModEventReport = isModEventReport;
      function validateModEventReport(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventReport", v);
      }
      exports.validateModEventReport = validateModEventReport;
      function isModEventLabel(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventLabel";
      }
      exports.isModEventLabel = isModEventLabel;
      function validateModEventLabel(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventLabel", v);
      }
      exports.validateModEventLabel = validateModEventLabel;
      function isModEventAcknowledge(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventAcknowledge";
      }
      exports.isModEventAcknowledge = isModEventAcknowledge;
      function validateModEventAcknowledge(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventAcknowledge", v);
      }
      exports.validateModEventAcknowledge = validateModEventAcknowledge;
      function isModEventEscalate(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventEscalate";
      }
      exports.isModEventEscalate = isModEventEscalate;
      function validateModEventEscalate(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventEscalate", v);
      }
      exports.validateModEventEscalate = validateModEventEscalate;
      function isModEventMute(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventMute";
      }
      exports.isModEventMute = isModEventMute;
      function validateModEventMute(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventMute", v);
      }
      exports.validateModEventMute = validateModEventMute;
      function isModEventUnmute(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventUnmute";
      }
      exports.isModEventUnmute = isModEventUnmute;
      function validateModEventUnmute(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventUnmute", v);
      }
      exports.validateModEventUnmute = validateModEventUnmute;
      function isModEventEmail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventEmail";
      }
      exports.isModEventEmail = isModEventEmail;
      function validateModEventEmail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventEmail", v);
      }
      exports.validateModEventEmail = validateModEventEmail;
      function isModEventDivert(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventDivert";
      }
      exports.isModEventDivert = isModEventDivert;
      function validateModEventDivert(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventDivert", v);
      }
      exports.validateModEventDivert = validateModEventDivert;
      function isModEventTag(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventTag";
      }
      exports.isModEventTag = isModEventTag;
      function validateModEventTag(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventTag", v);
      }
      exports.validateModEventTag = validateModEventTag;
      function isRepoView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#repoView";
      }
      exports.isRepoView = isRepoView;
      function validateRepoView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoView", v);
      }
      exports.validateRepoView = validateRepoView;
      function isRepoViewDetail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#repoViewDetail";
      }
      exports.isRepoViewDetail = isRepoViewDetail;
      function validateRepoViewDetail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoViewDetail", v);
      }
      exports.validateRepoViewDetail = validateRepoViewDetail;
      function isRepoViewNotFound(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#repoViewNotFound";
      }
      exports.isRepoViewNotFound = isRepoViewNotFound;
      function validateRepoViewNotFound(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoViewNotFound", v);
      }
      exports.validateRepoViewNotFound = validateRepoViewNotFound;
      function isRecordView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#recordView";
      }
      exports.isRecordView = isRecordView;
      function validateRecordView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordView", v);
      }
      exports.validateRecordView = validateRecordView;
      function isRecordViewDetail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#recordViewDetail";
      }
      exports.isRecordViewDetail = isRecordViewDetail;
      function validateRecordViewDetail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordViewDetail", v);
      }
      exports.validateRecordViewDetail = validateRecordViewDetail;
      function isRecordViewNotFound(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#recordViewNotFound";
      }
      exports.isRecordViewNotFound = isRecordViewNotFound;
      function validateRecordViewNotFound(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordViewNotFound", v);
      }
      exports.validateRecordViewNotFound = validateRecordViewNotFound;
      function isModeration(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#moderation";
      }
      exports.isModeration = isModeration;
      function validateModeration(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#moderation", v);
      }
      exports.validateModeration = validateModeration;
      function isModerationDetail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#moderationDetail";
      }
      exports.isModerationDetail = isModerationDetail;
      function validateModerationDetail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#moderationDetail", v);
      }
      exports.validateModerationDetail = validateModerationDetail;
      function isBlobView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#blobView";
      }
      exports.isBlobView = isBlobView;
      function validateBlobView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#blobView", v);
      }
      exports.validateBlobView = validateBlobView;
      function isImageDetails(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#imageDetails";
      }
      exports.isImageDetails = isImageDetails;
      function validateImageDetails(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#imageDetails", v);
      }
      exports.validateImageDetails = validateImageDetails;
      function isVideoDetails(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#videoDetails";
      }
      exports.isVideoDetails = isVideoDetails;
      function validateVideoDetails(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#videoDetails", v);
      }
      exports.validateVideoDetails = validateVideoDetails;
    }
  });

  // node_modules/@atproto/api/dist/client/index.js
  var require_client2 = __commonJS({
    "node_modules/@atproto/api/dist/client/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ComAtprotoServerGetAccountInviteCodes = exports.ComAtprotoServerDescribeServer = exports.ComAtprotoServerDeleteSession = exports.ComAtprotoServerDeleteAccount = exports.ComAtprotoServerDefs = exports.ComAtprotoServerDeactivateAccount = exports.ComAtprotoServerCreateSession = exports.ComAtprotoServerCreateInviteCodes = exports.ComAtprotoServerCreateInviteCode = exports.ComAtprotoServerCreateAppPassword = exports.ComAtprotoServerCreateAccount = exports.ComAtprotoServerConfirmEmail = exports.ComAtprotoServerCheckAccountStatus = exports.ComAtprotoServerActivateAccount = exports.ComAtprotoRepoUploadBlob = exports.ComAtprotoRepoStrongRef = exports.ComAtprotoRepoPutRecord = exports.ComAtprotoRepoListRecords = exports.ComAtprotoRepoListMissingBlobs = exports.ComAtprotoRepoImportRepo = exports.ComAtprotoRepoGetRecord = exports.ComAtprotoRepoDescribeRepo = exports.ComAtprotoRepoDeleteRecord = exports.ComAtprotoRepoCreateRecord = exports.ComAtprotoRepoApplyWrites = exports.ComAtprotoModerationDefs = exports.ComAtprotoModerationCreateReport = exports.ComAtprotoLabelSubscribeLabels = exports.ComAtprotoLabelQueryLabels = exports.ComAtprotoLabelDefs = exports.ComAtprotoIdentityUpdateHandle = exports.ComAtprotoIdentitySubmitPlcOperation = exports.ComAtprotoIdentitySignPlcOperation = exports.ComAtprotoIdentityResolveHandle = exports.ComAtprotoIdentityRequestPlcOperationSignature = exports.ComAtprotoIdentityGetRecommendedDidCredentials = exports.ComAtprotoAdminUpdateSubjectStatus = exports.ComAtprotoAdminUpdateAccountPassword = exports.ComAtprotoAdminUpdateAccountHandle = exports.ComAtprotoAdminUpdateAccountEmail = exports.ComAtprotoAdminSendEmail = exports.ComAtprotoAdminGetSubjectStatus = exports.ComAtprotoAdminGetInviteCodes = exports.ComAtprotoAdminGetAccountInfos = exports.ComAtprotoAdminGetAccountInfo = exports.ComAtprotoAdminEnableAccountInvites = exports.ComAtprotoAdminDisableInviteCodes = exports.ComAtprotoAdminDisableAccountInvites = exports.ComAtprotoAdminDeleteAccount = exports.ComAtprotoAdminDefs = void 0;
      exports.AppBskyFeedGetFeedSkeleton = exports.AppBskyFeedGetFeedGenerators = exports.AppBskyFeedGetFeedGenerator = exports.AppBskyFeedGetFeed = exports.AppBskyFeedGetAuthorFeed = exports.AppBskyFeedGetActorLikes = exports.AppBskyFeedGetActorFeeds = exports.AppBskyFeedGenerator = exports.AppBskyFeedDescribeFeedGenerator = exports.AppBskyFeedDefs = exports.AppBskyEmbedRecordWithMedia = exports.AppBskyEmbedRecord = exports.AppBskyEmbedImages = exports.AppBskyEmbedExternal = exports.AppBskyActorSearchActorsTypeahead = exports.AppBskyActorSearchActors = exports.AppBskyActorPutPreferences = exports.AppBskyActorProfile = exports.AppBskyActorGetSuggestions = exports.AppBskyActorGetProfiles = exports.AppBskyActorGetProfile = exports.AppBskyActorGetPreferences = exports.AppBskyActorDefs = exports.ComAtprotoTempRequestPhoneVerification = exports.ComAtprotoTempFetchLabels = exports.ComAtprotoTempCheckSignupQueue = exports.ComAtprotoSyncSubscribeRepos = exports.ComAtprotoSyncRequestCrawl = exports.ComAtprotoSyncNotifyOfUpdate = exports.ComAtprotoSyncListRepos = exports.ComAtprotoSyncListBlobs = exports.ComAtprotoSyncGetRepo = exports.ComAtprotoSyncGetRecord = exports.ComAtprotoSyncGetLatestCommit = exports.ComAtprotoSyncGetHead = exports.ComAtprotoSyncGetCheckout = exports.ComAtprotoSyncGetBlocks = exports.ComAtprotoSyncGetBlob = exports.ComAtprotoServerUpdateEmail = exports.ComAtprotoServerRevokeAppPassword = exports.ComAtprotoServerResetPassword = exports.ComAtprotoServerReserveSigningKey = exports.ComAtprotoServerRequestPasswordReset = exports.ComAtprotoServerRequestEmailUpdate = exports.ComAtprotoServerRequestEmailConfirmation = exports.ComAtprotoServerRequestAccountDelete = exports.ComAtprotoServerRefreshSession = exports.ComAtprotoServerListAppPasswords = exports.ComAtprotoServerGetSession = exports.ComAtprotoServerGetServiceAuth = void 0;
      exports.ToolsOzoneCommunicationUpdateTemplate = exports.ToolsOzoneCommunicationListTemplates = exports.ToolsOzoneCommunicationDeleteTemplate = exports.ToolsOzoneCommunicationDefs = exports.ToolsOzoneCommunicationCreateTemplate = exports.AppBskyUnspeccedSearchPostsSkeleton = exports.AppBskyUnspeccedSearchActorsSkeleton = exports.AppBskyUnspeccedGetTaggedSuggestions = exports.AppBskyUnspeccedGetPopularFeedGenerators = exports.AppBskyUnspeccedDefs = exports.AppBskyRichtextFacet = exports.AppBskyNotificationUpdateSeen = exports.AppBskyNotificationRegisterPush = exports.AppBskyNotificationListNotifications = exports.AppBskyNotificationGetUnreadCount = exports.AppBskyLabelerService = exports.AppBskyLabelerGetServices = exports.AppBskyLabelerDefs = exports.AppBskyGraphUnmuteActorList = exports.AppBskyGraphUnmuteActor = exports.AppBskyGraphMuteActorList = exports.AppBskyGraphMuteActor = exports.AppBskyGraphListitem = exports.AppBskyGraphListblock = exports.AppBskyGraphList = exports.AppBskyGraphGetSuggestedFollowsByActor = exports.AppBskyGraphGetRelationships = exports.AppBskyGraphGetMutes = exports.AppBskyGraphGetLists = exports.AppBskyGraphGetListMutes = exports.AppBskyGraphGetListBlocks = exports.AppBskyGraphGetList = exports.AppBskyGraphGetFollows = exports.AppBskyGraphGetFollowers = exports.AppBskyGraphGetBlocks = exports.AppBskyGraphFollow = exports.AppBskyGraphDefs = exports.AppBskyGraphBlock = exports.AppBskyFeedThreadgate = exports.AppBskyFeedSearchPosts = exports.AppBskyFeedRepost = exports.AppBskyFeedPost = exports.AppBskyFeedLike = exports.AppBskyFeedGetTimeline = exports.AppBskyFeedGetSuggestedFeeds = exports.AppBskyFeedGetRepostedBy = exports.AppBskyFeedGetPosts = exports.AppBskyFeedGetPostThread = exports.AppBskyFeedGetListFeed = exports.AppBskyFeedGetLikes = void 0;
      exports.ToolsOzoneModerationNS = exports.ToolsOzoneCommunicationNS = exports.ToolsOzoneNS = exports.ToolsNS = exports.AppBskyUnspeccedNS = exports.AppBskyRichtextNS = exports.AppBskyNotificationNS = exports.ServiceRecord = exports.AppBskyLabelerNS = exports.ListitemRecord = exports.ListblockRecord = exports.ListRecord = exports.FollowRecord = exports.BlockRecord = exports.AppBskyGraphNS = exports.ThreadgateRecord = exports.RepostRecord = exports.PostRecord = exports.LikeRecord = exports.GeneratorRecord = exports.AppBskyFeedNS = exports.AppBskyEmbedNS = exports.ProfileRecord = exports.AppBskyActorNS = exports.AppBskyNS = exports.AppNS = exports.ComAtprotoTempNS = exports.ComAtprotoSyncNS = exports.ComAtprotoServerNS = exports.ComAtprotoRepoNS = exports.ComAtprotoModerationNS = exports.ComAtprotoLabelNS = exports.ComAtprotoIdentityNS = exports.ComAtprotoAdminNS = exports.ComAtprotoNS = exports.ComNS = exports.AtpServiceClient = exports.AtpBaseClient = exports.TOOLS_OZONE_MODERATION = exports.APP_BSKY_GRAPH = exports.COM_ATPROTO_MODERATION = exports.ToolsOzoneModerationSearchRepos = exports.ToolsOzoneModerationQueryStatuses = exports.ToolsOzoneModerationQueryEvents = exports.ToolsOzoneModerationGetRepo = exports.ToolsOzoneModerationGetRecord = exports.ToolsOzoneModerationGetEvent = exports.ToolsOzoneModerationEmitEvent = exports.ToolsOzoneModerationDefs = void 0;
      var xrpc_1 = require_dist5();
      var lexicons_1 = require_lexicons2();
      var ComAtprotoAdminDeleteAccount = __importStar(require_deleteAccount());
      var ComAtprotoAdminDisableAccountInvites = __importStar(require_disableAccountInvites());
      var ComAtprotoAdminDisableInviteCodes = __importStar(require_disableInviteCodes());
      var ComAtprotoAdminEnableAccountInvites = __importStar(require_enableAccountInvites());
      var ComAtprotoAdminGetAccountInfo = __importStar(require_getAccountInfo());
      var ComAtprotoAdminGetAccountInfos = __importStar(require_getAccountInfos());
      var ComAtprotoAdminGetInviteCodes = __importStar(require_getInviteCodes());
      var ComAtprotoAdminGetSubjectStatus = __importStar(require_getSubjectStatus());
      var ComAtprotoAdminSendEmail = __importStar(require_sendEmail());
      var ComAtprotoAdminUpdateAccountEmail = __importStar(require_updateAccountEmail());
      var ComAtprotoAdminUpdateAccountHandle = __importStar(require_updateAccountHandle());
      var ComAtprotoAdminUpdateAccountPassword = __importStar(require_updateAccountPassword());
      var ComAtprotoAdminUpdateSubjectStatus = __importStar(require_updateSubjectStatus());
      var ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(require_getRecommendedDidCredentials());
      var ComAtprotoIdentityRequestPlcOperationSignature = __importStar(require_requestPlcOperationSignature());
      var ComAtprotoIdentityResolveHandle = __importStar(require_resolveHandle());
      var ComAtprotoIdentitySignPlcOperation = __importStar(require_signPlcOperation());
      var ComAtprotoIdentitySubmitPlcOperation = __importStar(require_submitPlcOperation());
      var ComAtprotoIdentityUpdateHandle = __importStar(require_updateHandle());
      var ComAtprotoLabelQueryLabels = __importStar(require_queryLabels());
      var ComAtprotoModerationCreateReport = __importStar(require_createReport());
      var ComAtprotoRepoApplyWrites = __importStar(require_applyWrites());
      var ComAtprotoRepoCreateRecord = __importStar(require_createRecord());
      var ComAtprotoRepoDeleteRecord = __importStar(require_deleteRecord());
      var ComAtprotoRepoDescribeRepo = __importStar(require_describeRepo());
      var ComAtprotoRepoGetRecord = __importStar(require_getRecord());
      var ComAtprotoRepoImportRepo = __importStar(require_importRepo());
      var ComAtprotoRepoListMissingBlobs = __importStar(require_listMissingBlobs());
      var ComAtprotoRepoListRecords = __importStar(require_listRecords());
      var ComAtprotoRepoPutRecord = __importStar(require_putRecord());
      var ComAtprotoRepoUploadBlob = __importStar(require_uploadBlob());
      var ComAtprotoServerActivateAccount = __importStar(require_activateAccount());
      var ComAtprotoServerCheckAccountStatus = __importStar(require_checkAccountStatus());
      var ComAtprotoServerConfirmEmail = __importStar(require_confirmEmail());
      var ComAtprotoServerCreateAccount = __importStar(require_createAccount());
      var ComAtprotoServerCreateAppPassword = __importStar(require_createAppPassword());
      var ComAtprotoServerCreateInviteCode = __importStar(require_createInviteCode());
      var ComAtprotoServerCreateInviteCodes = __importStar(require_createInviteCodes());
      var ComAtprotoServerCreateSession = __importStar(require_createSession());
      var ComAtprotoServerDeactivateAccount = __importStar(require_deactivateAccount());
      var ComAtprotoServerDeleteAccount = __importStar(require_deleteAccount2());
      var ComAtprotoServerDeleteSession = __importStar(require_deleteSession());
      var ComAtprotoServerDescribeServer = __importStar(require_describeServer());
      var ComAtprotoServerGetAccountInviteCodes = __importStar(require_getAccountInviteCodes());
      var ComAtprotoServerGetServiceAuth = __importStar(require_getServiceAuth());
      var ComAtprotoServerGetSession = __importStar(require_getSession());
      var ComAtprotoServerListAppPasswords = __importStar(require_listAppPasswords());
      var ComAtprotoServerRefreshSession = __importStar(require_refreshSession());
      var ComAtprotoServerRequestAccountDelete = __importStar(require_requestAccountDelete());
      var ComAtprotoServerRequestEmailConfirmation = __importStar(require_requestEmailConfirmation());
      var ComAtprotoServerRequestEmailUpdate = __importStar(require_requestEmailUpdate());
      var ComAtprotoServerRequestPasswordReset = __importStar(require_requestPasswordReset());
      var ComAtprotoServerReserveSigningKey = __importStar(require_reserveSigningKey());
      var ComAtprotoServerResetPassword = __importStar(require_resetPassword());
      var ComAtprotoServerRevokeAppPassword = __importStar(require_revokeAppPassword());
      var ComAtprotoServerUpdateEmail = __importStar(require_updateEmail());
      var ComAtprotoSyncGetBlob = __importStar(require_getBlob());
      var ComAtprotoSyncGetBlocks = __importStar(require_getBlocks());
      var ComAtprotoSyncGetCheckout = __importStar(require_getCheckout());
      var ComAtprotoSyncGetHead = __importStar(require_getHead());
      var ComAtprotoSyncGetLatestCommit = __importStar(require_getLatestCommit());
      var ComAtprotoSyncGetRecord = __importStar(require_getRecord2());
      var ComAtprotoSyncGetRepo = __importStar(require_getRepo());
      var ComAtprotoSyncListBlobs = __importStar(require_listBlobs());
      var ComAtprotoSyncListRepos = __importStar(require_listRepos());
      var ComAtprotoSyncNotifyOfUpdate = __importStar(require_notifyOfUpdate());
      var ComAtprotoSyncRequestCrawl = __importStar(require_requestCrawl());
      var ComAtprotoTempCheckSignupQueue = __importStar(require_checkSignupQueue());
      var ComAtprotoTempFetchLabels = __importStar(require_fetchLabels());
      var ComAtprotoTempRequestPhoneVerification = __importStar(require_requestPhoneVerification());
      var AppBskyActorGetPreferences = __importStar(require_getPreferences());
      var AppBskyActorGetProfile = __importStar(require_getProfile());
      var AppBskyActorGetProfiles = __importStar(require_getProfiles());
      var AppBskyActorGetSuggestions = __importStar(require_getSuggestions());
      var AppBskyActorPutPreferences = __importStar(require_putPreferences());
      var AppBskyActorSearchActors = __importStar(require_searchActors());
      var AppBskyActorSearchActorsTypeahead = __importStar(require_searchActorsTypeahead());
      var AppBskyFeedDescribeFeedGenerator = __importStar(require_describeFeedGenerator());
      var AppBskyFeedGetActorFeeds = __importStar(require_getActorFeeds());
      var AppBskyFeedGetActorLikes = __importStar(require_getActorLikes());
      var AppBskyFeedGetAuthorFeed = __importStar(require_getAuthorFeed());
      var AppBskyFeedGetFeed = __importStar(require_getFeed());
      var AppBskyFeedGetFeedGenerator = __importStar(require_getFeedGenerator());
      var AppBskyFeedGetFeedGenerators = __importStar(require_getFeedGenerators());
      var AppBskyFeedGetFeedSkeleton = __importStar(require_getFeedSkeleton());
      var AppBskyFeedGetLikes = __importStar(require_getLikes());
      var AppBskyFeedGetListFeed = __importStar(require_getListFeed());
      var AppBskyFeedGetPostThread = __importStar(require_getPostThread());
      var AppBskyFeedGetPosts = __importStar(require_getPosts());
      var AppBskyFeedGetRepostedBy = __importStar(require_getRepostedBy());
      var AppBskyFeedGetSuggestedFeeds = __importStar(require_getSuggestedFeeds());
      var AppBskyFeedGetTimeline = __importStar(require_getTimeline());
      var AppBskyFeedSearchPosts = __importStar(require_searchPosts());
      var AppBskyGraphGetBlocks = __importStar(require_getBlocks2());
      var AppBskyGraphGetFollowers = __importStar(require_getFollowers());
      var AppBskyGraphGetFollows = __importStar(require_getFollows());
      var AppBskyGraphGetList = __importStar(require_getList());
      var AppBskyGraphGetListBlocks = __importStar(require_getListBlocks());
      var AppBskyGraphGetListMutes = __importStar(require_getListMutes());
      var AppBskyGraphGetLists = __importStar(require_getLists());
      var AppBskyGraphGetMutes = __importStar(require_getMutes());
      var AppBskyGraphGetRelationships = __importStar(require_getRelationships());
      var AppBskyGraphGetSuggestedFollowsByActor = __importStar(require_getSuggestedFollowsByActor());
      var AppBskyGraphMuteActor = __importStar(require_muteActor());
      var AppBskyGraphMuteActorList = __importStar(require_muteActorList());
      var AppBskyGraphUnmuteActor = __importStar(require_unmuteActor());
      var AppBskyGraphUnmuteActorList = __importStar(require_unmuteActorList());
      var AppBskyLabelerGetServices = __importStar(require_getServices());
      var AppBskyNotificationGetUnreadCount = __importStar(require_getUnreadCount());
      var AppBskyNotificationListNotifications = __importStar(require_listNotifications());
      var AppBskyNotificationRegisterPush = __importStar(require_registerPush());
      var AppBskyNotificationUpdateSeen = __importStar(require_updateSeen());
      var AppBskyUnspeccedGetPopularFeedGenerators = __importStar(require_getPopularFeedGenerators());
      var AppBskyUnspeccedGetTaggedSuggestions = __importStar(require_getTaggedSuggestions());
      var AppBskyUnspeccedSearchActorsSkeleton = __importStar(require_searchActorsSkeleton());
      var AppBskyUnspeccedSearchPostsSkeleton = __importStar(require_searchPostsSkeleton());
      var ToolsOzoneCommunicationCreateTemplate = __importStar(require_createTemplate());
      var ToolsOzoneCommunicationDeleteTemplate = __importStar(require_deleteTemplate());
      var ToolsOzoneCommunicationListTemplates = __importStar(require_listTemplates());
      var ToolsOzoneCommunicationUpdateTemplate = __importStar(require_updateTemplate());
      var ToolsOzoneModerationEmitEvent = __importStar(require_emitEvent());
      var ToolsOzoneModerationGetEvent = __importStar(require_getEvent());
      var ToolsOzoneModerationGetRecord = __importStar(require_getRecord3());
      var ToolsOzoneModerationGetRepo = __importStar(require_getRepo2());
      var ToolsOzoneModerationQueryEvents = __importStar(require_queryEvents());
      var ToolsOzoneModerationQueryStatuses = __importStar(require_queryStatuses());
      var ToolsOzoneModerationSearchRepos = __importStar(require_searchRepos());
      exports.ComAtprotoAdminDefs = __importStar(require_defs());
      exports.ComAtprotoAdminDeleteAccount = __importStar(require_deleteAccount());
      exports.ComAtprotoAdminDisableAccountInvites = __importStar(require_disableAccountInvites());
      exports.ComAtprotoAdminDisableInviteCodes = __importStar(require_disableInviteCodes());
      exports.ComAtprotoAdminEnableAccountInvites = __importStar(require_enableAccountInvites());
      exports.ComAtprotoAdminGetAccountInfo = __importStar(require_getAccountInfo());
      exports.ComAtprotoAdminGetAccountInfos = __importStar(require_getAccountInfos());
      exports.ComAtprotoAdminGetInviteCodes = __importStar(require_getInviteCodes());
      exports.ComAtprotoAdminGetSubjectStatus = __importStar(require_getSubjectStatus());
      exports.ComAtprotoAdminSendEmail = __importStar(require_sendEmail());
      exports.ComAtprotoAdminUpdateAccountEmail = __importStar(require_updateAccountEmail());
      exports.ComAtprotoAdminUpdateAccountHandle = __importStar(require_updateAccountHandle());
      exports.ComAtprotoAdminUpdateAccountPassword = __importStar(require_updateAccountPassword());
      exports.ComAtprotoAdminUpdateSubjectStatus = __importStar(require_updateSubjectStatus());
      exports.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(require_getRecommendedDidCredentials());
      exports.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(require_requestPlcOperationSignature());
      exports.ComAtprotoIdentityResolveHandle = __importStar(require_resolveHandle());
      exports.ComAtprotoIdentitySignPlcOperation = __importStar(require_signPlcOperation());
      exports.ComAtprotoIdentitySubmitPlcOperation = __importStar(require_submitPlcOperation());
      exports.ComAtprotoIdentityUpdateHandle = __importStar(require_updateHandle());
      exports.ComAtprotoLabelDefs = __importStar(require_defs2());
      exports.ComAtprotoLabelQueryLabels = __importStar(require_queryLabels());
      exports.ComAtprotoLabelSubscribeLabels = __importStar(require_subscribeLabels());
      exports.ComAtprotoModerationCreateReport = __importStar(require_createReport());
      exports.ComAtprotoModerationDefs = __importStar(require_defs3());
      exports.ComAtprotoRepoApplyWrites = __importStar(require_applyWrites());
      exports.ComAtprotoRepoCreateRecord = __importStar(require_createRecord());
      exports.ComAtprotoRepoDeleteRecord = __importStar(require_deleteRecord());
      exports.ComAtprotoRepoDescribeRepo = __importStar(require_describeRepo());
      exports.ComAtprotoRepoGetRecord = __importStar(require_getRecord());
      exports.ComAtprotoRepoImportRepo = __importStar(require_importRepo());
      exports.ComAtprotoRepoListMissingBlobs = __importStar(require_listMissingBlobs());
      exports.ComAtprotoRepoListRecords = __importStar(require_listRecords());
      exports.ComAtprotoRepoPutRecord = __importStar(require_putRecord());
      exports.ComAtprotoRepoStrongRef = __importStar(require_strongRef());
      exports.ComAtprotoRepoUploadBlob = __importStar(require_uploadBlob());
      exports.ComAtprotoServerActivateAccount = __importStar(require_activateAccount());
      exports.ComAtprotoServerCheckAccountStatus = __importStar(require_checkAccountStatus());
      exports.ComAtprotoServerConfirmEmail = __importStar(require_confirmEmail());
      exports.ComAtprotoServerCreateAccount = __importStar(require_createAccount());
      exports.ComAtprotoServerCreateAppPassword = __importStar(require_createAppPassword());
      exports.ComAtprotoServerCreateInviteCode = __importStar(require_createInviteCode());
      exports.ComAtprotoServerCreateInviteCodes = __importStar(require_createInviteCodes());
      exports.ComAtprotoServerCreateSession = __importStar(require_createSession());
      exports.ComAtprotoServerDeactivateAccount = __importStar(require_deactivateAccount());
      exports.ComAtprotoServerDefs = __importStar(require_defs4());
      exports.ComAtprotoServerDeleteAccount = __importStar(require_deleteAccount2());
      exports.ComAtprotoServerDeleteSession = __importStar(require_deleteSession());
      exports.ComAtprotoServerDescribeServer = __importStar(require_describeServer());
      exports.ComAtprotoServerGetAccountInviteCodes = __importStar(require_getAccountInviteCodes());
      exports.ComAtprotoServerGetServiceAuth = __importStar(require_getServiceAuth());
      exports.ComAtprotoServerGetSession = __importStar(require_getSession());
      exports.ComAtprotoServerListAppPasswords = __importStar(require_listAppPasswords());
      exports.ComAtprotoServerRefreshSession = __importStar(require_refreshSession());
      exports.ComAtprotoServerRequestAccountDelete = __importStar(require_requestAccountDelete());
      exports.ComAtprotoServerRequestEmailConfirmation = __importStar(require_requestEmailConfirmation());
      exports.ComAtprotoServerRequestEmailUpdate = __importStar(require_requestEmailUpdate());
      exports.ComAtprotoServerRequestPasswordReset = __importStar(require_requestPasswordReset());
      exports.ComAtprotoServerReserveSigningKey = __importStar(require_reserveSigningKey());
      exports.ComAtprotoServerResetPassword = __importStar(require_resetPassword());
      exports.ComAtprotoServerRevokeAppPassword = __importStar(require_revokeAppPassword());
      exports.ComAtprotoServerUpdateEmail = __importStar(require_updateEmail());
      exports.ComAtprotoSyncGetBlob = __importStar(require_getBlob());
      exports.ComAtprotoSyncGetBlocks = __importStar(require_getBlocks());
      exports.ComAtprotoSyncGetCheckout = __importStar(require_getCheckout());
      exports.ComAtprotoSyncGetHead = __importStar(require_getHead());
      exports.ComAtprotoSyncGetLatestCommit = __importStar(require_getLatestCommit());
      exports.ComAtprotoSyncGetRecord = __importStar(require_getRecord2());
      exports.ComAtprotoSyncGetRepo = __importStar(require_getRepo());
      exports.ComAtprotoSyncListBlobs = __importStar(require_listBlobs());
      exports.ComAtprotoSyncListRepos = __importStar(require_listRepos());
      exports.ComAtprotoSyncNotifyOfUpdate = __importStar(require_notifyOfUpdate());
      exports.ComAtprotoSyncRequestCrawl = __importStar(require_requestCrawl());
      exports.ComAtprotoSyncSubscribeRepos = __importStar(require_subscribeRepos());
      exports.ComAtprotoTempCheckSignupQueue = __importStar(require_checkSignupQueue());
      exports.ComAtprotoTempFetchLabels = __importStar(require_fetchLabels());
      exports.ComAtprotoTempRequestPhoneVerification = __importStar(require_requestPhoneVerification());
      exports.AppBskyActorDefs = __importStar(require_defs5());
      exports.AppBskyActorGetPreferences = __importStar(require_getPreferences());
      exports.AppBskyActorGetProfile = __importStar(require_getProfile());
      exports.AppBskyActorGetProfiles = __importStar(require_getProfiles());
      exports.AppBskyActorGetSuggestions = __importStar(require_getSuggestions());
      exports.AppBskyActorProfile = __importStar(require_profile());
      exports.AppBskyActorPutPreferences = __importStar(require_putPreferences());
      exports.AppBskyActorSearchActors = __importStar(require_searchActors());
      exports.AppBskyActorSearchActorsTypeahead = __importStar(require_searchActorsTypeahead());
      exports.AppBskyEmbedExternal = __importStar(require_external2());
      exports.AppBskyEmbedImages = __importStar(require_images());
      exports.AppBskyEmbedRecord = __importStar(require_record());
      exports.AppBskyEmbedRecordWithMedia = __importStar(require_recordWithMedia());
      exports.AppBskyFeedDefs = __importStar(require_defs6());
      exports.AppBskyFeedDescribeFeedGenerator = __importStar(require_describeFeedGenerator());
      exports.AppBskyFeedGenerator = __importStar(require_generator());
      exports.AppBskyFeedGetActorFeeds = __importStar(require_getActorFeeds());
      exports.AppBskyFeedGetActorLikes = __importStar(require_getActorLikes());
      exports.AppBskyFeedGetAuthorFeed = __importStar(require_getAuthorFeed());
      exports.AppBskyFeedGetFeed = __importStar(require_getFeed());
      exports.AppBskyFeedGetFeedGenerator = __importStar(require_getFeedGenerator());
      exports.AppBskyFeedGetFeedGenerators = __importStar(require_getFeedGenerators());
      exports.AppBskyFeedGetFeedSkeleton = __importStar(require_getFeedSkeleton());
      exports.AppBskyFeedGetLikes = __importStar(require_getLikes());
      exports.AppBskyFeedGetListFeed = __importStar(require_getListFeed());
      exports.AppBskyFeedGetPostThread = __importStar(require_getPostThread());
      exports.AppBskyFeedGetPosts = __importStar(require_getPosts());
      exports.AppBskyFeedGetRepostedBy = __importStar(require_getRepostedBy());
      exports.AppBskyFeedGetSuggestedFeeds = __importStar(require_getSuggestedFeeds());
      exports.AppBskyFeedGetTimeline = __importStar(require_getTimeline());
      exports.AppBskyFeedLike = __importStar(require_like());
      exports.AppBskyFeedPost = __importStar(require_post());
      exports.AppBskyFeedRepost = __importStar(require_repost());
      exports.AppBskyFeedSearchPosts = __importStar(require_searchPosts());
      exports.AppBskyFeedThreadgate = __importStar(require_threadgate());
      exports.AppBskyGraphBlock = __importStar(require_block());
      exports.AppBskyGraphDefs = __importStar(require_defs7());
      exports.AppBskyGraphFollow = __importStar(require_follow());
      exports.AppBskyGraphGetBlocks = __importStar(require_getBlocks2());
      exports.AppBskyGraphGetFollowers = __importStar(require_getFollowers());
      exports.AppBskyGraphGetFollows = __importStar(require_getFollows());
      exports.AppBskyGraphGetList = __importStar(require_getList());
      exports.AppBskyGraphGetListBlocks = __importStar(require_getListBlocks());
      exports.AppBskyGraphGetListMutes = __importStar(require_getListMutes());
      exports.AppBskyGraphGetLists = __importStar(require_getLists());
      exports.AppBskyGraphGetMutes = __importStar(require_getMutes());
      exports.AppBskyGraphGetRelationships = __importStar(require_getRelationships());
      exports.AppBskyGraphGetSuggestedFollowsByActor = __importStar(require_getSuggestedFollowsByActor());
      exports.AppBskyGraphList = __importStar(require_list());
      exports.AppBskyGraphListblock = __importStar(require_listblock());
      exports.AppBskyGraphListitem = __importStar(require_listitem());
      exports.AppBskyGraphMuteActor = __importStar(require_muteActor());
      exports.AppBskyGraphMuteActorList = __importStar(require_muteActorList());
      exports.AppBskyGraphUnmuteActor = __importStar(require_unmuteActor());
      exports.AppBskyGraphUnmuteActorList = __importStar(require_unmuteActorList());
      exports.AppBskyLabelerDefs = __importStar(require_defs8());
      exports.AppBskyLabelerGetServices = __importStar(require_getServices());
      exports.AppBskyLabelerService = __importStar(require_service());
      exports.AppBskyNotificationGetUnreadCount = __importStar(require_getUnreadCount());
      exports.AppBskyNotificationListNotifications = __importStar(require_listNotifications());
      exports.AppBskyNotificationRegisterPush = __importStar(require_registerPush());
      exports.AppBskyNotificationUpdateSeen = __importStar(require_updateSeen());
      exports.AppBskyRichtextFacet = __importStar(require_facet());
      exports.AppBskyUnspeccedDefs = __importStar(require_defs9());
      exports.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(require_getPopularFeedGenerators());
      exports.AppBskyUnspeccedGetTaggedSuggestions = __importStar(require_getTaggedSuggestions());
      exports.AppBskyUnspeccedSearchActorsSkeleton = __importStar(require_searchActorsSkeleton());
      exports.AppBskyUnspeccedSearchPostsSkeleton = __importStar(require_searchPostsSkeleton());
      exports.ToolsOzoneCommunicationCreateTemplate = __importStar(require_createTemplate());
      exports.ToolsOzoneCommunicationDefs = __importStar(require_defs10());
      exports.ToolsOzoneCommunicationDeleteTemplate = __importStar(require_deleteTemplate());
      exports.ToolsOzoneCommunicationListTemplates = __importStar(require_listTemplates());
      exports.ToolsOzoneCommunicationUpdateTemplate = __importStar(require_updateTemplate());
      exports.ToolsOzoneModerationDefs = __importStar(require_defs11());
      exports.ToolsOzoneModerationEmitEvent = __importStar(require_emitEvent());
      exports.ToolsOzoneModerationGetEvent = __importStar(require_getEvent());
      exports.ToolsOzoneModerationGetRecord = __importStar(require_getRecord3());
      exports.ToolsOzoneModerationGetRepo = __importStar(require_getRepo2());
      exports.ToolsOzoneModerationQueryEvents = __importStar(require_queryEvents());
      exports.ToolsOzoneModerationQueryStatuses = __importStar(require_queryStatuses());
      exports.ToolsOzoneModerationSearchRepos = __importStar(require_searchRepos());
      exports.COM_ATPROTO_MODERATION = {
        DefsReasonSpam: "com.atproto.moderation.defs#reasonSpam",
        DefsReasonViolation: "com.atproto.moderation.defs#reasonViolation",
        DefsReasonMisleading: "com.atproto.moderation.defs#reasonMisleading",
        DefsReasonSexual: "com.atproto.moderation.defs#reasonSexual",
        DefsReasonRude: "com.atproto.moderation.defs#reasonRude",
        DefsReasonOther: "com.atproto.moderation.defs#reasonOther",
        DefsReasonAppeal: "com.atproto.moderation.defs#reasonAppeal"
      };
      exports.APP_BSKY_GRAPH = {
        DefsModlist: "app.bsky.graph.defs#modlist",
        DefsCuratelist: "app.bsky.graph.defs#curatelist"
      };
      exports.TOOLS_OZONE_MODERATION = {
        DefsReviewOpen: "tools.ozone.moderation.defs#reviewOpen",
        DefsReviewEscalated: "tools.ozone.moderation.defs#reviewEscalated",
        DefsReviewClosed: "tools.ozone.moderation.defs#reviewClosed",
        DefsReviewNone: "tools.ozone.moderation.defs#reviewNone"
      };
      var AtpBaseClient = class {
        constructor() {
          Object.defineProperty(this, "xrpc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new xrpc_1.Client()
          });
          this.xrpc.addLexicons(lexicons_1.schemas);
        }
        service(serviceUri) {
          return new AtpServiceClient(this, this.xrpc.service(serviceUri));
        }
      };
      exports.AtpBaseClient = AtpBaseClient;
      var AtpServiceClient = class {
        constructor(baseClient, xrpcService) {
          Object.defineProperty(this, "_baseClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "xrpc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "com", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "tools", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._baseClient = baseClient;
          this.xrpc = xrpcService;
          this.com = new ComNS(this);
          this.app = new AppNS(this);
          this.tools = new ToolsNS(this);
        }
        setHeader(key, value) {
          this.xrpc.setHeader(key, value);
        }
      };
      exports.AtpServiceClient = AtpServiceClient;
      var ComNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "atproto", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.atproto = new ComAtprotoNS(service);
        }
      };
      exports.ComNS = ComNS;
      var ComAtprotoNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "admin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "identity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "repo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "sync", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "temp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.admin = new ComAtprotoAdminNS(service);
          this.identity = new ComAtprotoIdentityNS(service);
          this.label = new ComAtprotoLabelNS(service);
          this.moderation = new ComAtprotoModerationNS(service);
          this.repo = new ComAtprotoRepoNS(service);
          this.server = new ComAtprotoServerNS(service);
          this.sync = new ComAtprotoSyncNS(service);
          this.temp = new ComAtprotoTempNS(service);
        }
      };
      exports.ComAtprotoNS = ComAtprotoNS;
      var ComAtprotoAdminNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        deleteAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.deleteAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminDeleteAccount.toKnownErr(e);
          });
        }
        disableAccountInvites(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.disableAccountInvites", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminDisableAccountInvites.toKnownErr(e);
          });
        }
        disableInviteCodes(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.disableInviteCodes", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminDisableInviteCodes.toKnownErr(e);
          });
        }
        enableAccountInvites(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.enableAccountInvites", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminEnableAccountInvites.toKnownErr(e);
          });
        }
        getAccountInfo(params, opts) {
          return this._service.xrpc.call("com.atproto.admin.getAccountInfo", params, void 0, opts).catch((e) => {
            throw ComAtprotoAdminGetAccountInfo.toKnownErr(e);
          });
        }
        getAccountInfos(params, opts) {
          return this._service.xrpc.call("com.atproto.admin.getAccountInfos", params, void 0, opts).catch((e) => {
            throw ComAtprotoAdminGetAccountInfos.toKnownErr(e);
          });
        }
        getInviteCodes(params, opts) {
          return this._service.xrpc.call("com.atproto.admin.getInviteCodes", params, void 0, opts).catch((e) => {
            throw ComAtprotoAdminGetInviteCodes.toKnownErr(e);
          });
        }
        getSubjectStatus(params, opts) {
          return this._service.xrpc.call("com.atproto.admin.getSubjectStatus", params, void 0, opts).catch((e) => {
            throw ComAtprotoAdminGetSubjectStatus.toKnownErr(e);
          });
        }
        sendEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.sendEmail", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminSendEmail.toKnownErr(e);
          });
        }
        updateAccountEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateAccountEmail", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminUpdateAccountEmail.toKnownErr(e);
          });
        }
        updateAccountHandle(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateAccountHandle", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminUpdateAccountHandle.toKnownErr(e);
          });
        }
        updateAccountPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateAccountPassword", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminUpdateAccountPassword.toKnownErr(e);
          });
        }
        updateSubjectStatus(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateSubjectStatus", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminUpdateSubjectStatus.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoAdminNS = ComAtprotoAdminNS;
      var ComAtprotoIdentityNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        getRecommendedDidCredentials(params, opts) {
          return this._service.xrpc.call("com.atproto.identity.getRecommendedDidCredentials", params, void 0, opts).catch((e) => {
            throw ComAtprotoIdentityGetRecommendedDidCredentials.toKnownErr(e);
          });
        }
        requestPlcOperationSignature(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.requestPlcOperationSignature", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentityRequestPlcOperationSignature.toKnownErr(e);
          });
        }
        resolveHandle(params, opts) {
          return this._service.xrpc.call("com.atproto.identity.resolveHandle", params, void 0, opts).catch((e) => {
            throw ComAtprotoIdentityResolveHandle.toKnownErr(e);
          });
        }
        signPlcOperation(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.signPlcOperation", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentitySignPlcOperation.toKnownErr(e);
          });
        }
        submitPlcOperation(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.submitPlcOperation", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentitySubmitPlcOperation.toKnownErr(e);
          });
        }
        updateHandle(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.updateHandle", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentityUpdateHandle.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
      var ComAtprotoLabelNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        queryLabels(params, opts) {
          return this._service.xrpc.call("com.atproto.label.queryLabels", params, void 0, opts).catch((e) => {
            throw ComAtprotoLabelQueryLabels.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoLabelNS = ComAtprotoLabelNS;
      var ComAtprotoModerationNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        createReport(data, opts) {
          return this._service.xrpc.call("com.atproto.moderation.createReport", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoModerationCreateReport.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoModerationNS = ComAtprotoModerationNS;
      var ComAtprotoRepoNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        applyWrites(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.applyWrites", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoApplyWrites.toKnownErr(e);
          });
        }
        createRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.createRecord", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoCreateRecord.toKnownErr(e);
          });
        }
        deleteRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.deleteRecord", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoDeleteRecord.toKnownErr(e);
          });
        }
        describeRepo(params, opts) {
          return this._service.xrpc.call("com.atproto.repo.describeRepo", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoDescribeRepo.toKnownErr(e);
          });
        }
        getRecord(params, opts) {
          return this._service.xrpc.call("com.atproto.repo.getRecord", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoGetRecord.toKnownErr(e);
          });
        }
        importRepo(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.importRepo", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoImportRepo.toKnownErr(e);
          });
        }
        listMissingBlobs(params, opts) {
          return this._service.xrpc.call("com.atproto.repo.listMissingBlobs", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoListMissingBlobs.toKnownErr(e);
          });
        }
        listRecords(params, opts) {
          return this._service.xrpc.call("com.atproto.repo.listRecords", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoListRecords.toKnownErr(e);
          });
        }
        putRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.putRecord", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoPutRecord.toKnownErr(e);
          });
        }
        uploadBlob(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.uploadBlob", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoUploadBlob.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoRepoNS = ComAtprotoRepoNS;
      var ComAtprotoServerNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        activateAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.activateAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerActivateAccount.toKnownErr(e);
          });
        }
        checkAccountStatus(params, opts) {
          return this._service.xrpc.call("com.atproto.server.checkAccountStatus", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerCheckAccountStatus.toKnownErr(e);
          });
        }
        confirmEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.server.confirmEmail", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerConfirmEmail.toKnownErr(e);
          });
        }
        createAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateAccount.toKnownErr(e);
          });
        }
        createAppPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createAppPassword", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateAppPassword.toKnownErr(e);
          });
        }
        createInviteCode(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createInviteCode", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateInviteCode.toKnownErr(e);
          });
        }
        createInviteCodes(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createInviteCodes", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateInviteCodes.toKnownErr(e);
          });
        }
        createSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createSession", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateSession.toKnownErr(e);
          });
        }
        deactivateAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.deactivateAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerDeactivateAccount.toKnownErr(e);
          });
        }
        deleteAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.deleteAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerDeleteAccount.toKnownErr(e);
          });
        }
        deleteSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.deleteSession", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerDeleteSession.toKnownErr(e);
          });
        }
        describeServer(params, opts) {
          return this._service.xrpc.call("com.atproto.server.describeServer", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerDescribeServer.toKnownErr(e);
          });
        }
        getAccountInviteCodes(params, opts) {
          return this._service.xrpc.call("com.atproto.server.getAccountInviteCodes", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e);
          });
        }
        getServiceAuth(params, opts) {
          return this._service.xrpc.call("com.atproto.server.getServiceAuth", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerGetServiceAuth.toKnownErr(e);
          });
        }
        getSession(params, opts) {
          return this._service.xrpc.call("com.atproto.server.getSession", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerGetSession.toKnownErr(e);
          });
        }
        listAppPasswords(params, opts) {
          return this._service.xrpc.call("com.atproto.server.listAppPasswords", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerListAppPasswords.toKnownErr(e);
          });
        }
        refreshSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.refreshSession", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRefreshSession.toKnownErr(e);
          });
        }
        requestAccountDelete(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestAccountDelete", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRequestAccountDelete.toKnownErr(e);
          });
        }
        requestEmailConfirmation(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestEmailConfirmation", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRequestEmailConfirmation.toKnownErr(e);
          });
        }
        requestEmailUpdate(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestEmailUpdate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRequestEmailUpdate.toKnownErr(e);
          });
        }
        requestPasswordReset(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestPasswordReset", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRequestPasswordReset.toKnownErr(e);
          });
        }
        reserveSigningKey(data, opts) {
          return this._service.xrpc.call("com.atproto.server.reserveSigningKey", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerReserveSigningKey.toKnownErr(e);
          });
        }
        resetPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.resetPassword", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerResetPassword.toKnownErr(e);
          });
        }
        revokeAppPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.revokeAppPassword", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRevokeAppPassword.toKnownErr(e);
          });
        }
        updateEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.server.updateEmail", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerUpdateEmail.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoServerNS = ComAtprotoServerNS;
      var ComAtprotoSyncNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        getBlob(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getBlob", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetBlob.toKnownErr(e);
          });
        }
        getBlocks(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getBlocks", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetBlocks.toKnownErr(e);
          });
        }
        getCheckout(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getCheckout", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetCheckout.toKnownErr(e);
          });
        }
        getHead(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getHead", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetHead.toKnownErr(e);
          });
        }
        getLatestCommit(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getLatestCommit", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetLatestCommit.toKnownErr(e);
          });
        }
        getRecord(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getRecord", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetRecord.toKnownErr(e);
          });
        }
        getRepo(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getRepo", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetRepo.toKnownErr(e);
          });
        }
        listBlobs(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.listBlobs", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncListBlobs.toKnownErr(e);
          });
        }
        listRepos(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.listRepos", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncListRepos.toKnownErr(e);
          });
        }
        notifyOfUpdate(data, opts) {
          return this._service.xrpc.call("com.atproto.sync.notifyOfUpdate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoSyncNotifyOfUpdate.toKnownErr(e);
          });
        }
        requestCrawl(data, opts) {
          return this._service.xrpc.call("com.atproto.sync.requestCrawl", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoSyncRequestCrawl.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoSyncNS = ComAtprotoSyncNS;
      var ComAtprotoTempNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        checkSignupQueue(params, opts) {
          return this._service.xrpc.call("com.atproto.temp.checkSignupQueue", params, void 0, opts).catch((e) => {
            throw ComAtprotoTempCheckSignupQueue.toKnownErr(e);
          });
        }
        fetchLabels(params, opts) {
          return this._service.xrpc.call("com.atproto.temp.fetchLabels", params, void 0, opts).catch((e) => {
            throw ComAtprotoTempFetchLabels.toKnownErr(e);
          });
        }
        requestPhoneVerification(data, opts) {
          return this._service.xrpc.call("com.atproto.temp.requestPhoneVerification", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoTempRequestPhoneVerification.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoTempNS = ComAtprotoTempNS;
      var AppNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "bsky", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.bsky = new AppBskyNS(service);
        }
      };
      exports.AppNS = AppNS;
      var AppBskyNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "embed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "feed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "labeler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "notification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "richtext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "unspecced", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.actor = new AppBskyActorNS(service);
          this.embed = new AppBskyEmbedNS(service);
          this.feed = new AppBskyFeedNS(service);
          this.graph = new AppBskyGraphNS(service);
          this.labeler = new AppBskyLabelerNS(service);
          this.notification = new AppBskyNotificationNS(service);
          this.richtext = new AppBskyRichtextNS(service);
          this.unspecced = new AppBskyUnspeccedNS(service);
        }
      };
      exports.AppBskyNS = AppBskyNS;
      var AppBskyActorNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "profile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.profile = new ProfileRecord(service);
        }
        getPreferences(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.getPreferences", params, void 0, opts).catch((e) => {
            throw AppBskyActorGetPreferences.toKnownErr(e);
          });
        }
        getProfile(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.getProfile", params, void 0, opts).catch((e) => {
            throw AppBskyActorGetProfile.toKnownErr(e);
          });
        }
        getProfiles(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.getProfiles", params, void 0, opts).catch((e) => {
            throw AppBskyActorGetProfiles.toKnownErr(e);
          });
        }
        getSuggestions(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.getSuggestions", params, void 0, opts).catch((e) => {
            throw AppBskyActorGetSuggestions.toKnownErr(e);
          });
        }
        putPreferences(data, opts) {
          return this._service.xrpc.call("app.bsky.actor.putPreferences", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyActorPutPreferences.toKnownErr(e);
          });
        }
        searchActors(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.searchActors", params, void 0, opts).catch((e) => {
            throw AppBskyActorSearchActors.toKnownErr(e);
          });
        }
        searchActorsTypeahead(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.searchActorsTypeahead", params, void 0, opts).catch((e) => {
            throw AppBskyActorSearchActorsTypeahead.toKnownErr(e);
          });
        }
      };
      exports.AppBskyActorNS = AppBskyActorNS;
      var ProfileRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.actor.profile"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.actor.profile"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.actor.profile";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.actor.profile", rkey: "self" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.actor.profile" }, params), { headers });
          });
        }
      };
      exports.ProfileRecord = ProfileRecord;
      var AppBskyEmbedNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
      };
      exports.AppBskyEmbedNS = AppBskyEmbedNS;
      var AppBskyFeedNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "generator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "like", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "repost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "threadgate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.generator = new GeneratorRecord(service);
          this.like = new LikeRecord(service);
          this.post = new PostRecord(service);
          this.repost = new RepostRecord(service);
          this.threadgate = new ThreadgateRecord(service);
        }
        describeFeedGenerator(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.describeFeedGenerator", params, void 0, opts).catch((e) => {
            throw AppBskyFeedDescribeFeedGenerator.toKnownErr(e);
          });
        }
        getActorFeeds(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getActorFeeds", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetActorFeeds.toKnownErr(e);
          });
        }
        getActorLikes(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getActorLikes", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetActorLikes.toKnownErr(e);
          });
        }
        getAuthorFeed(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getAuthorFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetAuthorFeed.toKnownErr(e);
          });
        }
        getFeed(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeed.toKnownErr(e);
          });
        }
        getFeedGenerator(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedGenerator", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeedGenerator.toKnownErr(e);
          });
        }
        getFeedGenerators(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedGenerators", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeedGenerators.toKnownErr(e);
          });
        }
        getFeedSkeleton(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeedSkeleton.toKnownErr(e);
          });
        }
        getLikes(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getLikes", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetLikes.toKnownErr(e);
          });
        }
        getListFeed(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getListFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetListFeed.toKnownErr(e);
          });
        }
        getPostThread(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getPostThread", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetPostThread.toKnownErr(e);
          });
        }
        getPosts(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getPosts", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetPosts.toKnownErr(e);
          });
        }
        getRepostedBy(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getRepostedBy", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetRepostedBy.toKnownErr(e);
          });
        }
        getSuggestedFeeds(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getSuggestedFeeds", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetSuggestedFeeds.toKnownErr(e);
          });
        }
        getTimeline(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getTimeline", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetTimeline.toKnownErr(e);
          });
        }
        searchPosts(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.searchPosts", params, void 0, opts).catch((e) => {
            throw AppBskyFeedSearchPosts.toKnownErr(e);
          });
        }
      };
      exports.AppBskyFeedNS = AppBskyFeedNS;
      var GeneratorRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.generator"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.generator"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.generator";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.generator" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.generator" }, params), { headers });
          });
        }
      };
      exports.GeneratorRecord = GeneratorRecord;
      var LikeRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.like"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.like"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.like";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.like" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.like" }, params), { headers });
          });
        }
      };
      exports.LikeRecord = LikeRecord;
      var PostRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.post"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.post"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.post";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.post" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.post" }, params), { headers });
          });
        }
      };
      exports.PostRecord = PostRecord;
      var RepostRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.repost"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.repost"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.repost";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.repost" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.repost" }, params), { headers });
          });
        }
      };
      exports.RepostRecord = RepostRecord;
      var ThreadgateRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.threadgate"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.threadgate"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.threadgate";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.threadgate" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.threadgate" }, params), { headers });
          });
        }
      };
      exports.ThreadgateRecord = ThreadgateRecord;
      var AppBskyGraphNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "block", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "follow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "list", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "listblock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "listitem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.block = new BlockRecord(service);
          this.follow = new FollowRecord(service);
          this.list = new ListRecord(service);
          this.listblock = new ListblockRecord(service);
          this.listitem = new ListitemRecord(service);
        }
        getBlocks(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getBlocks", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetBlocks.toKnownErr(e);
          });
        }
        getFollowers(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getFollowers", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetFollowers.toKnownErr(e);
          });
        }
        getFollows(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getFollows", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetFollows.toKnownErr(e);
          });
        }
        getList(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getList", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetList.toKnownErr(e);
          });
        }
        getListBlocks(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getListBlocks", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetListBlocks.toKnownErr(e);
          });
        }
        getListMutes(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getListMutes", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetListMutes.toKnownErr(e);
          });
        }
        getLists(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getLists", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetLists.toKnownErr(e);
          });
        }
        getMutes(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getMutes", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetMutes.toKnownErr(e);
          });
        }
        getRelationships(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getRelationships", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetRelationships.toKnownErr(e);
          });
        }
        getSuggestedFollowsByActor(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getSuggestedFollowsByActor", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetSuggestedFollowsByActor.toKnownErr(e);
          });
        }
        muteActor(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.muteActor", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyGraphMuteActor.toKnownErr(e);
          });
        }
        muteActorList(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.muteActorList", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyGraphMuteActorList.toKnownErr(e);
          });
        }
        unmuteActor(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.unmuteActor", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyGraphUnmuteActor.toKnownErr(e);
          });
        }
        unmuteActorList(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.unmuteActorList", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyGraphUnmuteActorList.toKnownErr(e);
          });
        }
      };
      exports.AppBskyGraphNS = AppBskyGraphNS;
      var BlockRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.block"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.block"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.block";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.block" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.block" }, params), { headers });
          });
        }
      };
      exports.BlockRecord = BlockRecord;
      var FollowRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.follow"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.follow"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.follow";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.follow" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.follow" }, params), { headers });
          });
        }
      };
      exports.FollowRecord = FollowRecord;
      var ListRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.list"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.list"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.list";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.list" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.list" }, params), { headers });
          });
        }
      };
      exports.ListRecord = ListRecord;
      var ListblockRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.listblock"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.listblock"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.listblock";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.listblock" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.listblock" }, params), { headers });
          });
        }
      };
      exports.ListblockRecord = ListblockRecord;
      var ListitemRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.listitem"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.listitem"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.listitem";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.listitem" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.listitem" }, params), { headers });
          });
        }
      };
      exports.ListitemRecord = ListitemRecord;
      var AppBskyLabelerNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.service = new ServiceRecord(service);
        }
        getServices(params, opts) {
          return this._service.xrpc.call("app.bsky.labeler.getServices", params, void 0, opts).catch((e) => {
            throw AppBskyLabelerGetServices.toKnownErr(e);
          });
        }
      };
      exports.AppBskyLabelerNS = AppBskyLabelerNS;
      var ServiceRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.labeler.service"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.labeler.service"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.labeler.service";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({
              collection: "app.bsky.labeler.service",
              rkey: "self"
            }, params), {
              record
            }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.labeler.service" }, params), { headers });
          });
        }
      };
      exports.ServiceRecord = ServiceRecord;
      var AppBskyNotificationNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        getUnreadCount(params, opts) {
          return this._service.xrpc.call("app.bsky.notification.getUnreadCount", params, void 0, opts).catch((e) => {
            throw AppBskyNotificationGetUnreadCount.toKnownErr(e);
          });
        }
        listNotifications(params, opts) {
          return this._service.xrpc.call("app.bsky.notification.listNotifications", params, void 0, opts).catch((e) => {
            throw AppBskyNotificationListNotifications.toKnownErr(e);
          });
        }
        registerPush(data, opts) {
          return this._service.xrpc.call("app.bsky.notification.registerPush", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyNotificationRegisterPush.toKnownErr(e);
          });
        }
        updateSeen(data, opts) {
          return this._service.xrpc.call("app.bsky.notification.updateSeen", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyNotificationUpdateSeen.toKnownErr(e);
          });
        }
      };
      exports.AppBskyNotificationNS = AppBskyNotificationNS;
      var AppBskyRichtextNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
      };
      exports.AppBskyRichtextNS = AppBskyRichtextNS;
      var AppBskyUnspeccedNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        getPopularFeedGenerators(params, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.getPopularFeedGenerators", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedGetPopularFeedGenerators.toKnownErr(e);
          });
        }
        getTaggedSuggestions(params, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.getTaggedSuggestions", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedGetTaggedSuggestions.toKnownErr(e);
          });
        }
        searchActorsSkeleton(params, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.searchActorsSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e);
          });
        }
        searchPostsSkeleton(params, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.searchPostsSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e);
          });
        }
      };
      exports.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
      var ToolsNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "ozone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.ozone = new ToolsOzoneNS(service);
        }
      };
      exports.ToolsNS = ToolsNS;
      var ToolsOzoneNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "communication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.communication = new ToolsOzoneCommunicationNS(service);
          this.moderation = new ToolsOzoneModerationNS(service);
        }
      };
      exports.ToolsOzoneNS = ToolsOzoneNS;
      var ToolsOzoneCommunicationNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        createTemplate(data, opts) {
          return this._service.xrpc.call("tools.ozone.communication.createTemplate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e);
          });
        }
        deleteTemplate(data, opts) {
          return this._service.xrpc.call("tools.ozone.communication.deleteTemplate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ToolsOzoneCommunicationDeleteTemplate.toKnownErr(e);
          });
        }
        listTemplates(params, opts) {
          return this._service.xrpc.call("tools.ozone.communication.listTemplates", params, void 0, opts).catch((e) => {
            throw ToolsOzoneCommunicationListTemplates.toKnownErr(e);
          });
        }
        updateTemplate(data, opts) {
          return this._service.xrpc.call("tools.ozone.communication.updateTemplate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e);
          });
        }
      };
      exports.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
      var ToolsOzoneModerationNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        emitEvent(data, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.emitEvent", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ToolsOzoneModerationEmitEvent.toKnownErr(e);
          });
        }
        getEvent(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.getEvent", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationGetEvent.toKnownErr(e);
          });
        }
        getRecord(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.getRecord", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationGetRecord.toKnownErr(e);
          });
        }
        getRepo(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.getRepo", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationGetRepo.toKnownErr(e);
          });
        }
        queryEvents(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.queryEvents", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationQueryEvents.toKnownErr(e);
          });
        }
        queryStatuses(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.queryStatuses", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationQueryStatuses.toKnownErr(e);
          });
        }
        searchRepos(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.searchRepos", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationSearchRepos.toKnownErr(e);
          });
        }
      };
      exports.ToolsOzoneModerationNS = ToolsOzoneModerationNS;
    }
  });

  // node_modules/@atproto/api/dist/agent.js
  var require_agent = __commonJS({
    "node_modules/@atproto/api/dist/agent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AtpAgent = void 0;
      var xrpc_1 = require_dist5();
      var xrpc_2 = require_dist5();
      var common_web_1 = require_dist2();
      var client_1 = require_client2();
      var const_1 = require_const();
      var MAX_LABELERS = 10;
      var REFRESH_SESSION = "com.atproto.server.refreshSession";
      var AtpAgent = class _AtpAgent {
        get com() {
          return this.api.com;
        }
        /**
         * Configures the API globally.
         */
        static configure(opts) {
          if (opts.fetch) {
            _AtpAgent.fetch = opts.fetch;
          }
          if (opts.appLabelers) {
            _AtpAgent.appLabelers = opts.appLabelers;
          }
        }
        constructor(opts) {
          Object.defineProperty(this, "service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "api", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "session", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "labelersHeader", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "proxyHeader", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "pdsUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_baseClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_persistSession", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_refreshSessionPromise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "uploadBlob", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts2) => this.api.com.atproto.repo.uploadBlob(data, opts2)
          });
          Object.defineProperty(this, "resolveHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts2) => this.api.com.atproto.identity.resolveHandle(params, opts2)
          });
          Object.defineProperty(this, "updateHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts2) => this.api.com.atproto.identity.updateHandle(data, opts2)
          });
          Object.defineProperty(this, "createModerationReport", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts2) => this.api.com.atproto.moderation.createReport(data, opts2)
          });
          this.service = opts.service instanceof URL ? opts.service : new URL(opts.service);
          this._persistSession = opts.persistSession;
          this._baseClient = new client_1.AtpBaseClient();
          this._baseClient.xrpc.fetch = this._fetch.bind(this);
          this.api = this._baseClient.service(opts.service);
        }
        clone() {
          const inst = new _AtpAgent({
            service: this.service
          });
          this.copyInto(inst);
          return inst;
        }
        copyInto(inst) {
          inst.session = this.session;
          inst.labelersHeader = this.labelersHeader;
          inst.proxyHeader = this.proxyHeader;
          inst.pdsUrl = this.pdsUrl;
          inst.api.xrpc.uri = this.pdsUrl || this.service;
        }
        withProxy(serviceType, did) {
          const inst = this.clone();
          inst.configureProxyHeader(serviceType, did);
          return inst;
        }
        /**
         * Is there any active session?
         */
        get hasSession() {
          return !!this.session;
        }
        /**
         * Sets the "Persist Session" method which can be used to store access tokens
         * as they change.
         */
        setPersistSessionHandler(handler) {
          this._persistSession = handler;
        }
        /**
         * Configures the moderation services to be applied on requests.
         * NOTE: this is called automatically by getPreferences() and the relevant moderation config
         * methods in BskyAgent instances.
         */
        configureLabelersHeader(labelerDids) {
          this.labelersHeader = labelerDids;
        }
        /**
         * Configures the atproto-proxy header to be applied on requests
         */
        configureProxyHeader(serviceType, did) {
          if (did.startsWith("did:")) {
            this.proxyHeader = `${did}#${serviceType}`;
          }
        }
        /**
         * Create a new account and hydrate its session in this agent.
         */
        createAccount(opts) {
          return __async(this, null, function* () {
            var _a2, _b;
            try {
              const res = yield this.api.com.atproto.server.createAccount(opts);
              this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: opts.email,
                emailConfirmed: false
              };
              this._updateApiEndpoint(res.data.didDoc);
              return res;
            } catch (e) {
              this.session = void 0;
              throw e;
            } finally {
              if (this.session) {
                (_a2 = this._persistSession) == null ? void 0 : _a2.call(this, "create", this.session);
              } else {
                (_b = this._persistSession) == null ? void 0 : _b.call(this, "create-failed", void 0);
              }
            }
          });
        }
        /**
         * Start a new session with this agent.
         */
        login(opts) {
          return __async(this, null, function* () {
            var _a2, _b;
            try {
              const res = yield this.api.com.atproto.server.createSession({
                identifier: opts.identifier,
                password: opts.password
              });
              this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: res.data.email,
                emailConfirmed: res.data.emailConfirmed
              };
              this._updateApiEndpoint(res.data.didDoc);
              return res;
            } catch (e) {
              this.session = void 0;
              throw e;
            } finally {
              if (this.session) {
                (_a2 = this._persistSession) == null ? void 0 : _a2.call(this, "create", this.session);
              } else {
                (_b = this._persistSession) == null ? void 0 : _b.call(this, "create-failed", void 0);
              }
            }
          });
        }
        /**
         * Resume a pre-existing session with this agent.
         */
        resumeSession(session) {
          return __async(this, null, function* () {
            var _a2, _b, _c, _d;
            try {
              this.session = session;
              const res = yield this.api.com.atproto.server.getSession();
              if (res.data.did !== this.session.did) {
                throw new xrpc_2.XRPCError(xrpc_2.ResponseType.InvalidRequest, "Invalid session", "InvalidDID");
              }
              this.session.email = res.data.email;
              this.session.handle = res.data.handle;
              this.session.emailConfirmed = res.data.emailConfirmed;
              this._updateApiEndpoint(res.data.didDoc);
              (_a2 = this._persistSession) == null ? void 0 : _a2.call(this, "update", this.session);
              return res;
            } catch (e) {
              this.session = void 0;
              if (e instanceof xrpc_2.XRPCError) {
                if ([1, 408, 425, 429, 500, 502, 503, 504, 522, 524].includes(e.status)) {
                  (_b = this._persistSession) == null ? void 0 : _b.call(this, "network-error", void 0);
                } else {
                  (_c = this._persistSession) == null ? void 0 : _c.call(this, "expired", void 0);
                }
              } else {
                (_d = this._persistSession) == null ? void 0 : _d.call(this, "network-error", void 0);
              }
              throw e;
            }
          });
        }
        /**
         * Internal helper to add authorization headers to requests.
         */
        _addHeaders(reqHeaders) {
          var _a2;
          if (!reqHeaders.authorization && ((_a2 = this.session) == null ? void 0 : _a2.accessJwt)) {
            reqHeaders = __spreadProps(__spreadValues({}, reqHeaders), {
              authorization: `Bearer ${this.session.accessJwt}`
            });
          }
          if (this.proxyHeader) {
            reqHeaders = __spreadProps(__spreadValues({}, reqHeaders), {
              "atproto-proxy": this.proxyHeader
            });
          }
          reqHeaders = __spreadProps(__spreadValues({}, reqHeaders), {
            "atproto-accept-labelers": _AtpAgent.appLabelers.map((str) => `${str};redact`).concat(this.labelersHeader.filter((str) => str.startsWith("did:"))).slice(0, MAX_LABELERS).join(", ")
          });
          return reqHeaders;
        }
        /**
         * Internal fetch handler which adds access-token management
         */
        _fetch(reqUri, reqMethod, reqHeaders, reqBody) {
          return __async(this, null, function* () {
            var _a2;
            if (!_AtpAgent.fetch) {
              throw new Error("AtpAgent fetch() method not configured");
            }
            yield this._refreshSessionPromise;
            let res = yield _AtpAgent.fetch(reqUri, reqMethod, this._addHeaders(reqHeaders), reqBody);
            if (isErrorResponse(res, ["ExpiredToken"]) && ((_a2 = this.session) == null ? void 0 : _a2.refreshJwt)) {
              yield this.refreshSession();
              res = yield _AtpAgent.fetch(reqUri, reqMethod, this._addHeaders(reqHeaders), reqBody);
            }
            return res;
          });
        }
        /**
         * Internal helper to refresh sessions
         * - Wraps the actual implementation in a promise-guard to ensure only
         *   one refresh is attempted at a time.
         */
        refreshSession() {
          return __async(this, null, function* () {
            if (this._refreshSessionPromise) {
              return this._refreshSessionPromise;
            }
            this._refreshSessionPromise = this._refreshSessionInner();
            try {
              yield this._refreshSessionPromise;
            } finally {
              this._refreshSessionPromise = void 0;
            }
          });
        }
        /**
         * Internal helper to refresh sessions (actual behavior)
         */
        _refreshSessionInner() {
          return __async(this, null, function* () {
            var _a2, _b, _c;
            if (!_AtpAgent.fetch) {
              throw new Error("AtpAgent fetch() method not configured");
            }
            if (!((_a2 = this.session) == null ? void 0 : _a2.refreshJwt)) {
              return;
            }
            const url = new URL((this.pdsUrl || this.service).origin);
            url.pathname = `/xrpc/${REFRESH_SESSION}`;
            const res = yield _AtpAgent.fetch(url.toString(), "POST", {
              authorization: `Bearer ${this.session.refreshJwt}`
            }, void 0);
            if (isErrorResponse(res, ["ExpiredToken", "InvalidToken"])) {
              this.session = void 0;
              (_b = this._persistSession) == null ? void 0 : _b.call(this, "expired", void 0);
            } else if (isNewSessionObject(this._baseClient, res.body)) {
              this.session = __spreadProps(__spreadValues({}, this.session || {}), {
                accessJwt: res.body.accessJwt,
                refreshJwt: res.body.refreshJwt,
                handle: res.body.handle,
                did: res.body.did
              });
              this._updateApiEndpoint(res.body.didDoc);
              (_c = this._persistSession) == null ? void 0 : _c.call(this, "update", this.session);
            }
          });
        }
        /**
         * Helper to update the pds endpoint dynamically.
         *
         * The session methods (create, resume, refresh) may respond with the user's
         * did document which contains the user's canonical PDS endpoint. That endpoint
         * may differ from the endpoint used to contact the server. We capture that
         * PDS endpoint and update the client to use that given endpoint for future
         * requests. (This helps ensure smooth migrations between PDSes, especially
         * when the PDSes are operated by a single org.)
         */
        _updateApiEndpoint(didDoc) {
          if ((0, common_web_1.isValidDidDoc)(didDoc)) {
            const endpoint = (0, common_web_1.getPdsEndpoint)(didDoc);
            this.pdsUrl = endpoint ? new URL(endpoint) : void 0;
          }
          this.api.xrpc.uri = this.pdsUrl || this.service;
        }
      };
      exports.AtpAgent = AtpAgent;
      Object.defineProperty(AtpAgent, "fetch", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: xrpc_2.defaultFetchHandler
      });
      Object.defineProperty(AtpAgent, "appLabelers", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: [const_1.BSKY_LABELER_DID]
      });
      function isErrorObject(v) {
        return xrpc_1.errorResponseBody.safeParse(v).success;
      }
      function isErrorResponse(res, errorNames) {
        if (res.status !== 400) {
          return false;
        }
        if (!isErrorObject(res.body)) {
          return false;
        }
        return typeof res.body.error === "string" && errorNames.includes(res.body.error);
      }
      function isNewSessionObject(client, v) {
        try {
          client.xrpc.lex.assertValidXrpcOutput("com.atproto.server.refreshSession", v);
          return true;
        } catch (e) {
          return false;
        }
      }
    }
  });

  // node_modules/@atproto/api/dist/rich-text/unicode.js
  var require_unicode = __commonJS({
    "node_modules/@atproto/api/dist/rich-text/unicode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnicodeString = void 0;
      var common_web_1 = require_dist2();
      var encoder = new TextEncoder();
      var decoder2 = new TextDecoder();
      var UnicodeString = class {
        constructor(utf16) {
          Object.defineProperty(this, "utf16", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "utf8", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_graphemeLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.utf16 = utf16;
          this.utf8 = encoder.encode(utf16);
        }
        get length() {
          return this.utf8.byteLength;
        }
        get graphemeLength() {
          if (!this._graphemeLen) {
            this._graphemeLen = (0, common_web_1.graphemeLen)(this.utf16);
          }
          return this._graphemeLen;
        }
        slice(start, end) {
          return decoder2.decode(this.utf8.slice(start, end));
        }
        utf16IndexToUtf8Index(i) {
          return encoder.encode(this.utf16.slice(0, i)).byteLength;
        }
        toString() {
          return this.utf16;
        }
      };
      exports.UnicodeString = UnicodeString;
    }
  });

  // node_modules/@atproto/api/dist/rich-text/sanitization.js
  var require_sanitization = __commonJS({
    "node_modules/@atproto/api/dist/rich-text/sanitization.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sanitizeRichText = void 0;
      var unicode_1 = require_unicode();
      var EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
      var REPLACEMENT_STR = "\n\n";
      function sanitizeRichText(richText, opts) {
        if (opts.cleanNewlines) {
          richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
        }
        return richText;
      }
      exports.sanitizeRichText = sanitizeRichText;
      function clean(richText, targetRegexp, replacementString) {
        richText = richText.clone();
        let match = richText.unicodeText.utf16.match(targetRegexp);
        while (match && typeof match.index !== "undefined") {
          const oldText = richText.unicodeText;
          const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
          const removeEndIndex = removeStartIndex + new unicode_1.UnicodeString(match[0]).length;
          richText.delete(removeStartIndex, removeEndIndex);
          if (richText.unicodeText.utf16 === oldText.utf16) {
            break;
          }
          richText.insert(removeStartIndex, replacementString);
          match = richText.unicodeText.utf16.match(targetRegexp);
        }
        return richText;
      }
    }
  });

  // node_modules/tlds/index.json
  var require_tlds = __commonJS({
    "node_modules/tlds/index.json"(exports, module2) {
      module2.exports = [
        "aaa",
        "aarp",
        "abb",
        "abbott",
        "abbvie",
        "abc",
        "able",
        "abogado",
        "abudhabi",
        "ac",
        "academy",
        "accenture",
        "accountant",
        "accountants",
        "aco",
        "actor",
        "ad",
        "ads",
        "adult",
        "ae",
        "aeg",
        "aero",
        "aetna",
        "af",
        "afl",
        "africa",
        "ag",
        "agakhan",
        "agency",
        "ai",
        "aig",
        "airbus",
        "airforce",
        "airtel",
        "akdn",
        "al",
        "alibaba",
        "alipay",
        "allfinanz",
        "allstate",
        "ally",
        "alsace",
        "alstom",
        "am",
        "amazon",
        "americanexpress",
        "americanfamily",
        "amex",
        "amfam",
        "amica",
        "amsterdam",
        "analytics",
        "android",
        "anquan",
        "anz",
        "ao",
        "aol",
        "apartments",
        "app",
        "apple",
        "aq",
        "aquarelle",
        "ar",
        "arab",
        "aramco",
        "archi",
        "army",
        "arpa",
        "art",
        "arte",
        "as",
        "asda",
        "asia",
        "associates",
        "at",
        "athleta",
        "attorney",
        "au",
        "auction",
        "audi",
        "audible",
        "audio",
        "auspost",
        "author",
        "auto",
        "autos",
        "aw",
        "aws",
        "ax",
        "axa",
        "az",
        "azure",
        "ba",
        "baby",
        "baidu",
        "banamex",
        "band",
        "bank",
        "bar",
        "barcelona",
        "barclaycard",
        "barclays",
        "barefoot",
        "bargains",
        "baseball",
        "basketball",
        "bauhaus",
        "bayern",
        "bb",
        "bbc",
        "bbt",
        "bbva",
        "bcg",
        "bcn",
        "bd",
        "be",
        "beats",
        "beauty",
        "beer",
        "bentley",
        "berlin",
        "best",
        "bestbuy",
        "bet",
        "bf",
        "bg",
        "bh",
        "bharti",
        "bi",
        "bible",
        "bid",
        "bike",
        "bing",
        "bingo",
        "bio",
        "biz",
        "bj",
        "black",
        "blackfriday",
        "blockbuster",
        "blog",
        "bloomberg",
        "blue",
        "bm",
        "bms",
        "bmw",
        "bn",
        "bnpparibas",
        "bo",
        "boats",
        "boehringer",
        "bofa",
        "bom",
        "bond",
        "boo",
        "book",
        "booking",
        "bosch",
        "bostik",
        "boston",
        "bot",
        "boutique",
        "box",
        "br",
        "bradesco",
        "bridgestone",
        "broadway",
        "broker",
        "brother",
        "brussels",
        "bs",
        "bt",
        "build",
        "builders",
        "business",
        "buy",
        "buzz",
        "bv",
        "bw",
        "by",
        "bz",
        "bzh",
        "ca",
        "cab",
        "cafe",
        "cal",
        "call",
        "calvinklein",
        "cam",
        "camera",
        "camp",
        "canon",
        "capetown",
        "capital",
        "capitalone",
        "car",
        "caravan",
        "cards",
        "care",
        "career",
        "careers",
        "cars",
        "casa",
        "case",
        "cash",
        "casino",
        "cat",
        "catering",
        "catholic",
        "cba",
        "cbn",
        "cbre",
        "cc",
        "cd",
        "center",
        "ceo",
        "cern",
        "cf",
        "cfa",
        "cfd",
        "cg",
        "ch",
        "chanel",
        "channel",
        "charity",
        "chase",
        "chat",
        "cheap",
        "chintai",
        "christmas",
        "chrome",
        "church",
        "ci",
        "cipriani",
        "circle",
        "cisco",
        "citadel",
        "citi",
        "citic",
        "city",
        "ck",
        "cl",
        "claims",
        "cleaning",
        "click",
        "clinic",
        "clinique",
        "clothing",
        "cloud",
        "club",
        "clubmed",
        "cm",
        "cn",
        "co",
        "coach",
        "codes",
        "coffee",
        "college",
        "cologne",
        "com",
        "commbank",
        "community",
        "company",
        "compare",
        "computer",
        "comsec",
        "condos",
        "construction",
        "consulting",
        "contact",
        "contractors",
        "cooking",
        "cool",
        "coop",
        "corsica",
        "country",
        "coupon",
        "coupons",
        "courses",
        "cpa",
        "cr",
        "credit",
        "creditcard",
        "creditunion",
        "cricket",
        "crown",
        "crs",
        "cruise",
        "cruises",
        "cu",
        "cuisinella",
        "cv",
        "cw",
        "cx",
        "cy",
        "cymru",
        "cyou",
        "cz",
        "dabur",
        "dad",
        "dance",
        "data",
        "date",
        "dating",
        "datsun",
        "day",
        "dclk",
        "dds",
        "de",
        "deal",
        "dealer",
        "deals",
        "degree",
        "delivery",
        "dell",
        "deloitte",
        "delta",
        "democrat",
        "dental",
        "dentist",
        "desi",
        "design",
        "dev",
        "dhl",
        "diamonds",
        "diet",
        "digital",
        "direct",
        "directory",
        "discount",
        "discover",
        "dish",
        "diy",
        "dj",
        "dk",
        "dm",
        "dnp",
        "do",
        "docs",
        "doctor",
        "dog",
        "domains",
        "dot",
        "download",
        "drive",
        "dtv",
        "dubai",
        "dunlop",
        "dupont",
        "durban",
        "dvag",
        "dvr",
        "dz",
        "earth",
        "eat",
        "ec",
        "eco",
        "edeka",
        "edu",
        "education",
        "ee",
        "eg",
        "email",
        "emerck",
        "energy",
        "engineer",
        "engineering",
        "enterprises",
        "epson",
        "equipment",
        "er",
        "ericsson",
        "erni",
        "es",
        "esq",
        "estate",
        "et",
        "eu",
        "eurovision",
        "eus",
        "events",
        "exchange",
        "expert",
        "exposed",
        "express",
        "extraspace",
        "fage",
        "fail",
        "fairwinds",
        "faith",
        "family",
        "fan",
        "fans",
        "farm",
        "farmers",
        "fashion",
        "fast",
        "fedex",
        "feedback",
        "ferrari",
        "ferrero",
        "fi",
        "fidelity",
        "fido",
        "film",
        "final",
        "finance",
        "financial",
        "fire",
        "firestone",
        "firmdale",
        "fish",
        "fishing",
        "fit",
        "fitness",
        "fj",
        "fk",
        "flickr",
        "flights",
        "flir",
        "florist",
        "flowers",
        "fly",
        "fm",
        "fo",
        "foo",
        "food",
        "football",
        "ford",
        "forex",
        "forsale",
        "forum",
        "foundation",
        "fox",
        "fr",
        "free",
        "fresenius",
        "frl",
        "frogans",
        "frontier",
        "ftr",
        "fujitsu",
        "fun",
        "fund",
        "furniture",
        "futbol",
        "fyi",
        "ga",
        "gal",
        "gallery",
        "gallo",
        "gallup",
        "game",
        "games",
        "gap",
        "garden",
        "gay",
        "gb",
        "gbiz",
        "gd",
        "gdn",
        "ge",
        "gea",
        "gent",
        "genting",
        "george",
        "gf",
        "gg",
        "ggee",
        "gh",
        "gi",
        "gift",
        "gifts",
        "gives",
        "giving",
        "gl",
        "glass",
        "gle",
        "global",
        "globo",
        "gm",
        "gmail",
        "gmbh",
        "gmo",
        "gmx",
        "gn",
        "godaddy",
        "gold",
        "goldpoint",
        "golf",
        "goo",
        "goodyear",
        "goog",
        "google",
        "gop",
        "got",
        "gov",
        "gp",
        "gq",
        "gr",
        "grainger",
        "graphics",
        "gratis",
        "green",
        "gripe",
        "grocery",
        "group",
        "gs",
        "gt",
        "gu",
        "gucci",
        "guge",
        "guide",
        "guitars",
        "guru",
        "gw",
        "gy",
        "hair",
        "hamburg",
        "hangout",
        "haus",
        "hbo",
        "hdfc",
        "hdfcbank",
        "health",
        "healthcare",
        "help",
        "helsinki",
        "here",
        "hermes",
        "hiphop",
        "hisamitsu",
        "hitachi",
        "hiv",
        "hk",
        "hkt",
        "hm",
        "hn",
        "hockey",
        "holdings",
        "holiday",
        "homedepot",
        "homegoods",
        "homes",
        "homesense",
        "honda",
        "horse",
        "hospital",
        "host",
        "hosting",
        "hot",
        "hotels",
        "hotmail",
        "house",
        "how",
        "hr",
        "hsbc",
        "ht",
        "hu",
        "hughes",
        "hyatt",
        "hyundai",
        "ibm",
        "icbc",
        "ice",
        "icu",
        "id",
        "ie",
        "ieee",
        "ifm",
        "ikano",
        "il",
        "im",
        "imamat",
        "imdb",
        "immo",
        "immobilien",
        "in",
        "inc",
        "industries",
        "infiniti",
        "info",
        "ing",
        "ink",
        "institute",
        "insurance",
        "insure",
        "int",
        "international",
        "intuit",
        "investments",
        "io",
        "ipiranga",
        "iq",
        "ir",
        "irish",
        "is",
        "ismaili",
        "ist",
        "istanbul",
        "it",
        "itau",
        "itv",
        "jaguar",
        "java",
        "jcb",
        "je",
        "jeep",
        "jetzt",
        "jewelry",
        "jio",
        "jll",
        "jm",
        "jmp",
        "jnj",
        "jo",
        "jobs",
        "joburg",
        "jot",
        "joy",
        "jp",
        "jpmorgan",
        "jprs",
        "juegos",
        "juniper",
        "kaufen",
        "kddi",
        "ke",
        "kerryhotels",
        "kerrylogistics",
        "kerryproperties",
        "kfh",
        "kg",
        "kh",
        "ki",
        "kia",
        "kids",
        "kim",
        "kindle",
        "kitchen",
        "kiwi",
        "km",
        "kn",
        "koeln",
        "komatsu",
        "kosher",
        "kp",
        "kpmg",
        "kpn",
        "kr",
        "krd",
        "kred",
        "kuokgroup",
        "kw",
        "ky",
        "kyoto",
        "kz",
        "la",
        "lacaixa",
        "lamborghini",
        "lamer",
        "lancaster",
        "land",
        "landrover",
        "lanxess",
        "lasalle",
        "lat",
        "latino",
        "latrobe",
        "law",
        "lawyer",
        "lb",
        "lc",
        "lds",
        "lease",
        "leclerc",
        "lefrak",
        "legal",
        "lego",
        "lexus",
        "lgbt",
        "li",
        "lidl",
        "life",
        "lifeinsurance",
        "lifestyle",
        "lighting",
        "like",
        "lilly",
        "limited",
        "limo",
        "lincoln",
        "link",
        "lipsy",
        "live",
        "living",
        "lk",
        "llc",
        "llp",
        "loan",
        "loans",
        "locker",
        "locus",
        "lol",
        "london",
        "lotte",
        "lotto",
        "love",
        "lpl",
        "lplfinancial",
        "lr",
        "ls",
        "lt",
        "ltd",
        "ltda",
        "lu",
        "lundbeck",
        "luxe",
        "luxury",
        "lv",
        "ly",
        "ma",
        "madrid",
        "maif",
        "maison",
        "makeup",
        "man",
        "management",
        "mango",
        "map",
        "market",
        "marketing",
        "markets",
        "marriott",
        "marshalls",
        "mattel",
        "mba",
        "mc",
        "mckinsey",
        "md",
        "me",
        "med",
        "media",
        "meet",
        "melbourne",
        "meme",
        "memorial",
        "men",
        "menu",
        "merckmsd",
        "mg",
        "mh",
        "miami",
        "microsoft",
        "mil",
        "mini",
        "mint",
        "mit",
        "mitsubishi",
        "mk",
        "ml",
        "mlb",
        "mls",
        "mm",
        "mma",
        "mn",
        "mo",
        "mobi",
        "mobile",
        "moda",
        "moe",
        "moi",
        "mom",
        "monash",
        "money",
        "monster",
        "mormon",
        "mortgage",
        "moscow",
        "moto",
        "motorcycles",
        "mov",
        "movie",
        "mp",
        "mq",
        "mr",
        "ms",
        "msd",
        "mt",
        "mtn",
        "mtr",
        "mu",
        "museum",
        "music",
        "mv",
        "mw",
        "mx",
        "my",
        "mz",
        "na",
        "nab",
        "nagoya",
        "name",
        "natura",
        "navy",
        "nba",
        "nc",
        "ne",
        "nec",
        "net",
        "netbank",
        "netflix",
        "network",
        "neustar",
        "new",
        "news",
        "next",
        "nextdirect",
        "nexus",
        "nf",
        "nfl",
        "ng",
        "ngo",
        "nhk",
        "ni",
        "nico",
        "nike",
        "nikon",
        "ninja",
        "nissan",
        "nissay",
        "nl",
        "no",
        "nokia",
        "norton",
        "now",
        "nowruz",
        "nowtv",
        "np",
        "nr",
        "nra",
        "nrw",
        "ntt",
        "nu",
        "nyc",
        "nz",
        "obi",
        "observer",
        "office",
        "okinawa",
        "olayan",
        "olayangroup",
        "ollo",
        "om",
        "omega",
        "one",
        "ong",
        "onl",
        "online",
        "ooo",
        "open",
        "oracle",
        "orange",
        "org",
        "organic",
        "origins",
        "osaka",
        "otsuka",
        "ott",
        "ovh",
        "pa",
        "page",
        "panasonic",
        "paris",
        "pars",
        "partners",
        "parts",
        "party",
        "pay",
        "pccw",
        "pe",
        "pet",
        "pf",
        "pfizer",
        "pg",
        "ph",
        "pharmacy",
        "phd",
        "philips",
        "phone",
        "photo",
        "photography",
        "photos",
        "physio",
        "pics",
        "pictet",
        "pictures",
        "pid",
        "pin",
        "ping",
        "pink",
        "pioneer",
        "pizza",
        "pk",
        "pl",
        "place",
        "play",
        "playstation",
        "plumbing",
        "plus",
        "pm",
        "pn",
        "pnc",
        "pohl",
        "poker",
        "politie",
        "porn",
        "post",
        "pr",
        "pramerica",
        "praxi",
        "press",
        "prime",
        "pro",
        "prod",
        "productions",
        "prof",
        "progressive",
        "promo",
        "properties",
        "property",
        "protection",
        "pru",
        "prudential",
        "ps",
        "pt",
        "pub",
        "pw",
        "pwc",
        "py",
        "qa",
        "qpon",
        "quebec",
        "quest",
        "racing",
        "radio",
        "re",
        "read",
        "realestate",
        "realtor",
        "realty",
        "recipes",
        "red",
        "redstone",
        "redumbrella",
        "rehab",
        "reise",
        "reisen",
        "reit",
        "reliance",
        "ren",
        "rent",
        "rentals",
        "repair",
        "report",
        "republican",
        "rest",
        "restaurant",
        "review",
        "reviews",
        "rexroth",
        "rich",
        "richardli",
        "ricoh",
        "ril",
        "rio",
        "rip",
        "ro",
        "rocks",
        "rodeo",
        "rogers",
        "room",
        "rs",
        "rsvp",
        "ru",
        "rugby",
        "ruhr",
        "run",
        "rw",
        "rwe",
        "ryukyu",
        "sa",
        "saarland",
        "safe",
        "safety",
        "sakura",
        "sale",
        "salon",
        "samsclub",
        "samsung",
        "sandvik",
        "sandvikcoromant",
        "sanofi",
        "sap",
        "sarl",
        "sas",
        "save",
        "saxo",
        "sb",
        "sbi",
        "sbs",
        "sc",
        "scb",
        "schaeffler",
        "schmidt",
        "scholarships",
        "school",
        "schule",
        "schwarz",
        "science",
        "scot",
        "sd",
        "se",
        "search",
        "seat",
        "secure",
        "security",
        "seek",
        "select",
        "sener",
        "services",
        "seven",
        "sew",
        "sex",
        "sexy",
        "sfr",
        "sg",
        "sh",
        "shangrila",
        "sharp",
        "shaw",
        "shell",
        "shia",
        "shiksha",
        "shoes",
        "shop",
        "shopping",
        "shouji",
        "show",
        "si",
        "silk",
        "sina",
        "singles",
        "site",
        "sj",
        "sk",
        "ski",
        "skin",
        "sky",
        "skype",
        "sl",
        "sling",
        "sm",
        "smart",
        "smile",
        "sn",
        "sncf",
        "so",
        "soccer",
        "social",
        "softbank",
        "software",
        "sohu",
        "solar",
        "solutions",
        "song",
        "sony",
        "soy",
        "spa",
        "space",
        "sport",
        "spot",
        "sr",
        "srl",
        "ss",
        "st",
        "stada",
        "staples",
        "star",
        "statebank",
        "statefarm",
        "stc",
        "stcgroup",
        "stockholm",
        "storage",
        "store",
        "stream",
        "studio",
        "study",
        "style",
        "su",
        "sucks",
        "supplies",
        "supply",
        "support",
        "surf",
        "surgery",
        "suzuki",
        "sv",
        "swatch",
        "swiss",
        "sx",
        "sy",
        "sydney",
        "systems",
        "sz",
        "tab",
        "taipei",
        "talk",
        "taobao",
        "target",
        "tatamotors",
        "tatar",
        "tattoo",
        "tax",
        "taxi",
        "tc",
        "tci",
        "td",
        "tdk",
        "team",
        "tech",
        "technology",
        "tel",
        "temasek",
        "tennis",
        "teva",
        "tf",
        "tg",
        "th",
        "thd",
        "theater",
        "theatre",
        "tiaa",
        "tickets",
        "tienda",
        "tips",
        "tires",
        "tirol",
        "tj",
        "tjmaxx",
        "tjx",
        "tk",
        "tkmaxx",
        "tl",
        "tm",
        "tmall",
        "tn",
        "to",
        "today",
        "tokyo",
        "tools",
        "top",
        "toray",
        "toshiba",
        "total",
        "tours",
        "town",
        "toyota",
        "toys",
        "tr",
        "trade",
        "trading",
        "training",
        "travel",
        "travelers",
        "travelersinsurance",
        "trust",
        "trv",
        "tt",
        "tube",
        "tui",
        "tunes",
        "tushu",
        "tv",
        "tvs",
        "tw",
        "tz",
        "ua",
        "ubank",
        "ubs",
        "ug",
        "uk",
        "unicom",
        "university",
        "uno",
        "uol",
        "ups",
        "us",
        "uy",
        "uz",
        "va",
        "vacations",
        "vana",
        "vanguard",
        "vc",
        "ve",
        "vegas",
        "ventures",
        "verisign",
        "verm\xF6gensberater",
        "verm\xF6gensberatung",
        "versicherung",
        "vet",
        "vg",
        "vi",
        "viajes",
        "video",
        "vig",
        "viking",
        "villas",
        "vin",
        "vip",
        "virgin",
        "visa",
        "vision",
        "viva",
        "vivo",
        "vlaanderen",
        "vn",
        "vodka",
        "volvo",
        "vote",
        "voting",
        "voto",
        "voyage",
        "vu",
        "wales",
        "walmart",
        "walter",
        "wang",
        "wanggou",
        "watch",
        "watches",
        "weather",
        "weatherchannel",
        "webcam",
        "weber",
        "website",
        "wed",
        "wedding",
        "weibo",
        "weir",
        "wf",
        "whoswho",
        "wien",
        "wiki",
        "williamhill",
        "win",
        "windows",
        "wine",
        "winners",
        "wme",
        "wolterskluwer",
        "woodside",
        "work",
        "works",
        "world",
        "wow",
        "ws",
        "wtc",
        "wtf",
        "xbox",
        "xerox",
        "xihuan",
        "xin",
        "xxx",
        "xyz",
        "yachts",
        "yahoo",
        "yamaxun",
        "yandex",
        "ye",
        "yodobashi",
        "yoga",
        "yokohama",
        "you",
        "youtube",
        "yt",
        "yun",
        "za",
        "zappos",
        "zara",
        "zero",
        "zip",
        "zm",
        "zone",
        "zuerich",
        "zw",
        "\u03B5\u03BB",
        "\u03B5\u03C5",
        "\u0431\u0433",
        "\u0431\u0435\u043B",
        "\u0434\u0435\u0442\u0438",
        "\u0435\u044E",
        "\u043A\u0430\u0442\u043E\u043B\u0438\u043A",
        "\u043A\u043E\u043C",
        "\u043C\u043A\u0434",
        "\u043C\u043E\u043D",
        "\u043C\u043E\u0441\u043A\u0432\u0430",
        "\u043E\u043D\u043B\u0430\u0439\u043D",
        "\u043E\u0440\u0433",
        "\u0440\u0443\u0441",
        "\u0440\u0444",
        "\u0441\u0430\u0439\u0442",
        "\u0441\u0440\u0431",
        "\u0443\u043A\u0440",
        "\u049B\u0430\u0437",
        "\u0570\u0561\u0575",
        "\u05D9\u05E9\u05E8\u05D0\u05DC",
        "\u05E7\u05D5\u05DD",
        "\u0627\u0628\u0648\u0638\u0628\u064A",
        "\u0627\u0631\u0627\u0645\u0643\u0648",
        "\u0627\u0644\u0627\u0631\u062F\u0646",
        "\u0627\u0644\u0628\u062D\u0631\u064A\u0646",
        "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
        "\u0627\u0644\u0639\u0644\u064A\u0627\u0646",
        "\u0627\u0644\u0645\u063A\u0631\u0628",
        "\u0627\u0645\u0627\u0631\u0627\u062A",
        "\u0627\u06CC\u0631\u0627\u0646",
        "\u0628\u0627\u0631\u062A",
        "\u0628\u0627\u0632\u0627\u0631",
        "\u0628\u064A\u062A\u0643",
        "\u0628\u06BE\u0627\u0631\u062A",
        "\u062A\u0648\u0646\u0633",
        "\u0633\u0648\u062F\u0627\u0646",
        "\u0633\u0648\u0631\u064A\u0629",
        "\u0634\u0628\u0643\u0629",
        "\u0639\u0631\u0627\u0642",
        "\u0639\u0631\u0628",
        "\u0639\u0645\u0627\u0646",
        "\u0641\u0644\u0633\u0637\u064A\u0646",
        "\u0642\u0637\u0631",
        "\u0643\u0627\u062B\u0648\u0644\u064A\u0643",
        "\u0643\u0648\u0645",
        "\u0645\u0635\u0631",
        "\u0645\u0644\u064A\u0633\u064A\u0627",
        "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627",
        "\u0645\u0648\u0642\u0639",
        "\u0647\u0645\u0631\u0627\u0647",
        "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
        "\u0680\u0627\u0631\u062A",
        "\u0915\u0949\u092E",
        "\u0928\u0947\u091F",
        "\u092D\u093E\u0930\u0924",
        "\u092D\u093E\u0930\u0924\u092E\u094D",
        "\u092D\u093E\u0930\u094B\u0924",
        "\u0938\u0902\u0917\u0920\u0928",
        "\u09AC\u09BE\u0982\u09B2\u09BE",
        "\u09AD\u09BE\u09B0\u09A4",
        "\u09AD\u09BE\u09F0\u09A4",
        "\u0A2D\u0A3E\u0A30\u0A24",
        "\u0AAD\u0ABE\u0AB0\u0AA4",
        "\u0B2D\u0B3E\u0B30\u0B24",
        "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE",
        "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
        "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD",
        "\u0C2D\u0C3E\u0C30\u0C24\u0C4D",
        "\u0CAD\u0CBE\u0CB0\u0CA4",
        "\u0D2D\u0D3E\u0D30\u0D24\u0D02",
        "\u0DBD\u0D82\u0D9A\u0DCF",
        "\u0E04\u0E2D\u0E21",
        "\u0E44\u0E17\u0E22",
        "\u0EA5\u0EB2\u0EA7",
        "\u10D2\u10D4",
        "\u307F\u3093\u306A",
        "\u30A2\u30DE\u30BE\u30F3",
        "\u30AF\u30E9\u30A6\u30C9",
        "\u30B0\u30FC\u30B0\u30EB",
        "\u30B3\u30E0",
        "\u30B9\u30C8\u30A2",
        "\u30BB\u30FC\u30EB",
        "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3",
        "\u30DD\u30A4\u30F3\u30C8",
        "\u4E16\u754C",
        "\u4E2D\u4FE1",
        "\u4E2D\u56FD",
        "\u4E2D\u570B",
        "\u4E2D\u6587\u7F51",
        "\u4E9A\u9A6C\u900A",
        "\u4F01\u4E1A",
        "\u4F5B\u5C71",
        "\u4FE1\u606F",
        "\u5065\u5EB7",
        "\u516B\u5366",
        "\u516C\u53F8",
        "\u516C\u76CA",
        "\u53F0\u6E7E",
        "\u53F0\u7063",
        "\u5546\u57CE",
        "\u5546\u5E97",
        "\u5546\u6807",
        "\u5609\u91CC",
        "\u5609\u91CC\u5927\u9152\u5E97",
        "\u5728\u7EBF",
        "\u5927\u62FF",
        "\u5929\u4E3B\u6559",
        "\u5A31\u4E50",
        "\u5BB6\u96FB",
        "\u5E7F\u4E1C",
        "\u5FAE\u535A",
        "\u6148\u5584",
        "\u6211\u7231\u4F60",
        "\u624B\u673A",
        "\u62DB\u8058",
        "\u653F\u52A1",
        "\u653F\u5E9C",
        "\u65B0\u52A0\u5761",
        "\u65B0\u95FB",
        "\u65F6\u5C1A",
        "\u66F8\u7C4D",
        "\u673A\u6784",
        "\u6DE1\u9A6C\u9521",
        "\u6E38\u620F",
        "\u6FB3\u9580",
        "\u70B9\u770B",
        "\u79FB\u52A8",
        "\u7EC4\u7EC7\u673A\u6784",
        "\u7F51\u5740",
        "\u7F51\u5E97",
        "\u7F51\u7AD9",
        "\u7F51\u7EDC",
        "\u8054\u901A",
        "\u8C37\u6B4C",
        "\u8D2D\u7269",
        "\u901A\u8CA9",
        "\u96C6\u56E2",
        "\u96FB\u8A0A\u76C8\u79D1",
        "\u98DE\u5229\u6D66",
        "\u98DF\u54C1",
        "\u9910\u5385",
        "\u9999\u683C\u91CC\u62C9",
        "\u9999\u6E2F",
        "\uB2F7\uB137",
        "\uB2F7\uCEF4",
        "\uC0BC\uC131",
        "\uD55C\uAD6D"
      ];
    }
  });

  // node_modules/@atproto/api/dist/rich-text/util.js
  var require_util7 = __commonJS({
    "node_modules/@atproto/api/dist/rich-text/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TAG_REGEX = exports.TRAILING_PUNCTUATION_REGEX = exports.URL_REGEX = exports.MENTION_REGEX = void 0;
      exports.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
      exports.URL_REGEX = new RegExp("(^|\\s|\\()((https?:\\/\\/[\\S]+)|((?<domain>[a-z][a-z0-9]*(\\.[a-z0-9]+)+)[\\S]*))", "gim");
      exports.TRAILING_PUNCTUATION_REGEX = new RegExp("\\p{P}+$", "gu");
      exports.TAG_REGEX = /(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;
    }
  });

  // node_modules/@atproto/api/dist/rich-text/detection.js
  var require_detection = __commonJS({
    "node_modules/@atproto/api/dist/rich-text/detection.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.detectFacets = void 0;
      var tlds_1 = __importDefault(require_tlds());
      var util_1 = require_util7();
      function detectFacets(text) {
        var _a2;
        let match;
        const facets = [];
        {
          const re = util_1.MENTION_REGEX;
          while (match = re.exec(text.utf16)) {
            if (!isValidDomain(match[3]) && !match[3].endsWith(".test")) {
              continue;
            }
            const start = text.utf16.indexOf(match[3], match.index) - 1;
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(start),
                byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#mention",
                  did: match[3]
                  // must be resolved afterwards
                }
              ]
            });
          }
        }
        {
          const re = util_1.URL_REGEX;
          while (match = re.exec(text.utf16)) {
            let uri = match[2];
            if (!uri.startsWith("http")) {
              const domain = (_a2 = match.groups) == null ? void 0 : _a2.domain;
              if (!domain || !isValidDomain(domain)) {
                continue;
              }
              uri = `https://${uri}`;
            }
            const start = text.utf16.indexOf(match[2], match.index);
            const index = { start, end: start + match[2].length };
            if (/[.,;:!?]$/.test(uri)) {
              uri = uri.slice(0, -1);
              index.end--;
            }
            if (/[)]$/.test(uri) && !uri.includes("(")) {
              uri = uri.slice(0, -1);
              index.end--;
            }
            facets.push({
              index: {
                byteStart: text.utf16IndexToUtf8Index(index.start),
                byteEnd: text.utf16IndexToUtf8Index(index.end)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#link",
                  uri
                }
              ]
            });
          }
        }
        {
          const re = util_1.TAG_REGEX;
          while (match = re.exec(text.utf16)) {
            let [, leading, tag] = match;
            if (!tag)
              continue;
            tag = tag.trim().replace(util_1.TRAILING_PUNCTUATION_REGEX, "");
            if (tag.length === 0 || tag.length > 64)
              continue;
            const index = match.index + leading.length;
            facets.push({
              index: {
                byteStart: text.utf16IndexToUtf8Index(index),
                byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag.length)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#tag",
                  tag
                }
              ]
            });
          }
        }
        return facets.length > 0 ? facets : void 0;
      }
      exports.detectFacets = detectFacets;
      function isValidDomain(str) {
        return !!tlds_1.default.find((tld) => {
          const i = str.lastIndexOf(tld);
          if (i === -1) {
            return false;
          }
          return str.charAt(i - 1) === "." && i === str.length - tld.length;
        });
      }
    }
  });

  // node_modules/@atproto/api/dist/rich-text/rich-text.js
  var require_rich_text = __commonJS({
    "node_modules/@atproto/api/dist/rich-text/rich-text.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RichText = exports.RichTextSegment = void 0;
      var client_1 = require_client2();
      var unicode_1 = require_unicode();
      var sanitization_1 = require_sanitization();
      var detection_1 = require_detection();
      var RichTextSegment = class {
        constructor(text, facet) {
          Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: text
          });
          Object.defineProperty(this, "facet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: facet
          });
        }
        get link() {
          var _a2;
          const link = (_a2 = this.facet) == null ? void 0 : _a2.features.find(client_1.AppBskyRichtextFacet.isLink);
          if (client_1.AppBskyRichtextFacet.isLink(link)) {
            return link;
          }
          return void 0;
        }
        isLink() {
          return !!this.link;
        }
        get mention() {
          var _a2;
          const mention = (_a2 = this.facet) == null ? void 0 : _a2.features.find(client_1.AppBskyRichtextFacet.isMention);
          if (client_1.AppBskyRichtextFacet.isMention(mention)) {
            return mention;
          }
          return void 0;
        }
        isMention() {
          return !!this.mention;
        }
        get tag() {
          var _a2;
          const tag = (_a2 = this.facet) == null ? void 0 : _a2.features.find(client_1.AppBskyRichtextFacet.isTag);
          if (client_1.AppBskyRichtextFacet.isTag(tag)) {
            return tag;
          }
          return void 0;
        }
        isTag() {
          return !!this.tag;
        }
      };
      exports.RichTextSegment = RichTextSegment;
      var RichText = class _RichText {
        constructor(props, opts) {
          var _a2, _b;
          Object.defineProperty(this, "unicodeText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "facets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.unicodeText = new unicode_1.UnicodeString(props.text);
          this.facets = props.facets;
          if (!((_a2 = this.facets) == null ? void 0 : _a2.length) && ((_b = props.entities) == null ? void 0 : _b.length)) {
            this.facets = entitiesToFacets(this.unicodeText, props.entities);
          }
          if (this.facets) {
            this.facets.sort(facetSort);
          }
          if (opts == null ? void 0 : opts.cleanNewlines) {
            (0, sanitization_1.sanitizeRichText)(this, { cleanNewlines: true }).copyInto(this);
          }
        }
        get text() {
          return this.unicodeText.toString();
        }
        get length() {
          return this.unicodeText.length;
        }
        get graphemeLength() {
          return this.unicodeText.graphemeLength;
        }
        clone() {
          return new _RichText({
            text: this.unicodeText.utf16,
            facets: cloneDeep(this.facets)
          });
        }
        copyInto(target2) {
          target2.unicodeText = this.unicodeText;
          target2.facets = cloneDeep(this.facets);
        }
        *segments() {
          const facets = this.facets || [];
          if (!facets.length) {
            yield new RichTextSegment(this.unicodeText.utf16);
            return;
          }
          let textCursor = 0;
          let facetCursor = 0;
          do {
            const currFacet = facets[facetCursor];
            if (textCursor < currFacet.index.byteStart) {
              yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
            } else if (textCursor > currFacet.index.byteStart) {
              facetCursor++;
              continue;
            }
            if (currFacet.index.byteStart < currFacet.index.byteEnd) {
              const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
              if (!subtext.trim()) {
                yield new RichTextSegment(subtext);
              } else {
                yield new RichTextSegment(subtext, currFacet);
              }
            }
            textCursor = currFacet.index.byteEnd;
            facetCursor++;
          } while (facetCursor < facets.length);
          if (textCursor < this.unicodeText.length) {
            yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
          }
        }
        insert(insertIndex, insertText) {
          var _a2;
          this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
          if (!((_a2 = this.facets) == null ? void 0 : _a2.length)) {
            return this;
          }
          const numCharsAdded = insertText.length;
          for (const ent of this.facets) {
            if (insertIndex <= ent.index.byteStart) {
              ent.index.byteStart += numCharsAdded;
              ent.index.byteEnd += numCharsAdded;
            } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {
              ent.index.byteEnd += numCharsAdded;
            }
          }
          return this;
        }
        delete(removeStartIndex, removeEndIndex) {
          var _a2;
          this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
          if (!((_a2 = this.facets) == null ? void 0 : _a2.length)) {
            return this;
          }
          const numCharsRemoved = removeEndIndex - removeStartIndex;
          for (const ent of this.facets) {
            if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
              ent.index.byteStart = 0;
              ent.index.byteEnd = 0;
            } else if (removeStartIndex > ent.index.byteEnd) {
            } else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {
              ent.index.byteEnd = removeStartIndex;
            } else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
              ent.index.byteEnd -= numCharsRemoved;
            } else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
              ent.index.byteStart = removeStartIndex;
              ent.index.byteEnd -= numCharsRemoved;
            } else if (removeEndIndex < ent.index.byteStart) {
              ent.index.byteStart -= numCharsRemoved;
              ent.index.byteEnd -= numCharsRemoved;
            }
          }
          this.facets = this.facets.filter((ent) => ent.index.byteStart < ent.index.byteEnd);
          return this;
        }
        /**
         * Detects facets such as links and mentions
         * Note: Overwrites the existing facets with auto-detected facets
         */
        detectFacets(agent) {
          return __async(this, null, function* () {
            this.facets = (0, detection_1.detectFacets)(this.unicodeText);
            if (this.facets) {
              for (const facet of this.facets) {
                for (const feature of facet.features) {
                  if (client_1.AppBskyRichtextFacet.isMention(feature)) {
                    const did = yield agent.resolveHandle({ handle: feature.did }).catch((_) => void 0).then((res) => res == null ? void 0 : res.data.did);
                    feature.did = did || "";
                  }
                }
              }
              this.facets.sort(facetSort);
            }
          });
        }
        /**
         * Detects facets such as links and mentions but does not resolve them
         * Will produce invalid facets! For instance, mentions will not have their DIDs set.
         * Note: Overwrites the existing facets with auto-detected facets
         */
        detectFacetsWithoutResolution() {
          this.facets = (0, detection_1.detectFacets)(this.unicodeText);
          if (this.facets) {
            this.facets.sort(facetSort);
          }
        }
      };
      exports.RichText = RichText;
      var facetSort = (a, b) => a.index.byteStart - b.index.byteStart;
      function entitiesToFacets(text, entities) {
        const facets = [];
        for (const ent of entities) {
          if (ent.type === "link") {
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
              },
              features: [{ $type: "app.bsky.richtext.facet#link", uri: ent.value }]
            });
          } else if (ent.type === "mention") {
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
              },
              features: [
                { $type: "app.bsky.richtext.facet#mention", did: ent.value }
              ]
            });
          }
        }
        return facets;
      }
      function cloneDeep(v) {
        if (typeof v === "undefined") {
          return v;
        }
        return JSON.parse(JSON.stringify(v));
      }
    }
  });

  // node_modules/@atproto/api/dist/moderation/types.js
  var require_types6 = __commonJS({
    "node_modules/@atproto/api/dist/moderation/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NOOP_BEHAVIOR = exports.HIDE_BEHAVIOR = exports.MUTEWORD_BEHAVIOR = exports.MUTE_BEHAVIOR = exports.BLOCK_BEHAVIOR = exports.CUSTOM_LABEL_VALUE_RE = void 0;
      exports.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
      exports.BLOCK_BEHAVIOR = {
        profileList: "blur",
        profileView: "alert",
        avatar: "blur",
        banner: "blur",
        contentList: "blur",
        contentView: "blur"
      };
      exports.MUTE_BEHAVIOR = {
        profileList: "inform",
        profileView: "alert",
        contentList: "blur",
        contentView: "inform"
      };
      exports.MUTEWORD_BEHAVIOR = {
        contentList: "blur",
        contentView: "blur"
      };
      exports.HIDE_BEHAVIOR = {
        contentList: "blur",
        contentView: "blur"
      };
      exports.NOOP_BEHAVIOR = {};
    }
  });

  // node_modules/@atproto/api/dist/moderation/ui.js
  var require_ui = __commonJS({
    "node_modules/@atproto/api/dist/moderation/ui.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModerationUI = void 0;
      var ModerationUI = class {
        constructor() {
          Object.defineProperty(this, "noOverride", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "filters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "blurs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "alerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "informs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
        }
        get filter() {
          return this.filters.length !== 0;
        }
        get blur() {
          return this.blurs.length !== 0;
        }
        get alert() {
          return this.alerts.length !== 0;
        }
        get inform() {
          return this.informs.length !== 0;
        }
      };
      exports.ModerationUI = ModerationUI;
    }
  });

  // node_modules/@atproto/api/dist/moderation/const/labels.js
  var require_labels = __commonJS({
    "node_modules/@atproto/api/dist/moderation/const/labels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = void 0;
      exports.DEFAULT_LABEL_SETTINGS = {
        porn: "hide",
        sexual: "warn",
        nudity: "ignore",
        "graphic-media": "warn"
      };
      exports.LABELS = {
        "!hide": {
          identifier: "!hide",
          configurable: false,
          defaultSetting: "hide",
          flags: ["no-override", "no-self"],
          severity: "alert",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              displayName: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        "!warn": {
          identifier: "!warn",
          configurable: false,
          defaultSetting: "warn",
          flags: ["no-self"],
          severity: "none",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        "!no-unauthenticated": {
          identifier: "!no-unauthenticated",
          configurable: false,
          defaultSetting: "hide",
          flags: ["no-override", "unauthed"],
          severity: "none",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              displayName: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        porn: {
          identifier: "porn",
          configurable: true,
          defaultSetting: "hide",
          flags: ["adult"],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        sexual: {
          identifier: "sexual",
          configurable: true,
          defaultSetting: "warn",
          flags: ["adult"],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        nudity: {
          identifier: "nudity",
          configurable: true,
          defaultSetting: "ignore",
          flags: [],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        "graphic-media": {
          identifier: "graphic-media",
          flags: ["adult"],
          configurable: true,
          defaultSetting: "warn",
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        }
      };
    }
  });

  // node_modules/@atproto/api/dist/moderation/decision.js
  var require_decision = __commonJS({
    "node_modules/@atproto/api/dist/moderation/decision.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModerationDecision = void 0;
      var types_1 = require_types6();
      var ui_1 = require_ui();
      var labels_1 = require_labels();
      var ModerationBehaviorSeverity;
      (function(ModerationBehaviorSeverity2) {
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["High"] = 0] = "High";
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["Medium"] = 1] = "Medium";
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["Low"] = 2] = "Low";
      })(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
      var ModerationDecision = class _ModerationDecision {
        constructor() {
          Object.defineProperty(this, "did", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
          });
          Object.defineProperty(this, "isMe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "causes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
        }
        static merge(...decisions) {
          const decisionsFiltered = decisions.filter((v) => !!v);
          const decision = new _ModerationDecision();
          if (decisionsFiltered[0]) {
            decision.did = decisionsFiltered[0].did;
            decision.isMe = decisionsFiltered[0].isMe;
          }
          decision.causes = decisionsFiltered.flatMap((d) => d.causes);
          return decision;
        }
        downgrade() {
          for (const cause of this.causes) {
            cause.downgraded = true;
          }
          return this;
        }
        get blocked() {
          return !!this.blockCause;
        }
        get muted() {
          return !!this.muteCause;
        }
        get blockCause() {
          return this.causes.find((cause) => cause.type === "blocking" || cause.type === "blocked-by" || cause.type === "block-other");
        }
        get muteCause() {
          return this.causes.find((cause) => cause.type === "muted");
        }
        get labelCauses() {
          return this.causes.filter((cause) => cause.type === "label");
        }
        ui(context) {
          const ui = new ui_1.ModerationUI();
          if (this.isMe) {
            return ui;
          }
          for (const cause of this.causes) {
            if (cause.type === "blocking" || cause.type === "blocked-by" || cause.type === "block-other") {
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.BLOCK_BEHAVIOR[context] === "blur") {
                  ui.noOverride = true;
                  ui.blurs.push(cause);
                } else if (types_1.BLOCK_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.BLOCK_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "muted") {
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.MUTE_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.MUTE_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.MUTE_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "mute-word") {
              if (context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.MUTEWORD_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.MUTEWORD_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.MUTEWORD_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "hidden") {
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.HIDE_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.HIDE_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.HIDE_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "label") {
              if (context === "profileList" && cause.target === "account") {
                if (cause.setting === "hide") {
                  ui.filters.push(cause);
                }
              } else if (context === "contentList" && (cause.target === "account" || cause.target === "content")) {
                if (cause.setting === "hide") {
                  ui.filters.push(cause);
                }
              }
              if (!cause.downgraded) {
                if (cause.behavior[context] === "blur") {
                  ui.blurs.push(cause);
                  if (cause.noOverride) {
                    ui.noOverride = true;
                  }
                } else if (cause.behavior[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (cause.behavior[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            }
          }
          ui.filters.sort(sortByPriority);
          ui.blurs.sort(sortByPriority);
          return ui;
        }
        setDid(did) {
          this.did = did;
        }
        setIsMe(isMe) {
          this.isMe = isMe;
        }
        addHidden(hidden4) {
          if (hidden4) {
            this.causes.push({
              type: "hidden",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addMutedWord(mutedWord) {
          if (mutedWord) {
            this.causes.push({
              type: "mute-word",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addBlocking(blocking) {
          if (blocking) {
            this.causes.push({
              type: "blocking",
              source: { type: "user" },
              priority: 3
            });
          }
        }
        addBlockingByList(blockingByList) {
          if (blockingByList) {
            this.causes.push({
              type: "blocking",
              source: { type: "list", list: blockingByList },
              priority: 3
            });
          }
        }
        addBlockedBy(blockedBy) {
          if (blockedBy) {
            this.causes.push({
              type: "blocked-by",
              source: { type: "user" },
              priority: 4
            });
          }
        }
        addBlockOther(blockOther) {
          if (blockOther) {
            this.causes.push({
              type: "block-other",
              source: { type: "user" },
              priority: 4
            });
          }
        }
        addLabel(target2, label, opts) {
          var _a2, _b;
          const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val) ? ((_b = (_a2 = opts.labelDefs) == null ? void 0 : _a2[label.src]) == null ? void 0 : _b.find((def) => def.identifier === label.val)) || labels_1.LABELS[label.val] : labels_1.LABELS[label.val];
          if (!labelDef) {
            return;
          }
          const isSelf = label.src === this.did;
          const labeler = isSelf ? void 0 : opts.prefs.labelers.find((s) => s.did === label.src);
          if (!isSelf && !labeler) {
            return;
          }
          if (isSelf && labelDef.flags.includes("no-self")) {
            return;
          }
          let labelPref = labelDef.defaultSetting || "ignore";
          if (!labelDef.configurable) {
            labelPref = labelDef.defaultSetting || "hide";
          } else if (labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            labelPref = "hide";
          } else if (labeler == null ? void 0 : labeler.labels[labelDef.identifier]) {
            labelPref = labeler == null ? void 0 : labeler.labels[labelDef.identifier];
          } else if (opts.prefs.labels[labelDef.identifier]) {
            labelPref = opts.prefs.labels[labelDef.identifier];
          }
          if (labelPref === "ignore") {
            return;
          }
          if (labelDef.flags.includes("unauthed") && !!opts.userDid) {
            return;
          }
          let priority;
          const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target2]);
          if (labelDef.flags.includes("no-override") || labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            priority = 1;
          } else if (labelPref === "hide") {
            priority = 2;
          } else if (severity === ModerationBehaviorSeverity.High) {
            priority = 5;
          } else if (severity === ModerationBehaviorSeverity.Medium) {
            priority = 7;
          } else {
            priority = 8;
          }
          let noOverride = false;
          if (labelDef.flags.includes("no-override")) {
            noOverride = true;
          } else if (labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            noOverride = true;
          }
          this.causes.push({
            type: "label",
            source: isSelf || !labeler ? { type: "user" } : { type: "labeler", did: labeler.did },
            label,
            labelDef,
            target: target2,
            setting: labelPref,
            behavior: labelDef.behaviors[target2] || types_1.NOOP_BEHAVIOR,
            noOverride,
            priority
          });
        }
        addMuted(muted) {
          if (muted) {
            this.causes.push({
              type: "muted",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addMutedByList(mutedByList) {
          if (mutedByList) {
            this.causes.push({
              type: "muted",
              source: { type: "list", list: mutedByList },
              priority: 6
            });
          }
        }
      };
      exports.ModerationDecision = ModerationDecision;
      function measureModerationBehaviorSeverity(beh) {
        if (!beh) {
          return ModerationBehaviorSeverity.Low;
        }
        if (beh.profileView === "blur" || beh.contentView === "blur") {
          return ModerationBehaviorSeverity.High;
        }
        if (beh.contentList === "blur" || beh.contentMedia === "blur") {
          return ModerationBehaviorSeverity.Medium;
        }
        return ModerationBehaviorSeverity.Low;
      }
      function sortByPriority(a, b) {
        return a.priority - b.priority;
      }
    }
  });

  // node_modules/@atproto/api/dist/moderation/subjects/account.js
  var require_account = __commonJS({
    "node_modules/@atproto/api/dist/moderation/subjects/account.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.filterAccountLabels = exports.decideAccount = void 0;
      var decision_1 = require_decision();
      function decideAccount(subject, opts) {
        var _a2, _b, _c, _d, _e, _f, _g, _h, _i;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.did);
        acc.setIsMe(subject.did === opts.userDid);
        if ((_a2 = subject.viewer) == null ? void 0 : _a2.muted) {
          if ((_b = subject.viewer) == null ? void 0 : _b.mutedByList) {
            acc.addMutedByList((_c = subject.viewer) == null ? void 0 : _c.mutedByList);
          } else {
            acc.addMuted((_d = subject.viewer) == null ? void 0 : _d.muted);
          }
        }
        if ((_e = subject.viewer) == null ? void 0 : _e.blocking) {
          if ((_f = subject.viewer) == null ? void 0 : _f.blockingByList) {
            acc.addBlockingByList((_g = subject.viewer) == null ? void 0 : _g.blockingByList);
          } else {
            acc.addBlocking((_h = subject.viewer) == null ? void 0 : _h.blocking);
          }
        }
        acc.addBlockedBy((_i = subject.viewer) == null ? void 0 : _i.blockedBy);
        for (const label of filterAccountLabels(subject.labels)) {
          acc.addLabel("account", label, opts);
        }
        return acc;
      }
      exports.decideAccount = decideAccount;
      function filterAccountLabels(labels) {
        if (!labels) {
          return [];
        }
        return labels.filter((label) => !label.uri.endsWith("/app.bsky.actor.profile/self") || label.val === "!no-unauthenticated");
      }
      exports.filterAccountLabels = filterAccountLabels;
    }
  });

  // node_modules/@atproto/api/dist/moderation/subjects/profile.js
  var require_profile2 = __commonJS({
    "node_modules/@atproto/api/dist/moderation/subjects/profile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.filterProfileLabels = exports.decideProfile = void 0;
      var decision_1 = require_decision();
      function decideProfile(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.did);
        acc.setIsMe(subject.did === opts.userDid);
        for (const label of filterProfileLabels(subject.labels)) {
          acc.addLabel("profile", label, opts);
        }
        return acc;
      }
      exports.decideProfile = decideProfile;
      function filterProfileLabels(labels) {
        if (!labels) {
          return [];
        }
        return labels.filter((label) => label.uri.endsWith("/app.bsky.actor.profile/self"));
      }
      exports.filterProfileLabels = filterProfileLabels;
    }
  });

  // node_modules/@atproto/api/dist/moderation/subjects/notification.js
  var require_notification = __commonJS({
    "node_modules/@atproto/api/dist/moderation/subjects/notification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideNotification = void 0;
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideNotification(subject, opts) {
        var _a2;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if ((_a2 = subject.labels) == null ? void 0 : _a2.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
      exports.decideNotification = decideNotification;
    }
  });

  // node_modules/@atproto/api/dist/moderation/mutewords.js
  var require_mutewords = __commonJS({
    "node_modules/@atproto/api/dist/moderation/mutewords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasMutedWord = void 0;
      var client_1 = require_client2();
      var REGEX = {
        LEADING_TRAILING_PUNCTUATION: new RegExp("(?:^\\p{P}+|\\p{P}+$)", "gu"),
        ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
        SEPARATORS: /[/\-–—()[\]_]+/g,
        WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
      };
      var LANGUAGE_EXCEPTIONS = [
        "ja",
        // Japanese
        "zh",
        // Chinese
        "ko",
        // Korean
        "th",
        // Thai
        "vi"
        // Vietnamese
      ];
      function hasMutedWord({ mutedWords, text, facets, outlineTags, languages }) {
        const exception = LANGUAGE_EXCEPTIONS.includes((languages == null ? void 0 : languages[0]) || "");
        const tags = [].concat(outlineTags || []).concat((facets == null ? void 0 : facets.filter((facet) => {
          return facet.features.find((feature) => client_1.AppBskyRichtextFacet.isTag(feature));
        }).map((t) => t.features[0].tag)) || []).map((t) => t.toLowerCase());
        for (const mute of mutedWords) {
          const mutedWord = mute.value.toLowerCase();
          const postText = text.toLowerCase();
          if (tags.includes(mutedWord))
            return true;
          if (!mute.targets.includes("content"))
            continue;
          if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord))
            return true;
          if (mutedWord.length > postText.length)
            continue;
          if (mutedWord === postText)
            return true;
          if (new RegExp("(?:\\s|\\p{P})+?", "u").test(mutedWord) && postText.includes(mutedWord))
            return true;
          const words = postText.split(REGEX.WORD_BOUNDARY);
          for (const word of words) {
            if (word === mutedWord)
              return true;
            const wordTrimmedPunctuation = word.replace(REGEX.LEADING_TRAILING_PUNCTUATION, "");
            if (mutedWord === wordTrimmedPunctuation)
              return true;
            if (mutedWord.length > wordTrimmedPunctuation.length)
              continue;
            if (new RegExp("\\p{P}+", "u").test(wordTrimmedPunctuation)) {
              const spacedWord = wordTrimmedPunctuation.replace(new RegExp("\\p{P}+", "gu"), " ");
              if (spacedWord === mutedWord)
                return true;
              const contiguousWord = spacedWord.replace(/\s/gu, "");
              if (contiguousWord === mutedWord)
                return true;
              const wordParts = wordTrimmedPunctuation.split(new RegExp("\\p{P}+", "u"));
              for (const wordPart of wordParts) {
                if (wordPart === mutedWord)
                  return true;
              }
            }
          }
        }
        return false;
      }
      exports.hasMutedWord = hasMutedWord;
    }
  });

  // node_modules/@atproto/api/dist/moderation/subjects/post.js
  var require_post2 = __commonJS({
    "node_modules/@atproto/api/dist/moderation/subjects/post.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decidePost = void 0;
      var decision_1 = require_decision();
      var client_1 = require_client2();
      var mutewords_1 = require_mutewords();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decidePost(subject, opts) {
        var _a2;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if ((_a2 = subject.labels) == null ? void 0 : _a2.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
        if (!acc.isMe) {
          acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
        }
        let embedAcc;
        if (subject.embed) {
          if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
            embedAcc = decideQuotedPost(subject.embed.record, opts);
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
            embedAcc = decideQuotedPost(subject.embed.record.record, opts);
          } else if (client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record)) {
            embedAcc = decideBlockedQuotedPost(subject.embed.record, opts);
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record.record)) {
            embedAcc = decideBlockedQuotedPost(subject.embed.record.record, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, embedAcc == null ? void 0 : embedAcc.downgrade(), (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
      exports.decidePost = decidePost;
      function decideQuotedPost(subject, opts) {
        var _a2;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if ((_a2 = subject.labels) == null ? void 0 : _a2.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
      function decideBlockedQuotedPost(subject, opts) {
        var _a2, _b, _c, _d, _e, _f, _g, _h, _i;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if ((_a2 = subject.author.viewer) == null ? void 0 : _a2.muted) {
          if ((_b = subject.author.viewer) == null ? void 0 : _b.mutedByList) {
            acc.addMutedByList((_c = subject.author.viewer) == null ? void 0 : _c.mutedByList);
          } else {
            acc.addMuted((_d = subject.author.viewer) == null ? void 0 : _d.muted);
          }
        }
        if ((_e = subject.author.viewer) == null ? void 0 : _e.blocking) {
          if ((_f = subject.author.viewer) == null ? void 0 : _f.blockingByList) {
            acc.addBlockingByList((_g = subject.author.viewer) == null ? void 0 : _g.blockingByList);
          } else {
            acc.addBlocking((_h = subject.author.viewer) == null ? void 0 : _h.blocking);
          }
        }
        acc.addBlockedBy((_i = subject.author.viewer) == null ? void 0 : _i.blockedBy);
        return acc;
      }
      function checkHiddenPost(subject, hiddenPosts) {
        if (!(hiddenPosts == null ? void 0 : hiddenPosts.length)) {
          return false;
        }
        if (hiddenPosts.includes(subject.uri)) {
          return true;
        }
        if (subject.embed) {
          if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record) && hiddenPosts.includes(subject.embed.record.uri)) {
            return true;
          }
          if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) && hiddenPosts.includes(subject.embed.record.record.uri)) {
            return true;
          }
        }
        return false;
      }
      function checkMutedWords(subject, mutedWords) {
        if (!(mutedWords == null ? void 0 : mutedWords.length)) {
          return false;
        }
        if (client_1.AppBskyFeedPost.isRecord(subject.record)) {
          if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: subject.record.text,
            facets: subject.record.facets,
            outlineTags: subject.record.tags,
            languages: subject.record.langs
          })) {
            return true;
          }
          if (subject.record.embed && client_1.AppBskyEmbedImages.isMain(subject.record.embed)) {
            for (const image of subject.record.embed.images) {
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: image.alt,
                languages: subject.record.langs
              })) {
                return true;
              }
            }
          }
        }
        if (subject.embed) {
          if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
            if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.value)) {
              const embeddedPost = subject.embed.record.value;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: embeddedPost.text,
                facets: embeddedPost.facets,
                outlineTags: embeddedPost.tags,
                languages: embeddedPost.langs
              })) {
                return true;
              }
              if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed)) {
                for (const image of embeddedPost.embed.images) {
                  if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: image.alt,
                    languages: embeddedPost.langs
                  })) {
                    return true;
                  }
                }
              }
              if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
                const { external } = embeddedPost.embed;
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: external.title + " " + external.description,
                  languages: []
                })) {
                  return true;
                }
              }
              if (client_1.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
                if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
                  const { external } = embeddedPost.embed.media;
                  if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: external.title + " " + external.description,
                    languages: []
                  })) {
                    return true;
                  }
                }
                if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) {
                  for (const image of embeddedPost.embed.media.images) {
                    if ((0, mutewords_1.hasMutedWord)({
                      mutedWords,
                      text: image.alt,
                      languages: client_1.AppBskyFeedPost.isRecord(embeddedPost.record) ? embeddedPost.langs : []
                    })) {
                      return true;
                    }
                  }
                }
              }
            }
          } else if (client_1.AppBskyEmbedExternal.isView(subject.embed)) {
            const { external } = subject.embed;
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: external.title + " " + external.description,
              languages: []
            })) {
              return true;
            }
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
            if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.record.value)) {
              const post = subject.embed.record.record.value;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: post.text,
                facets: post.facets,
                outlineTags: post.tags,
                languages: post.langs
              })) {
                return true;
              }
            }
            if (client_1.AppBskyEmbedImages.isView(subject.embed.media)) {
              for (const image of subject.embed.media.images) {
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: image.alt,
                  languages: client_1.AppBskyFeedPost.isRecord(subject.record) ? subject.record.langs : []
                })) {
                  return true;
                }
              }
            }
          }
        }
        return false;
      }
    }
  });

  // node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js
  var require_feed_generator = __commonJS({
    "node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideFeedGenerator = void 0;
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideFeedGenerator(subject, opts) {
        var _a2;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.creator.did);
        acc.setIsMe(subject.creator.did === opts.userDid);
        if ((_a2 = subject.labels) == null ? void 0 : _a2.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.creator, opts), (0, profile_1.decideProfile)(subject.creator, opts));
      }
      exports.decideFeedGenerator = decideFeedGenerator;
    }
  });

  // node_modules/@atproto/api/dist/moderation/subjects/user-list.js
  var require_user_list = __commonJS({
    "node_modules/@atproto/api/dist/moderation/subjects/user-list.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideUserList = void 0;
      var syntax_1 = require_dist();
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideUserList(subject, opts) {
        var _a2, _b;
        const acc = new decision_1.ModerationDecision();
        const creator = isProfile(subject.creator) ? subject.creator : void 0;
        if (creator) {
          acc.setDid(creator.did);
          acc.setIsMe(creator.did === opts.userDid);
          if ((_a2 = subject.labels) == null ? void 0 : _a2.length) {
            for (const label of subject.labels) {
              acc.addLabel("content", label, opts);
            }
          }
          return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
        }
        const creatorDid = new syntax_1.AtUri(subject.uri).hostname;
        acc.setDid(creatorDid);
        acc.setIsMe(creatorDid === opts.userDid);
        if ((_b = subject.labels) == null ? void 0 : _b.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return acc;
      }
      exports.decideUserList = decideUserList;
      function isProfile(v) {
        return v && typeof v === "object" && "did" in v;
      }
    }
  });

  // node_modules/@atproto/api/dist/moderation/util.js
  var require_util8 = __commonJS({
    "node_modules/@atproto/api/dist/moderation/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.isQuotedPostWithMedia = exports.isQuotedPost = void 0;
      var client_1 = require_client2();
      function isQuotedPost(embed) {
        return Boolean(embed && client_1.AppBskyEmbedRecord.isView(embed));
      }
      exports.isQuotedPost = isQuotedPost;
      function isQuotedPostWithMedia(embed) {
        return Boolean(embed && client_1.AppBskyEmbedRecordWithMedia.isView(embed));
      }
      exports.isQuotedPostWithMedia = isQuotedPostWithMedia;
      function interpretLabelValueDefinition(def, definedBy) {
        const behaviors = {
          account: {},
          profile: {},
          content: {}
        };
        const alertOrInform = def.severity === "alert" ? "alert" : def.severity === "inform" ? "inform" : void 0;
        if (def.blurs === "content") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.contentList = "blur";
          behaviors.account.contentView = def.adultOnly ? "blur" : alertOrInform;
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.content.contentList = "blur";
          behaviors.content.contentView = def.adultOnly ? "blur" : alertOrInform;
        } else if (def.blurs === "media") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.avatar = "blur";
          behaviors.account.banner = "blur";
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.profile.avatar = "blur";
          behaviors.profile.banner = "blur";
          behaviors.content.contentMedia = "blur";
        } else if (def.blurs === "none") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.contentList = alertOrInform;
          behaviors.account.contentView = alertOrInform;
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.content.contentList = alertOrInform;
          behaviors.content.contentView = alertOrInform;
        }
        let defaultSetting = "warn";
        if (def.defaultSetting === "hide" || def.defaultSetting === "ignore") {
          defaultSetting = def.defaultSetting;
        }
        const flags = ["no-self"];
        if (def.adultOnly) {
          flags.push("adult");
        }
        return __spreadProps(__spreadValues({}, def), {
          definedBy,
          configurable: true,
          defaultSetting,
          flags,
          behaviors
        });
      }
      exports.interpretLabelValueDefinition = interpretLabelValueDefinition;
      function interpretLabelValueDefinitions(labelerView) {
        var _a2;
        return (((_a2 = labelerView.policies) == null ? void 0 : _a2.labelValueDefinitions) || []).filter((labelValDef) => client_1.ComAtprotoLabelDefs.validateLabelValueDefinition(labelValDef).success).map((labelValDef) => interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
      }
      exports.interpretLabelValueDefinitions = interpretLabelValueDefinitions;
    }
  });

  // node_modules/@atproto/api/dist/moderation/index.js
  var require_moderation = __commonJS({
    "node_modules/@atproto/api/dist/moderation/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.moderateUserList = exports.moderateFeedGenerator = exports.moderateNotification = exports.moderatePost = exports.moderateProfile = exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = void 0;
      var account_1 = require_account();
      var profile_1 = require_profile2();
      var notification_1 = require_notification();
      var post_1 = require_post2();
      var feed_generator_1 = require_feed_generator();
      var user_list_1 = require_user_list();
      var decision_1 = require_decision();
      var ui_1 = require_ui();
      Object.defineProperty(exports, "ModerationUI", { enumerable: true, get: function() {
        return ui_1.ModerationUI;
      } });
      var decision_2 = require_decision();
      Object.defineProperty(exports, "ModerationDecision", { enumerable: true, get: function() {
        return decision_2.ModerationDecision;
      } });
      var mutewords_1 = require_mutewords();
      Object.defineProperty(exports, "hasMutedWord", { enumerable: true, get: function() {
        return mutewords_1.hasMutedWord;
      } });
      var util_1 = require_util8();
      Object.defineProperty(exports, "interpretLabelValueDefinition", { enumerable: true, get: function() {
        return util_1.interpretLabelValueDefinition;
      } });
      Object.defineProperty(exports, "interpretLabelValueDefinitions", { enumerable: true, get: function() {
        return util_1.interpretLabelValueDefinitions;
      } });
      function moderateProfile(subject, opts) {
        return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
      }
      exports.moderateProfile = moderateProfile;
      function moderatePost(subject, opts) {
        return (0, post_1.decidePost)(subject, opts);
      }
      exports.moderatePost = moderatePost;
      function moderateNotification(subject, opts) {
        return (0, notification_1.decideNotification)(subject, opts);
      }
      exports.moderateNotification = moderateNotification;
      function moderateFeedGenerator(subject, opts) {
        return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
      }
      exports.moderateFeedGenerator = moderateFeedGenerator;
      function moderateUserList(subject, opts) {
        return (0, user_list_1.decideUserList)(subject, opts);
      }
      exports.moderateUserList = moderateUserList;
    }
  });

  // node_modules/@atproto/api/dist/mocker.js
  var require_mocker = __commonJS({
    "node_modules/@atproto/api/dist/mocker.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mock = void 0;
      var FAKE_CID = "bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq";
      exports.mock = {
        post({ text, facets, reply, embed }) {
          return {
            $type: "app.bsky.feed.post",
            text,
            facets,
            reply,
            embed,
            langs: ["en"],
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          };
        },
        postView({ record, author, embed, replyCount, repostCount, likeCount, viewer, labels }) {
          return {
            $type: "app.bsky.feed.defs#postView",
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            record,
            embed,
            replyCount,
            repostCount,
            likeCount,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            viewer,
            labels
          };
        },
        embedRecordView({ record, author, labels }) {
          return {
            $type: "app.bsky.embed.record#view",
            record: {
              $type: "app.bsky.embed.record#viewRecord",
              uri: `at://${author.did}/app.bsky.feed.post/fake`,
              cid: FAKE_CID,
              author,
              value: record,
              labels,
              indexedAt: (/* @__PURE__ */ new Date()).toISOString()
            }
          };
        },
        profileViewBasic({ handle, displayName, description, viewer, labels }) {
          return {
            did: `did:web:${handle}`,
            handle,
            displayName,
            description,
            // technically not in ProfileViewBasic but useful in some cases
            viewer,
            labels
          };
        },
        actorViewerState({ muted, mutedByList, blockedBy, blocking, blockingByList, following, followedBy }) {
          return {
            muted,
            mutedByList,
            blockedBy,
            blocking,
            blockingByList,
            following,
            followedBy
          };
        },
        listViewBasic({ name: name2 }) {
          return {
            uri: "at://did:plc:fake/app.bsky.graph.list/fake",
            cid: FAKE_CID,
            name: name2,
            purpose: "app.bsky.graph.defs#modlist",
            indexedAt: (/* @__PURE__ */ new Date()).toISOString()
          };
        },
        replyNotification({ author, record, labels }) {
          return {
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            reason: "reply",
            reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
            record,
            isRead: false,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            labels
          };
        },
        followNotification({ author, subjectDid, labels }) {
          return {
            uri: `at://${author.did}/app.bsky.graph.follow/fake`,
            cid: FAKE_CID,
            author,
            reason: "follow",
            record: {
              $type: "app.bsky.graph.follow",
              createdAt: (/* @__PURE__ */ new Date()).toISOString(),
              subject: subjectDid
            },
            isRead: false,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            labels
          };
        },
        label({ val, uri, src: src6 }) {
          return {
            src: src6 || "did:plc:fake-labeler",
            uri,
            val,
            cts: (/* @__PURE__ */ new Date()).toISOString()
          };
        }
      };
    }
  });

  // node_modules/@atproto/api/dist/bsky-agent.js
  var require_bsky_agent = __commonJS({
    "node_modules/@atproto/api/dist/bsky-agent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BskyAgent = void 0;
      var syntax_1 = require_dist();
      var agent_1 = require_agent();
      var client_1 = require_client2();
      var labels_1 = require_labels();
      var util_1 = require_util4();
      var moderation_1 = require_moderation();
      var FEED_VIEW_PREF_DEFAULTS = {
        hideReplies: false,
        hideRepliesByUnfollowed: true,
        hideRepliesByLikeCount: 0,
        hideReposts: false,
        hideQuotePosts: false
      };
      var THREAD_VIEW_PREF_DEFAULTS = {
        sort: "oldest",
        prioritizeFollowedUsers: true
      };
      var BskyAgent2 = class _BskyAgent extends agent_1.AtpAgent {
        constructor() {
          super(...arguments);
          Object.defineProperty(this, "getTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getTimeline(params, opts)
          });
          Object.defineProperty(this, "getAuthorFeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getAuthorFeed(params, opts)
          });
          Object.defineProperty(this, "getActorLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getActorLikes(params, opts)
          });
          Object.defineProperty(this, "getPostThread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getPostThread(params, opts)
          });
          Object.defineProperty(this, "getPost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params) => this.api.app.bsky.feed.post.get(params)
          });
          Object.defineProperty(this, "getPosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getPosts(params, opts)
          });
          Object.defineProperty(this, "getLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getLikes(params, opts)
          });
          Object.defineProperty(this, "getRepostedBy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getRepostedBy(params, opts)
          });
          Object.defineProperty(this, "getFollows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.graph.getFollows(params, opts)
          });
          Object.defineProperty(this, "getFollowers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.graph.getFollowers(params, opts)
          });
          Object.defineProperty(this, "getProfile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.getProfile(params, opts)
          });
          Object.defineProperty(this, "getProfiles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.getProfiles(params, opts)
          });
          Object.defineProperty(this, "getSuggestions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.getSuggestions(params, opts)
          });
          Object.defineProperty(this, "searchActors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.searchActors(params, opts)
          });
          Object.defineProperty(this, "searchActorsTypeahead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.searchActorsTypeahead(params, opts)
          });
          Object.defineProperty(this, "listNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.notification.listNotifications(params, opts)
          });
          Object.defineProperty(this, "countUnreadNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.notification.getUnreadCount(params, opts)
          });
          Object.defineProperty(this, "getLabelers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.labeler.getServices(params, opts)
          });
        }
        clone() {
          const inst = new _BskyAgent({
            service: this.service
          });
          this.copyInto(inst);
          return inst;
        }
        get app() {
          return this.api.app;
        }
        getLabelDefinitions(prefs) {
          return __async(this, null, function* () {
            let dids = _BskyAgent.appLabelers;
            if (isBskyPrefs(prefs)) {
              dids = dids.concat(prefs.moderationPrefs.labelers.map((l) => l.did));
            } else if (isModPrefs(prefs)) {
              dids = dids.concat(prefs.labelers.map((l) => l.did));
            } else {
              dids = dids.concat(prefs);
            }
            const labelers = yield this.getLabelers({
              dids,
              detailed: true
            });
            const labelDefs = {};
            if (labelers.data) {
              for (const labeler of labelers.data.views) {
                labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
              }
            }
            return labelDefs;
          });
        }
        post(record) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            record.createdAt = record.createdAt || (/* @__PURE__ */ new Date()).toISOString();
            return this.api.app.bsky.feed.post.create({ repo: this.session.did }, record);
          });
        }
        deletePost(postUri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const postUrip = new syntax_1.AtUri(postUri);
            return yield this.api.app.bsky.feed.post.delete({
              repo: postUrip.hostname,
              rkey: postUrip.rkey
            });
          });
        }
        like(uri, cid) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            return yield this.api.app.bsky.feed.like.create({ repo: this.session.did }, {
              subject: { uri, cid },
              createdAt: (/* @__PURE__ */ new Date()).toISOString()
            });
          });
        }
        deleteLike(likeUri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const likeUrip = new syntax_1.AtUri(likeUri);
            return yield this.api.app.bsky.feed.like.delete({
              repo: likeUrip.hostname,
              rkey: likeUrip.rkey
            });
          });
        }
        repost(uri, cid) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            return yield this.api.app.bsky.feed.repost.create({ repo: this.session.did }, {
              subject: { uri, cid },
              createdAt: (/* @__PURE__ */ new Date()).toISOString()
            });
          });
        }
        deleteRepost(repostUri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const repostUrip = new syntax_1.AtUri(repostUri);
            return yield this.api.app.bsky.feed.repost.delete({
              repo: repostUrip.hostname,
              rkey: repostUrip.rkey
            });
          });
        }
        follow(subjectDid) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            return yield this.api.app.bsky.graph.follow.create({ repo: this.session.did }, {
              subject: subjectDid,
              createdAt: (/* @__PURE__ */ new Date()).toISOString()
            });
          });
        }
        deleteFollow(followUri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const followUrip = new syntax_1.AtUri(followUri);
            return yield this.api.app.bsky.graph.follow.delete({
              repo: followUrip.hostname,
              rkey: followUrip.rkey
            });
          });
        }
        upsertProfile(updateFn) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            let retriesRemaining = 5;
            while (retriesRemaining >= 0) {
              const existing = yield this.com.atproto.repo.getRecord({
                repo: this.session.did,
                collection: "app.bsky.actor.profile",
                rkey: "self"
              }).catch((_) => void 0);
              const updated = yield updateFn(existing == null ? void 0 : existing.data.value);
              if (updated) {
                updated.$type = "app.bsky.actor.profile";
              }
              const validation = client_1.AppBskyActorProfile.validateRecord(updated);
              if (!validation.success) {
                throw validation.error;
              }
              try {
                yield this.com.atproto.repo.putRecord({
                  repo: this.session.did,
                  collection: "app.bsky.actor.profile",
                  rkey: "self",
                  record: updated,
                  swapRecord: (existing == null ? void 0 : existing.data.cid) || null
                });
              } catch (e) {
                if (retriesRemaining > 0 && e instanceof client_1.ComAtprotoRepoPutRecord.InvalidSwapError) {
                  retriesRemaining--;
                  continue;
                } else {
                  throw e;
                }
              }
              break;
            }
          });
        }
        mute(actor) {
          return __async(this, null, function* () {
            return this.api.app.bsky.graph.muteActor({ actor });
          });
        }
        unmute(actor) {
          return __async(this, null, function* () {
            return this.api.app.bsky.graph.unmuteActor({ actor });
          });
        }
        muteModList(uri) {
          return __async(this, null, function* () {
            return this.api.app.bsky.graph.muteActorList({
              list: uri
            });
          });
        }
        unmuteModList(uri) {
          return __async(this, null, function* () {
            return this.api.app.bsky.graph.unmuteActorList({
              list: uri
            });
          });
        }
        blockModList(uri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            return yield this.api.app.bsky.graph.listblock.create({ repo: this.session.did }, {
              subject: uri,
              createdAt: (/* @__PURE__ */ new Date()).toISOString()
            });
          });
        }
        unblockModList(uri) {
          return __async(this, null, function* () {
            var _a2;
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const listInfo = yield this.api.app.bsky.graph.getList({
              list: uri,
              limit: 1
            });
            if (!((_a2 = listInfo.data.list.viewer) == null ? void 0 : _a2.blocked)) {
              return;
            }
            const { rkey } = new syntax_1.AtUri(listInfo.data.list.viewer.blocked);
            return yield this.api.app.bsky.graph.listblock.delete({
              repo: this.session.did,
              rkey
            });
          });
        }
        updateSeenNotifications(seenAt) {
          return __async(this, null, function* () {
            seenAt = seenAt || (/* @__PURE__ */ new Date()).toISOString();
            return this.api.app.bsky.notification.updateSeen({
              seenAt
            });
          });
        }
        getPreferences() {
          return __async(this, null, function* () {
            const prefs = {
              feeds: {
                saved: void 0,
                pinned: void 0
              },
              feedViewPrefs: {
                home: __spreadValues({}, FEED_VIEW_PREF_DEFAULTS)
              },
              threadViewPrefs: __spreadValues({}, THREAD_VIEW_PREF_DEFAULTS),
              moderationPrefs: {
                adultContentEnabled: false,
                labels: __spreadValues({}, labels_1.DEFAULT_LABEL_SETTINGS),
                labelers: _BskyAgent.appLabelers.map((did) => ({ did, labels: {} })),
                mutedWords: [],
                hiddenPosts: []
              },
              birthDate: void 0,
              interests: {
                tags: []
              }
            };
            const res = yield this.app.bsky.actor.getPreferences({});
            const labelPrefs = [];
            for (const pref of res.data.preferences) {
              if (client_1.AppBskyActorDefs.isAdultContentPref(pref) && client_1.AppBskyActorDefs.validateAdultContentPref(pref).success) {
                prefs.moderationPrefs.adultContentEnabled = pref.enabled;
              } else if (client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success) {
                const adjustedPref = adjustLegacyContentLabelPref(pref);
                labelPrefs.push(adjustedPref);
              } else if (client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success) {
                prefs.moderationPrefs.labelers = _BskyAgent.appLabelers.map((did) => ({ did, labels: {} })).concat(pref.labelers.map((labeler) => __spreadProps(__spreadValues({}, labeler), {
                  labels: {}
                })));
              } else if (client_1.AppBskyActorDefs.isSavedFeedsPref(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success) {
                prefs.feeds.saved = pref.saved;
                prefs.feeds.pinned = pref.pinned;
              } else if (client_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && client_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success) {
                if (pref.birthDate) {
                  prefs.birthDate = new Date(pref.birthDate);
                }
              } else if (client_1.AppBskyActorDefs.isFeedViewPref(pref) && client_1.AppBskyActorDefs.validateFeedViewPref(pref).success) {
                const _a2 = pref, { $type, feed } = _a2, v = __objRest(_a2, ["$type", "feed"]);
                prefs.feedViewPrefs[pref.feed] = __spreadValues(__spreadValues({}, FEED_VIEW_PREF_DEFAULTS), v);
              } else if (client_1.AppBskyActorDefs.isThreadViewPref(pref) && client_1.AppBskyActorDefs.validateThreadViewPref(pref).success) {
                const _b = pref, { $type } = _b, v = __objRest(_b, ["$type"]);
                prefs.threadViewPrefs = __spreadValues(__spreadValues({}, prefs.threadViewPrefs), v);
              } else if (client_1.AppBskyActorDefs.isInterestsPref(pref) && client_1.AppBskyActorDefs.validateInterestsPref(pref).success) {
                const _c = pref, { $type } = _c, v = __objRest(_c, ["$type"]);
                prefs.interests = __spreadValues(__spreadValues({}, prefs.interests), v);
              } else if (client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success) {
                const _d = pref, { $type } = _d, v = __objRest(_d, ["$type"]);
                prefs.moderationPrefs.mutedWords = v.items;
              } else if (client_1.AppBskyActorDefs.isHiddenPostsPref(pref) && client_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success) {
                const _e = pref, { $type } = _e, v = __objRest(_e, ["$type"]);
                prefs.moderationPrefs.hiddenPosts = v.items;
              }
            }
            for (const pref of labelPrefs) {
              if (pref.labelerDid) {
                const labeler = prefs.moderationPrefs.labelers.find((labeler2) => labeler2.did === pref.labelerDid);
                if (!labeler)
                  continue;
                labeler.labels[pref.label] = pref.visibility;
              } else {
                prefs.moderationPrefs.labels[pref.label] = pref.visibility;
              }
            }
            prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
            this.configureLabelersHeader(prefsArrayToLabelerDids(res.data.preferences));
            return prefs;
          });
        }
        setSavedFeeds(saved, pinned) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, () => ({
              saved,
              pinned
            }));
          });
        }
        addSavedFeed(v) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, (saved, pinned) => ({
              saved: [...saved.filter((uri) => uri !== v), v],
              pinned
            }));
          });
        }
        removeSavedFeed(v) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, (saved, pinned) => ({
              saved: saved.filter((uri) => uri !== v),
              pinned: pinned.filter((uri) => uri !== v)
            }));
          });
        }
        addPinnedFeed(v) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, (saved, pinned) => ({
              saved: [...saved.filter((uri) => uri !== v), v],
              pinned: [...pinned.filter((uri) => uri !== v), v]
            }));
          });
        }
        removePinnedFeed(v) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, (saved, pinned) => ({
              saved,
              pinned: pinned.filter((uri) => uri !== v)
            }));
          });
        }
        setAdultContentEnabled(v) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              let adultContentPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isAdultContentPref(pref) && client_1.AppBskyActorDefs.validateAdultContentPref(pref).success);
              if (adultContentPref) {
                adultContentPref.enabled = v;
              } else {
                adultContentPref = {
                  $type: "app.bsky.actor.defs#adultContentPref",
                  enabled: v
                };
              }
              return prefs.filter((pref) => !client_1.AppBskyActorDefs.isAdultContentPref(pref)).concat([adultContentPref]);
            });
          });
        }
        setContentLabelPref(key, value, labelerDid) {
          return __async(this, null, function* () {
            if (labelerDid) {
              (0, syntax_1.ensureValidDid)(labelerDid);
            }
            yield updatePreferences(this, (prefs) => {
              let labelPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === key && pref.labelerDid === labelerDid);
              let legacyLabelPref;
              if (labelPref) {
                labelPref.visibility = value;
              } else {
                labelPref = {
                  $type: "app.bsky.actor.defs#contentLabelPref",
                  label: key,
                  labelerDid,
                  visibility: value
                };
              }
              if (client_1.AppBskyActorDefs.isContentLabelPref(labelPref)) {
                if (!labelPref.labelerDid) {
                  const legacyLabelValue = {
                    "graphic-media": "gore",
                    porn: "nsfw",
                    sexual: "suggestive"
                  }[labelPref.label];
                  if (legacyLabelValue) {
                    legacyLabelPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === legacyLabelValue && pref.labelerDid === void 0);
                    if (legacyLabelPref) {
                      legacyLabelPref.visibility = value;
                    } else {
                      legacyLabelPref = {
                        $type: "app.bsky.actor.defs#contentLabelPref",
                        label: legacyLabelValue,
                        labelerDid: void 0,
                        visibility: value
                      };
                    }
                  }
                }
              }
              return prefs.filter((pref) => !client_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === key && pref.labelerDid === labelerDid)).concat([labelPref]).filter((pref) => {
                if (!legacyLabelPref)
                  return true;
                return !client_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === legacyLabelPref.label && pref.labelerDid === void 0);
              }).concat(legacyLabelPref ? [legacyLabelPref] : []);
            });
          });
        }
        addLabeler(did) {
          return __async(this, null, function* () {
            const prefs = yield updatePreferences(this, (prefs2) => {
              let labelersPref = prefs2.findLast((pref) => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
              if (!labelersPref) {
                labelersPref = {
                  $type: "app.bsky.actor.defs#labelersPref",
                  labelers: []
                };
              }
              if (client_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
                let labelerPrefItem = labelersPref.labelers.find((labeler) => labeler.did === did);
                if (!labelerPrefItem) {
                  labelerPrefItem = {
                    did
                  };
                  labelersPref.labelers.push(labelerPrefItem);
                }
              }
              return prefs2.filter((pref) => !client_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
            });
            this.configureLabelersHeader(prefsArrayToLabelerDids(prefs));
          });
        }
        removeLabeler(did) {
          return __async(this, null, function* () {
            const prefs = yield updatePreferences(this, (prefs2) => {
              let labelersPref = prefs2.findLast((pref) => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
              if (!labelersPref) {
                labelersPref = {
                  $type: "app.bsky.actor.defs#labelersPref",
                  labelers: []
                };
              }
              if (client_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
                labelersPref.labelers = labelersPref.labelers.filter((labeler) => labeler.did !== did);
              }
              return prefs2.filter((pref) => !client_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
            });
            this.configureLabelersHeader(prefsArrayToLabelerDids(prefs));
          });
        }
        setPersonalDetails(_0) {
          return __async(this, arguments, function* ({ birthDate }) {
            birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
            yield updatePreferences(this, (prefs) => {
              let personalDetailsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && client_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success);
              if (personalDetailsPref) {
                personalDetailsPref.birthDate = birthDate;
              } else {
                personalDetailsPref = {
                  $type: "app.bsky.actor.defs#personalDetailsPref",
                  birthDate
                };
              }
              return prefs.filter((pref) => !client_1.AppBskyActorDefs.isPersonalDetailsPref(pref)).concat([personalDetailsPref]);
            });
          });
        }
        setFeedViewPrefs(feed, pref) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const existing = prefs.findLast((pref2) => client_1.AppBskyActorDefs.isFeedViewPref(pref2) && client_1.AppBskyActorDefs.validateFeedViewPref(pref2).success && pref2.feed === feed);
              if (existing) {
                pref = __spreadValues(__spreadValues({}, existing), pref);
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isFeedViewPref(pref) || p.feed !== feed).concat([__spreadProps(__spreadValues({}, pref), { $type: "app.bsky.actor.defs#feedViewPref", feed })]);
            });
          });
        }
        setThreadViewPrefs(pref) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const existing = prefs.findLast((pref2) => client_1.AppBskyActorDefs.isThreadViewPref(pref2) && client_1.AppBskyActorDefs.validateThreadViewPref(pref2).success);
              if (existing) {
                pref = __spreadValues(__spreadValues({}, existing), pref);
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isThreadViewPref(p)).concat([__spreadProps(__spreadValues({}, pref), { $type: "app.bsky.actor.defs#threadViewPref" })]);
            });
          });
        }
        setInterestsPref(pref) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const existing = prefs.findLast((pref2) => client_1.AppBskyActorDefs.isInterestsPref(pref2) && client_1.AppBskyActorDefs.validateInterestsPref(pref2).success);
              if (existing) {
                pref = __spreadValues(__spreadValues({}, existing), pref);
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isInterestsPref(p)).concat([__spreadProps(__spreadValues({}, pref), { $type: "app.bsky.actor.defs#interestsPref" })]);
            });
          });
        }
        upsertMutedWords(newMutedWords) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              let mutedWordsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
              if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                for (const updatedWord of newMutedWords) {
                  let foundMatch = false;
                  const sanitizedUpdatedValue = (0, util_1.sanitizeMutedWordValue)(updatedWord.value);
                  if (!sanitizedUpdatedValue)
                    continue;
                  for (const existingItem of mutedWordsPref.items) {
                    if (existingItem.value === sanitizedUpdatedValue) {
                      existingItem.targets = Array.from(/* @__PURE__ */ new Set([...existingItem.targets, ...updatedWord.targets]));
                      foundMatch = true;
                      break;
                    }
                  }
                  if (!foundMatch) {
                    mutedWordsPref.items.push(__spreadProps(__spreadValues({}, updatedWord), {
                      value: sanitizedUpdatedValue
                    }));
                  }
                }
              } else {
                mutedWordsPref = {
                  items: newMutedWords.map((w) => __spreadProps(__spreadValues({}, w), {
                    value: (0, util_1.sanitizeMutedWordValue)(w.value)
                  }))
                };
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                __spreadProps(__spreadValues({}, mutedWordsPref), { $type: "app.bsky.actor.defs#mutedWordsPref" })
              ]);
            });
          });
        }
        updateMutedWord(mutedWord) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const mutedWordsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
              if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                for (const existingItem of mutedWordsPref.items) {
                  if (existingItem.value === mutedWord.value) {
                    existingItem.targets = mutedWord.targets;
                    break;
                  }
                }
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                __spreadProps(__spreadValues({}, mutedWordsPref), { $type: "app.bsky.actor.defs#mutedWordsPref" })
              ]);
            });
          });
        }
        removeMutedWord(mutedWord) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const mutedWordsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
              if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                for (let i = 0; i < mutedWordsPref.items.length; i++) {
                  const existing = mutedWordsPref.items[i];
                  if (existing.value === mutedWord.value) {
                    mutedWordsPref.items.splice(i, 1);
                    break;
                  }
                }
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                __spreadProps(__spreadValues({}, mutedWordsPref), { $type: "app.bsky.actor.defs#mutedWordsPref" })
              ]);
            });
          });
        }
        hidePost(postUri) {
          return __async(this, null, function* () {
            yield updateHiddenPost(this, postUri, "hide");
          });
        }
        unhidePost(postUri) {
          return __async(this, null, function* () {
            yield updateHiddenPost(this, postUri, "unhide");
          });
        }
      };
      exports.BskyAgent = BskyAgent2;
      function updatePreferences(agent, cb) {
        return __async(this, null, function* () {
          const res = yield agent.app.bsky.actor.getPreferences({});
          const newPrefs = cb(res.data.preferences);
          if (newPrefs === false) {
            return res.data.preferences;
          }
          yield agent.app.bsky.actor.putPreferences({
            preferences: newPrefs
          });
          return newPrefs;
        });
      }
      function updateFeedPreferences(agent, cb) {
        return __async(this, null, function* () {
          let res;
          yield updatePreferences(agent, (prefs) => {
            let feedsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isSavedFeedsPref(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
            if (feedsPref) {
              res = cb(feedsPref.saved, feedsPref.pinned);
              feedsPref.saved = res.saved;
              feedsPref.pinned = res.pinned;
            } else {
              res = cb([], []);
              feedsPref = {
                $type: "app.bsky.actor.defs#savedFeedsPref",
                saved: res.saved,
                pinned: res.pinned
              };
            }
            return prefs.filter((pref) => !client_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat([feedsPref]);
          });
          return res;
        });
      }
      function adjustLegacyContentLabelPref(pref) {
        let visibility = pref.visibility;
        if (visibility === "show") {
          visibility = "ignore";
        }
        return __spreadProps(__spreadValues({}, pref), { visibility });
      }
      function remapLegacyLabels(labels) {
        const _labels = __spreadValues({}, labels);
        const legacyToNewMap = {
          gore: "graphic-media",
          nsfw: "porn",
          suggestive: "sexual"
        };
        for (const labelName in _labels) {
          const newLabelName = legacyToNewMap[labelName];
          if (newLabelName) {
            _labels[newLabelName] = _labels[labelName];
          }
        }
        return _labels;
      }
      function prefsArrayToLabelerDids(prefs) {
        const labelersPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
        let dids = [];
        if (labelersPref) {
          dids = labelersPref.labelers.map((labeler) => labeler.did);
        }
        return dids;
      }
      function updateHiddenPost(agent, postUri, action) {
        return __async(this, null, function* () {
          yield updatePreferences(agent, (prefs) => {
            let pref = prefs.findLast((pref2) => client_1.AppBskyActorDefs.isHiddenPostsPref(pref2) && client_1.AppBskyActorDefs.validateHiddenPostsPref(pref2).success);
            if (pref && client_1.AppBskyActorDefs.isHiddenPostsPref(pref)) {
              pref.items = action === "hide" ? Array.from(/* @__PURE__ */ new Set([...pref.items, postUri])) : pref.items.filter((uri) => uri !== postUri);
            } else {
              if (action === "hide") {
                pref = {
                  $type: "app.bsky.actor.defs#hiddenPostsPref",
                  items: [postUri]
                };
              }
            }
            return prefs.filter((p) => !client_1.AppBskyActorDefs.isInterestsPref(p)).concat([__spreadProps(__spreadValues({}, pref), { $type: "app.bsky.actor.defs#hiddenPostsPref" })]);
          });
        });
      }
      function isBskyPrefs(v) {
        return v && typeof v === "object" && "moderationPrefs" in v && isModPrefs(v.moderationPrefs);
      }
      function isModPrefs(v) {
        return v && typeof v === "object" && "labelers" in v;
      }
    }
  });

  // node_modules/@atproto/api/dist/index.js
  var require_dist6 = __commonJS({
    "node_modules/@atproto/api/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = exports.BskyAgent = exports.DEFAULT_LABEL_SETTINGS = exports.LABELS = exports.parseLanguage = exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.BlobRef = exports.AtUri = void 0;
      var syntax_1 = require_dist();
      Object.defineProperty(exports, "AtUri", { enumerable: true, get: function() {
        return syntax_1.AtUri;
      } });
      var lexicon_1 = require_dist4();
      Object.defineProperty(exports, "BlobRef", { enumerable: true, get: function() {
        return lexicon_1.BlobRef;
      } });
      Object.defineProperty(exports, "lexToJson", { enumerable: true, get: function() {
        return lexicon_1.lexToJson;
      } });
      Object.defineProperty(exports, "stringifyLex", { enumerable: true, get: function() {
        return lexicon_1.stringifyLex;
      } });
      Object.defineProperty(exports, "jsonToLex", { enumerable: true, get: function() {
        return lexicon_1.jsonToLex;
      } });
      Object.defineProperty(exports, "jsonStringToLex", { enumerable: true, get: function() {
        return lexicon_1.jsonStringToLex;
      } });
      var common_web_1 = require_dist2();
      Object.defineProperty(exports, "parseLanguage", { enumerable: true, get: function() {
        return common_web_1.parseLanguage;
      } });
      __exportStar(require_types4(), exports);
      __exportStar(require_const(), exports);
      __exportStar(require_util4(), exports);
      __exportStar(require_client2(), exports);
      __exportStar(require_agent(), exports);
      __exportStar(require_rich_text(), exports);
      __exportStar(require_sanitization(), exports);
      __exportStar(require_unicode(), exports);
      __exportStar(require_util7(), exports);
      __exportStar(require_moderation(), exports);
      __exportStar(require_types6(), exports);
      __exportStar(require_mocker(), exports);
      var labels_1 = require_labels();
      Object.defineProperty(exports, "LABELS", { enumerable: true, get: function() {
        return labels_1.LABELS;
      } });
      Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", { enumerable: true, get: function() {
        return labels_1.DEFAULT_LABEL_SETTINGS;
      } });
      var bsky_agent_1 = require_bsky_agent();
      Object.defineProperty(exports, "BskyAgent", { enumerable: true, get: function() {
        return bsky_agent_1.BskyAgent;
      } });
      var agent_1 = require_agent();
      Object.defineProperty(exports, "default", { enumerable: true, get: function() {
        return agent_1.AtpAgent;
      } });
    }
  });

  // node_modules/varint/encode.js
  var require_encode = __commonJS({
    "node_modules/varint/encode.js"(exports, module2) {
      module2.exports = encode13;
      var MSB5 = 128;
      var REST5 = 127;
      var MSBALL5 = ~REST5;
      var INT5 = Math.pow(2, 31);
      function encode13(num, out, offset) {
        if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
          encode13.bytes = 0;
          throw new RangeError("Could not encode varint");
        }
        out = out || [];
        offset = offset || 0;
        var oldOffset = offset;
        while (num >= INT5) {
          out[offset++] = num & 255 | MSB5;
          num /= 128;
        }
        while (num & MSBALL5) {
          out[offset++] = num & 255 | MSB5;
          num >>>= 7;
        }
        out[offset] = num | 0;
        encode13.bytes = offset - oldOffset + 1;
        return out;
      }
    }
  });

  // node_modules/varint/decode.js
  var require_decode = __commonJS({
    "node_modules/varint/decode.js"(exports, module2) {
      module2.exports = read6;
      var MSB5 = 128;
      var REST5 = 127;
      function read6(buf2, offset) {
        var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
        do {
          if (counter >= l || shift > 49) {
            read6.bytes = 0;
            throw new RangeError("Could not decode varint");
          }
          b = buf2[counter++];
          res += shift < 28 ? (b & REST5) << shift : (b & REST5) * Math.pow(2, shift);
          shift += 7;
        } while (b >= MSB5);
        read6.bytes = counter - offset;
        return res;
      }
    }
  });

  // node_modules/varint/length.js
  var require_length = __commonJS({
    "node_modules/varint/length.js"(exports, module2) {
      var N15 = Math.pow(2, 7);
      var N25 = Math.pow(2, 14);
      var N35 = Math.pow(2, 21);
      var N45 = Math.pow(2, 28);
      var N55 = Math.pow(2, 35);
      var N65 = Math.pow(2, 42);
      var N75 = Math.pow(2, 49);
      var N85 = Math.pow(2, 56);
      var N95 = Math.pow(2, 63);
      module2.exports = function(value) {
        return value < N15 ? 1 : value < N25 ? 2 : value < N35 ? 3 : value < N45 ? 4 : value < N55 ? 5 : value < N65 ? 6 : value < N75 ? 7 : value < N85 ? 8 : value < N95 ? 9 : 10;
      };
    }
  });

  // node_modules/varint/index.js
  var require_varint = __commonJS({
    "node_modules/varint/index.js"(exports, module2) {
      module2.exports = {
        encode: require_encode(),
        decode: require_decode(),
        encodingLength: require_length()
      };
    }
  });

  // lib/shorten.js
  function likelyDID(text) {
    return text && (!text.trim().indexOf("did:") || text.trim().length === 24 && !/[^\sa-z0-9]/i.test(text));
  }
  function shortenDID(did) {
    return did && /** @type {T} */
    (did.replace(_shortenDID_Regex, "").toLowerCase() || void 0);
  }
  var _shortenDID_Regex = /^did\:plc\:/;
  function unwrapShortDID(shortDID) {
    return !shortDID ? void 0 : shortDID.indexOf(":") < 0 ? "did:plc:" + shortDID.toLowerCase() : shortDID.toLowerCase();
  }
  function shortenHandle(handle) {
    handle = cheapNormalizeHandle(handle);
    return handle && /** @type {T} */
    (handle.replace(_shortenHandle_Regex, "").toLowerCase() || void 0);
  }
  var _shortenHandle_Regex = /\.bsky\.social$/;
  function unwrapShortHandle(shortHandle) {
    if (likelyDID(shortHandle))
      return unwrapShortDID(shortHandle);
    shortHandle = cheapNormalizeHandle(shortHandle);
    return !shortHandle ? void 0 : shortHandle.indexOf(".") < 0 ? shortHandle.toLowerCase() + ".bsky.social" : shortHandle.toLowerCase();
  }
  function cheapNormalizeHandle(handle) {
    handle = handle && handle.trim().toLowerCase();
    if (handle && handle.charCodeAt(0) === 64)
      handle = handle.slice(1);
    const urlprefix = "https://bsky.app/";
    if (handle && handle.lastIndexOf(urlprefix, 0) === 0) {
      const postURL = breakPostURL(handle);
      if (postURL && postURL.shortDID)
        return postURL.shortDID;
    }
    if (handle && handle.lastIndexOf("at:", 0) === 0) {
      const feedUri = breakFeedUri(handle);
      if (feedUri && feedUri.shortDID)
        return feedUri.shortDID;
      if (handle && handle.lastIndexOf("at://", 0) === 0)
        handle = handle.slice(5);
      else
        handle = handle.slice(3);
    }
    return handle || void 0;
  }
  var offsetTooLarge = Date.UTC(2022, 1, 1);
  function breakPostURL(url) {
    if (!url)
      return;
    const match = _breakPostURL_Regex.exec(url);
    if (!match)
      return;
    return { shortDID: match[1], postID: match[2] };
  }
  var _breakPostURL_Regex = /^http[s]?\:\/\/bsky\.app\/profile\/([a-z0-9\.\:]+)\/post\/([a-z0-9]+)$/;
  function breakFeedUri(uri) {
    if (!uri)
      return;
    const match = _breakFeedUri_Regex.exec(uri);
    if (!match || !match[3])
      return;
    return { shortDID: match[2], postID: match[3] };
  }
  var _breakFeedUri_Regex = /^at\:\/\/(did:plc:)?([a-z0-9]+)\/[a-z\.]+\/?(.*)?$/;

  // lib/is-promise.js
  function isPromise(x) {
    if (!x || typeof x !== "object")
      return false;
    else
      return typeof x.then === "function";
  }

  // lib/coldsky-agent.js
  var import_api = __toESM(require_dist6());

  // lib/throttled-async-cache.js
  function throttledAsyncCache(call, { maxConcurrency = 3, interval = 100 } = {}) {
    const cache2 = multikeyMap();
    const outstandingRequests = /* @__PURE__ */ new Set();
    const waitingRequests = /* @__PURE__ */ new Set();
    var scheduleMoreLaterTimeout;
    throttledCall.prepopulate = prepopulate;
    throttledCall.evict = evict;
    return throttledCall;
    function prepopulate(value, ...args) {
      cache2.set(...args, { value });
    }
    function evict(...args) {
      cache2.delete(...args);
    }
    function throttledCall(...args) {
      let result = cache2.get(...args);
      if (result) {
        if (isPromise(result.value))
          result.priority++;
        return result.value;
      }
      let scheduleNow;
      const schedulePromise = new Promise((resolve) => scheduleNow = resolve);
      const entry = {
        priority: 0,
        value: invokeCall(),
        scheduleNow
      };
      cache2.set(...args, entry);
      waitingRequests.add(entry);
      scheduleAsAppropriate();
      return entry.value;
      function invokeCall() {
        return __async(this, null, function* () {
          yield schedulePromise;
          waitingRequests.delete(entry);
          outstandingRequests.add(entry);
          try {
            const result2 = yield call(...args);
            entry.value = result2;
            return result2;
          } finally {
            outstandingRequests.delete(entry);
            scheduleAsAppropriate();
          }
        });
      }
    }
    function scheduleAsAppropriate() {
      return __async(this, null, function* () {
        if (outstandingRequests.size >= maxConcurrency)
          return;
        if (interval) {
          yield new Promise((resolve) => setTimeout(resolve, interval));
          if (outstandingRequests.size >= maxConcurrency)
            return;
        }
        const nextRequest = [...waitingRequests].sort((a, b) => b.priority - a.priority)[0];
        if (!nextRequest)
          return;
        nextRequest.scheduleNow();
        if (outstandingRequests.size < maxConcurrency) {
          clearTimeout(scheduleMoreLaterTimeout);
          scheduleMoreLaterTimeout = setTimeout(scheduleAsAppropriate, interval || 100);
        }
      });
    }
  }
  function multikeyMap() {
    const storeMap = /* @__PURE__ */ new Map();
    const resultMap = {
      get,
      set,
      delete: deleteKeys,
      has,
      clear
    };
    return resultMap;
    function get(...keys) {
      let entry = storeMap;
      for (const key of keys) {
        entry = entry.get(key);
        if (!entry)
          return;
      }
      return entry._value;
    }
    function set(...keys) {
      let entry = storeMap;
      for (let i = 0; i < keys.length - 1; i++) {
        const key = keys[i];
        entry = entry.get(key) || entry.set(key, /* @__PURE__ */ new Map()).get(key);
      }
      entry._value = keys[keys.length - 1];
      return resultMap;
    }
    function deleteKeys(...keys) {
      let entry = storeMap;
      for (let i = 0; i < keys.length - 1; i++) {
        const key = keys[i];
        entry = entry.get(key);
        if (!entry)
          return false;
      }
      return entry.delete(keys[keys.length - 1]);
    }
    function has(...keys) {
      let entry = storeMap;
      for (const key of keys) {
        entry = entry.get(key);
        if (!entry)
          return false;
      }
      return true;
    }
    function clear() {
      return storeMap.clear();
    }
  }

  // lib/coldsky-agent.js
  var BSKY_SOCIAL_URL = "https://bsky.social/";
  var BSKY_NETWORK_URL = "https://bsky.network/";
  var ColdskyAgent = class extends import_api.BskyAgent {
    /** @param {Omit<ConstructorParameters<typeof BskyAgent>[0], 'service'>} args */
    constructor(args) {
      var _a2, _b;
      super(__spreadProps(__spreadValues({}, args), {
        // most of methods work fine on bsky.social
        service: BSKY_SOCIAL_URL
      }));
      for (const key in this.com.atproto) {
        const ns = this.com.atproto[key];
        const baseClient = (_b = (_a2 = ns._service) == null ? void 0 : _a2.xrpc) == null ? void 0 : _b.baseClient;
        if (baseClient)
          this.patchBaseClient(baseClient);
      }
    }
    /**
     * @param {typeof this.com.atproto.sync._service.xrpc.baseClient} baseClient 
     */
    patchBaseClient(baseClient) {
      baseClient.lex.assertValidXrpcOutput = function(lexUri, value, ...rest) {
        return true;
      };
      if (
        /** @type {*} */
        baseClient.fetch._patchedFetch
      )
        return;
      baseClient.fetch = overrideFetch(baseClient.fetch.bind(baseClient));
    }
  };
  var typedCaches = {};
  function overrideFetch(baseFetch) {
    if (baseFetch._patchedFetch)
      return baseFetch;
    fetchOverride._patchedFetch = true;
    return fetchOverride;
    function fetchOverride(httpUri, httpMethod, httpHeaders, httpReqBody) {
      const useBskyNetwork = httpUri.indexOf("com.atproto.sync.listRepos") >= 0;
      const useHttpUri = useBskyNetwork ? "https://corsproxy.io/?" + httpUri.replace(BSKY_SOCIAL_URL, BSKY_NETWORK_URL) : httpUri;
      const qPos = useHttpUri.indexOf("?");
      const httpUriKey = qPos >= 0 ? useHttpUri.slice(0, qPos) : useHttpUri;
      const headersUnique = JSON.stringify(httpHeaders);
      const httpReqBodyUnique = JSON.stringify(httpReqBody);
      let cache2 = typedCaches[httpUriKey];
      if (!cache2) {
        cache2 = typedCaches[httpUriKey] = throttledAsyncCache(
          fetchWithBase,
          { maxConcurrency: 2, interval: 100 }
        );
      }
      return cache2(useHttpUri, httpMethod, headersUnique, httpReqBodyUnique);
      function fetchWithBase(httpUri2, httpMethod2, httpHeadersStringified, httpReqBodyStringified) {
        const startFetch = Date.now();
        const httpHeaders2 = typeof httpHeadersStringified === "undefined" ? void 0 : JSON.parse(httpHeadersStringified);
        const httpReqBody2 = typeof httpReqBodyStringified === "undefined" ? void 0 : JSON.parse(httpReqBodyStringified);
        return fetchWithRateHandling();
        function fetchWithRateHandling() {
          return baseFetch(httpUri2, httpMethod2, httpHeaders2, httpReqBody2).then(
            (result) => {
              setTimeout(() => {
                cache2.evict(httpUri2, httpMethod2, headersUnique, httpReqBodyUnique);
              }, httpMethod2 === "GET" ? 1e3 : 100);
              return result;
            },
            handleFetchError
          );
        }
        function handleFetchError(error) {
          if (/\brate\b/i.test(error.message || "")) {
            const waitTime = Math.min(
              Math.max(1e3, (Date.now() - startFetch) / 3),
              1e3
            );
            return new Promise((resolve) => setTimeout(resolve, waitTime)).then(() => fetchWithRateHandling());
          } else {
            setTimeout(() => {
              cache2.evict(httpUri2, httpMethod2, headersUnique, httpReqBodyUnique);
            }, 10);
            throw error;
          }
        }
      }
    }
  }

  // node_modules/cbor-x/decode.js
  var decoder;
  try {
    decoder = new TextDecoder();
  } catch (error) {
  }
  var src4;
  var srcEnd;
  var position = 0;
  var EMPTY_ARRAY = [];
  var LEGACY_RECORD_INLINE_ID = 105;
  var RECORD_DEFINITIONS_ID = 57342;
  var RECORD_INLINE_ID = 57343;
  var BUNDLED_STRINGS_ID = 57337;
  var PACKED_REFERENCE_TAG_ID = 6;
  var STOP_CODE = {};
  var strings = EMPTY_ARRAY;
  var stringPosition = 0;
  var currentDecoder = {};
  var currentStructures;
  var srcString;
  var srcStringStart = 0;
  var srcStringEnd = 0;
  var bundledStrings;
  var referenceMap;
  var currentExtensions = [];
  var currentExtensionRanges = [];
  var packedValues;
  var dataView;
  var restoreMapsAsObject;
  var defaultOptions = {
    useRecords: false,
    mapsAsObjects: true
  };
  var sequentialMode = false;
  var inlineObjectReadThreshold = 2;
  try {
    new Function("");
  } catch (error) {
    inlineObjectReadThreshold = Infinity;
  }
  var Decoder4 = class _Decoder {
    constructor(options) {
      if (options) {
        if ((options.keyMap || options._keyMap) && !options.useRecords) {
          options.useRecords = false;
          options.mapsAsObjects = true;
        }
        if (options.useRecords === false && options.mapsAsObjects === void 0)
          options.mapsAsObjects = true;
        if (options.getStructures)
          options.getShared = options.getStructures;
        if (options.getShared && !options.structures)
          (options.structures = []).uninitialized = true;
        if (options.keyMap) {
          this.mapKey = /* @__PURE__ */ new Map();
          for (let [k, v] of Object.entries(options.keyMap))
            this.mapKey.set(v, k);
        }
      }
      Object.assign(this, options);
    }
    /*
    decodeKey(key) {
    	return this.keyMap
    		? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key
    		: key
    }
    */
    decodeKey(key) {
      return this.keyMap ? this.mapKey.get(key) || key : key;
    }
    encodeKey(key) {
      return this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key;
    }
    encodeKeys(rec) {
      if (!this._keyMap)
        return rec;
      let map = /* @__PURE__ */ new Map();
      for (let [k, v] of Object.entries(rec))
        map.set(this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k, v);
      return map;
    }
    decodeKeys(map) {
      if (!this._keyMap || map.constructor.name != "Map")
        return map;
      if (!this._mapKey) {
        this._mapKey = /* @__PURE__ */ new Map();
        for (let [k, v] of Object.entries(this._keyMap))
          this._mapKey.set(v, k);
      }
      let res = {};
      map.forEach((v, k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] = v);
      return res;
    }
    mapDecode(source, end) {
      let res = this.decode(source);
      if (this._keyMap) {
        switch (res.constructor.name) {
          case "Array":
            return res.map((r) => this.decodeKeys(r));
        }
      }
      return res;
    }
    decode(source, end) {
      if (src4) {
        return saveState(() => {
          clearSource();
          return this ? this.decode(source, end) : _Decoder.prototype.decode.call(defaultOptions, source, end);
        });
      }
      srcEnd = end > -1 ? end : source.length;
      position = 0;
      stringPosition = 0;
      srcStringEnd = 0;
      srcString = null;
      strings = EMPTY_ARRAY;
      bundledStrings = null;
      src4 = source;
      try {
        dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));
      } catch (error) {
        src4 = null;
        if (source instanceof Uint8Array)
          throw error;
        throw new Error("Source must be a Uint8Array or Buffer but was a " + (source && typeof source == "object" ? source.constructor.name : typeof source));
      }
      if (this instanceof _Decoder) {
        currentDecoder = this;
        packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);
        if (this.structures) {
          currentStructures = this.structures;
          return checkedRead();
        } else if (!currentStructures || currentStructures.length > 0) {
          currentStructures = [];
        }
      } else {
        currentDecoder = defaultOptions;
        if (!currentStructures || currentStructures.length > 0)
          currentStructures = [];
        packedValues = null;
      }
      return checkedRead();
    }
    decodeMultiple(source, forEach) {
      let values, lastPosition = 0;
      try {
        let size = source.length;
        sequentialMode = true;
        let value = this ? this.decode(source, size) : defaultDecoder.decode(source, size);
        if (forEach) {
          if (forEach(value) === false) {
            return;
          }
          while (position < size) {
            lastPosition = position;
            if (forEach(checkedRead()) === false) {
              return;
            }
          }
        } else {
          values = [value];
          while (position < size) {
            lastPosition = position;
            values.push(checkedRead());
          }
          return values;
        }
      } catch (error) {
        error.lastPosition = lastPosition;
        error.values = values;
        throw error;
      } finally {
        sequentialMode = false;
        clearSource();
      }
    }
  };
  function checkedRead() {
    try {
      let result = read4();
      if (bundledStrings) {
        if (position >= bundledStrings.postBundlePosition) {
          let error = new Error("Unexpected bundle position");
          error.incomplete = true;
          throw error;
        }
        position = bundledStrings.postBundlePosition;
        bundledStrings = null;
      }
      if (position == srcEnd) {
        currentStructures = null;
        src4 = null;
        if (referenceMap)
          referenceMap = null;
      } else if (position > srcEnd) {
        let error = new Error("Unexpected end of CBOR data");
        error.incomplete = true;
        throw error;
      } else if (!sequentialMode) {
        throw new Error("Data read, but end of buffer not reached");
      }
      return result;
    } catch (error) {
      clearSource();
      if (error instanceof RangeError || error.message.startsWith("Unexpected end of buffer")) {
        error.incomplete = true;
      }
      throw error;
    }
  }
  function read4() {
    let token = src4[position++];
    let majorType = token >> 5;
    token = token & 31;
    if (token > 23) {
      switch (token) {
        case 24:
          token = src4[position++];
          break;
        case 25:
          if (majorType == 7) {
            return getFloat16();
          }
          token = dataView.getUint16(position);
          position += 2;
          break;
        case 26:
          if (majorType == 7) {
            let value = dataView.getFloat32(position);
            if (currentDecoder.useFloat32 > 2) {
              let multiplier = mult10[(src4[position] & 127) << 1 | src4[position + 1] >> 7];
              position += 4;
              return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;
            }
            position += 4;
            return value;
          }
          token = dataView.getUint32(position);
          position += 4;
          break;
        case 27:
          if (majorType == 7) {
            let value = dataView.getFloat64(position);
            position += 8;
            return value;
          }
          if (majorType > 1) {
            if (dataView.getUint32(position) > 0)
              throw new Error("JavaScript does not support arrays, maps, or strings with length over 4294967295");
            token = dataView.getUint32(position + 4);
          } else if (currentDecoder.int64AsNumber) {
            token = dataView.getUint32(position) * 4294967296;
            token += dataView.getUint32(position + 4);
          } else
            token = dataView.getBigUint64(position);
          position += 8;
          break;
        case 31:
          switch (majorType) {
            case 2:
            case 3:
              throw new Error("Indefinite length not supported for byte or text strings");
            case 4:
              let array = [];
              let value, i = 0;
              while ((value = read4()) != STOP_CODE) {
                array[i++] = value;
              }
              return majorType == 4 ? array : majorType == 3 ? array.join("") : Buffer.concat(array);
            case 5:
              let key;
              if (currentDecoder.mapsAsObjects) {
                let object = {};
                if (currentDecoder.keyMap)
                  while ((key = read4()) != STOP_CODE)
                    object[safeKey(currentDecoder.decodeKey(key))] = read4();
                else
                  while ((key = read4()) != STOP_CODE)
                    object[safeKey(key)] = read4();
                return object;
              } else {
                if (restoreMapsAsObject) {
                  currentDecoder.mapsAsObjects = true;
                  restoreMapsAsObject = false;
                }
                let map = /* @__PURE__ */ new Map();
                if (currentDecoder.keyMap)
                  while ((key = read4()) != STOP_CODE)
                    map.set(currentDecoder.decodeKey(key), read4());
                else
                  while ((key = read4()) != STOP_CODE)
                    map.set(key, read4());
                return map;
              }
            case 7:
              return STOP_CODE;
            default:
              throw new Error("Invalid major type for indefinite length " + majorType);
          }
        default:
          throw new Error("Unknown token " + token);
      }
    }
    switch (majorType) {
      case 0:
        return token;
      case 1:
        return ~token;
      case 2:
        return readBin(token);
      case 3:
        if (srcStringEnd >= position) {
          return srcString.slice(position - srcStringStart, (position += token) - srcStringStart);
        }
        if (srcStringEnd == 0 && srcEnd < 140 && token < 32) {
          let string2 = token < 16 ? shortStringInJS(token) : longStringInJS(token);
          if (string2 != null)
            return string2;
        }
        return readFixedString(token);
      case 4:
        let array = new Array(token);
        for (let i = 0; i < token; i++)
          array[i] = read4();
        return array;
      case 5:
        if (currentDecoder.mapsAsObjects) {
          let object = {};
          if (currentDecoder.keyMap)
            for (let i = 0; i < token; i++)
              object[safeKey(currentDecoder.decodeKey(read4()))] = read4();
          else
            for (let i = 0; i < token; i++)
              object[safeKey(read4())] = read4();
          return object;
        } else {
          if (restoreMapsAsObject) {
            currentDecoder.mapsAsObjects = true;
            restoreMapsAsObject = false;
          }
          let map = /* @__PURE__ */ new Map();
          if (currentDecoder.keyMap)
            for (let i = 0; i < token; i++)
              map.set(currentDecoder.decodeKey(read4()), read4());
          else
            for (let i = 0; i < token; i++)
              map.set(read4(), read4());
          return map;
        }
      case 6:
        if (token >= BUNDLED_STRINGS_ID) {
          let structure = currentStructures[token & 8191];
          if (structure) {
            if (!structure.read)
              structure.read = createStructureReader(structure);
            return structure.read();
          }
          if (token < 65536) {
            if (token == RECORD_INLINE_ID) {
              let length5 = readJustLength();
              let id = read4();
              let structure2 = read4();
              recordDefinition(id, structure2);
              let object = {};
              if (currentDecoder.keyMap)
                for (let i = 2; i < length5; i++) {
                  let key = currentDecoder.decodeKey(structure2[i - 2]);
                  object[safeKey(key)] = read4();
                }
              else
                for (let i = 2; i < length5; i++) {
                  let key = structure2[i - 2];
                  object[safeKey(key)] = read4();
                }
              return object;
            } else if (token == RECORD_DEFINITIONS_ID) {
              let length5 = readJustLength();
              let id = read4();
              for (let i = 2; i < length5; i++) {
                recordDefinition(id++, read4());
              }
              return read4();
            } else if (token == BUNDLED_STRINGS_ID) {
              return readBundleExt();
            }
            if (currentDecoder.getShared) {
              loadShared();
              structure = currentStructures[token & 8191];
              if (structure) {
                if (!structure.read)
                  structure.read = createStructureReader(structure);
                return structure.read();
              }
            }
          }
        }
        let extension = currentExtensions[token];
        if (extension) {
          if (extension.handlesRead)
            return extension(read4);
          else
            return extension(read4());
        } else {
          let input = read4();
          for (let i = 0; i < currentExtensionRanges.length; i++) {
            let value = currentExtensionRanges[i](token, input);
            if (value !== void 0)
              return value;
          }
          return new Tag(input, token);
        }
      case 7:
        switch (token) {
          case 20:
            return false;
          case 21:
            return true;
          case 22:
            return null;
          case 23:
            return;
          case 31:
          default:
            let packedValue = (packedValues || getPackedValues())[token];
            if (packedValue !== void 0)
              return packedValue;
            throw new Error("Unknown token " + token);
        }
      default:
        if (isNaN(token)) {
          let error = new Error("Unexpected end of CBOR data");
          error.incomplete = true;
          throw error;
        }
        throw new Error("Unknown CBOR token " + token);
    }
  }
  var validName = /^[a-zA-Z_$][a-zA-Z\d_$]*$/;
  function createStructureReader(structure) {
    function readObject() {
      let length5 = src4[position++];
      length5 = length5 & 31;
      if (length5 > 23) {
        switch (length5) {
          case 24:
            length5 = src4[position++];
            break;
          case 25:
            length5 = dataView.getUint16(position);
            position += 2;
            break;
          case 26:
            length5 = dataView.getUint32(position);
            position += 4;
            break;
          default:
            throw new Error("Expected array header, but got " + src4[position - 1]);
        }
      }
      let compiledReader = this.compiledReader;
      while (compiledReader) {
        if (compiledReader.propertyCount === length5)
          return compiledReader(read4);
        compiledReader = compiledReader.next;
      }
      if (this.slowReads++ >= inlineObjectReadThreshold) {
        let array = this.length == length5 ? this : this.slice(0, length5);
        compiledReader = currentDecoder.keyMap ? new Function("r", "return {" + array.map((k) => currentDecoder.decodeKey(k)).map((k) => validName.test(k) ? safeKey(k) + ":r()" : "[" + JSON.stringify(k) + "]:r()").join(",") + "}") : new Function("r", "return {" + array.map((key) => validName.test(key) ? safeKey(key) + ":r()" : "[" + JSON.stringify(key) + "]:r()").join(",") + "}");
        if (this.compiledReader)
          compiledReader.next = this.compiledReader;
        compiledReader.propertyCount = length5;
        this.compiledReader = compiledReader;
        return compiledReader(read4);
      }
      let object = {};
      if (currentDecoder.keyMap)
        for (let i = 0; i < length5; i++)
          object[safeKey(currentDecoder.decodeKey(this[i]))] = read4();
      else
        for (let i = 0; i < length5; i++) {
          object[safeKey(this[i])] = read4();
        }
      return object;
    }
    structure.slowReads = 0;
    return readObject;
  }
  function safeKey(key) {
    if (typeof key === "string")
      return key === "__proto__" ? "__proto_" : key;
    if (typeof key === "number" || typeof key === "boolean" || typeof key === "bigint")
      return key.toString();
    if (key == null)
      return key + "";
    throw new Error("Invalid property name type " + typeof key);
  }
  var readFixedString = readStringJS;
  function readStringJS(length5) {
    let result;
    if (length5 < 16) {
      if (result = shortStringInJS(length5))
        return result;
    }
    if (length5 > 64 && decoder)
      return decoder.decode(src4.subarray(position, position += length5));
    const end = position + length5;
    const units = [];
    result = "";
    while (position < end) {
      const byte1 = src4[position++];
      if ((byte1 & 128) === 0) {
        units.push(byte1);
      } else if ((byte1 & 224) === 192) {
        const byte2 = src4[position++] & 63;
        units.push((byte1 & 31) << 6 | byte2);
      } else if ((byte1 & 240) === 224) {
        const byte2 = src4[position++] & 63;
        const byte3 = src4[position++] & 63;
        units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
      } else if ((byte1 & 248) === 240) {
        const byte2 = src4[position++] & 63;
        const byte3 = src4[position++] & 63;
        const byte4 = src4[position++] & 63;
        let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
        if (unit > 65535) {
          unit -= 65536;
          units.push(unit >>> 10 & 1023 | 55296);
          unit = 56320 | unit & 1023;
        }
        units.push(unit);
      } else {
        units.push(byte1);
      }
      if (units.length >= 4096) {
        result += fromCharCode.apply(String, units);
        units.length = 0;
      }
    }
    if (units.length > 0) {
      result += fromCharCode.apply(String, units);
    }
    return result;
  }
  var fromCharCode = String.fromCharCode;
  function longStringInJS(length5) {
    let start = position;
    let bytes = new Array(length5);
    for (let i = 0; i < length5; i++) {
      const byte = src4[position++];
      if ((byte & 128) > 0) {
        position = start;
        return;
      }
      bytes[i] = byte;
    }
    return fromCharCode.apply(String, bytes);
  }
  function shortStringInJS(length5) {
    if (length5 < 4) {
      if (length5 < 2) {
        if (length5 === 0)
          return "";
        else {
          let a = src4[position++];
          if ((a & 128) > 1) {
            position -= 1;
            return;
          }
          return fromCharCode(a);
        }
      } else {
        let a = src4[position++];
        let b = src4[position++];
        if ((a & 128) > 0 || (b & 128) > 0) {
          position -= 2;
          return;
        }
        if (length5 < 3)
          return fromCharCode(a, b);
        let c = src4[position++];
        if ((c & 128) > 0) {
          position -= 3;
          return;
        }
        return fromCharCode(a, b, c);
      }
    } else {
      let a = src4[position++];
      let b = src4[position++];
      let c = src4[position++];
      let d = src4[position++];
      if ((a & 128) > 0 || (b & 128) > 0 || (c & 128) > 0 || (d & 128) > 0) {
        position -= 4;
        return;
      }
      if (length5 < 6) {
        if (length5 === 4)
          return fromCharCode(a, b, c, d);
        else {
          let e = src4[position++];
          if ((e & 128) > 0) {
            position -= 5;
            return;
          }
          return fromCharCode(a, b, c, d, e);
        }
      } else if (length5 < 8) {
        let e = src4[position++];
        let f = src4[position++];
        if ((e & 128) > 0 || (f & 128) > 0) {
          position -= 6;
          return;
        }
        if (length5 < 7)
          return fromCharCode(a, b, c, d, e, f);
        let g = src4[position++];
        if ((g & 128) > 0) {
          position -= 7;
          return;
        }
        return fromCharCode(a, b, c, d, e, f, g);
      } else {
        let e = src4[position++];
        let f = src4[position++];
        let g = src4[position++];
        let h = src4[position++];
        if ((e & 128) > 0 || (f & 128) > 0 || (g & 128) > 0 || (h & 128) > 0) {
          position -= 8;
          return;
        }
        if (length5 < 10) {
          if (length5 === 8)
            return fromCharCode(a, b, c, d, e, f, g, h);
          else {
            let i = src4[position++];
            if ((i & 128) > 0) {
              position -= 9;
              return;
            }
            return fromCharCode(a, b, c, d, e, f, g, h, i);
          }
        } else if (length5 < 12) {
          let i = src4[position++];
          let j = src4[position++];
          if ((i & 128) > 0 || (j & 128) > 0) {
            position -= 10;
            return;
          }
          if (length5 < 11)
            return fromCharCode(a, b, c, d, e, f, g, h, i, j);
          let k = src4[position++];
          if ((k & 128) > 0) {
            position -= 11;
            return;
          }
          return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);
        } else {
          let i = src4[position++];
          let j = src4[position++];
          let k = src4[position++];
          let l = src4[position++];
          if ((i & 128) > 0 || (j & 128) > 0 || (k & 128) > 0 || (l & 128) > 0) {
            position -= 12;
            return;
          }
          if (length5 < 14) {
            if (length5 === 12)
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);
            else {
              let m = src4[position++];
              if ((m & 128) > 0) {
                position -= 13;
                return;
              }
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);
            }
          } else {
            let m = src4[position++];
            let n = src4[position++];
            if ((m & 128) > 0 || (n & 128) > 0) {
              position -= 14;
              return;
            }
            if (length5 < 15)
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
            let o = src4[position++];
            if ((o & 128) > 0) {
              position -= 15;
              return;
            }
            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
          }
        }
      }
    }
  }
  function readBin(length5) {
    return currentDecoder.copyBuffers ? (
      // specifically use the copying slice (not the node one)
      Uint8Array.prototype.slice.call(src4, position, position += length5)
    ) : src4.subarray(position, position += length5);
  }
  var f32Array = new Float32Array(1);
  var u8Array = new Uint8Array(f32Array.buffer, 0, 4);
  function getFloat16() {
    let byte0 = src4[position++];
    let byte1 = src4[position++];
    let exponent = (byte0 & 127) >> 2;
    if (exponent === 31) {
      if (byte1 || byte0 & 3)
        return NaN;
      return byte0 & 128 ? -Infinity : Infinity;
    }
    if (exponent === 0) {
      let abs = ((byte0 & 3) << 8 | byte1) / (1 << 24);
      return byte0 & 128 ? -abs : abs;
    }
    u8Array[3] = byte0 & 128 | // sign bit
    (exponent >> 1) + 56;
    u8Array[2] = (byte0 & 7) << 5 | // last exponent bit and first two mantissa bits
    byte1 >> 3;
    u8Array[1] = byte1 << 5;
    u8Array[0] = 0;
    return f32Array[0];
  }
  var keyCache = new Array(4096);
  var Tag = class {
    constructor(value, tag) {
      this.value = value;
      this.tag = tag;
    }
  };
  currentExtensions[0] = (dateString) => {
    return new Date(dateString);
  };
  currentExtensions[1] = (epochSec) => {
    return new Date(Math.round(epochSec * 1e3));
  };
  currentExtensions[2] = (buffer2) => {
    let value = BigInt(0);
    for (let i = 0, l = buffer2.byteLength; i < l; i++) {
      value = BigInt(buffer2[i]) + value << BigInt(8);
    }
    return value;
  };
  currentExtensions[3] = (buffer2) => {
    return BigInt(-1) - currentExtensions[2](buffer2);
  };
  currentExtensions[4] = (fraction) => {
    return +(fraction[1] + "e" + fraction[0]);
  };
  currentExtensions[5] = (fraction) => {
    return fraction[1] * Math.exp(fraction[0] * Math.log(2));
  };
  var recordDefinition = (id, structure) => {
    id = id - 57344;
    let existingStructure = currentStructures[id];
    if (existingStructure && existingStructure.isShared) {
      (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;
    }
    currentStructures[id] = structure;
    structure.read = createStructureReader(structure);
  };
  currentExtensions[LEGACY_RECORD_INLINE_ID] = (data) => {
    let length5 = data.length;
    let structure = data[1];
    recordDefinition(data[0], structure);
    let object = {};
    for (let i = 2; i < length5; i++) {
      let key = structure[i - 2];
      object[safeKey(key)] = data[i];
    }
    return object;
  };
  currentExtensions[14] = (value) => {
    if (bundledStrings)
      return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value);
    return new Tag(value, 14);
  };
  currentExtensions[15] = (value) => {
    if (bundledStrings)
      return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);
    return new Tag(value, 15);
  };
  var glbl = { Error, RegExp };
  currentExtensions[27] = (data) => {
    return (glbl[data[0]] || Error)(data[1], data[2]);
  };
  var packedTable = (read6) => {
    if (src4[position++] != 132) {
      let error = new Error("Packed values structure must be followed by a 4 element array");
      if (src4.length < position)
        error.incomplete = true;
      throw error;
    }
    let newPackedValues = read6();
    if (!newPackedValues || !newPackedValues.length) {
      let error = new Error("Packed values structure must be followed by a 4 element array");
      error.incomplete = true;
      throw error;
    }
    packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;
    packedValues.prefixes = read6();
    packedValues.suffixes = read6();
    return read6();
  };
  packedTable.handlesRead = true;
  currentExtensions[51] = packedTable;
  currentExtensions[PACKED_REFERENCE_TAG_ID] = (data) => {
    if (!packedValues) {
      if (currentDecoder.getShared)
        loadShared();
      else
        return new Tag(data, PACKED_REFERENCE_TAG_ID);
    }
    if (typeof data == "number")
      return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];
    let error = new Error("No support for non-integer packed references yet");
    if (data === void 0)
      error.incomplete = true;
    throw error;
  };
  currentExtensions[28] = (read6) => {
    if (!referenceMap) {
      referenceMap = /* @__PURE__ */ new Map();
      referenceMap.id = 0;
    }
    let id = referenceMap.id++;
    let startingPosition = position;
    let token = src4[position];
    let target2;
    if (token >> 5 == 4)
      target2 = [];
    else
      target2 = {};
    let refEntry = { target: target2 };
    referenceMap.set(id, refEntry);
    let targetProperties = read6();
    if (refEntry.used) {
      if (Object.getPrototypeOf(target2) !== Object.getPrototypeOf(targetProperties)) {
        position = startingPosition;
        target2 = targetProperties;
        referenceMap.set(id, { target: target2 });
        targetProperties = read6();
      }
      return Object.assign(target2, targetProperties);
    }
    refEntry.target = targetProperties;
    return targetProperties;
  };
  currentExtensions[28].handlesRead = true;
  currentExtensions[29] = (id) => {
    let refEntry = referenceMap.get(id);
    refEntry.used = true;
    return refEntry.target;
  };
  currentExtensions[258] = (array) => new Set(array);
  (currentExtensions[259] = (read6) => {
    if (currentDecoder.mapsAsObjects) {
      currentDecoder.mapsAsObjects = false;
      restoreMapsAsObject = true;
    }
    return read6();
  }).handlesRead = true;
  function combine(a, b) {
    if (typeof a === "string")
      return a + b;
    if (a instanceof Array)
      return a.concat(b);
    return Object.assign({}, a, b);
  }
  function getPackedValues() {
    if (!packedValues) {
      if (currentDecoder.getShared)
        loadShared();
      else
        throw new Error("No packed values available");
    }
    return packedValues;
  }
  var SHARED_DATA_TAG_ID = 1399353956;
  currentExtensionRanges.push((tag, input) => {
    if (tag >= 225 && tag <= 255)
      return combine(getPackedValues().prefixes[tag - 224], input);
    if (tag >= 28704 && tag <= 32767)
      return combine(getPackedValues().prefixes[tag - 28672], input);
    if (tag >= 1879052288 && tag <= 2147483647)
      return combine(getPackedValues().prefixes[tag - 1879048192], input);
    if (tag >= 216 && tag <= 223)
      return combine(input, getPackedValues().suffixes[tag - 216]);
    if (tag >= 27647 && tag <= 28671)
      return combine(input, getPackedValues().suffixes[tag - 27639]);
    if (tag >= 1811940352 && tag <= 1879048191)
      return combine(input, getPackedValues().suffixes[tag - 1811939328]);
    if (tag == SHARED_DATA_TAG_ID) {
      return {
        packedValues,
        structures: currentStructures.slice(0),
        version: input
      };
    }
    if (tag == 55799)
      return input;
  });
  var isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;
  var typedArrays = [
    Uint8Array,
    Uint8ClampedArray,
    Uint16Array,
    Uint32Array,
    typeof BigUint64Array == "undefined" ? { name: "BigUint64Array" } : BigUint64Array,
    Int8Array,
    Int16Array,
    Int32Array,
    typeof BigInt64Array == "undefined" ? { name: "BigInt64Array" } : BigInt64Array,
    Float32Array,
    Float64Array
  ];
  var typedArrayTags = [64, 68, 69, 70, 71, 72, 77, 78, 79, 85, 86];
  for (let i = 0; i < typedArrays.length; i++) {
    registerTypedArray(typedArrays[i], typedArrayTags[i]);
  }
  function registerTypedArray(TypedArray, tag) {
    let dvMethod = "get" + TypedArray.name.slice(0, -5);
    let bytesPerElement;
    if (typeof TypedArray === "function")
      bytesPerElement = TypedArray.BYTES_PER_ELEMENT;
    else
      TypedArray = null;
    for (let littleEndian = 0; littleEndian < 2; littleEndian++) {
      if (!littleEndian && bytesPerElement == 1)
        continue;
      let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : bytesPerElement == 8 ? 3 : 0;
      currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine ? (buffer2) => {
        if (!TypedArray)
          throw new Error("Could not find typed array for code " + tag);
        if (!currentDecoder.copyBuffers) {
          if (bytesPerElement === 1 || bytesPerElement === 2 && !(buffer2.byteOffset & 1) || bytesPerElement === 4 && !(buffer2.byteOffset & 3) || bytesPerElement === 8 && !(buffer2.byteOffset & 7))
            return new TypedArray(buffer2.buffer, buffer2.byteOffset, buffer2.byteLength >> sizeShift);
        }
        return new TypedArray(Uint8Array.prototype.slice.call(buffer2, 0).buffer);
      } : (buffer2) => {
        if (!TypedArray)
          throw new Error("Could not find typed array for code " + tag);
        let dv = new DataView(buffer2.buffer, buffer2.byteOffset, buffer2.byteLength);
        let elements = buffer2.length >> sizeShift;
        let ta = new TypedArray(elements);
        let method = dv[dvMethod];
        for (let i = 0; i < elements; i++) {
          ta[i] = method.call(dv, i << sizeShift, littleEndian);
        }
        return ta;
      };
    }
  }
  function readBundleExt() {
    let length5 = readJustLength();
    let bundlePosition = position + read4();
    for (let i = 2; i < length5; i++) {
      let bundleLength = readJustLength();
      position += bundleLength;
    }
    let dataPosition = position;
    position = bundlePosition;
    bundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())];
    bundledStrings.position0 = 0;
    bundledStrings.position1 = 0;
    bundledStrings.postBundlePosition = position;
    position = dataPosition;
    return read4();
  }
  function readJustLength() {
    let token = src4[position++] & 31;
    if (token > 23) {
      switch (token) {
        case 24:
          token = src4[position++];
          break;
        case 25:
          token = dataView.getUint16(position);
          position += 2;
          break;
        case 26:
          token = dataView.getUint32(position);
          position += 4;
          break;
      }
    }
    return token;
  }
  function loadShared() {
    if (currentDecoder.getShared) {
      let sharedData = saveState(() => {
        src4 = null;
        return currentDecoder.getShared();
      }) || {};
      let updatedStructures = sharedData.structures || [];
      currentDecoder.sharedVersion = sharedData.version;
      packedValues = currentDecoder.sharedValues = sharedData.packedValues;
      if (currentStructures === true)
        currentDecoder.structures = currentStructures = updatedStructures;
      else
        currentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures));
    }
  }
  function saveState(callback) {
    let savedSrcEnd = srcEnd;
    let savedPosition = position;
    let savedStringPosition = stringPosition;
    let savedSrcStringStart = srcStringStart;
    let savedSrcStringEnd = srcStringEnd;
    let savedSrcString = srcString;
    let savedStrings = strings;
    let savedReferenceMap = referenceMap;
    let savedBundledStrings = bundledStrings;
    let savedSrc = new Uint8Array(src4.slice(0, srcEnd));
    let savedStructures = currentStructures;
    let savedDecoder = currentDecoder;
    let savedSequentialMode = sequentialMode;
    let value = callback();
    srcEnd = savedSrcEnd;
    position = savedPosition;
    stringPosition = savedStringPosition;
    srcStringStart = savedSrcStringStart;
    srcStringEnd = savedSrcStringEnd;
    srcString = savedSrcString;
    strings = savedStrings;
    referenceMap = savedReferenceMap;
    bundledStrings = savedBundledStrings;
    src4 = savedSrc;
    sequentialMode = savedSequentialMode;
    currentStructures = savedStructures;
    currentDecoder = savedDecoder;
    dataView = new DataView(src4.buffer, src4.byteOffset, src4.byteLength);
    return value;
  }
  function clearSource() {
    src4 = null;
    referenceMap = null;
    currentStructures = null;
  }
  function addExtension(extension) {
    currentExtensions[extension.tag] = extension.decode;
  }
  var mult10 = new Array(147);
  for (let i = 0; i < 256; i++) {
    mult10[i] = +("1e" + Math.floor(45.15 - i * 0.30103));
  }
  var defaultDecoder = new Decoder4({ useRecords: false });
  var decode14 = defaultDecoder.decode;
  var decodeMultiple = defaultDecoder.decodeMultiple;
  var FLOAT32_OPTIONS = {
    NEVER: 0,
    ALWAYS: 1,
    DECIMAL_ROUND: 3,
    DECIMAL_FIT: 4
  };

  // node_modules/cbor-x/encode.js
  var textEncoder2;
  try {
    textEncoder2 = new TextEncoder();
  } catch (error) {
  }
  var extensions;
  var extensionClasses;
  var Buffer2 = typeof globalThis === "object" && globalThis.Buffer;
  var hasNodeBuffer = typeof Buffer2 !== "undefined";
  var ByteArrayAllocate = hasNodeBuffer ? Buffer2.allocUnsafeSlow : Uint8Array;
  var ByteArray = hasNodeBuffer ? Buffer2 : Uint8Array;
  var MAX_STRUCTURES = 256;
  var MAX_BUFFER_SIZE = hasNodeBuffer ? 4294967296 : 2144337920;
  var throwOnIterable;
  var target;
  var targetView;
  var position2 = 0;
  var safeEnd;
  var bundledStrings2 = null;
  var MAX_BUNDLE_SIZE = 61440;
  var hasNonLatin = /[\u0080-\uFFFF]/;
  var RECORD_SYMBOL = Symbol("record-id");
  var Encoder4 = class extends Decoder4 {
    constructor(options) {
      super(options);
      this.offset = 0;
      let typeBuffer;
      let start;
      let sharedStructures;
      let hasSharedUpdate;
      let structures;
      let referenceMap2;
      options = options || {};
      let encodeUtf8 = ByteArray.prototype.utf8Write ? function(string2, position3, maxBytes) {
        return target.utf8Write(string2, position3, maxBytes);
      } : textEncoder2 && textEncoder2.encodeInto ? function(string2, position3) {
        return textEncoder2.encodeInto(string2, target.subarray(position3)).written;
      } : false;
      let encoder = this;
      let hasSharedStructures = options.structures || options.saveStructures;
      let maxSharedStructures = options.maxSharedStructures;
      if (maxSharedStructures == null)
        maxSharedStructures = hasSharedStructures ? 128 : 0;
      if (maxSharedStructures > 8190)
        throw new Error("Maximum maxSharedStructure is 8190");
      let isSequential = options.sequential;
      if (isSequential) {
        maxSharedStructures = 0;
      }
      if (!this.structures)
        this.structures = [];
      if (this.saveStructures)
        this.saveShared = this.saveStructures;
      let samplingPackedValues, packedObjectMap2, sharedValues = options.sharedValues;
      let sharedPackedObjectMap2;
      if (sharedValues) {
        sharedPackedObjectMap2 = /* @__PURE__ */ Object.create(null);
        for (let i = 0, l = sharedValues.length; i < l; i++) {
          sharedPackedObjectMap2[sharedValues[i]] = i;
        }
      }
      let recordIdsToRemove = [];
      let transitionsCount = 0;
      let serializationsSinceTransitionRebuild = 0;
      this.mapEncode = function(value, encodeOptions2) {
        if (this._keyMap && !this._mapped) {
          switch (value.constructor.name) {
            case "Array":
              value = value.map((r) => this.encodeKeys(r));
              break;
          }
        }
        return this.encode(value, encodeOptions2);
      };
      this.encode = function(value, encodeOptions2) {
        if (!target) {
          target = new ByteArrayAllocate(8192);
          targetView = new DataView(target.buffer, 0, 8192);
          position2 = 0;
        }
        safeEnd = target.length - 10;
        if (safeEnd - position2 < 2048) {
          target = new ByteArrayAllocate(target.length);
          targetView = new DataView(target.buffer, 0, target.length);
          safeEnd = target.length - 10;
          position2 = 0;
        } else if (encodeOptions2 === REUSE_BUFFER_MODE)
          position2 = position2 + 7 & 2147483640;
        start = position2;
        if (encoder.useSelfDescribedHeader) {
          targetView.setUint32(position2, 3654940416);
          position2 += 3;
        }
        referenceMap2 = encoder.structuredClone ? /* @__PURE__ */ new Map() : null;
        if (encoder.bundleStrings && typeof value !== "string") {
          bundledStrings2 = [];
          bundledStrings2.size = Infinity;
        } else
          bundledStrings2 = null;
        sharedStructures = encoder.structures;
        if (sharedStructures) {
          if (sharedStructures.uninitialized) {
            let sharedData = encoder.getShared() || {};
            encoder.structures = sharedStructures = sharedData.structures || [];
            encoder.sharedVersion = sharedData.version;
            let sharedValues2 = encoder.sharedValues = sharedData.packedValues;
            if (sharedValues2) {
              sharedPackedObjectMap2 = {};
              for (let i = 0, l = sharedValues2.length; i < l; i++)
                sharedPackedObjectMap2[sharedValues2[i]] = i;
            }
          }
          let sharedStructuresLength = sharedStructures.length;
          if (sharedStructuresLength > maxSharedStructures && !isSequential)
            sharedStructuresLength = maxSharedStructures;
          if (!sharedStructures.transitions) {
            sharedStructures.transitions = /* @__PURE__ */ Object.create(null);
            for (let i = 0; i < sharedStructuresLength; i++) {
              let keys = sharedStructures[i];
              if (!keys)
                continue;
              let nextTransition, transition = sharedStructures.transitions;
              for (let j = 0, l = keys.length; j < l; j++) {
                if (transition[RECORD_SYMBOL] === void 0)
                  transition[RECORD_SYMBOL] = i;
                let key = keys[j];
                nextTransition = transition[key];
                if (!nextTransition) {
                  nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
                }
                transition = nextTransition;
              }
              transition[RECORD_SYMBOL] = i | 1048576;
            }
          }
          if (!isSequential)
            sharedStructures.nextId = sharedStructuresLength;
        }
        if (hasSharedUpdate)
          hasSharedUpdate = false;
        structures = sharedStructures || [];
        packedObjectMap2 = sharedPackedObjectMap2;
        if (options.pack) {
          let packedValues2 = /* @__PURE__ */ new Map();
          packedValues2.values = [];
          packedValues2.encoder = encoder;
          packedValues2.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap2 ? 16 : Infinity);
          packedValues2.objectMap = sharedPackedObjectMap2 || false;
          packedValues2.samplingPackedValues = samplingPackedValues;
          findRepetitiveStrings(value, packedValues2);
          if (packedValues2.values.length > 0) {
            target[position2++] = 216;
            target[position2++] = 51;
            writeArrayHeader(4);
            let valuesArray = packedValues2.values;
            encode13(valuesArray);
            writeArrayHeader(0);
            writeArrayHeader(0);
            packedObjectMap2 = Object.create(sharedPackedObjectMap2 || null);
            for (let i = 0, l = valuesArray.length; i < l; i++) {
              packedObjectMap2[valuesArray[i]] = i;
            }
          }
        }
        throwOnIterable = encodeOptions2 & THROW_ON_ITERABLE;
        try {
          if (throwOnIterable)
            return;
          encode13(value);
          if (bundledStrings2) {
            writeBundles(start, encode13);
          }
          encoder.offset = position2;
          if (referenceMap2 && referenceMap2.idsToInsert) {
            position2 += referenceMap2.idsToInsert.length * 2;
            if (position2 > safeEnd)
              makeRoom(position2);
            encoder.offset = position2;
            let serialized = insertIds(target.subarray(start, position2), referenceMap2.idsToInsert);
            referenceMap2 = null;
            return serialized;
          }
          if (encodeOptions2 & REUSE_BUFFER_MODE) {
            target.start = start;
            target.end = position2;
            return target;
          }
          return target.subarray(start, position2);
        } finally {
          if (sharedStructures) {
            if (serializationsSinceTransitionRebuild < 10)
              serializationsSinceTransitionRebuild++;
            if (sharedStructures.length > maxSharedStructures)
              sharedStructures.length = maxSharedStructures;
            if (transitionsCount > 1e4) {
              sharedStructures.transitions = null;
              serializationsSinceTransitionRebuild = 0;
              transitionsCount = 0;
              if (recordIdsToRemove.length > 0)
                recordIdsToRemove = [];
            } else if (recordIdsToRemove.length > 0 && !isSequential) {
              for (let i = 0, l = recordIdsToRemove.length; i < l; i++) {
                recordIdsToRemove[i][RECORD_SYMBOL] = void 0;
              }
              recordIdsToRemove = [];
            }
          }
          if (hasSharedUpdate && encoder.saveShared) {
            if (encoder.structures.length > maxSharedStructures) {
              encoder.structures = encoder.structures.slice(0, maxSharedStructures);
            }
            let returnBuffer = target.subarray(start, position2);
            if (encoder.updateSharedData() === false)
              return encoder.encode(value);
            return returnBuffer;
          }
          if (encodeOptions2 & RESET_BUFFER_MODE)
            position2 = start;
        }
      };
      this.findCommonStringsToPack = () => {
        samplingPackedValues = /* @__PURE__ */ new Map();
        if (!sharedPackedObjectMap2)
          sharedPackedObjectMap2 = /* @__PURE__ */ Object.create(null);
        return (options2) => {
          let threshold = options2 && options2.threshold || 4;
          let position3 = this.pack ? options2.maxPrivatePackedValues || 16 : 0;
          if (!sharedValues)
            sharedValues = this.sharedValues = [];
          for (let [key, status] of samplingPackedValues) {
            if (status.count > threshold) {
              sharedPackedObjectMap2[key] = position3++;
              sharedValues.push(key);
              hasSharedUpdate = true;
            }
          }
          while (this.saveShared && this.updateSharedData() === false) {
          }
          samplingPackedValues = null;
        };
      };
      const encode13 = (value) => {
        if (position2 > safeEnd)
          target = makeRoom(position2);
        var type = typeof value;
        var length5;
        if (type === "string") {
          if (packedObjectMap2) {
            let packedPosition = packedObjectMap2[value];
            if (packedPosition >= 0) {
              if (packedPosition < 16)
                target[position2++] = packedPosition + 224;
              else {
                target[position2++] = 198;
                if (packedPosition & 1)
                  encode13(15 - packedPosition >> 1);
                else
                  encode13(packedPosition - 16 >> 1);
              }
              return;
            } else if (samplingPackedValues && !options.pack) {
              let status = samplingPackedValues.get(value);
              if (status)
                status.count++;
              else
                samplingPackedValues.set(value, {
                  count: 1
                });
            }
          }
          let strLength = value.length;
          if (bundledStrings2 && strLength >= 4 && strLength < 1024) {
            if ((bundledStrings2.size += strLength) > MAX_BUNDLE_SIZE) {
              let extStart;
              let maxBytes2 = (bundledStrings2[0] ? bundledStrings2[0].length * 3 + bundledStrings2[1].length : 0) + 10;
              if (position2 + maxBytes2 > safeEnd)
                target = makeRoom(position2 + maxBytes2);
              target[position2++] = 217;
              target[position2++] = 223;
              target[position2++] = 249;
              target[position2++] = bundledStrings2.position ? 132 : 130;
              target[position2++] = 26;
              extStart = position2 - start;
              position2 += 4;
              if (bundledStrings2.position) {
                writeBundles(start, encode13);
              }
              bundledStrings2 = ["", ""];
              bundledStrings2.size = 0;
              bundledStrings2.position = extStart;
            }
            let twoByte = hasNonLatin.test(value);
            bundledStrings2[twoByte ? 0 : 1] += value;
            target[position2++] = twoByte ? 206 : 207;
            encode13(strLength);
            return;
          }
          let headerSize;
          if (strLength < 32) {
            headerSize = 1;
          } else if (strLength < 256) {
            headerSize = 2;
          } else if (strLength < 65536) {
            headerSize = 3;
          } else {
            headerSize = 5;
          }
          let maxBytes = strLength * 3;
          if (position2 + maxBytes > safeEnd)
            target = makeRoom(position2 + maxBytes);
          if (strLength < 64 || !encodeUtf8) {
            let i, c1, c2, strPosition = position2 + headerSize;
            for (i = 0; i < strLength; i++) {
              c1 = value.charCodeAt(i);
              if (c1 < 128) {
                target[strPosition++] = c1;
              } else if (c1 < 2048) {
                target[strPosition++] = c1 >> 6 | 192;
                target[strPosition++] = c1 & 63 | 128;
              } else if ((c1 & 64512) === 55296 && ((c2 = value.charCodeAt(i + 1)) & 64512) === 56320) {
                c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
                i++;
                target[strPosition++] = c1 >> 18 | 240;
                target[strPosition++] = c1 >> 12 & 63 | 128;
                target[strPosition++] = c1 >> 6 & 63 | 128;
                target[strPosition++] = c1 & 63 | 128;
              } else {
                target[strPosition++] = c1 >> 12 | 224;
                target[strPosition++] = c1 >> 6 & 63 | 128;
                target[strPosition++] = c1 & 63 | 128;
              }
            }
            length5 = strPosition - position2 - headerSize;
          } else {
            length5 = encodeUtf8(value, position2 + headerSize, maxBytes);
          }
          if (length5 < 24) {
            target[position2++] = 96 | length5;
          } else if (length5 < 256) {
            if (headerSize < 2) {
              target.copyWithin(position2 + 2, position2 + 1, position2 + 1 + length5);
            }
            target[position2++] = 120;
            target[position2++] = length5;
          } else if (length5 < 65536) {
            if (headerSize < 3) {
              target.copyWithin(position2 + 3, position2 + 2, position2 + 2 + length5);
            }
            target[position2++] = 121;
            target[position2++] = length5 >> 8;
            target[position2++] = length5 & 255;
          } else {
            if (headerSize < 5) {
              target.copyWithin(position2 + 5, position2 + 3, position2 + 3 + length5);
            }
            target[position2++] = 122;
            targetView.setUint32(position2, length5);
            position2 += 4;
          }
          position2 += length5;
        } else if (type === "number") {
          if (!this.alwaysUseFloat && value >>> 0 === value) {
            if (value < 24) {
              target[position2++] = value;
            } else if (value < 256) {
              target[position2++] = 24;
              target[position2++] = value;
            } else if (value < 65536) {
              target[position2++] = 25;
              target[position2++] = value >> 8;
              target[position2++] = value & 255;
            } else {
              target[position2++] = 26;
              targetView.setUint32(position2, value);
              position2 += 4;
            }
          } else if (!this.alwaysUseFloat && value >> 0 === value) {
            if (value >= -24) {
              target[position2++] = 31 - value;
            } else if (value >= -256) {
              target[position2++] = 56;
              target[position2++] = ~value;
            } else if (value >= -65536) {
              target[position2++] = 57;
              targetView.setUint16(position2, ~value);
              position2 += 2;
            } else {
              target[position2++] = 58;
              targetView.setUint32(position2, ~value);
              position2 += 4;
            }
          } else {
            let useFloat32;
            if ((useFloat32 = this.useFloat32) > 0 && value < 4294967296 && value >= -2147483648) {
              target[position2++] = 250;
              targetView.setFloat32(position2, value);
              let xShifted;
              if (useFloat32 < 4 || // this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
              (xShifted = value * mult10[(target[position2] & 127) << 1 | target[position2 + 1] >> 7]) >> 0 === xShifted) {
                position2 += 4;
                return;
              } else
                position2--;
            }
            target[position2++] = 251;
            targetView.setFloat64(position2, value);
            position2 += 8;
          }
        } else if (type === "object") {
          if (!value)
            target[position2++] = 246;
          else {
            if (referenceMap2) {
              let referee = referenceMap2.get(value);
              if (referee) {
                target[position2++] = 216;
                target[position2++] = 29;
                target[position2++] = 25;
                if (!referee.references) {
                  let idsToInsert = referenceMap2.idsToInsert || (referenceMap2.idsToInsert = []);
                  referee.references = [];
                  idsToInsert.push(referee);
                }
                referee.references.push(position2 - start);
                position2 += 2;
                return;
              } else
                referenceMap2.set(value, { offset: position2 - start });
            }
            let constructor = value.constructor;
            if (constructor === Object) {
              writeObject(value);
            } else if (constructor === Array) {
              length5 = value.length;
              if (length5 < 24) {
                target[position2++] = 128 | length5;
              } else {
                writeArrayHeader(length5);
              }
              for (let i = 0; i < length5; i++) {
                encode13(value[i]);
              }
            } else if (constructor === Map) {
              if (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {
                target[position2++] = 217;
                target[position2++] = 1;
                target[position2++] = 3;
              }
              length5 = value.size;
              if (length5 < 24) {
                target[position2++] = 160 | length5;
              } else if (length5 < 256) {
                target[position2++] = 184;
                target[position2++] = length5;
              } else if (length5 < 65536) {
                target[position2++] = 185;
                target[position2++] = length5 >> 8;
                target[position2++] = length5 & 255;
              } else {
                target[position2++] = 186;
                targetView.setUint32(position2, length5);
                position2 += 4;
              }
              if (encoder.keyMap) {
                for (let [key, entryValue] of value) {
                  encode13(encoder.encodeKey(key));
                  encode13(entryValue);
                }
              } else {
                for (let [key, entryValue] of value) {
                  encode13(key);
                  encode13(entryValue);
                }
              }
            } else {
              for (let i = 0, l = extensions.length; i < l; i++) {
                let extensionClass = extensionClasses[i];
                if (value instanceof extensionClass) {
                  let extension = extensions[i];
                  let tag = extension.tag;
                  if (tag == void 0)
                    tag = extension.getTag && extension.getTag.call(this, value);
                  if (tag < 24) {
                    target[position2++] = 192 | tag;
                  } else if (tag < 256) {
                    target[position2++] = 216;
                    target[position2++] = tag;
                  } else if (tag < 65536) {
                    target[position2++] = 217;
                    target[position2++] = tag >> 8;
                    target[position2++] = tag & 255;
                  } else if (tag > -1) {
                    target[position2++] = 218;
                    targetView.setUint32(position2, tag);
                    position2 += 4;
                  }
                  extension.encode.call(this, value, encode13, makeRoom);
                  return;
                }
              }
              if (value[Symbol.iterator]) {
                if (throwOnIterable) {
                  let error = new Error("Iterable should be serialized as iterator");
                  error.iteratorNotHandled = true;
                  throw error;
                }
                target[position2++] = 159;
                for (let entry of value) {
                  encode13(entry);
                }
                target[position2++] = 255;
                return;
              }
              if (value[Symbol.asyncIterator] || isBlob(value)) {
                let error = new Error("Iterable/blob should be serialized as iterator");
                error.iteratorNotHandled = true;
                throw error;
              }
              if (this.useToJSON && value.toJSON) {
                const json = value.toJSON();
                if (json !== value)
                  return encode13(json);
              }
              writeObject(value);
            }
          }
        } else if (type === "boolean") {
          target[position2++] = value ? 245 : 244;
        } else if (type === "bigint") {
          if (value < BigInt(1) << BigInt(64) && value >= 0) {
            target[position2++] = 27;
            targetView.setBigUint64(position2, value);
          } else if (value > -(BigInt(1) << BigInt(64)) && value < 0) {
            target[position2++] = 59;
            targetView.setBigUint64(position2, -value - BigInt(1));
          } else {
            if (this.largeBigIntToFloat) {
              target[position2++] = 251;
              targetView.setFloat64(position2, Number(value));
            } else {
              throw new RangeError(value + " was too large to fit in CBOR 64-bit integer format, set largeBigIntToFloat to convert to float-64");
            }
          }
          position2 += 8;
        } else if (type === "undefined") {
          target[position2++] = 247;
        } else {
          throw new Error("Unknown type: " + type);
        }
      };
      const writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {
        let keys = Object.keys(object);
        let vals = Object.values(object);
        let length5 = keys.length;
        if (length5 < 24) {
          target[position2++] = 160 | length5;
        } else if (length5 < 256) {
          target[position2++] = 184;
          target[position2++] = length5;
        } else if (length5 < 65536) {
          target[position2++] = 185;
          target[position2++] = length5 >> 8;
          target[position2++] = length5 & 255;
        } else {
          target[position2++] = 186;
          targetView.setUint32(position2, length5);
          position2 += 4;
        }
        let key;
        if (encoder.keyMap) {
          for (let i = 0; i < length5; i++) {
            encode13(encoder.encodeKey(keys[i]));
            encode13(vals[i]);
          }
        } else {
          for (let i = 0; i < length5; i++) {
            encode13(keys[i]);
            encode13(vals[i]);
          }
        }
      } : (object) => {
        target[position2++] = 185;
        let objectOffset = position2 - start;
        position2 += 2;
        let size = 0;
        if (encoder.keyMap) {
          for (let key in object)
            if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key)) {
              encode13(encoder.encodeKey(key));
              encode13(object[key]);
              size++;
            }
        } else {
          for (let key in object)
            if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key)) {
              encode13(key);
              encode13(object[key]);
              size++;
            }
        }
        target[objectOffset++ + start] = size >> 8;
        target[objectOffset + start] = size & 255;
      } : (object, skipValues) => {
        let nextTransition, transition = structures.transitions || (structures.transitions = /* @__PURE__ */ Object.create(null));
        let newTransitions = 0;
        let length5 = 0;
        let parentRecordId;
        let keys;
        if (this.keyMap) {
          keys = Object.keys(object).map((k) => this.encodeKey(k));
          length5 = keys.length;
          for (let i = 0; i < length5; i++) {
            let key = keys[i];
            nextTransition = transition[key];
            if (!nextTransition) {
              nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
              newTransitions++;
            }
            transition = nextTransition;
          }
        } else {
          for (let key in object)
            if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key)) {
              nextTransition = transition[key];
              if (!nextTransition) {
                if (transition[RECORD_SYMBOL] & 1048576) {
                  parentRecordId = transition[RECORD_SYMBOL] & 65535;
                }
                nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
                newTransitions++;
              }
              transition = nextTransition;
              length5++;
            }
        }
        let recordId = transition[RECORD_SYMBOL];
        if (recordId !== void 0) {
          recordId &= 65535;
          target[position2++] = 217;
          target[position2++] = recordId >> 8 | 224;
          target[position2++] = recordId & 255;
        } else {
          if (!keys)
            keys = transition.__keys__ || (transition.__keys__ = Object.keys(object));
          if (parentRecordId === void 0) {
            recordId = structures.nextId++;
            if (!recordId) {
              recordId = 0;
              structures.nextId = 1;
            }
            if (recordId >= MAX_STRUCTURES) {
              structures.nextId = (recordId = maxSharedStructures) + 1;
            }
          } else {
            recordId = parentRecordId;
          }
          structures[recordId] = keys;
          if (recordId < maxSharedStructures) {
            target[position2++] = 217;
            target[position2++] = recordId >> 8 | 224;
            target[position2++] = recordId & 255;
            transition = structures.transitions;
            for (let i = 0; i < length5; i++) {
              if (transition[RECORD_SYMBOL] === void 0 || transition[RECORD_SYMBOL] & 1048576)
                transition[RECORD_SYMBOL] = recordId;
              transition = transition[keys[i]];
            }
            transition[RECORD_SYMBOL] = recordId | 1048576;
            hasSharedUpdate = true;
          } else {
            transition[RECORD_SYMBOL] = recordId;
            targetView.setUint32(position2, 3655335680);
            position2 += 3;
            if (newTransitions)
              transitionsCount += serializationsSinceTransitionRebuild * newTransitions;
            if (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures)
              recordIdsToRemove.shift()[RECORD_SYMBOL] = void 0;
            recordIdsToRemove.push(transition);
            writeArrayHeader(length5 + 2);
            encode13(57344 + recordId);
            encode13(keys);
            if (skipValues)
              return;
            for (let key in object)
              if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key))
                encode13(object[key]);
            return;
          }
        }
        if (length5 < 24) {
          target[position2++] = 128 | length5;
        } else {
          writeArrayHeader(length5);
        }
        if (skipValues)
          return;
        for (let key in object)
          if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key))
            encode13(object[key]);
      };
      const makeRoom = (end) => {
        let newSize;
        if (end > 16777216) {
          if (end - start > MAX_BUFFER_SIZE)
            throw new Error("Encoded buffer would be larger than maximum buffer size");
          newSize = Math.min(
            MAX_BUFFER_SIZE,
            Math.round(Math.max((end - start) * (end > 67108864 ? 1.25 : 2), 4194304) / 4096) * 4096
          );
        } else
          newSize = (Math.max(end - start << 2, target.length - 1) >> 12) + 1 << 12;
        let newBuffer = new ByteArrayAllocate(newSize);
        targetView = new DataView(newBuffer.buffer, 0, newSize);
        if (target.copy)
          target.copy(newBuffer, 0, start, end);
        else
          newBuffer.set(target.slice(start, end));
        position2 -= start;
        start = 0;
        safeEnd = newBuffer.length - 10;
        return target = newBuffer;
      };
      let chunkThreshold = 100;
      let continuedChunkThreshold = 1e3;
      this.encodeAsIterable = function(value, options2) {
        return startEncoding(value, options2, encodeObjectAsIterable);
      };
      this.encodeAsAsyncIterable = function(value, options2) {
        return startEncoding(value, options2, encodeObjectAsAsyncIterable);
      };
      function* encodeObjectAsIterable(object, iterateProperties, finalIterable) {
        let constructor = object.constructor;
        if (constructor === Object) {
          let useRecords = encoder.useRecords !== false;
          if (useRecords)
            writeObject(object, true);
          else
            writeEntityLength(Object.keys(object).length, 160);
          for (let key in object) {
            let value = object[key];
            if (!useRecords)
              encode13(key);
            if (value && typeof value === "object") {
              if (iterateProperties[key])
                yield* __yieldStar(encodeObjectAsIterable(value, iterateProperties[key]));
              else
                yield* __yieldStar(tryEncode(value, iterateProperties, key));
            } else
              encode13(value);
          }
        } else if (constructor === Array) {
          let length5 = object.length;
          writeArrayHeader(length5);
          for (let i = 0; i < length5; i++) {
            let value = object[i];
            if (value && (typeof value === "object" || position2 - start > chunkThreshold)) {
              if (iterateProperties.element)
                yield* __yieldStar(encodeObjectAsIterable(value, iterateProperties.element));
              else
                yield* __yieldStar(tryEncode(value, iterateProperties, "element"));
            } else
              encode13(value);
          }
        } else if (object[Symbol.iterator]) {
          target[position2++] = 159;
          for (let value of object) {
            if (value && (typeof value === "object" || position2 - start > chunkThreshold)) {
              if (iterateProperties.element)
                yield* __yieldStar(encodeObjectAsIterable(value, iterateProperties.element));
              else
                yield* __yieldStar(tryEncode(value, iterateProperties, "element"));
            } else
              encode13(value);
          }
          target[position2++] = 255;
        } else if (isBlob(object)) {
          writeEntityLength(object.size, 64);
          yield target.subarray(start, position2);
          yield object;
          restartEncoding();
        } else if (object[Symbol.asyncIterator]) {
          target[position2++] = 159;
          yield target.subarray(start, position2);
          yield object;
          restartEncoding();
          target[position2++] = 255;
        } else {
          encode13(object);
        }
        if (finalIterable && position2 > start)
          yield target.subarray(start, position2);
        else if (position2 - start > chunkThreshold) {
          yield target.subarray(start, position2);
          restartEncoding();
        }
      }
      function* tryEncode(value, iterateProperties, key) {
        let restart = position2 - start;
        try {
          encode13(value);
          if (position2 - start > chunkThreshold) {
            yield target.subarray(start, position2);
            restartEncoding();
          }
        } catch (error) {
          if (error.iteratorNotHandled) {
            iterateProperties[key] = {};
            position2 = start + restart;
            yield* __yieldStar(encodeObjectAsIterable.call(this, value, iterateProperties[key]));
          } else
            throw error;
        }
      }
      function restartEncoding() {
        chunkThreshold = continuedChunkThreshold;
        encoder.encode(null, THROW_ON_ITERABLE);
      }
      function startEncoding(value, options2, encodeIterable) {
        if (options2 && options2.chunkThreshold)
          chunkThreshold = continuedChunkThreshold = options2.chunkThreshold;
        else
          chunkThreshold = 100;
        if (value && typeof value === "object") {
          encoder.encode(null, THROW_ON_ITERABLE);
          return encodeIterable(value, encoder.iterateProperties || (encoder.iterateProperties = {}), true);
        }
        return [encoder.encode(value)];
      }
      function encodeObjectAsAsyncIterable(value, iterateProperties) {
        return __asyncGenerator(this, null, function* () {
          for (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {
            let constructor = encodedValue.constructor;
            if (constructor === ByteArray || constructor === Uint8Array)
              yield encodedValue;
            else if (isBlob(encodedValue)) {
              let reader = encodedValue.stream().getReader();
              let next;
              while (!(next = yield new __await(reader.read())).done) {
                yield next.value;
              }
            } else if (encodedValue[Symbol.asyncIterator]) {
              try {
                for (var iter = __forAwait(encodedValue), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
                  let asyncValue = temp.value;
                  restartEncoding();
                  if (asyncValue)
                    yield* __yieldStar(encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {})));
                  else
                    yield encoder.encode(asyncValue);
                }
              } catch (temp) {
                error = [temp];
              } finally {
                try {
                  more && (temp = iter.return) && (yield new __await(temp.call(iter)));
                } finally {
                  if (error)
                    throw error[0];
                }
              }
            } else {
              yield encodedValue;
            }
          }
        });
      }
    }
    useBuffer(buffer2) {
      target = buffer2;
      targetView = new DataView(target.buffer, target.byteOffset, target.byteLength);
      position2 = 0;
    }
    clearSharedData() {
      if (this.structures)
        this.structures = [];
      if (this.sharedValues)
        this.sharedValues = void 0;
    }
    updateSharedData() {
      let lastVersion = this.sharedVersion || 0;
      this.sharedVersion = lastVersion + 1;
      let structuresCopy = this.structures.slice(0);
      let sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion);
      let saveResults = this.saveShared(
        sharedData,
        (existingShared) => (existingShared && existingShared.version || 0) == lastVersion
      );
      if (saveResults === false) {
        sharedData = this.getShared() || {};
        this.structures = sharedData.structures || [];
        this.sharedValues = sharedData.packedValues;
        this.sharedVersion = sharedData.version;
        this.structures.nextId = this.structures.length;
      } else {
        structuresCopy.forEach((structure, i) => this.structures[i] = structure);
      }
      return saveResults;
    }
  };
  function writeEntityLength(length5, majorValue) {
    if (length5 < 24)
      target[position2++] = majorValue | length5;
    else if (length5 < 256) {
      target[position2++] = majorValue | 24;
      target[position2++] = length5;
    } else if (length5 < 65536) {
      target[position2++] = majorValue | 25;
      target[position2++] = length5 >> 8;
      target[position2++] = length5 & 255;
    } else {
      target[position2++] = majorValue | 26;
      targetView.setUint32(position2, length5);
      position2 += 4;
    }
  }
  var SharedData = class {
    constructor(structures, values, version5) {
      this.structures = structures;
      this.packedValues = values;
      this.version = version5;
    }
  };
  function writeArrayHeader(length5) {
    if (length5 < 24)
      target[position2++] = 128 | length5;
    else if (length5 < 256) {
      target[position2++] = 152;
      target[position2++] = length5;
    } else if (length5 < 65536) {
      target[position2++] = 153;
      target[position2++] = length5 >> 8;
      target[position2++] = length5 & 255;
    } else {
      target[position2++] = 154;
      targetView.setUint32(position2, length5);
      position2 += 4;
    }
  }
  var BlobConstructor = typeof Blob === "undefined" ? function() {
  } : Blob;
  function isBlob(object) {
    if (object instanceof BlobConstructor)
      return true;
    let tag = object[Symbol.toStringTag];
    return tag === "Blob" || tag === "File";
  }
  function findRepetitiveStrings(value, packedValues2) {
    switch (typeof value) {
      case "string":
        if (value.length > 3) {
          if (packedValues2.objectMap[value] > -1 || packedValues2.values.length >= packedValues2.maxValues)
            return;
          let packedStatus = packedValues2.get(value);
          if (packedStatus) {
            if (++packedStatus.count == 2) {
              packedValues2.values.push(value);
            }
          } else {
            packedValues2.set(value, {
              count: 1
            });
            if (packedValues2.samplingPackedValues) {
              let status = packedValues2.samplingPackedValues.get(value);
              if (status)
                status.count++;
              else
                packedValues2.samplingPackedValues.set(value, {
                  count: 1
                });
            }
          }
        }
        break;
      case "object":
        if (value) {
          if (value instanceof Array) {
            for (let i = 0, l = value.length; i < l; i++) {
              findRepetitiveStrings(value[i], packedValues2);
            }
          } else {
            let includeKeys = !packedValues2.encoder.useRecords;
            for (var key in value) {
              if (value.hasOwnProperty(key)) {
                if (includeKeys)
                  findRepetitiveStrings(key, packedValues2);
                findRepetitiveStrings(value[key], packedValues2);
              }
            }
          }
        }
        break;
      case "function":
        console.log(value);
    }
  }
  var isLittleEndianMachine2 = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;
  extensionClasses = [
    Date,
    Set,
    Error,
    RegExp,
    Tag,
    ArrayBuffer,
    Uint8Array,
    Uint8ClampedArray,
    Uint16Array,
    Uint32Array,
    typeof BigUint64Array == "undefined" ? function() {
    } : BigUint64Array,
    Int8Array,
    Int16Array,
    Int32Array,
    typeof BigInt64Array == "undefined" ? function() {
    } : BigInt64Array,
    Float32Array,
    Float64Array,
    SharedData
  ];
  extensions = [
    {
      // Date
      tag: 1,
      encode(date, encode13) {
        let seconds = date.getTime() / 1e3;
        if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 4294967296) {
          target[position2++] = 26;
          targetView.setUint32(position2, seconds);
          position2 += 4;
        } else {
          target[position2++] = 251;
          targetView.setFloat64(position2, seconds);
          position2 += 8;
        }
      }
    },
    {
      // Set
      tag: 258,
      // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md
      encode(set, encode13) {
        let array = Array.from(set);
        encode13(array);
      }
    },
    {
      // Error
      tag: 27,
      // http://cbor.schmorp.de/generic-object
      encode(error, encode13) {
        encode13([error.name, error.message]);
      }
    },
    {
      // RegExp
      tag: 27,
      // http://cbor.schmorp.de/generic-object
      encode(regex, encode13) {
        encode13(["RegExp", regex.source, regex.flags]);
      }
    },
    {
      // Tag
      getTag(tag) {
        return tag.tag;
      },
      encode(tag, encode13) {
        encode13(tag.value);
      }
    },
    {
      // ArrayBuffer
      encode(arrayBuffer, encode13, makeRoom) {
        writeBuffer(arrayBuffer, makeRoom);
      }
    },
    {
      // Uint8Array
      getTag(typedArray) {
        if (typedArray.constructor === Uint8Array) {
          if (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false)
            return 64;
        }
      },
      encode(typedArray, encode13, makeRoom) {
        writeBuffer(typedArray, makeRoom);
      }
    },
    typedArrayEncoder(68, 1),
    typedArrayEncoder(69, 2),
    typedArrayEncoder(70, 4),
    typedArrayEncoder(71, 8),
    typedArrayEncoder(72, 1),
    typedArrayEncoder(77, 2),
    typedArrayEncoder(78, 4),
    typedArrayEncoder(79, 8),
    typedArrayEncoder(85, 4),
    typedArrayEncoder(86, 8),
    {
      encode(sharedData, encode13) {
        let packedValues2 = sharedData.packedValues || [];
        let sharedStructures = sharedData.structures || [];
        if (packedValues2.values.length > 0) {
          target[position2++] = 216;
          target[position2++] = 51;
          writeArrayHeader(4);
          let valuesArray = packedValues2.values;
          encode13(valuesArray);
          writeArrayHeader(0);
          writeArrayHeader(0);
          packedObjectMap = Object.create(sharedPackedObjectMap || null);
          for (let i = 0, l = valuesArray.length; i < l; i++) {
            packedObjectMap[valuesArray[i]] = i;
          }
        }
        if (sharedStructures) {
          targetView.setUint32(position2, 3655335424);
          position2 += 3;
          let definitions = sharedStructures.slice(0);
          definitions.unshift(57344);
          definitions.push(new Tag(sharedData.version, 1399353956));
          encode13(definitions);
        } else
          encode13(new Tag(sharedData.version, 1399353956));
      }
    }
  ];
  function typedArrayEncoder(tag, size) {
    if (!isLittleEndianMachine2 && size > 1)
      tag -= 4;
    return {
      tag,
      encode: function writeExtBuffer(typedArray, encode13) {
        let length5 = typedArray.byteLength;
        let offset = typedArray.byteOffset || 0;
        let buffer2 = typedArray.buffer || typedArray;
        encode13(hasNodeBuffer ? Buffer2.from(buffer2, offset, length5) : new Uint8Array(buffer2, offset, length5));
      }
    };
  }
  function writeBuffer(buffer2, makeRoom) {
    let length5 = buffer2.byteLength;
    if (length5 < 24) {
      target[position2++] = 64 + length5;
    } else if (length5 < 256) {
      target[position2++] = 88;
      target[position2++] = length5;
    } else if (length5 < 65536) {
      target[position2++] = 89;
      target[position2++] = length5 >> 8;
      target[position2++] = length5 & 255;
    } else {
      target[position2++] = 90;
      targetView.setUint32(position2, length5);
      position2 += 4;
    }
    if (position2 + length5 >= target.length) {
      makeRoom(position2 + length5);
    }
    target.set(buffer2.buffer ? buffer2 : new Uint8Array(buffer2), position2);
    position2 += length5;
  }
  function insertIds(serialized, idsToInsert) {
    let nextId;
    let distanceToMove = idsToInsert.length * 2;
    let lastEnd = serialized.length - distanceToMove;
    idsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1);
    for (let id = 0; id < idsToInsert.length; id++) {
      let referee = idsToInsert[id];
      referee.id = id;
      for (let position3 of referee.references) {
        serialized[position3++] = id >> 8;
        serialized[position3] = id & 255;
      }
    }
    while (nextId = idsToInsert.pop()) {
      let offset = nextId.offset;
      serialized.copyWithin(offset + distanceToMove, offset, lastEnd);
      distanceToMove -= 2;
      let position3 = offset + distanceToMove;
      serialized[position3++] = 216;
      serialized[position3++] = 28;
      lastEnd = offset;
    }
    return serialized;
  }
  function writeBundles(start, encode13) {
    targetView.setUint32(bundledStrings2.position + start, position2 - bundledStrings2.position - start + 1);
    let writeStrings = bundledStrings2;
    bundledStrings2 = null;
    encode13(writeStrings[0]);
    encode13(writeStrings[1]);
  }
  function addExtension2(extension) {
    if (extension.Class) {
      if (!extension.encode)
        throw new Error("Extension has no encode function");
      extensionClasses.unshift(extension.Class);
      extensions.unshift(extension);
    }
    addExtension(extension);
  }
  var defaultEncoder = new Encoder4({ useRecords: false });
  var encode9 = defaultEncoder.encode;
  var encodeAsIterable = defaultEncoder.encodeAsIterable;
  var encodeAsAsyncIterable = defaultEncoder.encodeAsAsyncIterable;
  var { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS;
  var REUSE_BUFFER_MODE = 512;
  var RESET_BUFFER_MODE = 1024;
  var THROW_ON_ITERABLE = 2048;

  // node_modules/multiformats/dist/src/bytes.js
  var empty4 = new Uint8Array(0);
  function equals8(aa, bb) {
    if (aa === bb)
      return true;
    if (aa.byteLength !== bb.byteLength) {
      return false;
    }
    for (let ii = 0; ii < aa.byteLength; ii++) {
      if (aa[ii] !== bb[ii]) {
        return false;
      }
    }
    return true;
  }
  function coerce4(o) {
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
      return o;
    if (o instanceof ArrayBuffer)
      return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) {
      return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    }
    throw new Error("Unknown type, must be binary type");
  }

  // node_modules/multiformats/dist/src/vendor/base-x.js
  function base4(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode13(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length5 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length5) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length5 = i2;
        pbegin++;
      }
      var it2 = size - length5;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length5 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length5) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length5 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length5;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode21(string2) {
      var buffer2 = decodeUnsafe(string2);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode13,
      decodeUnsafe,
      decode: decode21
    };
  }
  var src5 = base4;
  var _brrp__multiformats_scope_baseX4 = src5;
  var base_x_default4 = _brrp__multiformats_scope_baseX4;

  // node_modules/multiformats/dist/src/bases/base.js
  var Encoder5 = class {
    constructor(name2, prefix, baseEncode) {
      __publicField(this, "name");
      __publicField(this, "prefix");
      __publicField(this, "baseEncode");
      this.name = name2;
      this.prefix = prefix;
      this.baseEncode = baseEncode;
    }
    encode(bytes) {
      if (bytes instanceof Uint8Array) {
        return `${this.prefix}${this.baseEncode(bytes)}`;
      } else {
        throw Error("Unknown type, must be binary type");
      }
    }
  };
  var Decoder5 = class {
    constructor(name2, prefix, baseDecode) {
      __publicField(this, "name");
      __publicField(this, "prefix");
      __publicField(this, "baseDecode");
      __publicField(this, "prefixCodePoint");
      this.name = name2;
      this.prefix = prefix;
      if (prefix.codePointAt(0) === void 0) {
        throw new Error("Invalid prefix character");
      }
      this.prefixCodePoint = prefix.codePointAt(0);
      this.baseDecode = baseDecode;
    }
    decode(text) {
      if (typeof text === "string") {
        if (text.codePointAt(0) !== this.prefixCodePoint) {
          throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
        }
        return this.baseDecode(text.slice(this.prefix.length));
      } else {
        throw Error("Can only multibase decode strings");
      }
    }
    or(decoder2) {
      return or4(this, decoder2);
    }
  };
  var ComposedDecoder4 = class {
    constructor(decoders) {
      __publicField(this, "decoders");
      this.decoders = decoders;
    }
    or(decoder2) {
      return or4(this, decoder2);
    }
    decode(input) {
      const prefix = input[0];
      const decoder2 = this.decoders[prefix];
      if (decoder2 != null) {
        return decoder2.decode(input);
      } else {
        throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
      }
    }
  };
  function or4(left, right) {
    var _a2, _b;
    return new ComposedDecoder4(__spreadValues(__spreadValues({}, (_a2 = left.decoders) != null ? _a2 : { [left.prefix]: left }), (_b = right.decoders) != null ? _b : { [right.prefix]: right }));
  }
  var Codec4 = class {
    constructor(name2, prefix, baseEncode, baseDecode) {
      __publicField(this, "name");
      __publicField(this, "prefix");
      __publicField(this, "baseEncode");
      __publicField(this, "baseDecode");
      __publicField(this, "encoder");
      __publicField(this, "decoder");
      this.name = name2;
      this.prefix = prefix;
      this.baseEncode = baseEncode;
      this.baseDecode = baseDecode;
      this.encoder = new Encoder5(name2, prefix, baseEncode);
      this.decoder = new Decoder5(name2, prefix, baseDecode);
    }
    encode(input) {
      return this.encoder.encode(input);
    }
    decode(input) {
      return this.decoder.decode(input);
    }
  };
  function from5({ name: name2, prefix, encode: encode13, decode: decode21 }) {
    return new Codec4(name2, prefix, encode13, decode21);
  }
  function baseX4({ name: name2, prefix, alphabet: alphabet2 }) {
    const { encode: encode13, decode: decode21 } = base_x_default4(alphabet2, name2);
    return from5({
      prefix,
      name: name2,
      encode: encode13,
      decode: (text) => coerce4(decode21(text))
    });
  }
  function decode15(string2, alphabet2, bitsPerChar, name2) {
    const codes = {};
    for (let i = 0; i < alphabet2.length; ++i) {
      codes[alphabet2[i]] = i;
    }
    let end = string2.length;
    while (string2[end - 1] === "=") {
      --end;
    }
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer2 = 0;
    let written = 0;
    for (let i = 0; i < end; ++i) {
      const value = codes[string2[i]];
      if (value === void 0) {
        throw new SyntaxError(`Non-${name2} character`);
      }
      buffer2 = buffer2 << bitsPerChar | value;
      bits += bitsPerChar;
      if (bits >= 8) {
        bits -= 8;
        out[written++] = 255 & buffer2 >> bits;
      }
    }
    if (bits >= bitsPerChar || (255 & buffer2 << 8 - bits) !== 0) {
      throw new SyntaxError("Unexpected end of data");
    }
    return out;
  }
  function encode10(data, alphabet2, bitsPerChar) {
    const pad = alphabet2[alphabet2.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer2 = 0;
    for (let i = 0; i < data.length; ++i) {
      buffer2 = buffer2 << 8 | data[i];
      bits += 8;
      while (bits > bitsPerChar) {
        bits -= bitsPerChar;
        out += alphabet2[mask & buffer2 >> bits];
      }
    }
    if (bits !== 0) {
      out += alphabet2[mask & buffer2 << bitsPerChar - bits];
    }
    if (pad) {
      while ((out.length * bitsPerChar & 7) !== 0) {
        out += "=";
      }
    }
    return out;
  }
  function rfc46484({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) {
    return from5({
      prefix,
      name: name2,
      encode(input) {
        return encode10(input, alphabet2, bitsPerChar);
      },
      decode(input) {
        return decode15(input, alphabet2, bitsPerChar, name2);
      }
    });
  }

  // node_modules/multiformats/dist/src/bases/base32.js
  var base324 = rfc46484({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
  });
  var base32upper4 = rfc46484({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
  });
  var base32pad4 = rfc46484({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
  });
  var base32padupper4 = rfc46484({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
  });
  var base32hex4 = rfc46484({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
  });
  var base32hexupper4 = rfc46484({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
  });
  var base32hexpad4 = rfc46484({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
  });
  var base32hexpadupper4 = rfc46484({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
  });
  var base32z4 = rfc46484({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
  });

  // node_modules/multiformats/dist/src/bases/base58.js
  var base58btc4 = baseX4({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
  });
  var base58flickr4 = baseX4({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
  });

  // node_modules/multiformats/dist/src/vendor/varint.js
  var encode_14 = encode11;
  var MSB4 = 128;
  var REST4 = 127;
  var MSBALL4 = ~REST4;
  var INT4 = Math.pow(2, 31);
  function encode11(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT4) {
      out[offset++] = num & 255 | MSB4;
      num /= 128;
    }
    while (num & MSBALL4) {
      out[offset++] = num & 255 | MSB4;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode11.bytes = offset - oldOffset + 1;
    return out;
  }
  var decode16 = read5;
  var MSB$14 = 128;
  var REST$14 = 127;
  function read5(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read5.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$14) << shift : (b & REST$14) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$14);
    read5.bytes = counter - offset;
    return res;
  }
  var N14 = Math.pow(2, 7);
  var N24 = Math.pow(2, 14);
  var N34 = Math.pow(2, 21);
  var N44 = Math.pow(2, 28);
  var N54 = Math.pow(2, 35);
  var N64 = Math.pow(2, 42);
  var N74 = Math.pow(2, 49);
  var N84 = Math.pow(2, 56);
  var N94 = Math.pow(2, 63);
  var length4 = function(value) {
    return value < N14 ? 1 : value < N24 ? 2 : value < N34 ? 3 : value < N44 ? 4 : value < N54 ? 5 : value < N64 ? 6 : value < N74 ? 7 : value < N84 ? 8 : value < N94 ? 9 : 10;
  };
  var varint4 = {
    encode: encode_14,
    decode: decode16,
    encodingLength: length4
  };
  var _brrp_varint4 = varint4;
  var varint_default4 = _brrp_varint4;

  // node_modules/multiformats/dist/src/varint.js
  function decode17(data, offset = 0) {
    const code2 = varint_default4.decode(data, offset);
    return [code2, varint_default4.decode.bytes];
  }
  function encodeTo4(int, target2, offset = 0) {
    varint_default4.encode(int, target2, offset);
    return target2;
  }
  function encodingLength4(int) {
    return varint_default4.encodingLength(int);
  }

  // node_modules/multiformats/dist/src/hashes/digest.js
  function create4(code2, digest2) {
    const size = digest2.byteLength;
    const sizeOffset = encodingLength4(code2);
    const digestOffset = sizeOffset + encodingLength4(size);
    const bytes = new Uint8Array(digestOffset + size);
    encodeTo4(code2, bytes, 0);
    encodeTo4(size, bytes, sizeOffset);
    bytes.set(digest2, digestOffset);
    return new Digest4(code2, size, digest2, bytes);
  }
  function decode18(multihash) {
    const bytes = coerce4(multihash);
    const [code2, sizeOffset] = decode17(bytes);
    const [size, digestOffset] = decode17(bytes.subarray(sizeOffset));
    const digest2 = bytes.subarray(sizeOffset + digestOffset);
    if (digest2.byteLength !== size) {
      throw new Error("Incorrect length");
    }
    return new Digest4(code2, size, digest2, bytes);
  }
  function equals9(a, b) {
    if (a === b) {
      return true;
    } else {
      const data = b;
      return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equals8(a.bytes, data.bytes);
    }
  }
  var Digest4 = class {
    /**
     * Creates a multihash digest.
     */
    constructor(code2, size, digest2, bytes) {
      __publicField(this, "code");
      __publicField(this, "size");
      __publicField(this, "digest");
      __publicField(this, "bytes");
      this.code = code2;
      this.size = size;
      this.digest = digest2;
      this.bytes = bytes;
    }
  };

  // node_modules/multiformats/dist/src/cid.js
  function format(link, base5) {
    const { bytes, version: version5 } = link;
    switch (version5) {
      case 0:
        return toStringV04(bytes, baseCache(link), base5 != null ? base5 : base58btc4.encoder);
      default:
        return toStringV14(bytes, baseCache(link), base5 != null ? base5 : base324.encoder);
    }
  }
  var cache = /* @__PURE__ */ new WeakMap();
  function baseCache(cid) {
    const baseCache2 = cache.get(cid);
    if (baseCache2 == null) {
      const baseCache3 = /* @__PURE__ */ new Map();
      cache.set(cid, baseCache3);
      return baseCache3;
    }
    return baseCache2;
  }
  var _a;
  var CID4 = class _CID {
    /**
     * @param version - Version of the CID
     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
     * @param multihash - (Multi)hash of the of the content.
     */
    constructor(version5, code2, multihash, bytes) {
      __publicField(this, "code");
      __publicField(this, "version");
      __publicField(this, "multihash");
      __publicField(this, "bytes");
      __publicField(this, "/");
      __publicField(this, _a, "CID");
      this.code = code2;
      this.version = version5;
      this.multihash = multihash;
      this.bytes = bytes;
      this["/"] = bytes;
    }
    /**
     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`
     * please either use `CID.asCID(cid)` or switch to new signalling mechanism
     *
     * @deprecated
     */
    get asCID() {
      return this;
    }
    // ArrayBufferView
    get byteOffset() {
      return this.bytes.byteOffset;
    }
    // ArrayBufferView
    get byteLength() {
      return this.bytes.byteLength;
    }
    toV0() {
      switch (this.version) {
        case 0: {
          return this;
        }
        case 1: {
          const { code: code2, multihash } = this;
          if (code2 !== DAG_PB_CODE4) {
            throw new Error("Cannot convert a non dag-pb CID to CIDv0");
          }
          if (multihash.code !== SHA_256_CODE4) {
            throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
          }
          return _CID.createV0(multihash);
        }
        default: {
          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
      }
    }
    toV1() {
      switch (this.version) {
        case 0: {
          const { code: code2, digest: digest2 } = this.multihash;
          const multihash = create4(code2, digest2);
          return _CID.createV1(this.code, multihash);
        }
        case 1: {
          return this;
        }
        default: {
          throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);
        }
      }
    }
    equals(other) {
      return _CID.equals(this, other);
    }
    static equals(self, other) {
      const unknown = other;
      return unknown != null && self.code === unknown.code && self.version === unknown.version && equals9(self.multihash, unknown.multihash);
    }
    toString(base5) {
      return format(this, base5);
    }
    toJSON() {
      return { "/": format(this) };
    }
    link() {
      return this;
    }
    // Legacy
    [(_a = Symbol.toStringTag, Symbol.for("nodejs.util.inspect.custom"))]() {
      return `CID(${this.toString()})`;
    }
    /**
     * Takes any input `value` and returns a `CID` instance if it was
     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`
     * it will return value back. If `value` is not instance of this CID
     * class, but is compatible CID it will return new instance of this
     * `CID` class. Otherwise returns null.
     *
     * This allows two different incompatible versions of CID library to
     * co-exist and interop as long as binary interface is compatible.
     */
    static asCID(input) {
      if (input == null) {
        return null;
      }
      const value = input;
      if (value instanceof _CID) {
        return value;
      } else if (value["/"] != null && value["/"] === value.bytes || value.asCID === value) {
        const { version: version5, code: code2, multihash, bytes } = value;
        return new _CID(version5, code2, multihash, bytes != null ? bytes : encodeCID4(version5, code2, multihash.bytes));
      } else if (value[cidSymbol4] === true) {
        const { version: version5, multihash, code: code2 } = value;
        const digest2 = decode18(multihash);
        return _CID.create(version5, code2, digest2);
      } else {
        return null;
      }
    }
    /**
     * @param version - Version of the CID
     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
     * @param digest - (Multi)hash of the of the content.
     */
    static create(version5, code2, digest2) {
      if (typeof code2 !== "number") {
        throw new Error("String codecs are no longer supported");
      }
      if (!(digest2.bytes instanceof Uint8Array)) {
        throw new Error("Invalid digest");
      }
      switch (version5) {
        case 0: {
          if (code2 !== DAG_PB_CODE4) {
            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE4}) block encoding`);
          } else {
            return new _CID(version5, code2, digest2, digest2.bytes);
          }
        }
        case 1: {
          const bytes = encodeCID4(version5, code2, digest2.bytes);
          return new _CID(version5, code2, digest2, bytes);
        }
        default: {
          throw new Error("Invalid version");
        }
      }
    }
    /**
     * Simplified version of `create` for CIDv0.
     */
    static createV0(digest2) {
      return _CID.create(0, DAG_PB_CODE4, digest2);
    }
    /**
     * Simplified version of `create` for CIDv1.
     *
     * @param code - Content encoding format code.
     * @param digest - Multihash of the content.
     */
    static createV1(code2, digest2) {
      return _CID.create(1, code2, digest2);
    }
    /**
     * Decoded a CID from its binary representation. The byte array must contain
     * only the CID with no additional bytes.
     *
     * An error will be thrown if the bytes provided do not contain a valid
     * binary representation of a CID.
     */
    static decode(bytes) {
      const [cid, remainder] = _CID.decodeFirst(bytes);
      if (remainder.length !== 0) {
        throw new Error("Incorrect length");
      }
      return cid;
    }
    /**
     * Decoded a CID from its binary representation at the beginning of a byte
     * array.
     *
     * Returns an array with the first element containing the CID and the second
     * element containing the remainder of the original byte array. The remainder
     * will be a zero-length byte array if the provided bytes only contained a
     * binary CID representation.
     */
    static decodeFirst(bytes) {
      const specs = _CID.inspectBytes(bytes);
      const prefixSize = specs.size - specs.multihashSize;
      const multihashBytes = coerce4(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
      if (multihashBytes.byteLength !== specs.multihashSize) {
        throw new Error("Incorrect length");
      }
      const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
      const digest2 = new Digest4(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
      const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
      return [cid, bytes.subarray(specs.size)];
    }
    /**
     * Inspect the initial bytes of a CID to determine its properties.
     *
     * Involves decoding up to 4 varints. Typically this will require only 4 to 6
     * bytes but for larger multicodec code values and larger multihash digest
     * lengths these varints can be quite large. It is recommended that at least
     * 10 bytes be made available in the `initialBytes` argument for a complete
     * inspection.
     */
    static inspectBytes(initialBytes) {
      let offset = 0;
      const next = () => {
        const [i, length5] = decode17(initialBytes.subarray(offset));
        offset += length5;
        return i;
      };
      let version5 = next();
      let codec = DAG_PB_CODE4;
      if (version5 === 18) {
        version5 = 0;
        offset = 0;
      } else {
        codec = next();
      }
      if (version5 !== 0 && version5 !== 1) {
        throw new RangeError(`Invalid CID version ${version5}`);
      }
      const prefixSize = offset;
      const multihashCode = next();
      const digestSize = next();
      const size = offset + digestSize;
      const multihashSize = size - prefixSize;
      return { version: version5, codec, multihashCode, digestSize, multihashSize, size };
    }
    /**
     * Takes cid in a string representation and creates an instance. If `base`
     * decoder is not provided will use a default from the configuration. It will
     * throw an error if encoding of the CID is not compatible with supplied (or
     * a default decoder).
     */
    static parse(source, base5) {
      const [prefix, bytes] = parseCIDtoBytes4(source, base5);
      const cid = _CID.decode(bytes);
      if (cid.version === 0 && source[0] !== "Q") {
        throw Error("Version 0 CID string must not include multibase prefix");
      }
      baseCache(cid).set(prefix, source);
      return cid;
    }
  };
  function parseCIDtoBytes4(source, base5) {
    switch (source[0]) {
      case "Q": {
        const decoder2 = base5 != null ? base5 : base58btc4;
        return [
          base58btc4.prefix,
          decoder2.decode(`${base58btc4.prefix}${source}`)
        ];
      }
      case base58btc4.prefix: {
        const decoder2 = base5 != null ? base5 : base58btc4;
        return [base58btc4.prefix, decoder2.decode(source)];
      }
      case base324.prefix: {
        const decoder2 = base5 != null ? base5 : base324;
        return [base324.prefix, decoder2.decode(source)];
      }
      default: {
        if (base5 == null) {
          throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
        }
        return [source[0], base5.decode(source)];
      }
    }
  }
  function toStringV04(bytes, cache2, base5) {
    const { prefix } = base5;
    if (prefix !== base58btc4.prefix) {
      throw Error(`Cannot string encode V0 in ${base5.name} encoding`);
    }
    const cid = cache2.get(prefix);
    if (cid == null) {
      const cid2 = base5.encode(bytes).slice(1);
      cache2.set(prefix, cid2);
      return cid2;
    } else {
      return cid;
    }
  }
  function toStringV14(bytes, cache2, base5) {
    const { prefix } = base5;
    const cid = cache2.get(prefix);
    if (cid == null) {
      const cid2 = base5.encode(bytes);
      cache2.set(prefix, cid2);
      return cid2;
    } else {
      return cid;
    }
  }
  var DAG_PB_CODE4 = 112;
  var SHA_256_CODE4 = 18;
  function encodeCID4(version5, code2, multihash) {
    const codeOffset = encodingLength4(version5);
    const hashOffset = codeOffset + encodingLength4(code2);
    const bytes = new Uint8Array(hashOffset + multihash.byteLength);
    encodeTo4(version5, bytes, 0);
    encodeTo4(code2, bytes, codeOffset);
    bytes.set(multihash, hashOffset);
    return bytes;
  }
  var cidSymbol4 = Symbol.for("@ipld/js-cid/CID");

  // node_modules/cborg/lib/is.js
  var typeofs = [
    "string",
    "number",
    "bigint",
    "symbol"
  ];
  var objectTypeNames = [
    "Function",
    "Generator",
    "AsyncGenerator",
    "GeneratorFunction",
    "AsyncGeneratorFunction",
    "AsyncFunction",
    "Observable",
    "Array",
    "Buffer",
    "Object",
    "RegExp",
    "Date",
    "Error",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "DataView",
    "Promise",
    "URL",
    "HTMLElement",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Uint16Array",
    "Int32Array",
    "Uint32Array",
    "Float32Array",
    "Float64Array",
    "BigInt64Array",
    "BigUint64Array"
  ];
  function is(value) {
    if (value === null) {
      return "null";
    }
    if (value === void 0) {
      return "undefined";
    }
    if (value === true || value === false) {
      return "boolean";
    }
    const typeOf = typeof value;
    if (typeofs.includes(typeOf)) {
      return typeOf;
    }
    if (typeOf === "function") {
      return "Function";
    }
    if (Array.isArray(value)) {
      return "Array";
    }
    if (isBuffer(value)) {
      return "Buffer";
    }
    const objectType = getObjectType(value);
    if (objectType) {
      return objectType;
    }
    return "Object";
  }
  function isBuffer(value) {
    return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
  }
  function getObjectType(value) {
    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
    if (objectTypeNames.includes(objectTypeName)) {
      return objectTypeName;
    }
    return void 0;
  }

  // node_modules/cborg/lib/token.js
  var Type = class {
    /**
     * @param {number} major
     * @param {string} name
     * @param {boolean} terminal
     */
    constructor(major, name2, terminal) {
      this.major = major;
      this.majorEncoded = major << 5;
      this.name = name2;
      this.terminal = terminal;
    }
    /* c8 ignore next 3 */
    toString() {
      return `Type[${this.major}].${this.name}`;
    }
    /**
     * @param {Type} typ
     * @returns {number}
     */
    compare(typ) {
      return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
    }
  };
  Type.uint = new Type(0, "uint", true);
  Type.negint = new Type(1, "negint", true);
  Type.bytes = new Type(2, "bytes", true);
  Type.string = new Type(3, "string", true);
  Type.array = new Type(4, "array", false);
  Type.map = new Type(5, "map", false);
  Type.tag = new Type(6, "tag", false);
  Type.float = new Type(7, "float", true);
  Type.false = new Type(7, "false", true);
  Type.true = new Type(7, "true", true);
  Type.null = new Type(7, "null", true);
  Type.undefined = new Type(7, "undefined", true);
  Type.break = new Type(7, "break", true);
  var Token = class {
    /**
     * @param {Type} type
     * @param {any} [value]
     * @param {number} [encodedLength]
     */
    constructor(type, value, encodedLength) {
      this.type = type;
      this.value = value;
      this.encodedLength = encodedLength;
      this.encodedBytes = void 0;
      this.byteValue = void 0;
    }
    /* c8 ignore next 3 */
    toString() {
      return `Token[${this.type}].${this.value}`;
    }
  };

  // node_modules/cborg/lib/byte-utils.js
  var useBuffer = globalThis.process && // @ts-ignore
  !globalThis.process.browser && // @ts-ignore
  globalThis.Buffer && // @ts-ignore
  typeof globalThis.Buffer.isBuffer === "function";
  var textDecoder2 = new TextDecoder();
  var textEncoder3 = new TextEncoder();
  function isBuffer2(buf2) {
    return useBuffer && globalThis.Buffer.isBuffer(buf2);
  }
  function asU8A(buf2) {
    if (!(buf2 instanceof Uint8Array)) {
      return Uint8Array.from(buf2);
    }
    return isBuffer2(buf2) ? new Uint8Array(buf2.buffer, buf2.byteOffset, buf2.byteLength) : buf2;
  }
  var toString3 = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */
    (bytes, start, end) => {
      return end - start > 64 ? (
        // eslint-disable-line operator-linebreak
        // @ts-ignore
        globalThis.Buffer.from(bytes.subarray(start, end)).toString("utf8")
      ) : utf8Slice(bytes, start, end);
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */
    (bytes, start, end) => {
      return end - start > 64 ? textDecoder2.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
    }
  );
  var fromString3 = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {string} string
     */
    (string2) => {
      return string2.length > 64 ? (
        // eslint-disable-line operator-linebreak
        // @ts-ignore
        globalThis.Buffer.from(string2)
      ) : utf8ToBytes(string2);
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {string} string
     */
    (string2) => {
      return string2.length > 64 ? textEncoder3.encode(string2) : utf8ToBytes(string2);
    }
  );
  var slice = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */
    (bytes, start, end) => {
      if (isBuffer2(bytes)) {
        return new Uint8Array(bytes.subarray(start, end));
      }
      return bytes.slice(start, end);
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */
    (bytes, start, end) => {
      return bytes.slice(start, end);
    }
  );
  var concat2 = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array[]} chunks
     * @param {number} length
     * @returns {Uint8Array}
     */
    (chunks, length5) => {
      chunks = chunks.map((c) => c instanceof Uint8Array ? c : (
        // eslint-disable-line operator-linebreak
        // @ts-ignore
        globalThis.Buffer.from(c)
      ));
      return asU8A(globalThis.Buffer.concat(chunks, length5));
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array[]} chunks
     * @param {number} length
     * @returns {Uint8Array}
     */
    (chunks, length5) => {
      const out = new Uint8Array(length5);
      let off = 0;
      for (let b of chunks) {
        if (off + b.length > out.length) {
          b = b.subarray(0, out.length - off);
        }
        out.set(b, off);
        off += b.length;
      }
      return out;
    }
  );
  var alloc = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {number} size
     * @returns {Uint8Array}
     */
    (size) => {
      return globalThis.Buffer.allocUnsafe(size);
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {number} size
     * @returns {Uint8Array}
     */
    (size) => {
      return new Uint8Array(size);
    }
  );
  function compare2(b1, b2) {
    if (isBuffer2(b1) && isBuffer2(b2)) {
      return b1.compare(b2);
    }
    for (let i = 0; i < b1.length; i++) {
      if (b1[i] === b2[i]) {
        continue;
      }
      return b1[i] < b2[i] ? -1 : 1;
    }
    return 0;
  }
  function utf8ToBytes(str) {
    const out = [];
    let p = 0;
    for (let i = 0; i < str.length; i++) {
      let c = str.charCodeAt(i);
      if (c < 128) {
        out[p++] = c;
      } else if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
        c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
        out[p++] = c >> 18 | 240;
        out[p++] = c >> 12 & 63 | 128;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
    return out;
  }
  function utf8Slice(buf2, offset, end) {
    const res = [];
    while (offset < end) {
      const firstByte = buf2[offset];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (offset + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf2[offset + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf2[offset + 1];
            thirdByte = buf2[offset + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf2[offset + 1];
            thirdByte = buf2[offset + 2];
            fourthByte = buf2[offset + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      offset += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  var MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }

  // node_modules/cborg/lib/bl.js
  var defaultChunkSize = 256;
  var Bl = class {
    /**
     * @param {number} [chunkSize]
     */
    constructor(chunkSize = defaultChunkSize) {
      this.chunkSize = chunkSize;
      this.cursor = 0;
      this.maxCursor = -1;
      this.chunks = [];
      this._initReuseChunk = null;
    }
    reset() {
      this.cursor = 0;
      this.maxCursor = -1;
      if (this.chunks.length) {
        this.chunks = [];
      }
      if (this._initReuseChunk !== null) {
        this.chunks.push(this._initReuseChunk);
        this.maxCursor = this._initReuseChunk.length - 1;
      }
    }
    /**
     * @param {Uint8Array|number[]} bytes
     */
    push(bytes) {
      let topChunk = this.chunks[this.chunks.length - 1];
      const newMax = this.cursor + bytes.length;
      if (newMax <= this.maxCursor + 1) {
        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
        topChunk.set(bytes, chunkPos);
      } else {
        if (topChunk) {
          const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
          if (chunkPos < topChunk.length) {
            this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
            this.maxCursor = this.cursor - 1;
          }
        }
        if (bytes.length < 64 && bytes.length < this.chunkSize) {
          topChunk = alloc(this.chunkSize);
          this.chunks.push(topChunk);
          this.maxCursor += topChunk.length;
          if (this._initReuseChunk === null) {
            this._initReuseChunk = topChunk;
          }
          topChunk.set(bytes, 0);
        } else {
          this.chunks.push(bytes);
          this.maxCursor += bytes.length;
        }
      }
      this.cursor += bytes.length;
    }
    /**
     * @param {boolean} [reset]
     * @returns {Uint8Array}
     */
    toBytes(reset = false) {
      let byts;
      if (this.chunks.length === 1) {
        const chunk = this.chunks[0];
        if (reset && this.cursor > chunk.length / 2) {
          byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
          this._initReuseChunk = null;
          this.chunks = [];
        } else {
          byts = slice(chunk, 0, this.cursor);
        }
      } else {
        byts = concat2(this.chunks, this.cursor);
      }
      if (reset) {
        this.reset();
      }
      return byts;
    }
  };

  // node_modules/cborg/lib/common.js
  var decodeErrPrefix = "CBOR decode error:";
  var encodeErrPrefix = "CBOR encode error:";
  var uintMinorPrefixBytes = [];
  uintMinorPrefixBytes[23] = 1;
  uintMinorPrefixBytes[24] = 2;
  uintMinorPrefixBytes[25] = 3;
  uintMinorPrefixBytes[26] = 5;
  uintMinorPrefixBytes[27] = 9;
  function assertEnoughData(data, pos, need) {
    if (data.length - pos < need) {
      throw new Error(`${decodeErrPrefix} not enough data for type`);
    }
  }

  // node_modules/cborg/lib/0uint.js
  var uintBoundaries = [24, 256, 65536, 4294967296, BigInt("18446744073709551616")];
  function readUint8(data, offset, options) {
    assertEnoughData(data, offset, 1);
    const value = data[offset];
    if (options.strict === true && value < uintBoundaries[0]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint16(data, offset, options) {
    assertEnoughData(data, offset, 2);
    const value = data[offset] << 8 | data[offset + 1];
    if (options.strict === true && value < uintBoundaries[1]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint32(data, offset, options) {
    assertEnoughData(data, offset, 4);
    const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    if (options.strict === true && value < uintBoundaries[2]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint64(data, offset, options) {
    assertEnoughData(data, offset, 8);
    const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
    const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
    if (options.strict === true && value < uintBoundaries[3]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    if (value <= Number.MAX_SAFE_INTEGER) {
      return Number(value);
    }
    if (options.allowBigInt === true) {
      return value;
    }
    throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
  }
  function decodeUint8(data, pos, _minor, options) {
    return new Token(Type.uint, readUint8(data, pos + 1, options), 2);
  }
  function decodeUint16(data, pos, _minor, options) {
    return new Token(Type.uint, readUint16(data, pos + 1, options), 3);
  }
  function decodeUint32(data, pos, _minor, options) {
    return new Token(Type.uint, readUint32(data, pos + 1, options), 5);
  }
  function decodeUint64(data, pos, _minor, options) {
    return new Token(Type.uint, readUint64(data, pos + 1, options), 9);
  }
  function encodeUint(buf2, token) {
    return encodeUintValue(buf2, 0, token.value);
  }
  function encodeUintValue(buf2, major, uint) {
    if (uint < uintBoundaries[0]) {
      const nuint = Number(uint);
      buf2.push([major | nuint]);
    } else if (uint < uintBoundaries[1]) {
      const nuint = Number(uint);
      buf2.push([major | 24, nuint]);
    } else if (uint < uintBoundaries[2]) {
      const nuint = Number(uint);
      buf2.push([major | 25, nuint >>> 8, nuint & 255]);
    } else if (uint < uintBoundaries[3]) {
      const nuint = Number(uint);
      buf2.push([major | 26, nuint >>> 24 & 255, nuint >>> 16 & 255, nuint >>> 8 & 255, nuint & 255]);
    } else {
      const buint = BigInt(uint);
      if (buint < uintBoundaries[4]) {
        const set = [major | 27, 0, 0, 0, 0, 0, 0, 0];
        let lo = Number(buint & BigInt(4294967295));
        let hi = Number(buint >> BigInt(32) & BigInt(4294967295));
        set[8] = lo & 255;
        lo = lo >> 8;
        set[7] = lo & 255;
        lo = lo >> 8;
        set[6] = lo & 255;
        lo = lo >> 8;
        set[5] = lo & 255;
        set[4] = hi & 255;
        hi = hi >> 8;
        set[3] = hi & 255;
        hi = hi >> 8;
        set[2] = hi & 255;
        hi = hi >> 8;
        set[1] = hi & 255;
        buf2.push(set);
      } else {
        throw new Error(`${decodeErrPrefix} encountered BigInt larger than allowable range`);
      }
    }
  }
  encodeUint.encodedSize = function encodedSize(token) {
    return encodeUintValue.encodedSize(token.value);
  };
  encodeUintValue.encodedSize = function encodedSize2(uint) {
    if (uint < uintBoundaries[0]) {
      return 1;
    }
    if (uint < uintBoundaries[1]) {
      return 2;
    }
    if (uint < uintBoundaries[2]) {
      return 3;
    }
    if (uint < uintBoundaries[3]) {
      return 5;
    }
    return 9;
  };
  encodeUint.compareTokens = function compareTokens(tok1, tok2) {
    return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : (
      /* c8 ignore next */
      0
    );
  };

  // node_modules/cborg/lib/1negint.js
  function decodeNegint8(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint8(data, pos + 1, options), 2);
  }
  function decodeNegint16(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint16(data, pos + 1, options), 3);
  }
  function decodeNegint32(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint32(data, pos + 1, options), 5);
  }
  var neg1b = BigInt(-1);
  var pos1b = BigInt(1);
  function decodeNegint64(data, pos, _minor, options) {
    const int = readUint64(data, pos + 1, options);
    if (typeof int !== "bigint") {
      const value = -1 - int;
      if (value >= Number.MIN_SAFE_INTEGER) {
        return new Token(Type.negint, value, 9);
      }
    }
    if (options.allowBigInt !== true) {
      throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
    }
    return new Token(Type.negint, neg1b - BigInt(int), 9);
  }
  function encodeNegint(buf2, token) {
    const negint = token.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    encodeUintValue(buf2, token.type.majorEncoded, unsigned);
  }
  encodeNegint.encodedSize = function encodedSize3(token) {
    const negint = token.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    if (unsigned < uintBoundaries[0]) {
      return 1;
    }
    if (unsigned < uintBoundaries[1]) {
      return 2;
    }
    if (unsigned < uintBoundaries[2]) {
      return 3;
    }
    if (unsigned < uintBoundaries[3]) {
      return 5;
    }
    return 9;
  };
  encodeNegint.compareTokens = function compareTokens2(tok1, tok2) {
    return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : (
      /* c8 ignore next */
      0
    );
  };

  // node_modules/cborg/lib/2bytes.js
  function toToken(data, pos, prefix, length5) {
    assertEnoughData(data, pos, prefix + length5);
    const buf2 = slice(data, pos + prefix, pos + prefix + length5);
    return new Token(Type.bytes, buf2, prefix + length5);
  }
  function decodeBytesCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
  }
  function decodeBytes8(data, pos, _minor, options) {
    return toToken(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeBytes16(data, pos, _minor, options) {
    return toToken(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeBytes32(data, pos, _minor, options) {
    return toToken(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeBytes64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer bytes lengths not supported`);
    }
    return toToken(data, pos, 9, l);
  }
  function tokenBytes(token) {
    if (token.encodedBytes === void 0) {
      token.encodedBytes = token.type === Type.string ? fromString3(token.value) : token.value;
    }
    return token.encodedBytes;
  }
  function encodeBytes(buf2, token) {
    const bytes = tokenBytes(token);
    encodeUintValue(buf2, token.type.majorEncoded, bytes.length);
    buf2.push(bytes);
  }
  encodeBytes.encodedSize = function encodedSize4(token) {
    const bytes = tokenBytes(token);
    return encodeUintValue.encodedSize(bytes.length) + bytes.length;
  };
  encodeBytes.compareTokens = function compareTokens3(tok1, tok2) {
    return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
  };
  function compareBytes(b1, b2) {
    return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare2(b1, b2);
  }

  // node_modules/cborg/lib/3string.js
  function toToken2(data, pos, prefix, length5, options) {
    const totLength = prefix + length5;
    assertEnoughData(data, pos, totLength);
    const tok = new Token(Type.string, toString3(data, pos + prefix, pos + totLength), totLength);
    if (options.retainStringBytes === true) {
      tok.byteValue = slice(data, pos + prefix, pos + totLength);
    }
    return tok;
  }
  function decodeStringCompact(data, pos, minor, options) {
    return toToken2(data, pos, 1, minor, options);
  }
  function decodeString8(data, pos, _minor, options) {
    return toToken2(data, pos, 2, readUint8(data, pos + 1, options), options);
  }
  function decodeString16(data, pos, _minor, options) {
    return toToken2(data, pos, 3, readUint16(data, pos + 1, options), options);
  }
  function decodeString32(data, pos, _minor, options) {
    return toToken2(data, pos, 5, readUint32(data, pos + 1, options), options);
  }
  function decodeString64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);
    }
    return toToken2(data, pos, 9, l, options);
  }
  var encodeString = encodeBytes;

  // node_modules/cborg/lib/4array.js
  function toToken3(_data, _pos, prefix, length5) {
    return new Token(Type.array, length5, prefix);
  }
  function decodeArrayCompact(data, pos, minor, _options) {
    return toToken3(data, pos, 1, minor);
  }
  function decodeArray8(data, pos, _minor, options) {
    return toToken3(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeArray16(data, pos, _minor, options) {
    return toToken3(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeArray32(data, pos, _minor, options) {
    return toToken3(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeArray64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer array lengths not supported`);
    }
    return toToken3(data, pos, 9, l);
  }
  function decodeArrayIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken3(data, pos, 1, Infinity);
  }
  function encodeArray(buf2, token) {
    encodeUintValue(buf2, Type.array.majorEncoded, token.value);
  }
  encodeArray.compareTokens = encodeUint.compareTokens;
  encodeArray.encodedSize = function encodedSize5(token) {
    return encodeUintValue.encodedSize(token.value);
  };

  // node_modules/cborg/lib/5map.js
  function toToken4(_data, _pos, prefix, length5) {
    return new Token(Type.map, length5, prefix);
  }
  function decodeMapCompact(data, pos, minor, _options) {
    return toToken4(data, pos, 1, minor);
  }
  function decodeMap8(data, pos, _minor, options) {
    return toToken4(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeMap16(data, pos, _minor, options) {
    return toToken4(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeMap32(data, pos, _minor, options) {
    return toToken4(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeMap64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer map lengths not supported`);
    }
    return toToken4(data, pos, 9, l);
  }
  function decodeMapIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken4(data, pos, 1, Infinity);
  }
  function encodeMap(buf2, token) {
    encodeUintValue(buf2, Type.map.majorEncoded, token.value);
  }
  encodeMap.compareTokens = encodeUint.compareTokens;
  encodeMap.encodedSize = function encodedSize6(token) {
    return encodeUintValue.encodedSize(token.value);
  };

  // node_modules/cborg/lib/6tag.js
  function decodeTagCompact(_data, _pos, minor, _options) {
    return new Token(Type.tag, minor, 1);
  }
  function decodeTag8(data, pos, _minor, options) {
    return new Token(Type.tag, readUint8(data, pos + 1, options), 2);
  }
  function decodeTag16(data, pos, _minor, options) {
    return new Token(Type.tag, readUint16(data, pos + 1, options), 3);
  }
  function decodeTag32(data, pos, _minor, options) {
    return new Token(Type.tag, readUint32(data, pos + 1, options), 5);
  }
  function decodeTag64(data, pos, _minor, options) {
    return new Token(Type.tag, readUint64(data, pos + 1, options), 9);
  }
  function encodeTag(buf2, token) {
    encodeUintValue(buf2, Type.tag.majorEncoded, token.value);
  }
  encodeTag.compareTokens = encodeUint.compareTokens;
  encodeTag.encodedSize = function encodedSize7(token) {
    return encodeUintValue.encodedSize(token.value);
  };

  // node_modules/cborg/lib/7float.js
  var MINOR_FALSE = 20;
  var MINOR_TRUE = 21;
  var MINOR_NULL = 22;
  var MINOR_UNDEFINED = 23;
  function decodeUndefined(_data, _pos, _minor, options) {
    if (options.allowUndefined === false) {
      throw new Error(`${decodeErrPrefix} undefined values are not supported`);
    } else if (options.coerceUndefinedToNull === true) {
      return new Token(Type.null, null, 1);
    }
    return new Token(Type.undefined, void 0, 1);
  }
  function decodeBreak(_data, _pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return new Token(Type.break, void 0, 1);
  }
  function createToken(value, bytes, options) {
    if (options) {
      if (options.allowNaN === false && Number.isNaN(value)) {
        throw new Error(`${decodeErrPrefix} NaN values are not supported`);
      }
      if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
        throw new Error(`${decodeErrPrefix} Infinity values are not supported`);
      }
    }
    return new Token(Type.float, value, bytes);
  }
  function decodeFloat16(data, pos, _minor, options) {
    return createToken(readFloat16(data, pos + 1), 3, options);
  }
  function decodeFloat32(data, pos, _minor, options) {
    return createToken(readFloat32(data, pos + 1), 5, options);
  }
  function decodeFloat64(data, pos, _minor, options) {
    return createToken(readFloat64(data, pos + 1), 9, options);
  }
  function encodeFloat(buf2, token, options) {
    const float = token.value;
    if (float === false) {
      buf2.push([Type.float.majorEncoded | MINOR_FALSE]);
    } else if (float === true) {
      buf2.push([Type.float.majorEncoded | MINOR_TRUE]);
    } else if (float === null) {
      buf2.push([Type.float.majorEncoded | MINOR_NULL]);
    } else if (float === void 0) {
      buf2.push([Type.float.majorEncoded | MINOR_UNDEFINED]);
    } else {
      let decoded;
      let success = false;
      if (!options || options.float64 !== true) {
        encodeFloat16(float);
        decoded = readFloat16(ui8a, 1);
        if (float === decoded || Number.isNaN(float)) {
          ui8a[0] = 249;
          buf2.push(ui8a.slice(0, 3));
          success = true;
        } else {
          encodeFloat32(float);
          decoded = readFloat32(ui8a, 1);
          if (float === decoded) {
            ui8a[0] = 250;
            buf2.push(ui8a.slice(0, 5));
            success = true;
          }
        }
      }
      if (!success) {
        encodeFloat64(float);
        decoded = readFloat64(ui8a, 1);
        ui8a[0] = 251;
        buf2.push(ui8a.slice(0, 9));
      }
    }
  }
  encodeFloat.encodedSize = function encodedSize8(token, options) {
    const float = token.value;
    if (float === false || float === true || float === null || float === void 0) {
      return 1;
    }
    if (!options || options.float64 !== true) {
      encodeFloat16(float);
      let decoded = readFloat16(ui8a, 1);
      if (float === decoded || Number.isNaN(float)) {
        return 3;
      }
      encodeFloat32(float);
      decoded = readFloat32(ui8a, 1);
      if (float === decoded) {
        return 5;
      }
    }
    return 9;
  };
  var buffer = new ArrayBuffer(9);
  var dataView2 = new DataView(buffer, 1);
  var ui8a = new Uint8Array(buffer, 0);
  function encodeFloat16(inp) {
    if (inp === Infinity) {
      dataView2.setUint16(0, 31744, false);
    } else if (inp === -Infinity) {
      dataView2.setUint16(0, 64512, false);
    } else if (Number.isNaN(inp)) {
      dataView2.setUint16(0, 32256, false);
    } else {
      dataView2.setFloat32(0, inp);
      const valu32 = dataView2.getUint32(0);
      const exponent = (valu32 & 2139095040) >> 23;
      const mantissa = valu32 & 8388607;
      if (exponent === 255) {
        dataView2.setUint16(0, 31744, false);
      } else if (exponent === 0) {
        dataView2.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);
      } else {
        const logicalExponent = exponent - 127;
        if (logicalExponent < -24) {
          dataView2.setUint16(0, 0);
        } else if (logicalExponent < -14) {
          dataView2.setUint16(0, (valu32 & 2147483648) >> 16 | /* sign bit */
          1 << 24 + logicalExponent, false);
        } else {
          dataView2.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
        }
      }
    }
  }
  function readFloat16(ui8a2, pos) {
    if (ui8a2.length - pos < 2) {
      throw new Error(`${decodeErrPrefix} not enough data for float16`);
    }
    const half = (ui8a2[pos] << 8) + ui8a2[pos + 1];
    if (half === 31744) {
      return Infinity;
    }
    if (half === 64512) {
      return -Infinity;
    }
    if (half === 32256) {
      return NaN;
    }
    const exp = half >> 10 & 31;
    const mant = half & 1023;
    let val;
    if (exp === 0) {
      val = mant * __pow(2, -24);
    } else if (exp !== 31) {
      val = (mant + 1024) * __pow(2, exp - 25);
    } else {
      val = mant === 0 ? Infinity : NaN;
    }
    return half & 32768 ? -val : val;
  }
  function encodeFloat32(inp) {
    dataView2.setFloat32(0, inp, false);
  }
  function readFloat32(ui8a2, pos) {
    if (ui8a2.length - pos < 4) {
      throw new Error(`${decodeErrPrefix} not enough data for float32`);
    }
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 4).getFloat32(0, false);
  }
  function encodeFloat64(inp) {
    dataView2.setFloat64(0, inp, false);
  }
  function readFloat64(ui8a2, pos) {
    if (ui8a2.length - pos < 8) {
      throw new Error(`${decodeErrPrefix} not enough data for float64`);
    }
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 8).getFloat64(0, false);
  }
  encodeFloat.compareTokens = encodeUint.compareTokens;

  // node_modules/cborg/lib/jump.js
  function invalidMinor(data, pos, minor) {
    throw new Error(`${decodeErrPrefix} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);
  }
  function errorer(msg) {
    return () => {
      throw new Error(`${decodeErrPrefix} ${msg}`);
    };
  }
  var jump = [];
  for (let i = 0; i <= 23; i++) {
    jump[i] = invalidMinor;
  }
  jump[24] = decodeUint8;
  jump[25] = decodeUint16;
  jump[26] = decodeUint32;
  jump[27] = decodeUint64;
  jump[28] = invalidMinor;
  jump[29] = invalidMinor;
  jump[30] = invalidMinor;
  jump[31] = invalidMinor;
  for (let i = 32; i <= 55; i++) {
    jump[i] = invalidMinor;
  }
  jump[56] = decodeNegint8;
  jump[57] = decodeNegint16;
  jump[58] = decodeNegint32;
  jump[59] = decodeNegint64;
  jump[60] = invalidMinor;
  jump[61] = invalidMinor;
  jump[62] = invalidMinor;
  jump[63] = invalidMinor;
  for (let i = 64; i <= 87; i++) {
    jump[i] = decodeBytesCompact;
  }
  jump[88] = decodeBytes8;
  jump[89] = decodeBytes16;
  jump[90] = decodeBytes32;
  jump[91] = decodeBytes64;
  jump[92] = invalidMinor;
  jump[93] = invalidMinor;
  jump[94] = invalidMinor;
  jump[95] = errorer("indefinite length bytes/strings are not supported");
  for (let i = 96; i <= 119; i++) {
    jump[i] = decodeStringCompact;
  }
  jump[120] = decodeString8;
  jump[121] = decodeString16;
  jump[122] = decodeString32;
  jump[123] = decodeString64;
  jump[124] = invalidMinor;
  jump[125] = invalidMinor;
  jump[126] = invalidMinor;
  jump[127] = errorer("indefinite length bytes/strings are not supported");
  for (let i = 128; i <= 151; i++) {
    jump[i] = decodeArrayCompact;
  }
  jump[152] = decodeArray8;
  jump[153] = decodeArray16;
  jump[154] = decodeArray32;
  jump[155] = decodeArray64;
  jump[156] = invalidMinor;
  jump[157] = invalidMinor;
  jump[158] = invalidMinor;
  jump[159] = decodeArrayIndefinite;
  for (let i = 160; i <= 183; i++) {
    jump[i] = decodeMapCompact;
  }
  jump[184] = decodeMap8;
  jump[185] = decodeMap16;
  jump[186] = decodeMap32;
  jump[187] = decodeMap64;
  jump[188] = invalidMinor;
  jump[189] = invalidMinor;
  jump[190] = invalidMinor;
  jump[191] = decodeMapIndefinite;
  for (let i = 192; i <= 215; i++) {
    jump[i] = decodeTagCompact;
  }
  jump[216] = decodeTag8;
  jump[217] = decodeTag16;
  jump[218] = decodeTag32;
  jump[219] = decodeTag64;
  jump[220] = invalidMinor;
  jump[221] = invalidMinor;
  jump[222] = invalidMinor;
  jump[223] = invalidMinor;
  for (let i = 224; i <= 243; i++) {
    jump[i] = errorer("simple values are not supported");
  }
  jump[244] = invalidMinor;
  jump[245] = invalidMinor;
  jump[246] = invalidMinor;
  jump[247] = decodeUndefined;
  jump[248] = errorer("simple values are not supported");
  jump[249] = decodeFloat16;
  jump[250] = decodeFloat32;
  jump[251] = decodeFloat64;
  jump[252] = invalidMinor;
  jump[253] = invalidMinor;
  jump[254] = invalidMinor;
  jump[255] = decodeBreak;
  var quick = [];
  for (let i = 0; i < 24; i++) {
    quick[i] = new Token(Type.uint, i, 1);
  }
  for (let i = -1; i >= -24; i--) {
    quick[31 - i] = new Token(Type.negint, i, 1);
  }
  quick[64] = new Token(Type.bytes, new Uint8Array(0), 1);
  quick[96] = new Token(Type.string, "", 1);
  quick[128] = new Token(Type.array, 0, 1);
  quick[160] = new Token(Type.map, 0, 1);
  quick[244] = new Token(Type.false, false, 1);
  quick[245] = new Token(Type.true, true, 1);
  quick[246] = new Token(Type.null, null, 1);

  // node_modules/cborg/lib/encode.js
  function makeCborEncoders() {
    const encoders = [];
    encoders[Type.uint.major] = encodeUint;
    encoders[Type.negint.major] = encodeNegint;
    encoders[Type.bytes.major] = encodeBytes;
    encoders[Type.string.major] = encodeString;
    encoders[Type.array.major] = encodeArray;
    encoders[Type.map.major] = encodeMap;
    encoders[Type.tag.major] = encodeTag;
    encoders[Type.float.major] = encodeFloat;
    return encoders;
  }
  var cborEncoders = makeCborEncoders();
  var buf = new Bl();
  var Ref = class _Ref {
    /**
     * @param {object|any[]} obj
     * @param {Reference|undefined} parent
     */
    constructor(obj, parent) {
      this.obj = obj;
      this.parent = parent;
    }
    /**
     * @param {object|any[]} obj
     * @returns {boolean}
     */
    includes(obj) {
      let p = this;
      do {
        if (p.obj === obj) {
          return true;
        }
      } while (p = p.parent);
      return false;
    }
    /**
     * @param {Reference|undefined} stack
     * @param {object|any[]} obj
     * @returns {Reference}
     */
    static createCheck(stack, obj) {
      if (stack && stack.includes(obj)) {
        throw new Error(`${encodeErrPrefix} object contains circular references`);
      }
      return new _Ref(obj, stack);
    }
  };
  var simpleTokens = {
    null: new Token(Type.null, null),
    undefined: new Token(Type.undefined, void 0),
    true: new Token(Type.true, true),
    false: new Token(Type.false, false),
    emptyArray: new Token(Type.array, 0),
    emptyMap: new Token(Type.map, 0)
  };
  var typeEncoders = {
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    number(obj, _typ, _options, _refStack) {
      if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
        return new Token(Type.float, obj);
      } else if (obj >= 0) {
        return new Token(Type.uint, obj);
      } else {
        return new Token(Type.negint, obj);
      }
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    bigint(obj, _typ, _options, _refStack) {
      if (obj >= BigInt(0)) {
        return new Token(Type.uint, obj);
      } else {
        return new Token(Type.negint, obj);
      }
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    Uint8Array(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, obj);
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    string(obj, _typ, _options, _refStack) {
      return new Token(Type.string, obj);
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    boolean(obj, _typ, _options, _refStack) {
      return obj ? simpleTokens.true : simpleTokens.false;
    },
    /**
     * @param {any} _obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    null(_obj, _typ, _options, _refStack) {
      return simpleTokens.null;
    },
    /**
     * @param {any} _obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    undefined(_obj, _typ, _options, _refStack) {
      return simpleTokens.undefined;
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    ArrayBuffer(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, new Uint8Array(obj));
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    DataView(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} options
     * @param {Reference} [refStack]
     * @returns {TokenOrNestedTokens}
     */
    Array(obj, _typ, options, refStack) {
      if (!obj.length) {
        if (options.addBreakTokens === true) {
          return [simpleTokens.emptyArray, new Token(Type.break)];
        }
        return simpleTokens.emptyArray;
      }
      refStack = Ref.createCheck(refStack, obj);
      const entries = [];
      let i = 0;
      for (const e of obj) {
        entries[i++] = objectToTokens(e, options, refStack);
      }
      if (options.addBreakTokens) {
        return [new Token(Type.array, obj.length), entries, new Token(Type.break)];
      }
      return [new Token(Type.array, obj.length), entries];
    },
    /**
     * @param {any} obj
     * @param {string} typ
     * @param {EncodeOptions} options
     * @param {Reference} [refStack]
     * @returns {TokenOrNestedTokens}
     */
    Object(obj, typ, options, refStack) {
      const isMap = typ !== "Object";
      const keys = isMap ? obj.keys() : Object.keys(obj);
      const length5 = isMap ? obj.size : keys.length;
      if (!length5) {
        if (options.addBreakTokens === true) {
          return [simpleTokens.emptyMap, new Token(Type.break)];
        }
        return simpleTokens.emptyMap;
      }
      refStack = Ref.createCheck(refStack, obj);
      const entries = [];
      let i = 0;
      for (const key of keys) {
        entries[i++] = [
          objectToTokens(key, options, refStack),
          objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)
        ];
      }
      sortMapEntries(entries, options);
      if (options.addBreakTokens) {
        return [new Token(Type.map, length5), entries, new Token(Type.break)];
      }
      return [new Token(Type.map, length5), entries];
    }
  };
  typeEncoders.Map = typeEncoders.Object;
  typeEncoders.Buffer = typeEncoders.Uint8Array;
  for (const typ of "Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64".split(" ")) {
    typeEncoders[`${typ}Array`] = typeEncoders.DataView;
  }
  function objectToTokens(obj, options = {}, refStack) {
    const typ = is(obj);
    const customTypeEncoder = options && options.typeEncoders && /** @type {OptionalTypeEncoder} */
    options.typeEncoders[typ] || typeEncoders[typ];
    if (typeof customTypeEncoder === "function") {
      const tokens = customTypeEncoder(obj, typ, options, refStack);
      if (tokens != null) {
        return tokens;
      }
    }
    const typeEncoder = typeEncoders[typ];
    if (!typeEncoder) {
      throw new Error(`${encodeErrPrefix} unsupported type: ${typ}`);
    }
    return typeEncoder(obj, typ, options, refStack);
  }
  function sortMapEntries(entries, options) {
    if (options.mapSorter) {
      entries.sort(options.mapSorter);
    }
  }

  // node_modules/cborg/lib/decode.js
  var defaultDecodeOptions = {
    strict: false,
    allowIndefinite: true,
    allowUndefined: true,
    allowBigInt: true
  };
  var Tokeniser = class {
    /**
     * @param {Uint8Array} data
     * @param {DecodeOptions} options
     */
    constructor(data, options = {}) {
      this._pos = 0;
      this.data = data;
      this.options = options;
    }
    pos() {
      return this._pos;
    }
    done() {
      return this._pos >= this.data.length;
    }
    next() {
      const byt = this.data[this._pos];
      let token = quick[byt];
      if (token === void 0) {
        const decoder2 = jump[byt];
        if (!decoder2) {
          throw new Error(`${decodeErrPrefix} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, "0")})`);
        }
        const minor = byt & 31;
        token = decoder2(this.data, this._pos, minor, this.options);
      }
      this._pos += token.encodedLength;
      return token;
    }
  };
  var DONE = Symbol.for("DONE");
  var BREAK = Symbol.for("BREAK");
  function tokenToArray(token, tokeniser, options) {
    const arr = [];
    for (let i = 0; i < token.value; i++) {
      const value = tokensToObject(tokeniser, options);
      if (value === BREAK) {
        if (token.value === Infinity) {
          break;
        }
        throw new Error(`${decodeErrPrefix} got unexpected break to lengthed array`);
      }
      if (value === DONE) {
        throw new Error(`${decodeErrPrefix} found array but not enough entries (got ${i}, expected ${token.value})`);
      }
      arr[i] = value;
    }
    return arr;
  }
  function tokenToMap(token, tokeniser, options) {
    const useMaps = options.useMaps === true;
    const obj = useMaps ? void 0 : {};
    const m = useMaps ? /* @__PURE__ */ new Map() : void 0;
    for (let i = 0; i < token.value; i++) {
      const key = tokensToObject(tokeniser, options);
      if (key === BREAK) {
        if (token.value === Infinity) {
          break;
        }
        throw new Error(`${decodeErrPrefix} got unexpected break to lengthed map`);
      }
      if (key === DONE) {
        throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no key], expected ${token.value})`);
      }
      if (useMaps !== true && typeof key !== "string") {
        throw new Error(`${decodeErrPrefix} non-string keys not supported (got ${typeof key})`);
      }
      if (options.rejectDuplicateMapKeys === true) {
        if (useMaps && m.has(key) || !useMaps && key in obj) {
          throw new Error(`${decodeErrPrefix} found repeat map key "${key}"`);
        }
      }
      const value = tokensToObject(tokeniser, options);
      if (value === DONE) {
        throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no value], expected ${token.value})`);
      }
      if (useMaps) {
        m.set(key, value);
      } else {
        obj[key] = value;
      }
    }
    return useMaps ? m : obj;
  }
  function tokensToObject(tokeniser, options) {
    if (tokeniser.done()) {
      return DONE;
    }
    const token = tokeniser.next();
    if (token.type === Type.break) {
      return BREAK;
    }
    if (token.type.terminal) {
      return token.value;
    }
    if (token.type === Type.array) {
      return tokenToArray(token, tokeniser, options);
    }
    if (token.type === Type.map) {
      return tokenToMap(token, tokeniser, options);
    }
    if (token.type === Type.tag) {
      if (options.tags && typeof options.tags[token.value] === "function") {
        const tagged = tokensToObject(tokeniser, options);
        return options.tags[token.value](tagged);
      }
      throw new Error(`${decodeErrPrefix} tag not supported (${token.value})`);
    }
    throw new Error("unsupported");
  }
  function decodeFirst(data, options) {
    if (!(data instanceof Uint8Array)) {
      throw new Error(`${decodeErrPrefix} data to decode must be a Uint8Array`);
    }
    options = Object.assign({}, defaultDecodeOptions, options);
    const tokeniser = options.tokenizer || new Tokeniser(data, options);
    const decoded = tokensToObject(tokeniser, options);
    if (decoded === DONE) {
      throw new Error(`${decodeErrPrefix} did not find any content to decode`);
    }
    if (decoded === BREAK) {
      throw new Error(`${decodeErrPrefix} got unexpected break`);
    }
    return [decoded, data.subarray(tokeniser.pos())];
  }
  function decode19(data, options) {
    const [decoded, remainder] = decodeFirst(data, options);
    if (remainder.length > 0) {
      throw new Error(`${decodeErrPrefix} too many terminals, data makes no sense`);
    }
    return decoded;
  }

  // node_modules/@ipld/dag-cbor/src/index.js
  var CID_CBOR_TAG = 42;
  function toByteView(buf2) {
    if (buf2 instanceof ArrayBuffer) {
      return new Uint8Array(buf2, 0, buf2.byteLength);
    }
    return buf2;
  }
  function cidEncoder(obj) {
    if (obj.asCID !== obj && obj["/"] !== obj.bytes) {
      return null;
    }
    const cid = CID4.asCID(obj);
    if (!cid) {
      return null;
    }
    const bytes = new Uint8Array(cid.bytes.byteLength + 1);
    bytes.set(cid.bytes, 1);
    return [
      new Token(Type.tag, CID_CBOR_TAG),
      new Token(Type.bytes, bytes)
    ];
  }
  function undefinedEncoder() {
    throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded");
  }
  function numberEncoder(num) {
    if (Number.isNaN(num)) {
      throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");
    }
    if (num === Infinity || num === -Infinity) {
      throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");
    }
    return null;
  }
  var _encodeOptions = {
    float64: true,
    typeEncoders: {
      Object: cidEncoder,
      undefined: undefinedEncoder,
      number: numberEncoder
    }
  };
  var encodeOptions = __spreadProps(__spreadValues({}, _encodeOptions), {
    typeEncoders: __spreadValues({}, _encodeOptions.typeEncoders)
  });
  function cidDecoder(bytes) {
    if (bytes[0] !== 0) {
      throw new Error("Invalid CID for CBOR tag 42; expected leading 0x00");
    }
    return CID4.decode(bytes.subarray(1));
  }
  var _decodeOptions = {
    allowIndefinite: false,
    coerceUndefinedToNull: true,
    allowNaN: false,
    allowInfinity: false,
    allowBigInt: true,
    // this will lead to BigInt for ints outside of
    // safe-integer range, which may surprise users
    strict: true,
    useMaps: false,
    rejectDuplicateMapKeys: true,
    /** @type {import('cborg').TagDecoder[]} */
    tags: []
  };
  _decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
  var decodeOptions = __spreadProps(__spreadValues({}, _decodeOptions), {
    tags: _decodeOptions.tags.slice()
  });
  var decode20 = (data) => decode19(toByteView(data), _decodeOptions);

  // node_modules/@ipld/car/src/decoder-common.js
  var import_varint5 = __toESM(require_varint(), 1);
  var CIDV0_BYTES = {
    SHA2_256: 18,
    LENGTH: 32,
    DAG_PB: 112
  };
  var V2_HEADER_LENGTH = (
    /* characteristics */
    16 + 8 + 8 + 8
  );
  function decodeVarint(bytes, seeker) {
    if (!bytes.length) {
      throw new Error("Unexpected end of data");
    }
    const i = import_varint5.default.decode(bytes);
    seeker.seek(
      /** @type {number} */
      import_varint5.default.decode.bytes
    );
    return i;
  }
  function decodeV2Header(bytes) {
    const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    let offset = 0;
    const header = {
      version: 2,
      /** @type {[bigint, bigint]} */
      characteristics: [
        dv.getBigUint64(offset, true),
        dv.getBigUint64(offset += 8, true)
      ],
      dataOffset: Number(dv.getBigUint64(offset += 8, true)),
      dataSize: Number(dv.getBigUint64(offset += 8, true)),
      indexOffset: Number(dv.getBigUint64(offset += 8, true))
    };
    return header;
  }
  function getMultihashLength(bytes) {
    import_varint5.default.decode(bytes);
    const codeLength = (
      /** @type {number} */
      import_varint5.default.decode.bytes
    );
    const length5 = import_varint5.default.decode(bytes.subarray(import_varint5.default.decode.bytes));
    const lengthLength = (
      /** @type {number} */
      import_varint5.default.decode.bytes
    );
    const mhLength = codeLength + lengthLength + length5;
    return mhLength;
  }

  // node_modules/@ipld/car/src/header-validator.js
  var Kinds = {
    Null: (
      /** @returns {undefined|null} */
      (obj) => obj === null ? obj : void 0
    ),
    Int: (
      /** @returns {undefined|number} */
      (obj) => Number.isInteger(obj) ? obj : void 0
    ),
    Float: (
      /** @returns {undefined|number} */
      (obj) => typeof obj === "number" && Number.isFinite(obj) ? obj : void 0
    ),
    String: (
      /** @returns {undefined|string} */
      (obj) => typeof obj === "string" ? obj : void 0
    ),
    Bool: (
      /** @returns {undefined|boolean} */
      (obj) => typeof obj === "boolean" ? obj : void 0
    ),
    Bytes: (
      /** @returns {undefined|Uint8Array} */
      (obj) => obj instanceof Uint8Array ? obj : void 0
    ),
    Link: (
      /** @returns {undefined|object} */
      (obj) => obj !== null && typeof obj === "object" && obj.asCID === obj ? obj : void 0
    ),
    List: (
      /** @returns {undefined|Array<any>} */
      (obj) => Array.isArray(obj) ? obj : void 0
    ),
    Map: (
      /** @returns {undefined|object} */
      (obj) => obj !== null && typeof obj === "object" && obj.asCID !== obj && !Array.isArray(obj) && !(obj instanceof Uint8Array) ? obj : void 0
    )
  };
  var Types = {
    "CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)": Kinds.Link,
    "CarV1HeaderOrV2Pragma > roots (anon)": (
      /** @returns {undefined|any} */
      (obj) => {
        if (Kinds.List(obj) === void 0) {
          return void 0;
        }
        for (let i = 0; i < obj.length; i++) {
          let v = obj[i];
          v = Types["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v);
          if (v === void 0) {
            return void 0;
          }
          if (v !== obj[i]) {
            const ret = obj.slice(0, i);
            for (let j = i; j < obj.length; j++) {
              let v2 = obj[j];
              v2 = Types["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v2);
              if (v2 === void 0) {
                return void 0;
              }
              ret.push(v2);
            }
            return ret;
          }
        }
        return obj;
      }
    ),
    Int: Kinds.Int,
    CarV1HeaderOrV2Pragma: (
      /** @returns {undefined|any} */
      (obj) => {
        if (Kinds.Map(obj) === void 0) {
          return void 0;
        }
        const entries = Object.entries(obj);
        let ret = obj;
        let requiredCount = 1;
        for (let i = 0; i < entries.length; i++) {
          const [key, value] = entries[i];
          switch (key) {
            case "roots":
              {
                const v = Types["CarV1HeaderOrV2Pragma > roots (anon)"](obj[key]);
                if (v === void 0) {
                  return void 0;
                }
                if (v !== value || ret !== obj) {
                  if (ret === obj) {
                    ret = {};
                    for (let j = 0; j < i; j++) {
                      ret[entries[j][0]] = entries[j][1];
                    }
                  }
                  ret.roots = v;
                }
              }
              break;
            case "version":
              {
                requiredCount--;
                const v = Types.Int(obj[key]);
                if (v === void 0) {
                  return void 0;
                }
                if (v !== value || ret !== obj) {
                  if (ret === obj) {
                    ret = {};
                    for (let j = 0; j < i; j++) {
                      ret[entries[j][0]] = entries[j][1];
                    }
                  }
                  ret.version = v;
                }
              }
              break;
            default:
              return void 0;
          }
        }
        if (requiredCount > 0) {
          return void 0;
        }
        return ret;
      }
    )
  };
  var Reprs = {
    "CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)": Kinds.Link,
    "CarV1HeaderOrV2Pragma > roots (anon)": (
      /** @returns {undefined|any} */
      (obj) => {
        if (Kinds.List(obj) === void 0) {
          return void 0;
        }
        for (let i = 0; i < obj.length; i++) {
          let v = obj[i];
          v = Reprs["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v);
          if (v === void 0) {
            return void 0;
          }
          if (v !== obj[i]) {
            const ret = obj.slice(0, i);
            for (let j = i; j < obj.length; j++) {
              let v2 = obj[j];
              v2 = Reprs["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v2);
              if (v2 === void 0) {
                return void 0;
              }
              ret.push(v2);
            }
            return ret;
          }
        }
        return obj;
      }
    ),
    Int: Kinds.Int,
    CarV1HeaderOrV2Pragma: (
      /** @returns {undefined|any} */
      (obj) => {
        if (Kinds.Map(obj) === void 0) {
          return void 0;
        }
        const entries = Object.entries(obj);
        let ret = obj;
        let requiredCount = 1;
        for (let i = 0; i < entries.length; i++) {
          const [key, value] = entries[i];
          switch (key) {
            case "roots":
              {
                const v = Reprs["CarV1HeaderOrV2Pragma > roots (anon)"](value);
                if (v === void 0) {
                  return void 0;
                }
                if (v !== value || ret !== obj) {
                  if (ret === obj) {
                    ret = {};
                    for (let j = 0; j < i; j++) {
                      ret[entries[j][0]] = entries[j][1];
                    }
                  }
                  ret.roots = v;
                }
              }
              break;
            case "version":
              {
                requiredCount--;
                const v = Reprs.Int(value);
                if (v === void 0) {
                  return void 0;
                }
                if (v !== value || ret !== obj) {
                  if (ret === obj) {
                    ret = {};
                    for (let j = 0; j < i; j++) {
                      ret[entries[j][0]] = entries[j][1];
                    }
                  }
                  ret.version = v;
                }
              }
              break;
            default:
              return void 0;
          }
        }
        if (requiredCount > 0) {
          return void 0;
        }
        return ret;
      }
    )
  };
  var CarV1HeaderOrV2Pragma = {
    toTyped: Types.CarV1HeaderOrV2Pragma,
    toRepresentation: Reprs.CarV1HeaderOrV2Pragma
  };

  // node_modules/@ipld/car/src/decoder.js
  function readHeader(reader, strictVersion) {
    return __async(this, null, function* () {
      const length5 = decodeVarint(yield reader.upTo(8), reader);
      if (length5 === 0) {
        throw new Error("Invalid CAR header (zero length)");
      }
      const header = yield reader.exactly(length5, true);
      const block = decode20(header);
      if (CarV1HeaderOrV2Pragma.toTyped(block) === void 0) {
        throw new Error("Invalid CAR header format");
      }
      if (block.version !== 1 && block.version !== 2 || strictVersion !== void 0 && block.version !== strictVersion) {
        throw new Error(`Invalid CAR version: ${block.version}${strictVersion !== void 0 ? ` (expected ${strictVersion})` : ""}`);
      }
      if (block.version === 1) {
        if (!Array.isArray(block.roots)) {
          throw new Error("Invalid CAR header format");
        }
        return block;
      }
      if (block.roots !== void 0) {
        throw new Error("Invalid CAR header format");
      }
      const v2Header = decodeV2Header(yield reader.exactly(V2_HEADER_LENGTH, true));
      reader.seek(v2Header.dataOffset - reader.pos);
      const v1Header = yield readHeader(reader, 1);
      return Object.assign(v1Header, v2Header);
    });
  }
  function readCid(reader) {
    return __async(this, null, function* () {
      const first = yield reader.exactly(2, false);
      if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {
        const bytes2 = yield reader.exactly(34, true);
        const multihash2 = decode18(bytes2);
        return CID4.create(0, CIDV0_BYTES.DAG_PB, multihash2);
      }
      const version5 = decodeVarint(yield reader.upTo(8), reader);
      if (version5 !== 1) {
        throw new Error(`Unexpected CID version (${version5})`);
      }
      const codec = decodeVarint(yield reader.upTo(8), reader);
      const bytes = yield reader.exactly(getMultihashLength(yield reader.upTo(8)), true);
      const multihash = decode18(bytes);
      return CID4.create(version5, codec, multihash);
    });
  }
  function readBlockHead(reader) {
    return __async(this, null, function* () {
      const start = reader.pos;
      let length5 = decodeVarint(yield reader.upTo(8), reader);
      if (length5 === 0) {
        throw new Error("Invalid CAR section (zero length)");
      }
      length5 += reader.pos - start;
      const cid = yield readCid(reader);
      const blockLength = length5 - Number(reader.pos - start);
      return { cid, length: length5, blockLength };
    });
  }
  function readBlock(reader) {
    return __async(this, null, function* () {
      const { cid, blockLength } = yield readBlockHead(reader);
      const bytes = yield reader.exactly(blockLength, true);
      return { bytes, cid };
    });
  }
  function readBlockIndex(reader) {
    return __async(this, null, function* () {
      const offset = reader.pos;
      const { cid, length: length5, blockLength } = yield readBlockHead(reader);
      const index = { cid, length: length5, blockLength, offset, blockOffset: reader.pos };
      reader.seek(index.blockLength);
      return index;
    });
  }
  function createDecoder(reader) {
    const headerPromise = (() => __async(this, null, function* () {
      const header = yield readHeader(reader);
      if (header.version === 2) {
        const v1length = reader.pos - header.dataOffset;
        reader = limitReader(reader, header.dataSize - v1length);
      }
      return header;
    }))();
    return {
      header: () => headerPromise,
      blocks() {
        return __asyncGenerator(this, null, function* () {
          yield new __await(headerPromise);
          while ((yield new __await(reader.upTo(8))).length > 0) {
            yield yield new __await(readBlock(reader));
          }
        });
      },
      blocksIndex() {
        return __asyncGenerator(this, null, function* () {
          yield new __await(headerPromise);
          while ((yield new __await(reader.upTo(8))).length > 0) {
            yield yield new __await(readBlockIndex(reader));
          }
        });
      }
    };
  }
  function bytesReader(bytes) {
    let pos = 0;
    return {
      upTo(length5) {
        return __async(this, null, function* () {
          const out = bytes.subarray(pos, pos + Math.min(length5, bytes.length - pos));
          return out;
        });
      },
      exactly(length5, seek = false) {
        return __async(this, null, function* () {
          if (length5 > bytes.length - pos) {
            throw new Error("Unexpected end of data");
          }
          const out = bytes.subarray(pos, pos + length5);
          if (seek) {
            pos += length5;
          }
          return out;
        });
      },
      seek(length5) {
        pos += length5;
      },
      get pos() {
        return pos;
      }
    };
  }
  function chunkReader(readChunk) {
    let pos = 0;
    let have = 0;
    let offset = 0;
    let currentChunk = new Uint8Array(0);
    const read6 = (length5) => __async(this, null, function* () {
      have = currentChunk.length - offset;
      const bufa = [currentChunk.subarray(offset)];
      while (have < length5) {
        const chunk = yield readChunk();
        if (chunk == null) {
          break;
        }
        if (have < 0) {
          if (chunk.length > have) {
            bufa.push(chunk.subarray(-have));
          }
        } else {
          bufa.push(chunk);
        }
        have += chunk.length;
      }
      currentChunk = new Uint8Array(bufa.reduce((p, c) => p + c.length, 0));
      let off = 0;
      for (const b of bufa) {
        currentChunk.set(b, off);
        off += b.length;
      }
      offset = 0;
    });
    return {
      upTo(length5) {
        return __async(this, null, function* () {
          if (currentChunk.length - offset < length5) {
            yield read6(length5);
          }
          return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length5));
        });
      },
      exactly(length5, seek = false) {
        return __async(this, null, function* () {
          if (currentChunk.length - offset < length5) {
            yield read6(length5);
          }
          if (currentChunk.length - offset < length5) {
            throw new Error("Unexpected end of data");
          }
          const out = currentChunk.subarray(offset, offset + length5);
          if (seek) {
            pos += length5;
            offset += length5;
          }
          return out;
        });
      },
      seek(length5) {
        pos += length5;
        offset += length5;
      },
      get pos() {
        return pos;
      }
    };
  }
  function asyncIterableReader(asyncIterable) {
    const iterator = asyncIterable[Symbol.asyncIterator]();
    function readChunk() {
      return __async(this, null, function* () {
        const next = yield iterator.next();
        if (next.done) {
          return null;
        }
        return next.value;
      });
    }
    return chunkReader(readChunk);
  }
  function limitReader(reader, byteLimit) {
    let bytesRead = 0;
    return {
      upTo(length5) {
        return __async(this, null, function* () {
          let bytes = yield reader.upTo(length5);
          if (bytes.length + bytesRead > byteLimit) {
            bytes = bytes.subarray(0, byteLimit - bytesRead);
          }
          return bytes;
        });
      },
      exactly(length5, seek = false) {
        return __async(this, null, function* () {
          const bytes = yield reader.exactly(length5, seek);
          if (bytes.length + bytesRead > byteLimit) {
            throw new Error("Unexpected end of data");
          }
          if (seek) {
            bytesRead += length5;
          }
          return bytes;
        });
      },
      seek(length5) {
        bytesRead += length5;
        reader.seek(length5);
      },
      get pos() {
        return reader.pos;
      }
    };
  }

  // node_modules/@ipld/car/src/reader-browser.js
  var CarReader = class {
    /**
     * @constructs CarReader
     * @param {CarHeader|CarV2Header} header
     * @param {Block[]} blocks
     */
    constructor(header, blocks) {
      this._header = header;
      this._blocks = blocks;
      this._keys = blocks.map((b) => b.cid.toString());
    }
    /**
     * @property
     * @memberof CarReader
     * @instance
     */
    get version() {
      return this._header.version;
    }
    /**
     * Get the list of roots defined by the CAR referenced by this reader. May be
     * zero or more `CID`s.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @returns {Promise<CID[]>}
     */
    getRoots() {
      return __async(this, null, function* () {
        return this._header.roots;
      });
    }
    /**
     * Check whether a given `CID` exists within the CAR referenced by this
     * reader.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @param {CID} key
     * @returns {Promise<boolean>}
     */
    has(key) {
      return __async(this, null, function* () {
        return this._keys.indexOf(key.toString()) > -1;
      });
    }
    /**
     * Fetch a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) from the CAR
     * referenced by this reader matching the provided `CID`. In the case where
     * the provided `CID` doesn't exist within the CAR, `undefined` will be
     * returned.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @param {CID} key
     * @returns {Promise<Block | undefined>}
     */
    get(key) {
      return __async(this, null, function* () {
        const index = this._keys.indexOf(key.toString());
        return index > -1 ? this._blocks[index] : void 0;
      });
    }
    /**
     * Returns a `BlockIterator` (`AsyncIterable<Block>`) that iterates over all
     * of the `Block`s (`{ cid:CID, bytes:Uint8Array }` pairs) contained within
     * the CAR referenced by this reader.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @generator
     * @returns {AsyncGenerator<Block>}
     */
    blocks() {
      return __asyncGenerator(this, null, function* () {
        for (const block of this._blocks) {
          yield block;
        }
      });
    }
    /**
     * Returns a `CIDIterator` (`AsyncIterable<CID>`) that iterates over all of
     * the `CID`s contained within the CAR referenced by this reader.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @generator
     * @returns {AsyncGenerator<CID>}
     */
    cids() {
      return __asyncGenerator(this, null, function* () {
        for (const block of this._blocks) {
          yield block.cid;
        }
      });
    }
    /**
     * Instantiate a {@link CarReader} from a `Uint8Array` blob. This performs a
     * decode fully in memory and maintains the decoded state in memory for full
     * access to the data via the `CarReader` API.
     *
     * @async
     * @static
     * @memberof CarReader
     * @param {Uint8Array} bytes
     * @returns {Promise<CarReader>}
     */
    static fromBytes(bytes) {
      return __async(this, null, function* () {
        if (!(bytes instanceof Uint8Array)) {
          throw new TypeError("fromBytes() requires a Uint8Array");
        }
        return decodeReaderComplete(bytesReader(bytes));
      });
    }
    /**
     * Instantiate a {@link CarReader} from a `AsyncIterable<Uint8Array>`, such as
     * a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).
     * This performs a decode fully in memory and maintains the decoded state in
     * memory for full access to the data via the `CarReader` API.
     *
     * Care should be taken for large archives; this API may not be appropriate
     * where memory is a concern or the archive is potentially larger than the
     * amount of memory that the runtime can handle.
     *
     * @async
     * @static
     * @memberof CarReader
     * @param {AsyncIterable<Uint8Array>} asyncIterable
     * @returns {Promise<CarReader>}
     */
    static fromIterable(asyncIterable) {
      return __async(this, null, function* () {
        if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
          throw new TypeError("fromIterable() requires an async iterable");
        }
        return decodeReaderComplete(asyncIterableReader(asyncIterable));
      });
    }
  };
  function decodeReaderComplete(reader) {
    return __async(this, null, function* () {
      const decoder2 = createDecoder(reader);
      const header = yield decoder2.header();
      const blocks = [];
      try {
        for (var iter = __forAwait(decoder2.blocks()), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
          const block = temp.value;
          blocks.push(block);
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield temp.call(iter));
        } finally {
          if (error)
            throw error[0];
        }
      }
      return new CarReader(header, blocks);
    });
  }

  // lib/firehose.js
  var knownTypes = [
    "app.bsky.feed.like",
    "app.bsky.feed.post",
    "app.bsky.feed.repost",
    "app.bsky.feed.threadgate",
    "app.bsky.graph.follow",
    "app.bsky.graph.block",
    "app.bsky.graph.list",
    "app.bsky.graph.listitem",
    "app.bsky.actor.profile"
  ];
  var cbor_x_extended = false;
  function firehose() {
    return __asyncGenerator(this, null, function* () {
      ensureCborXExtended();
      const WebSocketImpl = typeof WebSocket === "function" ? WebSocket : (
        /** @type {typeof WebSocket} */
        __require("ws")
      );
      const wsAddress = "wss://bsky.network/xrpc/com.atproto.sync.subscribeRepos";
      const ws = new WebSocketImpl(wsAddress);
      ws.addEventListener("message", handleMessage);
      ws.addEventListener("error", handleError);
      ws.addEventListener("close", handleClose);
      let buf2 = createAwaitPromise();
      let closed = false;
      try {
        while (true) {
          yield new __await(buf2.promise);
          const blocks = buf2.blocks;
          buf2 = createAwaitPromise();
          if (closed) {
            if (blocks.length)
              yield blocks;
            break;
          }
          yield blocks;
        }
      } finally {
        if (!closed) {
          try {
            ws.close();
          } catch (error) {
          }
        }
      }
      function handleClose() {
        closed = true;
        buf2.resolve();
      }
      function handleMessage(event) {
        var _a2, _b;
        const receiveTimestamp = Date.now();
        if (typeof ((_a2 = event.data) == null ? void 0 : _a2.arrayBuffer) === "function")
          return event.data.arrayBuffer().then((arrayBuf) => convertMessageBuf(receiveTimestamp, arrayBuf));
        else if (typeof ((_b = event.data) == null ? void 0 : _b.byteLength) === "number")
          return convertMessageBuf(receiveTimestamp, event.data);
      }
      function convertMessageBuf(receiveTimestamp, messageBuf) {
        return __async(this, null, function* () {
          var _a2, _b;
          const entry = (
            /** @type {any[]} */
            decodeMultiple(new Uint8Array(messageBuf))
          );
          if (!entry || ((_a2 = entry[0]) == null ? void 0 : _a2.op) !== 1)
            return;
          const commit = entry[1];
          if (!commit.blocks)
            return;
          if (!((_b = commit.ops) == null ? void 0 : _b.length))
            return;
          const car = yield CarReader.fromBytes(commit.blocks);
          const blockEntry = {
            receiveTimestamp,
            since: commit.since,
            time: commit.time,
            messages: []
          };
          for (const op of commit.ops) {
            const block = op.cid && (yield car.get(
              /** @type {*} */
              op.cid
            ));
            if (!block)
              continue;
            const record = decode14(block.bytes);
            record.repo = commit.repo;
            record.cid = op.cid && String(op.cid);
            record.path = op.path;
            record.action = op.action;
            let unexpected = op.action !== "create" && op.action !== "update" && op.action !== "delete" || knownTypes.indexOf(record.$type) < 0;
            if (unexpected) {
              if (!blockEntry.unexpected)
                blockEntry.unexpected = [];
              blockEntry.unexpected.push(record);
            } else if (op.action === "delete") {
              if (!blockEntry.deletes)
                blockEntry.deletes = [];
              blockEntry.deletes.push(record);
            } else {
              blockEntry.messages.push(record);
            }
          }
          buf2.blocks.push(blockEntry);
          buf2.resolve();
        });
      }
      function handleError(error) {
        console.error(error);
        const errorText = error.message || "WebSocket error " + error;
        buf2.reject(new Error(errorText));
      }
    });
  }
  function createAwaitPromise() {
    const result = { blocks: [] };
    result.promise = new Promise((resolve, reject) => {
      result.resolve = resolve;
      result.reject = reject;
    });
    return (
      /** @type {*} */
      result
    );
  }
  function ensureCborXExtended() {
    if (cbor_x_extended)
      return;
    addExtension2({
      Class: CID4,
      tag: 42,
      encode: () => {
        throw new Error("cannot encode cids");
      },
      decode: (bytes) => {
        if (bytes[0] !== 0)
          throw new Error("invalid cid for cbor tag 42");
        return CID4.decode(bytes.subarray(1));
      }
    });
    cbor_x_extended = true;
  }

  // package.json
  var version4 = "0.1.11";

  // lib/firehose-short-dids.js
  function firehoseShortDIDs(filterShortDIDs) {
    return __asyncGenerator(this, null, function* () {
      var _a2;
      let shortDIDs = {};
      let addedAny = false;
      let lastHealth = Date.now();
      let errorCount = 0;
      while (true) {
        try {
          try {
            for (var iter = __forAwait(firehose()), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
              const block = temp.value;
              lastHealth = Date.now();
              if (!(block == null ? void 0 : block.length))
                continue;
              for (const entry of block) {
                if (!((_a2 = entry.messages) == null ? void 0 : _a2.length))
                  continue;
                for (const msg of entry.messages) {
                  collectShortDIDs(msg);
                }
              }
              if (addedAny) {
                const report = shortDIDs;
                shortDIDs = {};
                addedAny = false;
                yield report;
              }
            }
          } catch (temp) {
            error = [temp];
          } finally {
            try {
              more && (temp = iter.return) && (yield new __await(temp.call(iter)));
            } finally {
              if (error)
                throw error[0];
            }
          }
        } catch (error2) {
          errorCount++;
          const now = Date.now();
          let waitFor = Math.min(
            3e4,
            Math.max(300, (now - lastHealth) / 3)
          ) * (0.7 + Math.random() * 0.6);
          console.error("firehose error " + errorCount + ", retry in " + waitFor + "ms ", error2);
          yield { error: (
            /** @type {Error} */
            error2
          ), errorCount, waitUntil: now + waitFor };
          return new Promise((resolve) => setTimeout(resolve, waitFor));
        }
      }
      function collectShortDIDs(msg) {
        var _a3, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
        addShortDID(msg.repo);
        switch (msg.$type) {
          case "app.bsky.feed.like":
            addShortDID((_b = breakFeedUri((_a3 = msg.subject) == null ? void 0 : _a3.uri)) == null ? void 0 : _b.shortDID);
            return;
          case "app.bsky.feed.post":
            addShortDID((_e = breakFeedUri((_d = (_c = msg.reply) == null ? void 0 : _c.parent) == null ? void 0 : _d.uri)) == null ? void 0 : _e.shortDID);
            addShortDID((_h = breakFeedUri((_g = (_f = msg.reply) == null ? void 0 : _f.root) == null ? void 0 : _g.uri)) == null ? void 0 : _h.shortDID);
            if (((_i = msg.embed) == null ? void 0 : _i.$type) === "app.bsky.embed.record")
              addShortDID((_l = breakFeedUri(
                /** @type {*} */
                (_k = (_j = msg.embed) == null ? void 0 : _j.record) == null ? void 0 : _k.uri
              )) == null ? void 0 : _l.shortDID);
            return;
          case "app.bsky.feed.repost":
            addShortDID((_n = breakFeedUri((_m = msg.subject) == null ? void 0 : _m.uri)) == null ? void 0 : _n.shortDID);
            return;
          case "app.bsky.feed.threadgate":
            return;
          case "app.bsky.graph.follow":
            addShortDID(msg.subject);
            return;
          case "app.bsky.graph.block":
            addShortDID(msg.subject);
            return;
          case "app.bsky.graph.list":
            return;
          case "app.bsky.graph.listitem":
            addShortDID(msg.subject);
            return;
          case "app.bsky.actor.profile":
            return;
        }
      }
      function addShortDID(did, ratio) {
        if (!did)
          return;
        const shortDID = shortenDID(did);
        let increment = (typeof filterShortDIDs === "function" ? filterShortDIDs(did) : 1) * (ratio || 1);
        if (!increment)
          return;
        shortDIDs[shortDID] = (shortDIDs[shortDID] || 0) + increment;
        addedAny = true;
      }
    });
  }

  // src/api/akpa.js
  function streamBuffer(callback) {
    return __asyncGenerator(this, null, function* () {
      let finallyTrigger = () => {
      };
      let stop = false;
      let buffer2;
      let continueTrigger = () => {
      };
      let continuePromise = new Promise((resolve) => continueTrigger = resolve);
      let yieldPassedTrigger = () => {
      };
      let yieldPassedPromise = new Promise((resolve) => yieldPassedTrigger = resolve);
      let rejectError;
      const args = {
        yield: yieldFn,
        reject,
        complete,
        isEnded: false,
        finally: new Promise((resolve) => finallyTrigger = resolve)
      };
      callback(args);
      try {
        while (!stop) {
          yield new __await(continuePromise);
          if (rejectError)
            throw rejectError.error;
          if (stop)
            return;
          continuePromise = new Promise((resolve) => continueTrigger = resolve);
          const yieldBuffer = buffer2;
          buffer2 = void 0;
          if (yieldBuffer) {
            yield yieldBuffer;
            const yieldCompleted = yieldPassedTrigger;
            yieldPassedPromise = new Promise((resolve) => yieldPassedTrigger = resolve);
            yieldCompleted();
          }
        }
      } finally {
        finallyTrigger();
      }
      function yieldFn(item, combine2) {
        if (stop) {
          console.error("Cannot yield after complete.");
          return (
            /** @type Promise<void> */
            new Promise((resolve) => resolve())
          );
        }
        if (rejectError) {
          console.error("Cannot yield after reject.");
          return (
            /** @type Promise<void> */
            new Promise((resolve) => resolve())
          );
        }
        if (typeof combine2 === "function") {
          buffer2 = combine2(buffer2, item);
        } else {
          if (!buffer2)
            buffer2 = /** @type {TBuffer} */
            [];
          buffer2.push(item);
        }
        continueTrigger();
        return yieldPassedPromise;
      }
      function reject(error) {
        if (stop) {
          console.error("Cannot reject after complete.");
          return;
        }
        if (rejectError) {
          console.error("Cannot reject after reject.");
          return;
        }
        rejectError = { error };
        args.isEnded = true;
      }
      function complete() {
        stop = true;
        args.isEnded = true;
        continueTrigger();
      }
    });
  }

  // lib/plc-directory.js
  var FETCH_AHEAD_MSEC_MAX = 1e4;
  var FETCH_AHEAD_COUNT_MAX = 1e4;
  function plcDirectory(since, overrides) {
    const useFetch = (overrides == null ? void 0 : overrides.fetch) || fetch;
    return streamBuffer((stream) => __async(this, null, function* () {
      const EXPORT_URL = "https://plc.directory/export";
      let sinceTime;
      if (since) {
        if (typeof since === "string") {
          since = new Date(since);
        } else if (typeof since === "number") {
          since = new Date(since);
        }
        if (Number.isFinite(since.getTime()))
          sinceTime = since.toISOString();
      }
      const lastChunkLines = /* @__PURE__ */ new Set();
      let lastWaitedForConsumptionAt = Date.now();
      let collectedEntriesSinceLastWaitedForConsumption = 0;
      while (true) {
        const nextChunkRe = yield useFetch(
          EXPORT_URL + (sinceTime ? "?after=" + sinceTime : "")
        );
        if (stream.isEnded)
          return;
        const nextChunkText = yield nextChunkRe.text();
        const chunkLines = nextChunkText.split("\n");
        let overlap = 0;
        const nextChunkEnitres = [];
        for (const line of chunkLines) {
          if (lastChunkLines.has(line)) {
            overlap++;
            continue;
          }
          if (!line)
            continue;
          nextChunkEnitres.push(JSON.parse(line));
        }
        if (nextChunkEnitres.length) {
          lastChunkLines.clear();
          for (const line of chunkLines) {
            lastChunkLines.add(line);
          }
          collectedEntriesSinceLastWaitedForConsumption += nextChunkEnitres.length;
        }
        const waitForConsumption = stream.yield(
          { entries: nextChunkEnitres, overlap },
          (buffer2, item) => {
            if (!buffer2)
              return item;
            buffer2.entries = buffer2.entries.concat(item.entries);
            buffer2.overlap += item.overlap;
            return buffer2;
          }
        );
        if (stream.isEnded)
          return;
        const shouldWaitForConsumption = collectedEntriesSinceLastWaitedForConsumption > FETCH_AHEAD_COUNT_MAX || Date.now() - lastWaitedForConsumptionAt > FETCH_AHEAD_MSEC_MAX || !nextChunkEnitres.length;
        if (shouldWaitForConsumption) {
          yield waitForConsumption;
          if (stream.isEnded)
            return;
        }
        let nextSinceTime;
        for (let i = 0; i < nextChunkEnitres.length; i++) {
          const entry = nextChunkEnitres[nextChunkEnitres.length - i - 1];
          if (entry.createdAt) {
            const timestamp = new Date(entry.createdAt);
            if (!nextSinceTime && timestamp.getTime()) {
              nextSinceTime = timestamp;
            } else if (nextSinceTime && timestamp.getTime() && timestamp.getTime() < nextSinceTime.getTime()) {
              sinceTime = timestamp.toISOString();
              break;
            }
          }
        }
      }
    }));
  }

  // lib/index.js
  var all = {
    version: version4,
    likelyDID,
    shortenDID,
    shortenHandle,
    unwrapShortDID,
    unwrapShortHandle,
    breakFeedUri,
    breakPostURL,
    isPromise,
    ColdskyAgent,
    plcDirectory,
    firehose,
    firehoseShortDIDs
  };
  var lib_default = all;
  checkApplyGlobal();
  function checkApplyGlobal() {
    if (typeof process !== "undefined" && typeof (process == null ? void 0 : process.exit) === "function") {
      if (typeof module !== "undefined" && (module == null ? void 0 : module.exports)) {
        for (const key in all) {
          module.exports[key] = all[key];
        }
      }
      return;
    }
    if (typeof window !== "undefined" && window) {
      window["coldsky"] = all;
    } else if (typeof global !== "undefined" && global) {
      global["coldsky"] = all;
    }
  }
})();
//# sourceMappingURL=libs.js.map

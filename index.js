(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __knownSymbol = (name2, symbol) => {
    return (symbol = Symbol[name2]) ? symbol : Symbol.for("Symbol." + name2);
  };
  var __pow = Math.pow;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __objRest = (source, exclude) => {
    var target2 = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target2[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target2[prop] = source[prop];
      }
    return target2;
  };
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target2, all) => {
    for (var name2 in all)
      __defProp(target2, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps = (to, from7, except, desc) => {
    if (from7 && typeof from7 === "object" || typeof from7 === "function") {
      for (let key of __getOwnPropNames(from7))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from7[key], enumerable: !(desc = __getOwnPropDesc(from7, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target2, "default", { value: mod, enumerable: true }) : target2,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var __await = function(promise, isYieldStar) {
    this[0] = promise;
    this[1] = isYieldStar;
  };
  var __asyncGenerator = (__this, __arguments, generator) => {
    var resume = (k, v, yes, no) => {
      try {
        var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;
        Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === "return" ? k : "next", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume("throw", e, yes, no));
      } catch (e) {
        no(e);
      }
    };
    var method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no));
    var it = {};
    return generator = generator.apply(__this, __arguments), it[__knownSymbol("asyncIterator")] = () => it, method("next"), method("throw"), method("return"), it;
  };
  var __yieldStar = (value) => {
    var obj = value[__knownSymbol("asyncIterator")];
    var isAwait = false;
    var method;
    var it = {};
    if (obj == null) {
      obj = value[__knownSymbol("iterator")]();
      method = (k) => it[k] = (x) => obj[k](x);
    } else {
      obj = obj.call(value);
      method = (k) => it[k] = (v) => {
        if (isAwait) {
          isAwait = false;
          if (k === "throw")
            throw v;
          return v;
        }
        isAwait = true;
        return {
          done: false,
          value: new __await(new Promise((resolve) => {
            var x = obj[k](v);
            if (!(x instanceof Object))
              throw TypeError("Object expected");
            resolve(x);
          }), 1)
        };
      };
    }
    return it[__knownSymbol("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x) => {
      throw x;
    }, "return" in obj && method("return"), it;
  };
  var __forAwait = (obj, it, method) => (it = obj[__knownSymbol("asyncIterator")]) ? it.call(obj) : (obj = obj[__knownSymbol("iterator")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method("next"), method("return"), it);

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format3) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format3, args);
              }
            }
          }
          function error(format3) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format3, args);
              }
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement6(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement9(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement8(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement8(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement8(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext8(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef29(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name2) {
                  ownName = name2;
                  if (!render.name && !render.displayName) {
                    render.displayName = name2;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare3) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare3 === void 0 ? null : compare3
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name2) {
                  ownName = name2;
                  if (!type.name && !type.displayName) {
                    type.displayName = name2;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext11(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState12(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef18(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect15(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create5, deps);
          }
          function useInsertionEffect3(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create5, deps);
          }
          function useLayoutEffect5(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create5, deps);
          }
          function useCallback9(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo8(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create5, deps);
          }
          function useImperativeHandle4(ref, create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create5, deps);
          }
          function useDebugValue3(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId2() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name2 = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name2) {
                return "\n\nCheck the render method of `" + name2 + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray2(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement8(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement8(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement8(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name2 = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name2, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement6.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement9.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children6 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children6;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext8;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef29;
          exports.isValidElement = isValidElement8;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback9;
          exports.useContext = useContext11;
          exports.useDebugValue = useDebugValue3;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect15;
          exports.useId = useId2;
          exports.useImperativeHandle = useImperativeHandle4;
          exports.useInsertionEffect = useInsertionEffect3;
          exports.useLayoutEffect = useLayoutEffect5;
          exports.useMemo = useMemo8;
          exports.useReducer = useReducer;
          exports.useRef = useRef18;
          exports.useState = useState12;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare3(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length6 = heap.length;
            var halfLength = length6 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare3(left, node2) < 0) {
                if (rightIndex < length6 && compare3(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length6 && compare3(right, node2) < 0) {
                heap[index] = right;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare3(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React68 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React68.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format3) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format3, args);
              }
            }
          }
          function error(format3) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format3, args);
              }
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment14 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name2.length > 2 && (name2[0] === "o" || name2[0] === "O") && (name2[1] === "n" || name2[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name2.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name2) {
            return properties2.hasOwnProperty(name2) ? properties2[name2] : null;
          }
          function PropertyInfoRecord(name2, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name2;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties2 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name2) {
            properties2[name2] = new PropertyInfoRecord(
              name2,
              RESERVED,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name2 = _ref[0], attributeName = _ref[1];
            properties2[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name2) {
            properties2[name2] = new PropertyInfoRecord(
              name2,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name2) {
            properties2[name2] = new PropertyInfoRecord(
              name2,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name2) {
            properties2[name2] = new PropertyInfoRecord(
              name2,
              BOOLEAN,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties2[name2] = new PropertyInfoRecord(
              name2,
              BOOLEAN,
              true,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties2[name2] = new PropertyInfoRecord(
              name2,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties2[name2] = new PropertyInfoRecord(
              name2,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name2) {
            properties2[name2] = new PropertyInfoRecord(
              name2,
              NUMERIC,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize4 = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize4);
            properties2[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize4);
            properties2[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize4);
            properties2[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties2[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name2, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name2);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name2, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name2)) {
                return;
              }
              if (!node2.hasAttribute(name2)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name2);
              {
                checkAttributeStringCoercion(expected, name2);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name2, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name2);
            if (shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name2)) {
                var _attributeName = name2;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name2);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment14:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString5(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString5(value);
                }
              } else if (node2.value !== toString5(value)) {
                node2.value = toString5(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString5(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name2 = node2.name;
            if (name2 !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name2 !== "") {
              node2.name = name2;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name2 = props.name;
            if (props.type === "radio" && name2 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name2, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name2) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString5(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString5(value)) {
                node2.defaultValue = toString5(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React68.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString5(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString5(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString5(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString5(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString5(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name2, value, isCustomProperty3) {
            var isEmpty3 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty3) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name2);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name2) {
            return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string2) {
              return string2.replace(hyphenPattern, function(_, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name2) {
              if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
                return;
              }
              warnedStyleNames[name2] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name2,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name2.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name2) {
              if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
                return;
              }
              warnedStyleNames[name2] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name2, name2.charAt(0).toUpperCase() + name2.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name2, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name2, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name2, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name2);
            };
            var warnStyleValueIsInfinity = function(name2, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name2);
            };
            warnValidStyle = function(name2, value) {
              if (name2.indexOf("-") > -1) {
                warnHyphenatedStyleName(name2);
              } else if (badVendoredStyleNamePattern.test(name2)) {
                warnBadVendoredStyleName(name2);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name2, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name2, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name2, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles4) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles4) {
                if (!styles4.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles4[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles4) {
            var style4 = node2.style;
            for (var styleName in styles4) {
              if (!styles4.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles4[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles4[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style4.setProperty(styleName, styleValue);
              } else {
                style4[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles4) {
            var expanded = {};
            for (var key in styles4) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name2) {
            {
              if (hasOwnProperty.call(warnedProperties, name2) && warnedProperties[name2]) {
                return true;
              }
              if (rARIACamel.test(name2)) {
                var ariaName = "aria-" + name2.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name2);
                  warnedProperties[name2] = true;
                  return true;
                }
                if (name2 !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName);
                  warnedProperties[name2] = true;
                  return true;
                }
              }
              if (rARIA.test(name2)) {
                var lowerCasedName = name2.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name2] = true;
                  return false;
                }
                if (name2 !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName);
                  warnedProperties[name2] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name2, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name2) && warnedProperties$1[name2]) {
                return true;
              }
              var lowerCasedName = name2.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name2)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name2, registrationName);
                  warnedProperties$1[name2] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name2)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name2);
                  warnedProperties$1[name2] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name2)) {
                if (INVALID_EVENT_NAME_REGEX.test(name2)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name2);
                }
                warnedProperties$1[name2] = true;
                return true;
              }
              if (rARIA$1.test(name2) || rARIACamel$1.test(name2)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name2);
                warnedProperties$1[name2] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name2);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name2) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName);
                  warnedProperties$1[name2] = true;
                  return true;
                }
              } else if (!isReserved && name2 !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name2, lowerCasedName);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name2, name2, value, name2);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name2, name2, value, name2, name2, name2);
                }
                warnedProperties$1[name2] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
                warnedProperties$1[name2] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name2, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name2, value);
                warnedProperties$1[name2] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target2 = nativeEvent.target || nativeEvent.srcElement || window;
            if (target2.correspondingUseElement) {
              target2 = target2.correspondingUseElement;
            }
            return target2.nodeType === TEXT_NODE ? target2.parentNode : target2;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target2) {
            var internalInstance = getInstanceFromNode(target2);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target2) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target2);
              } else {
                restoreQueue = [target2];
              }
            } else {
              restoreTarget = target2;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target2 = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target2);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl2 = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl2();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl2 = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name2, type, props) {
            switch (name2) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name2, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name2, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name2 ? name2 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name2, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name2, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref2 = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref2 | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref2 | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref2 | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target2) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target: target2,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent2;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target2, eventType, listener) {
            target2.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target2, eventType, listener) {
            target2.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target2, eventType, listener, passive) {
            target2.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target2, eventType, listener, passive) {
            target2.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target2) {
            enqueueStateRestore(target2);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target2);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target2, targetInst) {
            activeElement = target2;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target2, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target2, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from7;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from7 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from7 = null;
              to = targetInst;
            }
            if (from7 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from7 == null ? win : getNodeFromInstance(from7);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from7, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from7, to);
          }
          function is2(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node2,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length6 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start = length6 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end = length6 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length6 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length6;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length6;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length6 = node2.textContent.length;
            var start = Math.min(offsets.start, length6);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length6);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style3 = {};
          if (canUseDOM) {
            style3 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style3) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target2) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target2, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument2 !== null) {
                if (!ownerDocument2[listeningMarker]) {
                  ownerDocument2[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument2);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target2, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target2;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from7, to) {
            var common2 = from7 && to ? getLowestCommonAncestor(from7, to) : null;
            if (from7 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from7, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name2) {
                names.push(name2);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement6(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name2 = attributes[_i].name.toLowerCase();
                switch (name2) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement6(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style4 = instance.style;
            if (typeof style4.setProperty === "function") {
              style4.setProperty("display", "none", "important");
            } else {
              style4.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest2, message, stack;
            if (dataset) {
              digest2 = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest: digest2,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name2 = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name2);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name2 = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name2);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node2.type;
                    if (isContextProvider(Component2)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length6 = getBitLength(totalChildren) + baseLength;
            if (length6 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length6 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps = Component2.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React68.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name2 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name2);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name2);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name2);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name2);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name2);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name2);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name2);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name2);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name2);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name2);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name2);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name2);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name2);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name2, name2);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name2, name2);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name2);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name2);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name2);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment14) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment14) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion7 = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version5 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version5];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version5);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create5, destroy, deps) {
            var effect = {
              tag,
              create: create5,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create5, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create5, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create5, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create5, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create5, destroy, nextDeps);
          }
          function mountEffect(create5, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create5, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create5, deps);
            }
          }
          function updateEffect(create5, deps) {
            return updateEffectImpl(Passive, Passive$1, create5, deps);
          }
          function mountInsertionEffect(create5, deps) {
            return mountEffectImpl(Update, Insertion7, create5, deps);
          }
          function updateInsertionEffect(create5, deps) {
            return updateEffectImpl(Update, Insertion7, create5, deps);
          }
          function mountLayoutEffect(create5, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create5, deps);
          }
          function updateLayoutEffect(create5, deps) {
            return updateEffectImpl(Update, Layout, create5, deps);
          }
          function imperativeHandleEffect(create5, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create5();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create5();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create5, deps) {
            {
              if (typeof create5 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create5 !== null ? typeof create5 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create5, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create5, deps) {
            {
              if (typeof create5 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create5 !== null ? typeof create5 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create5, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest2, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest2 != null ? digest2 : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare3 = Component2.compare;
              compare3 = compare3 !== null ? compare3 : shallowEqual;
              if (compare3(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref2;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest2, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest2 = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest2, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable2 = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable2) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment14:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref2;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment14:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create5 = effect.create;
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create5();
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion7) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref2) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion7) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion7 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion7 | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref2) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref2) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest2 = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest: digest2
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment14, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target2, source) {
            if (target2 === null) {
              target2 = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target2.tag = source.tag;
            target2.key = source.key;
            target2.elementType = source.elementType;
            target2.type = source.type;
            target2.stateNode = source.stateNode;
            target2.return = source.return;
            target2.child = source.child;
            target2.sibling = source.sibling;
            target2.index = source.index;
            target2.ref = source.ref;
            target2.pendingProps = source.pendingProps;
            target2.memoizedProps = source.memoizedProps;
            target2.updateQueue = source.updateQueue;
            target2.memoizedState = source.memoizedState;
            target2.dependencies = source.dependencies;
            target2.mode = source.mode;
            target2.flags = source.flags;
            target2.subtreeFlags = source.subtreeFlags;
            target2.deletions = source.deletions;
            target2.lanes = source.lanes;
            target2.childLanes = source.childLanes;
            target2.alternate = source.alternate;
            {
              target2.actualDuration = source.actualDuration;
              target2.actualStartTime = source.actualStartTime;
              target2.selfBaseDuration = source.selfBaseDuration;
              target2.treeBaseDuration = source.treeBaseDuration;
            }
            target2._debugSource = source._debugSource;
            target2._debugOwner = source._debugOwner;
            target2._debugNeedsRemount = source._debugNeedsRemount;
            target2._debugHookTypes = source._debugHookTypes;
            return target2;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target2) {
            if (target2) {
              queueExplicitHydrationTarget(target2);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/node/formatMuiErrorMessage/formatMuiErrorMessage.js
  var require_formatMuiErrorMessage = __commonJS({
    "node_modules/@mui/utils/node/formatMuiErrorMessage/formatMuiErrorMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = formatMuiErrorMessage;
      function formatMuiErrorMessage(code2) {
        let url = "https://mui.com/production-error/?code=" + code2;
        for (let i = 1; i < arguments.length; i += 1) {
          url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified MUI error #" + code2 + "; visit " + url + " for the full message.";
      }
    }
  });

  // node_modules/@mui/utils/node/formatMuiErrorMessage/index.js
  var require_formatMuiErrorMessage2 = __commonJS({
    "node_modules/@mui/utils/node/formatMuiErrorMessage/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _formatMuiErrorMessage.default;
        }
      });
      var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage());
    }
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends4() {
    _extends4 = Object.assign ? Object.assign.bind() : function(target2) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target2[key] = source[key];
          }
        }
      }
      return target2;
    };
    return _extends4.apply(this, arguments);
  }
  var init_extends = __esm({
    "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn) {
    var cache2 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache2[arg] === void 0)
        cache2[arg] = fn(arg);
      return cache2[arg];
    };
  }
  var init_emotion_memoize_esm = __esm({
    "node_modules/@emotion/memoize/dist/emotion-memoize.esm.js"() {
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex, isPropValid;
  var init_emotion_is_prop_valid_esm = __esm({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js"() {
      init_emotion_memoize_esm();
      reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      isPropValid = /* @__PURE__ */ memoize(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet;
  var init_emotion_sheet_browser_esm = __esm({
    "node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js"() {
      StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (true) {
            var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
              console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
          }
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
              if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
                console.error('There was a problem inserting the following rule: "' + rule + '"', e);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          if (true) {
            this._alreadyInsertedOrderInsensitiveRule = false;
          }
        };
        return StyleSheet2;
      }();
    }
  });

  // node_modules/stylis/src/Enum.js
  var MS, MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, IMPORT, KEYFRAMES, LAYER;
  var init_Enum = __esm({
    "node_modules/stylis/src/Enum.js"() {
      MS = "-ms-";
      MOZ = "-moz-";
      WEBKIT = "-webkit-";
      COMMENT = "comm";
      RULESET = "rule";
      DECLARATION = "decl";
      IMPORT = "@import";
      KEYFRAMES = "@keyframes";
      LAYER = "@layer";
    }
  });

  // node_modules/stylis/src/Utility.js
  function hash(value, length6) {
    return charat(value, 0) ^ 45 ? (((length6 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search2) {
    return value.indexOf(search2);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var abs, from, assign;
  var init_Utility = __esm({
    "node_modules/stylis/src/Utility.js"() {
      abs = Math.abs;
      from = String.fromCharCode;
      assign = Object.assign;
    }
  });

  // node_modules/stylis/src/Tokenizer.js
  function node(value, root, parent, type, props, children, length6) {
    return { value, root, parent, type, props, children, line, column, length: length6, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }
  var line, column, length, position, character, characters;
  var init_Tokenizer = __esm({
    "node_modules/stylis/src/Tokenizer.js"() {
      init_Utility();
      line = 1;
      column = 1;
      length = 0;
      position = 0;
      character = 0;
      characters = "";
    }
  });

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length6 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length6 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length6)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length6 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length6 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length6), rulesets);
              if (character2 === 123)
                if (offset === 0)
                  parse(characters2, root, reference, reference, props, rulesets, length6, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length6), children), rules, children, length6, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length6 = pseudo;
          break;
        case 58:
          length6 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset = length6 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length6) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length6);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length6) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length6), substr(value, length6 + 1, -1), length6);
  }
  var init_Parser = __esm({
    "node_modules/stylis/src/Parser.js"() {
      init_Enum();
      init_Utility();
      init_Tokenizer();
    }
  });

  // node_modules/stylis/src/Prefixer.js
  var init_Prefixer = __esm({
    "node_modules/stylis/src/Prefixer.js"() {
    }
  });

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length6 = sizeof(children);
    for (var i = 0; i < length6; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  var init_Serializer = __esm({
    "node_modules/stylis/src/Serializer.js"() {
      init_Enum();
      init_Utility();
    }
  });

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length6 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i = 0; i < length6; i++)
        output += collection[i](element, index, children, callback) || "";
      return output;
    };
  }
  var init_Middleware = __esm({
    "node_modules/stylis/src/Middleware.js"() {
      init_Utility();
    }
  });

  // node_modules/stylis/index.js
  var init_stylis = __esm({
    "node_modules/stylis/index.js"() {
      init_Enum();
      init_Utility();
      init_Parser();
      init_Prefixer();
      init_Tokenizer();
      init_Serializer();
      init_Middleware();
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
  var weakMemoize;
  var init_emotion_weak_memoize_esm = __esm({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js"() {
      weakMemoize = function weakMemoize2(func) {
        var cache2 = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache2.has(arg)) {
            return cache2.get(arg);
          }
          var ret = func(arg);
          cache2.set(arg, ret);
          return ret;
        };
      };
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var emotion_cache_browser_esm_exports = {};
  __export(emotion_cache_browser_esm_exports, {
    default: () => createCache
  });
  function prefix(value, length6) {
    switch (hash(value, length6)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length6 > 6)
          switch (charat(value, length6 + 1)) {
            case 109:
              if (charat(value, length6 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length6 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length6) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length6 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length6 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var identifierWithPointTracking, toRules, getRules, fixedElements, compat, removeLabel, ignoreFlag, isIgnoringComment, createUnsafeSelectorsAlarm, isImportRule, isPrependedWithRegularRules, nullifyElement, incorrectImportAlarm, prefixer, defaultStylisPlugins, createCache;
  var init_emotion_cache_browser_esm = __esm({
    "node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js"() {
      init_emotion_sheet_browser_esm();
      init_stylis();
      init_emotion_weak_memoize_esm();
      init_emotion_memoize_esm();
      identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
        var previous = 0;
        var character2 = 0;
        while (true) {
          previous = character2;
          character2 = peek();
          if (previous === 38 && character2 === 12) {
            points[index] = 1;
          }
          if (token(character2)) {
            break;
          }
          next();
        }
        return slice(begin, position);
      };
      toRules = function toRules2(parsed, points) {
        var index = -1;
        var character2 = 44;
        do {
          switch (token(character2)) {
            case 0:
              if (character2 === 38 && peek() === 12) {
                points[index] = 1;
              }
              parsed[index] += identifierWithPointTracking(position - 1, points, index);
              break;
            case 2:
              parsed[index] += delimit(character2);
              break;
            case 4:
              if (character2 === 44) {
                parsed[++index] = peek() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
              }
            default:
              parsed[index] += from(character2);
          }
        } while (character2 = next());
        return parsed;
      };
      getRules = function getRules2(value, points) {
        return dealloc(toRules(alloc(value), points));
      };
      fixedElements = /* @__PURE__ */ new WeakMap();
      compat = function compat2(element) {
        if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
        // negative .length indicates that this rule has been already prefixed
        element.length < 1) {
          return;
        }
        var value = element.value, parent = element.parent;
        var isImplicitRule = element.column === parent.column && element.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent)
            return;
        }
        if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i = 0, k = 0; i < rules.length; i++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
          }
        }
      };
      removeLabel = function removeLabel2(element) {
        if (element.type === "decl") {
          var value = element.value;
          if (
            // charcode for l
            value.charCodeAt(0) === 108 && // charcode for b
            value.charCodeAt(2) === 98
          ) {
            element["return"] = "";
            element.value = "";
          }
        }
      };
      ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
      isIgnoringComment = function isIgnoringComment2(element) {
        return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
      };
      createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache2) {
        return function(element, index, children) {
          if (element.type !== "rule" || cache2.compat)
            return;
          var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
          if (unsafePseudoClasses) {
            var isNested = !!element.parent;
            var commentContainer = isNested ? element.parent.children : (
              // global rule at the root level
              children
            );
            for (var i = commentContainer.length - 1; i >= 0; i--) {
              var node2 = commentContainer[i];
              if (node2.line < element.line) {
                break;
              }
              if (node2.column < element.column) {
                if (isIgnoringComment(node2)) {
                  return;
                }
                break;
              }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
              console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
          }
        };
      };
      isImportRule = function isImportRule2(element) {
        return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
      };
      isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
        for (var i = index - 1; i >= 0; i--) {
          if (!isImportRule(children[i])) {
            return true;
          }
        }
        return false;
      };
      nullifyElement = function nullifyElement2(element) {
        element.type = "";
        element.value = "";
        element["return"] = "";
        element.children = "";
        element.props = "";
      };
      incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
        if (!isImportRule(element)) {
          return;
        }
        if (element.parent) {
          console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
          nullifyElement(element);
        } else if (isPrependedWithRegularRules(index, children)) {
          console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
          nullifyElement(element);
        }
      };
      prefixer = function prefixer2(element, index, children, callback) {
        if (element.length > -1) {
          if (!element["return"])
            switch (element.type) {
              case DECLARATION:
                element["return"] = prefix(element.value, element.length);
                break;
              case KEYFRAMES:
                return serialize([copy(element, {
                  value: replace(element.value, "@", "@" + WEBKIT)
                })], callback);
              case RULESET:
                if (element.length)
                  return combine(element.props, function(value) {
                    switch (match(value, /(::plac\w+|:read-\w+)/)) {
                      case ":read-only":
                      case ":read-write":
                        return serialize([copy(element, {
                          props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                        })], callback);
                      case "::placeholder":
                        return serialize([copy(element, {
                          props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                        }), copy(element, {
                          props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                        }), copy(element, {
                          props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                        })], callback);
                    }
                    return "";
                  });
            }
        }
      };
      defaultStylisPlugins = [prefixer];
      createCache = function createCache2(options) {
        var key = options.key;
        if (!key) {
          throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
        }
        if (key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node2) {
            var dataEmotionAttribute = node2.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node2);
            node2.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container;
        var nodesToHydrate = [];
        {
          container = options.container || document.head;
          Array.prototype.forEach.call(
            // this means we will ignore elements which don't have a space in them which
            // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function(node2) {
              var attrib = node2.getAttribute("data-emotion").split(" ");
              for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
              }
              nodesToHydrate.push(node2);
            }
          );
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        if (true) {
          omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
              return cache2.compat;
            }
          }), incorrectImportAlarm);
        }
        {
          var currentSheet;
          var finalizingPlugins = [stringify, true ? function(element) {
            if (!element.root) {
              if (element["return"]) {
                currentSheet.insert(element["return"]);
              } else if (element.value && element.type !== COMMENT) {
                currentSheet.insert(element.value + "{}");
              }
            }
          } : rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis = function stylis2(styles4) {
            return serialize(compile(styles4), serializer);
          };
          _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet;
            if (serialized.map !== void 0) {
              currentSheet = {
                insert: function insert2(rule) {
                  sheet.insert(rule + serialized.map);
                }
              };
            }
            stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache2.inserted[serialized.name] = true;
            }
          };
        }
        var cache2 = {
          key,
          sheet: new StyleSheet({
            key,
            container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache2.sheet.hydrate(nodesToHydrate);
        return cache2;
      };
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment14 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment14;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics2;
    }
  });

  // node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js
  var import_hoist_non_react_statics, hoistNonReactStatics;
  var init_emotion_react_isolated_hnrs_browser_esm = __esm({
    "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js"() {
      import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
      hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return (0, import_hoist_non_react_statics.default)(targetComponent, sourceComponent);
      };
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var isBrowser2, registerStyles, insertStyles;
  var init_emotion_utils_browser_esm = __esm({
    "node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js"() {
      isBrowser2 = true;
      registerStyles = function registerStyles2(cache2, serialized, isStringTag) {
        var className = cache2.key + "-" + serialized.name;
        if (
          // we only need to add the styles to the registered cache if the
          // class name could be used further down
          // the tree but if it's a string tag, we know it won't
          // so we don't have to add it to registered cache.
          // this improves memory usage since we can avoid storing the whole style string
          (isStringTag === false || // we need to always store it if we're in compat mode and
          // in node since emotion-server relies on whether a style is in
          // the registered cache to know whether a style is global or not
          // also, note that this check will be dead code eliminated in the browser
          isBrowser2 === false) && cache2.registered[className] === void 0
        ) {
          cache2.registered[className] = serialized.styles;
        }
      };
      insertStyles = function insertStyles2(cache2, serialized, isStringTag) {
        registerStyles(cache2, serialized, isStringTag);
        var className = cache2.key + "-" + serialized.name;
        if (cache2.inserted[serialized.name] === void 0) {
          var current = serialized;
          do {
            cache2.insert(serialized === current ? "." + className : "", current, cache2.sheet, true);
            current = current.next;
          } while (current !== void 0);
        }
      };
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var init_emotion_hash_esm = __esm({
    "node_modules/@emotion/hash/dist/emotion-hash.esm.js"() {
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys;
  var init_emotion_unitless_esm = __esm({
    "node_modules/@emotion/unitless/dist/emotion-unitless.esm.js"() {
      unitlessKeys = {
        animationIterationCount: 1,
        aspectRatio: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        // SVG-related properties
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error(noComponentSelectorMessage);
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles4 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles4 += interpolation.map;
          }
          return styles4;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string2 = "";
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string2 += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string2 += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string2 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string2 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string2 += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string2 += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string2;
  }
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR, UNDEFINED_AS_OBJECT_KEY_ERROR, hyphenateRegex, animationRegex, isCustomProperty, isProcessableValue, processStyleName, processStyleValue, contentValuePattern, contentValues, oldProcessStyleValue, msPattern, hyphenPattern, hyphenatedCache, noComponentSelectorMessage, labelPattern, sourceMapPattern, cursor, serializeStyles;
  var init_emotion_serialize_browser_esm = __esm({
    "node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js"() {
      init_emotion_hash_esm();
      init_emotion_unitless_esm();
      init_emotion_memoize_esm();
      ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      hyphenateRegex = /[A-Z]|^ms/g;
      animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      processStyleName = /* @__PURE__ */ memoize(function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match2, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        contentValues = ["normal", "none", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue3(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
      }
      serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles4 = "";
        cursor = void 0;
        var strings2 = args[0];
        if (strings2 == null || strings2.raw === void 0) {
          stringMode = false;
          styles4 += handleInterpolation(mergedProps, registered, strings2);
        } else {
          if (strings2[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles4 += strings2[0];
        }
        for (var i = 1; i < args.length; i++) {
          styles4 += handleInterpolation(mergedProps, registered, args[i]);
          if (stringMode) {
            if (strings2[i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles4 += strings2[i];
          }
        }
        var sourceMap;
        if (true) {
          styles4 = styles4.replace(sourceMapPattern, function(match3) {
            sourceMap = match3;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match2;
        while ((match2 = labelPattern.exec(styles4)) !== null) {
          identifierName += "-" + // $FlowFixMe we know it's not null
          match2[1];
        }
        var name2 = murmur2(styles4) + identifierName;
        if (true) {
          return {
            name: name2,
            styles: styles4,
            map: sourceMap,
            next: cursor,
            toString: function toString5() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name: name2,
          styles: styles4,
          next: cursor
        };
      };
    }
  });

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React3, syncFallback, useInsertionEffect2, useInsertionEffectAlwaysWithSyncFallback, useInsertionEffectWithLayoutFallback;
  var init_emotion_use_insertion_effect_with_fallbacks_browser_esm = __esm({
    "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js"() {
      React3 = __toESM(require_react());
      syncFallback = function syncFallback2(create5) {
        return create5();
      };
      useInsertionEffect2 = React3["useInsertionEffect"] ? React3["useInsertionEffect"] : false;
      useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
      useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React3.useLayoutEffect;
    }
  });

  // node_modules/@emotion/react/dist/emotion-element-43c6fea0.browser.esm.js
  function withTheme(Component2) {
    var componentName = Component2.displayName || Component2.name || "Component";
    var render = function render2(props, ref) {
      var theme = React4.useContext(ThemeContext);
      return /* @__PURE__ */ React4.createElement(Component2, _extends4({
        theme,
        ref
      }, props));
    };
    var WithTheme = /* @__PURE__ */ React4.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return hoistNonReactStatics(WithTheme, Component2);
  }
  var React4, import_react, isBrowser3, hasOwn, EmotionCacheContext, CacheProvider, __unsafe_useEmotionCache, withEmotionCache, ThemeContext, useTheme, getTheme, createCacheWithTheme, ThemeProvider, getLastPart, getFunctionNameFromStackTraceLine, internalReactFunctionNames, sanitizeIdentifier, getLabelFromStackTrace, typePropName, labelPropName, createEmotionProps, Insertion, Emotion, Emotion$1;
  var init_emotion_element_43c6fea0_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-element-43c6fea0.browser.esm.js"() {
      React4 = __toESM(require_react());
      import_react = __toESM(require_react());
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      init_emotion_react_isolated_hnrs_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      isBrowser3 = true;
      hasOwn = {}.hasOwnProperty;
      EmotionCacheContext = /* @__PURE__ */ React4.createContext(
        // we're doing this to avoid preconstruct's dead code elimination in this one case
        // because this module is primarily intended for the browser and node
        // but it's also required in react native and similar environments sometimes
        // and we could have a special build just for that
        // but this is much easier and the native packages
        // might use a different theme context in the future anyway
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
          key: "css"
        }) : null
      );
      if (true) {
        EmotionCacheContext.displayName = "EmotionCacheContext";
      }
      CacheProvider = EmotionCacheContext.Provider;
      __unsafe_useEmotionCache = function useEmotionCache() {
        return (0, import_react.useContext)(EmotionCacheContext);
      };
      withEmotionCache = function withEmotionCache2(func) {
        return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
          var cache2 = (0, import_react.useContext)(EmotionCacheContext);
          return func(props, cache2, ref);
        });
      };
      if (!isBrowser3) {
        withEmotionCache = function withEmotionCache3(func) {
          return function(props) {
            var cache2 = (0, import_react.useContext)(EmotionCacheContext);
            if (cache2 === null) {
              cache2 = createCache({
                key: "css"
              });
              return /* @__PURE__ */ React4.createElement(EmotionCacheContext.Provider, {
                value: cache2
              }, func(props, cache2));
            } else {
              return func(props, cache2);
            }
          };
        };
      }
      ThemeContext = /* @__PURE__ */ React4.createContext({});
      if (true) {
        ThemeContext.displayName = "EmotionThemeContext";
      }
      useTheme = function useTheme2() {
        return React4.useContext(ThemeContext);
      };
      getTheme = function getTheme2(outerTheme, theme) {
        if (typeof theme === "function") {
          var mergedTheme = theme(outerTheme);
          if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (theme == null || typeof theme !== "object" || Array.isArray(theme)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends4({}, outerTheme, theme);
      };
      createCacheWithTheme = /* @__PURE__ */ weakMemoize(function(outerTheme) {
        return weakMemoize(function(theme) {
          return getTheme(outerTheme, theme);
        });
      });
      ThemeProvider = function ThemeProvider2(props) {
        var theme = React4.useContext(ThemeContext);
        if (props.theme !== theme) {
          theme = createCacheWithTheme(theme)(props.theme);
        }
        return /* @__PURE__ */ React4.createElement(ThemeContext.Provider, {
          value: theme
        }, props.children);
      };
      getLastPart = function getLastPart2(functionName) {
        var parts = functionName.split(".");
        return parts[parts.length - 1];
      };
      getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
        var match2 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
        if (match2)
          return getLastPart(match2[1]);
        match2 = /^([A-Za-z0-9$.]+)@/.exec(line2);
        if (match2)
          return getLastPart(match2[1]);
        return void 0;
      };
      internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
      sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
        return identifier2.replace(/\$/g, "-");
      };
      getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
        if (!stackTrace)
          return void 0;
        var lines = stackTrace.split("\n");
        for (var i = 0; i < lines.length; i++) {
          var functionName = getFunctionNameFromStackTraceLine(lines[i]);
          if (!functionName)
            continue;
          if (internalReactFunctionNames.has(functionName))
            break;
          if (/^[A-Z]/.test(functionName))
            return sanitizeIdentifier(functionName);
        }
        return void 0;
      };
      typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
      createEmotionProps = function createEmotionProps2(type, props) {
        if (typeof props.css === "string" && // check if there is a css declaration
        props.css.indexOf(":") !== -1) {
          throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
        }
        var newProps = {};
        for (var key in props) {
          if (hasOwn.call(props, key)) {
            newProps[key] = props[key];
          }
        }
        newProps[typePropName] = type;
        if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
          var label = getLabelFromStackTrace(new Error().stack);
          if (label)
            newProps[labelPropName] = label;
        }
        return newProps;
      };
      Insertion = function Insertion2(_ref) {
        var cache2 = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        registerStyles(cache2, serialized, isStringTag);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache2, serialized, isStringTag);
        });
        return null;
      };
      Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache2, ref) {
        var cssProp = props.css;
        if (typeof cssProp === "string" && cache2.registered[cssProp] !== void 0) {
          cssProp = cache2.registered[cssProp];
        }
        var WrappedComponent = props[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache2.registered, registeredStyles, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(registeredStyles, void 0, React4.useContext(ThemeContext));
        if (serialized.name.indexOf("-") === -1) {
          var labelFromStack = props[labelPropName];
          if (labelFromStack) {
            serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
          }
        }
        className += cache2.key + "-" + serialized.name;
        var newProps = {};
        for (var key in props) {
          if (hasOwn.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
            newProps[key] = props[key];
          }
        }
        newProps.ref = ref;
        newProps.className = className;
        return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(Insertion, {
          cache: cache2,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React4.createElement(WrappedComponent, newProps));
      });
      if (true) {
        Emotion.displayName = "EmotionCssPropInternal";
      }
      Emotion$1 = Emotion;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var emotion_react_browser_esm_exports = {};
  __export(emotion_react_browser_esm_exports, {
    CacheProvider: () => CacheProvider,
    ClassNames: () => ClassNames,
    Global: () => Global,
    ThemeContext: () => ThemeContext,
    ThemeProvider: () => ThemeProvider,
    __unsafe_useEmotionCache: () => __unsafe_useEmotionCache,
    createElement: () => jsx,
    css: () => css,
    jsx: () => jsx,
    keyframes: () => keyframes,
    useTheme: () => useTheme,
    withEmotionCache: () => withEmotionCache,
    withTheme: () => withTheme
  });
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  function merge(registered, css2, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css2(registeredStyles);
  }
  var React5, import_hoist_non_react_statics2, pkg, jsx, warnedAboutCssPropForGlobal, Global, keyframes, classnames, Insertion3, ClassNames, isBrowser4, isTestEnv, globalContext, globalKey;
  var init_emotion_react_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-react.browser.esm.js"() {
      init_emotion_element_43c6fea0_browser_esm();
      init_emotion_element_43c6fea0_browser_esm();
      React5 = __toESM(require_react());
      init_emotion_utils_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
      pkg = {
        name: "@emotion/react",
        version: "11.11.4",
        main: "dist/emotion-react.cjs.js",
        module: "dist/emotion-react.esm.js",
        browser: {
          "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
        },
        exports: {
          ".": {
            module: {
              worker: "./dist/emotion-react.worker.esm.js",
              browser: "./dist/emotion-react.browser.esm.js",
              "default": "./dist/emotion-react.esm.js"
            },
            "import": "./dist/emotion-react.cjs.mjs",
            "default": "./dist/emotion-react.cjs.js"
          },
          "./jsx-runtime": {
            module: {
              worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
              browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
              "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
          },
          "./_isolated-hnrs": {
            module: {
              worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
              browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
              "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
          },
          "./jsx-dev-runtime": {
            module: {
              worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
              browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
              "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
          },
          "./package.json": "./package.json",
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": {
            types: {
              "import": "./macro.d.mts",
              "default": "./macro.d.ts"
            },
            "default": "./macro.js"
          }
        },
        types: "types/index.d.ts",
        files: [
          "src",
          "dist",
          "jsx-runtime",
          "jsx-dev-runtime",
          "_isolated-hnrs",
          "types/*.d.ts",
          "macro.*"
        ],
        sideEffects: false,
        author: "Emotion Contributors",
        license: "MIT",
        scripts: {
          "test:typescript": "dtslint types"
        },
        dependencies: {
          "@babel/runtime": "^7.18.3",
          "@emotion/babel-plugin": "^11.11.0",
          "@emotion/cache": "^11.11.0",
          "@emotion/serialize": "^1.1.3",
          "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
          "@emotion/utils": "^1.2.1",
          "@emotion/weak-memoize": "^0.3.1",
          "hoist-non-react-statics": "^3.3.1"
        },
        peerDependencies: {
          react: ">=16.8.0"
        },
        peerDependenciesMeta: {
          "@types/react": {
            optional: true
          }
        },
        devDependencies: {
          "@definitelytyped/dtslint": "0.0.112",
          "@emotion/css": "11.11.2",
          "@emotion/css-prettifier": "1.1.3",
          "@emotion/server": "11.11.0",
          "@emotion/styled": "11.11.0",
          "html-tag-names": "^1.1.2",
          react: "16.14.0",
          "svg-tag-names": "^1.1.1",
          typescript: "^4.5.5"
        },
        repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
        publishConfig: {
          access: "public"
        },
        "umd:main": "dist/emotion-react.umd.min.js",
        preconstruct: {
          entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
          ],
          umdName: "emotionReact",
          exports: {
            envConditions: [
              "browser",
              "worker"
            ],
            extra: {
              "./types/css-prop": "./types/css-prop.d.ts",
              "./macro": {
                types: {
                  "import": "./macro.d.mts",
                  "default": "./macro.d.ts"
                },
                "default": "./macro.js"
              }
            }
          }
        }
      };
      jsx = function jsx2(type, props) {
        var args = arguments;
        if (props == null || !hasOwn.call(props, "css")) {
          return React5.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = Emotion$1;
        createElementArgArray[1] = createEmotionProps(type, props);
        for (var i = 2; i < argsLength; i++) {
          createElementArgArray[i] = args[i];
        }
        return React5.createElement.apply(null, createElementArgArray);
      };
      warnedAboutCssPropForGlobal = false;
      Global = /* @__PURE__ */ withEmotionCache(function(props, cache2) {
        if (!warnedAboutCssPropForGlobal && // check for className as well since the user is
        // probably using the custom createElement which
        // means it will be turned into a className prop
        // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
        (props.className || props.css)) {
          console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
          warnedAboutCssPropForGlobal = true;
        }
        var styles4 = props.styles;
        var serialized = serializeStyles([styles4], void 0, React5.useContext(ThemeContext));
        if (!isBrowser3) {
          var _ref;
          var serializedNames = serialized.name;
          var serializedStyles = serialized.styles;
          var next2 = serialized.next;
          while (next2 !== void 0) {
            serializedNames += " " + next2.name;
            serializedStyles += next2.styles;
            next2 = next2.next;
          }
          var shouldCache = cache2.compat === true;
          var rules = cache2.insert("", {
            name: serializedNames,
            styles: serializedStyles
          }, cache2.sheet, shouldCache);
          if (shouldCache) {
            return null;
          }
          return /* @__PURE__ */ React5.createElement("style", (_ref = {}, _ref["data-emotion"] = cache2.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = cache2.sheet.nonce, _ref));
        }
        var sheetRef = React5.useRef();
        useInsertionEffectWithLayoutFallback(function() {
          var key = cache2.key + "-global";
          var sheet = new cache2.sheet.constructor({
            key,
            nonce: cache2.sheet.nonce,
            container: cache2.sheet.container,
            speedy: cache2.sheet.isSpeedy
          });
          var rehydrating = false;
          var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache2.sheet.tags.length) {
            sheet.before = cache2.sheet.tags[0];
          }
          if (node2 !== null) {
            rehydrating = true;
            node2.setAttribute("data-emotion", key);
            sheet.hydrate([node2]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache2]);
        useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            insertStyles(cache2, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
          }
          cache2.insert("", serialized, sheet, false);
        }, [cache2, serialized.name]);
        return null;
      });
      if (true) {
        Global.displayName = "EmotionGlobal";
      }
      keyframes = function keyframes2() {
        var insertable = css.apply(void 0, arguments);
        var name2 = "animation-" + insertable.name;
        return {
          name: name2,
          styles: "@keyframes " + name2 + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString5() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                if (arg.styles !== void 0 && arg.name !== void 0) {
                  console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                }
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      Insertion3 = function Insertion4(_ref) {
        var cache2 = _ref.cache, serializedArr = _ref.serializedArr;
        useInsertionEffectAlwaysWithSyncFallback(function() {
          for (var i = 0; i < serializedArr.length; i++) {
            insertStyles(cache2, serializedArr[i], false);
          }
        });
        return null;
      };
      ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache2) {
        var hasRendered = false;
        var serializedArr = [];
        var css2 = function css3() {
          if (hasRendered && true) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serializeStyles(args, cache2.registered);
          serializedArr.push(serialized);
          registerStyles(cache2, serialized, false);
          return cache2.key + "-" + serialized.name;
        };
        var cx = function cx2() {
          if (hasRendered && true) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge(cache2.registered, css2, classnames(args));
        };
        var content = {
          css: css2,
          cx,
          theme: React5.useContext(ThemeContext)
        };
        var ele = props.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React5.createElement(React5.Fragment, null, /* @__PURE__ */ React5.createElement(Insertion3, {
          cache: cache2,
          serializedArr
        }), ele);
      });
      if (true) {
        ClassNames.displayName = "EmotionClassNames";
      }
      if (true) {
        isBrowser4 = true;
        isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
        if (isBrowser4 && !isTestEnv) {
          globalContext = // $FlowIgnore
          typeof globalThis !== "undefined" ? globalThis : isBrowser4 ? window : global;
          globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
          if (globalContext[globalKey]) {
            console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
          }
          globalContext[globalKey] = true;
        }
      }
    }
  });

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React6, testOmitPropsOnStringTag, testOmitPropsOnComponent, getDefaultShouldForwardProp, composeShouldForwardProps, ILLEGAL_ESCAPE_SEQUENCE_ERROR2, Insertion5, createStyled;
  var init_emotion_styled_base_browser_esm = __esm({
    "node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"() {
      init_extends();
      React6 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_react_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      testOmitPropsOnStringTag = isPropValid;
      testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp !== "function" && isReal) {
          shouldForwardProp = tag.__emotion_forwardProp;
        }
        return shouldForwardProp;
      };
      ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      Insertion5 = function Insertion6(_ref) {
        var cache2 = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        registerStyles(cache2, serialized, isStringTag);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache2, serialized, isStringTag);
        });
        return null;
      };
      createStyled = function createStyled2(tag, options) {
        if (true) {
          if (tag === void 0) {
            throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
          }
        }
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles4 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles4.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles4.push.apply(styles4, args);
          } else {
            if (args[0][0] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
            }
            styles4.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for (; i < len; i++) {
              if (args[0][i] === void 0) {
                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
              }
              styles4.push(args[i], args[0][i]);
            }
          }
          var Styled = withEmotionCache(function(props, cache2, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
              mergedProps = {};
              for (var key in props) {
                mergedProps[key] = props[key];
              }
              mergedProps.theme = React6.useContext(ThemeContext);
            }
            if (typeof props.className === "string") {
              className = getRegisteredStyles(cache2.registered, classInterpolations, props.className);
            } else if (props.className != null) {
              className = props.className + " ";
            }
            var serialized = serializeStyles(styles4.concat(classInterpolations), cache2.registered, mergedProps);
            className += cache2.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props) {
              if (shouldUseAs && _key === "as")
                continue;
              if (
                // $FlowFixMe
                finalShouldForwardProp(_key)
              ) {
                newProps[_key] = props[_key];
              }
            }
            newProps.className = className;
            newProps.ref = ref;
            return /* @__PURE__ */ React6.createElement(React6.Fragment, null, /* @__PURE__ */ React6.createElement(Insertion5, {
              cache: cache2,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React6.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles4;
          Styled.__emotion_forwardProp = shouldForwardProp;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && true) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled2(nextTag, _extends4({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles4);
          };
          return Styled;
        };
      };
    }
  });

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var emotion_styled_browser_esm_exports = {};
  __export(emotion_styled_browser_esm_exports, {
    default: () => newStyled
  });
  var import_react3, tags, newStyled;
  var init_emotion_styled_browser_esm = __esm({
    "node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"() {
      init_emotion_styled_base_browser_esm();
      init_extends();
      import_react3 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        // SVG
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      newStyled = createStyled.bind();
      tags.forEach(function(tagName) {
        newStyled[tagName] = newStyled(tagName);
      });
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment14 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment14;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target2, source) {
        var from7;
        var to = toObject(target2);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from7 = Object(arguments[s]);
          for (var key in from7) {
            if (hasOwnProperty.call(from7, key)) {
              to[key] = from7[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from7);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from7, symbols[i])) {
                to[symbols[i]] = from7[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is2();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement8, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location2, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement8(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is2(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement8(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is2();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React68 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React68.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format3) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format3, args);
              }
            }
          }
          function printWarning(level, format3, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format3 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format3);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement8(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name2 = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name2) {
                  return "\n\nCheck the render method of `" + name2 + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray2(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement8(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement8(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement8(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name2 = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name2, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray2(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray2(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx3 = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx3;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js
  var require_StyledEngineProvider = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = StyledEngineProvider;
      var React68 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _cache = _interopRequireDefault((init_emotion_cache_browser_esm(), __toCommonJS(emotion_cache_browser_esm_exports)));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
      var cache2;
      if (typeof document === "object") {
        cache2 = (0, _cache.default)({
          key: "css",
          prepend: true
        });
      }
      function StyledEngineProvider(props) {
        const {
          injectFirst,
          children
        } = props;
        return injectFirst && cache2 ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
          value: cache2,
          children
        }) : children;
      }
      true ? StyledEngineProvider.propTypes = {
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * By default, the styles are injected last in the <head> element of the page.
         * As a result, they gain more specificity than any other style sheet.
         * If you want to override MUI's styles, set this prop.
         */
        injectFirst: _propTypes.default.bool
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js
  var require_StyledEngineProvider2 = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider());
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = GlobalStyles3;
      var React68 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
      function isEmpty3(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0;
      }
      function GlobalStyles3(props) {
        const {
          styles: styles4,
          defaultTheme: defaultTheme2 = {}
        } = props;
        const globalStyles = typeof styles4 === "function" ? (themeInput) => styles4(isEmpty3(themeInput) ? defaultTheme2 : themeInput) : styles4;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles3.propTypes = {
        defaultTheme: _propTypes.default.object,
        styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/index.js
  var require_GlobalStyles2 = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles());
    }
  });

  // node_modules/@mui/styled-engine/node/index.js
  var require_node = __commonJS({
    "node_modules/@mui/styled-engine/node/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      Object.defineProperty(exports, "ThemeContext", {
        enumerable: true,
        get: function() {
          return _react.ThemeContext;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _react.css;
        }
      });
      exports.default = styled2;
      exports.internal_processStyles = void 0;
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _react.keyframes;
        }
      });
      var _styled = _interopRequireDefault((init_emotion_styled_browser_esm(), __toCommonJS(emotion_styled_browser_esm_exports)));
      var _react = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider2());
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles2());
      function styled2(tag, options) {
        const stylesFactory = (0, _styled.default)(tag, options);
        if (true) {
          return (...styles4) => {
            const component = typeof tag === "string" ? `"${tag}"` : "component";
            if (styles4.length === 0) {
              console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
            } else if (styles4.some((style3) => style3 === void 0)) {
              console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
            }
            return stylesFactory(...styles4);
          };
        }
        return stylesFactory;
      }
      var internal_processStyles = (tag, processor) => {
        if (Array.isArray(tag.__emotion_styles)) {
          tag.__emotion_styles = processor(tag.__emotion_styles);
        }
      };
      exports.internal_processStyles = internal_processStyles;
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends5() {
        module.exports = _extends5 = Object.assign ? Object.assign.bind() : function(target2) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target2[key] = source[key];
              }
            }
          }
          return target2;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _extends5.apply(this, arguments);
      }
      module.exports = _extends5, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/node/deepmerge/deepmerge.js
  var require_deepmerge = __commonJS({
    "node_modules/@mui/utils/node/deepmerge/deepmerge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deepmerge9;
      exports.isPlainObject = isPlainObject;
      var _extends22 = _interopRequireDefault(require_extends());
      function isPlainObject(item) {
        if (typeof item !== "object" || item === null) {
          return false;
        }
        const prototype = Object.getPrototypeOf(item);
        return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
      }
      function deepClone(source) {
        if (!isPlainObject(source)) {
          return source;
        }
        const output = {};
        Object.keys(source).forEach((key) => {
          output[key] = deepClone(source[key]);
        });
        return output;
      }
      function deepmerge9(target2, source, options = {
        clone: true
      }) {
        const output = options.clone ? (0, _extends22.default)({}, target2) : target2;
        if (isPlainObject(target2) && isPlainObject(source)) {
          Object.keys(source).forEach((key) => {
            if (key === "__proto__") {
              return;
            }
            if (isPlainObject(source[key]) && key in target2 && isPlainObject(target2[key])) {
              output[key] = deepmerge9(target2[key], source[key], options);
            } else if (options.clone) {
              output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
            } else {
              output[key] = source[key];
            }
          });
        }
        return output;
      }
    }
  });

  // node_modules/@mui/utils/node/deepmerge/index.js
  var require_deepmerge2 = __commonJS({
    "node_modules/@mui/utils/node/deepmerge/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _deepmerge.default;
        }
      });
      var _deepmerge = _interopRequireWildcard(require_deepmerge());
      Object.keys(_deepmerge).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _deepmerge[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _deepmerge[key];
          }
        });
      });
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/utils/node/capitalize/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/@mui/utils/node/capitalize/capitalize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = capitalize4;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      function capitalize4(string2) {
        if (typeof string2 !== "string") {
          throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : (0, _formatMuiErrorMessage2.default)(7));
        }
        return string2.charAt(0).toUpperCase() + string2.slice(1);
      }
    }
  });

  // node_modules/@mui/utils/node/capitalize/index.js
  var require_capitalize2 = __commonJS({
    "node_modules/@mui/utils/node/capitalize/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      var _capitalize = _interopRequireDefault(require_capitalize());
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment14 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment14;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/@mui/utils/node/getDisplayName/getDisplayName.js
  var require_getDisplayName = __commonJS({
    "node_modules/@mui/utils/node/getDisplayName/getDisplayName.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getDisplayName;
      exports.getFunctionName = getFunctionName;
      var _reactIs = require_react_is3();
      var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
      function getFunctionName(fn) {
        const match2 = `${fn}`.match(fnNameMatchRegex);
        const name2 = match2 && match2[1];
        return name2 || "";
      }
      function getFunctionComponentName(Component2, fallback = "") {
        return Component2.displayName || Component2.name || getFunctionName(Component2) || fallback;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        const functionName = getFunctionComponentName(innerType);
        return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
      }
      function getDisplayName(Component2) {
        if (Component2 == null) {
          return void 0;
        }
        if (typeof Component2 === "string") {
          return Component2;
        }
        if (typeof Component2 === "function") {
          return getFunctionComponentName(Component2, "Component");
        }
        if (typeof Component2 === "object") {
          switch (Component2.$$typeof) {
            case _reactIs.ForwardRef:
              return getWrappedName(Component2, Component2.render, "ForwardRef");
            case _reactIs.Memo:
              return getWrappedName(Component2, Component2.type, "memo");
            default:
              return void 0;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/@mui/utils/node/getDisplayName/index.js
  var require_getDisplayName2 = __commonJS({
    "node_modules/@mui/utils/node/getDisplayName/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _getDisplayName.default;
        }
      });
      var _getDisplayName = _interopRequireWildcard(require_getDisplayName());
      Object.keys(_getDisplayName).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _getDisplayName[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _getDisplayName[key];
          }
        });
      });
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/utils/node/clamp/clamp.js
  var require_clamp = __commonJS({
    "node_modules/@mui/utils/node/clamp/clamp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      function clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
        return Math.max(min, Math.min(val, max));
      }
      var _default = exports.default = clamp;
    }
  });

  // node_modules/@mui/utils/node/clamp/index.js
  var require_clamp2 = __commonJS({
    "node_modules/@mui/utils/node/clamp/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _clamp.default;
        }
      });
      var _clamp = _interopRequireDefault(require_clamp());
    }
  });

  // node_modules/@mui/system/merge.js
  var require_merge = __commonJS({
    "node_modules/@mui/system/merge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      function merge3(acc, item) {
        if (!item) {
          return acc;
        }
        return (0, _deepmerge.default)(acc, item, {
          clone: false
          // No need to clone deep, it's way faster.
        });
      }
      var _default = exports.default = merge3;
    }
  });

  // node_modules/@mui/system/responsivePropType.js
  var require_responsivePropType = __commonJS({
    "node_modules/@mui/system/responsivePropType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var responsivePropType2 = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
      var _default = exports.default = responsivePropType2;
    }
  });

  // node_modules/@mui/system/breakpoints.js
  var require_breakpoints = __commonJS({
    "node_modules/@mui/system/breakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.computeBreakpointsBase = computeBreakpointsBase;
      exports.createEmptyBreakpointObject = createEmptyBreakpointObject2;
      exports.default = void 0;
      exports.handleBreakpoints = handleBreakpoints2;
      exports.mergeBreakpointsInOrder = mergeBreakpointsInOrder;
      exports.removeUnusedBreakpoints = removeUnusedBreakpoints2;
      exports.resolveBreakpointValues = resolveBreakpointValues;
      exports.values = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _merge = _interopRequireDefault(require_merge());
      var values2 = exports.values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      };
      var defaultBreakpoints2 = {
        // Sorted ASC by size. That's important.
        // It can't be configured as it's used statically for propTypes.
        keys: ["xs", "sm", "md", "lg", "xl"],
        up: (key) => `@media (min-width:${values2[key]}px)`
      };
      function handleBreakpoints2(props, propValue, styleFromPropValue) {
        const theme = props.theme || {};
        if (Array.isArray(propValue)) {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          return propValue.reduce((acc, item, index) => {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
          }, {});
        }
        if (typeof propValue === "object") {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          return Object.keys(propValue).reduce((acc, breakpoint) => {
            if (Object.keys(themeBreakpoints.values || values2).indexOf(breakpoint) !== -1) {
              const mediaKey = themeBreakpoints.up(breakpoint);
              acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
              const cssKey = breakpoint;
              acc[cssKey] = propValue[cssKey];
            }
            return acc;
          }, {});
        }
        const output = styleFromPropValue(propValue);
        return output;
      }
      function breakpoints(styleFunction) {
        const newStyleFunction = (props) => {
          const theme = props.theme || {};
          const base5 = styleFunction(props);
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          const extended = themeBreakpoints.keys.reduce((acc, key) => {
            if (props[key]) {
              acc = acc || {};
              acc[themeBreakpoints.up(key)] = styleFunction((0, _extends22.default)({
                theme
              }, props[key]));
            }
            return acc;
          }, null);
          return (0, _merge.default)(base5, extended);
        };
        newStyleFunction.propTypes = true ? (0, _extends22.default)({}, styleFunction.propTypes, {
          xs: _propTypes.default.object,
          sm: _propTypes.default.object,
          md: _propTypes.default.object,
          lg: _propTypes.default.object,
          xl: _propTypes.default.object
        }) : {};
        newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
        return newStyleFunction;
      }
      function createEmptyBreakpointObject2(breakpointsInput = {}) {
        var _breakpointsInput$key;
        const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
          const breakpointStyleKey = breakpointsInput.up(key);
          acc[breakpointStyleKey] = {};
          return acc;
        }, {});
        return breakpointsInOrder || {};
      }
      function removeUnusedBreakpoints2(breakpointKeys, style3) {
        return breakpointKeys.reduce((acc, key) => {
          const breakpointOutput = acc[key];
          const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
          if (isBreakpointUnused) {
            delete acc[key];
          }
          return acc;
        }, style3);
      }
      function mergeBreakpointsInOrder(breakpointsInput, ...styles4) {
        const emptyBreakpoints = createEmptyBreakpointObject2(breakpointsInput);
        const mergedOutput = [emptyBreakpoints, ...styles4].reduce((prev2, next2) => (0, _deepmerge.default)(prev2, next2), {});
        return removeUnusedBreakpoints2(Object.keys(emptyBreakpoints), mergedOutput);
      }
      function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
        if (typeof breakpointValues !== "object") {
          return {};
        }
        const base5 = {};
        const breakpointsKeys = Object.keys(themeBreakpoints);
        if (Array.isArray(breakpointValues)) {
          breakpointsKeys.forEach((breakpoint, i) => {
            if (i < breakpointValues.length) {
              base5[breakpoint] = true;
            }
          });
        } else {
          breakpointsKeys.forEach((breakpoint) => {
            if (breakpointValues[breakpoint] != null) {
              base5[breakpoint] = true;
            }
          });
        }
        return base5;
      }
      function resolveBreakpointValues({
        values: breakpointValues,
        breakpoints: themeBreakpoints,
        base: customBase
      }) {
        const base5 = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
        const keys = Object.keys(base5);
        if (keys.length === 0) {
          return breakpointValues;
        }
        let previous;
        return keys.reduce((acc, breakpoint, i) => {
          if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
          } else if (typeof breakpointValues === "object") {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
          } else {
            acc[breakpoint] = breakpointValues;
          }
          return acc;
        }, {});
      }
      var _default = exports.default = breakpoints;
    }
  });

  // node_modules/@mui/system/style.js
  var require_style = __commonJS({
    "node_modules/@mui/system/style.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPath = getPath2;
      exports.getStyleValue = getStyleValue3;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      function getPath2(obj, path, checkVars = true) {
        if (!path || typeof path !== "string") {
          return null;
        }
        if (obj && obj.vars && checkVars) {
          const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
          if (val != null) {
            return val;
          }
        }
        return path.split(".").reduce((acc, item) => {
          if (acc && acc[item] != null) {
            return acc[item];
          }
          return null;
        }, obj);
      }
      function getStyleValue3(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
        let value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || userValue;
        } else {
          value = getPath2(themeMapping, propValueFinal) || userValue;
        }
        if (transform) {
          value = transform(value, userValue, themeMapping);
        }
        return value;
      }
      function style3(options) {
        const {
          prop,
          cssProperty = options.prop,
          themeKey,
          transform
        } = options;
        const fn = (props) => {
          if (props[prop] == null) {
            return null;
          }
          const propValue = props[prop];
          const theme = props.theme;
          const themeMapping = getPath2(theme, themeKey) || {};
          const styleFromPropValue = (propValueFinal) => {
            let value = getStyleValue3(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = getStyleValue3(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
        };
        fn.propTypes = true ? {
          [prop]: _responsivePropType.default
        } : {};
        fn.filterProps = [prop];
        return fn;
      }
      var _default = exports.default = style3;
    }
  });

  // node_modules/@mui/system/memoize.js
  var require_memoize = __commonJS({
    "node_modules/@mui/system/memoize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = memoize3;
      function memoize3(fn) {
        const cache2 = {};
        return (arg) => {
          if (cache2[arg] === void 0) {
            cache2[arg] = fn(arg);
          }
          return cache2[arg];
        };
      }
    }
  });

  // node_modules/@mui/system/spacing.js
  var require_spacing = __commonJS({
    "node_modules/@mui/system/spacing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createUnarySpacing = createUnarySpacing2;
      exports.createUnaryUnit = createUnaryUnit2;
      exports.default = void 0;
      exports.getStyleFromPropValue = getStyleFromPropValue2;
      exports.getValue = getValue2;
      exports.margin = margin2;
      exports.marginKeys = void 0;
      exports.padding = padding2;
      exports.paddingKeys = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      var _style = require_style();
      var _merge = _interopRequireDefault(require_merge());
      var _memoize = _interopRequireDefault(require_memoize());
      var properties2 = {
        m: "margin",
        p: "padding"
      };
      var directions2 = {
        t: "Top",
        r: "Right",
        b: "Bottom",
        l: "Left",
        x: ["Left", "Right"],
        y: ["Top", "Bottom"]
      };
      var aliases2 = {
        marginX: "mx",
        marginY: "my",
        paddingX: "px",
        paddingY: "py"
      };
      var getCssProperties2 = (0, _memoize.default)((prop) => {
        if (prop.length > 2) {
          if (aliases2[prop]) {
            prop = aliases2[prop];
          } else {
            return [prop];
          }
        }
        const [a, b] = prop.split("");
        const property = properties2[a];
        const direction = directions2[b] || "";
        return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
      });
      var marginKeys2 = exports.marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
      var paddingKeys2 = exports.paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
      var spacingKeys2 = [...marginKeys2, ...paddingKeys2];
      function createUnaryUnit2(theme, themeKey, defaultValue, propName) {
        var _getPath;
        const themeSpacing = (_getPath = (0, _style.getPath)(theme, themeKey, false)) != null ? _getPath : defaultValue;
        if (typeof themeSpacing === "number") {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (typeof abs2 !== "number") {
                console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
              }
            }
            return themeSpacing * abs2;
          };
        }
        if (Array.isArray(themeSpacing)) {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (!Number.isInteger(abs2)) {
                console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
              } else if (abs2 > themeSpacing.length - 1) {
                console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
              }
            }
            return themeSpacing[abs2];
          };
        }
        if (typeof themeSpacing === "function") {
          return themeSpacing;
        }
        if (true) {
          console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
        }
        return () => void 0;
      }
      function createUnarySpacing2(theme) {
        return createUnaryUnit2(theme, "spacing", 8, "spacing");
      }
      function getValue2(transformer, propValue) {
        if (typeof propValue === "string" || propValue == null) {
          return propValue;
        }
        const abs2 = Math.abs(propValue);
        const transformed = transformer(abs2);
        if (propValue >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      }
      function getStyleFromPropValue2(cssProperties, transformer) {
        return (propValue) => cssProperties.reduce((acc, cssProperty) => {
          acc[cssProperty] = getValue2(transformer, propValue);
          return acc;
        }, {});
      }
      function resolveCssProperty2(props, keys, prop, transformer) {
        if (keys.indexOf(prop) === -1) {
          return null;
        }
        const cssProperties = getCssProperties2(prop);
        const styleFromPropValue = getStyleFromPropValue2(cssProperties, transformer);
        const propValue = props[prop];
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
      }
      function style3(props, keys) {
        const transformer = createUnarySpacing2(props.theme);
        return Object.keys(props).map((prop) => resolveCssProperty2(props, keys, prop, transformer)).reduce(_merge.default, {});
      }
      function margin2(props) {
        return style3(props, marginKeys2);
      }
      margin2.propTypes = true ? marginKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      margin2.filterProps = marginKeys2;
      function padding2(props) {
        return style3(props, paddingKeys2);
      }
      padding2.propTypes = true ? paddingKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      padding2.filterProps = paddingKeys2;
      function spacing2(props) {
        return style3(props, spacingKeys2);
      }
      spacing2.propTypes = true ? spacingKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      spacing2.filterProps = spacingKeys2;
      var _default = exports.default = spacing2;
    }
  });

  // node_modules/@mui/system/compose.js
  var require_compose = __commonJS({
    "node_modules/@mui/system/compose.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _merge = _interopRequireDefault(require_merge());
      function compose2(...styles4) {
        const handlers = styles4.reduce((acc, style3) => {
          style3.filterProps.forEach((prop) => {
            acc[prop] = style3;
          });
          return acc;
        }, {});
        const fn = (props) => {
          return Object.keys(props).reduce((acc, prop) => {
            if (handlers[prop]) {
              return (0, _merge.default)(acc, handlers[prop](props));
            }
            return acc;
          }, {});
        };
        fn.propTypes = true ? styles4.reduce((acc, style3) => Object.assign(acc, style3.propTypes), {}) : {};
        fn.filterProps = styles4.reduce((acc, style3) => acc.concat(style3.filterProps), []);
        return fn;
      }
      var _default = exports.default = compose2;
    }
  });

  // node_modules/@mui/system/borders.js
  var require_borders = __commonJS({
    "node_modules/@mui/system/borders.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.borderTopColor = exports.borderTop = exports.borderRightColor = exports.borderRight = exports.borderRadius = exports.borderLeftColor = exports.borderLeft = exports.borderColor = exports.borderBottomColor = exports.borderBottom = exports.border = void 0;
      exports.borderTransform = borderTransform2;
      exports.outlineColor = exports.outline = exports.default = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      function borderTransform2(value) {
        if (typeof value !== "number") {
          return value;
        }
        return `${value}px solid`;
      }
      function createBorderStyle2(prop, transform) {
        return (0, _style.default)({
          prop,
          themeKey: "borders",
          transform
        });
      }
      var border2 = exports.border = createBorderStyle2("border", borderTransform2);
      var borderTop2 = exports.borderTop = createBorderStyle2("borderTop", borderTransform2);
      var borderRight2 = exports.borderRight = createBorderStyle2("borderRight", borderTransform2);
      var borderBottom2 = exports.borderBottom = createBorderStyle2("borderBottom", borderTransform2);
      var borderLeft2 = exports.borderLeft = createBorderStyle2("borderLeft", borderTransform2);
      var borderColor2 = exports.borderColor = createBorderStyle2("borderColor");
      var borderTopColor2 = exports.borderTopColor = createBorderStyle2("borderTopColor");
      var borderRightColor2 = exports.borderRightColor = createBorderStyle2("borderRightColor");
      var borderBottomColor2 = exports.borderBottomColor = createBorderStyle2("borderBottomColor");
      var borderLeftColor2 = exports.borderLeftColor = createBorderStyle2("borderLeftColor");
      var outline2 = exports.outline = createBorderStyle2("outline", borderTransform2);
      var outlineColor2 = exports.outlineColor = createBorderStyle2("outlineColor");
      var borderRadius2 = (props) => {
        if (props.borderRadius !== void 0 && props.borderRadius !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "shape.borderRadius", 4, "borderRadius");
          const styleFromPropValue = (propValue) => ({
            borderRadius: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
        }
        return null;
      };
      exports.borderRadius = borderRadius2;
      borderRadius2.propTypes = true ? {
        borderRadius: _responsivePropType.default
      } : {};
      borderRadius2.filterProps = ["borderRadius"];
      var borders2 = (0, _compose.default)(border2, borderTop2, borderRight2, borderBottom2, borderLeft2, borderColor2, borderTopColor2, borderRightColor2, borderBottomColor2, borderLeftColor2, borderRadius2, outline2, outlineColor2);
      var _default = exports.default = borders2;
    }
  });

  // node_modules/@mui/system/cssGrid.js
  var require_cssGrid = __commonJS({
    "node_modules/@mui/system/cssGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.rowGap = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridTemplateAreas = exports.gridRow = exports.gridColumn = exports.gridAutoRows = exports.gridAutoFlow = exports.gridAutoColumns = exports.gridArea = exports.gap = exports.default = exports.columnGap = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var gap2 = (props) => {
        if (props.gap !== void 0 && props.gap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "gap");
          const styleFromPropValue = (propValue) => ({
            gap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
        }
        return null;
      };
      exports.gap = gap2;
      gap2.propTypes = true ? {
        gap: _responsivePropType.default
      } : {};
      gap2.filterProps = ["gap"];
      var columnGap2 = (props) => {
        if (props.columnGap !== void 0 && props.columnGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "columnGap");
          const styleFromPropValue = (propValue) => ({
            columnGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
        }
        return null;
      };
      exports.columnGap = columnGap2;
      columnGap2.propTypes = true ? {
        columnGap: _responsivePropType.default
      } : {};
      columnGap2.filterProps = ["columnGap"];
      var rowGap2 = (props) => {
        if (props.rowGap !== void 0 && props.rowGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "rowGap");
          const styleFromPropValue = (propValue) => ({
            rowGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
        }
        return null;
      };
      exports.rowGap = rowGap2;
      rowGap2.propTypes = true ? {
        rowGap: _responsivePropType.default
      } : {};
      rowGap2.filterProps = ["rowGap"];
      var gridColumn2 = exports.gridColumn = (0, _style.default)({
        prop: "gridColumn"
      });
      var gridRow2 = exports.gridRow = (0, _style.default)({
        prop: "gridRow"
      });
      var gridAutoFlow2 = exports.gridAutoFlow = (0, _style.default)({
        prop: "gridAutoFlow"
      });
      var gridAutoColumns2 = exports.gridAutoColumns = (0, _style.default)({
        prop: "gridAutoColumns"
      });
      var gridAutoRows2 = exports.gridAutoRows = (0, _style.default)({
        prop: "gridAutoRows"
      });
      var gridTemplateColumns2 = exports.gridTemplateColumns = (0, _style.default)({
        prop: "gridTemplateColumns"
      });
      var gridTemplateRows2 = exports.gridTemplateRows = (0, _style.default)({
        prop: "gridTemplateRows"
      });
      var gridTemplateAreas2 = exports.gridTemplateAreas = (0, _style.default)({
        prop: "gridTemplateAreas"
      });
      var gridArea2 = exports.gridArea = (0, _style.default)({
        prop: "gridArea"
      });
      var grid2 = (0, _compose.default)(gap2, columnGap2, rowGap2, gridColumn2, gridRow2, gridAutoFlow2, gridAutoColumns2, gridAutoRows2, gridTemplateColumns2, gridTemplateRows2, gridTemplateAreas2, gridArea2);
      var _default = exports.default = grid2;
    }
  });

  // node_modules/@mui/system/palette.js
  var require_palette = __commonJS({
    "node_modules/@mui/system/palette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.color = exports.bgcolor = exports.backgroundColor = void 0;
      exports.paletteTransform = paletteTransform2;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      function paletteTransform2(value, userValue) {
        if (userValue === "grey") {
          return userValue;
        }
        return value;
      }
      var color2 = exports.color = (0, _style.default)({
        prop: "color",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var bgcolor2 = exports.bgcolor = (0, _style.default)({
        prop: "bgcolor",
        cssProperty: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var backgroundColor2 = exports.backgroundColor = (0, _style.default)({
        prop: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var palette2 = (0, _compose.default)(color2, bgcolor2, backgroundColor2);
      var _default = exports.default = palette2;
    }
  });

  // node_modules/@mui/system/sizing.js
  var require_sizing = __commonJS({
    "node_modules/@mui/system/sizing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.sizeWidth = exports.sizeHeight = exports.minWidth = exports.minHeight = exports.maxWidth = exports.maxHeight = exports.height = exports.default = exports.boxSizing = void 0;
      exports.sizingTransform = sizingTransform2;
      exports.width = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _breakpoints = require_breakpoints();
      function sizingTransform2(value) {
        return value <= 1 && value !== 0 ? `${value * 100}%` : value;
      }
      var width2 = exports.width = (0, _style.default)({
        prop: "width",
        transform: sizingTransform2
      });
      var maxWidth2 = (props) => {
        if (props.maxWidth !== void 0 && props.maxWidth !== null) {
          const styleFromPropValue = (propValue) => {
            var _props$theme, _props$theme2;
            const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || _breakpoints.values[propValue];
            if (!breakpoint) {
              return {
                maxWidth: sizingTransform2(propValue)
              };
            }
            if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
              return {
                maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
              };
            }
            return {
              maxWidth: breakpoint
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
        }
        return null;
      };
      exports.maxWidth = maxWidth2;
      maxWidth2.filterProps = ["maxWidth"];
      var minWidth2 = exports.minWidth = (0, _style.default)({
        prop: "minWidth",
        transform: sizingTransform2
      });
      var height2 = exports.height = (0, _style.default)({
        prop: "height",
        transform: sizingTransform2
      });
      var maxHeight2 = exports.maxHeight = (0, _style.default)({
        prop: "maxHeight",
        transform: sizingTransform2
      });
      var minHeight2 = exports.minHeight = (0, _style.default)({
        prop: "minHeight",
        transform: sizingTransform2
      });
      var sizeWidth2 = exports.sizeWidth = (0, _style.default)({
        prop: "size",
        cssProperty: "width",
        transform: sizingTransform2
      });
      var sizeHeight2 = exports.sizeHeight = (0, _style.default)({
        prop: "size",
        cssProperty: "height",
        transform: sizingTransform2
      });
      var boxSizing2 = exports.boxSizing = (0, _style.default)({
        prop: "boxSizing"
      });
      var sizing2 = (0, _compose.default)(width2, maxWidth2, minWidth2, height2, maxHeight2, minHeight2, boxSizing2);
      var _default = exports.default = sizing2;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
  var require_defaultSxConfig = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _spacing = require_spacing();
      var _borders = require_borders();
      var _cssGrid = require_cssGrid();
      var _palette = require_palette();
      var _sizing = require_sizing();
      var defaultSxConfig3 = {
        // borders
        border: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderTop: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderRight: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderBottom: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderLeft: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderColor: {
          themeKey: "palette"
        },
        borderTopColor: {
          themeKey: "palette"
        },
        borderRightColor: {
          themeKey: "palette"
        },
        borderBottomColor: {
          themeKey: "palette"
        },
        borderLeftColor: {
          themeKey: "palette"
        },
        outline: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        outlineColor: {
          themeKey: "palette"
        },
        borderRadius: {
          themeKey: "shape.borderRadius",
          style: _borders.borderRadius
        },
        // palette
        color: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        bgcolor: {
          themeKey: "palette",
          cssProperty: "backgroundColor",
          transform: _palette.paletteTransform
        },
        backgroundColor: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        // spacing
        p: {
          style: _spacing.padding
        },
        pt: {
          style: _spacing.padding
        },
        pr: {
          style: _spacing.padding
        },
        pb: {
          style: _spacing.padding
        },
        pl: {
          style: _spacing.padding
        },
        px: {
          style: _spacing.padding
        },
        py: {
          style: _spacing.padding
        },
        padding: {
          style: _spacing.padding
        },
        paddingTop: {
          style: _spacing.padding
        },
        paddingRight: {
          style: _spacing.padding
        },
        paddingBottom: {
          style: _spacing.padding
        },
        paddingLeft: {
          style: _spacing.padding
        },
        paddingX: {
          style: _spacing.padding
        },
        paddingY: {
          style: _spacing.padding
        },
        paddingInline: {
          style: _spacing.padding
        },
        paddingInlineStart: {
          style: _spacing.padding
        },
        paddingInlineEnd: {
          style: _spacing.padding
        },
        paddingBlock: {
          style: _spacing.padding
        },
        paddingBlockStart: {
          style: _spacing.padding
        },
        paddingBlockEnd: {
          style: _spacing.padding
        },
        m: {
          style: _spacing.margin
        },
        mt: {
          style: _spacing.margin
        },
        mr: {
          style: _spacing.margin
        },
        mb: {
          style: _spacing.margin
        },
        ml: {
          style: _spacing.margin
        },
        mx: {
          style: _spacing.margin
        },
        my: {
          style: _spacing.margin
        },
        margin: {
          style: _spacing.margin
        },
        marginTop: {
          style: _spacing.margin
        },
        marginRight: {
          style: _spacing.margin
        },
        marginBottom: {
          style: _spacing.margin
        },
        marginLeft: {
          style: _spacing.margin
        },
        marginX: {
          style: _spacing.margin
        },
        marginY: {
          style: _spacing.margin
        },
        marginInline: {
          style: _spacing.margin
        },
        marginInlineStart: {
          style: _spacing.margin
        },
        marginInlineEnd: {
          style: _spacing.margin
        },
        marginBlock: {
          style: _spacing.margin
        },
        marginBlockStart: {
          style: _spacing.margin
        },
        marginBlockEnd: {
          style: _spacing.margin
        },
        // display
        displayPrint: {
          cssProperty: false,
          transform: (value) => ({
            "@media print": {
              display: value
            }
          })
        },
        display: {},
        overflow: {},
        textOverflow: {},
        visibility: {},
        whiteSpace: {},
        // flexbox
        flexBasis: {},
        flexDirection: {},
        flexWrap: {},
        justifyContent: {},
        alignItems: {},
        alignContent: {},
        order: {},
        flex: {},
        flexGrow: {},
        flexShrink: {},
        alignSelf: {},
        justifyItems: {},
        justifySelf: {},
        // grid
        gap: {
          style: _cssGrid.gap
        },
        rowGap: {
          style: _cssGrid.rowGap
        },
        columnGap: {
          style: _cssGrid.columnGap
        },
        gridColumn: {},
        gridRow: {},
        gridAutoFlow: {},
        gridAutoColumns: {},
        gridAutoRows: {},
        gridTemplateColumns: {},
        gridTemplateRows: {},
        gridTemplateAreas: {},
        gridArea: {},
        // positions
        position: {},
        zIndex: {
          themeKey: "zIndex"
        },
        top: {},
        right: {},
        bottom: {},
        left: {},
        // shadows
        boxShadow: {
          themeKey: "shadows"
        },
        // sizing
        width: {
          transform: _sizing.sizingTransform
        },
        maxWidth: {
          style: _sizing.maxWidth
        },
        minWidth: {
          transform: _sizing.sizingTransform
        },
        height: {
          transform: _sizing.sizingTransform
        },
        maxHeight: {
          transform: _sizing.sizingTransform
        },
        minHeight: {
          transform: _sizing.sizingTransform
        },
        boxSizing: {},
        // typography
        fontFamily: {
          themeKey: "typography"
        },
        fontSize: {
          themeKey: "typography"
        },
        fontStyle: {
          themeKey: "typography"
        },
        fontWeight: {
          themeKey: "typography"
        },
        letterSpacing: {},
        textTransform: {},
        lineHeight: {},
        textAlign: {},
        typography: {
          cssProperty: false,
          themeKey: "typography"
        }
      };
      var _default = exports.default = defaultSxConfig3;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
  var require_styleFunctionSx = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx2;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _merge = _interopRequireDefault(require_merge());
      var _style = require_style();
      var _breakpoints = require_breakpoints();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function objectsHaveSameKeys2(...objects) {
        const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
        const union = new Set(allKeys);
        return objects.every((object) => union.size === Object.keys(object).length);
      }
      function callIfFn2(maybeFn, arg) {
        return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
      }
      function unstable_createStyleFunctionSx2() {
        function getThemeValue(prop, val, theme, config) {
          const props = {
            [prop]: val,
            theme
          };
          const options = config[prop];
          if (!options) {
            return {
              [prop]: val
            };
          }
          const {
            cssProperty = prop,
            themeKey,
            transform,
            style: style3
          } = options;
          if (val == null) {
            return null;
          }
          if (themeKey === "typography" && val === "inherit") {
            return {
              [prop]: val
            };
          }
          const themeMapping = (0, _style.getPath)(theme, themeKey) || {};
          if (style3) {
            return style3(props);
          }
          const styleFromPropValue = (propValueFinal) => {
            let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
        }
        function styleFunctionSx4(props) {
          var _theme$unstable_sxCon;
          const {
            sx,
            theme = {}
          } = props || {};
          if (!sx) {
            return null;
          }
          const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : _defaultSxConfig.default;
          function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === "function") {
              sxObject = sxInput(theme);
            } else if (typeof sxInput !== "object") {
              return sxInput;
            }
            if (!sxObject) {
              return null;
            }
            const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css2 = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey) => {
              const value = callIfFn2(sxObject[styleKey], theme);
              if (value !== null && value !== void 0) {
                if (typeof value === "object") {
                  if (config[styleKey]) {
                    css2 = (0, _merge.default)(css2, getThemeValue(styleKey, value, theme, config));
                  } else {
                    const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                      theme
                    }, value, (x) => ({
                      [styleKey]: x
                    }));
                    if (objectsHaveSameKeys2(breakpointsValues, value)) {
                      css2[styleKey] = styleFunctionSx4({
                        sx: value,
                        theme
                      });
                    } else {
                      css2 = (0, _merge.default)(css2, breakpointsValues);
                    }
                  }
                } else {
                  css2 = (0, _merge.default)(css2, getThemeValue(styleKey, value, theme, config));
                }
              }
            });
            return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css2);
          }
          return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
        }
        return styleFunctionSx4;
      }
      var styleFunctionSx3 = unstable_createStyleFunctionSx2();
      styleFunctionSx3.filterProps = ["sx"];
      var _default = exports.default = styleFunctionSx3;
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports, module) {
      function _objectWithoutPropertiesLoose3(source, excluded) {
        if (source == null)
          return {};
        var target2 = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target2[key] = source[key];
        }
        return target2;
      }
      module.exports = _objectWithoutPropertiesLoose3, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/extendSxProp.js
  var require_extendSxProp = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = extendSxProp;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = require_deepmerge2();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _excluded38 = ["sx"];
      var splitProps = (props) => {
        var _props$theme$unstable, _props$theme;
        const result = {
          systemProps: {},
          otherProps: {}
        };
        const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : _defaultSxConfig.default;
        Object.keys(props).forEach((prop) => {
          if (config[prop]) {
            result.systemProps[prop] = props[prop];
          } else {
            result.otherProps[prop] = props[prop];
          }
        });
        return result;
      };
      function extendSxProp(props) {
        const {
          sx: inSx
        } = props, other = (0, _objectWithoutPropertiesLoose22.default)(props, _excluded38);
        const {
          systemProps,
          otherProps
        } = splitProps(other);
        let finalSx;
        if (Array.isArray(inSx)) {
          finalSx = [systemProps, ...inSx];
        } else if (typeof inSx === "function") {
          finalSx = (...args) => {
            const result = inSx(...args);
            if (!(0, _deepmerge.isPlainObject)(result)) {
              return systemProps;
            }
            return (0, _extends22.default)({}, systemProps, result);
          };
        } else {
          finalSx = (0, _extends22.default)({}, systemProps, inSx);
        }
        return (0, _extends22.default)({}, otherProps, {
          sx: finalSx
        });
      }
    }
  });

  // node_modules/@mui/system/styleFunctionSx/index.js
  var require_styleFunctionSx2 = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "extendSxProp", {
        enumerable: true,
        get: function() {
          return _extendSxProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports, "unstable_defaultSxConfig", {
        enumerable: true,
        get: function() {
          return _defaultSxConfig.default;
        }
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
      var _extendSxProp = _interopRequireDefault(require_extendSxProp());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/system/createTheme/createBreakpoints.js
  var require_createBreakpoints = __commonJS({
    "node_modules/@mui/system/createTheme/createBreakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.breakpointKeys = void 0;
      exports.default = createBreakpoints2;
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends22 = _interopRequireDefault(require_extends());
      var _excluded38 = ["values", "unit", "step"];
      var breakpointKeys = exports.breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
      var sortBreakpointsValues2 = (values2) => {
        const breakpointsAsArray = Object.keys(values2).map((key) => ({
          key,
          val: values2[key]
        })) || [];
        breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
        return breakpointsAsArray.reduce((acc, obj) => {
          return (0, _extends22.default)({}, acc, {
            [obj.key]: obj.val
          });
        }, {});
      };
      function createBreakpoints2(breakpoints) {
        const {
          // The breakpoint **start** at this value.
          // For instance with the first breakpoint xs: [xs, sm).
          values: values2 = {
            xs: 0,
            // phone
            sm: 600,
            // tablet
            md: 900,
            // small laptop
            lg: 1200,
            // desktop
            xl: 1536
            // large screen
          },
          unit = "px",
          step = 5
        } = breakpoints, other = (0, _objectWithoutPropertiesLoose22.default)(breakpoints, _excluded38);
        const sortedValues = sortBreakpointsValues2(values2);
        const keys = Object.keys(sortedValues);
        function up(key) {
          const value = typeof values2[key] === "number" ? values2[key] : key;
          return `@media (min-width:${value}${unit})`;
        }
        function down(key) {
          const value = typeof values2[key] === "number" ? values2[key] : key;
          return `@media (max-width:${value - step / 100}${unit})`;
        }
        function between(start, end) {
          const endIndex = keys.indexOf(end);
          return `@media (min-width:${typeof values2[start] === "number" ? values2[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys[endIndex]] === "number" ? values2[keys[endIndex]] : end) - step / 100}${unit})`;
        }
        function only(key) {
          if (keys.indexOf(key) + 1 < keys.length) {
            return between(key, keys[keys.indexOf(key) + 1]);
          }
          return up(key);
        }
        function not(key) {
          const keyIndex = keys.indexOf(key);
          if (keyIndex === 0) {
            return up(keys[1]);
          }
          if (keyIndex === keys.length - 1) {
            return down(keys[keyIndex]);
          }
          return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
        }
        return (0, _extends22.default)({
          keys,
          values: sortedValues,
          up,
          down,
          between,
          only,
          not,
          unit
        }, other);
      }
    }
  });

  // node_modules/@mui/system/createTheme/shape.js
  var require_shape = __commonJS({
    "node_modules/@mui/system/createTheme/shape.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shape2 = {
        borderRadius: 4
      };
      var _default = exports.default = shape2;
    }
  });

  // node_modules/@mui/system/createTheme/createSpacing.js
  var require_createSpacing = __commonJS({
    "node_modules/@mui/system/createTheme/createSpacing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSpacing2;
      var _spacing = require_spacing();
      function createSpacing2(spacingInput = 8) {
        if (spacingInput.mui) {
          return spacingInput;
        }
        const transform = (0, _spacing.createUnarySpacing)({
          spacing: spacingInput
        });
        const spacing2 = (...argsInput) => {
          if (true) {
            if (!(argsInput.length <= 4)) {
              console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
            }
          }
          const args = argsInput.length === 0 ? [1] : argsInput;
          return args.map((argument) => {
            const output = transform(argument);
            return typeof output === "number" ? `${output}px` : output;
          }).join(" ");
        };
        spacing2.mui = true;
        return spacing2;
      }
    }
  });

  // node_modules/@mui/system/createTheme/applyStyles.js
  var require_applyStyles = __commonJS({
    "node_modules/@mui/system/createTheme/applyStyles.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = applyStyles2;
      function applyStyles2(key, styles4) {
        const theme = this;
        if (theme.vars && typeof theme.getColorSchemeSelector === "function") {
          const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
          return {
            [selector]: styles4
          };
        }
        if (theme.palette.mode === key) {
          return styles4;
        }
        return {};
      }
    }
  });

  // node_modules/@mui/system/createTheme/createTheme.js
  var require_createTheme = __commonJS({
    "node_modules/@mui/system/createTheme/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _shape = _interopRequireDefault(require_shape());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _applyStyles = _interopRequireDefault(require_applyStyles());
      var _excluded38 = ["breakpoints", "palette", "spacing", "shape"];
      function createTheme3(options = {}, ...args) {
        const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose22.default)(options, _excluded38);
        const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
        const spacing2 = (0, _createSpacing.default)(spacingInput);
        let muiTheme = (0, _deepmerge.default)({
          breakpoints,
          direction: "ltr",
          components: {},
          // Inject component definitions.
          palette: (0, _extends22.default)({
            mode: "light"
          }, paletteInput),
          spacing: spacing2,
          shape: (0, _extends22.default)({}, _shape.default, shapeInput)
        }, other);
        muiTheme.applyStyles = _applyStyles.default;
        muiTheme = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), muiTheme);
        muiTheme.unstable_sxConfig = (0, _extends22.default)({}, _defaultSxConfig.default, other == null ? void 0 : other.unstable_sxConfig);
        muiTheme.unstable_sx = function sx(props) {
          return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var _default = exports.default = createTheme3;
    }
  });

  // node_modules/@mui/system/createTheme/index.js
  var require_createTheme2 = __commonJS({
    "node_modules/@mui/system/createTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      Object.defineProperty(exports, "private_createBreakpoints", {
        enumerable: true,
        get: function() {
          return _createBreakpoints.default;
        }
      });
      Object.defineProperty(exports, "unstable_applyStyles", {
        enumerable: true,
        get: function() {
          return _applyStyles.default;
        }
      });
      var _createTheme = _interopRequireDefault(require_createTheme());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _applyStyles = _interopRequireDefault(require_applyStyles());
    }
  });

  // node_modules/@mui/system/colorManipulator.js
  var require_colorManipulator = __commonJS({
    "node_modules/@mui/system/colorManipulator.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.alpha = alpha2;
      exports.blend = blend;
      exports.colorChannel = void 0;
      exports.darken = darken2;
      exports.decomposeColor = decomposeColor;
      exports.emphasize = emphasize;
      exports.getContrastRatio = getContrastRatio2;
      exports.getLuminance = getLuminance;
      exports.hexToRgb = hexToRgb;
      exports.hslToRgb = hslToRgb;
      exports.lighten = lighten2;
      exports.private_safeAlpha = private_safeAlpha;
      exports.private_safeColorChannel = void 0;
      exports.private_safeDarken = private_safeDarken;
      exports.private_safeEmphasize = private_safeEmphasize;
      exports.private_safeLighten = private_safeLighten;
      exports.recomposeColor = recomposeColor;
      exports.rgbToHex = rgbToHex;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      var _clamp = _interopRequireDefault(require_clamp2());
      function clampWrapper(value, min = 0, max = 1) {
        if (true) {
          if (value < min || value > max) {
            console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
          }
        }
        return (0, _clamp.default)(value, min, max);
      }
      function hexToRgb(color2) {
        color2 = color2.slice(1);
        const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
        let colors = color2.match(re);
        if (colors && colors[0].length === 1) {
          colors = colors.map((n) => n + n);
        }
        return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
          return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
        }).join(", ")})` : "";
      }
      function intToHex(int) {
        const hex = int.toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }
      function decomposeColor(color2) {
        if (color2.type) {
          return color2;
        }
        if (color2.charAt(0) === "#") {
          return decomposeColor(hexToRgb(color2));
        }
        const marker = color2.indexOf("(");
        const type = color2.substring(0, marker);
        if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
          throw new Error(true ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color2));
        }
        let values2 = color2.substring(marker + 1, color2.length - 1);
        let colorSpace;
        if (type === "color") {
          values2 = values2.split(" ");
          colorSpace = values2.shift();
          if (values2.length === 4 && values2[3].charAt(0) === "/") {
            values2[3] = values2[3].slice(1);
          }
          if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
            throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));
          }
        } else {
          values2 = values2.split(",");
        }
        values2 = values2.map((value) => parseFloat(value));
        return {
          type,
          values: values2,
          colorSpace
        };
      }
      var colorChannel = (color2) => {
        const decomposedColor = decomposeColor(color2);
        return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
      };
      exports.colorChannel = colorChannel;
      var private_safeColorChannel = (color2, warning2) => {
        try {
          return colorChannel(color2);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      };
      exports.private_safeColorChannel = private_safeColorChannel;
      function recomposeColor(color2) {
        const {
          type,
          colorSpace
        } = color2;
        let {
          values: values2
        } = color2;
        if (type.indexOf("rgb") !== -1) {
          values2 = values2.map((n, i) => i < 3 ? parseInt(n, 10) : n);
        } else if (type.indexOf("hsl") !== -1) {
          values2[1] = `${values2[1]}%`;
          values2[2] = `${values2[2]}%`;
        }
        if (type.indexOf("color") !== -1) {
          values2 = `${colorSpace} ${values2.join(" ")}`;
        } else {
          values2 = `${values2.join(", ")}`;
        }
        return `${type}(${values2})`;
      }
      function rgbToHex(color2) {
        if (color2.indexOf("#") === 0) {
          return color2;
        }
        const {
          values: values2
        } = decomposeColor(color2);
        return `#${values2.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
      }
      function hslToRgb(color2) {
        color2 = decomposeColor(color2);
        const {
          values: values2
        } = color2;
        const h = values2[0];
        const s = values2[1] / 100;
        const l = values2[2] / 100;
        const a = s * Math.min(l, 1 - l);
        const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        let type = "rgb";
        const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        if (color2.type === "hsla") {
          type += "a";
          rgb.push(values2[3]);
        }
        return recomposeColor({
          type,
          values: rgb
        });
      }
      function getLuminance(color2) {
        color2 = decomposeColor(color2);
        let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
        rgb = rgb.map((val) => {
          if (color2.type !== "color") {
            val /= 255;
          }
          return val <= 0.03928 ? val / 12.92 : __pow((val + 0.055) / 1.055, 2.4);
        });
        return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
      }
      function getContrastRatio2(foreground, background) {
        const lumA = getLuminance(foreground);
        const lumB = getLuminance(background);
        return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
      }
      function alpha2(color2, value) {
        color2 = decomposeColor(color2);
        value = clampWrapper(value);
        if (color2.type === "rgb" || color2.type === "hsl") {
          color2.type += "a";
        }
        if (color2.type === "color") {
          color2.values[3] = `/${value}`;
        } else {
          color2.values[3] = value;
        }
        return recomposeColor(color2);
      }
      function private_safeAlpha(color2, value, warning2) {
        try {
          return alpha2(color2, value);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      }
      function darken2(color2, coefficient) {
        color2 = decomposeColor(color2);
        coefficient = clampWrapper(coefficient);
        if (color2.type.indexOf("hsl") !== -1) {
          color2.values[2] *= 1 - coefficient;
        } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color2.values[i] *= 1 - coefficient;
          }
        }
        return recomposeColor(color2);
      }
      function private_safeDarken(color2, coefficient, warning2) {
        try {
          return darken2(color2, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      }
      function lighten2(color2, coefficient) {
        color2 = decomposeColor(color2);
        coefficient = clampWrapper(coefficient);
        if (color2.type.indexOf("hsl") !== -1) {
          color2.values[2] += (100 - color2.values[2]) * coefficient;
        } else if (color2.type.indexOf("rgb") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color2.values[i] += (255 - color2.values[i]) * coefficient;
          }
        } else if (color2.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color2.values[i] += (1 - color2.values[i]) * coefficient;
          }
        }
        return recomposeColor(color2);
      }
      function private_safeLighten(color2, coefficient, warning2) {
        try {
          return lighten2(color2, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      }
      function emphasize(color2, coefficient = 0.15) {
        return getLuminance(color2) > 0.5 ? darken2(color2, coefficient) : lighten2(color2, coefficient);
      }
      function private_safeEmphasize(color2, coefficient, warning2) {
        try {
          return private_safeEmphasize(color2, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color2;
        }
      }
      function blend(background, overlay, opacity, gamma = 1) {
        const blendChannel = (b, o) => Math.round(__pow(__pow(b, 1 / gamma) * (1 - opacity) + __pow(o, 1 / gamma) * opacity, gamma));
        const backgroundColor2 = decomposeColor(background);
        const overlayColor = decomposeColor(overlay);
        const rgb = [blendChannel(backgroundColor2.values[0], overlayColor.values[0]), blendChannel(backgroundColor2.values[1], overlayColor.values[1]), blendChannel(backgroundColor2.values[2], overlayColor.values[2])];
        return recomposeColor({
          type: "rgb",
          values: rgb
        });
      }
    }
  });

  // node_modules/@mui/system/createStyled.js
  var require_createStyled = __commonJS({
    "node_modules/@mui/system/createStyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStyled4;
      exports.shouldForwardProp = shouldForwardProp;
      exports.systemDefaultTheme = void 0;
      var _extends22 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose22 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _styledEngine = _interopRequireWildcard(require_node());
      var _deepmerge = require_deepmerge2();
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName2());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
      var _excluded38 = ["ownerState"];
      var _excluded213 = ["variants"];
      var _excluded39 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap)
          return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule)
          return e;
        if (null === e || "object" != typeof e && "function" != typeof e)
          return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }
      function isEmpty3(obj) {
        return Object.keys(obj).length === 0;
      }
      function isStringTag(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96;
      }
      function shouldForwardProp(prop) {
        return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
      }
      var systemDefaultTheme2 = exports.systemDefaultTheme = (0, _createTheme.default)();
      var lowercaseFirstLetter = (string2) => {
        if (!string2) {
          return string2;
        }
        return string2.charAt(0).toLowerCase() + string2.slice(1);
      };
      function resolveTheme({
        defaultTheme: defaultTheme2,
        theme,
        themeId
      }) {
        return isEmpty3(theme) ? defaultTheme2 : theme[themeId] || theme;
      }
      function defaultOverridesResolver(slot) {
        if (!slot) {
          return null;
        }
        return (props, styles4) => styles4[slot];
      }
      function processStyleArg(callableStyle, _ref) {
        let {
          ownerState
        } = _ref, props = (0, _objectWithoutPropertiesLoose22.default)(_ref, _excluded38);
        const resolvedStylesArg = typeof callableStyle === "function" ? callableStyle((0, _extends22.default)({
          ownerState
        }, props)) : callableStyle;
        if (Array.isArray(resolvedStylesArg)) {
          return resolvedStylesArg.flatMap((resolvedStyle) => processStyleArg(resolvedStyle, (0, _extends22.default)({
            ownerState
          }, props)));
        }
        if (!!resolvedStylesArg && typeof resolvedStylesArg === "object" && Array.isArray(resolvedStylesArg.variants)) {
          const {
            variants: variants2 = []
          } = resolvedStylesArg, otherStyles = (0, _objectWithoutPropertiesLoose22.default)(resolvedStylesArg, _excluded213);
          let result = otherStyles;
          variants2.forEach((variant) => {
            let isMatch = true;
            if (typeof variant.props === "function") {
              isMatch = variant.props((0, _extends22.default)({
                ownerState
              }, props, ownerState));
            } else {
              Object.keys(variant.props).forEach((key) => {
                if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
                  isMatch = false;
                }
              });
            }
            if (isMatch) {
              if (!Array.isArray(result)) {
                result = [result];
              }
              result.push(typeof variant.style === "function" ? variant.style((0, _extends22.default)({
                ownerState
              }, props, ownerState)) : variant.style);
            }
          });
          return result;
        }
        return resolvedStylesArg;
      }
      function createStyled4(input = {}) {
        const {
          themeId,
          defaultTheme: defaultTheme2 = systemDefaultTheme2,
          rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
          slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
        } = input;
        const systemSx = (props) => {
          return (0, _styleFunctionSx.default)((0, _extends22.default)({}, props, {
            theme: resolveTheme((0, _extends22.default)({}, props, {
              defaultTheme: defaultTheme2,
              themeId
            }))
          }));
        };
        systemSx.__mui_systemSx = true;
        return (tag, inputOptions = {}) => {
          (0, _styledEngine.internal_processStyles)(tag, (styles4) => styles4.filter((style3) => !(style3 != null && style3.__mui_systemSx)));
          const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            // TODO v6: remove `lowercaseFirstLetter()` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
          } = inputOptions, options = (0, _objectWithoutPropertiesLoose22.default)(inputOptions, _excluded39);
          const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
            // TODO v6: remove `Root` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
          );
          const skipSx = inputSkipSx || false;
          let label;
          if (true) {
            if (componentName) {
              label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
            }
          }
          let shouldForwardPropOption = shouldForwardProp;
          if (componentSlot === "Root" || componentSlot === "root") {
            shouldForwardPropOption = rootShouldForwardProp2;
          } else if (componentSlot) {
            shouldForwardPropOption = slotShouldForwardProp2;
          } else if (isStringTag(tag)) {
            shouldForwardPropOption = void 0;
          }
          const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends22.default)({
            shouldForwardProp: shouldForwardPropOption,
            label
          }, options));
          const transformStyleArg = (stylesArg) => {
            if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg || (0, _deepmerge.isPlainObject)(stylesArg)) {
              return (props) => processStyleArg(stylesArg, (0, _extends22.default)({}, props, {
                theme: resolveTheme({
                  theme: props.theme,
                  defaultTheme: defaultTheme2,
                  themeId
                })
              }));
            }
            return stylesArg;
          };
          const muiStyledResolver = (styleArg, ...expressions) => {
            let transformedStyleArg = transformStyleArg(styleArg);
            const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
            if (componentName && overridesResolver) {
              expressionsWithDefaultTheme.push((props) => {
                const theme = resolveTheme((0, _extends22.default)({}, props, {
                  defaultTheme: defaultTheme2,
                  themeId
                }));
                if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
                  return null;
                }
                const styleOverrides = theme.components[componentName].styleOverrides;
                const resolvedStyleOverrides = {};
                Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                  resolvedStyleOverrides[slotKey] = processStyleArg(slotStyle, (0, _extends22.default)({}, props, {
                    theme
                  }));
                });
                return overridesResolver(props, resolvedStyleOverrides);
              });
            }
            if (componentName && !skipVariantsResolver) {
              expressionsWithDefaultTheme.push((props) => {
                var _theme$components;
                const theme = resolveTheme((0, _extends22.default)({}, props, {
                  defaultTheme: defaultTheme2,
                  themeId
                }));
                const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
                return processStyleArg({
                  variants: themeVariants
                }, (0, _extends22.default)({}, props, {
                  theme
                }));
              });
            }
            if (!skipSx) {
              expressionsWithDefaultTheme.push(systemSx);
            }
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
              const placeholders = new Array(numOfCustomFnsApplied).fill("");
              transformedStyleArg = [...styleArg, ...placeholders];
              transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
            }
            const Component2 = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            if (true) {
              let displayName;
              if (componentName) {
                displayName = `${componentName}${(0, _capitalize.default)(componentSlot || "")}`;
              }
              if (displayName === void 0) {
                displayName = `Styled(${(0, _getDisplayName.default)(tag)})`;
              }
              Component2.displayName = displayName;
            }
            if (tag.muiName) {
              Component2.muiName = tag.muiName;
            }
            return Component2;
          };
          if (defaultStyledResolver.withConfig) {
            muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
          }
          return muiStyledResolver;
        };
      }
    }
  });

  // node_modules/dexie/dist/dexie.js
  var require_dexie = __commonJS({
    "node_modules/dexie/dist/dexie.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.Dexie = factory());
      })(exports, function() {
        "use strict";
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        function __extends(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        }
        var __assign = function() {
          __assign = Object.assign || function __assign2(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
            }
            return t;
          };
          return __assign.apply(this, arguments);
        };
        function __spreadArray(to, from7, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from7.length, ar; i < l; i++) {
              if (ar || !(i in from7)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from7, 0, i);
                ar[i] = from7[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from7));
        }
        var _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
        var keys = Object.keys;
        var isArray2 = Array.isArray;
        if (typeof Promise !== "undefined" && !_global.Promise) {
          _global.Promise = Promise;
        }
        function extend(obj, extension) {
          if (typeof extension !== "object")
            return obj;
          keys(extension).forEach(function(key) {
            obj[key] = extension[key];
          });
          return obj;
        }
        var getProto = Object.getPrototypeOf;
        var _hasOwn = {}.hasOwnProperty;
        function hasOwn3(obj, prop) {
          return _hasOwn.call(obj, prop);
        }
        function props(proto, extension) {
          if (typeof extension === "function")
            extension = extension(getProto(proto));
          (typeof Reflect === "undefined" ? keys : Reflect.ownKeys)(extension).forEach(function(key) {
            setProp(proto, key, extension[key]);
          });
        }
        var defineProperty = Object.defineProperty;
        function setProp(obj, prop, functionOrGetSet, options) {
          defineProperty(obj, prop, extend(functionOrGetSet && hasOwn3(functionOrGetSet, "get") && typeof functionOrGetSet.get === "function" ? { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } : { value: functionOrGetSet, configurable: true, writable: true }, options));
        }
        function derive(Child) {
          return {
            from: function(Parent) {
              Child.prototype = Object.create(Parent.prototype);
              setProp(Child.prototype, "constructor", Child);
              return {
                extend: props.bind(null, Child.prototype)
              };
            }
          };
        }
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        function getPropertyDescriptor(obj, prop) {
          var pd = getOwnPropertyDescriptor(obj, prop);
          var proto;
          return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
        }
        var _slice = [].slice;
        function slice3(args, start, end) {
          return _slice.call(args, start, end);
        }
        function override(origFunc, overridedFactory) {
          return overridedFactory(origFunc);
        }
        function assert(b) {
          if (!b)
            throw new Error("Assertion Failed");
        }
        function asap$1(fn) {
          if (_global.setImmediate)
            setImmediate(fn);
          else
            setTimeout(fn, 0);
        }
        function arrayToObject(array, extractor) {
          return array.reduce(function(result, item, i) {
            var nameAndValue = extractor(item, i);
            if (nameAndValue)
              result[nameAndValue[0]] = nameAndValue[1];
            return result;
          }, {});
        }
        function getByKeyPath(obj, keyPath) {
          if (typeof keyPath === "string" && hasOwn3(obj, keyPath))
            return obj[keyPath];
          if (!keyPath)
            return obj;
          if (typeof keyPath !== "string") {
            var rv = [];
            for (var i = 0, l = keyPath.length; i < l; ++i) {
              var val = getByKeyPath(obj, keyPath[i]);
              rv.push(val);
            }
            return rv;
          }
          var period = keyPath.indexOf(".");
          if (period !== -1) {
            var innerObj = obj[keyPath.substr(0, period)];
            return innerObj == null ? void 0 : getByKeyPath(innerObj, keyPath.substr(period + 1));
          }
          return void 0;
        }
        function setByKeyPath(obj, keyPath, value) {
          if (!obj || keyPath === void 0)
            return;
          if ("isFrozen" in Object && Object.isFrozen(obj))
            return;
          if (typeof keyPath !== "string" && "length" in keyPath) {
            assert(typeof value !== "string" && "length" in value);
            for (var i = 0, l = keyPath.length; i < l; ++i) {
              setByKeyPath(obj, keyPath[i], value[i]);
            }
          } else {
            var period = keyPath.indexOf(".");
            if (period !== -1) {
              var currentKeyPath = keyPath.substr(0, period);
              var remainingKeyPath = keyPath.substr(period + 1);
              if (remainingKeyPath === "")
                if (value === void 0) {
                  if (isArray2(obj) && !isNaN(parseInt(currentKeyPath)))
                    obj.splice(currentKeyPath, 1);
                  else
                    delete obj[currentKeyPath];
                } else
                  obj[currentKeyPath] = value;
              else {
                var innerObj = obj[currentKeyPath];
                if (!innerObj || !hasOwn3(obj, currentKeyPath))
                  innerObj = obj[currentKeyPath] = {};
                setByKeyPath(innerObj, remainingKeyPath, value);
              }
            } else {
              if (value === void 0) {
                if (isArray2(obj) && !isNaN(parseInt(keyPath)))
                  obj.splice(keyPath, 1);
                else
                  delete obj[keyPath];
              } else
                obj[keyPath] = value;
            }
          }
        }
        function delByKeyPath(obj, keyPath) {
          if (typeof keyPath === "string")
            setByKeyPath(obj, keyPath, void 0);
          else if ("length" in keyPath)
            [].map.call(keyPath, function(kp) {
              setByKeyPath(obj, kp, void 0);
            });
        }
        function shallowClone(obj) {
          var rv = {};
          for (var m in obj) {
            if (hasOwn3(obj, m))
              rv[m] = obj[m];
          }
          return rv;
        }
        var concat3 = [].concat;
        function flatten(a) {
          return concat3.apply([], a);
        }
        var intrinsicTypeNames = "BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(flatten([8, 16, 32, 64].map(function(num) {
          return ["Int", "Uint", "Float"].map(function(t) {
            return t + num + "Array";
          });
        }))).filter(function(t) {
          return _global[t];
        });
        var intrinsicTypes = new Set(intrinsicTypeNames.map(function(t) {
          return _global[t];
        }));
        function cloneSimpleObjectTree(o) {
          var rv = {};
          for (var k in o)
            if (hasOwn3(o, k)) {
              var v = o[k];
              rv[k] = !v || typeof v !== "object" || intrinsicTypes.has(v.constructor) ? v : cloneSimpleObjectTree(v);
            }
          return rv;
        }
        function objectIsEmpty(o) {
          for (var k in o)
            if (hasOwn3(o, k))
              return false;
          return true;
        }
        var circularRefs = null;
        function deepClone(any) {
          circularRefs = /* @__PURE__ */ new WeakMap();
          var rv = innerDeepClone(any);
          circularRefs = null;
          return rv;
        }
        function innerDeepClone(x) {
          if (!x || typeof x !== "object")
            return x;
          var rv = circularRefs.get(x);
          if (rv)
            return rv;
          if (isArray2(x)) {
            rv = [];
            circularRefs.set(x, rv);
            for (var i = 0, l = x.length; i < l; ++i) {
              rv.push(innerDeepClone(x[i]));
            }
          } else if (intrinsicTypes.has(x.constructor)) {
            rv = x;
          } else {
            var proto = getProto(x);
            rv = proto === Object.prototype ? {} : Object.create(proto);
            circularRefs.set(x, rv);
            for (var prop in x) {
              if (hasOwn3(x, prop)) {
                rv[prop] = innerDeepClone(x[prop]);
              }
            }
          }
          return rv;
        }
        var toString5 = {}.toString;
        function toStringTag(o) {
          return toString5.call(o).slice(8, -1);
        }
        var iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
        var getIteratorOf = typeof iteratorSymbol === "symbol" ? function(x) {
          var i;
          return x != null && (i = x[iteratorSymbol]) && i.apply(x);
        } : function() {
          return null;
        };
        function delArrayItem(a, x) {
          var i = a.indexOf(x);
          if (i >= 0)
            a.splice(i, 1);
          return i >= 0;
        }
        var NO_CHAR_ARRAY = {};
        function getArrayOf(arrayLike) {
          var i, a, x, it;
          if (arguments.length === 1) {
            if (isArray2(arrayLike))
              return arrayLike.slice();
            if (this === NO_CHAR_ARRAY && typeof arrayLike === "string")
              return [arrayLike];
            if (it = getIteratorOf(arrayLike)) {
              a = [];
              while (x = it.next(), !x.done)
                a.push(x.value);
              return a;
            }
            if (arrayLike == null)
              return [arrayLike];
            i = arrayLike.length;
            if (typeof i === "number") {
              a = new Array(i);
              while (i--)
                a[i] = arrayLike[i];
              return a;
            }
            return [arrayLike];
          }
          i = arguments.length;
          a = new Array(i);
          while (i--)
            a[i] = arguments[i];
          return a;
        }
        var isAsyncFunction = typeof Symbol !== "undefined" ? function(fn) {
          return fn[Symbol.toStringTag] === "AsyncFunction";
        } : function() {
          return false;
        };
        var dexieErrorNames = [
          "Modify",
          "Bulk",
          "OpenFailed",
          "VersionChange",
          "Schema",
          "Upgrade",
          "InvalidTable",
          "MissingAPI",
          "NoSuchDatabase",
          "InvalidArgument",
          "SubTransaction",
          "Unsupported",
          "Internal",
          "DatabaseClosed",
          "PrematureCommit",
          "ForeignAwait"
        ];
        var idbDomErrorNames = [
          "Unknown",
          "Constraint",
          "Data",
          "TransactionInactive",
          "ReadOnly",
          "Version",
          "NotFound",
          "InvalidState",
          "InvalidAccess",
          "Abort",
          "Timeout",
          "QuotaExceeded",
          "Syntax",
          "DataClone"
        ];
        var errorList = dexieErrorNames.concat(idbDomErrorNames);
        var defaultTexts = {
          VersionChanged: "Database version changed by other database connection",
          DatabaseClosed: "Database has been closed",
          Abort: "Transaction aborted",
          TransactionInactive: "Transaction has already completed or failed",
          MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
        };
        function DexieError(name2, msg) {
          this.name = name2;
          this.message = msg;
        }
        derive(DexieError).from(Error).extend({
          toString: function() {
            return this.name + ": " + this.message;
          }
        });
        function getMultiErrorMessage(msg, failures) {
          return msg + ". Errors: " + Object.keys(failures).map(function(key) {
            return failures[key].toString();
          }).filter(function(v, i, s) {
            return s.indexOf(v) === i;
          }).join("\n");
        }
        function ModifyError(msg, failures, successCount, failedKeys) {
          this.failures = failures;
          this.failedKeys = failedKeys;
          this.successCount = successCount;
          this.message = getMultiErrorMessage(msg, failures);
        }
        derive(ModifyError).from(DexieError);
        function BulkError(msg, failures) {
          this.name = "BulkError";
          this.failures = Object.keys(failures).map(function(pos) {
            return failures[pos];
          });
          this.failuresByPos = failures;
          this.message = getMultiErrorMessage(msg, this.failures);
        }
        derive(BulkError).from(DexieError);
        var errnames = errorList.reduce(function(obj, name2) {
          return obj[name2] = name2 + "Error", obj;
        }, {});
        var BaseException = DexieError;
        var exceptions = errorList.reduce(function(obj, name2) {
          var fullName = name2 + "Error";
          function DexieError2(msgOrInner, inner) {
            this.name = fullName;
            if (!msgOrInner) {
              this.message = defaultTexts[name2] || fullName;
              this.inner = null;
            } else if (typeof msgOrInner === "string") {
              this.message = "".concat(msgOrInner).concat(!inner ? "" : "\n " + inner);
              this.inner = inner || null;
            } else if (typeof msgOrInner === "object") {
              this.message = "".concat(msgOrInner.name, " ").concat(msgOrInner.message);
              this.inner = msgOrInner;
            }
          }
          derive(DexieError2).from(BaseException);
          obj[name2] = DexieError2;
          return obj;
        }, {});
        exceptions.Syntax = SyntaxError;
        exceptions.Type = TypeError;
        exceptions.Range = RangeError;
        var exceptionMap = idbDomErrorNames.reduce(function(obj, name2) {
          obj[name2 + "Error"] = exceptions[name2];
          return obj;
        }, {});
        function mapError(domError, message) {
          if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
            return domError;
          var rv = new exceptionMap[domError.name](message || domError.message, domError);
          if ("stack" in domError) {
            setProp(rv, "stack", { get: function() {
              return this.inner.stack;
            } });
          }
          return rv;
        }
        var fullNameExceptions = errorList.reduce(function(obj, name2) {
          if (["Syntax", "Type", "Range"].indexOf(name2) === -1)
            obj[name2 + "Error"] = exceptions[name2];
          return obj;
        }, {});
        fullNameExceptions.ModifyError = ModifyError;
        fullNameExceptions.DexieError = DexieError;
        fullNameExceptions.BulkError = BulkError;
        function nop() {
        }
        function mirror(val) {
          return val;
        }
        function pureFunctionChain(f1, f2) {
          if (f1 == null || f1 === mirror)
            return f2;
          return function(val) {
            return f2(f1(val));
          };
        }
        function callBoth(on1, on2) {
          return function() {
            on1.apply(this, arguments);
            on2.apply(this, arguments);
          };
        }
        function hookCreatingChain(f1, f2) {
          if (f1 === nop)
            return f2;
          return function() {
            var res = f1.apply(this, arguments);
            if (res !== void 0)
              arguments[0] = res;
            var onsuccess = this.onsuccess, onerror = this.onerror;
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
              this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
              this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res2 !== void 0 ? res2 : res;
          };
        }
        function hookDeletingChain(f1, f2) {
          if (f1 === nop)
            return f2;
          return function() {
            f1.apply(this, arguments);
            var onsuccess = this.onsuccess, onerror = this.onerror;
            this.onsuccess = this.onerror = null;
            f2.apply(this, arguments);
            if (onsuccess)
              this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
              this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
          };
        }
        function hookUpdatingChain(f1, f2) {
          if (f1 === nop)
            return f2;
          return function(modifications) {
            var res = f1.apply(this, arguments);
            extend(modifications, res);
            var onsuccess = this.onsuccess, onerror = this.onerror;
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
              this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
              this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res === void 0 ? res2 === void 0 ? void 0 : res2 : extend(res, res2);
          };
        }
        function reverseStoppableEventChain(f1, f2) {
          if (f1 === nop)
            return f2;
          return function() {
            if (f2.apply(this, arguments) === false)
              return false;
            return f1.apply(this, arguments);
          };
        }
        function promisableChain(f1, f2) {
          if (f1 === nop)
            return f2;
          return function() {
            var res = f1.apply(this, arguments);
            if (res && typeof res.then === "function") {
              var thiz = this, i = arguments.length, args = new Array(i);
              while (i--)
                args[i] = arguments[i];
              return res.then(function() {
                return f2.apply(thiz, args);
              });
            }
            return f2.apply(this, arguments);
          };
        }
        var debug = typeof location !== "undefined" && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
        function setDebug(value, filter) {
          debug = value;
        }
        var INTERNAL = {};
        var ZONE_ECHO_LIMIT = 100, _a$1 = typeof Promise === "undefined" ? [] : function() {
          var globalP = Promise.resolve();
          if (typeof crypto === "undefined" || !crypto.subtle)
            return [globalP, getProto(globalP), globalP];
          var nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
          return [
            nativeP,
            getProto(nativeP),
            globalP
          ];
        }(), resolvedNativePromise = _a$1[0], nativePromiseProto = _a$1[1], resolvedGlobalPromise = _a$1[2], nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
        var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
        var patchGlobalPromise = !!resolvedGlobalPromise;
        function schedulePhysicalTick() {
          queueMicrotask(physicalTick);
        }
        var asap = function(callback, args) {
          microtickQueue.push([callback, args]);
          if (needsNewPhysicalTick) {
            schedulePhysicalTick();
            needsNewPhysicalTick = false;
          }
        };
        var isOutsideMicroTick = true, needsNewPhysicalTick = true, unhandledErrors = [], rejectingErrors = [], rejectionMapper = mirror;
        var globalPSD = {
          id: "global",
          global: true,
          ref: 0,
          unhandleds: [],
          onunhandled: nop,
          pgp: false,
          env: {},
          finalize: nop
        };
        var PSD = globalPSD;
        var microtickQueue = [];
        var numScheduledCalls = 0;
        var tickFinalizers = [];
        function DexiePromise(fn) {
          if (typeof this !== "object")
            throw new TypeError("Promises must be constructed via new");
          this._listeners = [];
          this._lib = false;
          var psd = this._PSD = PSD;
          if (typeof fn !== "function") {
            if (fn !== INTERNAL)
              throw new TypeError("Not a function");
            this._state = arguments[1];
            this._value = arguments[2];
            if (this._state === false)
              handleRejection(this, this._value);
            return;
          }
          this._state = null;
          this._value = null;
          ++psd.ref;
          executePromiseTask(this, fn);
        }
        var thenProp = {
          get: function() {
            var psd = PSD, microTaskId = totalEchoes;
            function then(onFulfilled, onRejected) {
              var _this = this;
              var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
              var cleanup = possibleAwait && !decrementExpectedAwaits();
              var rv = new DexiePromise(function(resolve, reject) {
                propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));
              });
              if (this._consoleTask)
                rv._consoleTask = this._consoleTask;
              return rv;
            }
            then.prototype = INTERNAL;
            return then;
          },
          set: function(value) {
            setProp(this, "then", value && value.prototype === INTERNAL ? thenProp : {
              get: function() {
                return value;
              },
              set: thenProp.set
            });
          }
        };
        props(DexiePromise.prototype, {
          then: thenProp,
          _then: function(onFulfilled, onRejected) {
            propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
          },
          catch: function(onRejected) {
            if (arguments.length === 1)
              return this.then(null, onRejected);
            var type2 = arguments[0], handler = arguments[1];
            return typeof type2 === "function" ? this.then(null, function(err) {
              return err instanceof type2 ? handler(err) : PromiseReject(err);
            }) : this.then(null, function(err) {
              return err && err.name === type2 ? handler(err) : PromiseReject(err);
            });
          },
          finally: function(onFinally) {
            return this.then(function(value) {
              return DexiePromise.resolve(onFinally()).then(function() {
                return value;
              });
            }, function(err) {
              return DexiePromise.resolve(onFinally()).then(function() {
                return PromiseReject(err);
              });
            });
          },
          timeout: function(ms, msg) {
            var _this = this;
            return ms < Infinity ? new DexiePromise(function(resolve, reject) {
              var handle = setTimeout(function() {
                return reject(new exceptions.Timeout(msg));
              }, ms);
              _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
            }) : this;
          }
        });
        if (typeof Symbol !== "undefined" && Symbol.toStringTag)
          setProp(DexiePromise.prototype, Symbol.toStringTag, "Dexie.Promise");
        globalPSD.env = snapShot();
        function Listener(onFulfilled, onRejected, resolve, reject, zone) {
          this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
          this.onRejected = typeof onRejected === "function" ? onRejected : null;
          this.resolve = resolve;
          this.reject = reject;
          this.psd = zone;
        }
        props(DexiePromise, {
          all: function() {
            var values2 = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new DexiePromise(function(resolve, reject) {
              if (values2.length === 0)
                resolve([]);
              var remaining = values2.length;
              values2.forEach(function(a, i) {
                return DexiePromise.resolve(a).then(function(x) {
                  values2[i] = x;
                  if (!--remaining)
                    resolve(values2);
                }, reject);
              });
            });
          },
          resolve: function(value) {
            if (value instanceof DexiePromise)
              return value;
            if (value && typeof value.then === "function")
              return new DexiePromise(function(resolve, reject) {
                value.then(resolve, reject);
              });
            var rv = new DexiePromise(INTERNAL, true, value);
            return rv;
          },
          reject: PromiseReject,
          race: function() {
            var values2 = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new DexiePromise(function(resolve, reject) {
              values2.map(function(value) {
                return DexiePromise.resolve(value).then(resolve, reject);
              });
            });
          },
          PSD: {
            get: function() {
              return PSD;
            },
            set: function(value) {
              return PSD = value;
            }
          },
          totalEchoes: { get: function() {
            return totalEchoes;
          } },
          newPSD: newScope,
          usePSD,
          scheduler: {
            get: function() {
              return asap;
            },
            set: function(value) {
              asap = value;
            }
          },
          rejectionMapper: {
            get: function() {
              return rejectionMapper;
            },
            set: function(value) {
              rejectionMapper = value;
            }
          },
          follow: function(fn, zoneProps) {
            return new DexiePromise(function(resolve, reject) {
              return newScope(function(resolve2, reject2) {
                var psd = PSD;
                psd.unhandleds = [];
                psd.onunhandled = reject2;
                psd.finalize = callBoth(function() {
                  var _this = this;
                  run_at_end_of_this_or_next_physical_tick(function() {
                    _this.unhandleds.length === 0 ? resolve2() : reject2(_this.unhandleds[0]);
                  });
                }, psd.finalize);
                fn();
              }, zoneProps, resolve, reject);
            });
          }
        });
        if (NativePromise) {
          if (NativePromise.allSettled)
            setProp(DexiePromise, "allSettled", function() {
              var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
              return new DexiePromise(function(resolve) {
                if (possiblePromises.length === 0)
                  resolve([]);
                var remaining = possiblePromises.length;
                var results = new Array(remaining);
                possiblePromises.forEach(function(p, i) {
                  return DexiePromise.resolve(p).then(function(value) {
                    return results[i] = { status: "fulfilled", value };
                  }, function(reason) {
                    return results[i] = { status: "rejected", reason };
                  }).then(function() {
                    return --remaining || resolve(results);
                  });
                });
              });
            });
          if (NativePromise.any && typeof AggregateError !== "undefined")
            setProp(DexiePromise, "any", function() {
              var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
              return new DexiePromise(function(resolve, reject) {
                if (possiblePromises.length === 0)
                  reject(new AggregateError([]));
                var remaining = possiblePromises.length;
                var failures = new Array(remaining);
                possiblePromises.forEach(function(p, i) {
                  return DexiePromise.resolve(p).then(function(value) {
                    return resolve(value);
                  }, function(failure) {
                    failures[i] = failure;
                    if (!--remaining)
                      reject(new AggregateError(failures));
                  });
                });
              });
            });
        }
        function executePromiseTask(promise, fn) {
          try {
            fn(function(value) {
              if (promise._state !== null)
                return;
              if (value === promise)
                throw new TypeError("A promise cannot be resolved with itself.");
              var shouldExecuteTick = promise._lib && beginMicroTickScope();
              if (value && typeof value.then === "function") {
                executePromiseTask(promise, function(resolve, reject) {
                  value instanceof DexiePromise ? value._then(resolve, reject) : value.then(resolve, reject);
                });
              } else {
                promise._state = true;
                promise._value = value;
                propagateAllListeners(promise);
              }
              if (shouldExecuteTick)
                endMicroTickScope();
            }, handleRejection.bind(null, promise));
          } catch (ex) {
            handleRejection(promise, ex);
          }
        }
        function handleRejection(promise, reason) {
          rejectingErrors.push(reason);
          if (promise._state !== null)
            return;
          var shouldExecuteTick = promise._lib && beginMicroTickScope();
          reason = rejectionMapper(reason);
          promise._state = false;
          promise._value = reason;
          addPossiblyUnhandledError(promise);
          propagateAllListeners(promise);
          if (shouldExecuteTick)
            endMicroTickScope();
        }
        function propagateAllListeners(promise) {
          var listeners = promise._listeners;
          promise._listeners = [];
          for (var i = 0, len = listeners.length; i < len; ++i) {
            propagateToListener(promise, listeners[i]);
          }
          var psd = promise._PSD;
          --psd.ref || psd.finalize();
          if (numScheduledCalls === 0) {
            ++numScheduledCalls;
            asap(function() {
              if (--numScheduledCalls === 0)
                finalizePhysicalTick();
            }, []);
          }
        }
        function propagateToListener(promise, listener) {
          if (promise._state === null) {
            promise._listeners.push(listener);
            return;
          }
          var cb = promise._state ? listener.onFulfilled : listener.onRejected;
          if (cb === null) {
            return (promise._state ? listener.resolve : listener.reject)(promise._value);
          }
          ++listener.psd.ref;
          ++numScheduledCalls;
          asap(callListener, [cb, promise, listener]);
        }
        function callListener(cb, promise, listener) {
          try {
            var ret, value = promise._value;
            if (!promise._state && rejectingErrors.length)
              rejectingErrors = [];
            ret = debug && promise._consoleTask ? promise._consoleTask.run(function() {
              return cb(value);
            }) : cb(value);
            if (!promise._state && rejectingErrors.indexOf(value) === -1) {
              markErrorAsHandled(promise);
            }
            listener.resolve(ret);
          } catch (e) {
            listener.reject(e);
          } finally {
            if (--numScheduledCalls === 0)
              finalizePhysicalTick();
            --listener.psd.ref || listener.psd.finalize();
          }
        }
        function physicalTick() {
          usePSD(globalPSD, function() {
            beginMicroTickScope() && endMicroTickScope();
          });
        }
        function beginMicroTickScope() {
          var wasRootExec = isOutsideMicroTick;
          isOutsideMicroTick = false;
          needsNewPhysicalTick = false;
          return wasRootExec;
        }
        function endMicroTickScope() {
          var callbacks, i, l;
          do {
            while (microtickQueue.length > 0) {
              callbacks = microtickQueue;
              microtickQueue = [];
              l = callbacks.length;
              for (i = 0; i < l; ++i) {
                var item = callbacks[i];
                item[0].apply(null, item[1]);
              }
            }
          } while (microtickQueue.length > 0);
          isOutsideMicroTick = true;
          needsNewPhysicalTick = true;
        }
        function finalizePhysicalTick() {
          var unhandledErrs = unhandledErrors;
          unhandledErrors = [];
          unhandledErrs.forEach(function(p) {
            p._PSD.onunhandled.call(null, p._value, p);
          });
          var finalizers = tickFinalizers.slice(0);
          var i = finalizers.length;
          while (i)
            finalizers[--i]();
        }
        function run_at_end_of_this_or_next_physical_tick(fn) {
          function finalizer() {
            fn();
            tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
          }
          tickFinalizers.push(finalizer);
          ++numScheduledCalls;
          asap(function() {
            if (--numScheduledCalls === 0)
              finalizePhysicalTick();
          }, []);
        }
        function addPossiblyUnhandledError(promise) {
          if (!unhandledErrors.some(function(p) {
            return p._value === promise._value;
          }))
            unhandledErrors.push(promise);
        }
        function markErrorAsHandled(promise) {
          var i = unhandledErrors.length;
          while (i)
            if (unhandledErrors[--i]._value === promise._value) {
              unhandledErrors.splice(i, 1);
              return;
            }
        }
        function PromiseReject(reason) {
          return new DexiePromise(INTERNAL, false, reason);
        }
        function wrap(fn, errorCatcher) {
          var psd = PSD;
          return function() {
            var wasRootExec = beginMicroTickScope(), outerScope = PSD;
            try {
              switchToZone(psd, true);
              return fn.apply(this, arguments);
            } catch (e) {
              errorCatcher && errorCatcher(e);
            } finally {
              switchToZone(outerScope, false);
              if (wasRootExec)
                endMicroTickScope();
            }
          };
        }
        var task = { awaits: 0, echoes: 0, id: 0 };
        var taskCounter = 0;
        var zoneStack = [];
        var zoneEchoes = 0;
        var totalEchoes = 0;
        var zone_id_counter = 0;
        function newScope(fn, props2, a1, a2) {
          var parent = PSD, psd = Object.create(parent);
          psd.parent = parent;
          psd.ref = 0;
          psd.global = false;
          psd.id = ++zone_id_counter;
          globalPSD.env;
          psd.env = patchGlobalPromise ? {
            Promise: DexiePromise,
            PromiseProp: { value: DexiePromise, configurable: true, writable: true },
            all: DexiePromise.all,
            race: DexiePromise.race,
            allSettled: DexiePromise.allSettled,
            any: DexiePromise.any,
            resolve: DexiePromise.resolve,
            reject: DexiePromise.reject
          } : {};
          if (props2)
            extend(psd, props2);
          ++parent.ref;
          psd.finalize = function() {
            --this.parent.ref || this.parent.finalize();
          };
          var rv = usePSD(psd, fn, a1, a2);
          if (psd.ref === 0)
            psd.finalize();
          return rv;
        }
        function incrementExpectedAwaits() {
          if (!task.id)
            task.id = ++taskCounter;
          ++task.awaits;
          task.echoes += ZONE_ECHO_LIMIT;
          return task.id;
        }
        function decrementExpectedAwaits() {
          if (!task.awaits)
            return false;
          if (--task.awaits === 0)
            task.id = 0;
          task.echoes = task.awaits * ZONE_ECHO_LIMIT;
          return true;
        }
        if (("" + nativePromiseThen).indexOf("[native code]") === -1) {
          incrementExpectedAwaits = decrementExpectedAwaits = nop;
        }
        function onPossibleParallellAsync(possiblePromise) {
          if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
            incrementExpectedAwaits();
            return possiblePromise.then(function(x) {
              decrementExpectedAwaits();
              return x;
            }, function(e) {
              decrementExpectedAwaits();
              return rejection(e);
            });
          }
          return possiblePromise;
        }
        function zoneEnterEcho(targetZone) {
          ++totalEchoes;
          if (!task.echoes || --task.echoes === 0) {
            task.echoes = task.awaits = task.id = 0;
          }
          zoneStack.push(PSD);
          switchToZone(targetZone, true);
        }
        function zoneLeaveEcho() {
          var zone = zoneStack[zoneStack.length - 1];
          zoneStack.pop();
          switchToZone(zone, false);
        }
        function switchToZone(targetZone, bEnteringZone) {
          var currentZone = PSD;
          if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
            queueMicrotask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
          }
          if (targetZone === PSD)
            return;
          PSD = targetZone;
          if (currentZone === globalPSD)
            globalPSD.env = snapShot();
          if (patchGlobalPromise) {
            var GlobalPromise = globalPSD.env.Promise;
            var targetEnv = targetZone.env;
            if (currentZone.global || targetZone.global) {
              Object.defineProperty(_global, "Promise", targetEnv.PromiseProp);
              GlobalPromise.all = targetEnv.all;
              GlobalPromise.race = targetEnv.race;
              GlobalPromise.resolve = targetEnv.resolve;
              GlobalPromise.reject = targetEnv.reject;
              if (targetEnv.allSettled)
                GlobalPromise.allSettled = targetEnv.allSettled;
              if (targetEnv.any)
                GlobalPromise.any = targetEnv.any;
            }
          }
        }
        function snapShot() {
          var GlobalPromise = _global.Promise;
          return patchGlobalPromise ? {
            Promise: GlobalPromise,
            PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
            all: GlobalPromise.all,
            race: GlobalPromise.race,
            allSettled: GlobalPromise.allSettled,
            any: GlobalPromise.any,
            resolve: GlobalPromise.resolve,
            reject: GlobalPromise.reject
          } : {};
        }
        function usePSD(psd, fn, a1, a2, a3) {
          var outerScope = PSD;
          try {
            switchToZone(psd, true);
            return fn(a1, a2, a3);
          } finally {
            switchToZone(outerScope, false);
          }
        }
        function nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {
          return typeof fn !== "function" ? fn : function() {
            var outerZone = PSD;
            if (possibleAwait)
              incrementExpectedAwaits();
            switchToZone(zone, true);
            try {
              return fn.apply(this, arguments);
            } finally {
              switchToZone(outerZone, false);
              if (cleanup)
                queueMicrotask(decrementExpectedAwaits);
            }
          };
        }
        function execInGlobalContext(cb) {
          if (Promise === NativePromise && task.echoes === 0) {
            if (zoneEchoes === 0) {
              cb();
            } else {
              enqueueNativeMicroTask(cb);
            }
          } else {
            setTimeout(cb, 0);
          }
        }
        var rejection = DexiePromise.reject;
        function tempTransaction(db2, mode, storeNames, fn) {
          if (!db2.idbdb || !db2._state.openComplete && (!PSD.letThrough && !db2._vip)) {
            if (db2._state.openComplete) {
              return rejection(new exceptions.DatabaseClosed(db2._state.dbOpenError));
            }
            if (!db2._state.isBeingOpened) {
              if (!db2._state.autoOpen)
                return rejection(new exceptions.DatabaseClosed());
              db2.open().catch(nop);
            }
            return db2._state.dbReadyPromise.then(function() {
              return tempTransaction(db2, mode, storeNames, fn);
            });
          } else {
            var trans = db2._createTransaction(mode, storeNames, db2._dbSchema);
            try {
              trans.create();
              db2._state.PR1398_maxLoop = 3;
            } catch (ex) {
              if (ex.name === errnames.InvalidState && db2.isOpen() && --db2._state.PR1398_maxLoop > 0) {
                console.warn("Dexie: Need to reopen db");
                db2.close({ disableAutoOpen: false });
                return db2.open().then(function() {
                  return tempTransaction(db2, mode, storeNames, fn);
                });
              }
              return rejection(ex);
            }
            return trans._promise(mode, function(resolve, reject) {
              return newScope(function() {
                PSD.trans = trans;
                return fn(resolve, reject, trans);
              });
            }).then(function(result) {
              if (mode === "readwrite")
                try {
                  trans.idbtrans.commit();
                } catch (_a4) {
                }
              return mode === "readonly" ? result : trans._completion.then(function() {
                return result;
              });
            });
          }
        }
        var DEXIE_VERSION = "4.0.1";
        var maxString = String.fromCharCode(65535);
        var minKey = -Infinity;
        var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
        var STRING_EXPECTED = "String expected.";
        var connections = [];
        var DBNAMES_DB = "__dbnames";
        var READONLY = "readonly";
        var READWRITE = "readwrite";
        function combine3(filter1, filter2) {
          return filter1 ? filter2 ? function() {
            return filter1.apply(this, arguments) && filter2.apply(this, arguments);
          } : filter1 : filter2;
        }
        var AnyRange = {
          type: 3,
          lower: -Infinity,
          lowerOpen: false,
          upper: [[]],
          upperOpen: false
        };
        function workaroundForUndefinedPrimKey(keyPath) {
          return typeof keyPath === "string" && !/\./.test(keyPath) ? function(obj) {
            if (obj[keyPath] === void 0 && keyPath in obj) {
              obj = deepClone(obj);
              delete obj[keyPath];
            }
            return obj;
          } : function(obj) {
            return obj;
          };
        }
        function Entity2() {
          throw exceptions.Type();
        }
        function cmp2(a, b) {
          try {
            var ta = type(a);
            var tb = type(b);
            if (ta !== tb) {
              if (ta === "Array")
                return 1;
              if (tb === "Array")
                return -1;
              if (ta === "binary")
                return 1;
              if (tb === "binary")
                return -1;
              if (ta === "string")
                return 1;
              if (tb === "string")
                return -1;
              if (ta === "Date")
                return 1;
              if (tb !== "Date")
                return NaN;
              return -1;
            }
            switch (ta) {
              case "number":
              case "Date":
              case "string":
                return a > b ? 1 : a < b ? -1 : 0;
              case "binary": {
                return compareUint8Arrays(getUint8Array(a), getUint8Array(b));
              }
              case "Array":
                return compareArrays(a, b);
            }
          } catch (_a4) {
          }
          return NaN;
        }
        function compareArrays(a, b) {
          var al = a.length;
          var bl = b.length;
          var l = al < bl ? al : bl;
          for (var i = 0; i < l; ++i) {
            var res = cmp2(a[i], b[i]);
            if (res !== 0)
              return res;
          }
          return al === bl ? 0 : al < bl ? -1 : 1;
        }
        function compareUint8Arrays(a, b) {
          var al = a.length;
          var bl = b.length;
          var l = al < bl ? al : bl;
          for (var i = 0; i < l; ++i) {
            if (a[i] !== b[i])
              return a[i] < b[i] ? -1 : 1;
          }
          return al === bl ? 0 : al < bl ? -1 : 1;
        }
        function type(x) {
          var t = typeof x;
          if (t !== "object")
            return t;
          if (ArrayBuffer.isView(x))
            return "binary";
          var tsTag = toStringTag(x);
          return tsTag === "ArrayBuffer" ? "binary" : tsTag;
        }
        function getUint8Array(a) {
          if (a instanceof Uint8Array)
            return a;
          if (ArrayBuffer.isView(a))
            return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
          return new Uint8Array(a);
        }
        var Table = function() {
          function Table2() {
          }
          Table2.prototype._trans = function(mode, fn, writeLocked) {
            var trans = this._tx || PSD.trans;
            var tableName = this.name;
            var task2 = debug && typeof console !== "undefined" && console.createTask && console.createTask("Dexie: ".concat(mode === "readonly" ? "read" : "write", " ").concat(this.name));
            function checkTableInTransaction(resolve, reject, trans2) {
              if (!trans2.schema[tableName])
                throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
              return fn(trans2.idbtrans, trans2);
            }
            var wasRootExec = beginMicroTickScope();
            try {
              var p = trans && trans.db._novip === this.db._novip ? trans === PSD.trans ? trans._promise(mode, checkTableInTransaction, writeLocked) : newScope(function() {
                return trans._promise(mode, checkTableInTransaction, writeLocked);
              }, { trans, transless: PSD.transless || PSD }) : tempTransaction(this.db, mode, [this.name], checkTableInTransaction);
              if (task2) {
                p._consoleTask = task2;
                p = p.catch(function(err) {
                  console.trace(err);
                  return rejection(err);
                });
              }
              return p;
            } finally {
              if (wasRootExec)
                endMicroTickScope();
            }
          };
          Table2.prototype.get = function(keyOrCrit, cb) {
            var _this = this;
            if (keyOrCrit && keyOrCrit.constructor === Object)
              return this.where(keyOrCrit).first(cb);
            if (keyOrCrit == null)
              return rejection(new exceptions.Type("Invalid argument to Table.get()"));
            return this._trans("readonly", function(trans) {
              return _this.core.get({ trans, key: keyOrCrit }).then(function(res) {
                return _this.hook.reading.fire(res);
              });
            }).then(cb);
          };
          Table2.prototype.where = function(indexOrCrit) {
            if (typeof indexOrCrit === "string")
              return new this.db.WhereClause(this, indexOrCrit);
            if (isArray2(indexOrCrit))
              return new this.db.WhereClause(this, "[".concat(indexOrCrit.join("+"), "]"));
            var keyPaths = keys(indexOrCrit);
            if (keyPaths.length === 1)
              return this.where(keyPaths[0]).equals(indexOrCrit[keyPaths[0]]);
            var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function(ix) {
              if (ix.compound && keyPaths.every(function(keyPath) {
                return ix.keyPath.indexOf(keyPath) >= 0;
              })) {
                for (var i = 0; i < keyPaths.length; ++i) {
                  if (keyPaths.indexOf(ix.keyPath[i]) === -1)
                    return false;
                }
                return true;
              }
              return false;
            }).sort(function(a, b) {
              return a.keyPath.length - b.keyPath.length;
            })[0];
            if (compoundIndex && this.db._maxKey !== maxString) {
              var keyPathsInValidOrder = compoundIndex.keyPath.slice(0, keyPaths.length);
              return this.where(keyPathsInValidOrder).equals(keyPathsInValidOrder.map(function(kp) {
                return indexOrCrit[kp];
              }));
            }
            if (!compoundIndex && debug)
              console.warn("The query ".concat(JSON.stringify(indexOrCrit), " on ").concat(this.name, " would benefit from a ") + "compound index [".concat(keyPaths.join("+"), "]"));
            var idxByName = this.schema.idxByName;
            var idb = this.db._deps.indexedDB;
            function equals10(a, b) {
              return idb.cmp(a, b) === 0;
            }
            var _a4 = keyPaths.reduce(function(_a5, keyPath) {
              var prevIndex = _a5[0], prevFilterFn = _a5[1];
              var index = idxByName[keyPath];
              var value = indexOrCrit[keyPath];
              return [
                prevIndex || index,
                prevIndex || !index ? combine3(prevFilterFn, index && index.multi ? function(x) {
                  var prop = getByKeyPath(x, keyPath);
                  return isArray2(prop) && prop.some(function(item) {
                    return equals10(value, item);
                  });
                } : function(x) {
                  return equals10(value, getByKeyPath(x, keyPath));
                }) : prevFilterFn
              ];
            }, [null, null]), idx = _a4[0], filterFunction = _a4[1];
            return idx ? this.where(idx.name).equals(indexOrCrit[idx.keyPath]).filter(filterFunction) : compoundIndex ? this.filter(filterFunction) : this.where(keyPaths).equals("");
          };
          Table2.prototype.filter = function(filterFunction) {
            return this.toCollection().and(filterFunction);
          };
          Table2.prototype.count = function(thenShortcut) {
            return this.toCollection().count(thenShortcut);
          };
          Table2.prototype.offset = function(offset) {
            return this.toCollection().offset(offset);
          };
          Table2.prototype.limit = function(numRows) {
            return this.toCollection().limit(numRows);
          };
          Table2.prototype.each = function(callback) {
            return this.toCollection().each(callback);
          };
          Table2.prototype.toArray = function(thenShortcut) {
            return this.toCollection().toArray(thenShortcut);
          };
          Table2.prototype.toCollection = function() {
            return new this.db.Collection(new this.db.WhereClause(this));
          };
          Table2.prototype.orderBy = function(index) {
            return new this.db.Collection(new this.db.WhereClause(this, isArray2(index) ? "[".concat(index.join("+"), "]") : index));
          };
          Table2.prototype.reverse = function() {
            return this.toCollection().reverse();
          };
          Table2.prototype.mapToClass = function(constructor) {
            var _a4 = this, db2 = _a4.db, tableName = _a4.name;
            this.schema.mappedClass = constructor;
            if (constructor.prototype instanceof Entity2) {
              constructor = function(_super) {
                __extends(class_1, _super);
                function class_1() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(class_1.prototype, "db", {
                  get: function() {
                    return db2;
                  },
                  enumerable: false,
                  configurable: true
                });
                class_1.prototype.table = function() {
                  return tableName;
                };
                return class_1;
              }(constructor);
            }
            var inheritedProps = /* @__PURE__ */ new Set();
            for (var proto = constructor.prototype; proto; proto = getProto(proto)) {
              Object.getOwnPropertyNames(proto).forEach(function(propName) {
                return inheritedProps.add(propName);
              });
            }
            var readHook = function(obj) {
              if (!obj)
                return obj;
              var res = Object.create(constructor.prototype);
              for (var m in obj)
                if (!inheritedProps.has(m))
                  try {
                    res[m] = obj[m];
                  } catch (_) {
                  }
              return res;
            };
            if (this.schema.readHook) {
              this.hook.reading.unsubscribe(this.schema.readHook);
            }
            this.schema.readHook = readHook;
            this.hook("reading", readHook);
            return constructor;
          };
          Table2.prototype.defineClass = function() {
            function Class(content) {
              extend(this, content);
            }
            return this.mapToClass(Class);
          };
          Table2.prototype.add = function(obj, key) {
            var _this = this;
            var _a4 = this.schema.primKey, auto = _a4.auto, keyPath = _a4.keyPath;
            var objToAdd = obj;
            if (keyPath && auto) {
              objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
            }
            return this._trans("readwrite", function(trans) {
              return _this.core.mutate({ trans, type: "add", keys: key != null ? [key] : null, values: [objToAdd] });
            }).then(function(res) {
              return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult;
            }).then(function(lastResult) {
              if (keyPath) {
                try {
                  setByKeyPath(obj, keyPath, lastResult);
                } catch (_) {
                }
              }
              return lastResult;
            });
          };
          Table2.prototype.update = function(keyOrObject, modifications) {
            if (typeof keyOrObject === "object" && !isArray2(keyOrObject)) {
              var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
              if (key === void 0)
                return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
              return this.where(":id").equals(key).modify(modifications);
            } else {
              return this.where(":id").equals(keyOrObject).modify(modifications);
            }
          };
          Table2.prototype.put = function(obj, key) {
            var _this = this;
            var _a4 = this.schema.primKey, auto = _a4.auto, keyPath = _a4.keyPath;
            var objToAdd = obj;
            if (keyPath && auto) {
              objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
            }
            return this._trans("readwrite", function(trans) {
              return _this.core.mutate({ trans, type: "put", values: [objToAdd], keys: key != null ? [key] : null });
            }).then(function(res) {
              return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult;
            }).then(function(lastResult) {
              if (keyPath) {
                try {
                  setByKeyPath(obj, keyPath, lastResult);
                } catch (_) {
                }
              }
              return lastResult;
            });
          };
          Table2.prototype.delete = function(key) {
            var _this = this;
            return this._trans("readwrite", function(trans) {
              return _this.core.mutate({ trans, type: "delete", keys: [key] });
            }).then(function(res) {
              return res.numFailures ? DexiePromise.reject(res.failures[0]) : void 0;
            });
          };
          Table2.prototype.clear = function() {
            var _this = this;
            return this._trans("readwrite", function(trans) {
              return _this.core.mutate({ trans, type: "deleteRange", range: AnyRange });
            }).then(function(res) {
              return res.numFailures ? DexiePromise.reject(res.failures[0]) : void 0;
            });
          };
          Table2.prototype.bulkGet = function(keys2) {
            var _this = this;
            return this._trans("readonly", function(trans) {
              return _this.core.getMany({
                keys: keys2,
                trans
              }).then(function(result) {
                return result.map(function(res) {
                  return _this.hook.reading.fire(res);
                });
              });
            });
          };
          Table2.prototype.bulkAdd = function(objects, keysOrOptions, options) {
            var _this = this;
            var keys2 = Array.isArray(keysOrOptions) ? keysOrOptions : void 0;
            options = options || (keys2 ? void 0 : keysOrOptions);
            var wantResults = options ? options.allKeys : void 0;
            return this._trans("readwrite", function(trans) {
              var _a4 = _this.schema.primKey, auto = _a4.auto, keyPath = _a4.keyPath;
              if (keyPath && keys2)
                throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
              if (keys2 && keys2.length !== objects.length)
                throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
              var numObjects = objects.length;
              var objectsToAdd = keyPath && auto ? objects.map(workaroundForUndefinedPrimKey(keyPath)) : objects;
              return _this.core.mutate({ trans, type: "add", keys: keys2, values: objectsToAdd, wantResults }).then(function(_a5) {
                var numFailures = _a5.numFailures, results = _a5.results, lastResult = _a5.lastResult, failures = _a5.failures;
                var result = wantResults ? results : lastResult;
                if (numFailures === 0)
                  return result;
                throw new BulkError("".concat(_this.name, ".bulkAdd(): ").concat(numFailures, " of ").concat(numObjects, " operations failed"), failures);
              });
            });
          };
          Table2.prototype.bulkPut = function(objects, keysOrOptions, options) {
            var _this = this;
            var keys2 = Array.isArray(keysOrOptions) ? keysOrOptions : void 0;
            options = options || (keys2 ? void 0 : keysOrOptions);
            var wantResults = options ? options.allKeys : void 0;
            return this._trans("readwrite", function(trans) {
              var _a4 = _this.schema.primKey, auto = _a4.auto, keyPath = _a4.keyPath;
              if (keyPath && keys2)
                throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
              if (keys2 && keys2.length !== objects.length)
                throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
              var numObjects = objects.length;
              var objectsToPut = keyPath && auto ? objects.map(workaroundForUndefinedPrimKey(keyPath)) : objects;
              return _this.core.mutate({ trans, type: "put", keys: keys2, values: objectsToPut, wantResults }).then(function(_a5) {
                var numFailures = _a5.numFailures, results = _a5.results, lastResult = _a5.lastResult, failures = _a5.failures;
                var result = wantResults ? results : lastResult;
                if (numFailures === 0)
                  return result;
                throw new BulkError("".concat(_this.name, ".bulkPut(): ").concat(numFailures, " of ").concat(numObjects, " operations failed"), failures);
              });
            });
          };
          Table2.prototype.bulkUpdate = function(keysAndChanges) {
            var _this = this;
            var coreTable = this.core;
            var keys2 = keysAndChanges.map(function(entry) {
              return entry.key;
            });
            var changeSpecs = keysAndChanges.map(function(entry) {
              return entry.changes;
            });
            var offsetMap = [];
            return this._trans("readwrite", function(trans) {
              return coreTable.getMany({ trans, keys: keys2, cache: "clone" }).then(function(objs) {
                var resultKeys = [];
                var resultObjs = [];
                keysAndChanges.forEach(function(_a4, idx) {
                  var key = _a4.key, changes = _a4.changes;
                  var obj = objs[idx];
                  if (obj) {
                    for (var _i = 0, _b = Object.keys(changes); _i < _b.length; _i++) {
                      var keyPath = _b[_i];
                      var value = changes[keyPath];
                      if (keyPath === _this.schema.primKey.keyPath) {
                        if (cmp2(value, key) !== 0) {
                          throw new exceptions.Constraint("Cannot update primary key in bulkUpdate()");
                        }
                      } else {
                        setByKeyPath(obj, keyPath, value);
                      }
                    }
                    offsetMap.push(idx);
                    resultKeys.push(key);
                    resultObjs.push(obj);
                  }
                });
                var numEntries = resultKeys.length;
                return coreTable.mutate({
                  trans,
                  type: "put",
                  keys: resultKeys,
                  values: resultObjs,
                  updates: {
                    keys: keys2,
                    changeSpecs
                  }
                }).then(function(_a4) {
                  var numFailures = _a4.numFailures, failures = _a4.failures;
                  if (numFailures === 0)
                    return numEntries;
                  for (var _i = 0, _b = Object.keys(failures); _i < _b.length; _i++) {
                    var offset = _b[_i];
                    var mappedOffset = offsetMap[Number(offset)];
                    if (mappedOffset != null) {
                      var failure = failures[offset];
                      delete failures[offset];
                      failures[mappedOffset] = failure;
                    }
                  }
                  throw new BulkError("".concat(_this.name, ".bulkUpdate(): ").concat(numFailures, " of ").concat(numEntries, " operations failed"), failures);
                });
              });
            });
          };
          Table2.prototype.bulkDelete = function(keys2) {
            var _this = this;
            var numKeys = keys2.length;
            return this._trans("readwrite", function(trans) {
              return _this.core.mutate({ trans, type: "delete", keys: keys2 });
            }).then(function(_a4) {
              var numFailures = _a4.numFailures, lastResult = _a4.lastResult, failures = _a4.failures;
              if (numFailures === 0)
                return lastResult;
              throw new BulkError("".concat(_this.name, ".bulkDelete(): ").concat(numFailures, " of ").concat(numKeys, " operations failed"), failures);
            });
          };
          return Table2;
        }();
        function Events(ctx) {
          var evs = {};
          var rv = function(eventName, subscriber) {
            if (subscriber) {
              var i2 = arguments.length, args = new Array(i2 - 1);
              while (--i2)
                args[i2 - 1] = arguments[i2];
              evs[eventName].subscribe.apply(null, args);
              return ctx;
            } else if (typeof eventName === "string") {
              return evs[eventName];
            }
          };
          rv.addEventType = add;
          for (var i = 1, l = arguments.length; i < l; ++i) {
            add(arguments[i]);
          }
          return rv;
          function add(eventName, chainFunction, defaultFunction) {
            if (typeof eventName === "object")
              return addConfiguredEvents(eventName);
            if (!chainFunction)
              chainFunction = reverseStoppableEventChain;
            if (!defaultFunction)
              defaultFunction = nop;
            var context = {
              subscribers: [],
              fire: defaultFunction,
              subscribe: function(cb) {
                if (context.subscribers.indexOf(cb) === -1) {
                  context.subscribers.push(cb);
                  context.fire = chainFunction(context.fire, cb);
                }
              },
              unsubscribe: function(cb) {
                context.subscribers = context.subscribers.filter(function(fn) {
                  return fn !== cb;
                });
                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
              }
            };
            evs[eventName] = rv[eventName] = context;
            return context;
          }
          function addConfiguredEvents(cfg) {
            keys(cfg).forEach(function(eventName) {
              var args = cfg[eventName];
              if (isArray2(args)) {
                add(eventName, cfg[eventName][0], cfg[eventName][1]);
              } else if (args === "asap") {
                var context = add(eventName, mirror, function fire() {
                  var i2 = arguments.length, args2 = new Array(i2);
                  while (i2--)
                    args2[i2] = arguments[i2];
                  context.subscribers.forEach(function(fn) {
                    asap$1(function fireEvent() {
                      fn.apply(null, args2);
                    });
                  });
                });
              } else
                throw new exceptions.InvalidArgument("Invalid event config");
            });
          }
        }
        function makeClassConstructor(prototype, constructor) {
          derive(constructor).from({ prototype });
          return constructor;
        }
        function createTableConstructor(db2) {
          return makeClassConstructor(Table.prototype, function Table2(name2, tableSchema, trans) {
            this.db = db2;
            this._tx = trans;
            this.name = name2;
            this.schema = tableSchema;
            this.hook = db2._allTables[name2] ? db2._allTables[name2].hook : Events(null, {
              "creating": [hookCreatingChain, nop],
              "reading": [pureFunctionChain, mirror],
              "updating": [hookUpdatingChain, nop],
              "deleting": [hookDeletingChain, nop]
            });
          });
        }
        function isPlainKeyRange(ctx, ignoreLimitFilter) {
          return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
        }
        function addFilter(ctx, fn) {
          ctx.filter = combine3(ctx.filter, fn);
        }
        function addReplayFilter(ctx, factory, isLimitFilter) {
          var curr = ctx.replayFilter;
          ctx.replayFilter = curr ? function() {
            return combine3(curr(), factory());
          } : factory;
          ctx.justLimit = isLimitFilter && !curr;
        }
        function addMatchFilter(ctx, fn) {
          ctx.isMatch = combine3(ctx.isMatch, fn);
        }
        function getIndexOrStore(ctx, coreSchema) {
          if (ctx.isPrimKey)
            return coreSchema.primaryKey;
          var index = coreSchema.getIndexByKeyPath(ctx.index);
          if (!index)
            throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
          return index;
        }
        function openCursor(ctx, coreTable, trans) {
          var index = getIndexOrStore(ctx, coreTable.schema);
          return coreTable.openCursor({
            trans,
            values: !ctx.keysOnly,
            reverse: ctx.dir === "prev",
            unique: !!ctx.unique,
            query: {
              index,
              range: ctx.range
            }
          });
        }
        function iter(ctx, fn, coreTrans, coreTable) {
          var filter = ctx.replayFilter ? combine3(ctx.filter, ctx.replayFilter()) : ctx.filter;
          if (!ctx.or) {
            return iterate(openCursor(ctx, coreTable, coreTrans), combine3(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);
          } else {
            var set_1 = {};
            var union = function(item, cursor2, advance) {
              if (!filter || filter(cursor2, advance, function(result) {
                return cursor2.stop(result);
              }, function(err) {
                return cursor2.fail(err);
              })) {
                var primaryKey = cursor2.primaryKey;
                var key = "" + primaryKey;
                if (key === "[object ArrayBuffer]")
                  key = "" + new Uint8Array(primaryKey);
                if (!hasOwn3(set_1, key)) {
                  set_1[key] = true;
                  fn(item, cursor2, advance);
                }
              }
            };
            return Promise.all([
              ctx.or._iterate(union, coreTrans),
              iterate(openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
            ]);
          }
        }
        function iterate(cursorPromise, filter, fn, valueMapper) {
          var mappedFn = valueMapper ? function(x, c, a) {
            return fn(valueMapper(x), c, a);
          } : fn;
          var wrappedFn = wrap(mappedFn);
          return cursorPromise.then(function(cursor2) {
            if (cursor2) {
              return cursor2.start(function() {
                var c = function() {
                  return cursor2.continue();
                };
                if (!filter || filter(cursor2, function(advancer) {
                  return c = advancer;
                }, function(val) {
                  cursor2.stop(val);
                  c = nop;
                }, function(e) {
                  cursor2.fail(e);
                  c = nop;
                }))
                  wrappedFn(cursor2.value, cursor2, function(advancer) {
                    return c = advancer;
                  });
                c();
              });
            }
          });
        }
        var PropModSymbol2 = Symbol();
        var PropModification2 = function() {
          function PropModification3(spec) {
            Object.assign(this, spec);
          }
          PropModification3.prototype.execute = function(value) {
            var _a4;
            var prefixToReplace = (_a4 = this.replacePrefix) === null || _a4 === void 0 ? void 0 : _a4[0];
            if (prefixToReplace && typeof value === "string" && value.startsWith(prefixToReplace)) {
              return this.replacePrefix[1] + value.substring(prefixToReplace.length);
            }
            return value;
          };
          return PropModification3;
        }();
        var Collection = function() {
          function Collection2() {
          }
          Collection2.prototype._read = function(fn, cb) {
            var ctx = this._ctx;
            return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._trans("readonly", fn).then(cb);
          };
          Collection2.prototype._write = function(fn) {
            var ctx = this._ctx;
            return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._trans("readwrite", fn, "locked");
          };
          Collection2.prototype._addAlgorithm = function(fn) {
            var ctx = this._ctx;
            ctx.algorithm = combine3(ctx.algorithm, fn);
          };
          Collection2.prototype._iterate = function(fn, coreTrans) {
            return iter(this._ctx, fn, coreTrans, this._ctx.table.core);
          };
          Collection2.prototype.clone = function(props2) {
            var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
            if (props2)
              extend(ctx, props2);
            rv._ctx = ctx;
            return rv;
          };
          Collection2.prototype.raw = function() {
            this._ctx.valueMapper = null;
            return this;
          };
          Collection2.prototype.each = function(fn) {
            var ctx = this._ctx;
            return this._read(function(trans) {
              return iter(ctx, fn, trans, ctx.table.core);
            });
          };
          Collection2.prototype.count = function(cb) {
            var _this = this;
            return this._read(function(trans) {
              var ctx = _this._ctx;
              var coreTable = ctx.table.core;
              if (isPlainKeyRange(ctx, true)) {
                return coreTable.count({
                  trans,
                  query: {
                    index: getIndexOrStore(ctx, coreTable.schema),
                    range: ctx.range
                  }
                }).then(function(count2) {
                  return Math.min(count2, ctx.limit);
                });
              } else {
                var count = 0;
                return iter(ctx, function() {
                  ++count;
                  return false;
                }, trans, coreTable).then(function() {
                  return count;
                });
              }
            }).then(cb);
          };
          Collection2.prototype.sortBy = function(keyPath, cb) {
            var parts = keyPath.split(".").reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
            function getval(obj, i) {
              if (i)
                return getval(obj[parts[i]], i - 1);
              return obj[lastPart];
            }
            var order = this._ctx.dir === "next" ? 1 : -1;
            function sorter(a, b) {
              var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
              return aVal < bVal ? -order : aVal > bVal ? order : 0;
            }
            return this.toArray(function(a) {
              return a.sort(sorter);
            }).then(cb);
          };
          Collection2.prototype.toArray = function(cb) {
            var _this = this;
            return this._read(function(trans) {
              var ctx = _this._ctx;
              if (ctx.dir === "next" && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                var valueMapper_1 = ctx.valueMapper;
                var index = getIndexOrStore(ctx, ctx.table.core.schema);
                return ctx.table.core.query({
                  trans,
                  limit: ctx.limit,
                  values: true,
                  query: {
                    index,
                    range: ctx.range
                  }
                }).then(function(_a4) {
                  var result = _a4.result;
                  return valueMapper_1 ? result.map(valueMapper_1) : result;
                });
              } else {
                var a_1 = [];
                return iter(ctx, function(item) {
                  return a_1.push(item);
                }, trans, ctx.table.core).then(function() {
                  return a_1;
                });
              }
            }, cb);
          };
          Collection2.prototype.offset = function(offset) {
            var ctx = this._ctx;
            if (offset <= 0)
              return this;
            ctx.offset += offset;
            if (isPlainKeyRange(ctx)) {
              addReplayFilter(ctx, function() {
                var offsetLeft = offset;
                return function(cursor2, advance) {
                  if (offsetLeft === 0)
                    return true;
                  if (offsetLeft === 1) {
                    --offsetLeft;
                    return false;
                  }
                  advance(function() {
                    cursor2.advance(offsetLeft);
                    offsetLeft = 0;
                  });
                  return false;
                };
              });
            } else {
              addReplayFilter(ctx, function() {
                var offsetLeft = offset;
                return function() {
                  return --offsetLeft < 0;
                };
              });
            }
            return this;
          };
          Collection2.prototype.limit = function(numRows) {
            this._ctx.limit = Math.min(this._ctx.limit, numRows);
            addReplayFilter(this._ctx, function() {
              var rowsLeft = numRows;
              return function(cursor2, advance, resolve) {
                if (--rowsLeft <= 0)
                  advance(resolve);
                return rowsLeft >= 0;
              };
            }, true);
            return this;
          };
          Collection2.prototype.until = function(filterFunction, bIncludeStopEntry) {
            addFilter(this._ctx, function(cursor2, advance, resolve) {
              if (filterFunction(cursor2.value)) {
                advance(resolve);
                return bIncludeStopEntry;
              } else {
                return true;
              }
            });
            return this;
          };
          Collection2.prototype.first = function(cb) {
            return this.limit(1).toArray(function(a) {
              return a[0];
            }).then(cb);
          };
          Collection2.prototype.last = function(cb) {
            return this.reverse().first(cb);
          };
          Collection2.prototype.filter = function(filterFunction) {
            addFilter(this._ctx, function(cursor2) {
              return filterFunction(cursor2.value);
            });
            addMatchFilter(this._ctx, filterFunction);
            return this;
          };
          Collection2.prototype.and = function(filter) {
            return this.filter(filter);
          };
          Collection2.prototype.or = function(indexName) {
            return new this.db.WhereClause(this._ctx.table, indexName, this);
          };
          Collection2.prototype.reverse = function() {
            this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
            if (this._ondirectionchange)
              this._ondirectionchange(this._ctx.dir);
            return this;
          };
          Collection2.prototype.desc = function() {
            return this.reverse();
          };
          Collection2.prototype.eachKey = function(cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            return this.each(function(val, cursor2) {
              cb(cursor2.key, cursor2);
            });
          };
          Collection2.prototype.eachUniqueKey = function(cb) {
            this._ctx.unique = "unique";
            return this.eachKey(cb);
          };
          Collection2.prototype.eachPrimaryKey = function(cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            return this.each(function(val, cursor2) {
              cb(cursor2.primaryKey, cursor2);
            });
          };
          Collection2.prototype.keys = function(cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            var a = [];
            return this.each(function(item, cursor2) {
              a.push(cursor2.key);
            }).then(function() {
              return a;
            }).then(cb);
          };
          Collection2.prototype.primaryKeys = function(cb) {
            var ctx = this._ctx;
            if (ctx.dir === "next" && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
              return this._read(function(trans) {
                var index = getIndexOrStore(ctx, ctx.table.core.schema);
                return ctx.table.core.query({
                  trans,
                  values: false,
                  limit: ctx.limit,
                  query: {
                    index,
                    range: ctx.range
                  }
                });
              }).then(function(_a4) {
                var result = _a4.result;
                return result;
              }).then(cb);
            }
            ctx.keysOnly = !ctx.isMatch;
            var a = [];
            return this.each(function(item, cursor2) {
              a.push(cursor2.primaryKey);
            }).then(function() {
              return a;
            }).then(cb);
          };
          Collection2.prototype.uniqueKeys = function(cb) {
            this._ctx.unique = "unique";
            return this.keys(cb);
          };
          Collection2.prototype.firstKey = function(cb) {
            return this.limit(1).keys(function(a) {
              return a[0];
            }).then(cb);
          };
          Collection2.prototype.lastKey = function(cb) {
            return this.reverse().firstKey(cb);
          };
          Collection2.prototype.distinct = function() {
            var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
            if (!idx || !idx.multi)
              return this;
            var set = {};
            addFilter(this._ctx, function(cursor2) {
              var strKey = cursor2.primaryKey.toString();
              var found = hasOwn3(set, strKey);
              set[strKey] = true;
              return !found;
            });
            return this;
          };
          Collection2.prototype.modify = function(changes) {
            var _this = this;
            var ctx = this._ctx;
            return this._write(function(trans) {
              var modifyer;
              if (typeof changes === "function") {
                modifyer = changes;
              } else {
                var keyPaths = keys(changes);
                var numKeys = keyPaths.length;
                modifyer = function(item) {
                  var anythingModified = false;
                  for (var i = 0; i < numKeys; ++i) {
                    var keyPath = keyPaths[i];
                    var val = changes[keyPath];
                    var origVal = getByKeyPath(item, keyPath);
                    if (val instanceof PropModification2) {
                      setByKeyPath(item, keyPath, val.execute(origVal));
                      anythingModified = true;
                    } else if (origVal !== val) {
                      setByKeyPath(item, keyPath, val);
                      anythingModified = true;
                    }
                  }
                  return anythingModified;
                };
              }
              var coreTable = ctx.table.core;
              var _a4 = coreTable.schema.primaryKey, outbound = _a4.outbound, extractKey = _a4.extractKey;
              var limit = _this.db._options.modifyChunkSize || 200;
              var totalFailures = [];
              var successCount = 0;
              var failedKeys = [];
              var applyMutateResult = function(expectedCount, res) {
                var failures = res.failures, numFailures = res.numFailures;
                successCount += expectedCount - numFailures;
                for (var _i = 0, _a5 = keys(failures); _i < _a5.length; _i++) {
                  var pos = _a5[_i];
                  totalFailures.push(failures[pos]);
                }
              };
              return _this.clone().primaryKeys().then(function(keys2) {
                var nextChunk = function(offset) {
                  var count = Math.min(limit, keys2.length - offset);
                  return coreTable.getMany({
                    trans,
                    keys: keys2.slice(offset, offset + count),
                    cache: "immutable"
                  }).then(function(values2) {
                    var addValues = [];
                    var putValues = [];
                    var putKeys = outbound ? [] : null;
                    var deleteKeys = [];
                    for (var i = 0; i < count; ++i) {
                      var origValue = values2[i];
                      var ctx_1 = {
                        value: deepClone(origValue),
                        primKey: keys2[offset + i]
                      };
                      if (modifyer.call(ctx_1, ctx_1.value, ctx_1) !== false) {
                        if (ctx_1.value == null) {
                          deleteKeys.push(keys2[offset + i]);
                        } else if (!outbound && cmp2(extractKey(origValue), extractKey(ctx_1.value)) !== 0) {
                          deleteKeys.push(keys2[offset + i]);
                          addValues.push(ctx_1.value);
                        } else {
                          putValues.push(ctx_1.value);
                          if (outbound)
                            putKeys.push(keys2[offset + i]);
                        }
                      }
                    }
                    var criteria = isPlainKeyRange(ctx) && ctx.limit === Infinity && (typeof changes !== "function" || changes === deleteCallback) && {
                      index: ctx.index,
                      range: ctx.range
                    };
                    return Promise.resolve(addValues.length > 0 && coreTable.mutate({ trans, type: "add", values: addValues }).then(function(res) {
                      for (var pos in res.failures) {
                        deleteKeys.splice(parseInt(pos), 1);
                      }
                      applyMutateResult(addValues.length, res);
                    })).then(function() {
                      return (putValues.length > 0 || criteria && typeof changes === "object") && coreTable.mutate({
                        trans,
                        type: "put",
                        keys: putKeys,
                        values: putValues,
                        criteria,
                        changeSpec: typeof changes !== "function" && changes
                      }).then(function(res) {
                        return applyMutateResult(putValues.length, res);
                      });
                    }).then(function() {
                      return (deleteKeys.length > 0 || criteria && changes === deleteCallback) && coreTable.mutate({
                        trans,
                        type: "delete",
                        keys: deleteKeys,
                        criteria
                      }).then(function(res) {
                        return applyMutateResult(deleteKeys.length, res);
                      });
                    }).then(function() {
                      return keys2.length > offset + count && nextChunk(offset + limit);
                    });
                  });
                };
                return nextChunk(0).then(function() {
                  if (totalFailures.length > 0)
                    throw new ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
                  return keys2.length;
                });
              });
            });
          };
          Collection2.prototype.delete = function() {
            var ctx = this._ctx, range = ctx.range;
            if (isPlainKeyRange(ctx) && (ctx.isPrimKey || range.type === 3)) {
              return this._write(function(trans) {
                var primaryKey = ctx.table.core.schema.primaryKey;
                var coreRange = range;
                return ctx.table.core.count({ trans, query: { index: primaryKey, range: coreRange } }).then(function(count) {
                  return ctx.table.core.mutate({ trans, type: "deleteRange", range: coreRange }).then(function(_a4) {
                    var failures = _a4.failures;
                    _a4.lastResult;
                    _a4.results;
                    var numFailures = _a4.numFailures;
                    if (numFailures)
                      throw new ModifyError("Could not delete some values", Object.keys(failures).map(function(pos) {
                        return failures[pos];
                      }), count - numFailures);
                    return count - numFailures;
                  });
                });
              });
            }
            return this.modify(deleteCallback);
          };
          return Collection2;
        }();
        var deleteCallback = function(value, ctx) {
          return ctx.value = null;
        };
        function createCollectionConstructor(db2) {
          return makeClassConstructor(Collection.prototype, function Collection2(whereClause, keyRangeGenerator) {
            this.db = db2;
            var keyRange = AnyRange, error = null;
            if (keyRangeGenerator)
              try {
                keyRange = keyRangeGenerator();
              } catch (ex) {
                error = ex;
              }
            var whereCtx = whereClause._ctx;
            var table = whereCtx.table;
            var readingHook = table.hook.reading.fire;
            this._ctx = {
              table,
              index: whereCtx.index,
              isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
              range: keyRange,
              keysOnly: false,
              dir: "next",
              unique: "",
              algorithm: null,
              filter: null,
              replayFilter: null,
              justLimit: true,
              isMatch: null,
              offset: 0,
              limit: Infinity,
              error,
              or: whereCtx.or,
              valueMapper: readingHook !== mirror ? readingHook : null
            };
          });
        }
        function simpleCompare(a, b) {
          return a < b ? -1 : a === b ? 0 : 1;
        }
        function simpleCompareReverse(a, b) {
          return a > b ? -1 : a === b ? 0 : 1;
        }
        function fail(collectionOrWhereClause, err, T) {
          var collection = collectionOrWhereClause instanceof WhereClause ? new collectionOrWhereClause.Collection(collectionOrWhereClause) : collectionOrWhereClause;
          collection._ctx.error = T ? new T(err) : new TypeError(err);
          return collection;
        }
        function emptyCollection(whereClause) {
          return new whereClause.Collection(whereClause, function() {
            return rangeEqual("");
          }).limit(0);
        }
        function upperFactory(dir) {
          return dir === "next" ? function(s) {
            return s.toUpperCase();
          } : function(s) {
            return s.toLowerCase();
          };
        }
        function lowerFactory(dir) {
          return dir === "next" ? function(s) {
            return s.toLowerCase();
          } : function(s) {
            return s.toUpperCase();
          };
        }
        function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp3, dir) {
          var length6 = Math.min(key.length, lowerNeedle.length);
          var llp = -1;
          for (var i = 0; i < length6; ++i) {
            var lwrKeyChar = lowerKey[i];
            if (lwrKeyChar !== lowerNeedle[i]) {
              if (cmp3(key[i], upperNeedle[i]) < 0)
                return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
              if (cmp3(key[i], lowerNeedle[i]) < 0)
                return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
              if (llp >= 0)
                return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
              return null;
            }
            if (cmp3(key[i], lwrKeyChar) < 0)
              llp = i;
          }
          if (length6 < lowerNeedle.length && dir === "next")
            return key + upperNeedle.substr(key.length);
          if (length6 < key.length && dir === "prev")
            return key.substr(0, upperNeedle.length);
          return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
        }
        function addIgnoreCaseAlgorithm(whereClause, match2, needles, suffix) {
          var upper, lower, compare3, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
          if (!needles.every(function(s) {
            return typeof s === "string";
          })) {
            return fail(whereClause, STRING_EXPECTED);
          }
          function initDirection(dir) {
            upper = upperFactory(dir);
            lower = lowerFactory(dir);
            compare3 = dir === "next" ? simpleCompare : simpleCompareReverse;
            var needleBounds = needles.map(function(needle) {
              return { lower: lower(needle), upper: upper(needle) };
            }).sort(function(a, b) {
              return compare3(a.lower, b.lower);
            });
            upperNeedles = needleBounds.map(function(nb) {
              return nb.upper;
            });
            lowerNeedles = needleBounds.map(function(nb) {
              return nb.lower;
            });
            direction = dir;
            nextKeySuffix = dir === "next" ? "" : suffix;
          }
          initDirection("next");
          var c = new whereClause.Collection(whereClause, function() {
            return createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
          });
          c._ondirectionchange = function(direction2) {
            initDirection(direction2);
          };
          var firstPossibleNeedle = 0;
          c._addAlgorithm(function(cursor2, advance, resolve) {
            var key = cursor2.key;
            if (typeof key !== "string")
              return false;
            var lowerKey = lower(key);
            if (match2(lowerKey, lowerNeedles, firstPossibleNeedle)) {
              return true;
            } else {
              var lowestPossibleCasing = null;
              for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
                var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare3, direction);
                if (casing === null && lowestPossibleCasing === null)
                  firstPossibleNeedle = i + 1;
                else if (lowestPossibleCasing === null || compare3(lowestPossibleCasing, casing) > 0) {
                  lowestPossibleCasing = casing;
                }
              }
              if (lowestPossibleCasing !== null) {
                advance(function() {
                  cursor2.continue(lowestPossibleCasing + nextKeySuffix);
                });
              } else {
                advance(resolve);
              }
              return false;
            }
          });
          return c;
        }
        function createRange(lower, upper, lowerOpen, upperOpen) {
          return {
            type: 2,
            lower,
            upper,
            lowerOpen,
            upperOpen
          };
        }
        function rangeEqual(value) {
          return {
            type: 1,
            lower: value,
            upper: value
          };
        }
        var WhereClause = function() {
          function WhereClause2() {
          }
          Object.defineProperty(WhereClause2.prototype, "Collection", {
            get: function() {
              return this._ctx.table.db.Collection;
            },
            enumerable: false,
            configurable: true
          });
          WhereClause2.prototype.between = function(lower, upper, includeLower, includeUpper) {
            includeLower = includeLower !== false;
            includeUpper = includeUpper === true;
            try {
              if (this._cmp(lower, upper) > 0 || this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper))
                return emptyCollection(this);
              return new this.Collection(this, function() {
                return createRange(lower, upper, !includeLower, !includeUpper);
              });
            } catch (e) {
              return fail(this, INVALID_KEY_ARGUMENT);
            }
          };
          WhereClause2.prototype.equals = function(value) {
            if (value == null)
              return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function() {
              return rangeEqual(value);
            });
          };
          WhereClause2.prototype.above = function(value) {
            if (value == null)
              return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function() {
              return createRange(value, void 0, true);
            });
          };
          WhereClause2.prototype.aboveOrEqual = function(value) {
            if (value == null)
              return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function() {
              return createRange(value, void 0, false);
            });
          };
          WhereClause2.prototype.below = function(value) {
            if (value == null)
              return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function() {
              return createRange(void 0, value, false, true);
            });
          };
          WhereClause2.prototype.belowOrEqual = function(value) {
            if (value == null)
              return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function() {
              return createRange(void 0, value);
            });
          };
          WhereClause2.prototype.startsWith = function(str) {
            if (typeof str !== "string")
              return fail(this, STRING_EXPECTED);
            return this.between(str, str + maxString, true, true);
          };
          WhereClause2.prototype.startsWithIgnoreCase = function(str) {
            if (str === "")
              return this.startsWith(str);
            return addIgnoreCaseAlgorithm(this, function(x, a) {
              return x.indexOf(a[0]) === 0;
            }, [str], maxString);
          };
          WhereClause2.prototype.equalsIgnoreCase = function(str) {
            return addIgnoreCaseAlgorithm(this, function(x, a) {
              return x === a[0];
            }, [str], "");
          };
          WhereClause2.prototype.anyOfIgnoreCase = function() {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
              return emptyCollection(this);
            return addIgnoreCaseAlgorithm(this, function(x, a) {
              return a.indexOf(x) !== -1;
            }, set, "");
          };
          WhereClause2.prototype.startsWithAnyOfIgnoreCase = function() {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
              return emptyCollection(this);
            return addIgnoreCaseAlgorithm(this, function(x, a) {
              return a.some(function(n) {
                return x.indexOf(n) === 0;
              });
            }, set, maxString);
          };
          WhereClause2.prototype.anyOf = function() {
            var _this = this;
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            var compare3 = this._cmp;
            try {
              set.sort(compare3);
            } catch (e) {
              return fail(this, INVALID_KEY_ARGUMENT);
            }
            if (set.length === 0)
              return emptyCollection(this);
            var c = new this.Collection(this, function() {
              return createRange(set[0], set[set.length - 1]);
            });
            c._ondirectionchange = function(direction) {
              compare3 = direction === "next" ? _this._ascending : _this._descending;
              set.sort(compare3);
            };
            var i = 0;
            c._addAlgorithm(function(cursor2, advance, resolve) {
              var key = cursor2.key;
              while (compare3(key, set[i]) > 0) {
                ++i;
                if (i === set.length) {
                  advance(resolve);
                  return false;
                }
              }
              if (compare3(key, set[i]) === 0) {
                return true;
              } else {
                advance(function() {
                  cursor2.continue(set[i]);
                });
                return false;
              }
            });
            return c;
          };
          WhereClause2.prototype.notEqual = function(value) {
            return this.inAnyRange([[minKey, value], [value, this.db._maxKey]], { includeLowers: false, includeUppers: false });
          };
          WhereClause2.prototype.noneOf = function() {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
              return new this.Collection(this);
            try {
              set.sort(this._ascending);
            } catch (e) {
              return fail(this, INVALID_KEY_ARGUMENT);
            }
            var ranges = set.reduce(function(res, val) {
              return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]];
            }, null);
            ranges.push([set[set.length - 1], this.db._maxKey]);
            return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
          };
          WhereClause2.prototype.inAnyRange = function(ranges, options) {
            var _this = this;
            var cmp3 = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;
            if (ranges.length === 0)
              return emptyCollection(this);
            if (!ranges.every(function(range) {
              return range[0] !== void 0 && range[1] !== void 0 && ascending(range[0], range[1]) <= 0;
            })) {
              return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
            }
            var includeLowers = !options || options.includeLowers !== false;
            var includeUppers = options && options.includeUppers === true;
            function addRange2(ranges2, newRange) {
              var i = 0, l = ranges2.length;
              for (; i < l; ++i) {
                var range = ranges2[i];
                if (cmp3(newRange[0], range[1]) < 0 && cmp3(newRange[1], range[0]) > 0) {
                  range[0] = min(range[0], newRange[0]);
                  range[1] = max(range[1], newRange[1]);
                  break;
                }
              }
              if (i === l)
                ranges2.push(newRange);
              return ranges2;
            }
            var sortDirection = ascending;
            function rangeSorter(a, b) {
              return sortDirection(a[0], b[0]);
            }
            var set;
            try {
              set = ranges.reduce(addRange2, []);
              set.sort(rangeSorter);
            } catch (ex) {
              return fail(this, INVALID_KEY_ARGUMENT);
            }
            var rangePos = 0;
            var keyIsBeyondCurrentEntry = includeUppers ? function(key) {
              return ascending(key, set[rangePos][1]) > 0;
            } : function(key) {
              return ascending(key, set[rangePos][1]) >= 0;
            };
            var keyIsBeforeCurrentEntry = includeLowers ? function(key) {
              return descending(key, set[rangePos][0]) > 0;
            } : function(key) {
              return descending(key, set[rangePos][0]) >= 0;
            };
            function keyWithinCurrentRange(key) {
              return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
            }
            var checkKey = keyIsBeyondCurrentEntry;
            var c = new this.Collection(this, function() {
              return createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
            });
            c._ondirectionchange = function(direction) {
              if (direction === "next") {
                checkKey = keyIsBeyondCurrentEntry;
                sortDirection = ascending;
              } else {
                checkKey = keyIsBeforeCurrentEntry;
                sortDirection = descending;
              }
              set.sort(rangeSorter);
            };
            c._addAlgorithm(function(cursor2, advance, resolve) {
              var key = cursor2.key;
              while (checkKey(key)) {
                ++rangePos;
                if (rangePos === set.length) {
                  advance(resolve);
                  return false;
                }
              }
              if (keyWithinCurrentRange(key)) {
                return true;
              } else if (_this._cmp(key, set[rangePos][1]) === 0 || _this._cmp(key, set[rangePos][0]) === 0) {
                return false;
              } else {
                advance(function() {
                  if (sortDirection === ascending)
                    cursor2.continue(set[rangePos][0]);
                  else
                    cursor2.continue(set[rangePos][1]);
                });
                return false;
              }
            });
            return c;
          };
          WhereClause2.prototype.startsWithAnyOf = function() {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (!set.every(function(s) {
              return typeof s === "string";
            })) {
              return fail(this, "startsWithAnyOf() only works with strings");
            }
            if (set.length === 0)
              return emptyCollection(this);
            return this.inAnyRange(set.map(function(str) {
              return [str, str + maxString];
            }));
          };
          return WhereClause2;
        }();
        function createWhereClauseConstructor(db2) {
          return makeClassConstructor(WhereClause.prototype, function WhereClause2(table, index, orCollection) {
            this.db = db2;
            this._ctx = {
              table,
              index: index === ":id" ? null : index,
              or: orCollection
            };
            this._cmp = this._ascending = cmp2;
            this._descending = function(a, b) {
              return cmp2(b, a);
            };
            this._max = function(a, b) {
              return cmp2(a, b) > 0 ? a : b;
            };
            this._min = function(a, b) {
              return cmp2(a, b) < 0 ? a : b;
            };
            this._IDBKeyRange = db2._deps.IDBKeyRange;
            if (!this._IDBKeyRange)
              throw new exceptions.MissingAPI();
          });
        }
        function eventRejectHandler(reject) {
          return wrap(function(event) {
            preventDefault(event);
            reject(event.target.error);
            return false;
          });
        }
        function preventDefault(event) {
          if (event.stopPropagation)
            event.stopPropagation();
          if (event.preventDefault)
            event.preventDefault();
        }
        var DEXIE_STORAGE_MUTATED_EVENT_NAME = "storagemutated";
        var STORAGE_MUTATED_DOM_EVENT_NAME = "x-storagemutated-1";
        var globalEvents = Events(null, DEXIE_STORAGE_MUTATED_EVENT_NAME);
        var Transaction = function() {
          function Transaction2() {
          }
          Transaction2.prototype._lock = function() {
            assert(!PSD.global);
            ++this._reculock;
            if (this._reculock === 1 && !PSD.global)
              PSD.lockOwnerFor = this;
            return this;
          };
          Transaction2.prototype._unlock = function() {
            assert(!PSD.global);
            if (--this._reculock === 0) {
              if (!PSD.global)
                PSD.lockOwnerFor = null;
              while (this._blockedFuncs.length > 0 && !this._locked()) {
                var fnAndPSD = this._blockedFuncs.shift();
                try {
                  usePSD(fnAndPSD[1], fnAndPSD[0]);
                } catch (e) {
                }
              }
            }
            return this;
          };
          Transaction2.prototype._locked = function() {
            return this._reculock && PSD.lockOwnerFor !== this;
          };
          Transaction2.prototype.create = function(idbtrans) {
            var _this = this;
            if (!this.mode)
              return this;
            var idbdb = this.db.idbdb;
            var dbOpenError = this.db._state.dbOpenError;
            assert(!this.idbtrans);
            if (!idbtrans && !idbdb) {
              switch (dbOpenError && dbOpenError.name) {
                case "DatabaseClosedError":
                  throw new exceptions.DatabaseClosed(dbOpenError);
                case "MissingAPIError":
                  throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
                default:
                  throw new exceptions.OpenFailed(dbOpenError);
              }
            }
            if (!this.active)
              throw new exceptions.TransactionInactive();
            assert(this._completion._state === null);
            idbtrans = this.idbtrans = idbtrans || (this.db.core ? this.db.core.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }) : idbdb.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }));
            idbtrans.onerror = wrap(function(ev) {
              preventDefault(ev);
              _this._reject(idbtrans.error);
            });
            idbtrans.onabort = wrap(function(ev) {
              preventDefault(ev);
              _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
              _this.active = false;
              _this.on("abort").fire(ev);
            });
            idbtrans.oncomplete = wrap(function() {
              _this.active = false;
              _this._resolve();
              if ("mutatedParts" in idbtrans) {
                globalEvents.storagemutated.fire(idbtrans["mutatedParts"]);
              }
            });
            return this;
          };
          Transaction2.prototype._promise = function(mode, fn, bWriteLock) {
            var _this = this;
            if (mode === "readwrite" && this.mode !== "readwrite")
              return rejection(new exceptions.ReadOnly("Transaction is readonly"));
            if (!this.active)
              return rejection(new exceptions.TransactionInactive());
            if (this._locked()) {
              return new DexiePromise(function(resolve, reject) {
                _this._blockedFuncs.push([function() {
                  _this._promise(mode, fn, bWriteLock).then(resolve, reject);
                }, PSD]);
              });
            } else if (bWriteLock) {
              return newScope(function() {
                var p2 = new DexiePromise(function(resolve, reject) {
                  _this._lock();
                  var rv = fn(resolve, reject, _this);
                  if (rv && rv.then)
                    rv.then(resolve, reject);
                });
                p2.finally(function() {
                  return _this._unlock();
                });
                p2._lib = true;
                return p2;
              });
            } else {
              var p = new DexiePromise(function(resolve, reject) {
                var rv = fn(resolve, reject, _this);
                if (rv && rv.then)
                  rv.then(resolve, reject);
              });
              p._lib = true;
              return p;
            }
          };
          Transaction2.prototype._root = function() {
            return this.parent ? this.parent._root() : this;
          };
          Transaction2.prototype.waitFor = function(promiseLike) {
            var root = this._root();
            var promise = DexiePromise.resolve(promiseLike);
            if (root._waitingFor) {
              root._waitingFor = root._waitingFor.then(function() {
                return promise;
              });
            } else {
              root._waitingFor = promise;
              root._waitingQueue = [];
              var store = root.idbtrans.objectStore(root.storeNames[0]);
              (function spin() {
                ++root._spinCount;
                while (root._waitingQueue.length)
                  root._waitingQueue.shift()();
                if (root._waitingFor)
                  store.get(-Infinity).onsuccess = spin;
              })();
            }
            var currentWaitPromise = root._waitingFor;
            return new DexiePromise(function(resolve, reject) {
              promise.then(function(res) {
                return root._waitingQueue.push(wrap(resolve.bind(null, res)));
              }, function(err) {
                return root._waitingQueue.push(wrap(reject.bind(null, err)));
              }).finally(function() {
                if (root._waitingFor === currentWaitPromise) {
                  root._waitingFor = null;
                }
              });
            });
          };
          Transaction2.prototype.abort = function() {
            if (this.active) {
              this.active = false;
              if (this.idbtrans)
                this.idbtrans.abort();
              this._reject(new exceptions.Abort());
            }
          };
          Transaction2.prototype.table = function(tableName) {
            var memoizedTables = this._memoizedTables || (this._memoizedTables = {});
            if (hasOwn3(memoizedTables, tableName))
              return memoizedTables[tableName];
            var tableSchema = this.schema[tableName];
            if (!tableSchema) {
              throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
            }
            var transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
            transactionBoundTable.core = this.db.core.table(tableName);
            memoizedTables[tableName] = transactionBoundTable;
            return transactionBoundTable;
          };
          return Transaction2;
        }();
        function createTransactionConstructor(db2) {
          return makeClassConstructor(Transaction.prototype, function Transaction2(mode, storeNames, dbschema, chromeTransactionDurability, parent) {
            var _this = this;
            this.db = db2;
            this.mode = mode;
            this.storeNames = storeNames;
            this.schema = dbschema;
            this.chromeTransactionDurability = chromeTransactionDurability;
            this.idbtrans = null;
            this.on = Events(this, "complete", "error", "abort");
            this.parent = parent || null;
            this.active = true;
            this._reculock = 0;
            this._blockedFuncs = [];
            this._resolve = null;
            this._reject = null;
            this._waitingFor = null;
            this._waitingQueue = null;
            this._spinCount = 0;
            this._completion = new DexiePromise(function(resolve, reject) {
              _this._resolve = resolve;
              _this._reject = reject;
            });
            this._completion.then(function() {
              _this.active = false;
              _this.on.complete.fire();
            }, function(e) {
              var wasActive = _this.active;
              _this.active = false;
              _this.on.error.fire(e);
              _this.parent ? _this.parent._reject(e) : wasActive && _this.idbtrans && _this.idbtrans.abort();
              return rejection(e);
            });
          });
        }
        function createIndexSpec(name2, keyPath, unique, multi, auto, compound, isPrimKey) {
          return {
            name: name2,
            keyPath,
            unique,
            multi,
            auto,
            compound,
            src: (unique && !isPrimKey ? "&" : "") + (multi ? "*" : "") + (auto ? "++" : "") + nameFromKeyPath(keyPath)
          };
        }
        function nameFromKeyPath(keyPath) {
          return typeof keyPath === "string" ? keyPath : keyPath ? "[" + [].join.call(keyPath, "+") + "]" : "";
        }
        function createTableSchema(name2, primKey, indexes) {
          return {
            name: name2,
            primKey,
            indexes,
            mappedClass: null,
            idxByName: arrayToObject(indexes, function(index) {
              return [index.name, index];
            })
          };
        }
        function safariMultiStoreFix(storeNames) {
          return storeNames.length === 1 ? storeNames[0] : storeNames;
        }
        var getMaxKey = function(IdbKeyRange) {
          try {
            IdbKeyRange.only([[]]);
            getMaxKey = function() {
              return [[]];
            };
            return [[]];
          } catch (e) {
            getMaxKey = function() {
              return maxString;
            };
            return maxString;
          }
        };
        function getKeyExtractor(keyPath) {
          if (keyPath == null) {
            return function() {
              return void 0;
            };
          } else if (typeof keyPath === "string") {
            return getSinglePathKeyExtractor(keyPath);
          } else {
            return function(obj) {
              return getByKeyPath(obj, keyPath);
            };
          }
        }
        function getSinglePathKeyExtractor(keyPath) {
          var split = keyPath.split(".");
          if (split.length === 1) {
            return function(obj) {
              return obj[keyPath];
            };
          } else {
            return function(obj) {
              return getByKeyPath(obj, keyPath);
            };
          }
        }
        function arrayify(arrayLike) {
          return [].slice.call(arrayLike);
        }
        var _id_counter = 0;
        function getKeyPathAlias(keyPath) {
          return keyPath == null ? ":id" : typeof keyPath === "string" ? keyPath : "[".concat(keyPath.join("+"), "]");
        }
        function createDBCore(db2, IdbKeyRange, tmpTrans) {
          function extractSchema(db3, trans) {
            var tables2 = arrayify(db3.objectStoreNames);
            return {
              schema: {
                name: db3.name,
                tables: tables2.map(function(table) {
                  return trans.objectStore(table);
                }).map(function(store) {
                  var keyPath = store.keyPath, autoIncrement = store.autoIncrement;
                  var compound = isArray2(keyPath);
                  var outbound = keyPath == null;
                  var indexByKeyPath = {};
                  var result = {
                    name: store.name,
                    primaryKey: {
                      name: null,
                      isPrimaryKey: true,
                      outbound,
                      compound,
                      keyPath,
                      autoIncrement,
                      unique: true,
                      extractKey: getKeyExtractor(keyPath)
                    },
                    indexes: arrayify(store.indexNames).map(function(indexName) {
                      return store.index(indexName);
                    }).map(function(index) {
                      var name2 = index.name, unique = index.unique, multiEntry = index.multiEntry, keyPath2 = index.keyPath;
                      var compound2 = isArray2(keyPath2);
                      var result2 = {
                        name: name2,
                        compound: compound2,
                        keyPath: keyPath2,
                        unique,
                        multiEntry,
                        extractKey: getKeyExtractor(keyPath2)
                      };
                      indexByKeyPath[getKeyPathAlias(keyPath2)] = result2;
                      return result2;
                    }),
                    getIndexByKeyPath: function(keyPath2) {
                      return indexByKeyPath[getKeyPathAlias(keyPath2)];
                    }
                  };
                  indexByKeyPath[":id"] = result.primaryKey;
                  if (keyPath != null) {
                    indexByKeyPath[getKeyPathAlias(keyPath)] = result.primaryKey;
                  }
                  return result;
                })
              },
              hasGetAll: tables2.length > 0 && "getAll" in trans.objectStore(tables2[0]) && !(typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
            };
          }
          function makeIDBKeyRange(range) {
            if (range.type === 3)
              return null;
            if (range.type === 4)
              throw new Error("Cannot convert never type to IDBKeyRange");
            var lower = range.lower, upper = range.upper, lowerOpen = range.lowerOpen, upperOpen = range.upperOpen;
            var idbRange = lower === void 0 ? upper === void 0 ? null : IdbKeyRange.upperBound(upper, !!upperOpen) : upper === void 0 ? IdbKeyRange.lowerBound(lower, !!lowerOpen) : IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
            return idbRange;
          }
          function createDbCoreTable(tableSchema) {
            var tableName = tableSchema.name;
            function mutate(_a5) {
              var trans = _a5.trans, type2 = _a5.type, keys2 = _a5.keys, values2 = _a5.values, range = _a5.range;
              return new Promise(function(resolve, reject) {
                resolve = wrap(resolve);
                var store = trans.objectStore(tableName);
                var outbound = store.keyPath == null;
                var isAddOrPut = type2 === "put" || type2 === "add";
                if (!isAddOrPut && type2 !== "delete" && type2 !== "deleteRange")
                  throw new Error("Invalid operation type: " + type2);
                var length6 = (keys2 || values2 || { length: 1 }).length;
                if (keys2 && values2 && keys2.length !== values2.length) {
                  throw new Error("Given keys array must have same length as given values array.");
                }
                if (length6 === 0)
                  return resolve({ numFailures: 0, failures: {}, results: [], lastResult: void 0 });
                var req;
                var reqs = [];
                var failures = [];
                var numFailures = 0;
                var errorHandler = function(event) {
                  ++numFailures;
                  preventDefault(event);
                };
                if (type2 === "deleteRange") {
                  if (range.type === 4)
                    return resolve({ numFailures, failures, results: [], lastResult: void 0 });
                  if (range.type === 3)
                    reqs.push(req = store.clear());
                  else
                    reqs.push(req = store.delete(makeIDBKeyRange(range)));
                } else {
                  var _a6 = isAddOrPut ? outbound ? [values2, keys2] : [values2, null] : [keys2, null], args1 = _a6[0], args2 = _a6[1];
                  if (isAddOrPut) {
                    for (var i = 0; i < length6; ++i) {
                      reqs.push(req = args2 && args2[i] !== void 0 ? store[type2](args1[i], args2[i]) : store[type2](args1[i]));
                      req.onerror = errorHandler;
                    }
                  } else {
                    for (var i = 0; i < length6; ++i) {
                      reqs.push(req = store[type2](args1[i]));
                      req.onerror = errorHandler;
                    }
                  }
                }
                var done = function(event) {
                  var lastResult = event.target.result;
                  reqs.forEach(function(req2, i2) {
                    return req2.error != null && (failures[i2] = req2.error);
                  });
                  resolve({
                    numFailures,
                    failures,
                    results: type2 === "delete" ? keys2 : reqs.map(function(req2) {
                      return req2.result;
                    }),
                    lastResult
                  });
                };
                req.onerror = function(event) {
                  errorHandler(event);
                  done(event);
                };
                req.onsuccess = done;
              });
            }
            function openCursor2(_a5) {
              var trans = _a5.trans, values2 = _a5.values, query2 = _a5.query, reverse = _a5.reverse, unique = _a5.unique;
              return new Promise(function(resolve, reject) {
                resolve = wrap(resolve);
                var index = query2.index, range = query2.range;
                var store = trans.objectStore(tableName);
                var source = index.isPrimaryKey ? store : store.index(index.name);
                var direction = reverse ? unique ? "prevunique" : "prev" : unique ? "nextunique" : "next";
                var req = values2 || !("openKeyCursor" in source) ? source.openCursor(makeIDBKeyRange(range), direction) : source.openKeyCursor(makeIDBKeyRange(range), direction);
                req.onerror = eventRejectHandler(reject);
                req.onsuccess = wrap(function(ev) {
                  var cursor2 = req.result;
                  if (!cursor2) {
                    resolve(null);
                    return;
                  }
                  cursor2.___id = ++_id_counter;
                  cursor2.done = false;
                  var _cursorContinue = cursor2.continue.bind(cursor2);
                  var _cursorContinuePrimaryKey = cursor2.continuePrimaryKey;
                  if (_cursorContinuePrimaryKey)
                    _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor2);
                  var _cursorAdvance = cursor2.advance.bind(cursor2);
                  var doThrowCursorIsNotStarted = function() {
                    throw new Error("Cursor not started");
                  };
                  var doThrowCursorIsStopped = function() {
                    throw new Error("Cursor not stopped");
                  };
                  cursor2.trans = trans;
                  cursor2.stop = cursor2.continue = cursor2.continuePrimaryKey = cursor2.advance = doThrowCursorIsNotStarted;
                  cursor2.fail = wrap(reject);
                  cursor2.next = function() {
                    var _this = this;
                    var gotOne = 1;
                    return this.start(function() {
                      return gotOne-- ? _this.continue() : _this.stop();
                    }).then(function() {
                      return _this;
                    });
                  };
                  cursor2.start = function(callback) {
                    var iterationPromise = new Promise(function(resolveIteration, rejectIteration) {
                      resolveIteration = wrap(resolveIteration);
                      req.onerror = eventRejectHandler(rejectIteration);
                      cursor2.fail = rejectIteration;
                      cursor2.stop = function(value) {
                        cursor2.stop = cursor2.continue = cursor2.continuePrimaryKey = cursor2.advance = doThrowCursorIsStopped;
                        resolveIteration(value);
                      };
                    });
                    var guardedCallback = function() {
                      if (req.result) {
                        try {
                          callback();
                        } catch (err) {
                          cursor2.fail(err);
                        }
                      } else {
                        cursor2.done = true;
                        cursor2.start = function() {
                          throw new Error("Cursor behind last entry");
                        };
                        cursor2.stop();
                      }
                    };
                    req.onsuccess = wrap(function(ev2) {
                      req.onsuccess = guardedCallback;
                      guardedCallback();
                    });
                    cursor2.continue = _cursorContinue;
                    cursor2.continuePrimaryKey = _cursorContinuePrimaryKey;
                    cursor2.advance = _cursorAdvance;
                    guardedCallback();
                    return iterationPromise;
                  };
                  resolve(cursor2);
                }, reject);
              });
            }
            function query(hasGetAll2) {
              return function(request) {
                return new Promise(function(resolve, reject) {
                  resolve = wrap(resolve);
                  var trans = request.trans, values2 = request.values, limit = request.limit, query2 = request.query;
                  var nonInfinitLimit = limit === Infinity ? void 0 : limit;
                  var index = query2.index, range = query2.range;
                  var store = trans.objectStore(tableName);
                  var source = index.isPrimaryKey ? store : store.index(index.name);
                  var idbKeyRange = makeIDBKeyRange(range);
                  if (limit === 0)
                    return resolve({ result: [] });
                  if (hasGetAll2) {
                    var req = values2 ? source.getAll(idbKeyRange, nonInfinitLimit) : source.getAllKeys(idbKeyRange, nonInfinitLimit);
                    req.onsuccess = function(event) {
                      return resolve({ result: event.target.result });
                    };
                    req.onerror = eventRejectHandler(reject);
                  } else {
                    var count_1 = 0;
                    var req_1 = values2 || !("openKeyCursor" in source) ? source.openCursor(idbKeyRange) : source.openKeyCursor(idbKeyRange);
                    var result_1 = [];
                    req_1.onsuccess = function(event) {
                      var cursor2 = req_1.result;
                      if (!cursor2)
                        return resolve({ result: result_1 });
                      result_1.push(values2 ? cursor2.value : cursor2.primaryKey);
                      if (++count_1 === limit)
                        return resolve({ result: result_1 });
                      cursor2.continue();
                    };
                    req_1.onerror = eventRejectHandler(reject);
                  }
                });
              };
            }
            return {
              name: tableName,
              schema: tableSchema,
              mutate,
              getMany: function(_a5) {
                var trans = _a5.trans, keys2 = _a5.keys;
                return new Promise(function(resolve, reject) {
                  resolve = wrap(resolve);
                  var store = trans.objectStore(tableName);
                  var length6 = keys2.length;
                  var result = new Array(length6);
                  var keyCount = 0;
                  var callbackCount = 0;
                  var req;
                  var successHandler = function(event) {
                    var req2 = event.target;
                    if ((result[req2._pos] = req2.result) != null)
                      ;
                    if (++callbackCount === keyCount)
                      resolve(result);
                  };
                  var errorHandler = eventRejectHandler(reject);
                  for (var i = 0; i < length6; ++i) {
                    var key = keys2[i];
                    if (key != null) {
                      req = store.get(keys2[i]);
                      req._pos = i;
                      req.onsuccess = successHandler;
                      req.onerror = errorHandler;
                      ++keyCount;
                    }
                  }
                  if (keyCount === 0)
                    resolve(result);
                });
              },
              get: function(_a5) {
                var trans = _a5.trans, key = _a5.key;
                return new Promise(function(resolve, reject) {
                  resolve = wrap(resolve);
                  var store = trans.objectStore(tableName);
                  var req = store.get(key);
                  req.onsuccess = function(event) {
                    return resolve(event.target.result);
                  };
                  req.onerror = eventRejectHandler(reject);
                });
              },
              query: query(hasGetAll),
              openCursor: openCursor2,
              count: function(_a5) {
                var query2 = _a5.query, trans = _a5.trans;
                var index = query2.index, range = query2.range;
                return new Promise(function(resolve, reject) {
                  var store = trans.objectStore(tableName);
                  var source = index.isPrimaryKey ? store : store.index(index.name);
                  var idbKeyRange = makeIDBKeyRange(range);
                  var req = idbKeyRange ? source.count(idbKeyRange) : source.count();
                  req.onsuccess = wrap(function(ev) {
                    return resolve(ev.target.result);
                  });
                  req.onerror = eventRejectHandler(reject);
                });
              }
            };
          }
          var _a4 = extractSchema(db2, tmpTrans), schema = _a4.schema, hasGetAll = _a4.hasGetAll;
          var tables = schema.tables.map(function(tableSchema) {
            return createDbCoreTable(tableSchema);
          });
          var tableMap = {};
          tables.forEach(function(table) {
            return tableMap[table.name] = table;
          });
          return {
            stack: "dbcore",
            transaction: db2.transaction.bind(db2),
            table: function(name2) {
              var result = tableMap[name2];
              if (!result)
                throw new Error("Table '".concat(name2, "' not found"));
              return tableMap[name2];
            },
            MIN_KEY: -Infinity,
            MAX_KEY: getMaxKey(IdbKeyRange),
            schema
          };
        }
        function createMiddlewareStack(stackImpl, middlewares) {
          return middlewares.reduce(function(down, _a4) {
            var create5 = _a4.create;
            return __assign(__assign({}, down), create5(down));
          }, stackImpl);
        }
        function createMiddlewareStacks(middlewares, idbdb, _a4, tmpTrans) {
          var IDBKeyRange = _a4.IDBKeyRange;
          _a4.indexedDB;
          var dbcore = createMiddlewareStack(createDBCore(idbdb, IDBKeyRange, tmpTrans), middlewares.dbcore);
          return {
            dbcore
          };
        }
        function generateMiddlewareStacks(db2, tmpTrans) {
          var idbdb = tmpTrans.db;
          var stacks = createMiddlewareStacks(db2._middlewares, idbdb, db2._deps, tmpTrans);
          db2.core = stacks.dbcore;
          db2.tables.forEach(function(table) {
            var tableName = table.name;
            if (db2.core.schema.tables.some(function(tbl) {
              return tbl.name === tableName;
            })) {
              table.core = db2.core.table(tableName);
              if (db2[tableName] instanceof db2.Table) {
                db2[tableName].core = table.core;
              }
            }
          });
        }
        function setApiOnPlace(db2, objs, tableNames, dbschema) {
          tableNames.forEach(function(tableName) {
            var schema = dbschema[tableName];
            objs.forEach(function(obj) {
              var propDesc = getPropertyDescriptor(obj, tableName);
              if (!propDesc || "value" in propDesc && propDesc.value === void 0) {
                if (obj === db2.Transaction.prototype || obj instanceof db2.Transaction) {
                  setProp(obj, tableName, {
                    get: function() {
                      return this.table(tableName);
                    },
                    set: function(value) {
                      defineProperty(this, tableName, { value, writable: true, configurable: true, enumerable: true });
                    }
                  });
                } else {
                  obj[tableName] = new db2.Table(tableName, schema);
                }
              }
            });
          });
        }
        function removeTablesApi(db2, objs) {
          objs.forEach(function(obj) {
            for (var key in obj) {
              if (obj[key] instanceof db2.Table)
                delete obj[key];
            }
          });
        }
        function lowerVersionFirst(a, b) {
          return a._cfg.version - b._cfg.version;
        }
        function runUpgraders(db2, oldVersion, idbUpgradeTrans, reject) {
          var globalSchema = db2._dbSchema;
          if (idbUpgradeTrans.objectStoreNames.contains("$meta") && !globalSchema.$meta) {
            globalSchema.$meta = createTableSchema("$meta", parseIndexSyntax("")[0], []);
            db2._storeNames.push("$meta");
          }
          var trans = db2._createTransaction("readwrite", db2._storeNames, globalSchema);
          trans.create(idbUpgradeTrans);
          trans._completion.catch(reject);
          var rejectTransaction = trans._reject.bind(trans);
          var transless = PSD.transless || PSD;
          newScope(function() {
            PSD.trans = trans;
            PSD.transless = transless;
            if (oldVersion === 0) {
              keys(globalSchema).forEach(function(tableName) {
                createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
              });
              generateMiddlewareStacks(db2, idbUpgradeTrans);
              DexiePromise.follow(function() {
                return db2.on.populate.fire(trans);
              }).catch(rejectTransaction);
            } else {
              generateMiddlewareStacks(db2, idbUpgradeTrans);
              return getExistingVersion(db2, trans, oldVersion).then(function(oldVersion2) {
                return updateTablesAndIndexes(db2, oldVersion2, trans, idbUpgradeTrans);
              }).catch(rejectTransaction);
            }
          });
        }
        function patchCurrentVersion(db2, idbUpgradeTrans) {
          createMissingTables(db2._dbSchema, idbUpgradeTrans);
          if (idbUpgradeTrans.db.version % 10 === 0 && !idbUpgradeTrans.objectStoreNames.contains("$meta")) {
            idbUpgradeTrans.db.createObjectStore("$meta").add(Math.ceil(idbUpgradeTrans.db.version / 10 - 1), "version");
          }
          var globalSchema = buildGlobalSchema(db2, db2.idbdb, idbUpgradeTrans);
          adjustToExistingIndexNames(db2, db2._dbSchema, idbUpgradeTrans);
          var diff = getSchemaDiff(globalSchema, db2._dbSchema);
          var _loop_1 = function(tableChange2) {
            if (tableChange2.change.length || tableChange2.recreate) {
              console.warn("Unable to patch indexes of table ".concat(tableChange2.name, " because it has changes on the type of index or primary key."));
              return { value: void 0 };
            }
            var store = idbUpgradeTrans.objectStore(tableChange2.name);
            tableChange2.add.forEach(function(idx) {
              if (debug)
                console.debug("Dexie upgrade patch: Creating missing index ".concat(tableChange2.name, ".").concat(idx.src));
              addIndex(store, idx);
            });
          };
          for (var _i = 0, _a4 = diff.change; _i < _a4.length; _i++) {
            var tableChange = _a4[_i];
            var state_1 = _loop_1(tableChange);
            if (typeof state_1 === "object")
              return state_1.value;
          }
        }
        function getExistingVersion(db2, trans, oldVersion) {
          if (trans.storeNames.includes("$meta")) {
            return trans.table("$meta").get("version").then(function(metaVersion) {
              return metaVersion != null ? metaVersion : oldVersion;
            });
          } else {
            return DexiePromise.resolve(oldVersion);
          }
        }
        function updateTablesAndIndexes(db2, oldVersion, trans, idbUpgradeTrans) {
          var queue = [];
          var versions = db2._versions;
          var globalSchema = db2._dbSchema = buildGlobalSchema(db2, db2.idbdb, idbUpgradeTrans);
          var versToRun = versions.filter(function(v) {
            return v._cfg.version >= oldVersion;
          });
          if (versToRun.length === 0) {
            return DexiePromise.resolve();
          }
          versToRun.forEach(function(version5) {
            queue.push(function() {
              var oldSchema = globalSchema;
              var newSchema = version5._cfg.dbschema;
              adjustToExistingIndexNames(db2, oldSchema, idbUpgradeTrans);
              adjustToExistingIndexNames(db2, newSchema, idbUpgradeTrans);
              globalSchema = db2._dbSchema = newSchema;
              var diff = getSchemaDiff(oldSchema, newSchema);
              diff.add.forEach(function(tuple) {
                createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
              });
              diff.change.forEach(function(change) {
                if (change.recreate) {
                  throw new exceptions.Upgrade("Not yet support for changing primary key");
                } else {
                  var store_1 = idbUpgradeTrans.objectStore(change.name);
                  change.add.forEach(function(idx) {
                    return addIndex(store_1, idx);
                  });
                  change.change.forEach(function(idx) {
                    store_1.deleteIndex(idx.name);
                    addIndex(store_1, idx);
                  });
                  change.del.forEach(function(idxName) {
                    return store_1.deleteIndex(idxName);
                  });
                }
              });
              var contentUpgrade = version5._cfg.contentUpgrade;
              if (contentUpgrade && version5._cfg.version > oldVersion) {
                generateMiddlewareStacks(db2, idbUpgradeTrans);
                trans._memoizedTables = {};
                var upgradeSchema_1 = shallowClone(newSchema);
                diff.del.forEach(function(table) {
                  upgradeSchema_1[table] = oldSchema[table];
                });
                removeTablesApi(db2, [db2.Transaction.prototype]);
                setApiOnPlace(db2, [db2.Transaction.prototype], keys(upgradeSchema_1), upgradeSchema_1);
                trans.schema = upgradeSchema_1;
                var contentUpgradeIsAsync_1 = isAsyncFunction(contentUpgrade);
                if (contentUpgradeIsAsync_1) {
                  incrementExpectedAwaits();
                }
                var returnValue_1;
                var promiseFollowed = DexiePromise.follow(function() {
                  returnValue_1 = contentUpgrade(trans);
                  if (returnValue_1) {
                    if (contentUpgradeIsAsync_1) {
                      var decrementor = decrementExpectedAwaits.bind(null, null);
                      returnValue_1.then(decrementor, decrementor);
                    }
                  }
                });
                return returnValue_1 && typeof returnValue_1.then === "function" ? DexiePromise.resolve(returnValue_1) : promiseFollowed.then(function() {
                  return returnValue_1;
                });
              }
            });
            queue.push(function(idbtrans) {
              var newSchema = version5._cfg.dbschema;
              deleteRemovedTables(newSchema, idbtrans);
              removeTablesApi(db2, [db2.Transaction.prototype]);
              setApiOnPlace(db2, [db2.Transaction.prototype], db2._storeNames, db2._dbSchema);
              trans.schema = db2._dbSchema;
            });
            queue.push(function(idbtrans) {
              if (db2.idbdb.objectStoreNames.contains("$meta")) {
                if (Math.ceil(db2.idbdb.version / 10) === version5._cfg.version) {
                  db2.idbdb.deleteObjectStore("$meta");
                  delete db2._dbSchema.$meta;
                  db2._storeNames = db2._storeNames.filter(function(name2) {
                    return name2 !== "$meta";
                  });
                } else {
                  idbtrans.objectStore("$meta").put(version5._cfg.version, "version");
                }
              }
            });
          });
          function runQueue() {
            return queue.length ? DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : DexiePromise.resolve();
          }
          return runQueue().then(function() {
            createMissingTables(globalSchema, idbUpgradeTrans);
          });
        }
        function getSchemaDiff(oldSchema, newSchema) {
          var diff = {
            del: [],
            add: [],
            change: []
          };
          var table;
          for (table in oldSchema) {
            if (!newSchema[table])
              diff.del.push(table);
          }
          for (table in newSchema) {
            var oldDef = oldSchema[table], newDef = newSchema[table];
            if (!oldDef) {
              diff.add.push([table, newDef]);
            } else {
              var change = {
                name: table,
                def: newDef,
                recreate: false,
                del: [],
                add: [],
                change: []
              };
              if ("" + (oldDef.primKey.keyPath || "") !== "" + (newDef.primKey.keyPath || "") || oldDef.primKey.auto !== newDef.primKey.auto) {
                change.recreate = true;
                diff.change.push(change);
              } else {
                var oldIndexes = oldDef.idxByName;
                var newIndexes = newDef.idxByName;
                var idxName = void 0;
                for (idxName in oldIndexes) {
                  if (!newIndexes[idxName])
                    change.del.push(idxName);
                }
                for (idxName in newIndexes) {
                  var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
                  if (!oldIdx)
                    change.add.push(newIdx);
                  else if (oldIdx.src !== newIdx.src)
                    change.change.push(newIdx);
                }
                if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
                  diff.change.push(change);
                }
              }
            }
          }
          return diff;
        }
        function createTable(idbtrans, tableName, primKey, indexes) {
          var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });
          indexes.forEach(function(idx) {
            return addIndex(store, idx);
          });
          return store;
        }
        function createMissingTables(newSchema, idbtrans) {
          keys(newSchema).forEach(function(tableName) {
            if (!idbtrans.db.objectStoreNames.contains(tableName)) {
              if (debug)
                console.debug("Dexie: Creating missing table", tableName);
              createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
            }
          });
        }
        function deleteRemovedTables(newSchema, idbtrans) {
          [].slice.call(idbtrans.db.objectStoreNames).forEach(function(storeName) {
            return newSchema[storeName] == null && idbtrans.db.deleteObjectStore(storeName);
          });
        }
        function addIndex(store, idx) {
          store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
        }
        function buildGlobalSchema(db2, idbdb, tmpTrans) {
          var globalSchema = {};
          var dbStoreNames = slice3(idbdb.objectStoreNames, 0);
          dbStoreNames.forEach(function(storeName) {
            var store = tmpTrans.objectStore(storeName);
            var keyPath = store.keyPath;
            var primKey = createIndexSpec(nameFromKeyPath(keyPath), keyPath || "", true, false, !!store.autoIncrement, keyPath && typeof keyPath !== "string", true);
            var indexes = [];
            for (var j = 0; j < store.indexNames.length; ++j) {
              var idbindex = store.index(store.indexNames[j]);
              keyPath = idbindex.keyPath;
              var index = createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
              indexes.push(index);
            }
            globalSchema[storeName] = createTableSchema(storeName, primKey, indexes);
          });
          return globalSchema;
        }
        function readGlobalSchema(db2, idbdb, tmpTrans) {
          db2.verno = idbdb.version / 10;
          var globalSchema = db2._dbSchema = buildGlobalSchema(db2, idbdb, tmpTrans);
          db2._storeNames = slice3(idbdb.objectStoreNames, 0);
          setApiOnPlace(db2, [db2._allTables], keys(globalSchema), globalSchema);
        }
        function verifyInstalledSchema(db2, tmpTrans) {
          var installedSchema = buildGlobalSchema(db2, db2.idbdb, tmpTrans);
          var diff = getSchemaDiff(installedSchema, db2._dbSchema);
          return !(diff.add.length || diff.change.some(function(ch) {
            return ch.add.length || ch.change.length;
          }));
        }
        function adjustToExistingIndexNames(db2, schema, idbtrans) {
          var storeNames = idbtrans.db.objectStoreNames;
          for (var i = 0; i < storeNames.length; ++i) {
            var storeName = storeNames[i];
            var store = idbtrans.objectStore(storeName);
            db2._hasGetAll = "getAll" in store;
            for (var j = 0; j < store.indexNames.length; ++j) {
              var indexName = store.indexNames[j];
              var keyPath = store.index(indexName).keyPath;
              var dexieName = typeof keyPath === "string" ? keyPath : "[" + slice3(keyPath).join("+") + "]";
              if (schema[storeName]) {
                var indexSpec = schema[storeName].idxByName[dexieName];
                if (indexSpec) {
                  indexSpec.name = indexName;
                  delete schema[storeName].idxByName[dexieName];
                  schema[storeName].idxByName[indexName] = indexSpec;
                }
              }
            }
          }
          if (typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
            db2._hasGetAll = false;
          }
        }
        function parseIndexSyntax(primKeyAndIndexes) {
          return primKeyAndIndexes.split(",").map(function(index, indexNum) {
            index = index.trim();
            var name2 = index.replace(/([&*]|\+\+)/g, "");
            var keyPath = /^\[/.test(name2) ? name2.match(/^\[(.*)\]$/)[1].split("+") : name2;
            return createIndexSpec(name2, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray2(keyPath), indexNum === 0);
          });
        }
        var Version = function() {
          function Version2() {
          }
          Version2.prototype._parseStoresSpec = function(stores, outSchema) {
            keys(stores).forEach(function(tableName) {
              if (stores[tableName] !== null) {
                var indexes = parseIndexSyntax(stores[tableName]);
                var primKey = indexes.shift();
                primKey.unique = true;
                if (primKey.multi)
                  throw new exceptions.Schema("Primary key cannot be multi-valued");
                indexes.forEach(function(idx) {
                  if (idx.auto)
                    throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                  if (!idx.keyPath)
                    throw new exceptions.Schema("Index must have a name and cannot be an empty string");
                });
                outSchema[tableName] = createTableSchema(tableName, primKey, indexes);
              }
            });
          };
          Version2.prototype.stores = function(stores) {
            var db2 = this.db;
            this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;
            var versions = db2._versions;
            var storesSpec = {};
            var dbschema = {};
            versions.forEach(function(version5) {
              extend(storesSpec, version5._cfg.storesSource);
              dbschema = version5._cfg.dbschema = {};
              version5._parseStoresSpec(storesSpec, dbschema);
            });
            db2._dbSchema = dbschema;
            removeTablesApi(db2, [db2._allTables, db2, db2.Transaction.prototype]);
            setApiOnPlace(db2, [db2._allTables, db2, db2.Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
            db2._storeNames = keys(dbschema);
            return this;
          };
          Version2.prototype.upgrade = function(upgradeFunction) {
            this._cfg.contentUpgrade = promisableChain(this._cfg.contentUpgrade || nop, upgradeFunction);
            return this;
          };
          return Version2;
        }();
        function createVersionConstructor(db2) {
          return makeClassConstructor(Version.prototype, function Version2(versionNumber) {
            this.db = db2;
            this._cfg = {
              version: versionNumber,
              storesSource: null,
              dbschema: {},
              tables: {},
              contentUpgrade: null
            };
          });
        }
        function getDbNamesTable(indexedDB2, IDBKeyRange) {
          var dbNamesDB = indexedDB2["_dbNamesDB"];
          if (!dbNamesDB) {
            dbNamesDB = indexedDB2["_dbNamesDB"] = new Dexie$1(DBNAMES_DB, {
              addons: [],
              indexedDB: indexedDB2,
              IDBKeyRange
            });
            dbNamesDB.version(1).stores({ dbnames: "name" });
          }
          return dbNamesDB.table("dbnames");
        }
        function hasDatabasesNative(indexedDB2) {
          return indexedDB2 && typeof indexedDB2.databases === "function";
        }
        function getDatabaseNames(_a4) {
          var indexedDB2 = _a4.indexedDB, IDBKeyRange = _a4.IDBKeyRange;
          return hasDatabasesNative(indexedDB2) ? Promise.resolve(indexedDB2.databases()).then(function(infos) {
            return infos.map(function(info) {
              return info.name;
            }).filter(function(name2) {
              return name2 !== DBNAMES_DB;
            });
          }) : getDbNamesTable(indexedDB2, IDBKeyRange).toCollection().primaryKeys();
        }
        function _onDatabaseCreated(_a4, name2) {
          var indexedDB2 = _a4.indexedDB, IDBKeyRange = _a4.IDBKeyRange;
          !hasDatabasesNative(indexedDB2) && name2 !== DBNAMES_DB && getDbNamesTable(indexedDB2, IDBKeyRange).put({ name: name2 }).catch(nop);
        }
        function _onDatabaseDeleted(_a4, name2) {
          var indexedDB2 = _a4.indexedDB, IDBKeyRange = _a4.IDBKeyRange;
          !hasDatabasesNative(indexedDB2) && name2 !== DBNAMES_DB && getDbNamesTable(indexedDB2, IDBKeyRange).delete(name2).catch(nop);
        }
        function vip(fn) {
          return newScope(function() {
            PSD.letThrough = true;
            return fn();
          });
        }
        function idbReady() {
          var isSafari = !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent);
          if (!isSafari || !indexedDB.databases)
            return Promise.resolve();
          var intervalId;
          return new Promise(function(resolve) {
            var tryIdb = function() {
              return indexedDB.databases().finally(resolve);
            };
            intervalId = setInterval(tryIdb, 100);
            tryIdb();
          }).finally(function() {
            return clearInterval(intervalId);
          });
        }
        var _a3;
        function isEmptyRange(node2) {
          return !("from" in node2);
        }
        var RangeSet2 = function(fromOrTree, to) {
          if (this) {
            extend(this, arguments.length ? { d: 1, from: fromOrTree, to: arguments.length > 1 ? to : fromOrTree } : { d: 0 });
          } else {
            var rv = new RangeSet2();
            if (fromOrTree && "d" in fromOrTree) {
              extend(rv, fromOrTree);
            }
            return rv;
          }
        };
        props(RangeSet2.prototype, (_a3 = {
          add: function(rangeSet) {
            mergeRanges2(this, rangeSet);
            return this;
          },
          addKey: function(key) {
            addRange(this, key, key);
            return this;
          },
          addKeys: function(keys2) {
            var _this = this;
            keys2.forEach(function(key) {
              return addRange(_this, key, key);
            });
            return this;
          }
        }, _a3[iteratorSymbol] = function() {
          return getRangeSetIterator(this);
        }, _a3));
        function addRange(target2, from7, to) {
          var diff = cmp2(from7, to);
          if (isNaN(diff))
            return;
          if (diff > 0)
            throw RangeError();
          if (isEmptyRange(target2))
            return extend(target2, { from: from7, to, d: 1 });
          var left = target2.l;
          var right = target2.r;
          if (cmp2(to, target2.from) < 0) {
            left ? addRange(left, from7, to) : target2.l = { from: from7, to, d: 1, l: null, r: null };
            return rebalance(target2);
          }
          if (cmp2(from7, target2.to) > 0) {
            right ? addRange(right, from7, to) : target2.r = { from: from7, to, d: 1, l: null, r: null };
            return rebalance(target2);
          }
          if (cmp2(from7, target2.from) < 0) {
            target2.from = from7;
            target2.l = null;
            target2.d = right ? right.d + 1 : 1;
          }
          if (cmp2(to, target2.to) > 0) {
            target2.to = to;
            target2.r = null;
            target2.d = target2.l ? target2.l.d + 1 : 1;
          }
          var rightWasCutOff = !target2.r;
          if (left && !target2.l) {
            mergeRanges2(target2, left);
          }
          if (right && rightWasCutOff) {
            mergeRanges2(target2, right);
          }
        }
        function mergeRanges2(target2, newSet) {
          function _addRangeSet(target3, _a4) {
            var from7 = _a4.from, to = _a4.to, l = _a4.l, r2 = _a4.r;
            addRange(target3, from7, to);
            if (l)
              _addRangeSet(target3, l);
            if (r2)
              _addRangeSet(target3, r2);
          }
          if (!isEmptyRange(newSet))
            _addRangeSet(target2, newSet);
        }
        function rangesOverlap2(rangeSet1, rangeSet2) {
          var i1 = getRangeSetIterator(rangeSet2);
          var nextResult1 = i1.next();
          if (nextResult1.done)
            return false;
          var a = nextResult1.value;
          var i2 = getRangeSetIterator(rangeSet1);
          var nextResult2 = i2.next(a.from);
          var b = nextResult2.value;
          while (!nextResult1.done && !nextResult2.done) {
            if (cmp2(b.from, a.to) <= 0 && cmp2(b.to, a.from) >= 0)
              return true;
            cmp2(a.from, b.from) < 0 ? a = (nextResult1 = i1.next(b.from)).value : b = (nextResult2 = i2.next(a.from)).value;
          }
          return false;
        }
        function getRangeSetIterator(node2) {
          var state = isEmptyRange(node2) ? null : { s: 0, n: node2 };
          return {
            next: function(key) {
              var keyProvided = arguments.length > 0;
              while (state) {
                switch (state.s) {
                  case 0:
                    state.s = 1;
                    if (keyProvided) {
                      while (state.n.l && cmp2(key, state.n.from) < 0)
                        state = { up: state, n: state.n.l, s: 1 };
                    } else {
                      while (state.n.l)
                        state = { up: state, n: state.n.l, s: 1 };
                    }
                  case 1:
                    state.s = 2;
                    if (!keyProvided || cmp2(key, state.n.to) <= 0)
                      return { value: state.n, done: false };
                  case 2:
                    if (state.n.r) {
                      state.s = 3;
                      state = { up: state, n: state.n.r, s: 0 };
                      continue;
                    }
                  case 3:
                    state = state.up;
                }
              }
              return { done: true };
            }
          };
        }
        function rebalance(target2) {
          var _a4, _b;
          var diff = (((_a4 = target2.r) === null || _a4 === void 0 ? void 0 : _a4.d) || 0) - (((_b = target2.l) === null || _b === void 0 ? void 0 : _b.d) || 0);
          var r2 = diff > 1 ? "r" : diff < -1 ? "l" : "";
          if (r2) {
            var l = r2 === "r" ? "l" : "r";
            var rootClone = __assign({}, target2);
            var oldRootRight = target2[r2];
            target2.from = oldRootRight.from;
            target2.to = oldRootRight.to;
            target2[r2] = oldRootRight[r2];
            rootClone[r2] = oldRootRight[l];
            target2[l] = rootClone;
            rootClone.d = computeDepth(rootClone);
          }
          target2.d = computeDepth(target2);
        }
        function computeDepth(_a4) {
          var r2 = _a4.r, l = _a4.l;
          return (r2 ? l ? Math.max(r2.d, l.d) : r2.d : l ? l.d : 0) + 1;
        }
        function extendObservabilitySet(target2, newSet) {
          keys(newSet).forEach(function(part) {
            if (target2[part])
              mergeRanges2(target2[part], newSet[part]);
            else
              target2[part] = cloneSimpleObjectTree(newSet[part]);
          });
          return target2;
        }
        function obsSetsOverlap(os1, os2) {
          return os1.all || os2.all || Object.keys(os1).some(function(key) {
            return os2[key] && rangesOverlap2(os2[key], os1[key]);
          });
        }
        var cache2 = {};
        var unsignaledParts = {};
        var isTaskEnqueued = false;
        function signalSubscribersLazily(part, optimistic) {
          extendObservabilitySet(unsignaledParts, part);
          if (!isTaskEnqueued) {
            isTaskEnqueued = true;
            setTimeout(function() {
              isTaskEnqueued = false;
              var parts = unsignaledParts;
              unsignaledParts = {};
              signalSubscribersNow(parts, false);
            }, 0);
          }
        }
        function signalSubscribersNow(updatedParts, deleteAffectedCacheEntries) {
          if (deleteAffectedCacheEntries === void 0) {
            deleteAffectedCacheEntries = false;
          }
          var queriesToSignal = /* @__PURE__ */ new Set();
          if (updatedParts.all) {
            for (var _i = 0, _a4 = Object.values(cache2); _i < _a4.length; _i++) {
              var tblCache = _a4[_i];
              collectTableSubscribers(tblCache, updatedParts, queriesToSignal, deleteAffectedCacheEntries);
            }
          } else {
            for (var key in updatedParts) {
              var parts = /^idb\:\/\/(.*)\/(.*)\//.exec(key);
              if (parts) {
                var dbName = parts[1], tableName = parts[2];
                var tblCache = cache2["idb://".concat(dbName, "/").concat(tableName)];
                if (tblCache)
                  collectTableSubscribers(tblCache, updatedParts, queriesToSignal, deleteAffectedCacheEntries);
              }
            }
          }
          queriesToSignal.forEach(function(requery) {
            return requery();
          });
        }
        function collectTableSubscribers(tblCache, updatedParts, outQueriesToSignal, deleteAffectedCacheEntries) {
          var updatedEntryLists = [];
          for (var _i = 0, _a4 = Object.entries(tblCache.queries.query); _i < _a4.length; _i++) {
            var _b = _a4[_i], indexName = _b[0], entries = _b[1];
            var filteredEntries = [];
            for (var _c = 0, entries_1 = entries; _c < entries_1.length; _c++) {
              var entry = entries_1[_c];
              if (obsSetsOverlap(updatedParts, entry.obsSet)) {
                entry.subscribers.forEach(function(requery) {
                  return outQueriesToSignal.add(requery);
                });
              } else if (deleteAffectedCacheEntries) {
                filteredEntries.push(entry);
              }
            }
            if (deleteAffectedCacheEntries)
              updatedEntryLists.push([indexName, filteredEntries]);
          }
          if (deleteAffectedCacheEntries) {
            for (var _d = 0, updatedEntryLists_1 = updatedEntryLists; _d < updatedEntryLists_1.length; _d++) {
              var _e = updatedEntryLists_1[_d], indexName = _e[0], filteredEntries = _e[1];
              tblCache.queries.query[indexName] = filteredEntries;
            }
          }
        }
        function dexieOpen(db2) {
          var state = db2._state;
          var indexedDB2 = db2._deps.indexedDB;
          if (state.isBeingOpened || db2.idbdb)
            return state.dbReadyPromise.then(function() {
              return state.dbOpenError ? rejection(state.dbOpenError) : db2;
            });
          state.isBeingOpened = true;
          state.dbOpenError = null;
          state.openComplete = false;
          var openCanceller = state.openCanceller;
          var nativeVerToOpen = Math.round(db2.verno * 10);
          var schemaPatchMode = false;
          function throwIfCancelled() {
            if (state.openCanceller !== openCanceller)
              throw new exceptions.DatabaseClosed("db.open() was cancelled");
          }
          var resolveDbReady = state.dbReadyResolve, upgradeTransaction = null, wasCreated = false;
          var tryOpenDB = function() {
            return new DexiePromise(function(resolve, reject) {
              throwIfCancelled();
              if (!indexedDB2)
                throw new exceptions.MissingAPI();
              var dbName = db2.name;
              var req = state.autoSchema || !nativeVerToOpen ? indexedDB2.open(dbName) : indexedDB2.open(dbName, nativeVerToOpen);
              if (!req)
                throw new exceptions.MissingAPI();
              req.onerror = eventRejectHandler(reject);
              req.onblocked = wrap(db2._fireOnBlocked);
              req.onupgradeneeded = wrap(function(e) {
                upgradeTransaction = req.transaction;
                if (state.autoSchema && !db2._options.allowEmptyDB) {
                  req.onerror = preventDefault;
                  upgradeTransaction.abort();
                  req.result.close();
                  var delreq = indexedDB2.deleteDatabase(dbName);
                  delreq.onsuccess = delreq.onerror = wrap(function() {
                    reject(new exceptions.NoSuchDatabase("Database ".concat(dbName, " doesnt exist")));
                  });
                } else {
                  upgradeTransaction.onerror = eventRejectHandler(reject);
                  var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
                  wasCreated = oldVer < 1;
                  db2.idbdb = req.result;
                  if (schemaPatchMode) {
                    patchCurrentVersion(db2, upgradeTransaction);
                  }
                  runUpgraders(db2, oldVer / 10, upgradeTransaction, reject);
                }
              }, reject);
              req.onsuccess = wrap(function() {
                upgradeTransaction = null;
                var idbdb = db2.idbdb = req.result;
                var objectStoreNames = slice3(idbdb.objectStoreNames);
                if (objectStoreNames.length > 0)
                  try {
                    var tmpTrans = idbdb.transaction(safariMultiStoreFix(objectStoreNames), "readonly");
                    if (state.autoSchema)
                      readGlobalSchema(db2, idbdb, tmpTrans);
                    else {
                      adjustToExistingIndexNames(db2, db2._dbSchema, tmpTrans);
                      if (!verifyInstalledSchema(db2, tmpTrans) && !schemaPatchMode) {
                        console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Dexie will add missing parts and increment native version number to workaround this.");
                        idbdb.close();
                        nativeVerToOpen = idbdb.version + 1;
                        schemaPatchMode = true;
                        return resolve(tryOpenDB());
                      }
                    }
                    generateMiddlewareStacks(db2, tmpTrans);
                  } catch (e) {
                  }
                connections.push(db2);
                idbdb.onversionchange = wrap(function(ev) {
                  state.vcFired = true;
                  db2.on("versionchange").fire(ev);
                });
                idbdb.onclose = wrap(function(ev) {
                  db2.on("close").fire(ev);
                });
                if (wasCreated)
                  _onDatabaseCreated(db2._deps, dbName);
                resolve();
              }, reject);
            }).catch(function(err) {
              switch (err === null || err === void 0 ? void 0 : err.name) {
                case "UnknownError":
                  if (state.PR1398_maxLoop > 0) {
                    state.PR1398_maxLoop--;
                    console.warn("Dexie: Workaround for Chrome UnknownError on open()");
                    return tryOpenDB();
                  }
                  break;
                case "VersionError":
                  if (nativeVerToOpen > 0) {
                    nativeVerToOpen = 0;
                    return tryOpenDB();
                  }
                  break;
              }
              return DexiePromise.reject(err);
            });
          };
          return DexiePromise.race([
            openCanceller,
            (typeof navigator === "undefined" ? DexiePromise.resolve() : idbReady()).then(tryOpenDB)
          ]).then(function() {
            throwIfCancelled();
            state.onReadyBeingFired = [];
            return DexiePromise.resolve(vip(function() {
              return db2.on.ready.fire(db2.vip);
            })).then(function fireRemainders() {
              if (state.onReadyBeingFired.length > 0) {
                var remainders_1 = state.onReadyBeingFired.reduce(promisableChain, nop);
                state.onReadyBeingFired = [];
                return DexiePromise.resolve(vip(function() {
                  return remainders_1(db2.vip);
                })).then(fireRemainders);
              }
            });
          }).finally(function() {
            if (state.openCanceller === openCanceller) {
              state.onReadyBeingFired = null;
              state.isBeingOpened = false;
            }
          }).catch(function(err) {
            state.dbOpenError = err;
            try {
              upgradeTransaction && upgradeTransaction.abort();
            } catch (_a4) {
            }
            if (openCanceller === state.openCanceller) {
              db2._close();
            }
            return rejection(err);
          }).finally(function() {
            state.openComplete = true;
            resolveDbReady();
          }).then(function() {
            if (wasCreated) {
              var everything_1 = {};
              db2.tables.forEach(function(table) {
                table.schema.indexes.forEach(function(idx) {
                  if (idx.name)
                    everything_1["idb://".concat(db2.name, "/").concat(table.name, "/").concat(idx.name)] = new RangeSet2(-Infinity, [[[]]]);
                });
                everything_1["idb://".concat(db2.name, "/").concat(table.name, "/")] = everything_1["idb://".concat(db2.name, "/").concat(table.name, "/:dels")] = new RangeSet2(-Infinity, [[[]]]);
              });
              globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME).fire(everything_1);
              signalSubscribersNow(everything_1, true);
            }
            return db2;
          });
        }
        function awaitIterator(iterator) {
          var callNext = function(result) {
            return iterator.next(result);
          }, doThrow = function(error) {
            return iterator.throw(error);
          }, onSuccess = step(callNext), onError = step(doThrow);
          function step(getNext) {
            return function(val) {
              var next2 = getNext(val), value = next2.value;
              return next2.done ? value : !value || typeof value.then !== "function" ? isArray2(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
            };
          }
          return step(callNext)();
        }
        function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
          var i = arguments.length;
          if (i < 2)
            throw new exceptions.InvalidArgument("Too few arguments");
          var args = new Array(i - 1);
          while (--i)
            args[i - 1] = arguments[i];
          scopeFunc = args.pop();
          var tables = flatten(args);
          return [mode, tables, scopeFunc];
        }
        function enterTransactionScope(db2, mode, storeNames, parentTransaction, scopeFunc) {
          return DexiePromise.resolve().then(function() {
            var transless = PSD.transless || PSD;
            var trans = db2._createTransaction(mode, storeNames, db2._dbSchema, parentTransaction);
            trans.explicit = true;
            var zoneProps = {
              trans,
              transless
            };
            if (parentTransaction) {
              trans.idbtrans = parentTransaction.idbtrans;
            } else {
              try {
                trans.create();
                trans.idbtrans._explicit = true;
                db2._state.PR1398_maxLoop = 3;
              } catch (ex) {
                if (ex.name === errnames.InvalidState && db2.isOpen() && --db2._state.PR1398_maxLoop > 0) {
                  console.warn("Dexie: Need to reopen db");
                  db2.close({ disableAutoOpen: false });
                  return db2.open().then(function() {
                    return enterTransactionScope(db2, mode, storeNames, null, scopeFunc);
                  });
                }
                return rejection(ex);
              }
            }
            var scopeFuncIsAsync = isAsyncFunction(scopeFunc);
            if (scopeFuncIsAsync) {
              incrementExpectedAwaits();
            }
            var returnValue;
            var promiseFollowed = DexiePromise.follow(function() {
              returnValue = scopeFunc.call(trans, trans);
              if (returnValue) {
                if (scopeFuncIsAsync) {
                  var decrementor = decrementExpectedAwaits.bind(null, null);
                  returnValue.then(decrementor, decrementor);
                } else if (typeof returnValue.next === "function" && typeof returnValue.throw === "function") {
                  returnValue = awaitIterator(returnValue);
                }
              }
            }, zoneProps);
            return (returnValue && typeof returnValue.then === "function" ? DexiePromise.resolve(returnValue).then(function(x) {
              return trans.active ? x : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
            }) : promiseFollowed.then(function() {
              return returnValue;
            })).then(function(x) {
              if (parentTransaction)
                trans._resolve();
              return trans._completion.then(function() {
                return x;
              });
            }).catch(function(e) {
              trans._reject(e);
              return rejection(e);
            });
          });
        }
        function pad(a, value, count) {
          var result = isArray2(a) ? a.slice() : [a];
          for (var i = 0; i < count; ++i)
            result.push(value);
          return result;
        }
        function createVirtualIndexMiddleware(down) {
          return __assign(__assign({}, down), { table: function(tableName) {
            var table = down.table(tableName);
            var schema = table.schema;
            var indexLookup = {};
            var allVirtualIndexes = [];
            function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
              var keyPathAlias = getKeyPathAlias(keyPath);
              var indexList = indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || [];
              var keyLength = keyPath == null ? 0 : typeof keyPath === "string" ? 1 : keyPath.length;
              var isVirtual = keyTail > 0;
              var virtualIndex = __assign(__assign({}, lowLevelIndex), { name: isVirtual ? "".concat(keyPathAlias, "(virtual-from:").concat(lowLevelIndex.name, ")") : lowLevelIndex.name, lowLevelIndex, isVirtual, keyTail, keyLength, extractKey: getKeyExtractor(keyPath), unique: !isVirtual && lowLevelIndex.unique });
              indexList.push(virtualIndex);
              if (!virtualIndex.isPrimaryKey) {
                allVirtualIndexes.push(virtualIndex);
              }
              if (keyLength > 1) {
                var virtualKeyPath = keyLength === 2 ? keyPath[0] : keyPath.slice(0, keyLength - 1);
                addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
              }
              indexList.sort(function(a, b) {
                return a.keyTail - b.keyTail;
              });
              return virtualIndex;
            }
            var primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
            indexLookup[":id"] = [primaryKey];
            for (var _i = 0, _a4 = schema.indexes; _i < _a4.length; _i++) {
              var index = _a4[_i];
              addVirtualIndexes(index.keyPath, 0, index);
            }
            function findBestIndex(keyPath) {
              var result2 = indexLookup[getKeyPathAlias(keyPath)];
              return result2 && result2[0];
            }
            function translateRange(range, keyTail) {
              return {
                type: range.type === 1 ? 2 : range.type,
                lower: pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
                lowerOpen: true,
                upper: pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
                upperOpen: true
              };
            }
            function translateRequest(req) {
              var index2 = req.query.index;
              return index2.isVirtual ? __assign(__assign({}, req), { query: {
                index: index2.lowLevelIndex,
                range: translateRange(req.query.range, index2.keyTail)
              } }) : req;
            }
            var result = __assign(__assign({}, table), { schema: __assign(__assign({}, schema), { primaryKey, indexes: allVirtualIndexes, getIndexByKeyPath: findBestIndex }), count: function(req) {
              return table.count(translateRequest(req));
            }, query: function(req) {
              return table.query(translateRequest(req));
            }, openCursor: function(req) {
              var _a5 = req.query.index, keyTail = _a5.keyTail, isVirtual = _a5.isVirtual, keyLength = _a5.keyLength;
              if (!isVirtual)
                return table.openCursor(req);
              function createVirtualCursor(cursor2) {
                function _continue(key) {
                  key != null ? cursor2.continue(pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) : req.unique ? cursor2.continue(cursor2.key.slice(0, keyLength).concat(req.reverse ? down.MIN_KEY : down.MAX_KEY, keyTail)) : cursor2.continue();
                }
                var virtualCursor = Object.create(cursor2, {
                  continue: { value: _continue },
                  continuePrimaryKey: {
                    value: function(key, primaryKey2) {
                      cursor2.continuePrimaryKey(pad(key, down.MAX_KEY, keyTail), primaryKey2);
                    }
                  },
                  primaryKey: {
                    get: function() {
                      return cursor2.primaryKey;
                    }
                  },
                  key: {
                    get: function() {
                      var key = cursor2.key;
                      return keyLength === 1 ? key[0] : key.slice(0, keyLength);
                    }
                  },
                  value: {
                    get: function() {
                      return cursor2.value;
                    }
                  }
                });
                return virtualCursor;
              }
              return table.openCursor(translateRequest(req)).then(function(cursor2) {
                return cursor2 && createVirtualCursor(cursor2);
              });
            } });
            return result;
          } });
        }
        var virtualIndexMiddleware = {
          stack: "dbcore",
          name: "VirtualIndexMiddleware",
          level: 1,
          create: createVirtualIndexMiddleware
        };
        function getObjectDiff(a, b, rv, prfx) {
          rv = rv || {};
          prfx = prfx || "";
          keys(a).forEach(function(prop) {
            if (!hasOwn3(b, prop)) {
              rv[prfx + prop] = void 0;
            } else {
              var ap = a[prop], bp = b[prop];
              if (typeof ap === "object" && typeof bp === "object" && ap && bp) {
                var apTypeName = toStringTag(ap);
                var bpTypeName = toStringTag(bp);
                if (apTypeName !== bpTypeName) {
                  rv[prfx + prop] = b[prop];
                } else if (apTypeName === "Object") {
                  getObjectDiff(ap, bp, rv, prfx + prop + ".");
                } else if (ap !== bp) {
                  rv[prfx + prop] = b[prop];
                }
              } else if (ap !== bp)
                rv[prfx + prop] = b[prop];
            }
          });
          keys(b).forEach(function(prop) {
            if (!hasOwn3(a, prop)) {
              rv[prfx + prop] = b[prop];
            }
          });
          return rv;
        }
        function getEffectiveKeys(primaryKey, req) {
          if (req.type === "delete")
            return req.keys;
          return req.keys || req.values.map(primaryKey.extractKey);
        }
        var hooksMiddleware = {
          stack: "dbcore",
          name: "HooksMiddleware",
          level: 2,
          create: function(downCore) {
            return __assign(__assign({}, downCore), { table: function(tableName) {
              var downTable = downCore.table(tableName);
              var primaryKey = downTable.schema.primaryKey;
              var tableMiddleware = __assign(__assign({}, downTable), { mutate: function(req) {
                var dxTrans = PSD.trans;
                var _a4 = dxTrans.table(tableName).hook, deleting = _a4.deleting, creating = _a4.creating, updating = _a4.updating;
                switch (req.type) {
                  case "add":
                    if (creating.fire === nop)
                      break;
                    return dxTrans._promise("readwrite", function() {
                      return addPutOrDelete(req);
                    }, true);
                  case "put":
                    if (creating.fire === nop && updating.fire === nop)
                      break;
                    return dxTrans._promise("readwrite", function() {
                      return addPutOrDelete(req);
                    }, true);
                  case "delete":
                    if (deleting.fire === nop)
                      break;
                    return dxTrans._promise("readwrite", function() {
                      return addPutOrDelete(req);
                    }, true);
                  case "deleteRange":
                    if (deleting.fire === nop)
                      break;
                    return dxTrans._promise("readwrite", function() {
                      return deleteRange(req);
                    }, true);
                }
                return downTable.mutate(req);
                function addPutOrDelete(req2) {
                  var dxTrans2 = PSD.trans;
                  var keys2 = req2.keys || getEffectiveKeys(primaryKey, req2);
                  if (!keys2)
                    throw new Error("Keys missing");
                  req2 = req2.type === "add" || req2.type === "put" ? __assign(__assign({}, req2), { keys: keys2 }) : __assign({}, req2);
                  if (req2.type !== "delete")
                    req2.values = __spreadArray([], req2.values, true);
                  if (req2.keys)
                    req2.keys = __spreadArray([], req2.keys, true);
                  return getExistingValues(downTable, req2, keys2).then(function(existingValues) {
                    var contexts = keys2.map(function(key, i) {
                      var existingValue = existingValues[i];
                      var ctx = { onerror: null, onsuccess: null };
                      if (req2.type === "delete") {
                        deleting.fire.call(ctx, key, existingValue, dxTrans2);
                      } else if (req2.type === "add" || existingValue === void 0) {
                        var generatedPrimaryKey = creating.fire.call(ctx, key, req2.values[i], dxTrans2);
                        if (key == null && generatedPrimaryKey != null) {
                          key = generatedPrimaryKey;
                          req2.keys[i] = key;
                          if (!primaryKey.outbound) {
                            setByKeyPath(req2.values[i], primaryKey.keyPath, key);
                          }
                        }
                      } else {
                        var objectDiff = getObjectDiff(existingValue, req2.values[i]);
                        var additionalChanges_1 = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans2);
                        if (additionalChanges_1) {
                          var requestedValue_1 = req2.values[i];
                          Object.keys(additionalChanges_1).forEach(function(keyPath) {
                            if (hasOwn3(requestedValue_1, keyPath)) {
                              requestedValue_1[keyPath] = additionalChanges_1[keyPath];
                            } else {
                              setByKeyPath(requestedValue_1, keyPath, additionalChanges_1[keyPath]);
                            }
                          });
                        }
                      }
                      return ctx;
                    });
                    return downTable.mutate(req2).then(function(_a5) {
                      var failures = _a5.failures, results = _a5.results, numFailures = _a5.numFailures, lastResult = _a5.lastResult;
                      for (var i = 0; i < keys2.length; ++i) {
                        var primKey = results ? results[i] : keys2[i];
                        var ctx = contexts[i];
                        if (primKey == null) {
                          ctx.onerror && ctx.onerror(failures[i]);
                        } else {
                          ctx.onsuccess && ctx.onsuccess(
                            req2.type === "put" && existingValues[i] ? req2.values[i] : primKey
                          );
                        }
                      }
                      return { failures, results, numFailures, lastResult };
                    }).catch(function(error) {
                      contexts.forEach(function(ctx) {
                        return ctx.onerror && ctx.onerror(error);
                      });
                      return Promise.reject(error);
                    });
                  });
                }
                function deleteRange(req2) {
                  return deleteNextChunk(req2.trans, req2.range, 1e4);
                }
                function deleteNextChunk(trans, range, limit) {
                  return downTable.query({ trans, values: false, query: { index: primaryKey, range }, limit }).then(function(_a5) {
                    var result = _a5.result;
                    return addPutOrDelete({ type: "delete", keys: result, trans }).then(function(res) {
                      if (res.numFailures > 0)
                        return Promise.reject(res.failures[0]);
                      if (result.length < limit) {
                        return { failures: [], numFailures: 0, lastResult: void 0 };
                      } else {
                        return deleteNextChunk(trans, __assign(__assign({}, range), { lower: result[result.length - 1], lowerOpen: true }), limit);
                      }
                    });
                  });
                }
              } });
              return tableMiddleware;
            } });
          }
        };
        function getExistingValues(table, req, effectiveKeys) {
          return req.type === "add" ? Promise.resolve([]) : table.getMany({ trans: req.trans, keys: effectiveKeys, cache: "immutable" });
        }
        function getFromTransactionCache(keys2, cache3, clone) {
          try {
            if (!cache3)
              return null;
            if (cache3.keys.length < keys2.length)
              return null;
            var result = [];
            for (var i = 0, j = 0; i < cache3.keys.length && j < keys2.length; ++i) {
              if (cmp2(cache3.keys[i], keys2[j]) !== 0)
                continue;
              result.push(clone ? deepClone(cache3.values[i]) : cache3.values[i]);
              ++j;
            }
            return result.length === keys2.length ? result : null;
          } catch (_a4) {
            return null;
          }
        }
        var cacheExistingValuesMiddleware = {
          stack: "dbcore",
          level: -1,
          create: function(core) {
            return {
              table: function(tableName) {
                var table = core.table(tableName);
                return __assign(__assign({}, table), { getMany: function(req) {
                  if (!req.cache) {
                    return table.getMany(req);
                  }
                  var cachedResult = getFromTransactionCache(req.keys, req.trans["_cache"], req.cache === "clone");
                  if (cachedResult) {
                    return DexiePromise.resolve(cachedResult);
                  }
                  return table.getMany(req).then(function(res) {
                    req.trans["_cache"] = {
                      keys: req.keys,
                      values: req.cache === "clone" ? deepClone(res) : res
                    };
                    return res;
                  });
                }, mutate: function(req) {
                  if (req.type !== "add")
                    req.trans["_cache"] = null;
                  return table.mutate(req);
                } });
              }
            };
          }
        };
        function isCachableContext(ctx, table) {
          return ctx.trans.mode === "readonly" && !!ctx.subscr && !ctx.trans.explicit && ctx.trans.db._options.cache !== "disabled" && !table.schema.primaryKey.outbound;
        }
        function isCachableRequest(type2, req) {
          switch (type2) {
            case "query":
              return req.values && !req.unique;
            case "get":
              return false;
            case "getMany":
              return false;
            case "count":
              return false;
            case "openCursor":
              return false;
          }
        }
        var observabilityMiddleware = {
          stack: "dbcore",
          level: 0,
          name: "Observability",
          create: function(core) {
            var dbName = core.schema.name;
            var FULL_RANGE = new RangeSet2(core.MIN_KEY, core.MAX_KEY);
            return __assign(__assign({}, core), { transaction: function(stores, mode, options) {
              if (PSD.subscr && mode !== "readonly") {
                throw new exceptions.ReadOnly("Readwrite transaction in liveQuery context. Querier source: ".concat(PSD.querier));
              }
              return core.transaction(stores, mode, options);
            }, table: function(tableName) {
              var table = core.table(tableName);
              var schema = table.schema;
              var primaryKey = schema.primaryKey;
              var extractKey = primaryKey.extractKey, outbound = primaryKey.outbound;
              var tableClone = __assign(__assign({}, table), { mutate: function(req) {
                var trans = req.trans;
                var mutatedParts = req.mutatedParts || (req.mutatedParts = {});
                var getRangeSet = function(indexName) {
                  var part = "idb://".concat(dbName, "/").concat(tableName, "/").concat(indexName);
                  return mutatedParts[part] || (mutatedParts[part] = new RangeSet2());
                };
                var pkRangeSet = getRangeSet("");
                var delsRangeSet = getRangeSet(":dels");
                var type2 = req.type;
                var _a4 = req.type === "deleteRange" ? [req.range] : req.type === "delete" ? [req.keys] : req.values.length < 50 ? [getEffectiveKeys(primaryKey, req).filter(function(id) {
                  return id;
                }), req.values] : [], keys2 = _a4[0], newObjs = _a4[1];
                var oldCache = req.trans["_cache"];
                if (isArray2(keys2)) {
                  pkRangeSet.addKeys(keys2);
                  var oldObjs = type2 === "delete" || keys2.length === newObjs.length ? getFromTransactionCache(keys2, oldCache) : null;
                  if (!oldObjs) {
                    delsRangeSet.addKeys(keys2);
                  }
                  if (oldObjs || newObjs) {
                    trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs);
                  }
                } else if (keys2) {
                  var range = { from: keys2.lower, to: keys2.upper };
                  delsRangeSet.add(range);
                  pkRangeSet.add(range);
                } else {
                  pkRangeSet.add(FULL_RANGE);
                  delsRangeSet.add(FULL_RANGE);
                  schema.indexes.forEach(function(idx) {
                    return getRangeSet(idx.name).add(FULL_RANGE);
                  });
                }
                return table.mutate(req).then(function(res) {
                  if (keys2 && (req.type === "add" || req.type === "put")) {
                    pkRangeSet.addKeys(res.results);
                  }
                  trans.mutatedParts = extendObservabilitySet(trans.mutatedParts || {}, mutatedParts);
                  return res;
                });
              } });
              var getRange = function(_a4) {
                var _b, _c;
                var _d = _a4.query, index = _d.index, range = _d.range;
                return [
                  index,
                  new RangeSet2((_b = range.lower) !== null && _b !== void 0 ? _b : core.MIN_KEY, (_c = range.upper) !== null && _c !== void 0 ? _c : core.MAX_KEY)
                ];
              };
              var readSubscribers = {
                get: function(req) {
                  return [primaryKey, new RangeSet2(req.key)];
                },
                getMany: function(req) {
                  return [primaryKey, new RangeSet2().addKeys(req.keys)];
                },
                count: getRange,
                query: getRange,
                openCursor: getRange
              };
              keys(readSubscribers).forEach(function(method) {
                tableClone[method] = function(req) {
                  var subscr = PSD.subscr;
                  var isLiveQuery = !!subscr;
                  var cachable = isCachableContext(PSD, table) && isCachableRequest(method, req);
                  var obsSet = cachable ? req.obsSet = {} : subscr;
                  if (isLiveQuery) {
                    var getRangeSet = function(indexName) {
                      var part = "idb://".concat(dbName, "/").concat(tableName, "/").concat(indexName);
                      return obsSet[part] || (obsSet[part] = new RangeSet2());
                    };
                    var pkRangeSet_1 = getRangeSet("");
                    var delsRangeSet_1 = getRangeSet(":dels");
                    var _a4 = readSubscribers[method](req), queriedIndex = _a4[0], queriedRanges = _a4[1];
                    if (method === "query" && queriedIndex.isPrimaryKey && !req.values) {
                      delsRangeSet_1.add(queriedRanges);
                    } else {
                      getRangeSet(queriedIndex.name || "").add(queriedRanges);
                    }
                    if (!queriedIndex.isPrimaryKey) {
                      if (method === "count") {
                        delsRangeSet_1.add(FULL_RANGE);
                      } else {
                        var keysPromise_1 = method === "query" && outbound && req.values && table.query(__assign(__assign({}, req), { values: false }));
                        return table[method].apply(this, arguments).then(function(res) {
                          if (method === "query") {
                            if (outbound && req.values) {
                              return keysPromise_1.then(function(_a5) {
                                var resultingKeys = _a5.result;
                                pkRangeSet_1.addKeys(resultingKeys);
                                return res;
                              });
                            }
                            var pKeys = req.values ? res.result.map(extractKey) : res.result;
                            if (req.values) {
                              pkRangeSet_1.addKeys(pKeys);
                            } else {
                              delsRangeSet_1.addKeys(pKeys);
                            }
                          } else if (method === "openCursor") {
                            var cursor_1 = res;
                            var wantValues_1 = req.values;
                            return cursor_1 && Object.create(cursor_1, {
                              key: {
                                get: function() {
                                  delsRangeSet_1.addKey(cursor_1.primaryKey);
                                  return cursor_1.key;
                                }
                              },
                              primaryKey: {
                                get: function() {
                                  var pkey = cursor_1.primaryKey;
                                  delsRangeSet_1.addKey(pkey);
                                  return pkey;
                                }
                              },
                              value: {
                                get: function() {
                                  wantValues_1 && pkRangeSet_1.addKey(cursor_1.primaryKey);
                                  return cursor_1.value;
                                }
                              }
                            });
                          }
                          return res;
                        });
                      }
                    }
                  }
                  return table[method].apply(this, arguments);
                };
              });
              return tableClone;
            } });
          }
        };
        function trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs) {
          function addAffectedIndex(ix) {
            var rangeSet = getRangeSet(ix.name || "");
            function extractKey(obj) {
              return obj != null ? ix.extractKey(obj) : null;
            }
            var addKeyOrKeys = function(key) {
              return ix.multiEntry && isArray2(key) ? key.forEach(function(key2) {
                return rangeSet.addKey(key2);
              }) : rangeSet.addKey(key);
            };
            (oldObjs || newObjs).forEach(function(_, i) {
              var oldKey = oldObjs && extractKey(oldObjs[i]);
              var newKey = newObjs && extractKey(newObjs[i]);
              if (cmp2(oldKey, newKey) !== 0) {
                if (oldKey != null)
                  addKeyOrKeys(oldKey);
                if (newKey != null)
                  addKeyOrKeys(newKey);
              }
            });
          }
          schema.indexes.forEach(addAffectedIndex);
        }
        function adjustOptimisticFromFailures(tblCache, req, res) {
          if (res.numFailures === 0)
            return req;
          if (req.type === "deleteRange") {
            return null;
          }
          var numBulkOps = req.keys ? req.keys.length : "values" in req && req.values ? req.values.length : 1;
          if (res.numFailures === numBulkOps) {
            return null;
          }
          var clone = __assign({}, req);
          if (isArray2(clone.keys)) {
            clone.keys = clone.keys.filter(function(_, i) {
              return !(i in res.failures);
            });
          }
          if ("values" in clone && isArray2(clone.values)) {
            clone.values = clone.values.filter(function(_, i) {
              return !(i in res.failures);
            });
          }
          return clone;
        }
        function isAboveLower(key, range) {
          return range.lower === void 0 ? true : range.lowerOpen ? cmp2(key, range.lower) > 0 : cmp2(key, range.lower) >= 0;
        }
        function isBelowUpper(key, range) {
          return range.upper === void 0 ? true : range.upperOpen ? cmp2(key, range.upper) < 0 : cmp2(key, range.upper) <= 0;
        }
        function isWithinRange(key, range) {
          return isAboveLower(key, range) && isBelowUpper(key, range);
        }
        function applyOptimisticOps(result, req, ops, table, cacheEntry, immutable) {
          if (!ops || ops.length === 0)
            return result;
          var index = req.query.index;
          var multiEntry = index.multiEntry;
          var queryRange = req.query.range;
          var primaryKey = table.schema.primaryKey;
          var extractPrimKey = primaryKey.extractKey;
          var extractIndex = index.extractKey;
          var extractLowLevelIndex = (index.lowLevelIndex || index).extractKey;
          var finalResult = ops.reduce(function(result2, op) {
            var modifedResult = result2;
            var includedValues = op.type === "add" || op.type === "put" ? op.values.filter(function(v) {
              var key = extractIndex(v);
              return multiEntry && isArray2(key) ? key.some(function(k) {
                return isWithinRange(k, queryRange);
              }) : isWithinRange(key, queryRange);
            }).map(function(v) {
              v = deepClone(v);
              if (immutable)
                Object.freeze(v);
              return v;
            }) : [];
            switch (op.type) {
              case "add":
                modifedResult = result2.concat(req.values ? includedValues : includedValues.map(function(v) {
                  return extractPrimKey(v);
                }));
                break;
              case "put":
                var keySet_1 = new RangeSet2().addKeys(op.values.map(function(v) {
                  return extractPrimKey(v);
                }));
                modifedResult = result2.filter(function(item) {
                  var key = req.values ? extractPrimKey(item) : item;
                  return !rangesOverlap2(new RangeSet2(key), keySet_1);
                }).concat(req.values ? includedValues : includedValues.map(function(v) {
                  return extractPrimKey(v);
                }));
                break;
              case "delete":
                var keysToDelete_1 = new RangeSet2().addKeys(op.keys);
                modifedResult = result2.filter(function(item) {
                  var key = req.values ? extractPrimKey(item) : item;
                  return !rangesOverlap2(new RangeSet2(key), keysToDelete_1);
                });
                break;
              case "deleteRange":
                var range_1 = op.range;
                modifedResult = result2.filter(function(item) {
                  return !isWithinRange(extractPrimKey(item), range_1);
                });
                break;
            }
            return modifedResult;
          }, result);
          if (finalResult === result)
            return result;
          finalResult.sort(function(a, b) {
            return cmp2(extractLowLevelIndex(a), extractLowLevelIndex(b)) || cmp2(extractPrimKey(a), extractPrimKey(b));
          });
          if (req.limit && req.limit < Infinity) {
            if (finalResult.length > req.limit) {
              finalResult.length = req.limit;
            } else if (result.length === req.limit && finalResult.length < req.limit) {
              cacheEntry.dirty = true;
            }
          }
          return immutable ? Object.freeze(finalResult) : finalResult;
        }
        function areRangesEqual(r1, r2) {
          return cmp2(r1.lower, r2.lower) === 0 && cmp2(r1.upper, r2.upper) === 0 && !!r1.lowerOpen === !!r2.lowerOpen && !!r1.upperOpen === !!r2.upperOpen;
        }
        function compareLowers(lower1, lower2, lowerOpen1, lowerOpen2) {
          if (lower1 === void 0)
            return lower2 !== void 0 ? -1 : 0;
          if (lower2 === void 0)
            return 1;
          var c = cmp2(lower1, lower2);
          if (c === 0) {
            if (lowerOpen1 && lowerOpen2)
              return 0;
            if (lowerOpen1)
              return 1;
            if (lowerOpen2)
              return -1;
          }
          return c;
        }
        function compareUppers(upper1, upper2, upperOpen1, upperOpen2) {
          if (upper1 === void 0)
            return upper2 !== void 0 ? 1 : 0;
          if (upper2 === void 0)
            return -1;
          var c = cmp2(upper1, upper2);
          if (c === 0) {
            if (upperOpen1 && upperOpen2)
              return 0;
            if (upperOpen1)
              return -1;
            if (upperOpen2)
              return 1;
          }
          return c;
        }
        function isSuperRange(r1, r2) {
          return compareLowers(r1.lower, r2.lower, r1.lowerOpen, r2.lowerOpen) <= 0 && compareUppers(r1.upper, r2.upper, r1.upperOpen, r2.upperOpen) >= 0;
        }
        function findCompatibleQuery(dbName, tableName, type2, req) {
          var tblCache = cache2["idb://".concat(dbName, "/").concat(tableName)];
          if (!tblCache)
            return [];
          var queries = tblCache.queries[type2];
          if (!queries)
            return [null, false, tblCache, null];
          var indexName = req.query ? req.query.index.name : null;
          var entries = queries[indexName || ""];
          if (!entries)
            return [null, false, tblCache, null];
          switch (type2) {
            case "query":
              var equalEntry = entries.find(function(entry) {
                return entry.req.limit === req.limit && entry.req.values === req.values && areRangesEqual(entry.req.query.range, req.query.range);
              });
              if (equalEntry)
                return [
                  equalEntry,
                  true,
                  tblCache,
                  entries
                ];
              var superEntry = entries.find(function(entry) {
                var limit = "limit" in entry.req ? entry.req.limit : Infinity;
                return limit >= req.limit && (req.values ? entry.req.values : true) && isSuperRange(entry.req.query.range, req.query.range);
              });
              return [superEntry, false, tblCache, entries];
            case "count":
              var countQuery = entries.find(function(entry) {
                return areRangesEqual(entry.req.query.range, req.query.range);
              });
              return [countQuery, !!countQuery, tblCache, entries];
          }
        }
        function subscribeToCacheEntry(cacheEntry, container, requery, signal) {
          cacheEntry.subscribers.add(requery);
          signal.addEventListener("abort", function() {
            cacheEntry.subscribers.delete(requery);
            if (cacheEntry.subscribers.size === 0) {
              enqueForDeletion(cacheEntry, container);
            }
          });
        }
        function enqueForDeletion(cacheEntry, container) {
          setTimeout(function() {
            if (cacheEntry.subscribers.size === 0) {
              delArrayItem(container, cacheEntry);
            }
          }, 3e3);
        }
        var cacheMiddleware = {
          stack: "dbcore",
          level: 0,
          name: "Cache",
          create: function(core) {
            var dbName = core.schema.name;
            var coreMW = __assign(__assign({}, core), { transaction: function(stores, mode, options) {
              var idbtrans = core.transaction(stores, mode, options);
              if (mode === "readwrite") {
                var ac_1 = new AbortController();
                var signal = ac_1.signal;
                var endTransaction = function(wasCommitted) {
                  return function() {
                    ac_1.abort();
                    if (mode === "readwrite") {
                      var affectedSubscribers_1 = /* @__PURE__ */ new Set();
                      for (var _i = 0, stores_1 = stores; _i < stores_1.length; _i++) {
                        var storeName = stores_1[_i];
                        var tblCache = cache2["idb://".concat(dbName, "/").concat(storeName)];
                        if (tblCache) {
                          var table = core.table(storeName);
                          var ops = tblCache.optimisticOps.filter(function(op) {
                            return op.trans === idbtrans;
                          });
                          if (idbtrans._explicit && wasCommitted && idbtrans.mutatedParts) {
                            for (var _a4 = 0, _b = Object.values(tblCache.queries.query); _a4 < _b.length; _a4++) {
                              var entries = _b[_a4];
                              for (var _c = 0, _d = entries.slice(); _c < _d.length; _c++) {
                                var entry = _d[_c];
                                if (obsSetsOverlap(entry.obsSet, idbtrans.mutatedParts)) {
                                  delArrayItem(entries, entry);
                                  entry.subscribers.forEach(function(requery) {
                                    return affectedSubscribers_1.add(requery);
                                  });
                                }
                              }
                            }
                          } else if (ops.length > 0) {
                            tblCache.optimisticOps = tblCache.optimisticOps.filter(function(op) {
                              return op.trans !== idbtrans;
                            });
                            for (var _e = 0, _f = Object.values(tblCache.queries.query); _e < _f.length; _e++) {
                              var entries = _f[_e];
                              for (var _g = 0, _h = entries.slice(); _g < _h.length; _g++) {
                                var entry = _h[_g];
                                if (entry.res != null && idbtrans.mutatedParts) {
                                  if (wasCommitted && !entry.dirty) {
                                    var freezeResults = Object.isFrozen(entry.res);
                                    var modRes = applyOptimisticOps(entry.res, entry.req, ops, table, entry, freezeResults);
                                    if (entry.dirty) {
                                      delArrayItem(entries, entry);
                                      entry.subscribers.forEach(function(requery) {
                                        return affectedSubscribers_1.add(requery);
                                      });
                                    } else if (modRes !== entry.res) {
                                      entry.res = modRes;
                                      entry.promise = DexiePromise.resolve({ result: modRes });
                                    }
                                  } else {
                                    if (entry.dirty) {
                                      delArrayItem(entries, entry);
                                    }
                                    entry.subscribers.forEach(function(requery) {
                                      return affectedSubscribers_1.add(requery);
                                    });
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      affectedSubscribers_1.forEach(function(requery) {
                        return requery();
                      });
                    }
                  };
                };
                idbtrans.addEventListener("abort", endTransaction(false), {
                  signal
                });
                idbtrans.addEventListener("error", endTransaction(false), {
                  signal
                });
                idbtrans.addEventListener("complete", endTransaction(true), {
                  signal
                });
              }
              return idbtrans;
            }, table: function(tableName) {
              var downTable = core.table(tableName);
              var primKey = downTable.schema.primaryKey;
              var tableMW = __assign(__assign({}, downTable), { mutate: function(req) {
                var trans = PSD.trans;
                if (primKey.outbound || trans.db._options.cache === "disabled" || trans.explicit) {
                  return downTable.mutate(req);
                }
                var tblCache = cache2["idb://".concat(dbName, "/").concat(tableName)];
                if (!tblCache)
                  return downTable.mutate(req);
                var promise = downTable.mutate(req);
                if ((req.type === "add" || req.type === "put") && (req.values.length >= 50 || getEffectiveKeys(primKey, req).some(function(key) {
                  return key == null;
                }))) {
                  promise.then(function(res) {
                    var reqWithResolvedKeys = __assign(__assign({}, req), { values: req.values.map(function(value, i) {
                      var _a4;
                      var valueWithKey = ((_a4 = primKey.keyPath) === null || _a4 === void 0 ? void 0 : _a4.includes(".")) ? deepClone(value) : __assign({}, value);
                      setByKeyPath(valueWithKey, primKey.keyPath, res.results[i]);
                      return valueWithKey;
                    }) });
                    var adjustedReq = adjustOptimisticFromFailures(tblCache, reqWithResolvedKeys, res);
                    tblCache.optimisticOps.push(adjustedReq);
                    queueMicrotask(function() {
                      return req.mutatedParts && signalSubscribersLazily(req.mutatedParts);
                    });
                  });
                } else {
                  tblCache.optimisticOps.push(req);
                  req.mutatedParts && signalSubscribersLazily(req.mutatedParts);
                  promise.then(function(res) {
                    if (res.numFailures > 0) {
                      delArrayItem(tblCache.optimisticOps, req);
                      var adjustedReq = adjustOptimisticFromFailures(tblCache, req, res);
                      if (adjustedReq) {
                        tblCache.optimisticOps.push(adjustedReq);
                      }
                      req.mutatedParts && signalSubscribersLazily(req.mutatedParts);
                    }
                  });
                  promise.catch(function() {
                    delArrayItem(tblCache.optimisticOps, req);
                    req.mutatedParts && signalSubscribersLazily(req.mutatedParts);
                  });
                }
                return promise;
              }, query: function(req) {
                var _a4;
                if (!isCachableContext(PSD, downTable) || !isCachableRequest("query", req))
                  return downTable.query(req);
                var freezeResults = ((_a4 = PSD.trans) === null || _a4 === void 0 ? void 0 : _a4.db._options.cache) === "immutable";
                var _b = PSD, requery = _b.requery, signal = _b.signal;
                var _c = findCompatibleQuery(dbName, tableName, "query", req), cacheEntry = _c[0], exactMatch = _c[1], tblCache = _c[2], container = _c[3];
                if (cacheEntry && exactMatch) {
                  cacheEntry.obsSet = req.obsSet;
                } else {
                  var promise = downTable.query(req).then(function(res) {
                    var result = res.result;
                    if (cacheEntry)
                      cacheEntry.res = result;
                    if (freezeResults) {
                      for (var i = 0, l = result.length; i < l; ++i) {
                        Object.freeze(result[i]);
                      }
                      Object.freeze(result);
                    } else {
                      res.result = deepClone(result);
                    }
                    return res;
                  }).catch(function(error) {
                    if (container && cacheEntry)
                      delArrayItem(container, cacheEntry);
                    return Promise.reject(error);
                  });
                  cacheEntry = {
                    obsSet: req.obsSet,
                    promise,
                    subscribers: /* @__PURE__ */ new Set(),
                    type: "query",
                    req,
                    dirty: false
                  };
                  if (container) {
                    container.push(cacheEntry);
                  } else {
                    container = [cacheEntry];
                    if (!tblCache) {
                      tblCache = cache2["idb://".concat(dbName, "/").concat(tableName)] = {
                        queries: {
                          query: {},
                          count: {}
                        },
                        objs: /* @__PURE__ */ new Map(),
                        optimisticOps: [],
                        unsignaledParts: {}
                      };
                    }
                    tblCache.queries.query[req.query.index.name || ""] = container;
                  }
                }
                subscribeToCacheEntry(cacheEntry, container, requery, signal);
                return cacheEntry.promise.then(function(res) {
                  return {
                    result: applyOptimisticOps(res.result, req, tblCache === null || tblCache === void 0 ? void 0 : tblCache.optimisticOps, downTable, cacheEntry, freezeResults)
                  };
                });
              } });
              return tableMW;
            } });
            return coreMW;
          }
        };
        function vipify(target2, vipDb) {
          return new Proxy(target2, {
            get: function(target3, prop, receiver) {
              if (prop === "db")
                return vipDb;
              return Reflect.get(target3, prop, receiver);
            }
          });
        }
        var Dexie$1 = function() {
          function Dexie3(name2, options) {
            var _this = this;
            this._middlewares = {};
            this.verno = 0;
            var deps = Dexie3.dependencies;
            this._options = options = __assign({
              addons: Dexie3.addons,
              autoOpen: true,
              indexedDB: deps.indexedDB,
              IDBKeyRange: deps.IDBKeyRange,
              cache: "cloned"
            }, options);
            this._deps = {
              indexedDB: options.indexedDB,
              IDBKeyRange: options.IDBKeyRange
            };
            var addons = options.addons;
            this._dbSchema = {};
            this._versions = [];
            this._storeNames = [];
            this._allTables = {};
            this.idbdb = null;
            this._novip = this;
            var state = {
              dbOpenError: null,
              isBeingOpened: false,
              onReadyBeingFired: null,
              openComplete: false,
              dbReadyResolve: nop,
              dbReadyPromise: null,
              cancelOpen: nop,
              openCanceller: null,
              autoSchema: true,
              PR1398_maxLoop: 3,
              autoOpen: options.autoOpen
            };
            state.dbReadyPromise = new DexiePromise(function(resolve) {
              state.dbReadyResolve = resolve;
            });
            state.openCanceller = new DexiePromise(function(_, reject) {
              state.cancelOpen = reject;
            });
            this._state = state;
            this.name = name2;
            this.on = Events(this, "populate", "blocked", "versionchange", "close", { ready: [promisableChain, nop] });
            this.on.ready.subscribe = override(this.on.ready.subscribe, function(subscribe) {
              return function(subscriber, bSticky) {
                Dexie3.vip(function() {
                  var state2 = _this._state;
                  if (state2.openComplete) {
                    if (!state2.dbOpenError)
                      DexiePromise.resolve().then(subscriber);
                    if (bSticky)
                      subscribe(subscriber);
                  } else if (state2.onReadyBeingFired) {
                    state2.onReadyBeingFired.push(subscriber);
                    if (bSticky)
                      subscribe(subscriber);
                  } else {
                    subscribe(subscriber);
                    var db_1 = _this;
                    if (!bSticky)
                      subscribe(function unsubscribe() {
                        db_1.on.ready.unsubscribe(subscriber);
                        db_1.on.ready.unsubscribe(unsubscribe);
                      });
                  }
                });
              };
            });
            this.Collection = createCollectionConstructor(this);
            this.Table = createTableConstructor(this);
            this.Transaction = createTransactionConstructor(this);
            this.Version = createVersionConstructor(this);
            this.WhereClause = createWhereClauseConstructor(this);
            this.on("versionchange", function(ev) {
              if (ev.newVersion > 0)
                console.warn("Another connection wants to upgrade database '".concat(_this.name, "'. Closing db now to resume the upgrade."));
              else
                console.warn("Another connection wants to delete database '".concat(_this.name, "'. Closing db now to resume the delete request."));
              _this.close({ disableAutoOpen: false });
            });
            this.on("blocked", function(ev) {
              if (!ev.newVersion || ev.newVersion < ev.oldVersion)
                console.warn("Dexie.delete('".concat(_this.name, "') was blocked"));
              else
                console.warn("Upgrade '".concat(_this.name, "' blocked by other connection holding version ").concat(ev.oldVersion / 10));
            });
            this._maxKey = getMaxKey(options.IDBKeyRange);
            this._createTransaction = function(mode, storeNames, dbschema, parentTransaction) {
              return new _this.Transaction(mode, storeNames, dbschema, _this._options.chromeTransactionDurability, parentTransaction);
            };
            this._fireOnBlocked = function(ev) {
              _this.on("blocked").fire(ev);
              connections.filter(function(c) {
                return c.name === _this.name && c !== _this && !c._state.vcFired;
              }).map(function(c) {
                return c.on("versionchange").fire(ev);
              });
            };
            this.use(cacheExistingValuesMiddleware);
            this.use(cacheMiddleware);
            this.use(observabilityMiddleware);
            this.use(virtualIndexMiddleware);
            this.use(hooksMiddleware);
            var vipDB = new Proxy(this, {
              get: function(_, prop, receiver) {
                if (prop === "_vip")
                  return true;
                if (prop === "table")
                  return function(tableName) {
                    return vipify(_this.table(tableName), vipDB);
                  };
                var rv = Reflect.get(_, prop, receiver);
                if (rv instanceof Table)
                  return vipify(rv, vipDB);
                if (prop === "tables")
                  return rv.map(function(t) {
                    return vipify(t, vipDB);
                  });
                if (prop === "_createTransaction")
                  return function() {
                    var tx = rv.apply(this, arguments);
                    return vipify(tx, vipDB);
                  };
                return rv;
              }
            });
            this.vip = vipDB;
            addons.forEach(function(addon) {
              return addon(_this);
            });
          }
          Dexie3.prototype.version = function(versionNumber) {
            if (isNaN(versionNumber) || versionNumber < 0.1)
              throw new exceptions.Type("Given version is not a positive number");
            versionNumber = Math.round(versionNumber * 10) / 10;
            if (this.idbdb || this._state.isBeingOpened)
              throw new exceptions.Schema("Cannot add version when database is open");
            this.verno = Math.max(this.verno, versionNumber);
            var versions = this._versions;
            var versionInstance = versions.filter(function(v) {
              return v._cfg.version === versionNumber;
            })[0];
            if (versionInstance)
              return versionInstance;
            versionInstance = new this.Version(versionNumber);
            versions.push(versionInstance);
            versions.sort(lowerVersionFirst);
            versionInstance.stores({});
            this._state.autoSchema = false;
            return versionInstance;
          };
          Dexie3.prototype._whenReady = function(fn) {
            var _this = this;
            return this.idbdb && (this._state.openComplete || PSD.letThrough || this._vip) ? fn() : new DexiePromise(function(resolve, reject) {
              if (_this._state.openComplete) {
                return reject(new exceptions.DatabaseClosed(_this._state.dbOpenError));
              }
              if (!_this._state.isBeingOpened) {
                if (!_this._state.autoOpen) {
                  reject(new exceptions.DatabaseClosed());
                  return;
                }
                _this.open().catch(nop);
              }
              _this._state.dbReadyPromise.then(resolve, reject);
            }).then(fn);
          };
          Dexie3.prototype.use = function(_a4) {
            var stack = _a4.stack, create5 = _a4.create, level = _a4.level, name2 = _a4.name;
            if (name2)
              this.unuse({ stack, name: name2 });
            var middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
            middlewares.push({ stack, create: create5, level: level == null ? 10 : level, name: name2 });
            middlewares.sort(function(a, b) {
              return a.level - b.level;
            });
            return this;
          };
          Dexie3.prototype.unuse = function(_a4) {
            var stack = _a4.stack, name2 = _a4.name, create5 = _a4.create;
            if (stack && this._middlewares[stack]) {
              this._middlewares[stack] = this._middlewares[stack].filter(function(mw) {
                return create5 ? mw.create !== create5 : name2 ? mw.name !== name2 : false;
              });
            }
            return this;
          };
          Dexie3.prototype.open = function() {
            var _this = this;
            return usePSD(
              globalPSD,
              function() {
                return dexieOpen(_this);
              }
            );
          };
          Dexie3.prototype._close = function() {
            var state = this._state;
            var idx = connections.indexOf(this);
            if (idx >= 0)
              connections.splice(idx, 1);
            if (this.idbdb) {
              try {
                this.idbdb.close();
              } catch (e) {
              }
              this.idbdb = null;
            }
            if (!state.isBeingOpened) {
              state.dbReadyPromise = new DexiePromise(function(resolve) {
                state.dbReadyResolve = resolve;
              });
              state.openCanceller = new DexiePromise(function(_, reject) {
                state.cancelOpen = reject;
              });
            }
          };
          Dexie3.prototype.close = function(_a4) {
            var _b = _a4 === void 0 ? { disableAutoOpen: true } : _a4, disableAutoOpen = _b.disableAutoOpen;
            var state = this._state;
            if (disableAutoOpen) {
              if (state.isBeingOpened) {
                state.cancelOpen(new exceptions.DatabaseClosed());
              }
              this._close();
              state.autoOpen = false;
              state.dbOpenError = new exceptions.DatabaseClosed();
            } else {
              this._close();
              state.autoOpen = this._options.autoOpen || state.isBeingOpened;
              state.openComplete = false;
              state.dbOpenError = null;
            }
          };
          Dexie3.prototype.delete = function(closeOptions) {
            var _this = this;
            if (closeOptions === void 0) {
              closeOptions = { disableAutoOpen: true };
            }
            var hasInvalidArguments = arguments.length > 0 && typeof arguments[0] !== "object";
            var state = this._state;
            return new DexiePromise(function(resolve, reject) {
              var doDelete = function() {
                _this.close(closeOptions);
                var req = _this._deps.indexedDB.deleteDatabase(_this.name);
                req.onsuccess = wrap(function() {
                  _onDatabaseDeleted(_this._deps, _this.name);
                  resolve();
                });
                req.onerror = eventRejectHandler(reject);
                req.onblocked = _this._fireOnBlocked;
              };
              if (hasInvalidArguments)
                throw new exceptions.InvalidArgument("Invalid closeOptions argument to db.delete()");
              if (state.isBeingOpened) {
                state.dbReadyPromise.then(doDelete);
              } else {
                doDelete();
              }
            });
          };
          Dexie3.prototype.backendDB = function() {
            return this.idbdb;
          };
          Dexie3.prototype.isOpen = function() {
            return this.idbdb !== null;
          };
          Dexie3.prototype.hasBeenClosed = function() {
            var dbOpenError = this._state.dbOpenError;
            return dbOpenError && dbOpenError.name === "DatabaseClosed";
          };
          Dexie3.prototype.hasFailed = function() {
            return this._state.dbOpenError !== null;
          };
          Dexie3.prototype.dynamicallyOpened = function() {
            return this._state.autoSchema;
          };
          Object.defineProperty(Dexie3.prototype, "tables", {
            get: function() {
              var _this = this;
              return keys(this._allTables).map(function(name2) {
                return _this._allTables[name2];
              });
            },
            enumerable: false,
            configurable: true
          });
          Dexie3.prototype.transaction = function() {
            var args = extractTransactionArgs.apply(this, arguments);
            return this._transaction.apply(this, args);
          };
          Dexie3.prototype._transaction = function(mode, tables, scopeFunc) {
            var _this = this;
            var parentTransaction = PSD.trans;
            if (!parentTransaction || parentTransaction.db !== this || mode.indexOf("!") !== -1)
              parentTransaction = null;
            var onlyIfCompatible = mode.indexOf("?") !== -1;
            mode = mode.replace("!", "").replace("?", "");
            var idbMode, storeNames;
            try {
              storeNames = tables.map(function(table) {
                var storeName = table instanceof _this.Table ? table.name : table;
                if (typeof storeName !== "string")
                  throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                return storeName;
              });
              if (mode == "r" || mode === READONLY)
                idbMode = READONLY;
              else if (mode == "rw" || mode == READWRITE)
                idbMode = READWRITE;
              else
                throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
              if (parentTransaction) {
                if (parentTransaction.mode === READONLY && idbMode === READWRITE) {
                  if (onlyIfCompatible) {
                    parentTransaction = null;
                  } else
                    throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                }
                if (parentTransaction) {
                  storeNames.forEach(function(storeName) {
                    if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                      if (onlyIfCompatible) {
                        parentTransaction = null;
                      } else
                        throw new exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
                    }
                  });
                }
                if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
                  parentTransaction = null;
                }
              }
            } catch (e) {
              return parentTransaction ? parentTransaction._promise(null, function(_, reject) {
                reject(e);
              }) : rejection(e);
            }
            var enterTransaction = enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
            return parentTransaction ? parentTransaction._promise(idbMode, enterTransaction, "lock") : PSD.trans ? usePSD(PSD.transless, function() {
              return _this._whenReady(enterTransaction);
            }) : this._whenReady(enterTransaction);
          };
          Dexie3.prototype.table = function(tableName) {
            if (!hasOwn3(this._allTables, tableName)) {
              throw new exceptions.InvalidTable("Table ".concat(tableName, " does not exist"));
            }
            return this._allTables[tableName];
          };
          return Dexie3;
        }();
        var symbolObservable = typeof Symbol !== "undefined" && "observable" in Symbol ? Symbol.observable : "@@observable";
        var Observable = function() {
          function Observable2(subscribe) {
            this._subscribe = subscribe;
          }
          Observable2.prototype.subscribe = function(x, error, complete) {
            return this._subscribe(!x || typeof x === "function" ? { next: x, error, complete } : x);
          };
          Observable2.prototype[symbolObservable] = function() {
            return this;
          };
          return Observable2;
        }();
        var domDeps;
        try {
          domDeps = {
            indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
            IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
          };
        } catch (e) {
          domDeps = { indexedDB: null, IDBKeyRange: null };
        }
        function liveQuery2(querier) {
          var hasValue2 = false;
          var currentValue;
          var observable = new Observable(function(observer) {
            var scopeFuncIsAsync = isAsyncFunction(querier);
            function execute(ctx) {
              var wasRootExec = beginMicroTickScope();
              try {
                if (scopeFuncIsAsync) {
                  incrementExpectedAwaits();
                }
                var rv = newScope(querier, ctx);
                if (scopeFuncIsAsync) {
                  rv = rv.finally(decrementExpectedAwaits);
                }
                return rv;
              } finally {
                wasRootExec && endMicroTickScope();
              }
            }
            var closed = false;
            var abortController;
            var accumMuts = {};
            var currentObs = {};
            var subscription = {
              get closed() {
                return closed;
              },
              unsubscribe: function() {
                if (closed)
                  return;
                closed = true;
                if (abortController)
                  abortController.abort();
                if (startedListening)
                  globalEvents.storagemutated.unsubscribe(mutationListener);
              }
            };
            observer.start && observer.start(subscription);
            var startedListening = false;
            var doQuery = function() {
              return execInGlobalContext(_doQuery);
            };
            function shouldNotify() {
              return obsSetsOverlap(currentObs, accumMuts);
            }
            var mutationListener = function(parts) {
              extendObservabilitySet(accumMuts, parts);
              if (shouldNotify()) {
                doQuery();
              }
            };
            var _doQuery = function() {
              if (closed || !domDeps.indexedDB) {
                return;
              }
              accumMuts = {};
              var subscr = {};
              if (abortController)
                abortController.abort();
              abortController = new AbortController();
              var ctx = {
                subscr,
                signal: abortController.signal,
                requery: doQuery,
                querier,
                trans: null
              };
              var ret = execute(ctx);
              Promise.resolve(ret).then(function(result) {
                hasValue2 = true;
                currentValue = result;
                if (closed || ctx.signal.aborted) {
                  return;
                }
                accumMuts = {};
                currentObs = subscr;
                if (!objectIsEmpty(currentObs) && !startedListening) {
                  globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, mutationListener);
                  startedListening = true;
                }
                execInGlobalContext(function() {
                  return !closed && observer.next && observer.next(result);
                });
              }, function(err) {
                hasValue2 = false;
                if (!["DatabaseClosedError", "AbortError"].includes(err === null || err === void 0 ? void 0 : err.name)) {
                  if (!closed)
                    execInGlobalContext(function() {
                      if (closed)
                        return;
                      observer.error && observer.error(err);
                    });
                }
              });
            };
            setTimeout(doQuery, 0);
            return subscription;
          });
          observable.hasValue = function() {
            return hasValue2;
          };
          observable.getValue = function() {
            return currentValue;
          };
          return observable;
        }
        var Dexie2 = Dexie$1;
        props(Dexie2, __assign(__assign({}, fullNameExceptions), {
          delete: function(databaseName) {
            var db2 = new Dexie2(databaseName, { addons: [] });
            return db2.delete();
          },
          exists: function(name2) {
            return new Dexie2(name2, { addons: [] }).open().then(function(db2) {
              db2.close();
              return true;
            }).catch("NoSuchDatabaseError", function() {
              return false;
            });
          },
          getDatabaseNames: function(cb) {
            try {
              return getDatabaseNames(Dexie2.dependencies).then(cb);
            } catch (_a4) {
              return rejection(new exceptions.MissingAPI());
            }
          },
          defineClass: function() {
            function Class(content) {
              extend(this, content);
            }
            return Class;
          },
          ignoreTransaction: function(scopeFunc) {
            return PSD.trans ? usePSD(PSD.transless, scopeFunc) : scopeFunc();
          },
          vip,
          async: function(generatorFn) {
            return function() {
              try {
                var rv = awaitIterator(generatorFn.apply(this, arguments));
                if (!rv || typeof rv.then !== "function")
                  return DexiePromise.resolve(rv);
                return rv;
              } catch (e) {
                return rejection(e);
              }
            };
          },
          spawn: function(generatorFn, args, thiz) {
            try {
              var rv = awaitIterator(generatorFn.apply(thiz, args || []));
              if (!rv || typeof rv.then !== "function")
                return DexiePromise.resolve(rv);
              return rv;
            } catch (e) {
              return rejection(e);
            }
          },
          currentTransaction: {
            get: function() {
              return PSD.trans || null;
            }
          },
          waitFor: function(promiseOrFunction, optionalTimeout) {
            var promise = DexiePromise.resolve(typeof promiseOrFunction === "function" ? Dexie2.ignoreTransaction(promiseOrFunction) : promiseOrFunction).timeout(optionalTimeout || 6e4);
            return PSD.trans ? PSD.trans.waitFor(promise) : promise;
          },
          Promise: DexiePromise,
          debug: {
            get: function() {
              return debug;
            },
            set: function(value) {
              setDebug(value);
            }
          },
          derive,
          extend,
          props,
          override,
          Events,
          on: globalEvents,
          liveQuery: liveQuery2,
          extendObservabilitySet,
          getByKeyPath,
          setByKeyPath,
          delByKeyPath,
          shallowClone,
          deepClone,
          getObjectDiff,
          cmp: cmp2,
          asap: asap$1,
          minKey,
          addons: [],
          connections,
          errnames,
          dependencies: domDeps,
          cache: cache2,
          semVer: DEXIE_VERSION,
          version: DEXIE_VERSION.split(".").map(function(n) {
            return parseInt(n);
          }).reduce(function(p, c, i) {
            return p + c / Math.pow(10, i * 2);
          })
        }));
        Dexie2.maxKey = getMaxKey(Dexie2.dependencies.IDBKeyRange);
        if (typeof dispatchEvent !== "undefined" && typeof addEventListener !== "undefined") {
          globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, function(updatedParts) {
            if (!propagatingLocally) {
              var event_1;
              event_1 = new CustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, {
                detail: updatedParts
              });
              propagatingLocally = true;
              dispatchEvent(event_1);
              propagatingLocally = false;
            }
          });
          addEventListener(STORAGE_MUTATED_DOM_EVENT_NAME, function(_a4) {
            var detail = _a4.detail;
            if (!propagatingLocally) {
              propagateLocally(detail);
            }
          });
        }
        function propagateLocally(updateParts) {
          var wasMe = propagatingLocally;
          try {
            propagatingLocally = true;
            globalEvents.storagemutated.fire(updateParts);
            signalSubscribersNow(updateParts, true);
          } finally {
            propagatingLocally = wasMe;
          }
        }
        var propagatingLocally = false;
        var bc;
        var createBC = function() {
        };
        if (typeof BroadcastChannel !== "undefined") {
          createBC = function() {
            bc = new BroadcastChannel(STORAGE_MUTATED_DOM_EVENT_NAME);
            bc.onmessage = function(ev) {
              return ev.data && propagateLocally(ev.data);
            };
          };
          createBC();
          if (typeof bc.unref === "function") {
            bc.unref();
          }
          globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, function(changedParts) {
            if (!propagatingLocally) {
              bc.postMessage(changedParts);
            }
          });
        }
        if (typeof addEventListener !== "undefined") {
          addEventListener("pagehide", function(event) {
            if (!Dexie$1.disableBfCache && event.persisted) {
              if (debug)
                console.debug("Dexie: handling persisted pagehide");
              bc === null || bc === void 0 ? void 0 : bc.close();
              for (var _i = 0, connections_1 = connections; _i < connections_1.length; _i++) {
                var db2 = connections_1[_i];
                db2.close({ disableAutoOpen: false });
              }
            }
          });
          addEventListener("pageshow", function(event) {
            if (!Dexie$1.disableBfCache && event.persisted) {
              if (debug)
                console.debug("Dexie: handling persisted pageshow");
              createBC();
              propagateLocally({ all: new RangeSet2(-Infinity, [[]]) });
            }
          });
        }
        function replacePrefix2(a, b) {
          return new PropModification2({ replacePrefix: [a, b] });
        }
        DexiePromise.rejectionMapper = mapError;
        setDebug(debug);
        var namedExports = /* @__PURE__ */ Object.freeze({
          __proto__: null,
          Dexie: Dexie$1,
          liveQuery: liveQuery2,
          Entity: Entity2,
          cmp: cmp2,
          PropModSymbol: PropModSymbol2,
          PropModification: PropModification2,
          replacePrefix: replacePrefix2,
          "default": Dexie$1,
          RangeSet: RangeSet2,
          mergeRanges: mergeRanges2,
          rangesOverlap: rangesOverlap2
        });
        __assign(Dexie$1, namedExports, { default: Dexie$1 });
        return Dexie$1;
      });
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/handle.js
  var require_handle = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/handle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DisallowedDomainError = exports.UnsupportedDomainError = exports.ReservedHandleError = exports.InvalidHandleError = exports.isValidTld = exports.isValidHandle = exports.normalizeAndEnsureValidHandle = exports.normalizeHandle = exports.ensureValidHandleRegex = exports.ensureValidHandle = exports.DISALLOWED_TLDS = exports.INVALID_HANDLE = void 0;
      exports.INVALID_HANDLE = "handle.invalid";
      exports.DISALLOWED_TLDS = [
        ".local",
        ".arpa",
        ".invalid",
        ".localhost",
        ".internal",
        ".example",
        ".alt",
        // policy could concievably change on ".onion" some day
        ".onion"
        // NOTE: .test is allowed in testing and devopment. In practical terms
        // "should" "never" actually resolve and get registered in production
      ];
      var ensureValidHandle = (handle) => {
        if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {
          throw new InvalidHandleError("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");
        }
        if (handle.length > 253) {
          throw new InvalidHandleError("Handle is too long (253 chars max)");
        }
        const labels = handle.split(".");
        if (labels.length < 2) {
          throw new InvalidHandleError("Handle domain needs at least two parts");
        }
        for (let i = 0; i < labels.length; i++) {
          const l = labels[i];
          if (l.length < 1) {
            throw new InvalidHandleError("Handle parts can not be empty");
          }
          if (l.length > 63) {
            throw new InvalidHandleError("Handle part too long (max 63 chars)");
          }
          if (l.endsWith("-") || l.startsWith("-")) {
            throw new InvalidHandleError("Handle parts can not start or end with hyphens");
          }
          if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {
            throw new InvalidHandleError("Handle final component (TLD) must start with ASCII letter");
          }
        }
      };
      exports.ensureValidHandle = ensureValidHandle;
      var ensureValidHandleRegex = (handle) => {
        if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(handle)) {
          throw new InvalidHandleError("Handle didn't validate via regex");
        }
        if (handle.length > 253) {
          throw new InvalidHandleError("Handle is too long (253 chars max)");
        }
      };
      exports.ensureValidHandleRegex = ensureValidHandleRegex;
      var normalizeHandle = (handle) => {
        return handle.toLowerCase();
      };
      exports.normalizeHandle = normalizeHandle;
      var normalizeAndEnsureValidHandle = (handle) => {
        const normalized = (0, exports.normalizeHandle)(handle);
        (0, exports.ensureValidHandle)(normalized);
        return normalized;
      };
      exports.normalizeAndEnsureValidHandle = normalizeAndEnsureValidHandle;
      var isValidHandle = (handle) => {
        try {
          (0, exports.ensureValidHandle)(handle);
        } catch (err) {
          if (err instanceof InvalidHandleError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidHandle = isValidHandle;
      var isValidTld = (handle) => {
        return !exports.DISALLOWED_TLDS.some((domain) => handle.endsWith(domain));
      };
      exports.isValidTld = isValidTld;
      var InvalidHandleError = class extends Error {
      };
      exports.InvalidHandleError = InvalidHandleError;
      var ReservedHandleError = class extends Error {
      };
      exports.ReservedHandleError = ReservedHandleError;
      var UnsupportedDomainError = class extends Error {
      };
      exports.UnsupportedDomainError = UnsupportedDomainError;
      var DisallowedDomainError = class extends Error {
      };
      exports.DisallowedDomainError = DisallowedDomainError;
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/did.js
  var require_did = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/did.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidDidError = exports.ensureValidDidRegex = exports.ensureValidDid = void 0;
      var ensureValidDid = (did) => {
        if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {
          throw new InvalidDidError("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");
        }
        const parts = did.split(":");
        if (parts.length < 3) {
          throw new InvalidDidError("DID requires prefix, method, and method-specific content");
        }
        if (parts[0] != "did") {
          throw new InvalidDidError('DID requires "did:" prefix');
        }
        if (!/^[a-z]+$/.test(parts[1])) {
          throw new InvalidDidError("DID method must be lower-case letters");
        }
        if (did.endsWith(":") || did.endsWith("%")) {
          throw new InvalidDidError('DID can not end with ":" or "%"');
        }
        if (did.length > 2 * 1024) {
          throw new InvalidDidError("DID is too long (2048 chars max)");
        }
      };
      exports.ensureValidDid = ensureValidDid;
      var ensureValidDidRegex = (did) => {
        if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {
          throw new InvalidDidError("DID didn't validate via regex");
        }
        if (did.length > 2 * 1024) {
          throw new InvalidDidError("DID is too long (2048 chars max)");
        }
      };
      exports.ensureValidDidRegex = ensureValidDidRegex;
      var InvalidDidError = class extends Error {
      };
      exports.InvalidDidError = InvalidDidError;
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/nsid.js
  var require_nsid = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/nsid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidNsidError = exports.ensureValidNsidRegex = exports.ensureValidNsid = exports.NSID = void 0;
      var NSID = class _NSID {
        static parse(nsid) {
          return new _NSID(nsid);
        }
        static create(authority, name2) {
          const segments = [...authority.split(".").reverse(), name2].join(".");
          return new _NSID(segments);
        }
        static isValid(nsid) {
          try {
            _NSID.parse(nsid);
            return true;
          } catch (e) {
            return false;
          }
        }
        constructor(nsid) {
          Object.defineProperty(this, "segments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          (0, exports.ensureValidNsid)(nsid);
          this.segments = nsid.split(".");
        }
        get authority() {
          return this.segments.slice(0, this.segments.length - 1).reverse().join(".");
        }
        get name() {
          return this.segments.at(this.segments.length - 1);
        }
        toString() {
          return this.segments.join(".");
        }
      };
      exports.NSID = NSID;
      var ensureValidNsid = (nsid) => {
        const toCheck = nsid;
        if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
          throw new InvalidNsidError("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");
        }
        if (toCheck.length > 253 + 1 + 63) {
          throw new InvalidNsidError("NSID is too long (317 chars max)");
        }
        const labels = toCheck.split(".");
        if (labels.length < 3) {
          throw new InvalidNsidError("NSID needs at least three parts");
        }
        for (let i = 0; i < labels.length; i++) {
          const l = labels[i];
          if (l.length < 1) {
            throw new InvalidNsidError("NSID parts can not be empty");
          }
          if (l.length > 63) {
            throw new InvalidNsidError("NSID part too long (max 63 chars)");
          }
          if (l.endsWith("-") || l.startsWith("-")) {
            throw new InvalidNsidError("NSID parts can not start or end with hyphen");
          }
          if (/^[0-9]/.test(l) && i == 0) {
            throw new InvalidNsidError("NSID first part may not start with a digit");
          }
          if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) {
            throw new InvalidNsidError("NSID name part must be only letters");
          }
        }
      };
      exports.ensureValidNsid = ensureValidNsid;
      var ensureValidNsidRegex = (nsid) => {
        if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(nsid)) {
          throw new InvalidNsidError("NSID didn't validate via regex");
        }
        if (nsid.length > 253 + 1 + 63) {
          throw new InvalidNsidError("NSID is too long (317 chars max)");
        }
      };
      exports.ensureValidNsidRegex = ensureValidNsidRegex;
      var InvalidNsidError = class extends Error {
      };
      exports.InvalidNsidError = InvalidNsidError;
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/aturi_validation.js
  var require_aturi_validation = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/aturi_validation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ensureValidAtUriRegex = exports.ensureValidAtUri = void 0;
      var handle_1 = require_handle();
      var did_1 = require_did();
      var nsid_1 = require_nsid();
      var ensureValidAtUri = (uri) => {
        const uriParts = uri.split("#");
        if (uriParts.length > 2) {
          throw new Error('ATURI can have at most one "#", separating fragment out');
        }
        const fragmentPart = uriParts[1] || null;
        uri = uriParts[0];
        if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {
          throw new Error("Disallowed characters in ATURI (ASCII)");
        }
        const parts = uri.split("/");
        if (parts.length >= 3 && (parts[0] != "at:" || parts[1].length != 0)) {
          throw new Error('ATURI must start with "at://"');
        }
        if (parts.length < 3) {
          throw new Error("ATURI requires at least method and authority sections");
        }
        try {
          if (parts[2].startsWith("did:")) {
            (0, did_1.ensureValidDid)(parts[2]);
          } else {
            (0, handle_1.ensureValidHandle)(parts[2]);
          }
        } catch (e) {
          throw new Error("ATURI authority must be a valid handle or DID");
        }
        if (parts.length >= 4) {
          if (parts[3].length == 0) {
            throw new Error("ATURI can not have a slash after authority without a path segment");
          }
          try {
            (0, nsid_1.ensureValidNsid)(parts[3]);
          } catch (e) {
            throw new Error("ATURI requires first path segment (if supplied) to be valid NSID");
          }
        }
        if (parts.length >= 5) {
          if (parts[4].length == 0) {
            throw new Error("ATURI can not have a slash after collection, unless record key is provided");
          }
        }
        if (parts.length >= 6) {
          throw new Error("ATURI path can have at most two parts, and no trailing slash");
        }
        if (uriParts.length >= 2 && fragmentPart == null) {
          throw new Error("ATURI fragment must be non-empty and start with slash");
        }
        if (fragmentPart != null) {
          if (fragmentPart.length == 0 || fragmentPart[0] != "/") {
            throw new Error("ATURI fragment must be non-empty and start with slash");
          }
          if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
            throw new Error("Disallowed characters in ATURI fragment (ASCII)");
          }
        }
        if (uri.length > 8 * 1024) {
          throw new Error("ATURI is far too long");
        }
      };
      exports.ensureValidAtUri = ensureValidAtUri;
      var ensureValidAtUriRegex = (uri) => {
        const aturiRegex = new RegExp("^at:\\/\\/(?<authority>[a-zA-Z0-9._:%-]+)(\\/(?<collection>[a-zA-Z0-9-.]+)(\\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\\/[a-zA-Z0-9._~:@!$&%')(*+,;=\\-[\\]/\\\\]*))?$");
        const rm = uri.match(aturiRegex);
        if (!rm || !rm.groups) {
          throw new Error("ATURI didn't validate via regex");
        }
        const groups = rm.groups;
        try {
          (0, handle_1.ensureValidHandleRegex)(groups.authority);
        } catch (e) {
          try {
            (0, did_1.ensureValidDidRegex)(groups.authority);
          } catch (e2) {
            throw new Error("ATURI authority must be a valid handle or DID");
          }
        }
        if (groups.collection) {
          try {
            (0, nsid_1.ensureValidNsidRegex)(groups.collection);
          } catch (e) {
            throw new Error("ATURI collection path segment must be a valid NSID");
          }
        }
        if (uri.length > 8 * 1024) {
          throw new Error("ATURI is far too long");
        }
      };
      exports.ensureValidAtUriRegex = ensureValidAtUriRegex;
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/aturi.js
  var require_aturi = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/aturi.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AtUri = exports.ATP_URI_REGEX = void 0;
      __exportStar(require_aturi_validation(), exports);
      exports.ATP_URI_REGEX = // proto-    --did--------------   --name----------------   --path----   --query--   --hash--
      /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
      var RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
      var AtUri = class _AtUri {
        constructor(uri, base5) {
          Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "host", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "pathname", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "searchParams", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          let parsed;
          if (base5) {
            parsed = parse3(base5);
            if (!parsed) {
              throw new Error(`Invalid at uri: ${base5}`);
            }
            const relativep = parseRelative(uri);
            if (!relativep) {
              throw new Error(`Invalid path: ${uri}`);
            }
            Object.assign(parsed, relativep);
          } else {
            parsed = parse3(uri);
            if (!parsed) {
              throw new Error(`Invalid at uri: ${uri}`);
            }
          }
          this.hash = parsed.hash;
          this.host = parsed.host;
          this.pathname = parsed.pathname;
          this.searchParams = parsed.searchParams;
        }
        static make(handleOrDid, collection, rkey) {
          let str = handleOrDid;
          if (collection)
            str += "/" + collection;
          if (rkey)
            str += "/" + rkey;
          return new _AtUri(str);
        }
        get protocol() {
          return "at:";
        }
        get origin() {
          return `at://${this.host}`;
        }
        get hostname() {
          return this.host;
        }
        set hostname(v) {
          this.host = v;
        }
        get search() {
          return this.searchParams.toString();
        }
        set search(v) {
          this.searchParams = new URLSearchParams(v);
        }
        get collection() {
          return this.pathname.split("/").filter(Boolean)[0] || "";
        }
        set collection(v) {
          const parts = this.pathname.split("/").filter(Boolean);
          parts[0] = v;
          this.pathname = parts.join("/");
        }
        get rkey() {
          return this.pathname.split("/").filter(Boolean)[1] || "";
        }
        set rkey(v) {
          const parts = this.pathname.split("/").filter(Boolean);
          if (!parts[0])
            parts[0] = "undefined";
          parts[1] = v;
          this.pathname = parts.join("/");
        }
        get href() {
          return this.toString();
        }
        toString() {
          let path = this.pathname || "/";
          if (!path.startsWith("/")) {
            path = `/${path}`;
          }
          let qs = this.searchParams.toString();
          if (qs && !qs.startsWith("?")) {
            qs = `?${qs}`;
          }
          let hash2 = this.hash;
          if (hash2 && !hash2.startsWith("#")) {
            hash2 = `#${hash2}`;
          }
          return `at://${this.host}${path}${qs}${hash2}`;
        }
      };
      exports.AtUri = AtUri;
      function parse3(str) {
        const match2 = exports.ATP_URI_REGEX.exec(str);
        if (match2) {
          return {
            hash: match2[5] || "",
            host: match2[2] || "",
            pathname: match2[3] || "",
            searchParams: new URLSearchParams(match2[4] || "")
          };
        }
        return void 0;
      }
      function parseRelative(str) {
        const match2 = RELATIVE_REGEX.exec(str);
        if (match2) {
          return {
            hash: match2[3] || "",
            pathname: match2[1] || "",
            searchParams: new URLSearchParams(match2[2] || "")
          };
        }
        return void 0;
      }
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/tid.js
  var require_tid = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/tid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidTidError = exports.isValidTid = exports.ensureValidTid = void 0;
      var ensureValidTid = (tid) => {
        if (tid.length != 13) {
          throw new InvalidTidError("TID must be 13 characters");
        }
        if (!/^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/.test(tid)) {
          throw new InvalidTidError("TID syntax not valid (regex)");
        }
      };
      exports.ensureValidTid = ensureValidTid;
      var isValidTid = (tid) => {
        try {
          (0, exports.ensureValidTid)(tid);
        } catch (err) {
          if (err instanceof InvalidTidError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidTid = isValidTid;
      var InvalidTidError = class extends Error {
      };
      exports.InvalidTidError = InvalidTidError;
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/recordkey.js
  var require_recordkey = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/recordkey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidRecordKeyError = exports.isValidRecordKey = exports.ensureValidRecordKey = void 0;
      var ensureValidRecordKey = (rkey) => {
        if (rkey.length > 512 || rkey.length < 1) {
          throw new InvalidRecordKeyError("record key must be 1 to 512 characters");
        }
        if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(rkey)) {
          throw new InvalidRecordKeyError("record key syntax not valid (regex)");
        }
        if (rkey == "." || rkey == "..")
          throw new InvalidRecordKeyError('record key can not be "." or ".."');
      };
      exports.ensureValidRecordKey = ensureValidRecordKey;
      var isValidRecordKey = (rkey) => {
        try {
          (0, exports.ensureValidRecordKey)(rkey);
        } catch (err) {
          if (err instanceof InvalidRecordKeyError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidRecordKey = isValidRecordKey;
      var InvalidRecordKeyError = class extends Error {
      };
      exports.InvalidRecordKeyError = InvalidRecordKeyError;
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/datetime.js
  var require_datetime = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/datetime.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidDatetimeError = exports.normalizeDatetimeAlways = exports.normalizeDatetime = exports.isValidDatetime = exports.ensureValidDatetime = void 0;
      var ensureValidDatetime = (dtStr) => {
        const date = new Date(dtStr);
        if (isNaN(date.getTime())) {
          throw new InvalidDatetimeError("datetime did not parse as ISO 8601");
        }
        if (date.toISOString().startsWith("-")) {
          throw new InvalidDatetimeError("datetime normalized to a negative time");
        }
        if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(dtStr)) {
          throw new InvalidDatetimeError("datetime didn't validate via regex");
        }
        if (dtStr.length > 64) {
          throw new InvalidDatetimeError("datetime is too long (64 chars max)");
        }
        if (dtStr.endsWith("-00:00")) {
          throw new InvalidDatetimeError('datetime can not use "-00:00" for UTC timezone');
        }
        if (dtStr.startsWith("000")) {
          throw new InvalidDatetimeError("datetime so close to year zero not allowed");
        }
      };
      exports.ensureValidDatetime = ensureValidDatetime;
      var isValidDatetime = (dtStr) => {
        try {
          (0, exports.ensureValidDatetime)(dtStr);
        } catch (err) {
          if (err instanceof InvalidDatetimeError) {
            return false;
          }
          throw err;
        }
        return true;
      };
      exports.isValidDatetime = isValidDatetime;
      var normalizeDatetime = (dtStr) => {
        if ((0, exports.isValidDatetime)(dtStr)) {
          const outStr = new Date(dtStr).toISOString();
          if ((0, exports.isValidDatetime)(outStr)) {
            return outStr;
          }
        }
        if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(dtStr)) {
          const date2 = /* @__PURE__ */ new Date(dtStr + "Z");
          if (!isNaN(date2.getTime())) {
            const tzStr = date2.toISOString();
            if ((0, exports.isValidDatetime)(tzStr)) {
              return tzStr;
            }
          }
        }
        const date = new Date(dtStr);
        if (isNaN(date.getTime())) {
          throw new InvalidDatetimeError("datetime did not parse as any timestamp format");
        }
        const isoStr = date.toISOString();
        if ((0, exports.isValidDatetime)(isoStr)) {
          return isoStr;
        } else {
          throw new InvalidDatetimeError("datetime normalized to invalid timestamp string");
        }
      };
      exports.normalizeDatetime = normalizeDatetime;
      var normalizeDatetimeAlways = (dtStr) => {
        try {
          return (0, exports.normalizeDatetime)(dtStr);
        } catch (err) {
          if (err instanceof InvalidDatetimeError) {
            return (/* @__PURE__ */ new Date(0)).toISOString();
          }
          throw err;
        }
      };
      exports.normalizeDatetimeAlways = normalizeDatetimeAlways;
      var InvalidDatetimeError = class extends Error {
      };
      exports.InvalidDatetimeError = InvalidDatetimeError;
    }
  });

  // coldsky/node_modules/@atproto/syntax/dist/index.js
  var require_dist = __commonJS({
    "coldsky/node_modules/@atproto/syntax/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_handle(), exports);
      __exportStar(require_did(), exports);
      __exportStar(require_nsid(), exports);
      __exportStar(require_aturi(), exports);
      __exportStar(require_tid(), exports);
      __exportStar(require_recordkey(), exports);
      __exportStar(require_datetime(), exports);
    }
  });

  // coldsky/node_modules/zod/lib/helpers/util.js
  var require_util = __commonJS({
    "coldsky/node_modules/zod/lib/helpers/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
      var util;
      (function(util2) {
        util2.assertEqual = (val) => val;
        function assertIs(_arg) {
        }
        util2.assertIs = assertIs;
        function assertNever(_x) {
          throw new Error();
        }
        util2.assertNever = assertNever;
        util2.arrayToEnum = (items) => {
          const obj = {};
          for (const item of items) {
            obj[item] = item;
          }
          return obj;
        };
        util2.getValidEnumValues = (obj) => {
          const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
          const filtered = {};
          for (const k of validKeys) {
            filtered[k] = obj[k];
          }
          return util2.objectValues(filtered);
        };
        util2.objectValues = (obj) => {
          return util2.objectKeys(obj).map(function(e) {
            return obj[e];
          });
        };
        util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
          const keys = [];
          for (const key in object) {
            if (Object.prototype.hasOwnProperty.call(object, key)) {
              keys.push(key);
            }
          }
          return keys;
        };
        util2.find = (arr, checker) => {
          for (const item of arr) {
            if (checker(item))
              return item;
          }
          return void 0;
        };
        util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
        function joinValues(array, separator = " | ") {
          return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
        }
        util2.joinValues = joinValues;
        util2.jsonStringifyReplacer = (_, value) => {
          if (typeof value === "bigint") {
            return value.toString();
          }
          return value;
        };
      })(util = exports.util || (exports.util = {}));
      var objectUtil;
      (function(objectUtil2) {
        objectUtil2.mergeShapes = (first, second) => {
          return __spreadValues(__spreadValues({}, first), second);
        };
      })(objectUtil = exports.objectUtil || (exports.objectUtil = {}));
      exports.ZodParsedType = util.arrayToEnum([
        "string",
        "nan",
        "number",
        "integer",
        "float",
        "boolean",
        "date",
        "bigint",
        "symbol",
        "function",
        "undefined",
        "null",
        "array",
        "object",
        "unknown",
        "promise",
        "void",
        "never",
        "map",
        "set"
      ]);
      var getParsedType = (data) => {
        const t = typeof data;
        switch (t) {
          case "undefined":
            return exports.ZodParsedType.undefined;
          case "string":
            return exports.ZodParsedType.string;
          case "number":
            return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
          case "boolean":
            return exports.ZodParsedType.boolean;
          case "function":
            return exports.ZodParsedType.function;
          case "bigint":
            return exports.ZodParsedType.bigint;
          case "symbol":
            return exports.ZodParsedType.symbol;
          case "object":
            if (Array.isArray(data)) {
              return exports.ZodParsedType.array;
            }
            if (data === null) {
              return exports.ZodParsedType.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
              return exports.ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
              return exports.ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
              return exports.ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
              return exports.ZodParsedType.date;
            }
            return exports.ZodParsedType.object;
          default:
            return exports.ZodParsedType.unknown;
        }
      };
      exports.getParsedType = getParsedType;
    }
  });

  // coldsky/node_modules/zod/lib/ZodError.js
  var require_ZodError = __commonJS({
    "coldsky/node_modules/zod/lib/ZodError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
      var util_1 = require_util();
      exports.ZodIssueCode = util_1.util.arrayToEnum([
        "invalid_type",
        "invalid_literal",
        "custom",
        "invalid_union",
        "invalid_union_discriminator",
        "invalid_enum_value",
        "unrecognized_keys",
        "invalid_arguments",
        "invalid_return_type",
        "invalid_date",
        "invalid_string",
        "too_small",
        "too_big",
        "invalid_intersection_types",
        "not_multiple_of",
        "not_finite"
      ]);
      var quotelessJson = (obj) => {
        const json2 = JSON.stringify(obj, null, 2);
        return json2.replace(/"([^"]+)":/g, "$1:");
      };
      exports.quotelessJson = quotelessJson;
      var ZodError = class extends Error {
        constructor(issues) {
          super();
          this.issues = [];
          this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
          };
          this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
          };
          const actualProto = new.target.prototype;
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
          } else {
            this.__proto__ = actualProto;
          }
          this.name = "ZodError";
          this.issues = issues;
        }
        get errors() {
          return this.issues;
        }
        format(_mapper) {
          const mapper = _mapper || function(issue) {
            return issue.message;
          };
          const fieldErrors = { _errors: [] };
          const processError = (error) => {
            for (const issue of error.issues) {
              if (issue.code === "invalid_union") {
                issue.unionErrors.map(processError);
              } else if (issue.code === "invalid_return_type") {
                processError(issue.returnTypeError);
              } else if (issue.code === "invalid_arguments") {
                processError(issue.argumentsError);
              } else if (issue.path.length === 0) {
                fieldErrors._errors.push(mapper(issue));
              } else {
                let curr = fieldErrors;
                let i = 0;
                while (i < issue.path.length) {
                  const el = issue.path[i];
                  const terminal = i === issue.path.length - 1;
                  if (!terminal) {
                    curr[el] = curr[el] || { _errors: [] };
                  } else {
                    curr[el] = curr[el] || { _errors: [] };
                    curr[el]._errors.push(mapper(issue));
                  }
                  curr = curr[el];
                  i++;
                }
              }
            }
          };
          processError(this);
          return fieldErrors;
        }
        toString() {
          return this.message;
        }
        get message() {
          return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
        }
        get isEmpty() {
          return this.issues.length === 0;
        }
        flatten(mapper = (issue) => issue.message) {
          const fieldErrors = {};
          const formErrors = [];
          for (const sub of this.issues) {
            if (sub.path.length > 0) {
              fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
              fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
              formErrors.push(mapper(sub));
            }
          }
          return { formErrors, fieldErrors };
        }
        get formErrors() {
          return this.flatten();
        }
      };
      exports.ZodError = ZodError;
      ZodError.create = (issues) => {
        const error = new ZodError(issues);
        return error;
      };
    }
  });

  // coldsky/node_modules/zod/lib/locales/en.js
  var require_en = __commonJS({
    "coldsky/node_modules/zod/lib/locales/en.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util();
      var ZodError_1 = require_ZodError();
      var errorMap = (issue, _ctx) => {
        let message;
        switch (issue.code) {
          case ZodError_1.ZodIssueCode.invalid_type:
            if (issue.received === util_1.ZodParsedType.undefined) {
              message = "Required";
            } else {
              message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
          case ZodError_1.ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
            break;
          case ZodError_1.ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
            break;
          case ZodError_1.ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
          case ZodError_1.ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
            break;
          case ZodError_1.ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
          case ZodError_1.ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
          case ZodError_1.ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
          case ZodError_1.ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
          case ZodError_1.ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
              if ("includes" in issue.validation) {
                message = `Invalid input: must include "${issue.validation.includes}"`;
                if (typeof issue.validation.position === "number") {
                  message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                }
              } else if ("startsWith" in issue.validation) {
                message = `Invalid input: must start with "${issue.validation.startsWith}"`;
              } else if ("endsWith" in issue.validation) {
                message = `Invalid input: must end with "${issue.validation.endsWith}"`;
              } else {
                util_1.util.assertNever(issue.validation);
              }
            } else if (issue.validation !== "regex") {
              message = `Invalid ${issue.validation}`;
            } else {
              message = "Invalid";
            }
            break;
          case ZodError_1.ZodIssueCode.too_small:
            if (issue.type === "array")
              message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
              message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
              message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
              message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else
              message = "Invalid input";
            break;
          case ZodError_1.ZodIssueCode.too_big:
            if (issue.type === "array")
              message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
              message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
              message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
              message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
              message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
              message = "Invalid input";
            break;
          case ZodError_1.ZodIssueCode.custom:
            message = `Invalid input`;
            break;
          case ZodError_1.ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
          case ZodError_1.ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
          case ZodError_1.ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
          default:
            message = _ctx.defaultError;
            util_1.util.assertNever(issue);
        }
        return { message };
      };
      exports.default = errorMap;
    }
  });

  // coldsky/node_modules/zod/lib/errors.js
  var require_errors = __commonJS({
    "coldsky/node_modules/zod/lib/errors.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getErrorMap = exports.setErrorMap = exports.defaultErrorMap = void 0;
      var en_1 = __importDefault(require_en());
      exports.defaultErrorMap = en_1.default;
      var overrideErrorMap = en_1.default;
      function setErrorMap(map) {
        overrideErrorMap = map;
      }
      exports.setErrorMap = setErrorMap;
      function getErrorMap() {
        return overrideErrorMap;
      }
      exports.getErrorMap = getErrorMap;
    }
  });

  // coldsky/node_modules/zod/lib/helpers/parseUtil.js
  var require_parseUtil = __commonJS({
    "coldsky/node_modules/zod/lib/helpers/parseUtil.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
      var errors_1 = require_errors();
      var en_1 = __importDefault(require_en());
      var makeIssue = (params) => {
        const { data, path, errorMaps, issueData } = params;
        const fullPath = [...path, ...issueData.path || []];
        const fullIssue = __spreadProps(__spreadValues({}, issueData), {
          path: fullPath
        });
        let errorMessage = "";
        const maps = errorMaps.filter((m) => !!m).slice().reverse();
        for (const map of maps) {
          errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
        }
        return __spreadProps(__spreadValues({}, issueData), {
          path: fullPath,
          message: issueData.message || errorMessage
        });
      };
      exports.makeIssue = makeIssue;
      exports.EMPTY_PATH = [];
      function addIssueToContext(ctx, issueData) {
        const issue = (0, exports.makeIssue)({
          issueData,
          data: ctx.data,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            (0, errors_1.getErrorMap)(),
            en_1.default
            // then global default map
          ].filter((x) => !!x)
        });
        ctx.common.issues.push(issue);
      }
      exports.addIssueToContext = addIssueToContext;
      var ParseStatus = class _ParseStatus {
        constructor() {
          this.value = "valid";
        }
        dirty() {
          if (this.value === "valid")
            this.value = "dirty";
        }
        abort() {
          if (this.value !== "aborted")
            this.value = "aborted";
        }
        static mergeArray(status, results) {
          const arrayValue = [];
          for (const s of results) {
            if (s.status === "aborted")
              return exports.INVALID;
            if (s.status === "dirty")
              status.dirty();
            arrayValue.push(s.value);
          }
          return { status: status.value, value: arrayValue };
        }
        static mergeObjectAsync(status, pairs) {
          return __async(this, null, function* () {
            const syncPairs = [];
            for (const pair of pairs) {
              syncPairs.push({
                key: yield pair.key,
                value: yield pair.value
              });
            }
            return _ParseStatus.mergeObjectSync(status, syncPairs);
          });
        }
        static mergeObjectSync(status, pairs) {
          const finalObject = {};
          for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
              return exports.INVALID;
            if (value.status === "aborted")
              return exports.INVALID;
            if (key.status === "dirty")
              status.dirty();
            if (value.status === "dirty")
              status.dirty();
            if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
              finalObject[key.value] = value.value;
            }
          }
          return { status: status.value, value: finalObject };
        }
      };
      exports.ParseStatus = ParseStatus;
      exports.INVALID = Object.freeze({
        status: "aborted"
      });
      var DIRTY = (value) => ({ status: "dirty", value });
      exports.DIRTY = DIRTY;
      var OK = (value) => ({ status: "valid", value });
      exports.OK = OK;
      var isAborted = (x) => x.status === "aborted";
      exports.isAborted = isAborted;
      var isDirty = (x) => x.status === "dirty";
      exports.isDirty = isDirty;
      var isValid = (x) => x.status === "valid";
      exports.isValid = isValid;
      var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
      exports.isAsync = isAsync;
    }
  });

  // coldsky/node_modules/zod/lib/helpers/typeAliases.js
  var require_typeAliases = __commonJS({
    "coldsky/node_modules/zod/lib/helpers/typeAliases.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // coldsky/node_modules/zod/lib/helpers/errorUtil.js
  var require_errorUtil = __commonJS({
    "coldsky/node_modules/zod/lib/helpers/errorUtil.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.errorUtil = void 0;
      var errorUtil;
      (function(errorUtil2) {
        errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
        errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
      })(errorUtil = exports.errorUtil || (exports.errorUtil = {}));
    }
  });

  // coldsky/node_modules/zod/lib/types.js
  var require_types = __commonJS({
    "coldsky/node_modules/zod/lib/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.date = exports.boolean = exports.bigint = exports.array = exports.any = exports.coerce = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodReadonly = exports.ZodPipeline = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodCatch = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodSymbol = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.ZodType = void 0;
      exports.NEVER = exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.symbol = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.pipeline = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = exports.function = exports.enum = exports.effect = exports.discriminatedUnion = void 0;
      var errors_1 = require_errors();
      var errorUtil_1 = require_errorUtil();
      var parseUtil_1 = require_parseUtil();
      var util_1 = require_util();
      var ZodError_1 = require_ZodError();
      var ParseInputLazyPath = class {
        constructor(parent, value, path, key) {
          this._cachedPath = [];
          this.parent = parent;
          this.data = value;
          this._path = path;
          this._key = key;
        }
        get path() {
          if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
              this._cachedPath.push(...this._path, ...this._key);
            } else {
              this._cachedPath.push(...this._path, this._key);
            }
          }
          return this._cachedPath;
        }
      };
      var handleResult = (ctx, result) => {
        if ((0, parseUtil_1.isValid)(result)) {
          return { success: true, data: result.value };
        } else {
          if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
          }
          return {
            success: false,
            get error() {
              if (this._error)
                return this._error;
              const error = new ZodError_1.ZodError(ctx.common.issues);
              this._error = error;
              return this._error;
            }
          };
        }
      };
      function processCreateParams(params) {
        if (!params)
          return {};
        const { errorMap, invalid_type_error, required_error, description } = params;
        if (errorMap && (invalid_type_error || required_error)) {
          throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
        }
        if (errorMap)
          return { errorMap, description };
        const customMap = (iss, ctx) => {
          if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
          if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
          }
          return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
        };
        return { errorMap: customMap, description };
      }
      var ZodType = class {
        constructor(def) {
          this.spa = this.safeParseAsync;
          this._def = def;
          this.parse = this.parse.bind(this);
          this.safeParse = this.safeParse.bind(this);
          this.parseAsync = this.parseAsync.bind(this);
          this.safeParseAsync = this.safeParseAsync.bind(this);
          this.spa = this.spa.bind(this);
          this.refine = this.refine.bind(this);
          this.refinement = this.refinement.bind(this);
          this.superRefine = this.superRefine.bind(this);
          this.optional = this.optional.bind(this);
          this.nullable = this.nullable.bind(this);
          this.nullish = this.nullish.bind(this);
          this.array = this.array.bind(this);
          this.promise = this.promise.bind(this);
          this.or = this.or.bind(this);
          this.and = this.and.bind(this);
          this.transform = this.transform.bind(this);
          this.brand = this.brand.bind(this);
          this.default = this.default.bind(this);
          this.catch = this.catch.bind(this);
          this.describe = this.describe.bind(this);
          this.pipe = this.pipe.bind(this);
          this.readonly = this.readonly.bind(this);
          this.isNullable = this.isNullable.bind(this);
          this.isOptional = this.isOptional.bind(this);
        }
        get description() {
          return this._def.description;
        }
        _getType(input) {
          return (0, util_1.getParsedType)(input.data);
        }
        _getOrReturnCtx(input, ctx) {
          return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: (0, util_1.getParsedType)(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          };
        }
        _processInputParams(input) {
          return {
            status: new parseUtil_1.ParseStatus(),
            ctx: {
              common: input.parent.common,
              data: input.data,
              parsedType: (0, util_1.getParsedType)(input.data),
              schemaErrorMap: this._def.errorMap,
              path: input.path,
              parent: input.parent
            }
          };
        }
        _parseSync(input) {
          const result = this._parse(input);
          if ((0, parseUtil_1.isAsync)(result)) {
            throw new Error("Synchronous parse encountered promise.");
          }
          return result;
        }
        _parseAsync(input) {
          const result = this._parse(input);
          return Promise.resolve(result);
        }
        parse(data, params) {
          const result = this.safeParse(data, params);
          if (result.success)
            return result.data;
          throw result.error;
        }
        safeParse(data, params) {
          var _a3;
          const ctx = {
            common: {
              issues: [],
              async: (_a3 = params === null || params === void 0 ? void 0 : params.async) !== null && _a3 !== void 0 ? _a3 : false,
              contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: (0, util_1.getParsedType)(data)
          };
          const result = this._parseSync({ data, path: ctx.path, parent: ctx });
          return handleResult(ctx, result);
        }
        parseAsync(data, params) {
          return __async(this, null, function* () {
            const result = yield this.safeParseAsync(data, params);
            if (result.success)
              return result.data;
            throw result.error;
          });
        }
        safeParseAsync(data, params) {
          return __async(this, null, function* () {
            const ctx = {
              common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true
              },
              path: (params === null || params === void 0 ? void 0 : params.path) || [],
              schemaErrorMap: this._def.errorMap,
              parent: null,
              data,
              parsedType: (0, util_1.getParsedType)(data)
            };
            const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
            const result = yield (0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult);
            return handleResult(ctx, result);
          });
        }
        refine(check, message) {
          const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
              return { message };
            } else if (typeof message === "function") {
              return message(val);
            } else {
              return message;
            }
          };
          return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue(__spreadValues({
              code: ZodError_1.ZodIssueCode.custom
            }, getIssueProperties(val)));
            if (typeof Promise !== "undefined" && result instanceof Promise) {
              return result.then((data) => {
                if (!data) {
                  setError();
                  return false;
                } else {
                  return true;
                }
              });
            }
            if (!result) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        refinement(check, refinementData) {
          return this._refinement((val, ctx) => {
            if (!check(val)) {
              ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
              return false;
            } else {
              return true;
            }
          });
        }
        _refinement(refinement) {
          return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement }
          });
        }
        superRefine(refinement) {
          return this._refinement(refinement);
        }
        optional() {
          return ZodOptional.create(this, this._def);
        }
        nullable() {
          return ZodNullable.create(this, this._def);
        }
        nullish() {
          return this.nullable().optional();
        }
        array() {
          return ZodArray.create(this, this._def);
        }
        promise() {
          return ZodPromise.create(this, this._def);
        }
        or(option) {
          return ZodUnion.create([this, option], this._def);
        }
        and(incoming) {
          return ZodIntersection.create(this, incoming, this._def);
        }
        transform(transform) {
          return new ZodEffects(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform }
          }));
        }
        default(def) {
          const defaultValueFunc = typeof def === "function" ? def : () => def;
          return new ZodDefault(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
          }));
        }
        brand() {
          return new ZodBranded(__spreadValues({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this
          }, processCreateParams(this._def)));
        }
        catch(def) {
          const catchValueFunc = typeof def === "function" ? def : () => def;
          return new ZodCatch(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch
          }));
        }
        describe(description) {
          const This = this.constructor;
          return new This(__spreadProps(__spreadValues({}, this._def), {
            description
          }));
        }
        pipe(target2) {
          return ZodPipeline.create(this, target2);
        }
        readonly() {
          return ZodReadonly.create(this);
        }
        isOptional() {
          return this.safeParse(void 0).success;
        }
        isNullable() {
          return this.safeParse(null).success;
        }
      };
      exports.ZodType = ZodType;
      exports.Schema = ZodType;
      exports.ZodSchema = ZodType;
      var cuidRegex = /^c[^\s-]{8,}$/i;
      var cuid2Regex = /^[a-z][a-z0-9]*$/;
      var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
      var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
      var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
      var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
      var emojiRegex;
      var ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
      var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
      var datetimeRegex = (args) => {
        if (args.precision) {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
          }
        } else if (args.precision === 0) {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
          }
        } else {
          if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
          } else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
          }
        }
      };
      function isValidIP(ip, version5) {
        if ((version5 === "v4" || !version5) && ipv4Regex.test(ip)) {
          return true;
        }
        if ((version5 === "v6" || !version5) && ipv6Regex.test(ip)) {
          return true;
        }
        return false;
      }
      var ZodString = class _ZodString extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = String(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.string) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(
              ctx2,
              {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: util_1.ZodParsedType.string,
                received: ctx2.parsedType
              }
              //
            );
            return parseUtil_1.INVALID;
          }
          const status = new parseUtil_1.ParseStatus();
          let ctx = void 0;
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              if (input.data.length < check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              if (input.data.length > check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "length") {
              const tooBig = input.data.length > check.value;
              const tooSmall = input.data.length < check.value;
              if (tooBig || tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                if (tooBig) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.too_big,
                    maximum: check.value,
                    type: "string",
                    inclusive: true,
                    exact: true,
                    message: check.message
                  });
                } else if (tooSmall) {
                  (0, parseUtil_1.addIssueToContext)(ctx, {
                    code: ZodError_1.ZodIssueCode.too_small,
                    minimum: check.value,
                    type: "string",
                    inclusive: true,
                    exact: true,
                    message: check.message
                  });
                }
                status.dirty();
              }
            } else if (check.kind === "email") {
              if (!emailRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "email",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "emoji") {
              if (!emojiRegex) {
                emojiRegex = new RegExp(_emojiRegex, "u");
              }
              if (!emojiRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "emoji",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "uuid") {
              if (!uuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "uuid",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "cuid") {
              if (!cuidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "cuid",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "cuid2") {
              if (!cuid2Regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "cuid2",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "ulid") {
              if (!ulidRegex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "ulid",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "url") {
              try {
                new URL(input.data);
              } catch (_a3) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "url",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "regex") {
              check.regex.lastIndex = 0;
              const testResult = check.regex.test(input.data);
              if (!testResult) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "regex",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "trim") {
              input.data = input.data.trim();
            } else if (check.kind === "includes") {
              if (!input.data.includes(check.value, check.position)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  validation: { includes: check.value, position: check.position },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "toLowerCase") {
              input.data = input.data.toLowerCase();
            } else if (check.kind === "toUpperCase") {
              input.data = input.data.toUpperCase();
            } else if (check.kind === "startsWith") {
              if (!input.data.startsWith(check.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  validation: { startsWith: check.value },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "endsWith") {
              if (!input.data.endsWith(check.value)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  validation: { endsWith: check.value },
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "datetime") {
              const regex = datetimeRegex(check);
              if (!regex.test(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  validation: "datetime",
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "ip") {
              if (!isValidIP(input.data, check.version)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  validation: "ip",
                  code: ZodError_1.ZodIssueCode.invalid_string,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util_1.util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        _regex(regex, validation, message) {
          return this.refinement((data) => regex.test(data), __spreadValues({
            validation,
            code: ZodError_1.ZodIssueCode.invalid_string
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        _addCheck(check) {
          return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, check]
          }));
        }
        email(message) {
          return this._addCheck(__spreadValues({ kind: "email" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        url(message) {
          return this._addCheck(__spreadValues({ kind: "url" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        emoji(message) {
          return this._addCheck(__spreadValues({ kind: "emoji" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        uuid(message) {
          return this._addCheck(__spreadValues({ kind: "uuid" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        cuid(message) {
          return this._addCheck(__spreadValues({ kind: "cuid" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        cuid2(message) {
          return this._addCheck(__spreadValues({ kind: "cuid2" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        ulid(message) {
          return this._addCheck(__spreadValues({ kind: "ulid" }, errorUtil_1.errorUtil.errToObj(message)));
        }
        ip(options) {
          return this._addCheck(__spreadValues({ kind: "ip" }, errorUtil_1.errorUtil.errToObj(options)));
        }
        datetime(options) {
          var _a3;
          if (typeof options === "string") {
            return this._addCheck({
              kind: "datetime",
              precision: null,
              offset: false,
              message: options
            });
          }
          return this._addCheck(__spreadValues({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a3 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a3 !== void 0 ? _a3 : false
          }, errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)));
        }
        regex(regex, message) {
          return this._addCheck(__spreadValues({
            kind: "regex",
            regex
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        includes(value, options) {
          return this._addCheck(__spreadValues({
            kind: "includes",
            value,
            position: options === null || options === void 0 ? void 0 : options.position
          }, errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)));
        }
        startsWith(value, message) {
          return this._addCheck(__spreadValues({
            kind: "startsWith",
            value
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        endsWith(value, message) {
          return this._addCheck(__spreadValues({
            kind: "endsWith",
            value
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        min(minLength, message) {
          return this._addCheck(__spreadValues({
            kind: "min",
            value: minLength
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        max(maxLength, message) {
          return this._addCheck(__spreadValues({
            kind: "max",
            value: maxLength
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        length(len, message) {
          return this._addCheck(__spreadValues({
            kind: "length",
            value: len
          }, errorUtil_1.errorUtil.errToObj(message)));
        }
        /**
         * @deprecated Use z.string().min(1) instead.
         * @see {@link ZodString.min}
         */
        nonempty(message) {
          return this.min(1, errorUtil_1.errorUtil.errToObj(message));
        }
        trim() {
          return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, { kind: "trim" }]
          }));
        }
        toLowerCase() {
          return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, { kind: "toLowerCase" }]
          }));
        }
        toUpperCase() {
          return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, { kind: "toUpperCase" }]
          }));
        }
        get isDatetime() {
          return !!this._def.checks.find((ch) => ch.kind === "datetime");
        }
        get isEmail() {
          return !!this._def.checks.find((ch) => ch.kind === "email");
        }
        get isURL() {
          return !!this._def.checks.find((ch) => ch.kind === "url");
        }
        get isEmoji() {
          return !!this._def.checks.find((ch) => ch.kind === "emoji");
        }
        get isUUID() {
          return !!this._def.checks.find((ch) => ch.kind === "uuid");
        }
        get isCUID() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid");
        }
        get isCUID2() {
          return !!this._def.checks.find((ch) => ch.kind === "cuid2");
        }
        get isULID() {
          return !!this._def.checks.find((ch) => ch.kind === "ulid");
        }
        get isIP() {
          return !!this._def.checks.find((ch) => ch.kind === "ip");
        }
        get minLength() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxLength() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      exports.ZodString = ZodString;
      ZodString.create = (params) => {
        var _a3;
        return new ZodString(__spreadValues({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodString,
          coerce: (_a3 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a3 !== void 0 ? _a3 : false
        }, processCreateParams(params)));
      };
      function floatSafeRemainder(val, step) {
        const valDecCount = (val.toString().split(".")[1] || "").length;
        const stepDecCount = (step.toString().split(".")[1] || "").length;
        const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
        const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
        const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
        return valInt % stepInt / Math.pow(10, decCount);
      }
      var ZodNumber = class _ZodNumber extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
          this.step = this.multipleOf;
        }
        _parse(input) {
          if (this._def.coerce) {
            input.data = Number(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.number) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.number,
              received: ctx2.parsedType
            });
            return parseUtil_1.INVALID;
          }
          let ctx = void 0;
          const status = new parseUtil_1.ParseStatus();
          for (const check of this._def.checks) {
            if (check.kind === "int") {
              if (!util_1.util.isInteger(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.invalid_type,
                  expected: "integer",
                  received: "float",
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "min") {
              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "number",
                  inclusive: check.inclusive,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "number",
                  inclusive: check.inclusive,
                  exact: false,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "multipleOf") {
              if (floatSafeRemainder(input.data, check.value) !== 0) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.not_multiple_of,
                  multipleOf: check.value,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "finite") {
              if (!Number.isFinite(input.data)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.not_finite,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util_1.util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        gte(value, message) {
          return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
        }
        gt(value, message) {
          return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
        }
        lte(value, message) {
          return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
        }
        lt(value, message) {
          return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
          return new _ZodNumber(__spreadProps(__spreadValues({}, this._def), {
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil_1.errorUtil.toString(message)
              }
            ]
          }));
        }
        _addCheck(check) {
          return new _ZodNumber(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, check]
          }));
        }
        int(message) {
          return this._addCheck({
            kind: "int",
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        positive(message) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        negative(message) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        nonpositive(message) {
          return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        nonnegative(message) {
          return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        multipleOf(value, message) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        finite(message) {
          return this._addCheck({
            kind: "finite",
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        safe(message) {
          return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil_1.errorUtil.toString(message)
          })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
        get isInt() {
          return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
        }
        get isFinite() {
          let max = null, min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
              return true;
            } else if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            } else if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return Number.isFinite(min) && Number.isFinite(max);
        }
      };
      exports.ZodNumber = ZodNumber;
      ZodNumber.create = (params) => {
        return new ZodNumber(__spreadValues({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodNumber,
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false
        }, processCreateParams(params)));
      };
      var ZodBigInt = class _ZodBigInt extends ZodType {
        constructor() {
          super(...arguments);
          this.min = this.gte;
          this.max = this.lte;
        }
        _parse(input) {
          if (this._def.coerce) {
            input.data = BigInt(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.bigint) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.bigint,
              received: ctx2.parsedType
            });
            return parseUtil_1.INVALID;
          }
          let ctx = void 0;
          const status = new parseUtil_1.ParseStatus();
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
              if (tooSmall) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  type: "bigint",
                  minimum: check.value,
                  inclusive: check.inclusive,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
              if (tooBig) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  type: "bigint",
                  maximum: check.value,
                  inclusive: check.inclusive,
                  message: check.message
                });
                status.dirty();
              }
            } else if (check.kind === "multipleOf") {
              if (input.data % check.value !== BigInt(0)) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.not_multiple_of,
                  multipleOf: check.value,
                  message: check.message
                });
                status.dirty();
              }
            } else {
              util_1.util.assertNever(check);
            }
          }
          return { status: status.value, value: input.data };
        }
        gte(value, message) {
          return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
        }
        gt(value, message) {
          return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
        }
        lte(value, message) {
          return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
        }
        lt(value, message) {
          return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
          return new _ZodBigInt(__spreadProps(__spreadValues({}, this._def), {
            checks: [
              ...this._def.checks,
              {
                kind,
                value,
                inclusive,
                message: errorUtil_1.errorUtil.toString(message)
              }
            ]
          }));
        }
        _addCheck(check) {
          return new _ZodBigInt(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, check]
          }));
        }
        positive(message) {
          return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        negative(message) {
          return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        nonpositive(message) {
          return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        nonnegative(message) {
          return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        multipleOf(value, message) {
          return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        get minValue() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min;
        }
        get maxValue() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max;
        }
      };
      exports.ZodBigInt = ZodBigInt;
      ZodBigInt.create = (params) => {
        var _a3;
        return new ZodBigInt(__spreadValues({
          checks: [],
          typeName: ZodFirstPartyTypeKind.ZodBigInt,
          coerce: (_a3 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a3 !== void 0 ? _a3 : false
        }, processCreateParams(params)));
      };
      var ZodBoolean = class extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = Boolean(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.boolean,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodBoolean = ZodBoolean;
      ZodBoolean.create = (params) => {
        return new ZodBoolean(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodBoolean,
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false
        }, processCreateParams(params)));
      };
      var ZodDate = class _ZodDate extends ZodType {
        _parse(input) {
          if (this._def.coerce) {
            input.data = new Date(input.data);
          }
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.date) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.date,
              received: ctx2.parsedType
            });
            return parseUtil_1.INVALID;
          }
          if (isNaN(input.data.getTime())) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_date
            });
            return parseUtil_1.INVALID;
          }
          const status = new parseUtil_1.ParseStatus();
          let ctx = void 0;
          for (const check of this._def.checks) {
            if (check.kind === "min") {
              if (input.data.getTime() < check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  message: check.message,
                  inclusive: true,
                  exact: false,
                  minimum: check.value,
                  type: "date"
                });
                status.dirty();
              }
            } else if (check.kind === "max") {
              if (input.data.getTime() > check.value) {
                ctx = this._getOrReturnCtx(input, ctx);
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  message: check.message,
                  inclusive: true,
                  exact: false,
                  maximum: check.value,
                  type: "date"
                });
                status.dirty();
              }
            } else {
              util_1.util.assertNever(check);
            }
          }
          return {
            status: status.value,
            value: new Date(input.data.getTime())
          };
        }
        _addCheck(check) {
          return new _ZodDate(__spreadProps(__spreadValues({}, this._def), {
            checks: [...this._def.checks, check]
          }));
        }
        min(minDate, message) {
          return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        max(maxDate, message) {
          return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil_1.errorUtil.toString(message)
          });
        }
        get minDate() {
          let min = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "min") {
              if (min === null || ch.value > min)
                min = ch.value;
            }
          }
          return min != null ? new Date(min) : null;
        }
        get maxDate() {
          let max = null;
          for (const ch of this._def.checks) {
            if (ch.kind === "max") {
              if (max === null || ch.value < max)
                max = ch.value;
            }
          }
          return max != null ? new Date(max) : null;
        }
      };
      exports.ZodDate = ZodDate;
      ZodDate.create = (params) => {
        return new ZodDate(__spreadValues({
          checks: [],
          coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
          typeName: ZodFirstPartyTypeKind.ZodDate
        }, processCreateParams(params)));
      };
      var ZodSymbol = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.symbol,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodSymbol = ZodSymbol;
      ZodSymbol.create = (params) => {
        return new ZodSymbol(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodSymbol
        }, processCreateParams(params)));
      };
      var ZodUndefined = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.undefined,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodUndefined = ZodUndefined;
      ZodUndefined.create = (params) => {
        return new ZodUndefined(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodUndefined
        }, processCreateParams(params)));
      };
      var ZodNull = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.null,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodNull = ZodNull;
      ZodNull.create = (params) => {
        return new ZodNull(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodNull
        }, processCreateParams(params)));
      };
      var ZodAny = class extends ZodType {
        constructor() {
          super(...arguments);
          this._any = true;
        }
        _parse(input) {
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodAny = ZodAny;
      ZodAny.create = (params) => {
        return new ZodAny(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodAny
        }, processCreateParams(params)));
      };
      var ZodUnknown = class extends ZodType {
        constructor() {
          super(...arguments);
          this._unknown = true;
        }
        _parse(input) {
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodUnknown = ZodUnknown;
      ZodUnknown.create = (params) => {
        return new ZodUnknown(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodUnknown
        }, processCreateParams(params)));
      };
      var ZodNever = class extends ZodType {
        _parse(input) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.never,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
      };
      exports.ZodNever = ZodNever;
      ZodNever.create = (params) => {
        return new ZodNever(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodNever
        }, processCreateParams(params)));
      };
      var ZodVoid = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.void,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
      };
      exports.ZodVoid = ZodVoid;
      ZodVoid.create = (params) => {
        return new ZodVoid(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodVoid
        }, processCreateParams(params)));
      };
      var ZodArray = class _ZodArray extends ZodType {
        _parse(input) {
          const { ctx, status } = this._processInputParams(input);
          const def = this._def;
          if (ctx.parsedType !== util_1.ZodParsedType.array) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.array,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
                minimum: tooSmall ? def.exactLength.value : void 0,
                maximum: tooBig ? def.exactLength.value : void 0,
                type: "array",
                inclusive: true,
                exact: true,
                message: def.exactLength.message
              });
              status.dirty();
            }
          }
          if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: def.minLength.value,
                type: "array",
                inclusive: true,
                exact: false,
                message: def.minLength.message
              });
              status.dirty();
            }
          }
          if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: def.maxLength.value,
                type: "array",
                inclusive: true,
                exact: false,
                message: def.maxLength.message
              });
              status.dirty();
            }
          }
          if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
              return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result2) => {
              return parseUtil_1.ParseStatus.mergeArray(status, result2);
            });
          }
          const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          });
          return parseUtil_1.ParseStatus.mergeArray(status, result);
        }
        get element() {
          return this._def.type;
        }
        min(minLength, message) {
          return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
            minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        max(maxLength, message) {
          return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
            maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        length(len, message) {
          return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
            exactLength: { value: len, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        nonempty(message) {
          return this.min(1, message);
        }
      };
      exports.ZodArray = ZodArray;
      ZodArray.create = (schema, params) => {
        return new ZodArray(__spreadValues({
          type: schema,
          minLength: null,
          maxLength: null,
          exactLength: null,
          typeName: ZodFirstPartyTypeKind.ZodArray
        }, processCreateParams(params)));
      };
      function deepPartialify(schema) {
        if (schema instanceof ZodObject) {
          const newShape = {};
          for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
          }
          return new ZodObject(__spreadProps(__spreadValues({}, schema._def), {
            shape: () => newShape
          }));
        } else if (schema instanceof ZodArray) {
          return new ZodArray(__spreadProps(__spreadValues({}, schema._def), {
            type: deepPartialify(schema.element)
          }));
        } else if (schema instanceof ZodOptional) {
          return ZodOptional.create(deepPartialify(schema.unwrap()));
        } else if (schema instanceof ZodNullable) {
          return ZodNullable.create(deepPartialify(schema.unwrap()));
        } else if (schema instanceof ZodTuple) {
          return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
        } else {
          return schema;
        }
      }
      var ZodObject = class _ZodObject extends ZodType {
        constructor() {
          super(...arguments);
          this._cached = null;
          this.nonstrict = this.passthrough;
          this.augment = this.extend;
        }
        _getCached() {
          if (this._cached !== null)
            return this._cached;
          const shape2 = this._def.shape();
          const keys = util_1.util.objectKeys(shape2);
          return this._cached = { shape: shape2, keys };
        }
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.object) {
            const ctx2 = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx2, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.object,
              received: ctx2.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const { status, ctx } = this._processInputParams(input);
          const { shape: shape2, keys: shapeKeys } = this._getCached();
          const extraKeys = [];
          if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
              if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
              }
            }
          }
          const pairs = [];
          for (const key of shapeKeys) {
            const keyValidator = shape2[key];
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
              alwaysSet: key in ctx.data
            });
          }
          if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
              for (const key of extraKeys) {
                pairs.push({
                  key: { status: "valid", value: key },
                  value: { status: "valid", value: ctx.data[key] }
                });
              }
            } else if (unknownKeys === "strict") {
              if (extraKeys.length > 0) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.unrecognized_keys,
                  keys: extraKeys
                });
                status.dirty();
              }
            } else if (unknownKeys === "strip") {
            } else {
              throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
          } else {
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
              const value = ctx.data[key];
              pairs.push({
                key: { status: "valid", value: key },
                value: catchall._parse(
                  new ParseInputLazyPath(ctx, value, ctx.path, key)
                  //, ctx.child(key), value, getParsedType(value)
                ),
                alwaysSet: key in ctx.data
              });
            }
          }
          if (ctx.common.async) {
            return Promise.resolve().then(() => __async(this, null, function* () {
              const syncPairs = [];
              for (const pair of pairs) {
                const key = yield pair.key;
                syncPairs.push({
                  key,
                  value: yield pair.value,
                  alwaysSet: pair.alwaysSet
                });
              }
              return syncPairs;
            })).then((syncPairs) => {
              return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
            });
          } else {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get shape() {
          return this._def.shape();
        }
        strict(message) {
          errorUtil_1.errorUtil.errToObj;
          return new _ZodObject(__spreadValues(__spreadProps(__spreadValues({}, this._def), {
            unknownKeys: "strict"
          }), message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a3, _b, _c, _d;
              const defaultError = (_c = (_b = (_a3 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a3, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}));
        }
        strip() {
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            unknownKeys: "strip"
          }));
        }
        passthrough() {
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            unknownKeys: "passthrough"
          }));
        }
        // const AugmentFactory =
        //   <Def extends ZodObjectDef>(def: Def) =>
        //   <Augmentation extends ZodRawShape>(
        //     augmentation: Augmentation
        //   ): ZodObject<
        //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
        //     Def["unknownKeys"],
        //     Def["catchall"]
        //   > => {
        //     return new ZodObject({
        //       ...def,
        //       shape: () => ({
        //         ...def.shape(),
        //         ...augmentation,
        //       }),
        //     }) as any;
        //   };
        extend(augmentation) {
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => __spreadValues(__spreadValues({}, this._def.shape()), augmentation)
          }));
        }
        /**
         * Prior to zod@1.0.12 there was a bug in the
         * inferred type of merged objects. Please
         * upgrade if you are experiencing issues.
         */
        merge(merging) {
          const merged = new _ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => __spreadValues(__spreadValues({}, this._def.shape()), merging._def.shape()),
            typeName: ZodFirstPartyTypeKind.ZodObject
          });
          return merged;
        }
        // merge<
        //   Incoming extends AnyZodObject,
        //   Augmentation extends Incoming["shape"],
        //   NewOutput extends {
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   },
        //   NewInput extends {
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }
        // >(
        //   merging: Incoming
        // ): ZodObject<
        //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
        //   Incoming["_def"]["unknownKeys"],
        //   Incoming["_def"]["catchall"],
        //   NewOutput,
        //   NewInput
        // > {
        //   const merged: any = new ZodObject({
        //     unknownKeys: merging._def.unknownKeys,
        //     catchall: merging._def.catchall,
        //     shape: () =>
        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
        //     typeName: ZodFirstPartyTypeKind.ZodObject,
        //   }) as any;
        //   return merged;
        // }
        setKey(key, schema) {
          return this.augment({ [key]: schema });
        }
        // merge<Incoming extends AnyZodObject>(
        //   merging: Incoming
        // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
        // ZodObject<
        //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
        //   Incoming["_def"]["unknownKeys"],
        //   Incoming["_def"]["catchall"]
        // > {
        //   // const mergedShape = objectUtil.mergeShapes(
        //   //   this._def.shape(),
        //   //   merging._def.shape()
        //   // );
        //   const merged: any = new ZodObject({
        //     unknownKeys: merging._def.unknownKeys,
        //     catchall: merging._def.catchall,
        //     shape: () =>
        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
        //     typeName: ZodFirstPartyTypeKind.ZodObject,
        //   }) as any;
        //   return merged;
        // }
        catchall(index) {
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            catchall: index
          }));
        }
        pick(mask) {
          const shape2 = {};
          util_1.util.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
              shape2[key] = this.shape[key];
            }
          });
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => shape2
          }));
        }
        omit(mask) {
          const shape2 = {};
          util_1.util.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
              shape2[key] = this.shape[key];
            }
          });
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => shape2
          }));
        }
        /**
         * @deprecated
         */
        deepPartial() {
          return deepPartialify(this);
        }
        partial(mask) {
          const newShape = {};
          util_1.util.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
              newShape[key] = fieldSchema;
            } else {
              newShape[key] = fieldSchema.optional();
            }
          });
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => newShape
          }));
        }
        required(mask) {
          const newShape = {};
          util_1.util.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
              newShape[key] = this.shape[key];
            } else {
              const fieldSchema = this.shape[key];
              let newField = fieldSchema;
              while (newField instanceof ZodOptional) {
                newField = newField._def.innerType;
              }
              newShape[key] = newField;
            }
          });
          return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
            shape: () => newShape
          }));
        }
        keyof() {
          return createZodEnum(util_1.util.objectKeys(this.shape));
        }
      };
      exports.ZodObject = ZodObject;
      ZodObject.create = (shape2, params) => {
        return new ZodObject(__spreadValues({
          shape: () => shape2,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject
        }, processCreateParams(params)));
      };
      ZodObject.strictCreate = (shape2, params) => {
        return new ZodObject(__spreadValues({
          shape: () => shape2,
          unknownKeys: "strict",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject
        }, processCreateParams(params)));
      };
      ZodObject.lazycreate = (shape2, params) => {
        return new ZodObject(__spreadValues({
          shape: shape2,
          unknownKeys: "strip",
          catchall: ZodNever.create(),
          typeName: ZodFirstPartyTypeKind.ZodObject
        }, processCreateParams(params)));
      };
      var ZodUnion = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const options = this._def.options;
          function handleResults(results) {
            for (const result of results) {
              if (result.result.status === "valid") {
                return result.result;
              }
            }
            for (const result of results) {
              if (result.result.status === "dirty") {
                ctx.common.issues.push(...result.ctx.common.issues);
                return result.result;
              }
            }
            const unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_union,
              unionErrors
            });
            return parseUtil_1.INVALID;
          }
          if (ctx.common.async) {
            return Promise.all(options.map((option) => __async(this, null, function* () {
              const childCtx = __spreadProps(__spreadValues({}, ctx), {
                common: __spreadProps(__spreadValues({}, ctx.common), {
                  issues: []
                }),
                parent: null
              });
              return {
                result: yield option._parseAsync({
                  data: ctx.data,
                  path: ctx.path,
                  parent: childCtx
                }),
                ctx: childCtx
              };
            }))).then(handleResults);
          } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options) {
              const childCtx = __spreadProps(__spreadValues({}, ctx), {
                common: __spreadProps(__spreadValues({}, ctx.common), {
                  issues: []
                }),
                parent: null
              });
              const result = option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              });
              if (result.status === "valid") {
                return result;
              } else if (result.status === "dirty" && !dirty) {
                dirty = { result, ctx: childCtx };
              }
              if (childCtx.common.issues.length) {
                issues.push(childCtx.common.issues);
              }
            }
            if (dirty) {
              ctx.common.issues.push(...dirty.ctx.common.issues);
              return dirty.result;
            }
            const unionErrors = issues.map((issues2) => new ZodError_1.ZodError(issues2));
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_union,
              unionErrors
            });
            return parseUtil_1.INVALID;
          }
        }
        get options() {
          return this._def.options;
        }
      };
      exports.ZodUnion = ZodUnion;
      ZodUnion.create = (types, params) => {
        return new ZodUnion(__spreadValues({
          options: types,
          typeName: ZodFirstPartyTypeKind.ZodUnion
        }, processCreateParams(params)));
      };
      var getDiscriminator = (type) => {
        if (type instanceof ZodLazy) {
          return getDiscriminator(type.schema);
        } else if (type instanceof ZodEffects) {
          return getDiscriminator(type.innerType());
        } else if (type instanceof ZodLiteral) {
          return [type.value];
        } else if (type instanceof ZodEnum) {
          return type.options;
        } else if (type instanceof ZodNativeEnum) {
          return Object.keys(type.enum);
        } else if (type instanceof ZodDefault) {
          return getDiscriminator(type._def.innerType);
        } else if (type instanceof ZodUndefined) {
          return [void 0];
        } else if (type instanceof ZodNull) {
          return [null];
        } else {
          return null;
        }
      };
      var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.object) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.object,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const discriminator = this.discriminator;
          const discriminatorValue = ctx.data[discriminator];
          const option = this.optionsMap.get(discriminatorValue);
          if (!option) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
              options: Array.from(this.optionsMap.keys()),
              path: [discriminator]
            });
            return parseUtil_1.INVALID;
          }
          if (ctx.common.async) {
            return option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          } else {
            return option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
          }
        }
        get discriminator() {
          return this._def.discriminator;
        }
        get options() {
          return this._def.options;
        }
        get optionsMap() {
          return this._def.optionsMap;
        }
        /**
         * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
         * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
         * have a different value for each object in the union.
         * @param discriminator the name of the discriminator property
         * @param types an array of object schemas
         * @param params
         */
        static create(discriminator, options, params) {
          const optionsMap = /* @__PURE__ */ new Map();
          for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) {
              throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
              if (optionsMap.has(value)) {
                throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
              }
              optionsMap.set(value, type);
            }
          }
          return new _ZodDiscriminatedUnion(__spreadValues({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap
          }, processCreateParams(params)));
        }
      };
      exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
      function mergeValues(a, b) {
        const aType = (0, util_1.getParsedType)(a);
        const bType = (0, util_1.getParsedType)(b);
        if (a === b) {
          return { valid: true, data: a };
        } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
          const bKeys = util_1.util.objectKeys(b);
          const sharedKeys = util_1.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
          const newObj = __spreadValues(__spreadValues({}, a), b);
          for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
              return { valid: false };
            }
            newObj[key] = sharedValue.data;
          }
          return { valid: true, data: newObj };
        } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
          if (a.length !== b.length) {
            return { valid: false };
          }
          const newArray = [];
          for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
              return { valid: false };
            }
            newArray.push(sharedValue.data);
          }
          return { valid: true, data: newArray };
        } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a === +b) {
          return { valid: true, data: a };
        } else {
          return { valid: false };
        }
      }
      var ZodIntersection = class extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const handleParsed = (parsedLeft, parsedRight) => {
            if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
              return parseUtil_1.INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_intersection_types
              });
              return parseUtil_1.INVALID;
            }
            if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
              status.dirty();
            }
            return { status: status.value, value: merged.data };
          };
          if (ctx.common.async) {
            return Promise.all([
              this._def.left._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              }),
              this._def.right._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              })
            ]).then(([left, right]) => handleParsed(left, right));
          } else {
            return handleParsed(this._def.left._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }), this._def.right._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }));
          }
        }
      };
      exports.ZodIntersection = ZodIntersection;
      ZodIntersection.create = (left, right, params) => {
        return new ZodIntersection(__spreadValues({
          left,
          right,
          typeName: ZodFirstPartyTypeKind.ZodIntersection
        }, processCreateParams(params)));
      };
      var ZodTuple = class _ZodTuple extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.array) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.array,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          if (ctx.data.length < this._def.items.length) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: this._def.items.length,
              inclusive: true,
              exact: false,
              type: "array"
            });
            return parseUtil_1.INVALID;
          }
          const rest = this._def.rest;
          if (!rest && ctx.data.length > this._def.items.length) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: this._def.items.length,
              inclusive: true,
              exact: false,
              type: "array"
            });
            status.dirty();
          }
          const items = [...ctx.data].map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
              return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
          }).filter((x) => !!x);
          if (ctx.common.async) {
            return Promise.all(items).then((results) => {
              return parseUtil_1.ParseStatus.mergeArray(status, results);
            });
          } else {
            return parseUtil_1.ParseStatus.mergeArray(status, items);
          }
        }
        get items() {
          return this._def.items;
        }
        rest(rest) {
          return new _ZodTuple(__spreadProps(__spreadValues({}, this._def), {
            rest
          }));
        }
      };
      exports.ZodTuple = ZodTuple;
      ZodTuple.create = (schemas, params) => {
        if (!Array.isArray(schemas)) {
          throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
        }
        return new ZodTuple(__spreadValues({
          items: schemas,
          typeName: ZodFirstPartyTypeKind.ZodTuple,
          rest: null
        }, processCreateParams(params)));
      };
      var ZodRecord = class _ZodRecord extends ZodType {
        get keySchema() {
          return this._def.keyType;
        }
        get valueSchema() {
          return this._def.valueType;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.object) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.object,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const pairs = [];
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          for (const key in ctx.data) {
            pairs.push({
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
              value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
            });
          }
          if (ctx.common.async) {
            return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
          } else {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
          }
        }
        get element() {
          return this._def.valueType;
        }
        static create(first, second, third) {
          if (second instanceof ZodType) {
            return new _ZodRecord(__spreadValues({
              keyType: first,
              valueType: second,
              typeName: ZodFirstPartyTypeKind.ZodRecord
            }, processCreateParams(third)));
          }
          return new _ZodRecord(__spreadValues({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord
          }, processCreateParams(second)));
        }
      };
      exports.ZodRecord = ZodRecord;
      var ZodMap = class extends ZodType {
        get keySchema() {
          return this._def.keyType;
        }
        get valueSchema() {
          return this._def.valueType;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.map) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.map,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const keyType = this._def.keyType;
          const valueType = this._def.valueType;
          const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
              key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
              value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
            };
          });
          if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(() => __async(this, null, function* () {
              for (const pair of pairs) {
                const key = yield pair.key;
                const value = yield pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                  return parseUtil_1.INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                  status.dirty();
                }
                finalMap.set(key.value, value.value);
              }
              return { status: status.value, value: finalMap };
            }));
          } else {
            const finalMap = /* @__PURE__ */ new Map();
            for (const pair of pairs) {
              const key = pair.key;
              const value = pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return parseUtil_1.INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          }
        }
      };
      exports.ZodMap = ZodMap;
      ZodMap.create = (keyType, valueType, params) => {
        return new ZodMap(__spreadValues({
          valueType,
          keyType,
          typeName: ZodFirstPartyTypeKind.ZodMap
        }, processCreateParams(params)));
      };
      var ZodSet = class _ZodSet extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.set) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.set,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const def = this._def;
          if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: def.minSize.value,
                type: "set",
                inclusive: true,
                exact: false,
                message: def.minSize.message
              });
              status.dirty();
            }
          }
          if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: def.maxSize.value,
                type: "set",
                inclusive: true,
                exact: false,
                message: def.maxSize.message
              });
              status.dirty();
            }
          }
          const valueType = this._def.valueType;
          function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2) {
              if (element.status === "aborted")
                return parseUtil_1.INVALID;
              if (element.status === "dirty")
                status.dirty();
              parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
          }
          const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
          if (ctx.common.async) {
            return Promise.all(elements).then((elements2) => finalizeSet(elements2));
          } else {
            return finalizeSet(elements);
          }
        }
        min(minSize, message) {
          return new _ZodSet(__spreadProps(__spreadValues({}, this._def), {
            minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        max(maxSize, message) {
          return new _ZodSet(__spreadProps(__spreadValues({}, this._def), {
            maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message) }
          }));
        }
        size(size, message) {
          return this.min(size, message).max(size, message);
        }
        nonempty(message) {
          return this.min(1, message);
        }
      };
      exports.ZodSet = ZodSet;
      ZodSet.create = (valueType, params) => {
        return new ZodSet(__spreadValues({
          valueType,
          minSize: null,
          maxSize: null,
          typeName: ZodFirstPartyTypeKind.ZodSet
        }, processCreateParams(params)));
      };
      var ZodFunction = class _ZodFunction extends ZodType {
        constructor() {
          super(...arguments);
          this.validate = this.implement;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.function) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.function,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          function makeArgsIssue(args, error) {
            return (0, parseUtil_1.makeIssue)({
              data: args,
              path: ctx.path,
              errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                (0, errors_1.getErrorMap)(),
                errors_1.defaultErrorMap
              ].filter((x) => !!x),
              issueData: {
                code: ZodError_1.ZodIssueCode.invalid_arguments,
                argumentsError: error
              }
            });
          }
          function makeReturnsIssue(returns, error) {
            return (0, parseUtil_1.makeIssue)({
              data: returns,
              path: ctx.path,
              errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                (0, errors_1.getErrorMap)(),
                errors_1.defaultErrorMap
              ].filter((x) => !!x),
              issueData: {
                code: ZodError_1.ZodIssueCode.invalid_return_type,
                returnTypeError: error
              }
            });
          }
          const params = { errorMap: ctx.common.contextualErrorMap };
          const fn = ctx.data;
          if (this._def.returns instanceof ZodPromise) {
            const me = this;
            return (0, parseUtil_1.OK)(function(...args) {
              return __async(this, null, function* () {
                const error = new ZodError_1.ZodError([]);
                const parsedArgs = yield me._def.args.parseAsync(args, params).catch((e) => {
                  error.addIssue(makeArgsIssue(args, e));
                  throw error;
                });
                const result = yield Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = yield me._def.returns._def.type.parseAsync(result, params).catch((e) => {
                  error.addIssue(makeReturnsIssue(result, e));
                  throw error;
                });
                return parsedReturns;
              });
            });
          } else {
            const me = this;
            return (0, parseUtil_1.OK)(function(...args) {
              const parsedArgs = me._def.args.safeParse(args, params);
              if (!parsedArgs.success) {
                throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
              }
              const result = Reflect.apply(fn, this, parsedArgs.data);
              const parsedReturns = me._def.returns.safeParse(result, params);
              if (!parsedReturns.success) {
                throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
              }
              return parsedReturns.data;
            });
          }
        }
        parameters() {
          return this._def.args;
        }
        returnType() {
          return this._def.returns;
        }
        args(...items) {
          return new _ZodFunction(__spreadProps(__spreadValues({}, this._def), {
            args: ZodTuple.create(items).rest(ZodUnknown.create())
          }));
        }
        returns(returnType) {
          return new _ZodFunction(__spreadProps(__spreadValues({}, this._def), {
            returns: returnType
          }));
        }
        implement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        strictImplement(func) {
          const validatedFunc = this.parse(func);
          return validatedFunc;
        }
        static create(args, returns, params) {
          return new _ZodFunction(__spreadValues({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction
          }, processCreateParams(params)));
        }
      };
      exports.ZodFunction = ZodFunction;
      var ZodLazy = class extends ZodType {
        get schema() {
          return this._def.getter();
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const lazySchema = this._def.getter();
          return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
        }
      };
      exports.ZodLazy = ZodLazy;
      ZodLazy.create = (getter, params) => {
        return new ZodLazy(__spreadValues({
          getter,
          typeName: ZodFirstPartyTypeKind.ZodLazy
        }, processCreateParams(params)));
      };
      var ZodLiteral = class extends ZodType {
        _parse(input) {
          if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_1.ZodIssueCode.invalid_literal,
              expected: this._def.value
            });
            return parseUtil_1.INVALID;
          }
          return { status: "valid", value: input.data };
        }
        get value() {
          return this._def.value;
        }
      };
      exports.ZodLiteral = ZodLiteral;
      ZodLiteral.create = (value, params) => {
        return new ZodLiteral(__spreadValues({
          value,
          typeName: ZodFirstPartyTypeKind.ZodLiteral
        }, processCreateParams(params)));
      };
      function createZodEnum(values2, params) {
        return new ZodEnum(__spreadValues({
          values: values2,
          typeName: ZodFirstPartyTypeKind.ZodEnum
        }, processCreateParams(params)));
      }
      var ZodEnum = class _ZodEnum extends ZodType {
        _parse(input) {
          if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            (0, parseUtil_1.addIssueToContext)(ctx, {
              expected: util_1.util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodError_1.ZodIssueCode.invalid_type
            });
            return parseUtil_1.INVALID;
          }
          if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            (0, parseUtil_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_1.ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
        get options() {
          return this._def.values;
        }
        get enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Values() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        get Enum() {
          const enumValues = {};
          for (const val of this._def.values) {
            enumValues[val] = val;
          }
          return enumValues;
        }
        extract(values2) {
          return _ZodEnum.create(values2);
        }
        exclude(values2) {
          return _ZodEnum.create(this.options.filter((opt) => !values2.includes(opt)));
        }
      };
      exports.ZodEnum = ZodEnum;
      ZodEnum.create = createZodEnum;
      var ZodNativeEnum = class extends ZodType {
        _parse(input) {
          const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
          const ctx = this._getOrReturnCtx(input);
          if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
            const expectedValues = util_1.util.objectValues(nativeEnumValues);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              expected: util_1.util.joinValues(expectedValues),
              received: ctx.parsedType,
              code: ZodError_1.ZodIssueCode.invalid_type
            });
            return parseUtil_1.INVALID;
          }
          if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util_1.util.objectValues(nativeEnumValues);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              received: ctx.data,
              code: ZodError_1.ZodIssueCode.invalid_enum_value,
              options: expectedValues
            });
            return parseUtil_1.INVALID;
          }
          return (0, parseUtil_1.OK)(input.data);
        }
        get enum() {
          return this._def.values;
        }
      };
      exports.ZodNativeEnum = ZodNativeEnum;
      ZodNativeEnum.create = (values2, params) => {
        return new ZodNativeEnum(__spreadValues({
          values: values2,
          typeName: ZodFirstPartyTypeKind.ZodNativeEnum
        }, processCreateParams(params)));
      };
      var ZodPromise = class extends ZodType {
        unwrap() {
          return this._def.type;
        }
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.promise,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
          return (0, parseUtil_1.OK)(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
              path: ctx.path,
              errorMap: ctx.common.contextualErrorMap
            });
          }));
        }
      };
      exports.ZodPromise = ZodPromise;
      ZodPromise.create = (schema, params) => {
        return new ZodPromise(__spreadValues({
          type: schema,
          typeName: ZodFirstPartyTypeKind.ZodPromise
        }, processCreateParams(params)));
      };
      var ZodEffects = class extends ZodType {
        innerType() {
          return this._def.schema;
        }
        sourceType() {
          return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
        }
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          const effect = this._def.effect || null;
          const checkCtx = {
            addIssue: (arg) => {
              (0, parseUtil_1.addIssueToContext)(ctx, arg);
              if (arg.fatal) {
                status.abort();
              } else {
                status.dirty();
              }
            },
            get path() {
              return ctx.path;
            }
          };
          checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
          if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.issues.length) {
              return {
                status: "dirty",
                value: ctx.data
              };
            }
            if (ctx.common.async) {
              return Promise.resolve(processed).then((processed2) => {
                return this._def.schema._parseAsync({
                  data: processed2,
                  path: ctx.path,
                  parent: ctx
                });
              });
            } else {
              return this._def.schema._parseSync({
                data: processed,
                path: ctx.path,
                parent: ctx
              });
            }
          }
          if (effect.type === "refinement") {
            const executeRefinement = (acc) => {
              const result = effect.refinement(acc, checkCtx);
              if (ctx.common.async) {
                return Promise.resolve(result);
              }
              if (result instanceof Promise) {
                throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
              }
              return acc;
            };
            if (ctx.common.async === false) {
              const inner = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inner.status === "aborted")
                return parseUtil_1.INVALID;
              if (inner.status === "dirty")
                status.dirty();
              executeRefinement(inner.value);
              return { status: status.value, value: inner.value };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
                if (inner.status === "aborted")
                  return parseUtil_1.INVALID;
                if (inner.status === "dirty")
                  status.dirty();
                return executeRefinement(inner.value).then(() => {
                  return { status: status.value, value: inner.value };
                });
              });
            }
          }
          if (effect.type === "transform") {
            if (ctx.common.async === false) {
              const base5 = this._def.schema._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (!(0, parseUtil_1.isValid)(base5))
                return base5;
              const result = effect.transform(base5.value, checkCtx);
              if (result instanceof Promise) {
                throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
              }
              return { status: status.value, value: result };
            } else {
              return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base5) => {
                if (!(0, parseUtil_1.isValid)(base5))
                  return base5;
                return Promise.resolve(effect.transform(base5.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
              });
            }
          }
          util_1.util.assertNever(effect);
        }
      };
      exports.ZodEffects = ZodEffects;
      exports.ZodTransformer = ZodEffects;
      ZodEffects.create = (schema, effect, params) => {
        return new ZodEffects(__spreadValues({
          schema,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect
        }, processCreateParams(params)));
      };
      ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
        return new ZodEffects(__spreadValues({
          schema,
          effect: { type: "preprocess", transform: preprocess },
          typeName: ZodFirstPartyTypeKind.ZodEffects
        }, processCreateParams(params)));
      };
      var ZodOptional = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === util_1.ZodParsedType.undefined) {
            return (0, parseUtil_1.OK)(void 0);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      exports.ZodOptional = ZodOptional;
      ZodOptional.create = (type, params) => {
        return new ZodOptional(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodOptional
        }, processCreateParams(params)));
      };
      var ZodNullable = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType === util_1.ZodParsedType.null) {
            return (0, parseUtil_1.OK)(null);
          }
          return this._def.innerType._parse(input);
        }
        unwrap() {
          return this._def.innerType;
        }
      };
      exports.ZodNullable = ZodNullable;
      ZodNullable.create = (type, params) => {
        return new ZodNullable(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodNullable
        }, processCreateParams(params)));
      };
      var ZodDefault = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          let data = ctx.data;
          if (ctx.parsedType === util_1.ZodParsedType.undefined) {
            data = this._def.defaultValue();
          }
          return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        removeDefault() {
          return this._def.innerType;
        }
      };
      exports.ZodDefault = ZodDefault;
      ZodDefault.create = (type, params) => {
        return new ZodDefault(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodDefault,
          defaultValue: typeof params.default === "function" ? params.default : () => params.default
        }, processCreateParams(params)));
      };
      var ZodCatch = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const newCtx = __spreadProps(__spreadValues({}, ctx), {
            common: __spreadProps(__spreadValues({}, ctx.common), {
              issues: []
            })
          });
          const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: __spreadValues({}, newCtx)
          });
          if ((0, parseUtil_1.isAsync)(result)) {
            return result.then((result2) => {
              return {
                status: "valid",
                value: result2.status === "valid" ? result2.value : this._def.catchValue({
                  get error() {
                    return new ZodError_1.ZodError(newCtx.common.issues);
                  },
                  input: newCtx.data
                })
              };
            });
          } else {
            return {
              status: "valid",
              value: result.status === "valid" ? result.value : this._def.catchValue({
                get error() {
                  return new ZodError_1.ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          }
        }
        removeCatch() {
          return this._def.innerType;
        }
      };
      exports.ZodCatch = ZodCatch;
      ZodCatch.create = (type, params) => {
        return new ZodCatch(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodCatch,
          catchValue: typeof params.catch === "function" ? params.catch : () => params.catch
        }, processCreateParams(params)));
      };
      var ZodNaN = class extends ZodType {
        _parse(input) {
          const parsedType = this._getType(input);
          if (parsedType !== util_1.ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_type,
              expected: util_1.ZodParsedType.nan,
              received: ctx.parsedType
            });
            return parseUtil_1.INVALID;
          }
          return { status: "valid", value: input.data };
        }
      };
      exports.ZodNaN = ZodNaN;
      ZodNaN.create = (params) => {
        return new ZodNaN(__spreadValues({
          typeName: ZodFirstPartyTypeKind.ZodNaN
        }, processCreateParams(params)));
      };
      exports.BRAND = Symbol("zod_brand");
      var ZodBranded = class extends ZodType {
        _parse(input) {
          const { ctx } = this._processInputParams(input);
          const data = ctx.data;
          return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
          });
        }
        unwrap() {
          return this._def.type;
        }
      };
      exports.ZodBranded = ZodBranded;
      var ZodPipeline = class _ZodPipeline extends ZodType {
        _parse(input) {
          const { status, ctx } = this._processInputParams(input);
          if (ctx.common.async) {
            const handleAsync = () => __async(this, null, function* () {
              const inResult = yield this._def.in._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
              });
              if (inResult.status === "aborted")
                return parseUtil_1.INVALID;
              if (inResult.status === "dirty") {
                status.dirty();
                return (0, parseUtil_1.DIRTY)(inResult.value);
              } else {
                return this._def.out._parseAsync({
                  data: inResult.value,
                  path: ctx.path,
                  parent: ctx
                });
              }
            });
            return handleAsync();
          } else {
            const inResult = this._def.in._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return parseUtil_1.INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return {
                status: "dirty",
                value: inResult.value
              };
            } else {
              return this._def.out._parseSync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          }
        }
        static create(a, b) {
          return new _ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline
          });
        }
      };
      exports.ZodPipeline = ZodPipeline;
      var ZodReadonly = class extends ZodType {
        _parse(input) {
          const result = this._def.innerType._parse(input);
          if ((0, parseUtil_1.isValid)(result)) {
            result.value = Object.freeze(result.value);
          }
          return result;
        }
      };
      exports.ZodReadonly = ZodReadonly;
      ZodReadonly.create = (type, params) => {
        return new ZodReadonly(__spreadValues({
          innerType: type,
          typeName: ZodFirstPartyTypeKind.ZodReadonly
        }, processCreateParams(params)));
      };
      var custom = (check, params = {}, fatal) => {
        if (check)
          return ZodAny.create().superRefine((data, ctx) => {
            var _a3, _b;
            if (!check(data)) {
              const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
              const _fatal = (_b = (_a3 = p.fatal) !== null && _a3 !== void 0 ? _a3 : fatal) !== null && _b !== void 0 ? _b : true;
              const p2 = typeof p === "string" ? { message: p } : p;
              ctx.addIssue(__spreadProps(__spreadValues({ code: "custom" }, p2), { fatal: _fatal }));
            }
          });
        return ZodAny.create();
      };
      exports.custom = custom;
      exports.late = {
        object: ZodObject.lazycreate
      };
      var ZodFirstPartyTypeKind;
      (function(ZodFirstPartyTypeKind2) {
        ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
        ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
        ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
        ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
        ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
        ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
        ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
        ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
        ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
        ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
        ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
        ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
        ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
        ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
        ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
        ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
        ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
        ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
        ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
        ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
        ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
        ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
        ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
        ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
        ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
        ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
        ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
        ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
        ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
        ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
        ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
        ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
        ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
        ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
        ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
        ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
      })(ZodFirstPartyTypeKind = exports.ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = {}));
      var instanceOfType = (cls, params = {
        message: `Input not instance of ${cls.name}`
      }) => (0, exports.custom)((data) => data instanceof cls, params);
      exports.instanceof = instanceOfType;
      var stringType = ZodString.create;
      exports.string = stringType;
      var numberType = ZodNumber.create;
      exports.number = numberType;
      var nanType = ZodNaN.create;
      exports.nan = nanType;
      var bigIntType = ZodBigInt.create;
      exports.bigint = bigIntType;
      var booleanType = ZodBoolean.create;
      exports.boolean = booleanType;
      var dateType = ZodDate.create;
      exports.date = dateType;
      var symbolType = ZodSymbol.create;
      exports.symbol = symbolType;
      var undefinedType = ZodUndefined.create;
      exports.undefined = undefinedType;
      var nullType = ZodNull.create;
      exports.null = nullType;
      var anyType = ZodAny.create;
      exports.any = anyType;
      var unknownType = ZodUnknown.create;
      exports.unknown = unknownType;
      var neverType = ZodNever.create;
      exports.never = neverType;
      var voidType = ZodVoid.create;
      exports.void = voidType;
      var arrayType = ZodArray.create;
      exports.array = arrayType;
      var objectType = ZodObject.create;
      exports.object = objectType;
      var strictObjectType = ZodObject.strictCreate;
      exports.strictObject = strictObjectType;
      var unionType = ZodUnion.create;
      exports.union = unionType;
      var discriminatedUnionType = ZodDiscriminatedUnion.create;
      exports.discriminatedUnion = discriminatedUnionType;
      var intersectionType = ZodIntersection.create;
      exports.intersection = intersectionType;
      var tupleType = ZodTuple.create;
      exports.tuple = tupleType;
      var recordType = ZodRecord.create;
      exports.record = recordType;
      var mapType = ZodMap.create;
      exports.map = mapType;
      var setType = ZodSet.create;
      exports.set = setType;
      var functionType = ZodFunction.create;
      exports.function = functionType;
      var lazyType = ZodLazy.create;
      exports.lazy = lazyType;
      var literalType = ZodLiteral.create;
      exports.literal = literalType;
      var enumType = ZodEnum.create;
      exports.enum = enumType;
      var nativeEnumType = ZodNativeEnum.create;
      exports.nativeEnum = nativeEnumType;
      var promiseType = ZodPromise.create;
      exports.promise = promiseType;
      var effectsType = ZodEffects.create;
      exports.effect = effectsType;
      exports.transformer = effectsType;
      var optionalType = ZodOptional.create;
      exports.optional = optionalType;
      var nullableType = ZodNullable.create;
      exports.nullable = nullableType;
      var preprocessType = ZodEffects.createWithPreprocess;
      exports.preprocess = preprocessType;
      var pipelineType = ZodPipeline.create;
      exports.pipeline = pipelineType;
      var ostring = () => stringType().optional();
      exports.ostring = ostring;
      var onumber = () => numberType().optional();
      exports.onumber = onumber;
      var oboolean = () => booleanType().optional();
      exports.oboolean = oboolean;
      exports.coerce = {
        string: (arg) => ZodString.create(__spreadProps(__spreadValues({}, arg), { coerce: true })),
        number: (arg) => ZodNumber.create(__spreadProps(__spreadValues({}, arg), { coerce: true })),
        boolean: (arg) => ZodBoolean.create(__spreadProps(__spreadValues({}, arg), {
          coerce: true
        })),
        bigint: (arg) => ZodBigInt.create(__spreadProps(__spreadValues({}, arg), { coerce: true })),
        date: (arg) => ZodDate.create(__spreadProps(__spreadValues({}, arg), { coerce: true }))
      };
      exports.NEVER = parseUtil_1.INVALID;
    }
  });

  // coldsky/node_modules/zod/lib/external.js
  var require_external = __commonJS({
    "coldsky/node_modules/zod/lib/external.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_errors(), exports);
      __exportStar(require_parseUtil(), exports);
      __exportStar(require_typeAliases(), exports);
      __exportStar(require_util(), exports);
      __exportStar(require_types(), exports);
      __exportStar(require_ZodError(), exports);
    }
  });

  // coldsky/node_modules/zod/lib/index.js
  var require_lib = __commonJS({
    "coldsky/node_modules/zod/lib/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.z = void 0;
      var z = __importStar(require_external());
      exports.z = z;
      __exportStar(require_external(), exports);
      exports.default = z;
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/check.js
  var require_check = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/check.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isObject = exports.assure = exports.is = void 0;
      var is2 = (obj, def) => {
        return def.safeParse(obj).success;
      };
      exports.is = is2;
      var assure = (def, obj) => {
        return def.parse(obj);
      };
      exports.assure = assure;
      var isObject2 = (obj) => {
        return typeof obj === "object" && obj !== null;
      };
      exports.isObject = isObject2;
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/util.js
  var require_util2 = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseIntWithFallback = exports.dedupeStrs = exports.range = exports.chunkArray = exports.errHasMsg = exports.isErrnoException = exports.asyncFilter = exports.s32decode = exports.s32encode = exports.streamToBuffer = exports.flattenUint8Arrays = exports.bailableWait = exports.wait = exports.jitter = exports.noUndefinedVals = void 0;
      var noUndefinedVals = (obj) => {
        Object.keys(obj).forEach((k) => {
          if (obj[k] === void 0) {
            delete obj[k];
          }
        });
        return obj;
      };
      exports.noUndefinedVals = noUndefinedVals;
      var jitter = (maxMs) => {
        return Math.round((Math.random() - 0.5) * maxMs * 2);
      };
      exports.jitter = jitter;
      var wait = (ms) => {
        return new Promise((res) => setTimeout(res, ms));
      };
      exports.wait = wait;
      var bailableWait = (ms) => {
        let bail;
        const waitPromise = new Promise((res) => {
          const timeout2 = setTimeout(res, ms);
          bail = () => {
            clearTimeout(timeout2);
            res();
          };
        });
        return { bail, wait: () => waitPromise };
      };
      exports.bailableWait = bailableWait;
      var flattenUint8Arrays = (arrs) => {
        const length6 = arrs.reduce((acc, cur) => {
          return acc + cur.length;
        }, 0);
        const flattened = new Uint8Array(length6);
        let offset = 0;
        arrs.forEach((arr) => {
          flattened.set(arr, offset);
          offset += arr.length;
        });
        return flattened;
      };
      exports.flattenUint8Arrays = flattenUint8Arrays;
      var streamToBuffer = (stream) => __async(exports, null, function* () {
        const arrays = [];
        try {
          for (var iter = __forAwait(stream), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
            const chunk = temp.value;
            arrays.push(chunk);
          }
        } catch (temp) {
          error = [temp];
        } finally {
          try {
            more && (temp = iter.return) && (yield temp.call(iter));
          } finally {
            if (error)
              throw error[0];
          }
        }
        return (0, exports.flattenUint8Arrays)(arrays);
      });
      exports.streamToBuffer = streamToBuffer;
      var S32_CHAR = "234567abcdefghijklmnopqrstuvwxyz";
      var s32encode = (i) => {
        let s = "";
        while (i) {
          const c = i % 32;
          i = Math.floor(i / 32);
          s = S32_CHAR.charAt(c) + s;
        }
        return s;
      };
      exports.s32encode = s32encode;
      var s32decode = (s) => {
        let i = 0;
        for (const c of s) {
          i = i * 32 + S32_CHAR.indexOf(c);
        }
        return i;
      };
      exports.s32decode = s32decode;
      var asyncFilter = (arr, fn) => __async(exports, null, function* () {
        const results = yield Promise.all(arr.map((t) => fn(t)));
        return arr.filter((_, i) => results[i]);
      });
      exports.asyncFilter = asyncFilter;
      var isErrnoException = (err) => {
        return !!err && err["code"];
      };
      exports.isErrnoException = isErrnoException;
      var errHasMsg = (err, msg) => {
        return !!err && typeof err === "object" && err["message"] === msg;
      };
      exports.errHasMsg = errHasMsg;
      var chunkArray = (arr, chunkSize) => {
        return arr.reduce((acc, cur, i) => {
          const chunkI = Math.floor(i / chunkSize);
          if (!acc[chunkI]) {
            acc[chunkI] = [];
          }
          acc[chunkI].push(cur);
          return acc;
        }, []);
      };
      exports.chunkArray = chunkArray;
      var range = (num) => {
        const nums = [];
        for (let i = 0; i < num; i++) {
          nums.push(i);
        }
        return nums;
      };
      exports.range = range;
      var dedupeStrs = (strs) => {
        return [...new Set(strs)];
      };
      exports.dedupeStrs = dedupeStrs;
      var parseIntWithFallback = (value, fallback) => {
        const parsed = parseInt(value || "", 10);
        return isNaN(parsed) ? fallback : parsed;
      };
      exports.parseIntWithFallback = parseIntWithFallback;
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/arrays.js
  var require_arrays = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/arrays.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mapDefined = exports.keyBy = void 0;
      var keyBy = (arr, key) => {
        return arr.reduce((acc, cur) => {
          acc[cur[key]] = cur;
          return acc;
        }, {});
      };
      exports.keyBy = keyBy;
      var mapDefined = (arr, fn) => {
        const output = [];
        for (const item of arr) {
          const val = fn(item);
          if (val !== void 0) {
            output.push(val);
          }
        }
        return output;
      };
      exports.mapDefined = mapDefined;
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/async.js
  var require_async = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.handleAllSettledErrors = exports.AsyncBufferFullError = exports.AsyncBuffer = exports.allComplete = exports.createDeferrables = exports.createDeferrable = exports.readFromGenerator = void 0;
      var util_1 = require_util2();
      var readFromGenerator = (_0, _1, ..._2) => __async(exports, [_0, _1, ..._2], function* (gen, isDone, waitFor = Promise.resolve(), maxLength = Number.MAX_SAFE_INTEGER) {
        const evts = [];
        let bail;
        let hasBroke = false;
        const awaitDone = () => __async(exports, null, function* () {
          if (yield isDone(evts.at(-1))) {
            return true;
          }
          const bailable = (0, util_1.bailableWait)(20);
          yield bailable.wait();
          bail = bailable.bail;
          if (hasBroke)
            return false;
          return yield awaitDone();
        });
        const breakOn = new Promise((resolve) => {
          waitFor.then(() => {
            awaitDone().then(() => resolve());
          });
        });
        try {
          while (evts.length < maxLength) {
            const maybeEvt = yield Promise.race([gen.next(), breakOn]);
            if (!maybeEvt)
              break;
            const evt = maybeEvt;
            if (evt.done)
              break;
            evts.push(evt.value);
          }
        } finally {
          hasBroke = true;
          bail && bail();
        }
        return evts;
      });
      exports.readFromGenerator = readFromGenerator;
      var createDeferrable = () => {
        let resolve;
        const promise = new Promise((res) => {
          resolve = () => res();
        });
        return { resolve, complete: promise };
      };
      exports.createDeferrable = createDeferrable;
      var createDeferrables = (count) => {
        const list = [];
        for (let i = 0; i < count; i++) {
          list.push((0, exports.createDeferrable)());
        }
        return list;
      };
      exports.createDeferrables = createDeferrables;
      var allComplete = (deferrables) => __async(exports, null, function* () {
        yield Promise.all(deferrables.map((d) => d.complete));
      });
      exports.allComplete = allComplete;
      var AsyncBuffer = class {
        constructor(maxSize) {
          Object.defineProperty(this, "maxSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: maxSize
          });
          Object.defineProperty(this, "buffer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "promise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "resolve", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "closed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "toThrow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.promise = Promise.resolve();
          this.resolve = () => null;
          this.resetPromise();
        }
        get curr() {
          return this.buffer;
        }
        get size() {
          return this.buffer.length;
        }
        get isClosed() {
          return this.closed;
        }
        resetPromise() {
          this.promise = new Promise((r2) => this.resolve = r2);
        }
        push(item) {
          this.buffer.push(item);
          this.resolve();
        }
        pushMany(items) {
          items.forEach((i) => this.buffer.push(i));
          this.resolve();
        }
        events() {
          return __asyncGenerator(this, null, function* () {
            while (true) {
              if (this.closed && this.buffer.length === 0) {
                if (this.toThrow) {
                  throw this.toThrow;
                } else {
                  return;
                }
              }
              yield new __await(this.promise);
              if (this.toThrow) {
                throw this.toThrow;
              }
              if (this.maxSize && this.size > this.maxSize) {
                throw new AsyncBufferFullError(this.maxSize);
              }
              const [first, ...rest] = this.buffer;
              if (first) {
                this.buffer = rest;
                yield first;
              } else {
                this.resetPromise();
              }
            }
          });
        }
        throw(err) {
          this.toThrow = err;
          this.closed = true;
          this.resolve();
        }
        close() {
          this.closed = true;
          this.resolve();
        }
      };
      exports.AsyncBuffer = AsyncBuffer;
      var AsyncBufferFullError = class extends Error {
        constructor(maxSize) {
          super(`ReachedMaxBufferSize: ${maxSize}`);
        }
      };
      exports.AsyncBufferFullError = AsyncBufferFullError;
      var handleAllSettledErrors = (results) => {
        const errors = results.filter(isRejected).map((res) => res.reason);
        if (errors.length === 0) {
          return;
        }
        if (errors.length === 1) {
          throw errors[0];
        }
        throw new AggregateError(errors, "Multiple errors: " + errors.map((err) => err == null ? void 0 : err.message).join("\n"));
      };
      exports.handleAllSettledErrors = handleAllSettledErrors;
      var isRejected = (result) => {
        return result.status === "rejected";
      };
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/tid.js
  var require_tid2 = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/tid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TID = void 0;
      var util_1 = require_util2();
      var TID_LEN = 13;
      var lastTimestamp = 0;
      var timestampCount = 0;
      var clockid = null;
      function dedash(str) {
        return str.replaceAll("-", "");
      }
      var TID = class _TID {
        constructor(str) {
          Object.defineProperty(this, "str", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          const noDashes = dedash(str);
          if (noDashes.length !== TID_LEN) {
            throw new Error(`Poorly formatted TID: ${noDashes.length} length`);
          }
          this.str = noDashes;
        }
        static next(prev2) {
          const time = Math.max(Date.now(), lastTimestamp);
          if (time === lastTimestamp) {
            timestampCount++;
          }
          lastTimestamp = time;
          const timestamp = time * 1e3 + timestampCount;
          if (clockid === null) {
            clockid = Math.floor(Math.random() * 32);
          }
          const tid = _TID.fromTime(timestamp, clockid);
          if (!prev2 || tid.newerThan(prev2)) {
            return tid;
          }
          return _TID.fromTime(prev2.timestamp() + 1, clockid);
        }
        static nextStr(prev2) {
          return _TID.next(prev2 ? new _TID(prev2) : void 0).toString();
        }
        static fromTime(timestamp, clockid2) {
          const str = `${(0, util_1.s32encode)(timestamp)}${(0, util_1.s32encode)(clockid2).padStart(2, "2")}`;
          return new _TID(str);
        }
        static fromStr(str) {
          return new _TID(str);
        }
        static oldestFirst(a, b) {
          return a.compareTo(b);
        }
        static newestFirst(a, b) {
          return b.compareTo(a);
        }
        static is(str) {
          return dedash(str).length === TID_LEN;
        }
        timestamp() {
          return (0, util_1.s32decode)(this.str.slice(0, 11));
        }
        clockid() {
          return (0, util_1.s32decode)(this.str.slice(11, 13));
        }
        formatted() {
          const str = this.toString();
          return `${str.slice(0, 4)}-${str.slice(4, 7)}-${str.slice(7, 11)}-${str.slice(11, 13)}`;
        }
        toString() {
          return this.str;
        }
        // newer > older
        compareTo(other) {
          if (this.str > other.str)
            return 1;
          if (this.str < other.str)
            return -1;
          return 0;
        }
        equals(other) {
          return this.str === other.str;
        }
        newerThan(other) {
          return this.compareTo(other) > 0;
        }
        olderThan(other) {
          return this.compareTo(other) < 0;
        }
      };
      exports.TID = TID;
      exports.default = TID;
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/vendor/varint.js
  function encode(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT) {
      out[offset++] = num & 255 | MSB;
      num /= 128;
    }
    while (num & MSBALL) {
      out[offset++] = num & 255 | MSB;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode.bytes = offset - oldOffset + 1;
    return out;
  }
  function read(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$1);
    read.bytes = counter - offset;
    return res;
  }
  var encode_1, MSB, REST, MSBALL, INT, decode, MSB$1, REST$1, N1, N2, N3, N4, N5, N6, N7, N8, N9, length2, varint, _brrp_varint, varint_default;
  var init_varint = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/vendor/varint.js"() {
      encode_1 = encode;
      MSB = 128;
      REST = 127;
      MSBALL = ~REST;
      INT = Math.pow(2, 31);
      decode = read;
      MSB$1 = 128;
      REST$1 = 127;
      N1 = Math.pow(2, 7);
      N2 = Math.pow(2, 14);
      N3 = Math.pow(2, 21);
      N4 = Math.pow(2, 28);
      N5 = Math.pow(2, 35);
      N6 = Math.pow(2, 42);
      N7 = Math.pow(2, 49);
      N8 = Math.pow(2, 56);
      N9 = Math.pow(2, 63);
      length2 = function(value) {
        return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
      };
      varint = {
        encode: encode_1,
        decode,
        encodingLength: length2
      };
      _brrp_varint = varint;
      varint_default = _brrp_varint;
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/varint.js
  var decode2, encodeTo, encodingLength;
  var init_varint2 = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/varint.js"() {
      init_varint();
      decode2 = (data, offset = 0) => {
        const code2 = varint_default.decode(data, offset);
        return [
          code2,
          varint_default.decode.bytes
        ];
      };
      encodeTo = (int, target2, offset = 0) => {
        varint_default.encode(int, target2, offset);
        return target2;
      };
      encodingLength = (int) => {
        return varint_default.encodingLength(int);
      };
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bytes.js
  var empty, equals, coerce;
  var init_bytes = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bytes.js"() {
      empty = new Uint8Array(0);
      equals = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/hashes/digest.js
  var create, decode3, equals2, Digest;
  var init_digest = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/hashes/digest.js"() {
      init_bytes();
      init_varint2();
      create = (code2, digest2) => {
        const size = digest2.byteLength;
        const sizeOffset = encodingLength(code2);
        const digestOffset = sizeOffset + encodingLength(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo(code2, bytes, 0);
        encodeTo(size, bytes, sizeOffset);
        bytes.set(digest2, digestOffset);
        return new Digest(code2, size, digest2, bytes);
      };
      decode3 = (multihash) => {
        const bytes = coerce(multihash);
        const [code2, sizeOffset] = decode2(bytes);
        const [size, digestOffset] = decode2(bytes.subarray(sizeOffset));
        const digest2 = bytes.subarray(sizeOffset + digestOffset);
        if (digest2.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest(code2, size, digest2, bytes);
      };
      equals2 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          return a.code === b.code && a.size === b.size && equals(a.bytes, b.bytes);
        }
      };
      Digest = class {
        constructor(code2, size, digest2, bytes) {
          this.code = code2;
          this.size = size;
          this.digest = digest2;
          this.bytes = bytes;
        }
      };
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/vendor/base-x.js
  function base(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode13(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length6 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length6) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length6 = i2;
        pbegin++;
      }
      var it2 = size - length6;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length6 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length6) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length6 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length6;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode21(string2) {
      var buffer2 = decodeUnsafe(string2);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode13,
      decodeUnsafe,
      decode: decode21
    };
  }
  var src, _brrp__multiformats_scope_baseX, base_x_default;
  var init_base_x = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/vendor/base-x.js"() {
      src = base;
      _brrp__multiformats_scope_baseX = src;
      base_x_default = _brrp__multiformats_scope_baseX;
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base.js
  var Encoder, Decoder, ComposedDecoder, or, Codec, from2, baseX, decode4, encode2, rfc4648;
  var init_base = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base.js"() {
      init_base_x();
      init_bytes();
      Encoder = class {
        constructor(name2, prefix2, baseEncode) {
          this.name = name2;
          this.prefix = prefix2;
          this.baseEncode = baseEncode;
        }
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder = class {
        constructor(name2, prefix2, baseDecode) {
          this.name = name2;
          this.prefix = prefix2;
          if (prefix2.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix2.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder2) {
          return or(this, decoder2);
        }
      };
      ComposedDecoder = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder2) {
          return or(this, decoder2);
        }
        decode(input) {
          const prefix2 = input[0];
          const decoder2 = this.decoders[prefix2];
          if (decoder2) {
            return decoder2.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or = (left, right) => new ComposedDecoder(__spreadValues(__spreadValues({}, left.decoders || { [left.prefix]: left }), right.decoders || { [right.prefix]: right }));
      Codec = class {
        constructor(name2, prefix2, baseEncode, baseDecode) {
          this.name = name2;
          this.prefix = prefix2;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder(name2, prefix2, baseEncode);
          this.decoder = new Decoder(name2, prefix2, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from2 = ({ name: name2, prefix: prefix2, encode: encode13, decode: decode21 }) => new Codec(name2, prefix2, encode13, decode21);
      baseX = ({ prefix: prefix2, name: name2, alphabet: alphabet2 }) => {
        const { encode: encode13, decode: decode21 } = base_x_default(alphabet2, name2);
        return from2({
          prefix: prefix2,
          name: name2,
          encode: encode13,
          decode: (text) => coerce(decode21(text))
        });
      };
      decode4 = (string2, alphabet2, bitsPerChar, name2) => {
        const codes = {};
        for (let i = 0; i < alphabet2.length; ++i) {
          codes[alphabet2[i]] = i;
        }
        let end = string2.length;
        while (string2[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string2[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name2} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode2 = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer2 = buffer2 << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc4648 = ({ name: name2, prefix: prefix2, bitsPerChar, alphabet: alphabet2 }) => {
        return from2({
          prefix: prefix2,
          name: name2,
          encode(input) {
            return encode2(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode4(input, alphabet2, bitsPerChar, name2);
          }
        });
      };
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base58.js
  var base58btc, base58flickr;
  var init_base58 = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base58.js"() {
      init_base();
      base58btc = baseX({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr = baseX({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base32.js
  var base32, base32upper, base32pad, base32padupper, base32hex, base32hexupper, base32hexpad, base32hexpadupper, base32z;
  var init_base32 = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/bases/base32.js"() {
      init_base();
      base32 = rfc4648({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper = rfc4648({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad = rfc4648({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper = rfc4648({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex = rfc4648({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper = rfc4648({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad = rfc4648({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper = rfc4648({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z = rfc4648({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/cid.js
  var cid_exports = {};
  __export(cid_exports, {
    CID: () => CID
  });
  var CID, parseCIDtoBytes, toStringV0, toStringV1, DAG_PB_CODE, SHA_256_CODE, encodeCID, cidSymbol, readonly, hidden, version, deprecate, IS_CID_DEPRECATION;
  var init_cid = __esm({
    "coldsky/node_modules/@atproto/common-web/node_modules/multiformats/esm/src/cid.js"() {
      init_varint2();
      init_digest();
      init_base58();
      init_base32();
      init_bytes();
      CID = class _CID {
        constructor(version5, code2, multihash, bytes) {
          this.code = code2;
          this.version = version5;
          this.multihash = multihash;
          this.bytes = bytes;
          this.byteOffset = bytes.byteOffset;
          this.byteLength = bytes.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code2, multihash } = this;
              if (code2 !== DAG_PB_CODE) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return _CID.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code2, digest: digest2 } = this.multihash;
              const multihash = create(code2, digest2);
              return _CID.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
        }
        toString(base5) {
          const { bytes, version: version5, _baseCache } = this;
          switch (version5) {
            case 0:
              return toStringV0(bytes, _baseCache, base5 || base58btc.encoder);
            default:
              return toStringV1(bytes, _baseCache, base5 || base32.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate(/^0\.0/, IS_CID_DEPRECATION);
          return !!(value && (value[cidSymbol] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof _CID) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version5, code: code2, multihash, bytes } = value;
            return new _CID(version5, code2, multihash, bytes || encodeCID(version5, code2, multihash.bytes));
          } else if (value != null && value[cidSymbol] === true) {
            const { version: version5, multihash, code: code2 } = value;
            const digest2 = decode3(multihash);
            return _CID.create(version5, code2, digest2);
          } else {
            return null;
          }
        }
        static create(version5, code2, digest2) {
          if (typeof code2 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version5) {
            case 0: {
              if (code2 !== DAG_PB_CODE) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
              } else {
                return new _CID(version5, code2, digest2, digest2.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID(version5, code2, digest2.bytes);
              return new _CID(version5, code2, digest2, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest2) {
          return _CID.create(0, DAG_PB_CODE, digest2);
        }
        static createV1(code2, digest2) {
          return _CID.create(1, code2, digest2);
        }
        static decode(bytes) {
          const [cid, remainder] = _CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        static decodeFirst(bytes) {
          const specs = _CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
          return [
            cid,
            bytes.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next2 = () => {
            const [i, length6] = decode2(initialBytes.subarray(offset));
            offset += length6;
            return i;
          };
          let version5 = next2();
          let codec = DAG_PB_CODE;
          if (version5 === 18) {
            version5 = 0;
            offset = 0;
          } else if (version5 === 1) {
            codec = next2();
          }
          if (version5 !== 0 && version5 !== 1) {
            throw new RangeError(`Invalid CID version ${version5}`);
          }
          const prefixSize = offset;
          const multihashCode = next2();
          const digestSize = next2();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version5,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base5) {
          const [prefix2, bytes] = parseCIDtoBytes(source, base5);
          const cid = _CID.decode(bytes);
          cid._baseCache.set(prefix2, source);
          return cid;
        }
      };
      parseCIDtoBytes = (source, base5) => {
        switch (source[0]) {
          case "Q": {
            const decoder2 = base5 || base58btc;
            return [
              base58btc.prefix,
              decoder2.decode(`${base58btc.prefix}${source}`)
            ];
          }
          case base58btc.prefix: {
            const decoder2 = base5 || base58btc;
            return [
              base58btc.prefix,
              decoder2.decode(source)
            ];
          }
          case base32.prefix: {
            const decoder2 = base5 || base32;
            return [
              base32.prefix,
              decoder2.decode(source)
            ];
          }
          default: {
            if (base5 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base5.decode(source)
            ];
          }
        }
      };
      toStringV0 = (bytes, cache2, base5) => {
        const { prefix: prefix2 } = base5;
        if (prefix2 !== base58btc.prefix) {
          throw Error(`Cannot string encode V0 in ${base5.name} encoding`);
        }
        const cid = cache2.get(prefix2);
        if (cid == null) {
          const cid2 = base5.encode(bytes).slice(1);
          cache2.set(prefix2, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV1 = (bytes, cache2, base5) => {
        const { prefix: prefix2 } = base5;
        const cid = cache2.get(prefix2);
        if (cid == null) {
          const cid2 = base5.encode(bytes);
          cache2.set(prefix2, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE = 112;
      SHA_256_CODE = 18;
      encodeCID = (version5, code2, multihash) => {
        const codeOffset = encodingLength(version5);
        const hashOffset = codeOffset + encodingLength(code2);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo(version5, bytes, 0);
        encodeTo(code2, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol = Symbol.for("@ipld/js-cid/CID");
      readonly = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      hidden = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      version = "0.0.0-dev";
      deprecate = (range, message) => {
        if (range.test(version)) {
          console.warn(message);
        } else {
          throw new Error(message);
        }
      };
      IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    }
  });

  // coldsky/node_modules/uint8arrays/esm/src/compare.js
  function compare(a, b) {
    for (let i = 0; i < a.byteLength; i++) {
      if (a[i] < b[i]) {
        return -1;
      }
      if (a[i] > b[i]) {
        return 1;
      }
    }
    if (a.byteLength > b.byteLength) {
      return 1;
    }
    if (a.byteLength < b.byteLength) {
      return -1;
    }
    return 0;
  }
  var init_compare = __esm({
    "coldsky/node_modules/uint8arrays/esm/src/compare.js"() {
    }
  });

  // coldsky/node_modules/uint8arrays/esm/src/concat.js
  function concat(arrays, length6) {
    if (!length6) {
      length6 = arrays.reduce((acc, curr) => acc + curr.length, 0);
    }
    const output = new Uint8Array(length6);
    let offset = 0;
    for (const arr of arrays) {
      output.set(arr, offset);
      offset += arr.length;
    }
    return output;
  }
  var init_concat = __esm({
    "coldsky/node_modules/uint8arrays/esm/src/concat.js"() {
    }
  });

  // coldsky/node_modules/uint8arrays/esm/src/equals.js
  function equals3(a, b) {
    if (a === b) {
      return true;
    }
    if (a.byteLength !== b.byteLength) {
      return false;
    }
    for (let i = 0; i < a.byteLength; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  }
  var init_equals = __esm({
    "coldsky/node_modules/uint8arrays/esm/src/equals.js"() {
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/vendor/base-x.js
  function base2(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode13(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length6 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length6) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length6 = i2;
        pbegin++;
      }
      var it2 = size - length6;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length6 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length6) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length6 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length6;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode21(string2) {
      var buffer2 = decodeUnsafe(string2);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode13,
      decodeUnsafe,
      decode: decode21
    };
  }
  var src2, _brrp__multiformats_scope_baseX2, base_x_default2;
  var init_base_x2 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/vendor/base-x.js"() {
      src2 = base2;
      _brrp__multiformats_scope_baseX2 = src2;
      base_x_default2 = _brrp__multiformats_scope_baseX2;
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bytes.js
  var empty2, equals4, coerce2, fromString, toString;
  var init_bytes2 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bytes.js"() {
      empty2 = new Uint8Array(0);
      equals4 = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce2 = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
      fromString = (str) => new TextEncoder().encode(str);
      toString = (b) => new TextDecoder().decode(b);
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base.js
  var Encoder2, Decoder2, ComposedDecoder2, or2, Codec2, from3, baseX2, decode5, encode3, rfc46482;
  var init_base2 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base.js"() {
      init_base_x2();
      init_bytes2();
      Encoder2 = class {
        constructor(name2, prefix2, baseEncode) {
          this.name = name2;
          this.prefix = prefix2;
          this.baseEncode = baseEncode;
        }
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder2 = class {
        constructor(name2, prefix2, baseDecode) {
          this.name = name2;
          this.prefix = prefix2;
          if (prefix2.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix2.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder2) {
          return or2(this, decoder2);
        }
      };
      ComposedDecoder2 = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder2) {
          return or2(this, decoder2);
        }
        decode(input) {
          const prefix2 = input[0];
          const decoder2 = this.decoders[prefix2];
          if (decoder2) {
            return decoder2.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or2 = (left, right) => new ComposedDecoder2(__spreadValues(__spreadValues({}, left.decoders || { [left.prefix]: left }), right.decoders || { [right.prefix]: right }));
      Codec2 = class {
        constructor(name2, prefix2, baseEncode, baseDecode) {
          this.name = name2;
          this.prefix = prefix2;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder2(name2, prefix2, baseEncode);
          this.decoder = new Decoder2(name2, prefix2, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from3 = ({ name: name2, prefix: prefix2, encode: encode13, decode: decode21 }) => new Codec2(name2, prefix2, encode13, decode21);
      baseX2 = ({ prefix: prefix2, name: name2, alphabet: alphabet2 }) => {
        const { encode: encode13, decode: decode21 } = base_x_default2(alphabet2, name2);
        return from3({
          prefix: prefix2,
          name: name2,
          encode: encode13,
          decode: (text) => coerce2(decode21(text))
        });
      };
      decode5 = (string2, alphabet2, bitsPerChar, name2) => {
        const codes = {};
        for (let i = 0; i < alphabet2.length; ++i) {
          codes[alphabet2[i]] = i;
        }
        let end = string2.length;
        while (string2[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string2[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name2} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode3 = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer2 = buffer2 << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc46482 = ({ name: name2, prefix: prefix2, bitsPerChar, alphabet: alphabet2 }) => {
        return from3({
          prefix: prefix2,
          name: name2,
          encode(input) {
            return encode3(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode5(input, alphabet2, bitsPerChar, name2);
          }
        });
      };
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/identity.js
  var identity_exports = {};
  __export(identity_exports, {
    identity: () => identity
  });
  var identity;
  var init_identity = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/identity.js"() {
      init_base2();
      init_bytes2();
      identity = from3({
        prefix: "\0",
        name: "identity",
        encode: (buf2) => toString(buf2),
        decode: (str) => fromString(str)
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base2.js
  var base2_exports = {};
  __export(base2_exports, {
    base2: () => base22
  });
  var base22;
  var init_base22 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base2.js"() {
      init_base2();
      base22 = rfc46482({
        prefix: "0",
        name: "base2",
        alphabet: "01",
        bitsPerChar: 1
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base8.js
  var base8_exports = {};
  __export(base8_exports, {
    base8: () => base8
  });
  var base8;
  var init_base8 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base8.js"() {
      init_base2();
      base8 = rfc46482({
        prefix: "7",
        name: "base8",
        alphabet: "01234567",
        bitsPerChar: 3
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base10.js
  var base10_exports = {};
  __export(base10_exports, {
    base10: () => base10
  });
  var base10;
  var init_base10 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base10.js"() {
      init_base2();
      base10 = baseX2({
        prefix: "9",
        name: "base10",
        alphabet: "0123456789"
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base16.js
  var base16_exports = {};
  __export(base16_exports, {
    base16: () => base16,
    base16upper: () => base16upper
  });
  var base16, base16upper;
  var init_base16 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base16.js"() {
      init_base2();
      base16 = rfc46482({
        prefix: "f",
        name: "base16",
        alphabet: "0123456789abcdef",
        bitsPerChar: 4
      });
      base16upper = rfc46482({
        prefix: "F",
        name: "base16upper",
        alphabet: "0123456789ABCDEF",
        bitsPerChar: 4
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base32.js
  var base32_exports = {};
  __export(base32_exports, {
    base32: () => base322,
    base32hex: () => base32hex2,
    base32hexpad: () => base32hexpad2,
    base32hexpadupper: () => base32hexpadupper2,
    base32hexupper: () => base32hexupper2,
    base32pad: () => base32pad2,
    base32padupper: () => base32padupper2,
    base32upper: () => base32upper2,
    base32z: () => base32z2
  });
  var base322, base32upper2, base32pad2, base32padupper2, base32hex2, base32hexupper2, base32hexpad2, base32hexpadupper2, base32z2;
  var init_base322 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base32.js"() {
      init_base2();
      base322 = rfc46482({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper2 = rfc46482({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad2 = rfc46482({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper2 = rfc46482({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex2 = rfc46482({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper2 = rfc46482({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad2 = rfc46482({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper2 = rfc46482({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z2 = rfc46482({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base36.js
  var base36_exports = {};
  __export(base36_exports, {
    base36: () => base36,
    base36upper: () => base36upper
  });
  var base36, base36upper;
  var init_base36 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base36.js"() {
      init_base2();
      base36 = baseX2({
        prefix: "k",
        name: "base36",
        alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
      });
      base36upper = baseX2({
        prefix: "K",
        name: "base36upper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base58.js
  var base58_exports = {};
  __export(base58_exports, {
    base58btc: () => base58btc2,
    base58flickr: () => base58flickr2
  });
  var base58btc2, base58flickr2;
  var init_base582 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base58.js"() {
      init_base2();
      base58btc2 = baseX2({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr2 = baseX2({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base64.js
  var base64_exports = {};
  __export(base64_exports, {
    base64: () => base64,
    base64pad: () => base64pad,
    base64url: () => base64url,
    base64urlpad: () => base64urlpad
  });
  var base64, base64pad, base64url, base64urlpad;
  var init_base64 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base64.js"() {
      init_base2();
      base64 = rfc46482({
        prefix: "m",
        name: "base64",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        bitsPerChar: 6
      });
      base64pad = rfc46482({
        prefix: "M",
        name: "base64pad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        bitsPerChar: 6
      });
      base64url = rfc46482({
        prefix: "u",
        name: "base64url",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
        bitsPerChar: 6
      });
      base64urlpad = rfc46482({
        prefix: "U",
        name: "base64urlpad",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
        bitsPerChar: 6
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base256emoji.js
  var base256emoji_exports = {};
  __export(base256emoji_exports, {
    base256emoji: () => base256emoji
  });
  function encode4(data) {
    return data.reduce((p, c) => {
      p += alphabetBytesToChars[c];
      return p;
    }, "");
  }
  function decode6(str) {
    const byts = [];
    for (const char2 of str) {
      const byt = alphabetCharsToBytes[char2.codePointAt(0)];
      if (byt === void 0) {
        throw new Error(`Non-base256emoji character: ${char2}`);
      }
      byts.push(byt);
    }
    return new Uint8Array(byts);
  }
  var alphabet, alphabetBytesToChars, alphabetCharsToBytes, base256emoji;
  var init_base256emoji = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/bases/base256emoji.js"() {
      init_base2();
      alphabet = Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}");
      alphabetBytesToChars = alphabet.reduce((p, c, i) => {
        p[i] = c;
        return p;
      }, []);
      alphabetCharsToBytes = alphabet.reduce((p, c, i) => {
        p[c.codePointAt(0)] = i;
        return p;
      }, []);
      base256emoji = from3({
        prefix: "\u{1F680}",
        name: "base256emoji",
        encode: encode4,
        decode: decode6
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/vendor/varint.js
  function encode5(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT2) {
      out[offset++] = num & 255 | MSB2;
      num /= 128;
    }
    while (num & MSBALL2) {
      out[offset++] = num & 255 | MSB2;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode5.bytes = offset - oldOffset + 1;
    return out;
  }
  function read2(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read2.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$12) << shift : (b & REST$12) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$12);
    read2.bytes = counter - offset;
    return res;
  }
  var encode_12, MSB2, REST2, MSBALL2, INT2, decode7, MSB$12, REST$12, N12, N22, N32, N42, N52, N62, N72, N82, N92, length3, varint2, _brrp_varint2, varint_default2;
  var init_varint3 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/vendor/varint.js"() {
      encode_12 = encode5;
      MSB2 = 128;
      REST2 = 127;
      MSBALL2 = ~REST2;
      INT2 = Math.pow(2, 31);
      decode7 = read2;
      MSB$12 = 128;
      REST$12 = 127;
      N12 = Math.pow(2, 7);
      N22 = Math.pow(2, 14);
      N32 = Math.pow(2, 21);
      N42 = Math.pow(2, 28);
      N52 = Math.pow(2, 35);
      N62 = Math.pow(2, 42);
      N72 = Math.pow(2, 49);
      N82 = Math.pow(2, 56);
      N92 = Math.pow(2, 63);
      length3 = function(value) {
        return value < N12 ? 1 : value < N22 ? 2 : value < N32 ? 3 : value < N42 ? 4 : value < N52 ? 5 : value < N62 ? 6 : value < N72 ? 7 : value < N82 ? 8 : value < N92 ? 9 : 10;
      };
      varint2 = {
        encode: encode_12,
        decode: decode7,
        encodingLength: length3
      };
      _brrp_varint2 = varint2;
      varint_default2 = _brrp_varint2;
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/varint.js
  var decode8, encodeTo2, encodingLength2;
  var init_varint4 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/varint.js"() {
      init_varint3();
      decode8 = (data, offset = 0) => {
        const code2 = varint_default2.decode(data, offset);
        return [
          code2,
          varint_default2.decode.bytes
        ];
      };
      encodeTo2 = (int, target2, offset = 0) => {
        varint_default2.encode(int, target2, offset);
        return target2;
      };
      encodingLength2 = (int) => {
        return varint_default2.encodingLength(int);
      };
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/digest.js
  var create2, decode9, equals5, Digest2;
  var init_digest2 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/digest.js"() {
      init_bytes2();
      init_varint4();
      create2 = (code2, digest2) => {
        const size = digest2.byteLength;
        const sizeOffset = encodingLength2(code2);
        const digestOffset = sizeOffset + encodingLength2(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo2(code2, bytes, 0);
        encodeTo2(size, bytes, sizeOffset);
        bytes.set(digest2, digestOffset);
        return new Digest2(code2, size, digest2, bytes);
      };
      decode9 = (multihash) => {
        const bytes = coerce2(multihash);
        const [code2, sizeOffset] = decode8(bytes);
        const [size, digestOffset] = decode8(bytes.subarray(sizeOffset));
        const digest2 = bytes.subarray(sizeOffset + digestOffset);
        if (digest2.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest2(code2, size, digest2, bytes);
      };
      equals5 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          return a.code === b.code && a.size === b.size && equals4(a.bytes, b.bytes);
        }
      };
      Digest2 = class {
        constructor(code2, size, digest2, bytes) {
          this.code = code2;
          this.size = size;
          this.digest = digest2;
          this.bytes = bytes;
        }
      };
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/hasher.js
  var from4, Hasher;
  var init_hasher = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/hasher.js"() {
      init_digest2();
      from4 = ({ name: name2, code: code2, encode: encode13 }) => new Hasher(name2, code2, encode13);
      Hasher = class {
        constructor(name2, code2, encode13) {
          this.name = name2;
          this.code = code2;
          this.encode = encode13;
        }
        digest(input) {
          if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/sha2-browser.js
  var sha2_browser_exports = {};
  __export(sha2_browser_exports, {
    sha256: () => sha256,
    sha512: () => sha512
  });
  var sha, sha256, sha512;
  var init_sha2_browser = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/sha2-browser.js"() {
      init_hasher();
      sha = (name2) => (data) => __async(void 0, null, function* () {
        return new Uint8Array(yield crypto.subtle.digest(name2, data));
      });
      sha256 = from4({
        name: "sha2-256",
        code: 18,
        encode: sha("SHA-256")
      });
      sha512 = from4({
        name: "sha2-512",
        code: 19,
        encode: sha("SHA-512")
      });
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/identity.js
  var identity_exports2 = {};
  __export(identity_exports2, {
    identity: () => identity2
  });
  var code, name, encode6, digest, identity2;
  var init_identity2 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/hashes/identity.js"() {
      init_bytes2();
      init_digest2();
      code = 0;
      name = "identity";
      encode6 = coerce2;
      digest = (input) => create2(code, encode6(input));
      identity2 = {
        code,
        name,
        encode: encode6,
        digest
      };
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/codecs/raw.js
  var init_raw = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/codecs/raw.js"() {
      init_bytes2();
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/codecs/json.js
  var textEncoder, textDecoder;
  var init_json = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/codecs/json.js"() {
      textEncoder = new TextEncoder();
      textDecoder = new TextDecoder();
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/cid.js
  var CID2, parseCIDtoBytes2, toStringV02, toStringV12, DAG_PB_CODE2, SHA_256_CODE2, encodeCID2, cidSymbol2, readonly2, hidden2, version2, deprecate2, IS_CID_DEPRECATION2;
  var init_cid2 = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/cid.js"() {
      init_varint4();
      init_digest2();
      init_base582();
      init_base322();
      init_bytes2();
      CID2 = class _CID {
        constructor(version5, code2, multihash, bytes) {
          this.code = code2;
          this.version = version5;
          this.multihash = multihash;
          this.bytes = bytes;
          this.byteOffset = bytes.byteOffset;
          this.byteLength = bytes.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden2,
            byteLength: hidden2,
            code: readonly2,
            version: readonly2,
            multihash: readonly2,
            bytes: readonly2,
            _baseCache: hidden2,
            asCID: hidden2
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code2, multihash } = this;
              if (code2 !== DAG_PB_CODE2) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE2) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return _CID.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code2, digest: digest2 } = this.multihash;
              const multihash = create2(code2, digest2);
              return _CID.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals5(this.multihash, other.multihash);
        }
        toString(base5) {
          const { bytes, version: version5, _baseCache } = this;
          switch (version5) {
            case 0:
              return toStringV02(bytes, _baseCache, base5 || base58btc2.encoder);
            default:
              return toStringV12(bytes, _baseCache, base5 || base322.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate2(/^0\.0/, IS_CID_DEPRECATION2);
          return !!(value && (value[cidSymbol2] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof _CID) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version5, code: code2, multihash, bytes } = value;
            return new _CID(version5, code2, multihash, bytes || encodeCID2(version5, code2, multihash.bytes));
          } else if (value != null && value[cidSymbol2] === true) {
            const { version: version5, multihash, code: code2 } = value;
            const digest2 = decode9(multihash);
            return _CID.create(version5, code2, digest2);
          } else {
            return null;
          }
        }
        static create(version5, code2, digest2) {
          if (typeof code2 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version5) {
            case 0: {
              if (code2 !== DAG_PB_CODE2) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE2}) block encoding`);
              } else {
                return new _CID(version5, code2, digest2, digest2.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID2(version5, code2, digest2.bytes);
              return new _CID(version5, code2, digest2, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest2) {
          return _CID.create(0, DAG_PB_CODE2, digest2);
        }
        static createV1(code2, digest2) {
          return _CID.create(1, code2, digest2);
        }
        static decode(bytes) {
          const [cid, remainder] = _CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        static decodeFirst(bytes) {
          const specs = _CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce2(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest2 = new Digest2(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
          return [
            cid,
            bytes.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next2 = () => {
            const [i, length6] = decode8(initialBytes.subarray(offset));
            offset += length6;
            return i;
          };
          let version5 = next2();
          let codec = DAG_PB_CODE2;
          if (version5 === 18) {
            version5 = 0;
            offset = 0;
          } else if (version5 === 1) {
            codec = next2();
          }
          if (version5 !== 0 && version5 !== 1) {
            throw new RangeError(`Invalid CID version ${version5}`);
          }
          const prefixSize = offset;
          const multihashCode = next2();
          const digestSize = next2();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version5,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base5) {
          const [prefix2, bytes] = parseCIDtoBytes2(source, base5);
          const cid = _CID.decode(bytes);
          cid._baseCache.set(prefix2, source);
          return cid;
        }
      };
      parseCIDtoBytes2 = (source, base5) => {
        switch (source[0]) {
          case "Q": {
            const decoder2 = base5 || base58btc2;
            return [
              base58btc2.prefix,
              decoder2.decode(`${base58btc2.prefix}${source}`)
            ];
          }
          case base58btc2.prefix: {
            const decoder2 = base5 || base58btc2;
            return [
              base58btc2.prefix,
              decoder2.decode(source)
            ];
          }
          case base322.prefix: {
            const decoder2 = base5 || base322;
            return [
              base322.prefix,
              decoder2.decode(source)
            ];
          }
          default: {
            if (base5 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base5.decode(source)
            ];
          }
        }
      };
      toStringV02 = (bytes, cache2, base5) => {
        const { prefix: prefix2 } = base5;
        if (prefix2 !== base58btc2.prefix) {
          throw Error(`Cannot string encode V0 in ${base5.name} encoding`);
        }
        const cid = cache2.get(prefix2);
        if (cid == null) {
          const cid2 = base5.encode(bytes).slice(1);
          cache2.set(prefix2, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV12 = (bytes, cache2, base5) => {
        const { prefix: prefix2 } = base5;
        const cid = cache2.get(prefix2);
        if (cid == null) {
          const cid2 = base5.encode(bytes);
          cache2.set(prefix2, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE2 = 112;
      SHA_256_CODE2 = 18;
      encodeCID2 = (version5, code2, multihash) => {
        const codeOffset = encodingLength2(version5);
        const hashOffset = codeOffset + encodingLength2(code2);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo2(version5, bytes, 0);
        encodeTo2(code2, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol2 = Symbol.for("@ipld/js-cid/CID");
      readonly2 = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      hidden2 = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      version2 = "0.0.0-dev";
      deprecate2 = (range, message) => {
        if (range.test(version2)) {
          console.warn(message);
        } else {
          throw new Error(message);
        }
      };
      IS_CID_DEPRECATION2 = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/index.js
  var init_src = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/index.js"() {
      init_cid2();
      init_varint4();
      init_bytes2();
      init_hasher();
      init_digest2();
    }
  });

  // coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/basics.js
  var bases, hashes;
  var init_basics = __esm({
    "coldsky/node_modules/uint8arrays/node_modules/multiformats/esm/src/basics.js"() {
      init_identity();
      init_base22();
      init_base8();
      init_base10();
      init_base16();
      init_base322();
      init_base36();
      init_base582();
      init_base64();
      init_base256emoji();
      init_sha2_browser();
      init_identity2();
      init_raw();
      init_json();
      init_src();
      bases = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, identity_exports), base2_exports), base8_exports), base10_exports), base16_exports), base32_exports), base36_exports), base58_exports), base64_exports), base256emoji_exports);
      hashes = __spreadValues(__spreadValues({}, sha2_browser_exports), identity_exports2);
    }
  });

  // coldsky/node_modules/uint8arrays/esm/src/util/bases.js
  function createCodec(name2, prefix2, encode13, decode21) {
    return {
      name: name2,
      prefix: prefix2,
      encoder: {
        name: name2,
        prefix: prefix2,
        encode: encode13
      },
      decoder: { decode: decode21 }
    };
  }
  var string, ascii, BASES, bases_default;
  var init_bases = __esm({
    "coldsky/node_modules/uint8arrays/esm/src/util/bases.js"() {
      init_basics();
      string = createCodec("utf8", "u", (buf2) => {
        const decoder2 = new TextDecoder("utf8");
        return "u" + decoder2.decode(buf2);
      }, (str) => {
        const encoder = new TextEncoder();
        return encoder.encode(str.substring(1));
      });
      ascii = createCodec("ascii", "a", (buf2) => {
        let string2 = "a";
        for (let i = 0; i < buf2.length; i++) {
          string2 += String.fromCharCode(buf2[i]);
        }
        return string2;
      }, (str) => {
        str = str.substring(1);
        const buf2 = new Uint8Array(str.length);
        for (let i = 0; i < str.length; i++) {
          buf2[i] = str.charCodeAt(i);
        }
        return buf2;
      });
      BASES = __spreadValues({
        utf8: string,
        "utf-8": string,
        hex: bases.base16,
        latin1: ascii,
        ascii,
        binary: ascii
      }, bases);
      bases_default = BASES;
    }
  });

  // coldsky/node_modules/uint8arrays/esm/src/from-string.js
  function fromString2(string2, encoding = "utf8") {
    const base5 = bases_default[encoding];
    if (!base5) {
      throw new Error(`Unsupported encoding "${encoding}"`);
    }
    return base5.decoder.decode(`${base5.prefix}${string2}`);
  }
  var init_from_string = __esm({
    "coldsky/node_modules/uint8arrays/esm/src/from-string.js"() {
      init_bases();
    }
  });

  // coldsky/node_modules/uint8arrays/esm/src/to-string.js
  function toString2(array, encoding = "utf8") {
    const base5 = bases_default[encoding];
    if (!base5) {
      throw new Error(`Unsupported encoding "${encoding}"`);
    }
    return base5.encoder.encode(array).substring(1);
  }
  var init_to_string = __esm({
    "coldsky/node_modules/uint8arrays/esm/src/to-string.js"() {
      init_bases();
    }
  });

  // coldsky/node_modules/uint8arrays/esm/src/xor.js
  function xor(a, b) {
    if (a.length !== b.length) {
      throw new Error("Inputs should have the same length");
    }
    const result = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
      result[i] = a[i] ^ b[i];
    }
    return result;
  }
  var init_xor = __esm({
    "coldsky/node_modules/uint8arrays/esm/src/xor.js"() {
    }
  });

  // coldsky/node_modules/uint8arrays/esm/src/index.js
  var src_exports = {};
  __export(src_exports, {
    compare: () => compare,
    concat: () => concat,
    equals: () => equals3,
    fromString: () => fromString2,
    toString: () => toString2,
    xor: () => xor
  });
  var init_src2 = __esm({
    "coldsky/node_modules/uint8arrays/esm/src/index.js"() {
      init_compare();
      init_concat();
      init_equals();
      init_from_string();
      init_to_string();
      init_xor();
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/ipld.js
  var require_ipld = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/ipld.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ipldEquals = exports.ipldToJson = exports.jsonToIpld = void 0;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var ui8 = __importStar((init_src2(), __toCommonJS(src_exports)));
      var jsonToIpld = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.jsonToIpld)(item));
        }
        if (val && typeof val === "object") {
          if (typeof val["$link"] === "string" && Object.keys(val).length === 1) {
            return cid_1.CID.parse(val["$link"]);
          }
          if (typeof val["$bytes"] === "string" && Object.keys(val).length === 1) {
            return ui8.fromString(val["$bytes"], "base64");
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.jsonToIpld)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.jsonToIpld = jsonToIpld;
      var ipldToJson = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.ipldToJson)(item));
        }
        if (val && typeof val === "object") {
          if (val instanceof Uint8Array) {
            return {
              $bytes: ui8.toString(val, "base64")
            };
          }
          if (cid_1.CID.asCID(val)) {
            return {
              $link: val.toString()
            };
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.ipldToJson)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.ipldToJson = ipldToJson;
      var ipldEquals = (a, b) => {
        var _a3;
        if (Array.isArray(a) && Array.isArray(b)) {
          if (a.length !== b.length)
            return false;
          for (let i = 0; i < a.length; i++) {
            if (!(0, exports.ipldEquals)(a[i], b[i]))
              return false;
          }
          return true;
        }
        if (a && b && typeof a === "object" && typeof b === "object") {
          if (a instanceof Uint8Array && b instanceof Uint8Array) {
            return ui8.equals(a, b);
          }
          if (cid_1.CID.asCID(a) && cid_1.CID.asCID(b)) {
            return (_a3 = cid_1.CID.asCID(a)) == null ? void 0 : _a3.equals(cid_1.CID.asCID(b));
          }
          if (Object.keys(a).length !== Object.keys(b).length)
            return false;
          for (const key of Object.keys(a)) {
            if (!(0, exports.ipldEquals)(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a === b;
      };
      exports.ipldEquals = ipldEquals;
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/retry.js
  var require_retry = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/retry.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.backoffMs = exports.retry = void 0;
      var util_1 = require_util2();
      function retry(_0) {
        return __async(this, arguments, function* (fn, opts = {}) {
          const { maxRetries = 3, retryable = () => true, getWaitMs = backoffMs } = opts;
          let retries = 0;
          let doneError;
          while (!doneError) {
            try {
              return yield fn();
            } catch (err) {
              const waitMs = getWaitMs(retries);
              const willRetry = retries < maxRetries && waitMs !== null && retryable(err);
              if (willRetry) {
                retries += 1;
                if (waitMs !== 0) {
                  yield (0, util_1.wait)(waitMs);
                }
              } else {
                doneError = err;
              }
            }
          }
          throw doneError;
        });
      }
      exports.retry = retry;
      function backoffMs(n, multiplier = 100, max = 1e3) {
        const exponentialMs = Math.pow(2, n) * multiplier;
        const ms = Math.min(exponentialMs, max);
        return jitter(ms);
      }
      exports.backoffMs = backoffMs;
      function jitter(value) {
        const delta = value * 0.15;
        return value + randomRange(-delta, delta);
      }
      function randomRange(from7, to) {
        const rand = Math.random() * (to - from7);
        return rand + from7;
      }
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/types.js
  var require_types2 = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.def = exports.schema = void 0;
      var cid_1 = (init_cid(), __toCommonJS(cid_exports));
      var zod_1 = require_lib();
      var cidSchema = zod_1.z.any().refine((obj) => cid_1.CID.asCID(obj) !== null, {
        message: "Not a CID"
      }).transform((obj) => cid_1.CID.asCID(obj));
      exports.schema = {
        cid: cidSchema,
        bytes: zod_1.z.instanceof(Uint8Array),
        string: zod_1.z.string(),
        array: zod_1.z.array(zod_1.z.unknown()),
        map: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()),
        unknown: zod_1.z.unknown()
      };
      exports.def = {
        cid: {
          name: "cid",
          schema: exports.schema.cid
        },
        bytes: {
          name: "bytes",
          schema: exports.schema.bytes
        },
        string: {
          name: "string",
          schema: exports.schema.string
        },
        map: {
          name: "map",
          schema: exports.schema.map
        },
        unknown: {
          name: "unknown",
          schema: exports.schema.unknown
        }
      };
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/times.js
  var require_times = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/times.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.addHoursToDate = exports.lessThanAgoMs = exports.DAY = exports.HOUR = exports.MINUTE = exports.SECOND = void 0;
      exports.SECOND = 1e3;
      exports.MINUTE = exports.SECOND * 60;
      exports.HOUR = exports.MINUTE * 60;
      exports.DAY = exports.HOUR * 24;
      var lessThanAgoMs = (time, range) => {
        return Date.now() < time.getTime() + range;
      };
      exports.lessThanAgoMs = lessThanAgoMs;
      var addHoursToDate = (hours, startingDate) => {
        const currentDate = startingDate ? new Date(startingDate) : /* @__PURE__ */ new Date();
        currentDate.setHours(currentDate.getHours() + hours);
        return currentDate;
      };
      exports.addHoursToDate = addHoursToDate;
    }
  });

  // coldsky/node_modules/graphemer/lib/boundaries.js
  var require_boundaries = __commonJS({
    "coldsky/node_modules/graphemer/lib/boundaries.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;
      var CLUSTER_BREAK;
      (function(CLUSTER_BREAK2) {
        CLUSTER_BREAK2[CLUSTER_BREAK2["CR"] = 0] = "CR";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LF"] = 1] = "LF";
        CLUSTER_BREAK2[CLUSTER_BREAK2["CONTROL"] = 2] = "CONTROL";
        CLUSTER_BREAK2[CLUSTER_BREAK2["EXTEND"] = 3] = "EXTEND";
        CLUSTER_BREAK2[CLUSTER_BREAK2["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
        CLUSTER_BREAK2[CLUSTER_BREAK2["SPACINGMARK"] = 5] = "SPACINGMARK";
        CLUSTER_BREAK2[CLUSTER_BREAK2["L"] = 6] = "L";
        CLUSTER_BREAK2[CLUSTER_BREAK2["V"] = 7] = "V";
        CLUSTER_BREAK2[CLUSTER_BREAK2["T"] = 8] = "T";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LV"] = 9] = "LV";
        CLUSTER_BREAK2[CLUSTER_BREAK2["LVT"] = 10] = "LVT";
        CLUSTER_BREAK2[CLUSTER_BREAK2["OTHER"] = 11] = "OTHER";
        CLUSTER_BREAK2[CLUSTER_BREAK2["PREPEND"] = 12] = "PREPEND";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE"] = 13] = "E_BASE";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_MODIFIER"] = 14] = "E_MODIFIER";
        CLUSTER_BREAK2[CLUSTER_BREAK2["ZWJ"] = 15] = "ZWJ";
        CLUSTER_BREAK2[CLUSTER_BREAK2["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
        CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
      })(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
      exports.EXTENDED_PICTOGRAPHIC = 101;
    }
  });

  // coldsky/node_modules/graphemer/lib/GraphemerHelper.js
  var require_GraphemerHelper = __commonJS({
    "coldsky/node_modules/graphemer/lib/GraphemerHelper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var boundaries_1 = require_boundaries();
      var NotBreak = 0;
      var BreakStart = 1;
      var Break = 2;
      var BreakLastRegional = 3;
      var BreakPenultimateRegional = 4;
      var GraphemerHelper = class {
        /**
         * Check if the the character at the position {pos} of the string is surrogate
         * @param str {string}
         * @param pos {number}
         * @returns {boolean}
         */
        static isSurrogate(str, pos) {
          return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;
        }
        /**
         * The String.prototype.codePointAt polyfill
         * Private function, gets a Unicode code point from a JavaScript UTF-16 string
         * handling surrogate pairs appropriately
         * @param str {string}
         * @param idx {number}
         * @returns {number}
         */
        static codePointAt(str, idx) {
          if (idx === void 0) {
            idx = 0;
          }
          const code2 = str.charCodeAt(idx);
          if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {
            const hi = code2;
            const low = str.charCodeAt(idx + 1);
            if (56320 <= low && low <= 57343) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return hi;
          }
          if (56320 <= code2 && code2 <= 57343 && idx >= 1) {
            const hi = str.charCodeAt(idx - 1);
            const low = code2;
            if (55296 <= hi && hi <= 56319) {
              return (hi - 55296) * 1024 + (low - 56320) + 65536;
            }
            return low;
          }
          return code2;
        }
        //
        /**
         * Private function, returns whether a break is allowed between the two given grapheme breaking classes
         * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
         * @param start {number}
         * @param mid {Array<number>}
         * @param end {number}
         * @param startEmoji {number}
         * @param midEmoji {Array<number>}
         * @param endEmoji {number}
         * @returns {number}
         */
        static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
          const all = [start].concat(mid).concat([end]);
          const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);
          const previous = all[all.length - 2];
          const next2 = end;
          const nextEmoji = endEmoji;
          const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
          if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c) {
            return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
          }) && [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {
            if (all.filter(function(c) {
              return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
            }).length % 2 === 1) {
              return BreakLastRegional;
            } else {
              return BreakPenultimateRegional;
            }
          }
          if (previous === boundaries_1.CLUSTER_BREAK.CR && next2 === boundaries_1.CLUSTER_BREAK.LF) {
            return NotBreak;
          } else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) {
            return BreakStart;
          } else if (next2 === boundaries_1.CLUSTER_BREAK.CONTROL || next2 === boundaries_1.CLUSTER_BREAK.CR || next2 === boundaries_1.CLUSTER_BREAK.LF) {
            return BreakStart;
          } else if (previous === boundaries_1.CLUSTER_BREAK.L && (next2 === boundaries_1.CLUSTER_BREAK.L || next2 === boundaries_1.CLUSTER_BREAK.V || next2 === boundaries_1.CLUSTER_BREAK.LV || next2 === boundaries_1.CLUSTER_BREAK.LVT)) {
            return NotBreak;
          } else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next2 === boundaries_1.CLUSTER_BREAK.V || next2 === boundaries_1.CLUSTER_BREAK.T)) {
            return NotBreak;
          } else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next2 === boundaries_1.CLUSTER_BREAK.T) {
            return NotBreak;
          } else if (next2 === boundaries_1.CLUSTER_BREAK.EXTEND || next2 === boundaries_1.CLUSTER_BREAK.ZWJ) {
            return NotBreak;
          } else if (next2 === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {
            return NotBreak;
          } else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {
            return NotBreak;
          }
          const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
          if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function(c) {
            return c === boundaries_1.CLUSTER_BREAK.EXTEND;
          }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {
            return NotBreak;
          }
          if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {
            return Break;
          }
          if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next2 === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {
            return NotBreak;
          }
          return BreakStart;
        }
      };
      exports.default = GraphemerHelper;
    }
  });

  // coldsky/node_modules/graphemer/lib/GraphemerIterator.js
  var require_GraphemerIterator = __commonJS({
    "coldsky/node_modules/graphemer/lib/GraphemerIterator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var GraphemerIterator = class {
        constructor(str, nextBreak) {
          this._index = 0;
          this._str = str;
          this._nextBreak = nextBreak;
        }
        [Symbol.iterator]() {
          return this;
        }
        next() {
          let brk;
          if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
            const value = this._str.slice(this._index, brk);
            this._index = brk;
            return { value, done: false };
          }
          if (this._index < this._str.length) {
            const value = this._str.slice(this._index);
            this._index = this._str.length;
            return { value, done: false };
          }
          return { value: void 0, done: true };
        }
      };
      exports.default = GraphemerIterator;
    }
  });

  // coldsky/node_modules/graphemer/lib/Graphemer.js
  var require_Graphemer = __commonJS({
    "coldsky/node_modules/graphemer/lib/Graphemer.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var boundaries_1 = require_boundaries();
      var GraphemerHelper_1 = __importDefault(require_GraphemerHelper());
      var GraphemerIterator_1 = __importDefault(require_GraphemerIterator());
      var Graphemer = class _Graphemer {
        /**
         * Returns the next grapheme break in the string after the given index
         * @param string {string}
         * @param index {number}
         * @returns {number}
         */
        static nextBreak(string2, index) {
          if (index === void 0) {
            index = 0;
          }
          if (index < 0) {
            return 0;
          }
          if (index >= string2.length - 1) {
            return string2.length;
          }
          const prevCP = GraphemerHelper_1.default.codePointAt(string2, index);
          const prev2 = _Graphemer.getGraphemeBreakProperty(prevCP);
          const prevEmoji = _Graphemer.getEmojiProperty(prevCP);
          const mid = [];
          const midEmoji = [];
          for (let i = index + 1; i < string2.length; i++) {
            if (GraphemerHelper_1.default.isSurrogate(string2, i - 1)) {
              continue;
            }
            const nextCP = GraphemerHelper_1.default.codePointAt(string2, i);
            const next2 = _Graphemer.getGraphemeBreakProperty(nextCP);
            const nextEmoji = _Graphemer.getEmojiProperty(nextCP);
            if (GraphemerHelper_1.default.shouldBreak(prev2, mid, next2, prevEmoji, midEmoji, nextEmoji)) {
              return i;
            }
            mid.push(next2);
            midEmoji.push(nextEmoji);
          }
          return string2.length;
        }
        /**
         * Breaks the given string into an array of grapheme clusters
         * @param str {string}
         * @returns {string[]}
         */
        splitGraphemes(str) {
          const res = [];
          let index = 0;
          let brk;
          while ((brk = _Graphemer.nextBreak(str, index)) < str.length) {
            res.push(str.slice(index, brk));
            index = brk;
          }
          if (index < str.length) {
            res.push(str.slice(index));
          }
          return res;
        }
        /**
         * Returns an iterator of grapheme clusters in the given string
         * @param str {string}
         * @returns {GraphemerIterator}
         */
        iterateGraphemes(str) {
          return new GraphemerIterator_1.default(str, _Graphemer.nextBreak);
        }
        /**
         * Returns the number of grapheme clusters in the given string
         * @param str {string}
         * @returns {number}
         */
        countGraphemes(str) {
          let count = 0;
          let index = 0;
          let brk;
          while ((brk = _Graphemer.nextBreak(str, index)) < str.length) {
            index = brk;
            count++;
          }
          if (index < str.length) {
            count++;
          }
          return count;
        }
        /**
         * Given a Unicode code point, determines this symbol's grapheme break property
         * @param code {number} Unicode code point
         * @returns {number}
         */
        static getGraphemeBreakProperty(code2) {
          if (code2 < 48905) {
            if (code2 < 44116) {
              if (code2 < 4141) {
                if (code2 < 2818) {
                  if (code2 < 2363) {
                    if (code2 < 1759) {
                      if (code2 < 1471) {
                        if (code2 < 127) {
                          if (code2 < 11) {
                            if (code2 < 10) {
                              if (0 <= code2 && code2 <= 9) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (10 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LF;
                              }
                            }
                          } else {
                            if (code2 < 13) {
                              if (11 <= code2 && code2 <= 12) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 14) {
                                if (13 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.CR;
                                }
                              } else {
                                if (14 <= code2 && code2 <= 31) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 768) {
                            if (code2 < 173) {
                              if (127 <= code2 && code2 <= 159) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (173 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            }
                          } else {
                            if (code2 < 1155) {
                              if (768 <= code2 && code2 <= 879) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1425) {
                                if (1155 <= code2 && code2 <= 1161) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1425 <= code2 && code2 <= 1469) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 1552) {
                          if (code2 < 1476) {
                            if (code2 < 1473) {
                              if (1471 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1473 <= code2 && code2 <= 1474) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 1479) {
                              if (1476 <= code2 && code2 <= 1477) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1536) {
                                if (1479 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1536 <= code2 && code2 <= 1541) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 1648) {
                            if (code2 < 1564) {
                              if (1552 <= code2 && code2 <= 1562) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1611) {
                                if (1564 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (1611 <= code2 && code2 <= 1631) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 1750) {
                              if (1648 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 1757) {
                                if (1750 <= code2 && code2 <= 1756) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (1757 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2075) {
                        if (code2 < 1840) {
                          if (code2 < 1770) {
                            if (code2 < 1767) {
                              if (1759 <= code2 && code2 <= 1764) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1767 <= code2 && code2 <= 1768) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 1807) {
                              if (1770 <= code2 && code2 <= 1773) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1807 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                              if (1809 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 2027) {
                            if (code2 < 1958) {
                              if (1840 <= code2 && code2 <= 1866) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1958 <= code2 && code2 <= 1968) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2045) {
                              if (2027 <= code2 && code2 <= 2035) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2070) {
                                if (2045 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2070 <= code2 && code2 <= 2073) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2200) {
                          if (code2 < 2089) {
                            if (code2 < 2085) {
                              if (2075 <= code2 && code2 <= 2083) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2085 <= code2 && code2 <= 2087) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2137) {
                              if (2089 <= code2 && code2 <= 2093) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2192) {
                                if (2137 <= code2 && code2 <= 2139) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2192 <= code2 && code2 <= 2193) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2275) {
                            if (code2 < 2250) {
                              if (2200 <= code2 && code2 <= 2207) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2274) {
                                if (2250 <= code2 && code2 <= 2273) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2274 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2307) {
                              if (2275 <= code2 && code2 <= 2306) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2307 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (2362 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 2561) {
                      if (code2 < 2434) {
                        if (code2 < 2381) {
                          if (code2 < 2366) {
                            if (2363 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (2364 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2369) {
                              if (2366 <= code2 && code2 <= 2368) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2377) {
                                if (2369 <= code2 && code2 <= 2376) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2377 <= code2 && code2 <= 2380) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2385) {
                            if (code2 < 2382) {
                              if (2381 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2382 <= code2 && code2 <= 2383) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2402) {
                              if (2385 <= code2 && code2 <= 2391) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2433) {
                                if (2402 <= code2 && code2 <= 2403) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2433 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2503) {
                          if (code2 < 2494) {
                            if (code2 < 2492) {
                              if (2434 <= code2 && code2 <= 2435) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2492 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2495) {
                              if (2494 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2497) {
                                if (2495 <= code2 && code2 <= 2496) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2497 <= code2 && code2 <= 2500) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2519) {
                            if (code2 < 2507) {
                              if (2503 <= code2 && code2 <= 2504) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2509) {
                                if (2507 <= code2 && code2 <= 2508) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2509 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2530) {
                              if (2519 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2558) {
                                if (2530 <= code2 && code2 <= 2531) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2558 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2691) {
                        if (code2 < 2631) {
                          if (code2 < 2620) {
                            if (code2 < 2563) {
                              if (2561 <= code2 && code2 <= 2562) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2563 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2622) {
                              if (2620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2625) {
                                if (2622 <= code2 && code2 <= 2624) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2625 <= code2 && code2 <= 2626) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2672) {
                            if (code2 < 2635) {
                              if (2631 <= code2 && code2 <= 2632) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2641) {
                                if (2635 <= code2 && code2 <= 2637) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2641 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2677) {
                              if (2672 <= code2 && code2 <= 2673) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2689) {
                                if (2677 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2689 <= code2 && code2 <= 2690) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2761) {
                          if (code2 < 2750) {
                            if (2691 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (2748 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2753) {
                              if (2750 <= code2 && code2 <= 2752) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2759) {
                                if (2753 <= code2 && code2 <= 2757) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2759 <= code2 && code2 <= 2760) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2786) {
                            if (code2 < 2763) {
                              if (2761 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 2765) {
                                if (2763 <= code2 && code2 <= 2764) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2765 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 2810) {
                              if (2786 <= code2 && code2 <= 2787) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2817) {
                                if (2810 <= code2 && code2 <= 2815) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2817 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 3315) {
                    if (code2 < 3076) {
                      if (code2 < 2946) {
                        if (code2 < 2887) {
                          if (code2 < 2878) {
                            if (code2 < 2876) {
                              if (2818 <= code2 && code2 <= 2819) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2876 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 2880) {
                              if (2878 <= code2 && code2 <= 2879) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2881) {
                                if (2880 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (2881 <= code2 && code2 <= 2884) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 2893) {
                            if (code2 < 2891) {
                              if (2887 <= code2 && code2 <= 2888) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2891 <= code2 && code2 <= 2892) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 2901) {
                              if (2893 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 2914) {
                                if (2901 <= code2 && code2 <= 2903) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (2914 <= code2 && code2 <= 2915) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3014) {
                          if (code2 < 3007) {
                            if (2946 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3006 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3008) {
                              if (3007 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3009) {
                                if (3008 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3009 <= code2 && code2 <= 3010) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3031) {
                            if (code2 < 3018) {
                              if (3014 <= code2 && code2 <= 3016) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3021) {
                                if (3018 <= code2 && code2 <= 3020) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3021 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3072) {
                              if (3031 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3073) {
                                if (3072 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3073 <= code2 && code2 <= 3075) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3262) {
                        if (code2 < 3146) {
                          if (code2 < 3134) {
                            if (3076 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3132 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3137) {
                              if (3134 <= code2 && code2 <= 3136) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3142) {
                                if (3137 <= code2 && code2 <= 3140) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3142 <= code2 && code2 <= 3144) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3201) {
                            if (code2 < 3157) {
                              if (3146 <= code2 && code2 <= 3149) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3170) {
                                if (3157 <= code2 && code2 <= 3158) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3170 <= code2 && code2 <= 3171) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3202) {
                              if (3201 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3260) {
                                if (3202 <= code2 && code2 <= 3203) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3260 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3270) {
                          if (code2 < 3264) {
                            if (3262 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (3263 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3266) {
                              if (3264 <= code2 && code2 <= 3265) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3267) {
                                if (3266 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3267 <= code2 && code2 <= 3268) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3276) {
                            if (code2 < 3271) {
                              if (3270 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3274) {
                                if (3271 <= code2 && code2 <= 3272) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3274 <= code2 && code2 <= 3275) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3285) {
                              if (3276 <= code2 && code2 <= 3277) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3298) {
                                if (3285 <= code2 && code2 <= 3286) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3298 <= code2 && code2 <= 3299) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 3551) {
                      if (code2 < 3406) {
                        if (code2 < 3391) {
                          if (code2 < 3330) {
                            if (code2 < 3328) {
                              if (3315 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3328 <= code2 && code2 <= 3329) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 3387) {
                              if (3330 <= code2 && code2 <= 3331) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3390) {
                                if (3387 <= code2 && code2 <= 3388) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3390 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3398) {
                            if (code2 < 3393) {
                              if (3391 <= code2 && code2 <= 3392) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3393 <= code2 && code2 <= 3396) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 3402) {
                              if (3398 <= code2 && code2 <= 3400) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3405) {
                                if (3402 <= code2 && code2 <= 3404) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3405 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3530) {
                          if (code2 < 3426) {
                            if (3406 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                            if (3415 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3457) {
                              if (3426 <= code2 && code2 <= 3427) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3458) {
                                if (3457 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3458 <= code2 && code2 <= 3459) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3538) {
                            if (code2 < 3535) {
                              if (3530 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3536) {
                                if (3535 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3536 <= code2 && code2 <= 3537) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3542) {
                              if (3538 <= code2 && code2 <= 3540) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3544) {
                                if (3542 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3544 <= code2 && code2 <= 3550) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3893) {
                        if (code2 < 3655) {
                          if (code2 < 3633) {
                            if (code2 < 3570) {
                              if (3551 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3570 <= code2 && code2 <= 3571) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 3635) {
                              if (3633 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3636) {
                                if (3635 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3636 <= code2 && code2 <= 3642) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3764) {
                            if (code2 < 3761) {
                              if (3655 <= code2 && code2 <= 3662) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3761 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (3763 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 3784) {
                              if (3764 <= code2 && code2 <= 3772) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3864) {
                                if (3784 <= code2 && code2 <= 3790) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3864 <= code2 && code2 <= 3865) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3967) {
                          if (code2 < 3897) {
                            if (3893 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3895 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3902) {
                              if (3897 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 3953) {
                                if (3902 <= code2 && code2 <= 3903) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (3953 <= code2 && code2 <= 3966) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 3981) {
                            if (code2 < 3968) {
                              if (3967 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 3974) {
                                if (3968 <= code2 && code2 <= 3972) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (3974 <= code2 && code2 <= 3975) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 3993) {
                              if (3981 <= code2 && code2 <= 3991) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4038) {
                                if (3993 <= code2 && code2 <= 4028) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4038 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 7204) {
                  if (code2 < 6448) {
                    if (code2 < 5938) {
                      if (code2 < 4226) {
                        if (code2 < 4157) {
                          if (code2 < 4146) {
                            if (code2 < 4145) {
                              if (4141 <= code2 && code2 <= 4144) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4145 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 4153) {
                              if (4146 <= code2 && code2 <= 4151) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4155) {
                                if (4153 <= code2 && code2 <= 4154) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4155 <= code2 && code2 <= 4156) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 4184) {
                            if (code2 < 4182) {
                              if (4157 <= code2 && code2 <= 4158) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4182 <= code2 && code2 <= 4183) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 4190) {
                              if (4184 <= code2 && code2 <= 4185) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 4209) {
                                if (4190 <= code2 && code2 <= 4192) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (4209 <= code2 && code2 <= 4212) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 4352) {
                          if (code2 < 4229) {
                            if (4226 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (4228 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 4237) {
                              if (4229 <= code2 && code2 <= 4230) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4237 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (4253 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 4957) {
                            if (code2 < 4448) {
                              if (4352 <= code2 && code2 <= 4447) {
                                return boundaries_1.CLUSTER_BREAK.L;
                              }
                            } else {
                              if (code2 < 4520) {
                                if (4448 <= code2 && code2 <= 4519) {
                                  return boundaries_1.CLUSTER_BREAK.V;
                                }
                              } else {
                                if (4520 <= code2 && code2 <= 4607) {
                                  return boundaries_1.CLUSTER_BREAK.T;
                                }
                              }
                            }
                          } else {
                            if (code2 < 5906) {
                              if (4957 <= code2 && code2 <= 4959) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 5909) {
                                if (5906 <= code2 && code2 <= 5908) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (5909 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 6089) {
                        if (code2 < 6070) {
                          if (code2 < 5970) {
                            if (code2 < 5940) {
                              if (5938 <= code2 && code2 <= 5939) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (5940 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 6002) {
                              if (5970 <= code2 && code2 <= 5971) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6068) {
                                if (6002 <= code2 && code2 <= 6003) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6068 <= code2 && code2 <= 6069) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6078) {
                            if (code2 < 6071) {
                              if (6070 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6071 <= code2 && code2 <= 6077) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6086) {
                              if (6078 <= code2 && code2 <= 6085) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6087) {
                                if (6086 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6087 <= code2 && code2 <= 6088) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6277) {
                          if (code2 < 6155) {
                            if (code2 < 6109) {
                              if (6089 <= code2 && code2 <= 6099) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6109 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6158) {
                              if (6155 <= code2 && code2 <= 6157) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6158 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                              if (6159 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 6435) {
                            if (code2 < 6313) {
                              if (6277 <= code2 && code2 <= 6278) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6432) {
                                if (6313 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6432 <= code2 && code2 <= 6434) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 6439) {
                              if (6435 <= code2 && code2 <= 6438) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6441) {
                                if (6439 <= code2 && code2 <= 6440) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6441 <= code2 && code2 <= 6443) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 6971) {
                      if (code2 < 6744) {
                        if (code2 < 6681) {
                          if (code2 < 6451) {
                            if (code2 < 6450) {
                              if (6448 <= code2 && code2 <= 6449) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6450 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6457) {
                              if (6451 <= code2 && code2 <= 6456) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6679) {
                                if (6457 <= code2 && code2 <= 6459) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6679 <= code2 && code2 <= 6680) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6741) {
                            if (code2 < 6683) {
                              if (6681 <= code2 && code2 <= 6682) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6683 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6742) {
                              if (6741 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6742 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (6743 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6771) {
                          if (code2 < 6754) {
                            if (code2 < 6752) {
                              if (6744 <= code2 && code2 <= 6750) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6752 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 6757) {
                              if (6754 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6765) {
                                if (6757 <= code2 && code2 <= 6764) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6765 <= code2 && code2 <= 6770) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 6912) {
                            if (code2 < 6783) {
                              if (6771 <= code2 && code2 <= 6780) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6832) {
                                if (6783 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6832 <= code2 && code2 <= 6862) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 6916) {
                              if (6912 <= code2 && code2 <= 6915) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 6964) {
                                if (6916 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (6964 <= code2 && code2 <= 6970) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 7080) {
                        if (code2 < 7019) {
                          if (code2 < 6973) {
                            if (6971 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (6972 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 6978) {
                              if (6973 <= code2 && code2 <= 6977) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 6979) {
                                if (6978 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (6979 <= code2 && code2 <= 6980) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 7073) {
                            if (code2 < 7040) {
                              if (7019 <= code2 && code2 <= 7027) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 7042) {
                                if (7040 <= code2 && code2 <= 7041) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7042 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 7074) {
                              if (7073 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7078) {
                                if (7074 <= code2 && code2 <= 7077) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7078 <= code2 && code2 <= 7079) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 7144) {
                          if (code2 < 7083) {
                            if (code2 < 7082) {
                              if (7080 <= code2 && code2 <= 7081) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7082 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 7142) {
                              if (7083 <= code2 && code2 <= 7085) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7142 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (7143 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 7150) {
                            if (code2 < 7146) {
                              if (7144 <= code2 && code2 <= 7145) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 7149) {
                                if (7146 <= code2 && code2 <= 7148) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (7149 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 7151) {
                              if (7150 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7154) {
                                if (7151 <= code2 && code2 <= 7153) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7154 <= code2 && code2 <= 7155) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 43346) {
                    if (code2 < 11647) {
                      if (code2 < 7415) {
                        if (code2 < 7380) {
                          if (code2 < 7220) {
                            if (code2 < 7212) {
                              if (7204 <= code2 && code2 <= 7211) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (7212 <= code2 && code2 <= 7219) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 7222) {
                              if (7220 <= code2 && code2 <= 7221) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 7376) {
                                if (7222 <= code2 && code2 <= 7223) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (7376 <= code2 && code2 <= 7378) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 7394) {
                            if (code2 < 7393) {
                              if (7380 <= code2 && code2 <= 7392) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7393 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 7405) {
                              if (7394 <= code2 && code2 <= 7400) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7405 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (7412 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 8205) {
                          if (code2 < 7616) {
                            if (code2 < 7416) {
                              if (7415 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (7416 <= code2 && code2 <= 7417) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 8203) {
                              if (7616 <= code2 && code2 <= 7679) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (8203 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                              if (8204 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 8288) {
                            if (code2 < 8206) {
                              if (8205 === code2) {
                                return boundaries_1.CLUSTER_BREAK.ZWJ;
                              }
                            } else {
                              if (code2 < 8232) {
                                if (8206 <= code2 && code2 <= 8207) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (8232 <= code2 && code2 <= 8238) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          } else {
                            if (code2 < 8400) {
                              if (8288 <= code2 && code2 <= 8303) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 11503) {
                                if (8400 <= code2 && code2 <= 8432) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (11503 <= code2 && code2 <= 11505) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 43043) {
                        if (code2 < 42612) {
                          if (code2 < 12330) {
                            if (code2 < 11744) {
                              if (11647 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (11744 <= code2 && code2 <= 11775) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 12441) {
                              if (12330 <= code2 && code2 <= 12335) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 42607) {
                                if (12441 <= code2 && code2 <= 12442) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (42607 <= code2 && code2 <= 42610) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43010) {
                            if (code2 < 42654) {
                              if (42612 <= code2 && code2 <= 42621) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 42736) {
                                if (42654 <= code2 && code2 <= 42655) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (42736 <= code2 && code2 <= 42737) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 43014) {
                              if (43010 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43014 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43019 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43188) {
                          if (code2 < 43047) {
                            if (code2 < 43045) {
                              if (43043 <= code2 && code2 <= 43044) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43045 <= code2 && code2 <= 43046) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43052) {
                              if (43047 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43136) {
                                if (43052 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43136 <= code2 && code2 <= 43137) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43263) {
                            if (code2 < 43204) {
                              if (43188 <= code2 && code2 <= 43203) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43232) {
                                if (43204 <= code2 && code2 <= 43205) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43232 <= code2 && code2 <= 43249) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 43302) {
                              if (43263 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 43335) {
                                if (43302 <= code2 && code2 <= 43309) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43335 <= code2 && code2 <= 43345) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 43698) {
                      if (code2 < 43493) {
                        if (code2 < 43444) {
                          if (code2 < 43392) {
                            if (code2 < 43360) {
                              if (43346 <= code2 && code2 <= 43347) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43360 <= code2 && code2 <= 43388) {
                                return boundaries_1.CLUSTER_BREAK.L;
                              }
                            }
                          } else {
                            if (code2 < 43395) {
                              if (43392 <= code2 && code2 <= 43394) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43395 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (43443 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 43450) {
                            if (code2 < 43446) {
                              if (43444 <= code2 && code2 <= 43445) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43446 <= code2 && code2 <= 43449) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43452) {
                              if (43450 <= code2 && code2 <= 43451) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43454) {
                                if (43452 <= code2 && code2 <= 43453) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43454 <= code2 && code2 <= 43456) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43573) {
                          if (code2 < 43567) {
                            if (code2 < 43561) {
                              if (43493 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43561 <= code2 && code2 <= 43566) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43569) {
                              if (43567 <= code2 && code2 <= 43568) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 43571) {
                                if (43569 <= code2 && code2 <= 43570) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (43571 <= code2 && code2 <= 43572) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 43597) {
                            if (code2 < 43587) {
                              if (43573 <= code2 && code2 <= 43574) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43587 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43596 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43644) {
                              if (43597 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43644 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43696 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44006) {
                        if (code2 < 43756) {
                          if (code2 < 43710) {
                            if (code2 < 43703) {
                              if (43698 <= code2 && code2 <= 43700) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43703 <= code2 && code2 <= 43704) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 43713) {
                              if (43710 <= code2 && code2 <= 43711) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43713 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (43755 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 43766) {
                            if (code2 < 43758) {
                              if (43756 <= code2 && code2 <= 43757) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 43765) {
                                if (43758 <= code2 && code2 <= 43759) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (43765 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44003) {
                              if (43766 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 44005) {
                                if (44003 <= code2 && code2 <= 44004) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (44005 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44032) {
                          if (code2 < 44009) {
                            if (code2 < 44008) {
                              if (44006 <= code2 && code2 <= 44007) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (44008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 44012) {
                              if (44009 <= code2 && code2 <= 44010) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (44012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (44013 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 44061) {
                            if (code2 < 44033) {
                              if (44032 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44060) {
                                if (44033 <= code2 && code2 <= 44059) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44060 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44088) {
                              if (44061 <= code2 && code2 <= 44087) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44089) {
                                if (44088 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44089 <= code2 && code2 <= 44115) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 46497) {
                if (code2 < 45293) {
                  if (code2 < 44704) {
                    if (code2 < 44397) {
                      if (code2 < 44256) {
                        if (code2 < 44173) {
                          if (code2 < 44144) {
                            if (code2 < 44117) {
                              if (44116 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44117 <= code2 && code2 <= 44143) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44145) {
                              if (44144 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44172) {
                                if (44145 <= code2 && code2 <= 44171) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44172 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44201) {
                            if (code2 < 44200) {
                              if (44173 <= code2 && code2 <= 44199) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44200 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44228) {
                              if (44201 <= code2 && code2 <= 44227) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44229) {
                                if (44228 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44229 <= code2 && code2 <= 44255) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44313) {
                          if (code2 < 44284) {
                            if (code2 < 44257) {
                              if (44256 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44257 <= code2 && code2 <= 44283) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44285) {
                              if (44284 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44312) {
                                if (44285 <= code2 && code2 <= 44311) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44312 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44368) {
                            if (code2 < 44340) {
                              if (44313 <= code2 && code2 <= 44339) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44341) {
                                if (44340 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44341 <= code2 && code2 <= 44367) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44369) {
                              if (44368 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44396) {
                                if (44369 <= code2 && code2 <= 44395) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44396 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44537) {
                        if (code2 < 44480) {
                          if (code2 < 44425) {
                            if (code2 < 44424) {
                              if (44397 <= code2 && code2 <= 44423) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44424 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44452) {
                              if (44425 <= code2 && code2 <= 44451) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44453) {
                                if (44452 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44453 <= code2 && code2 <= 44479) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44508) {
                            if (code2 < 44481) {
                              if (44480 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44481 <= code2 && code2 <= 44507) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44509) {
                              if (44508 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44536) {
                                if (44509 <= code2 && code2 <= 44535) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44536 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44620) {
                          if (code2 < 44565) {
                            if (code2 < 44564) {
                              if (44537 <= code2 && code2 <= 44563) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44564 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44592) {
                              if (44565 <= code2 && code2 <= 44591) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44593) {
                                if (44592 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44593 <= code2 && code2 <= 44619) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44649) {
                            if (code2 < 44621) {
                              if (44620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44648) {
                                if (44621 <= code2 && code2 <= 44647) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44648 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44676) {
                              if (44649 <= code2 && code2 <= 44675) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44677) {
                                if (44676 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44677 <= code2 && code2 <= 44703) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 44985) {
                      if (code2 < 44844) {
                        if (code2 < 44761) {
                          if (code2 < 44732) {
                            if (code2 < 44705) {
                              if (44704 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44705 <= code2 && code2 <= 44731) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44733) {
                              if (44732 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44760) {
                                if (44733 <= code2 && code2 <= 44759) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44760 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44789) {
                            if (code2 < 44788) {
                              if (44761 <= code2 && code2 <= 44787) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44788 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 44816) {
                              if (44789 <= code2 && code2 <= 44815) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44817) {
                                if (44816 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44817 <= code2 && code2 <= 44843) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44901) {
                          if (code2 < 44872) {
                            if (code2 < 44845) {
                              if (44844 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44845 <= code2 && code2 <= 44871) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 44873) {
                              if (44872 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44900) {
                                if (44873 <= code2 && code2 <= 44899) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44900 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 44956) {
                            if (code2 < 44928) {
                              if (44901 <= code2 && code2 <= 44927) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 44929) {
                                if (44928 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (44929 <= code2 && code2 <= 44955) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 44957) {
                              if (44956 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 44984) {
                                if (44957 <= code2 && code2 <= 44983) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (44984 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45152) {
                        if (code2 < 45068) {
                          if (code2 < 45013) {
                            if (code2 < 45012) {
                              if (44985 <= code2 && code2 <= 45011) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45040) {
                              if (45013 <= code2 && code2 <= 45039) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45041) {
                                if (45040 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45041 <= code2 && code2 <= 45067) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45097) {
                            if (code2 < 45069) {
                              if (45068 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45096) {
                                if (45069 <= code2 && code2 <= 45095) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45096 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45124) {
                              if (45097 <= code2 && code2 <= 45123) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45125) {
                                if (45124 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45125 <= code2 && code2 <= 45151) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45209) {
                          if (code2 < 45180) {
                            if (code2 < 45153) {
                              if (45152 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45153 <= code2 && code2 <= 45179) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45181) {
                              if (45180 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45208) {
                                if (45181 <= code2 && code2 <= 45207) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45208 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45264) {
                            if (code2 < 45236) {
                              if (45209 <= code2 && code2 <= 45235) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45237) {
                                if (45236 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45237 <= code2 && code2 <= 45263) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45265) {
                              if (45264 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45292) {
                                if (45265 <= code2 && code2 <= 45291) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45292 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 45908) {
                    if (code2 < 45600) {
                      if (code2 < 45433) {
                        if (code2 < 45376) {
                          if (code2 < 45321) {
                            if (code2 < 45320) {
                              if (45293 <= code2 && code2 <= 45319) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45320 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45348) {
                              if (45321 <= code2 && code2 <= 45347) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45349) {
                                if (45348 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45349 <= code2 && code2 <= 45375) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45404) {
                            if (code2 < 45377) {
                              if (45376 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45377 <= code2 && code2 <= 45403) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45405) {
                              if (45404 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45432) {
                                if (45405 <= code2 && code2 <= 45431) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45432 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45516) {
                          if (code2 < 45461) {
                            if (code2 < 45460) {
                              if (45433 <= code2 && code2 <= 45459) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45460 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45488) {
                              if (45461 <= code2 && code2 <= 45487) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45489) {
                                if (45488 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45489 <= code2 && code2 <= 45515) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45545) {
                            if (code2 < 45517) {
                              if (45516 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45544) {
                                if (45517 <= code2 && code2 <= 45543) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45544 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45572) {
                              if (45545 <= code2 && code2 <= 45571) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45573) {
                                if (45572 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45573 <= code2 && code2 <= 45599) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45741) {
                        if (code2 < 45657) {
                          if (code2 < 45628) {
                            if (code2 < 45601) {
                              if (45600 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45601 <= code2 && code2 <= 45627) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45629) {
                              if (45628 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45656) {
                                if (45629 <= code2 && code2 <= 45655) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45656 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45712) {
                            if (code2 < 45684) {
                              if (45657 <= code2 && code2 <= 45683) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45685) {
                                if (45684 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45685 <= code2 && code2 <= 45711) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45713) {
                              if (45712 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45740) {
                                if (45713 <= code2 && code2 <= 45739) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45740 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45824) {
                          if (code2 < 45769) {
                            if (code2 < 45768) {
                              if (45741 <= code2 && code2 <= 45767) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45768 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 45796) {
                              if (45769 <= code2 && code2 <= 45795) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45797) {
                                if (45796 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45797 <= code2 && code2 <= 45823) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45853) {
                            if (code2 < 45825) {
                              if (45824 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45852) {
                                if (45825 <= code2 && code2 <= 45851) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45852 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 45880) {
                              if (45853 <= code2 && code2 <= 45879) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 45881) {
                                if (45880 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (45881 <= code2 && code2 <= 45907) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 46189) {
                      if (code2 < 46048) {
                        if (code2 < 45965) {
                          if (code2 < 45936) {
                            if (code2 < 45909) {
                              if (45908 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45909 <= code2 && code2 <= 45935) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 45937) {
                              if (45936 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 45964) {
                                if (45937 <= code2 && code2 <= 45963) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (45964 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 45993) {
                            if (code2 < 45992) {
                              if (45965 <= code2 && code2 <= 45991) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45992 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46020) {
                              if (45993 <= code2 && code2 <= 46019) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46021) {
                                if (46020 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46021 <= code2 && code2 <= 46047) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46105) {
                          if (code2 < 46076) {
                            if (code2 < 46049) {
                              if (46048 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46049 <= code2 && code2 <= 46075) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46077) {
                              if (46076 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46104) {
                                if (46077 <= code2 && code2 <= 46103) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46104 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46160) {
                            if (code2 < 46132) {
                              if (46105 <= code2 && code2 <= 46131) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46133) {
                                if (46132 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46133 <= code2 && code2 <= 46159) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46161) {
                              if (46160 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46188) {
                                if (46161 <= code2 && code2 <= 46187) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46188 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46356) {
                        if (code2 < 46272) {
                          if (code2 < 46217) {
                            if (code2 < 46216) {
                              if (46189 <= code2 && code2 <= 46215) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46216 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46244) {
                              if (46217 <= code2 && code2 <= 46243) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46245) {
                                if (46244 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46245 <= code2 && code2 <= 46271) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46301) {
                            if (code2 < 46273) {
                              if (46272 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46300) {
                                if (46273 <= code2 && code2 <= 46299) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46300 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46328) {
                              if (46301 <= code2 && code2 <= 46327) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46329) {
                                if (46328 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46329 <= code2 && code2 <= 46355) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46413) {
                          if (code2 < 46384) {
                            if (code2 < 46357) {
                              if (46356 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46357 <= code2 && code2 <= 46383) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46385) {
                              if (46384 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46412) {
                                if (46385 <= code2 && code2 <= 46411) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46412 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46468) {
                            if (code2 < 46440) {
                              if (46413 <= code2 && code2 <= 46439) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46441) {
                                if (46440 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46441 <= code2 && code2 <= 46467) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46469) {
                              if (46468 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46496) {
                                if (46469 <= code2 && code2 <= 46495) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46496 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 47701) {
                  if (code2 < 47112) {
                    if (code2 < 46804) {
                      if (code2 < 46637) {
                        if (code2 < 46580) {
                          if (code2 < 46525) {
                            if (code2 < 46524) {
                              if (46497 <= code2 && code2 <= 46523) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46524 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46552) {
                              if (46525 <= code2 && code2 <= 46551) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46553) {
                                if (46552 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46553 <= code2 && code2 <= 46579) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46608) {
                            if (code2 < 46581) {
                              if (46580 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46581 <= code2 && code2 <= 46607) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46609) {
                              if (46608 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46636) {
                                if (46609 <= code2 && code2 <= 46635) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46636 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46720) {
                          if (code2 < 46665) {
                            if (code2 < 46664) {
                              if (46637 <= code2 && code2 <= 46663) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46664 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 46692) {
                              if (46665 <= code2 && code2 <= 46691) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46693) {
                                if (46692 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46693 <= code2 && code2 <= 46719) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46749) {
                            if (code2 < 46721) {
                              if (46720 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46748) {
                                if (46721 <= code2 && code2 <= 46747) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46748 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46776) {
                              if (46749 <= code2 && code2 <= 46775) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46777) {
                                if (46776 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46777 <= code2 && code2 <= 46803) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46945) {
                        if (code2 < 46861) {
                          if (code2 < 46832) {
                            if (code2 < 46805) {
                              if (46804 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46805 <= code2 && code2 <= 46831) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 46833) {
                              if (46832 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46860) {
                                if (46833 <= code2 && code2 <= 46859) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46860 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 46916) {
                            if (code2 < 46888) {
                              if (46861 <= code2 && code2 <= 46887) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 46889) {
                                if (46888 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (46889 <= code2 && code2 <= 46915) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 46917) {
                              if (46916 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 46944) {
                                if (46917 <= code2 && code2 <= 46943) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (46944 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47028) {
                          if (code2 < 46973) {
                            if (code2 < 46972) {
                              if (46945 <= code2 && code2 <= 46971) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46972 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47e3) {
                              if (46973 <= code2 && code2 <= 46999) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47001) {
                                if (47e3 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47001 <= code2 && code2 <= 47027) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47057) {
                            if (code2 < 47029) {
                              if (47028 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47056) {
                                if (47029 <= code2 && code2 <= 47055) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47056 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47084) {
                              if (47057 <= code2 && code2 <= 47083) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47085) {
                                if (47084 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47085 <= code2 && code2 <= 47111) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 47393) {
                      if (code2 < 47252) {
                        if (code2 < 47169) {
                          if (code2 < 47140) {
                            if (code2 < 47113) {
                              if (47112 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47113 <= code2 && code2 <= 47139) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47141) {
                              if (47140 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47168) {
                                if (47141 <= code2 && code2 <= 47167) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47168 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47197) {
                            if (code2 < 47196) {
                              if (47169 <= code2 && code2 <= 47195) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47196 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47224) {
                              if (47197 <= code2 && code2 <= 47223) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47225) {
                                if (47224 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47225 <= code2 && code2 <= 47251) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47309) {
                          if (code2 < 47280) {
                            if (code2 < 47253) {
                              if (47252 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47253 <= code2 && code2 <= 47279) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47281) {
                              if (47280 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47308) {
                                if (47281 <= code2 && code2 <= 47307) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47308 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47364) {
                            if (code2 < 47336) {
                              if (47309 <= code2 && code2 <= 47335) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47337) {
                                if (47336 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47337 <= code2 && code2 <= 47363) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47365) {
                              if (47364 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47392) {
                                if (47365 <= code2 && code2 <= 47391) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47392 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 47560) {
                        if (code2 < 47476) {
                          if (code2 < 47421) {
                            if (code2 < 47420) {
                              if (47393 <= code2 && code2 <= 47419) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47420 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47448) {
                              if (47421 <= code2 && code2 <= 47447) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47449) {
                                if (47448 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47449 <= code2 && code2 <= 47475) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47505) {
                            if (code2 < 47477) {
                              if (47476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47504) {
                                if (47477 <= code2 && code2 <= 47503) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47504 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47532) {
                              if (47505 <= code2 && code2 <= 47531) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47533) {
                                if (47532 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47533 <= code2 && code2 <= 47559) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47617) {
                          if (code2 < 47588) {
                            if (code2 < 47561) {
                              if (47560 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47561 <= code2 && code2 <= 47587) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47589) {
                              if (47588 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47616) {
                                if (47589 <= code2 && code2 <= 47615) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47616 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47672) {
                            if (code2 < 47644) {
                              if (47617 <= code2 && code2 <= 47643) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47645) {
                                if (47644 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47645 <= code2 && code2 <= 47671) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47673) {
                              if (47672 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47700) {
                                if (47673 <= code2 && code2 <= 47699) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47700 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 48316) {
                    if (code2 < 48008) {
                      if (code2 < 47841) {
                        if (code2 < 47784) {
                          if (code2 < 47729) {
                            if (code2 < 47728) {
                              if (47701 <= code2 && code2 <= 47727) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47728 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47756) {
                              if (47729 <= code2 && code2 <= 47755) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47757) {
                                if (47756 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47757 <= code2 && code2 <= 47783) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47812) {
                            if (code2 < 47785) {
                              if (47784 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47785 <= code2 && code2 <= 47811) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 47813) {
                              if (47812 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47840) {
                                if (47813 <= code2 && code2 <= 47839) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47840 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47924) {
                          if (code2 < 47869) {
                            if (code2 < 47868) {
                              if (47841 <= code2 && code2 <= 47867) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47868 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 47896) {
                              if (47869 <= code2 && code2 <= 47895) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47897) {
                                if (47896 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47897 <= code2 && code2 <= 47923) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 47953) {
                            if (code2 < 47925) {
                              if (47924 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 47952) {
                                if (47925 <= code2 && code2 <= 47951) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (47952 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 47980) {
                              if (47953 <= code2 && code2 <= 47979) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 47981) {
                                if (47980 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (47981 <= code2 && code2 <= 48007) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48149) {
                        if (code2 < 48065) {
                          if (code2 < 48036) {
                            if (code2 < 48009) {
                              if (48008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48009 <= code2 && code2 <= 48035) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48037) {
                              if (48036 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48064) {
                                if (48037 <= code2 && code2 <= 48063) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48064 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48120) {
                            if (code2 < 48092) {
                              if (48065 <= code2 && code2 <= 48091) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48093) {
                                if (48092 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48093 <= code2 && code2 <= 48119) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48121) {
                              if (48120 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48148) {
                                if (48121 <= code2 && code2 <= 48147) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48148 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48232) {
                          if (code2 < 48177) {
                            if (code2 < 48176) {
                              if (48149 <= code2 && code2 <= 48175) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48176 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48204) {
                              if (48177 <= code2 && code2 <= 48203) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48205) {
                                if (48204 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48205 <= code2 && code2 <= 48231) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48261) {
                            if (code2 < 48233) {
                              if (48232 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48260) {
                                if (48233 <= code2 && code2 <= 48259) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48260 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48288) {
                              if (48261 <= code2 && code2 <= 48287) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48289) {
                                if (48288 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48289 <= code2 && code2 <= 48315) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 48597) {
                      if (code2 < 48456) {
                        if (code2 < 48373) {
                          if (code2 < 48344) {
                            if (code2 < 48317) {
                              if (48316 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48317 <= code2 && code2 <= 48343) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48345) {
                              if (48344 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48372) {
                                if (48345 <= code2 && code2 <= 48371) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48372 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48401) {
                            if (code2 < 48400) {
                              if (48373 <= code2 && code2 <= 48399) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48400 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48428) {
                              if (48401 <= code2 && code2 <= 48427) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48429) {
                                if (48428 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48429 <= code2 && code2 <= 48455) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48513) {
                          if (code2 < 48484) {
                            if (code2 < 48457) {
                              if (48456 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48457 <= code2 && code2 <= 48483) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48485) {
                              if (48484 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48512) {
                                if (48485 <= code2 && code2 <= 48511) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48512 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48568) {
                            if (code2 < 48540) {
                              if (48513 <= code2 && code2 <= 48539) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48541) {
                                if (48540 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48541 <= code2 && code2 <= 48567) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48569) {
                              if (48568 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48596) {
                                if (48569 <= code2 && code2 <= 48595) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48596 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48764) {
                        if (code2 < 48680) {
                          if (code2 < 48625) {
                            if (code2 < 48624) {
                              if (48597 <= code2 && code2 <= 48623) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48624 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48652) {
                              if (48625 <= code2 && code2 <= 48651) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48653) {
                                if (48652 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48653 <= code2 && code2 <= 48679) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48709) {
                            if (code2 < 48681) {
                              if (48680 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48708) {
                                if (48681 <= code2 && code2 <= 48707) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48708 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48736) {
                              if (48709 <= code2 && code2 <= 48735) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48737) {
                                if (48736 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48737 <= code2 && code2 <= 48763) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48821) {
                          if (code2 < 48792) {
                            if (code2 < 48765) {
                              if (48764 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48765 <= code2 && code2 <= 48791) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 48793) {
                              if (48792 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48820) {
                                if (48793 <= code2 && code2 <= 48819) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48820 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 48876) {
                            if (code2 < 48848) {
                              if (48821 <= code2 && code2 <= 48847) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48849) {
                                if (48848 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48849 <= code2 && code2 <= 48875) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 48877) {
                              if (48876 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 48904) {
                                if (48877 <= code2 && code2 <= 48903) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (48904 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 53720) {
              if (code2 < 51312) {
                if (code2 < 50108) {
                  if (code2 < 49493) {
                    if (code2 < 49212) {
                      if (code2 < 49045) {
                        if (code2 < 48988) {
                          if (code2 < 48933) {
                            if (code2 < 48932) {
                              if (48905 <= code2 && code2 <= 48931) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48932 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 48960) {
                              if (48933 <= code2 && code2 <= 48959) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 48961) {
                                if (48960 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (48961 <= code2 && code2 <= 48987) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49016) {
                            if (code2 < 48989) {
                              if (48988 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48989 <= code2 && code2 <= 49015) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49017) {
                              if (49016 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49044) {
                                if (49017 <= code2 && code2 <= 49043) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49044 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49128) {
                          if (code2 < 49073) {
                            if (code2 < 49072) {
                              if (49045 <= code2 && code2 <= 49071) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49072 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49100) {
                              if (49073 <= code2 && code2 <= 49099) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49101) {
                                if (49100 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49101 <= code2 && code2 <= 49127) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49157) {
                            if (code2 < 49129) {
                              if (49128 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49156) {
                                if (49129 <= code2 && code2 <= 49155) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49156 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49184) {
                              if (49157 <= code2 && code2 <= 49183) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49185) {
                                if (49184 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49185 <= code2 && code2 <= 49211) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49352) {
                        if (code2 < 49269) {
                          if (code2 < 49240) {
                            if (code2 < 49213) {
                              if (49212 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49213 <= code2 && code2 <= 49239) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49241) {
                              if (49240 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49268) {
                                if (49241 <= code2 && code2 <= 49267) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49268 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49297) {
                            if (code2 < 49296) {
                              if (49269 <= code2 && code2 <= 49295) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49296 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49324) {
                              if (49297 <= code2 && code2 <= 49323) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49325) {
                                if (49324 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49325 <= code2 && code2 <= 49351) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49409) {
                          if (code2 < 49380) {
                            if (code2 < 49353) {
                              if (49352 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49353 <= code2 && code2 <= 49379) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49381) {
                              if (49380 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49408) {
                                if (49381 <= code2 && code2 <= 49407) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49408 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49464) {
                            if (code2 < 49436) {
                              if (49409 <= code2 && code2 <= 49435) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49437) {
                                if (49436 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49437 <= code2 && code2 <= 49463) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49465) {
                              if (49464 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49492) {
                                if (49465 <= code2 && code2 <= 49491) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49492 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 49800) {
                      if (code2 < 49633) {
                        if (code2 < 49576) {
                          if (code2 < 49521) {
                            if (code2 < 49520) {
                              if (49493 <= code2 && code2 <= 49519) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49520 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49548) {
                              if (49521 <= code2 && code2 <= 49547) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49549) {
                                if (49548 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49549 <= code2 && code2 <= 49575) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49604) {
                            if (code2 < 49577) {
                              if (49576 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49577 <= code2 && code2 <= 49603) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49605) {
                              if (49604 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49632) {
                                if (49605 <= code2 && code2 <= 49631) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49632 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49716) {
                          if (code2 < 49661) {
                            if (code2 < 49660) {
                              if (49633 <= code2 && code2 <= 49659) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49660 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49688) {
                              if (49661 <= code2 && code2 <= 49687) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49689) {
                                if (49688 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49689 <= code2 && code2 <= 49715) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49745) {
                            if (code2 < 49717) {
                              if (49716 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49744) {
                                if (49717 <= code2 && code2 <= 49743) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49744 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49772) {
                              if (49745 <= code2 && code2 <= 49771) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49773) {
                                if (49772 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49773 <= code2 && code2 <= 49799) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49941) {
                        if (code2 < 49857) {
                          if (code2 < 49828) {
                            if (code2 < 49801) {
                              if (49800 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49801 <= code2 && code2 <= 49827) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 49829) {
                              if (49828 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49856) {
                                if (49829 <= code2 && code2 <= 49855) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49856 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 49912) {
                            if (code2 < 49884) {
                              if (49857 <= code2 && code2 <= 49883) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49885) {
                                if (49884 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49885 <= code2 && code2 <= 49911) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 49913) {
                              if (49912 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 49940) {
                                if (49913 <= code2 && code2 <= 49939) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (49940 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50024) {
                          if (code2 < 49969) {
                            if (code2 < 49968) {
                              if (49941 <= code2 && code2 <= 49967) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49968 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 49996) {
                              if (49969 <= code2 && code2 <= 49995) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 49997) {
                                if (49996 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (49997 <= code2 && code2 <= 50023) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50053) {
                            if (code2 < 50025) {
                              if (50024 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50052) {
                                if (50025 <= code2 && code2 <= 50051) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50052 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50080) {
                              if (50053 <= code2 && code2 <= 50079) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50081) {
                                if (50080 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50081 <= code2 && code2 <= 50107) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 50697) {
                    if (code2 < 50389) {
                      if (code2 < 50248) {
                        if (code2 < 50165) {
                          if (code2 < 50136) {
                            if (code2 < 50109) {
                              if (50108 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50109 <= code2 && code2 <= 50135) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50137) {
                              if (50136 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50164) {
                                if (50137 <= code2 && code2 <= 50163) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50164 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50193) {
                            if (code2 < 50192) {
                              if (50165 <= code2 && code2 <= 50191) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50192 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50220) {
                              if (50193 <= code2 && code2 <= 50219) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50221) {
                                if (50220 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50221 <= code2 && code2 <= 50247) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50305) {
                          if (code2 < 50276) {
                            if (code2 < 50249) {
                              if (50248 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50249 <= code2 && code2 <= 50275) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50277) {
                              if (50276 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50304) {
                                if (50277 <= code2 && code2 <= 50303) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50304 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50360) {
                            if (code2 < 50332) {
                              if (50305 <= code2 && code2 <= 50331) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50333) {
                                if (50332 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50333 <= code2 && code2 <= 50359) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50361) {
                              if (50360 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50388) {
                                if (50361 <= code2 && code2 <= 50387) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50388 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 50556) {
                        if (code2 < 50472) {
                          if (code2 < 50417) {
                            if (code2 < 50416) {
                              if (50389 <= code2 && code2 <= 50415) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50416 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50444) {
                              if (50417 <= code2 && code2 <= 50443) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50445) {
                                if (50444 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50445 <= code2 && code2 <= 50471) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50501) {
                            if (code2 < 50473) {
                              if (50472 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50500) {
                                if (50473 <= code2 && code2 <= 50499) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50500 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50528) {
                              if (50501 <= code2 && code2 <= 50527) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50529) {
                                if (50528 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50529 <= code2 && code2 <= 50555) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50613) {
                          if (code2 < 50584) {
                            if (code2 < 50557) {
                              if (50556 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50557 <= code2 && code2 <= 50583) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50585) {
                              if (50584 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50612) {
                                if (50585 <= code2 && code2 <= 50611) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50612 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50668) {
                            if (code2 < 50640) {
                              if (50613 <= code2 && code2 <= 50639) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50641) {
                                if (50640 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50641 <= code2 && code2 <= 50667) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50669) {
                              if (50668 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50696) {
                                if (50669 <= code2 && code2 <= 50695) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50696 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 51004) {
                      if (code2 < 50837) {
                        if (code2 < 50780) {
                          if (code2 < 50725) {
                            if (code2 < 50724) {
                              if (50697 <= code2 && code2 <= 50723) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50724 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50752) {
                              if (50725 <= code2 && code2 <= 50751) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50753) {
                                if (50752 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50753 <= code2 && code2 <= 50779) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50808) {
                            if (code2 < 50781) {
                              if (50780 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50781 <= code2 && code2 <= 50807) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 50809) {
                              if (50808 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50836) {
                                if (50809 <= code2 && code2 <= 50835) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50836 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50920) {
                          if (code2 < 50865) {
                            if (code2 < 50864) {
                              if (50837 <= code2 && code2 <= 50863) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50864 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 50892) {
                              if (50865 <= code2 && code2 <= 50891) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50893) {
                                if (50892 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50893 <= code2 && code2 <= 50919) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 50949) {
                            if (code2 < 50921) {
                              if (50920 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 50948) {
                                if (50921 <= code2 && code2 <= 50947) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (50948 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 50976) {
                              if (50949 <= code2 && code2 <= 50975) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 50977) {
                                if (50976 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (50977 <= code2 && code2 <= 51003) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51145) {
                        if (code2 < 51061) {
                          if (code2 < 51032) {
                            if (code2 < 51005) {
                              if (51004 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51005 <= code2 && code2 <= 51031) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51033) {
                              if (51032 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51060) {
                                if (51033 <= code2 && code2 <= 51059) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51060 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51116) {
                            if (code2 < 51088) {
                              if (51061 <= code2 && code2 <= 51087) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51089) {
                                if (51088 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51089 <= code2 && code2 <= 51115) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51117) {
                              if (51116 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51144) {
                                if (51117 <= code2 && code2 <= 51143) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51144 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51228) {
                          if (code2 < 51173) {
                            if (code2 < 51172) {
                              if (51145 <= code2 && code2 <= 51171) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51172 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51200) {
                              if (51173 <= code2 && code2 <= 51199) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51201) {
                                if (51200 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51201 <= code2 && code2 <= 51227) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51257) {
                            if (code2 < 51229) {
                              if (51228 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51256) {
                                if (51229 <= code2 && code2 <= 51255) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51256 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51284) {
                              if (51257 <= code2 && code2 <= 51283) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51285) {
                                if (51284 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51285 <= code2 && code2 <= 51311) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 52516) {
                  if (code2 < 51901) {
                    if (code2 < 51593) {
                      if (code2 < 51452) {
                        if (code2 < 51369) {
                          if (code2 < 51340) {
                            if (code2 < 51313) {
                              if (51312 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51313 <= code2 && code2 <= 51339) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51341) {
                              if (51340 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51368) {
                                if (51341 <= code2 && code2 <= 51367) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51368 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51397) {
                            if (code2 < 51396) {
                              if (51369 <= code2 && code2 <= 51395) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51396 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51424) {
                              if (51397 <= code2 && code2 <= 51423) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51425) {
                                if (51424 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51425 <= code2 && code2 <= 51451) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51509) {
                          if (code2 < 51480) {
                            if (code2 < 51453) {
                              if (51452 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51453 <= code2 && code2 <= 51479) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51481) {
                              if (51480 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51508) {
                                if (51481 <= code2 && code2 <= 51507) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51508 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51564) {
                            if (code2 < 51536) {
                              if (51509 <= code2 && code2 <= 51535) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51537) {
                                if (51536 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51537 <= code2 && code2 <= 51563) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51565) {
                              if (51564 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51592) {
                                if (51565 <= code2 && code2 <= 51591) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51592 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51760) {
                        if (code2 < 51676) {
                          if (code2 < 51621) {
                            if (code2 < 51620) {
                              if (51593 <= code2 && code2 <= 51619) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51620 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51648) {
                              if (51621 <= code2 && code2 <= 51647) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51649) {
                                if (51648 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51649 <= code2 && code2 <= 51675) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51705) {
                            if (code2 < 51677) {
                              if (51676 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51704) {
                                if (51677 <= code2 && code2 <= 51703) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51704 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51732) {
                              if (51705 <= code2 && code2 <= 51731) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51733) {
                                if (51732 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51733 <= code2 && code2 <= 51759) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51817) {
                          if (code2 < 51788) {
                            if (code2 < 51761) {
                              if (51760 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51761 <= code2 && code2 <= 51787) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 51789) {
                              if (51788 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51816) {
                                if (51789 <= code2 && code2 <= 51815) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51816 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 51872) {
                            if (code2 < 51844) {
                              if (51817 <= code2 && code2 <= 51843) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51845) {
                                if (51844 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51845 <= code2 && code2 <= 51871) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 51873) {
                              if (51872 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 51900) {
                                if (51873 <= code2 && code2 <= 51899) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (51900 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 52208) {
                      if (code2 < 52041) {
                        if (code2 < 51984) {
                          if (code2 < 51929) {
                            if (code2 < 51928) {
                              if (51901 <= code2 && code2 <= 51927) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51928 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 51956) {
                              if (51929 <= code2 && code2 <= 51955) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 51957) {
                                if (51956 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (51957 <= code2 && code2 <= 51983) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52012) {
                            if (code2 < 51985) {
                              if (51984 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51985 <= code2 && code2 <= 52011) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52013) {
                              if (52012 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52040) {
                                if (52013 <= code2 && code2 <= 52039) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52040 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52124) {
                          if (code2 < 52069) {
                            if (code2 < 52068) {
                              if (52041 <= code2 && code2 <= 52067) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52068 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52096) {
                              if (52069 <= code2 && code2 <= 52095) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52097) {
                                if (52096 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52097 <= code2 && code2 <= 52123) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52153) {
                            if (code2 < 52125) {
                              if (52124 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52152) {
                                if (52125 <= code2 && code2 <= 52151) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52152 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52180) {
                              if (52153 <= code2 && code2 <= 52179) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52181) {
                                if (52180 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52181 <= code2 && code2 <= 52207) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52349) {
                        if (code2 < 52265) {
                          if (code2 < 52236) {
                            if (code2 < 52209) {
                              if (52208 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52209 <= code2 && code2 <= 52235) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52237) {
                              if (52236 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52264) {
                                if (52237 <= code2 && code2 <= 52263) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52264 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52320) {
                            if (code2 < 52292) {
                              if (52265 <= code2 && code2 <= 52291) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52293) {
                                if (52292 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52293 <= code2 && code2 <= 52319) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52321) {
                              if (52320 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52348) {
                                if (52321 <= code2 && code2 <= 52347) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52348 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52432) {
                          if (code2 < 52377) {
                            if (code2 < 52376) {
                              if (52349 <= code2 && code2 <= 52375) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52376 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52404) {
                              if (52377 <= code2 && code2 <= 52403) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52405) {
                                if (52404 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52405 <= code2 && code2 <= 52431) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52461) {
                            if (code2 < 52433) {
                              if (52432 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52460) {
                                if (52433 <= code2 && code2 <= 52459) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52460 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52488) {
                              if (52461 <= code2 && code2 <= 52487) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52489) {
                                if (52488 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52489 <= code2 && code2 <= 52515) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 53105) {
                    if (code2 < 52797) {
                      if (code2 < 52656) {
                        if (code2 < 52573) {
                          if (code2 < 52544) {
                            if (code2 < 52517) {
                              if (52516 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52517 <= code2 && code2 <= 52543) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52545) {
                              if (52544 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52572) {
                                if (52545 <= code2 && code2 <= 52571) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52572 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52601) {
                            if (code2 < 52600) {
                              if (52573 <= code2 && code2 <= 52599) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52600 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52628) {
                              if (52601 <= code2 && code2 <= 52627) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52629) {
                                if (52628 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52629 <= code2 && code2 <= 52655) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52713) {
                          if (code2 < 52684) {
                            if (code2 < 52657) {
                              if (52656 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52657 <= code2 && code2 <= 52683) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52685) {
                              if (52684 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52712) {
                                if (52685 <= code2 && code2 <= 52711) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52712 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52768) {
                            if (code2 < 52740) {
                              if (52713 <= code2 && code2 <= 52739) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52741) {
                                if (52740 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52741 <= code2 && code2 <= 52767) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52769) {
                              if (52768 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52796) {
                                if (52769 <= code2 && code2 <= 52795) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52796 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52964) {
                        if (code2 < 52880) {
                          if (code2 < 52825) {
                            if (code2 < 52824) {
                              if (52797 <= code2 && code2 <= 52823) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52824 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 52852) {
                              if (52825 <= code2 && code2 <= 52851) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52853) {
                                if (52852 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52853 <= code2 && code2 <= 52879) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 52909) {
                            if (code2 < 52881) {
                              if (52880 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 52908) {
                                if (52881 <= code2 && code2 <= 52907) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (52908 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 52936) {
                              if (52909 <= code2 && code2 <= 52935) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 52937) {
                                if (52936 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (52937 <= code2 && code2 <= 52963) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53021) {
                          if (code2 < 52992) {
                            if (code2 < 52965) {
                              if (52964 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52965 <= code2 && code2 <= 52991) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 52993) {
                              if (52992 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53020) {
                                if (52993 <= code2 && code2 <= 53019) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53020 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53076) {
                            if (code2 < 53048) {
                              if (53021 <= code2 && code2 <= 53047) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53049) {
                                if (53048 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53049 <= code2 && code2 <= 53075) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53077) {
                              if (53076 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53104) {
                                if (53077 <= code2 && code2 <= 53103) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53104 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 53412) {
                      if (code2 < 53245) {
                        if (code2 < 53188) {
                          if (code2 < 53133) {
                            if (code2 < 53132) {
                              if (53105 <= code2 && code2 <= 53131) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53132 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53160) {
                              if (53133 <= code2 && code2 <= 53159) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53161) {
                                if (53160 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53161 <= code2 && code2 <= 53187) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53216) {
                            if (code2 < 53189) {
                              if (53188 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53189 <= code2 && code2 <= 53215) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53217) {
                              if (53216 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53244) {
                                if (53217 <= code2 && code2 <= 53243) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53244 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53328) {
                          if (code2 < 53273) {
                            if (code2 < 53272) {
                              if (53245 <= code2 && code2 <= 53271) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53272 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53300) {
                              if (53273 <= code2 && code2 <= 53299) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53301) {
                                if (53300 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53301 <= code2 && code2 <= 53327) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53357) {
                            if (code2 < 53329) {
                              if (53328 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53356) {
                                if (53329 <= code2 && code2 <= 53355) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53356 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53384) {
                              if (53357 <= code2 && code2 <= 53383) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53385) {
                                if (53384 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53385 <= code2 && code2 <= 53411) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53553) {
                        if (code2 < 53469) {
                          if (code2 < 53440) {
                            if (code2 < 53413) {
                              if (53412 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53413 <= code2 && code2 <= 53439) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53441) {
                              if (53440 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53468) {
                                if (53441 <= code2 && code2 <= 53467) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53468 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53524) {
                            if (code2 < 53496) {
                              if (53469 <= code2 && code2 <= 53495) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53497) {
                                if (53496 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53497 <= code2 && code2 <= 53523) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53525) {
                              if (53524 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53552) {
                                if (53525 <= code2 && code2 <= 53551) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53552 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53636) {
                          if (code2 < 53581) {
                            if (code2 < 53580) {
                              if (53553 <= code2 && code2 <= 53579) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53580 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53608) {
                              if (53581 <= code2 && code2 <= 53607) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53609) {
                                if (53608 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53609 <= code2 && code2 <= 53635) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53665) {
                            if (code2 < 53637) {
                              if (53636 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53664) {
                                if (53637 <= code2 && code2 <= 53663) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53664 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53692) {
                              if (53665 <= code2 && code2 <= 53691) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53693) {
                                if (53692 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53693 <= code2 && code2 <= 53719) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 70459) {
                if (code2 < 54897) {
                  if (code2 < 54308) {
                    if (code2 < 54001) {
                      if (code2 < 53860) {
                        if (code2 < 53777) {
                          if (code2 < 53748) {
                            if (code2 < 53721) {
                              if (53720 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53721 <= code2 && code2 <= 53747) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53749) {
                              if (53748 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53776) {
                                if (53749 <= code2 && code2 <= 53775) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53776 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53805) {
                            if (code2 < 53804) {
                              if (53777 <= code2 && code2 <= 53803) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53804 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 53832) {
                              if (53805 <= code2 && code2 <= 53831) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53833) {
                                if (53832 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53833 <= code2 && code2 <= 53859) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53917) {
                          if (code2 < 53888) {
                            if (code2 < 53861) {
                              if (53860 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53861 <= code2 && code2 <= 53887) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 53889) {
                              if (53888 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 53916) {
                                if (53889 <= code2 && code2 <= 53915) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (53916 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 53972) {
                            if (code2 < 53944) {
                              if (53917 <= code2 && code2 <= 53943) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 53945) {
                                if (53944 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (53945 <= code2 && code2 <= 53971) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 53973) {
                              if (53972 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54e3) {
                                if (53973 <= code2 && code2 <= 53999) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54e3 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54141) {
                        if (code2 < 54084) {
                          if (code2 < 54029) {
                            if (code2 < 54028) {
                              if (54001 <= code2 && code2 <= 54027) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54028 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54056) {
                              if (54029 <= code2 && code2 <= 54055) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54057) {
                                if (54056 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54057 <= code2 && code2 <= 54083) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54112) {
                            if (code2 < 54085) {
                              if (54084 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54085 <= code2 && code2 <= 54111) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54113) {
                              if (54112 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54140) {
                                if (54113 <= code2 && code2 <= 54139) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54140 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54224) {
                          if (code2 < 54169) {
                            if (code2 < 54168) {
                              if (54141 <= code2 && code2 <= 54167) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54168 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54196) {
                              if (54169 <= code2 && code2 <= 54195) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54197) {
                                if (54196 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54197 <= code2 && code2 <= 54223) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54253) {
                            if (code2 < 54225) {
                              if (54224 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54252) {
                                if (54225 <= code2 && code2 <= 54251) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54252 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54280) {
                              if (54253 <= code2 && code2 <= 54279) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54281) {
                                if (54280 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54281 <= code2 && code2 <= 54307) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 54589) {
                      if (code2 < 54448) {
                        if (code2 < 54365) {
                          if (code2 < 54336) {
                            if (code2 < 54309) {
                              if (54308 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54309 <= code2 && code2 <= 54335) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54337) {
                              if (54336 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54364) {
                                if (54337 <= code2 && code2 <= 54363) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54364 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54393) {
                            if (code2 < 54392) {
                              if (54365 <= code2 && code2 <= 54391) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54392 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54420) {
                              if (54393 <= code2 && code2 <= 54419) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54421) {
                                if (54420 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54421 <= code2 && code2 <= 54447) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54505) {
                          if (code2 < 54476) {
                            if (code2 < 54449) {
                              if (54448 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54449 <= code2 && code2 <= 54475) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54477) {
                              if (54476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54504) {
                                if (54477 <= code2 && code2 <= 54503) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54504 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54560) {
                            if (code2 < 54532) {
                              if (54505 <= code2 && code2 <= 54531) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54533) {
                                if (54532 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54533 <= code2 && code2 <= 54559) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54561) {
                              if (54560 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54588) {
                                if (54561 <= code2 && code2 <= 54587) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54588 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54756) {
                        if (code2 < 54672) {
                          if (code2 < 54617) {
                            if (code2 < 54616) {
                              if (54589 <= code2 && code2 <= 54615) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54616 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54644) {
                              if (54617 <= code2 && code2 <= 54643) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54645) {
                                if (54644 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54645 <= code2 && code2 <= 54671) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54701) {
                            if (code2 < 54673) {
                              if (54672 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54700) {
                                if (54673 <= code2 && code2 <= 54699) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54700 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54728) {
                              if (54701 <= code2 && code2 <= 54727) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54729) {
                                if (54728 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54729 <= code2 && code2 <= 54755) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54813) {
                          if (code2 < 54784) {
                            if (code2 < 54757) {
                              if (54756 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54757 <= code2 && code2 <= 54783) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 54785) {
                              if (54784 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54812) {
                                if (54785 <= code2 && code2 <= 54811) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54812 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 54868) {
                            if (code2 < 54840) {
                              if (54813 <= code2 && code2 <= 54839) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54841) {
                                if (54840 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54841 <= code2 && code2 <= 54867) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          } else {
                            if (code2 < 54869) {
                              if (54868 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 54896) {
                                if (54869 <= code2 && code2 <= 54895) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (54896 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 69632) {
                    if (code2 < 55216) {
                      if (code2 < 55037) {
                        if (code2 < 54980) {
                          if (code2 < 54925) {
                            if (code2 < 54924) {
                              if (54897 <= code2 && code2 <= 54923) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54924 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 54952) {
                              if (54925 <= code2 && code2 <= 54951) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 54953) {
                                if (54952 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (54953 <= code2 && code2 <= 54979) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 55008) {
                            if (code2 < 54981) {
                              if (54980 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54981 <= code2 && code2 <= 55007) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          } else {
                            if (code2 < 55009) {
                              if (55008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 55036) {
                                if (55009 <= code2 && code2 <= 55035) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (55036 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 55120) {
                          if (code2 < 55065) {
                            if (code2 < 55064) {
                              if (55037 <= code2 && code2 <= 55063) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (55064 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          } else {
                            if (code2 < 55092) {
                              if (55065 <= code2 && code2 <= 55091) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 55093) {
                                if (55092 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (55093 <= code2 && code2 <= 55119) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 55149) {
                            if (code2 < 55121) {
                              if (55120 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (code2 < 55148) {
                                if (55121 <= code2 && code2 <= 55147) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              } else {
                                if (55148 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              }
                            }
                          } else {
                            if (code2 < 55176) {
                              if (55149 <= code2 && code2 <= 55175) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (code2 < 55177) {
                                if (55176 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.LV;
                                }
                              } else {
                                if (55177 <= code2 && code2 <= 55203) {
                                  return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 68097) {
                        if (code2 < 65279) {
                          if (code2 < 64286) {
                            if (code2 < 55243) {
                              if (55216 <= code2 && code2 <= 55238) {
                                return boundaries_1.CLUSTER_BREAK.V;
                              }
                            } else {
                              if (55243 <= code2 && code2 <= 55291) {
                                return boundaries_1.CLUSTER_BREAK.T;
                              }
                            }
                          } else {
                            if (code2 < 65024) {
                              if (64286 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 65056) {
                                if (65024 <= code2 && code2 <= 65039) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (65056 <= code2 && code2 <= 65071) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 66045) {
                            if (code2 < 65438) {
                              if (65279 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 65520) {
                                if (65438 <= code2 && code2 <= 65439) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (65520 <= code2 && code2 <= 65531) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          } else {
                            if (code2 < 66272) {
                              if (66045 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 66422) {
                                if (66272 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (66422 <= code2 && code2 <= 66426) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 68325) {
                          if (code2 < 68108) {
                            if (code2 < 68101) {
                              if (68097 <= code2 && code2 <= 68099) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (68101 <= code2 && code2 <= 68102) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 68152) {
                              if (68108 <= code2 && code2 <= 68111) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 68159) {
                                if (68152 <= code2 && code2 <= 68154) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (68159 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 69373) {
                            if (code2 < 68900) {
                              if (68325 <= code2 && code2 <= 68326) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69291) {
                                if (68900 <= code2 && code2 <= 68903) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69291 <= code2 && code2 <= 69292) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 69446) {
                              if (69373 <= code2 && code2 <= 69375) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69506) {
                                if (69446 <= code2 && code2 <= 69456) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69506 <= code2 && code2 <= 69509) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 70016) {
                      if (code2 < 69815) {
                        if (code2 < 69747) {
                          if (code2 < 69634) {
                            if (69632 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (69633 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 69688) {
                              if (69634 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 69744) {
                                if (69688 <= code2 && code2 <= 69702) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69744 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 69762) {
                            if (code2 < 69759) {
                              if (69747 <= code2 && code2 <= 69748) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (69759 <= code2 && code2 <= 69761) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 69808) {
                              if (69762 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 69811) {
                                if (69808 <= code2 && code2 <= 69810) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (69811 <= code2 && code2 <= 69814) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 69888) {
                          if (code2 < 69821) {
                            if (code2 < 69817) {
                              if (69815 <= code2 && code2 <= 69816) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (69817 <= code2 && code2 <= 69818) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 69826) {
                              if (69821 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (69826 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (69837 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 69933) {
                            if (code2 < 69927) {
                              if (69888 <= code2 && code2 <= 69890) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 69932) {
                                if (69927 <= code2 && code2 <= 69931) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (69932 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 69957) {
                              if (69933 <= code2 && code2 <= 69940) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70003) {
                                if (69957 <= code2 && code2 <= 69958) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70003 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 70194) {
                        if (code2 < 70082) {
                          if (code2 < 70067) {
                            if (code2 < 70018) {
                              if (70016 <= code2 && code2 <= 70017) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70018 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70070) {
                              if (70067 <= code2 && code2 <= 70069) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70079) {
                                if (70070 <= code2 && code2 <= 70078) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70079 <= code2 && code2 <= 70080) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70095) {
                            if (code2 < 70089) {
                              if (70082 <= code2 && code2 <= 70083) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 70094) {
                                if (70089 <= code2 && code2 <= 70092) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70094 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 70188) {
                              if (70095 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70191) {
                                if (70188 <= code2 && code2 <= 70190) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70191 <= code2 && code2 <= 70193) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70209) {
                          if (code2 < 70197) {
                            if (code2 < 70196) {
                              if (70194 <= code2 && code2 <= 70195) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70196 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70198) {
                              if (70197 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70206) {
                                if (70198 <= code2 && code2 <= 70199) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70206 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70371) {
                            if (code2 < 70367) {
                              if (70209 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70368) {
                                if (70367 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70368 <= code2 && code2 <= 70370) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 70400) {
                              if (70371 <= code2 && code2 <= 70378) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70402) {
                                if (70400 <= code2 && code2 <= 70401) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70402 <= code2 && code2 <= 70403) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 72343) {
                  if (code2 < 71339) {
                    if (code2 < 70841) {
                      if (code2 < 70512) {
                        if (code2 < 70471) {
                          if (code2 < 70463) {
                            if (code2 < 70462) {
                              if (70459 <= code2 && code2 <= 70460) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70462 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70464) {
                              if (70463 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 70465) {
                                if (70464 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (70465 <= code2 && code2 <= 70468) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70487) {
                            if (code2 < 70475) {
                              if (70471 <= code2 && code2 <= 70472) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70475 <= code2 && code2 <= 70477) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70498) {
                              if (70487 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70502) {
                                if (70498 <= code2 && code2 <= 70499) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70502 <= code2 && code2 <= 70508) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70725) {
                          if (code2 < 70712) {
                            if (code2 < 70709) {
                              if (70512 <= code2 && code2 <= 70516) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70709 <= code2 && code2 <= 70711) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 70720) {
                              if (70712 <= code2 && code2 <= 70719) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70722) {
                                if (70720 <= code2 && code2 <= 70721) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70722 <= code2 && code2 <= 70724) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 70832) {
                            if (code2 < 70726) {
                              if (70725 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70726 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (70750 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 70833) {
                              if (70832 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70835) {
                                if (70833 <= code2 && code2 <= 70834) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70835 <= code2 && code2 <= 70840) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 71096) {
                        if (code2 < 70847) {
                          if (code2 < 70843) {
                            if (70841 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (70842 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70845) {
                              if (70843 <= code2 && code2 <= 70844) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70845 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (70846 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 71087) {
                            if (code2 < 70849) {
                              if (70847 <= code2 && code2 <= 70848) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 70850) {
                                if (70849 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (70850 <= code2 && code2 <= 70851) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71088) {
                              if (71087 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71090) {
                                if (71088 <= code2 && code2 <= 71089) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71090 <= code2 && code2 <= 71093) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71216) {
                          if (code2 < 71102) {
                            if (code2 < 71100) {
                              if (71096 <= code2 && code2 <= 71099) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (71100 <= code2 && code2 <= 71101) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 71103) {
                              if (71102 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 71132) {
                                if (71103 <= code2 && code2 <= 71104) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71132 <= code2 && code2 <= 71133) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71229) {
                            if (code2 < 71219) {
                              if (71216 <= code2 && code2 <= 71218) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 71227) {
                                if (71219 <= code2 && code2 <= 71226) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71227 <= code2 && code2 <= 71228) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71230) {
                              if (71229 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71231) {
                                if (71230 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71231 <= code2 && code2 <= 71232) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 71999) {
                      if (code2 < 71463) {
                        if (code2 < 71350) {
                          if (code2 < 71341) {
                            if (71339 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (71340 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 71342) {
                              if (71341 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71344) {
                                if (71342 <= code2 && code2 <= 71343) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71344 <= code2 && code2 <= 71349) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71453) {
                            if (71350 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (71351 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71458) {
                              if (71453 <= code2 && code2 <= 71455) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71462) {
                                if (71458 <= code2 && code2 <= 71461) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (71462 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71984) {
                          if (code2 < 71727) {
                            if (code2 < 71724) {
                              if (71463 <= code2 && code2 <= 71467) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71724 <= code2 && code2 <= 71726) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 71736) {
                              if (71727 <= code2 && code2 <= 71735) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71737) {
                                if (71736 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71737 <= code2 && code2 <= 71738) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 71995) {
                            if (code2 < 71985) {
                              if (71984 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 71991) {
                                if (71985 <= code2 && code2 <= 71989) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (71991 <= code2 && code2 <= 71992) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 71997) {
                              if (71995 <= code2 && code2 <= 71996) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71997 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (71998 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 72193) {
                        if (code2 < 72145) {
                          if (code2 < 72001) {
                            if (71999 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                            if (72e3 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 72002) {
                              if (72001 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (72002 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (72003 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 72156) {
                            if (code2 < 72148) {
                              if (72145 <= code2 && code2 <= 72147) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72154) {
                                if (72148 <= code2 && code2 <= 72151) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72154 <= code2 && code2 <= 72155) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 72160) {
                              if (72156 <= code2 && code2 <= 72159) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72160 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (72164 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 72263) {
                          if (code2 < 72249) {
                            if (code2 < 72243) {
                              if (72193 <= code2 && code2 <= 72202) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (72243 <= code2 && code2 <= 72248) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72250) {
                              if (72249 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72251) {
                                if (72250 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              } else {
                                if (72251 <= code2 && code2 <= 72254) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 72281) {
                            if (code2 < 72273) {
                              if (72263 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72279) {
                                if (72273 <= code2 && code2 <= 72278) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72279 <= code2 && code2 <= 72280) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          } else {
                            if (code2 < 72324) {
                              if (72281 <= code2 && code2 <= 72283) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72330) {
                                if (72324 <= code2 && code2 <= 72329) {
                                  return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                              } else {
                                if (72330 <= code2 && code2 <= 72342) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 94033) {
                    if (code2 < 73104) {
                      if (code2 < 72881) {
                        if (code2 < 72766) {
                          if (code2 < 72751) {
                            if (code2 < 72344) {
                              if (72343 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72344 <= code2 && code2 <= 72345) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72752) {
                              if (72751 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 72760) {
                                if (72752 <= code2 && code2 <= 72758) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (72760 <= code2 && code2 <= 72765) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 72850) {
                            if (72766 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (72767 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 72873) {
                              if (72850 <= code2 && code2 <= 72871) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 72874) {
                                if (72873 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (72874 <= code2 && code2 <= 72880) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 73018) {
                          if (code2 < 72884) {
                            if (code2 < 72882) {
                              if (72881 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72882 <= code2 && code2 <= 72883) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 72885) {
                              if (72884 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (code2 < 73009) {
                                if (72885 <= code2 && code2 <= 72886) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73009 <= code2 && code2 <= 73014) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 73030) {
                            if (code2 < 73020) {
                              if (73018 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 73023) {
                                if (73020 <= code2 && code2 <= 73021) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73023 <= code2 && code2 <= 73029) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 73031) {
                              if (73030 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 73098) {
                                if (73031 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (73098 <= code2 && code2 <= 73102) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 73526) {
                        if (code2 < 73459) {
                          if (code2 < 73109) {
                            if (code2 < 73107) {
                              if (73104 <= code2 && code2 <= 73105) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73107 <= code2 && code2 <= 73108) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 73110) {
                              if (73109 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73110 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (73111 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 73474) {
                            if (code2 < 73461) {
                              if (73459 <= code2 && code2 <= 73460) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 73472) {
                                if (73461 <= code2 && code2 <= 73462) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (73472 <= code2 && code2 <= 73473) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 73475) {
                              if (73474 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (code2 < 73524) {
                                if (73475 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (73524 <= code2 && code2 <= 73525) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 78896) {
                          if (code2 < 73536) {
                            if (code2 < 73534) {
                              if (73526 <= code2 && code2 <= 73530) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73534 <= code2 && code2 <= 73535) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 73537) {
                              if (73536 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73537 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                              if (73538 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 92912) {
                            if (code2 < 78912) {
                              if (78896 <= code2 && code2 <= 78911) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 78919) {
                                if (78912 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (78919 <= code2 && code2 <= 78933) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 92976) {
                              if (92912 <= code2 && code2 <= 92916) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 94031) {
                                if (92976 <= code2 && code2 <= 92982) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (94031 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 121476) {
                      if (code2 < 119143) {
                        if (code2 < 113824) {
                          if (code2 < 94180) {
                            if (code2 < 94095) {
                              if (94033 <= code2 && code2 <= 94087) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (94095 <= code2 && code2 <= 94098) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 94192) {
                              if (94180 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 113821) {
                                if (94192 <= code2 && code2 <= 94193) {
                                  return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                              } else {
                                if (113821 <= code2 && code2 <= 113822) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 118576) {
                            if (code2 < 118528) {
                              if (113824 <= code2 && code2 <= 113827) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (118528 <= code2 && code2 <= 118573) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 119141) {
                              if (118576 <= code2 && code2 <= 118598) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (119141 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                              if (119142 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 119173) {
                          if (code2 < 119150) {
                            if (code2 < 119149) {
                              if (119143 <= code2 && code2 <= 119145) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (119149 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          } else {
                            if (code2 < 119155) {
                              if (119150 <= code2 && code2 <= 119154) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 119163) {
                                if (119155 <= code2 && code2 <= 119162) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (119163 <= code2 && code2 <= 119170) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 121344) {
                            if (code2 < 119210) {
                              if (119173 <= code2 && code2 <= 119179) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 119362) {
                                if (119210 <= code2 && code2 <= 119213) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (119362 <= code2 && code2 <= 119364) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 121403) {
                              if (121344 <= code2 && code2 <= 121398) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 121461) {
                                if (121403 <= code2 && code2 <= 121452) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (121461 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 123628) {
                        if (code2 < 122907) {
                          if (code2 < 121505) {
                            if (code2 < 121499) {
                              if (121476 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (121499 <= code2 && code2 <= 121503) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 122880) {
                              if (121505 <= code2 && code2 <= 121519) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 122888) {
                                if (122880 <= code2 && code2 <= 122886) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (122888 <= code2 && code2 <= 122904) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 123023) {
                            if (code2 < 122915) {
                              if (122907 <= code2 && code2 <= 122913) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 122918) {
                                if (122915 <= code2 && code2 <= 122916) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (122918 <= code2 && code2 <= 122922) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 123184) {
                              if (123023 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 123566) {
                                if (123184 <= code2 && code2 <= 123190) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (123566 === code2) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 127995) {
                          if (code2 < 125136) {
                            if (code2 < 124140) {
                              if (123628 <= code2 && code2 <= 123631) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (124140 <= code2 && code2 <= 124143) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          } else {
                            if (code2 < 125252) {
                              if (125136 <= code2 && code2 <= 125142) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 127462) {
                                if (125252 <= code2 && code2 <= 125258) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (127462 <= code2 && code2 <= 127487) {
                                  return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                                }
                              }
                            }
                          }
                        } else {
                          if (code2 < 917632) {
                            if (code2 < 917504) {
                              if (127995 <= code2 && code2 <= 127999) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (code2 < 917536) {
                                if (917504 <= code2 && code2 <= 917535) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              } else {
                                if (917536 <= code2 && code2 <= 917631) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              }
                            }
                          } else {
                            if (code2 < 917760) {
                              if (917632 <= code2 && code2 <= 917759) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (code2 < 918e3) {
                                if (917760 <= code2 && code2 <= 917999) {
                                  return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                              } else {
                                if (918e3 <= code2 && code2 <= 921599) {
                                  return boundaries_1.CLUSTER_BREAK.CONTROL;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return boundaries_1.CLUSTER_BREAK.OTHER;
        }
        /**
         * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
         * @param code {number} Unicode code point
         * @returns {number}
         */
        static getEmojiProperty(code2) {
          if (code2 < 10160) {
            if (code2 < 9728) {
              if (code2 < 9e3) {
                if (code2 < 8482) {
                  if (code2 < 8252) {
                    if (169 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (174 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (8252 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (8265 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 8596) {
                    if (8482 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (8505 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 8617) {
                      if (8596 <= code2 && code2 <= 8601) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 8986) {
                        if (8617 <= code2 && code2 <= 8618) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (8986 <= code2 && code2 <= 8987) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 9410) {
                  if (code2 < 9167) {
                    if (9e3 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (9096 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 9193) {
                      if (9167 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9208) {
                        if (9193 <= code2 && code2 <= 9203) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9208 <= code2 && code2 <= 9210) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 9654) {
                    if (code2 < 9642) {
                      if (9410 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9642 <= code2 && code2 <= 9643) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 9664) {
                      if (9654 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9723) {
                        if (9664 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9723 <= code2 && code2 <= 9726) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 10035) {
                if (code2 < 10004) {
                  if (code2 < 9748) {
                    if (code2 < 9735) {
                      if (9728 <= code2 && code2 <= 9733) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9735 <= code2 && code2 <= 9746) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 9872) {
                      if (9748 <= code2 && code2 <= 9861) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 9992) {
                        if (9872 <= code2 && code2 <= 9989) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (9992 <= code2 && code2 <= 10002) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 10013) {
                    if (10004 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (10006 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 10017) {
                      if (10013 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10017 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (10024 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 10067) {
                  if (code2 < 10055) {
                    if (code2 < 10052) {
                      if (10035 <= code2 && code2 <= 10036) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10052 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 10060) {
                      if (10055 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10060 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (10062 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                } else {
                  if (code2 < 10083) {
                    if (code2 < 10071) {
                      if (10067 <= code2 && code2 <= 10069) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10071 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 10133) {
                      if (10083 <= code2 && code2 <= 10087) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 10145) {
                        if (10133 <= code2 && code2 <= 10135) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (10145 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 127489) {
              if (code2 < 12951) {
                if (code2 < 11035) {
                  if (code2 < 10548) {
                    if (10160 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (10175 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 11013) {
                      if (10548 <= code2 && code2 <= 10549) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (11013 <= code2 && code2 <= 11015) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                } else {
                  if (code2 < 11093) {
                    if (code2 < 11088) {
                      if (11035 <= code2 && code2 <= 11036) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (11088 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 12336) {
                      if (11093 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (12336 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                      if (12349 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 127340) {
                  if (code2 < 126976) {
                    if (12951 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (12953 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 127245) {
                      if (126976 <= code2 && code2 <= 127231) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127279) {
                        if (127245 <= code2 && code2 <= 127247) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127279 === code2) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 127374) {
                    if (code2 < 127358) {
                      if (127340 <= code2 && code2 <= 127345) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127358 <= code2 && code2 <= 127359) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 127377) {
                      if (127374 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127405) {
                        if (127377 <= code2 && code2 <= 127386) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127405 <= code2 && code2 <= 127461) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 128981) {
                if (code2 < 127561) {
                  if (code2 < 127535) {
                    if (code2 < 127514) {
                      if (127489 <= code2 && code2 <= 127503) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127514 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 127538) {
                      if (127535 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 127548) {
                        if (127538 <= code2 && code2 <= 127546) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (127548 <= code2 && code2 <= 127551) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 128326) {
                    if (code2 < 128e3) {
                      if (127561 <= code2 && code2 <= 127994) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (128e3 <= code2 && code2 <= 128317) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 128640) {
                      if (128326 <= code2 && code2 <= 128591) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 128884) {
                        if (128640 <= code2 && code2 <= 128767) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (128884 <= code2 && code2 <= 128895) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 129198) {
                  if (code2 < 129096) {
                    if (code2 < 129036) {
                      if (128981 <= code2 && code2 <= 129023) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (129036 <= code2 && code2 <= 129039) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 129114) {
                      if (129096 <= code2 && code2 <= 129103) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 129160) {
                        if (129114 <= code2 && code2 <= 129119) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (129160 <= code2 && code2 <= 129167) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 129340) {
                    if (code2 < 129292) {
                      if (129198 <= code2 && code2 <= 129279) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (129292 <= code2 && code2 <= 129338) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  } else {
                    if (code2 < 129351) {
                      if (129340 <= code2 && code2 <= 129349) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (code2 < 130048) {
                        if (129351 <= code2 && code2 <= 129791) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      } else {
                        if (130048 <= code2 && code2 <= 131069) {
                          return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return boundaries_1.CLUSTER_BREAK.OTHER;
        }
      };
      exports.default = Graphemer;
    }
  });

  // coldsky/node_modules/graphemer/lib/index.js
  var require_lib2 = __commonJS({
    "coldsky/node_modules/graphemer/lib/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var Graphemer_1 = __importDefault(require_Graphemer());
      exports.default = Graphemer_1.default;
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/strings.js
  var require_strings = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/strings.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLanguage = exports.parseLanguage = exports.b64UrlToUtf8 = exports.utf8ToB64Url = exports.graphemeLen = exports.utf8Len = void 0;
      var graphemer_1 = __importDefault(require_lib2());
      var ui8 = __importStar((init_src2(), __toCommonJS(src_exports)));
      var utf8Len = (str) => {
        return new TextEncoder().encode(str).byteLength;
      };
      exports.utf8Len = utf8Len;
      var graphemeLen = (str) => {
        const splitter = new graphemer_1.default();
        return splitter.countGraphemes(str);
      };
      exports.graphemeLen = graphemeLen;
      var utf8ToB64Url = (utf8) => {
        return ui8.toString(ui8.fromString(utf8, "utf8"), "base64url");
      };
      exports.utf8ToB64Url = utf8ToB64Url;
      var b64UrlToUtf8 = (b64) => {
        return ui8.toString(ui8.fromString(b64, "base64url"), "utf8");
      };
      exports.b64UrlToUtf8 = b64UrlToUtf8;
      var parseLanguage = (langTag) => {
        const parsed = langTag.match(bcp47Regexp);
        if (!(parsed == null ? void 0 : parsed.groups))
          return null;
        const parts = parsed.groups;
        return {
          grandfathered: parts.grandfathered,
          language: parts.language,
          extlang: parts.extlang,
          script: parts.script,
          region: parts.region,
          variant: parts.variant,
          extension: parts.extension,
          privateUse: parts.privateUseA || parts.privateUseB
        };
      };
      exports.parseLanguage = parseLanguage;
      var validateLanguage = (langTag) => {
        return bcp47Regexp.test(langTag);
      };
      exports.validateLanguage = validateLanguage;
      var bcp47Regexp = new RegExp("^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$");
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/did-doc.js
  var require_did_doc = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/did-doc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.didDocument = exports.getServiceEndpoint = exports.getNotifEndpoint = exports.getFeedGenEndpoint = exports.getPdsEndpoint = exports.getSigningDidKey = exports.getVerificationMaterial = exports.getSigningKey = exports.getHandle = exports.getDid = exports.isValidDidDoc = void 0;
      var zod_1 = require_lib();
      var isValidDidDoc = (doc) => {
        return exports.didDocument.safeParse(doc).success;
      };
      exports.isValidDidDoc = isValidDidDoc;
      var getDid = (doc) => {
        const id = doc.id;
        if (typeof id !== "string") {
          throw new Error("No `id` on document");
        }
        return id;
      };
      exports.getDid = getDid;
      var getHandle = (doc) => {
        const aka = doc.alsoKnownAs;
        if (!aka)
          return void 0;
        const found = aka.find((name2) => name2.startsWith("at://"));
        if (!found)
          return void 0;
        return found.slice(5);
      };
      exports.getHandle = getHandle;
      var getSigningKey = (doc) => {
        return (0, exports.getVerificationMaterial)(doc, "atproto");
      };
      exports.getSigningKey = getSigningKey;
      var getVerificationMaterial = (doc, keyId) => {
        const did = (0, exports.getDid)(doc);
        let keys = doc.verificationMethod;
        if (!keys)
          return void 0;
        if (typeof keys !== "object")
          return void 0;
        if (!Array.isArray(keys)) {
          keys = [keys];
        }
        const found = keys.find((key) => key.id === `#${keyId}` || key.id === `${did}#${keyId}`);
        if (!(found == null ? void 0 : found.publicKeyMultibase))
          return void 0;
        return {
          type: found.type,
          publicKeyMultibase: found.publicKeyMultibase
        };
      };
      exports.getVerificationMaterial = getVerificationMaterial;
      var getSigningDidKey = (doc) => {
        const parsed = (0, exports.getSigningKey)(doc);
        if (!parsed)
          return;
        return `did:key:${parsed.publicKeyMultibase}`;
      };
      exports.getSigningDidKey = getSigningDidKey;
      var getPdsEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#atproto_pds",
          type: "AtprotoPersonalDataServer"
        });
      };
      exports.getPdsEndpoint = getPdsEndpoint;
      var getFeedGenEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#bsky_fg",
          type: "BskyFeedGenerator"
        });
      };
      exports.getFeedGenEndpoint = getFeedGenEndpoint;
      var getNotifEndpoint = (doc) => {
        return (0, exports.getServiceEndpoint)(doc, {
          id: "#bsky_notif",
          type: "BskyNotificationService"
        });
      };
      exports.getNotifEndpoint = getNotifEndpoint;
      var getServiceEndpoint = (doc, opts) => {
        const did = (0, exports.getDid)(doc);
        let services = doc.service;
        if (!services)
          return void 0;
        if (typeof services !== "object")
          return void 0;
        if (!Array.isArray(services)) {
          services = [services];
        }
        const found = services.find((service2) => service2.id === opts.id || service2.id === `${did}${opts.id}`);
        if (!found)
          return void 0;
        if (opts.type && found.type !== opts.type) {
          return void 0;
        }
        if (typeof found.serviceEndpoint !== "string") {
          return void 0;
        }
        return validateUrl(found.serviceEndpoint);
      };
      exports.getServiceEndpoint = getServiceEndpoint;
      var validateUrl = (urlStr) => {
        let url;
        try {
          url = new URL(urlStr);
        } catch (e) {
          return void 0;
        }
        if (!["http:", "https:"].includes(url.protocol)) {
          return void 0;
        } else if (!url.hostname) {
          return void 0;
        } else {
          return urlStr;
        }
      };
      var verificationMethod = zod_1.z.object({
        id: zod_1.z.string(),
        type: zod_1.z.string(),
        controller: zod_1.z.string(),
        publicKeyMultibase: zod_1.z.string().optional()
      });
      var service = zod_1.z.object({
        id: zod_1.z.string(),
        type: zod_1.z.string(),
        serviceEndpoint: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.unknown())])
      });
      exports.didDocument = zod_1.z.object({
        id: zod_1.z.string(),
        alsoKnownAs: zod_1.z.array(zod_1.z.string()).optional(),
        verificationMethod: zod_1.z.array(verificationMethod).optional(),
        service: zod_1.z.array(service).optional()
      });
    }
  });

  // coldsky/node_modules/@atproto/common-web/dist/index.js
  var require_dist2 = __commonJS({
    "coldsky/node_modules/@atproto/common-web/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.util = exports.check = void 0;
      exports.check = __importStar(require_check());
      exports.util = __importStar(require_util2());
      __exportStar(require_arrays(), exports);
      __exportStar(require_async(), exports);
      __exportStar(require_util2(), exports);
      __exportStar(require_tid2(), exports);
      __exportStar(require_ipld(), exports);
      __exportStar(require_retry(), exports);
      __exportStar(require_types2(), exports);
      __exportStar(require_times(), exports);
      __exportStar(require_strings(), exports);
      __exportStar(require_did_doc(), exports);
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/vendor/varint.js
  function encode7(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT3) {
      out[offset++] = num & 255 | MSB3;
      num /= 128;
    }
    while (num & MSBALL3) {
      out[offset++] = num & 255 | MSB3;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode7.bytes = offset - oldOffset + 1;
    return out;
  }
  function read3(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read3.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$13) << shift : (b & REST$13) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$13);
    read3.bytes = counter - offset;
    return res;
  }
  var encode_13, MSB3, REST3, MSBALL3, INT3, decode10, MSB$13, REST$13, N13, N23, N33, N43, N53, N63, N73, N83, N93, length4, varint3, _brrp_varint3, varint_default3;
  var init_varint5 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/vendor/varint.js"() {
      encode_13 = encode7;
      MSB3 = 128;
      REST3 = 127;
      MSBALL3 = ~REST3;
      INT3 = Math.pow(2, 31);
      decode10 = read3;
      MSB$13 = 128;
      REST$13 = 127;
      N13 = Math.pow(2, 7);
      N23 = Math.pow(2, 14);
      N33 = Math.pow(2, 21);
      N43 = Math.pow(2, 28);
      N53 = Math.pow(2, 35);
      N63 = Math.pow(2, 42);
      N73 = Math.pow(2, 49);
      N83 = Math.pow(2, 56);
      N93 = Math.pow(2, 63);
      length4 = function(value) {
        return value < N13 ? 1 : value < N23 ? 2 : value < N33 ? 3 : value < N43 ? 4 : value < N53 ? 5 : value < N63 ? 6 : value < N73 ? 7 : value < N83 ? 8 : value < N93 ? 9 : 10;
      };
      varint3 = {
        encode: encode_13,
        decode: decode10,
        encodingLength: length4
      };
      _brrp_varint3 = varint3;
      varint_default3 = _brrp_varint3;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/varint.js
  var decode11, encodeTo3, encodingLength3;
  var init_varint6 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/varint.js"() {
      init_varint5();
      decode11 = (data, offset = 0) => {
        const code2 = varint_default3.decode(data, offset);
        return [
          code2,
          varint_default3.decode.bytes
        ];
      };
      encodeTo3 = (int, target2, offset = 0) => {
        varint_default3.encode(int, target2, offset);
        return target2;
      };
      encodingLength3 = (int) => {
        return varint_default3.encodingLength(int);
      };
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bytes.js
  var empty3, equals6, coerce3;
  var init_bytes3 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bytes.js"() {
      empty3 = new Uint8Array(0);
      equals6 = (aa, bb) => {
        if (aa === bb)
          return true;
        if (aa.byteLength !== bb.byteLength) {
          return false;
        }
        for (let ii = 0; ii < aa.byteLength; ii++) {
          if (aa[ii] !== bb[ii]) {
            return false;
          }
        }
        return true;
      };
      coerce3 = (o) => {
        if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
          return o;
        if (o instanceof ArrayBuffer)
          return new Uint8Array(o);
        if (ArrayBuffer.isView(o)) {
          return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
        }
        throw new Error("Unknown type, must be binary type");
      };
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/hashes/digest.js
  var create3, decode12, equals7, Digest3;
  var init_digest3 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/hashes/digest.js"() {
      init_bytes3();
      init_varint6();
      create3 = (code2, digest2) => {
        const size = digest2.byteLength;
        const sizeOffset = encodingLength3(code2);
        const digestOffset = sizeOffset + encodingLength3(size);
        const bytes = new Uint8Array(digestOffset + size);
        encodeTo3(code2, bytes, 0);
        encodeTo3(size, bytes, sizeOffset);
        bytes.set(digest2, digestOffset);
        return new Digest3(code2, size, digest2, bytes);
      };
      decode12 = (multihash) => {
        const bytes = coerce3(multihash);
        const [code2, sizeOffset] = decode11(bytes);
        const [size, digestOffset] = decode11(bytes.subarray(sizeOffset));
        const digest2 = bytes.subarray(sizeOffset + digestOffset);
        if (digest2.byteLength !== size) {
          throw new Error("Incorrect length");
        }
        return new Digest3(code2, size, digest2, bytes);
      };
      equals7 = (a, b) => {
        if (a === b) {
          return true;
        } else {
          return a.code === b.code && a.size === b.size && equals6(a.bytes, b.bytes);
        }
      };
      Digest3 = class {
        constructor(code2, size, digest2, bytes) {
          this.code = code2;
          this.size = size;
          this.digest = digest2;
          this.bytes = bytes;
        }
      };
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/vendor/base-x.js
  function base3(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode13(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length6 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length6) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length6 = i2;
        pbegin++;
      }
      var it2 = size - length6;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length6 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length6) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length6 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length6;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode21(string2) {
      var buffer2 = decodeUnsafe(string2);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode13,
      decodeUnsafe,
      decode: decode21
    };
  }
  var src3, _brrp__multiformats_scope_baseX3, base_x_default3;
  var init_base_x3 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/vendor/base-x.js"() {
      src3 = base3;
      _brrp__multiformats_scope_baseX3 = src3;
      base_x_default3 = _brrp__multiformats_scope_baseX3;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base.js
  var Encoder3, Decoder3, ComposedDecoder3, or3, Codec3, from5, baseX3, decode13, encode8, rfc46483;
  var init_base3 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base.js"() {
      init_base_x3();
      init_bytes3();
      Encoder3 = class {
        constructor(name2, prefix2, baseEncode) {
          this.name = name2;
          this.prefix = prefix2;
          this.baseEncode = baseEncode;
        }
        encode(bytes) {
          if (bytes instanceof Uint8Array) {
            return `${this.prefix}${this.baseEncode(bytes)}`;
          } else {
            throw Error("Unknown type, must be binary type");
          }
        }
      };
      Decoder3 = class {
        constructor(name2, prefix2, baseDecode) {
          this.name = name2;
          this.prefix = prefix2;
          if (prefix2.codePointAt(0) === void 0) {
            throw new Error("Invalid prefix character");
          }
          this.prefixCodePoint = prefix2.codePointAt(0);
          this.baseDecode = baseDecode;
        }
        decode(text) {
          if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) {
              throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            }
            return this.baseDecode(text.slice(this.prefix.length));
          } else {
            throw Error("Can only multibase decode strings");
          }
        }
        or(decoder2) {
          return or3(this, decoder2);
        }
      };
      ComposedDecoder3 = class {
        constructor(decoders) {
          this.decoders = decoders;
        }
        or(decoder2) {
          return or3(this, decoder2);
        }
        decode(input) {
          const prefix2 = input[0];
          const decoder2 = this.decoders[prefix2];
          if (decoder2) {
            return decoder2.decode(input);
          } else {
            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
          }
        }
      };
      or3 = (left, right) => new ComposedDecoder3(__spreadValues(__spreadValues({}, left.decoders || { [left.prefix]: left }), right.decoders || { [right.prefix]: right }));
      Codec3 = class {
        constructor(name2, prefix2, baseEncode, baseDecode) {
          this.name = name2;
          this.prefix = prefix2;
          this.baseEncode = baseEncode;
          this.baseDecode = baseDecode;
          this.encoder = new Encoder3(name2, prefix2, baseEncode);
          this.decoder = new Decoder3(name2, prefix2, baseDecode);
        }
        encode(input) {
          return this.encoder.encode(input);
        }
        decode(input) {
          return this.decoder.decode(input);
        }
      };
      from5 = ({ name: name2, prefix: prefix2, encode: encode13, decode: decode21 }) => new Codec3(name2, prefix2, encode13, decode21);
      baseX3 = ({ prefix: prefix2, name: name2, alphabet: alphabet2 }) => {
        const { encode: encode13, decode: decode21 } = base_x_default3(alphabet2, name2);
        return from5({
          prefix: prefix2,
          name: name2,
          encode: encode13,
          decode: (text) => coerce3(decode21(text))
        });
      };
      decode13 = (string2, alphabet2, bitsPerChar, name2) => {
        const codes = {};
        for (let i = 0; i < alphabet2.length; ++i) {
          codes[alphabet2[i]] = i;
        }
        let end = string2.length;
        while (string2[end - 1] === "=") {
          --end;
        }
        const out = new Uint8Array(end * bitsPerChar / 8 | 0);
        let bits = 0;
        let buffer2 = 0;
        let written = 0;
        for (let i = 0; i < end; ++i) {
          const value = codes[string2[i]];
          if (value === void 0) {
            throw new SyntaxError(`Non-${name2} character`);
          }
          buffer2 = buffer2 << bitsPerChar | value;
          bits += bitsPerChar;
          if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer2 >> bits;
          }
        }
        if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
          throw new SyntaxError("Unexpected end of data");
        }
        return out;
      };
      encode8 = (data, alphabet2, bitsPerChar) => {
        const pad = alphabet2[alphabet2.length - 1] === "=";
        const mask = (1 << bitsPerChar) - 1;
        let out = "";
        let bits = 0;
        let buffer2 = 0;
        for (let i = 0; i < data.length; ++i) {
          buffer2 = buffer2 << 8 | data[i];
          bits += 8;
          while (bits > bitsPerChar) {
            bits -= bitsPerChar;
            out += alphabet2[mask & buffer2 >> bits];
          }
        }
        if (bits) {
          out += alphabet2[mask & buffer2 << bitsPerChar - bits];
        }
        if (pad) {
          while (out.length * bitsPerChar & 7) {
            out += "=";
          }
        }
        return out;
      };
      rfc46483 = ({ name: name2, prefix: prefix2, bitsPerChar, alphabet: alphabet2 }) => {
        return from5({
          prefix: prefix2,
          name: name2,
          encode(input) {
            return encode8(input, alphabet2, bitsPerChar);
          },
          decode(input) {
            return decode13(input, alphabet2, bitsPerChar, name2);
          }
        });
      };
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base58.js
  var base58btc3, base58flickr3;
  var init_base583 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base58.js"() {
      init_base3();
      base58btc3 = baseX3({
        name: "base58btc",
        prefix: "z",
        alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      });
      base58flickr3 = baseX3({
        name: "base58flickr",
        prefix: "Z",
        alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
      });
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base32.js
  var base323, base32upper3, base32pad3, base32padupper3, base32hex3, base32hexupper3, base32hexpad3, base32hexpadupper3, base32z3;
  var init_base323 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/bases/base32.js"() {
      init_base3();
      base323 = rfc46483({
        prefix: "b",
        name: "base32",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567",
        bitsPerChar: 5
      });
      base32upper3 = rfc46483({
        prefix: "B",
        name: "base32upper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        bitsPerChar: 5
      });
      base32pad3 = rfc46483({
        prefix: "c",
        name: "base32pad",
        alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
        bitsPerChar: 5
      });
      base32padupper3 = rfc46483({
        prefix: "C",
        name: "base32padupper",
        alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
        bitsPerChar: 5
      });
      base32hex3 = rfc46483({
        prefix: "v",
        name: "base32hex",
        alphabet: "0123456789abcdefghijklmnopqrstuv",
        bitsPerChar: 5
      });
      base32hexupper3 = rfc46483({
        prefix: "V",
        name: "base32hexupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        bitsPerChar: 5
      });
      base32hexpad3 = rfc46483({
        prefix: "t",
        name: "base32hexpad",
        alphabet: "0123456789abcdefghijklmnopqrstuv=",
        bitsPerChar: 5
      });
      base32hexpadupper3 = rfc46483({
        prefix: "T",
        name: "base32hexpadupper",
        alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
        bitsPerChar: 5
      });
      base32z3 = rfc46483({
        prefix: "h",
        name: "base32z",
        alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
        bitsPerChar: 5
      });
    }
  });

  // coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/cid.js
  var cid_exports2 = {};
  __export(cid_exports2, {
    CID: () => CID3
  });
  var CID3, parseCIDtoBytes3, toStringV03, toStringV13, DAG_PB_CODE3, SHA_256_CODE3, encodeCID3, cidSymbol3, readonly3, hidden3, version3, deprecate3, IS_CID_DEPRECATION3;
  var init_cid3 = __esm({
    "coldsky/node_modules/@atproto/lexicon/node_modules/multiformats/esm/src/cid.js"() {
      init_varint6();
      init_digest3();
      init_base583();
      init_base323();
      init_bytes3();
      CID3 = class _CID {
        constructor(version5, code2, multihash, bytes) {
          this.code = code2;
          this.version = version5;
          this.multihash = multihash;
          this.bytes = bytes;
          this.byteOffset = bytes.byteOffset;
          this.byteLength = bytes.byteLength;
          this.asCID = this;
          this._baseCache = /* @__PURE__ */ new Map();
          Object.defineProperties(this, {
            byteOffset: hidden3,
            byteLength: hidden3,
            code: readonly3,
            version: readonly3,
            multihash: readonly3,
            bytes: readonly3,
            _baseCache: hidden3,
            asCID: hidden3
          });
        }
        toV0() {
          switch (this.version) {
            case 0: {
              return this;
            }
            default: {
              const { code: code2, multihash } = this;
              if (code2 !== DAG_PB_CODE3) {
                throw new Error("Cannot convert a non dag-pb CID to CIDv0");
              }
              if (multihash.code !== SHA_256_CODE3) {
                throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
              }
              return _CID.createV0(multihash);
            }
          }
        }
        toV1() {
          switch (this.version) {
            case 0: {
              const { code: code2, digest: digest2 } = this.multihash;
              const multihash = create3(code2, digest2);
              return _CID.createV1(this.code, multihash);
            }
            case 1: {
              return this;
            }
            default: {
              throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
            }
          }
        }
        equals(other) {
          return other && this.code === other.code && this.version === other.version && equals7(this.multihash, other.multihash);
        }
        toString(base5) {
          const { bytes, version: version5, _baseCache } = this;
          switch (version5) {
            case 0:
              return toStringV03(bytes, _baseCache, base5 || base58btc3.encoder);
            default:
              return toStringV13(bytes, _baseCache, base5 || base323.encoder);
          }
        }
        toJSON() {
          return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
          };
        }
        get [Symbol.toStringTag]() {
          return "CID";
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        static isCID(value) {
          deprecate3(/^0\.0/, IS_CID_DEPRECATION3);
          return !!(value && (value[cidSymbol3] || value.asCID === value));
        }
        get toBaseEncodedString() {
          throw new Error("Deprecated, use .toString()");
        }
        get codec() {
          throw new Error('"codec" property is deprecated, use integer "code" property instead');
        }
        get buffer() {
          throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
        }
        get multibaseName() {
          throw new Error('"multibaseName" property is deprecated');
        }
        get prefix() {
          throw new Error('"prefix" property is deprecated');
        }
        static asCID(value) {
          if (value instanceof _CID) {
            return value;
          } else if (value != null && value.asCID === value) {
            const { version: version5, code: code2, multihash, bytes } = value;
            return new _CID(version5, code2, multihash, bytes || encodeCID3(version5, code2, multihash.bytes));
          } else if (value != null && value[cidSymbol3] === true) {
            const { version: version5, multihash, code: code2 } = value;
            const digest2 = decode12(multihash);
            return _CID.create(version5, code2, digest2);
          } else {
            return null;
          }
        }
        static create(version5, code2, digest2) {
          if (typeof code2 !== "number") {
            throw new Error("String codecs are no longer supported");
          }
          switch (version5) {
            case 0: {
              if (code2 !== DAG_PB_CODE3) {
                throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE3}) block encoding`);
              } else {
                return new _CID(version5, code2, digest2, digest2.bytes);
              }
            }
            case 1: {
              const bytes = encodeCID3(version5, code2, digest2.bytes);
              return new _CID(version5, code2, digest2, bytes);
            }
            default: {
              throw new Error("Invalid version");
            }
          }
        }
        static createV0(digest2) {
          return _CID.create(0, DAG_PB_CODE3, digest2);
        }
        static createV1(code2, digest2) {
          return _CID.create(1, code2, digest2);
        }
        static decode(bytes) {
          const [cid, remainder] = _CID.decodeFirst(bytes);
          if (remainder.length) {
            throw new Error("Incorrect length");
          }
          return cid;
        }
        static decodeFirst(bytes) {
          const specs = _CID.inspectBytes(bytes);
          const prefixSize = specs.size - specs.multihashSize;
          const multihashBytes = coerce3(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
          if (multihashBytes.byteLength !== specs.multihashSize) {
            throw new Error("Incorrect length");
          }
          const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
          const digest2 = new Digest3(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
          const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
          return [
            cid,
            bytes.subarray(specs.size)
          ];
        }
        static inspectBytes(initialBytes) {
          let offset = 0;
          const next2 = () => {
            const [i, length6] = decode11(initialBytes.subarray(offset));
            offset += length6;
            return i;
          };
          let version5 = next2();
          let codec = DAG_PB_CODE3;
          if (version5 === 18) {
            version5 = 0;
            offset = 0;
          } else if (version5 === 1) {
            codec = next2();
          }
          if (version5 !== 0 && version5 !== 1) {
            throw new RangeError(`Invalid CID version ${version5}`);
          }
          const prefixSize = offset;
          const multihashCode = next2();
          const digestSize = next2();
          const size = offset + digestSize;
          const multihashSize = size - prefixSize;
          return {
            version: version5,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
          };
        }
        static parse(source, base5) {
          const [prefix2, bytes] = parseCIDtoBytes3(source, base5);
          const cid = _CID.decode(bytes);
          cid._baseCache.set(prefix2, source);
          return cid;
        }
      };
      parseCIDtoBytes3 = (source, base5) => {
        switch (source[0]) {
          case "Q": {
            const decoder2 = base5 || base58btc3;
            return [
              base58btc3.prefix,
              decoder2.decode(`${base58btc3.prefix}${source}`)
            ];
          }
          case base58btc3.prefix: {
            const decoder2 = base5 || base58btc3;
            return [
              base58btc3.prefix,
              decoder2.decode(source)
            ];
          }
          case base323.prefix: {
            const decoder2 = base5 || base323;
            return [
              base323.prefix,
              decoder2.decode(source)
            ];
          }
          default: {
            if (base5 == null) {
              throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            }
            return [
              source[0],
              base5.decode(source)
            ];
          }
        }
      };
      toStringV03 = (bytes, cache2, base5) => {
        const { prefix: prefix2 } = base5;
        if (prefix2 !== base58btc3.prefix) {
          throw Error(`Cannot string encode V0 in ${base5.name} encoding`);
        }
        const cid = cache2.get(prefix2);
        if (cid == null) {
          const cid2 = base5.encode(bytes).slice(1);
          cache2.set(prefix2, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      toStringV13 = (bytes, cache2, base5) => {
        const { prefix: prefix2 } = base5;
        const cid = cache2.get(prefix2);
        if (cid == null) {
          const cid2 = base5.encode(bytes);
          cache2.set(prefix2, cid2);
          return cid2;
        } else {
          return cid;
        }
      };
      DAG_PB_CODE3 = 112;
      SHA_256_CODE3 = 18;
      encodeCID3 = (version5, code2, multihash) => {
        const codeOffset = encodingLength3(version5);
        const hashOffset = codeOffset + encodingLength3(code2);
        const bytes = new Uint8Array(hashOffset + multihash.byteLength);
        encodeTo3(version5, bytes, 0);
        encodeTo3(code2, bytes, codeOffset);
        bytes.set(multihash, hashOffset);
        return bytes;
      };
      cidSymbol3 = Symbol.for("@ipld/js-cid/CID");
      readonly3 = {
        writable: false,
        configurable: false,
        enumerable: true
      };
      hidden3 = {
        writable: false,
        enumerable: false,
        configurable: false
      };
      version3 = "0.0.0-dev";
      deprecate3 = (range, message) => {
        if (range.test(version3)) {
          console.warn(message);
        } else {
          throw new Error(message);
        }
      };
      IS_CID_DEPRECATION3 = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
    }
  });

  // coldsky/node_modules/iso-datestring-validator/dist/index.js
  var require_dist3 = __commonJS({
    "coldsky/node_modules/iso-datestring-validator/dist/index.js"(exports) {
      (() => {
        "use strict";
        var e = { d: (t2, r3) => {
          for (var n2 in r3)
            e.o(r3, n2) && !e.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: r3[n2] });
        }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        } }, t = {};
        function r2(e2, t2) {
          return void 0 === t2 && (t2 = "-"), new RegExp("^(?!0{4}" + t2 + "0{2}" + t2 + "0{2})((?=[0-9]{4}" + t2 + "(((0[^2])|1[0-2])|02(?=" + t2 + "(([0-1][0-9])|2[0-8])))" + t2 + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t2 + "02" + t2 + "29))([0-9]{4})" + t2 + "(?!((0[469])|11)" + t2 + "31)((0[1,3-9]|1[0-2])|(02(?!" + t2 + "3)))" + t2 + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e2);
        }
        function n(e2) {
          var t2 = /\D/.exec(e2);
          return t2 ? t2[0] : "";
        }
        function i(e2, t2, r3) {
          void 0 === t2 && (t2 = ":"), void 0 === r3 && (r3 = false);
          var i2 = new RegExp("^([0-1]|2(?=([0-3])|4" + t2 + "00))[0-9]" + t2 + "[0-5][0-9](" + t2 + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
          if (!r3 || !/[Z+\-]/.test(e2))
            return i2.test(e2);
          if (/Z$/.test(e2))
            return i2.test(e2.replace("Z", ""));
          var o2 = e2.includes("+"), a2 = e2.split(/[+-]/), u2 = a2[0], d2 = a2[1];
          return i2.test(u2) && function(e3, t3, r4) {
            return void 0 === r4 && (r4 = ":"), new RegExp(t3 ? "^(0(?!(2" + r4 + "4)|0" + r4 + "3)|1(?=([0-1]|2(?=" + r4 + "[04])|[34](?=" + r4 + "0))))([03469](?=" + r4 + "[03])|[17](?=" + r4 + "0)|2(?=" + r4 + "[04])|5(?=" + r4 + "[034])|8(?=" + r4 + "[04]))" + r4 + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r4 + "[03])|[0-24-8](?=" + r4 + "00))" + r4 + "[03]0$").test(e3);
          }(d2, o2, n(d2));
        }
        function o(e2) {
          var t2 = e2.split("T"), o2 = t2[0], a2 = t2[1], u2 = r2(o2, n(o2));
          if (!a2)
            return false;
          var d2, s = (d2 = a2.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d2) ? d2[0] : "");
          return u2 && i(a2, s, true);
        }
        function a(e2, t2) {
          return void 0 === t2 && (t2 = "-"), new RegExp("^[0-9]{4}" + t2 + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e2);
        }
        e.r(t), e.d(t, { isValidDate: () => r2, isValidISODateString: () => o, isValidTime: () => i, isValidYearMonth: () => a });
        var u = exports;
        for (var d in t)
          u[d] = t[d];
        t.__esModule && Object.defineProperty(u, "__esModule", { value: true });
      })();
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/validators/formats.js
  var require_formats = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/validators/formats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.language = exports.cid = exports.nsid = exports.atIdentifier = exports.handle = exports.did = exports.atUri = exports.uri = exports.datetime = void 0;
      var iso_datestring_validator_1 = require_dist3();
      var cid_1 = (init_cid3(), __toCommonJS(cid_exports2));
      var types_1 = require_types3();
      var syntax_1 = require_dist();
      var common_web_1 = require_dist2();
      function datetime(path, value) {
        try {
          if (!(0, iso_datestring_validator_1.isValidISODateString)(value)) {
            throw new Error();
          }
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)
          };
        }
        return { success: true, value };
      }
      exports.datetime = datetime;
      function uri(path, value) {
        const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
        if (!isUri) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a uri`)
          };
        }
        return { success: true, value };
      }
      exports.uri = uri;
      function atUri(path, value) {
        try {
          (0, syntax_1.ensureValidAtUri)(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid at-uri`)
          };
        }
        return { success: true, value };
      }
      exports.atUri = atUri;
      function did(path, value) {
        try {
          (0, syntax_1.ensureValidDid)(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid did`)
          };
        }
        return { success: true, value };
      }
      exports.did = did;
      function handle(path, value) {
        try {
          (0, syntax_1.ensureValidHandle)(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid handle`)
          };
        }
        return { success: true, value };
      }
      exports.handle = handle;
      function atIdentifier(path, value) {
        const isDid = did(path, value);
        if (!isDid.success) {
          const isHandle = handle(path, value);
          if (!isHandle.success) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be a valid did or a handle`)
            };
          }
        }
        return { success: true, value };
      }
      exports.atIdentifier = atIdentifier;
      function nsid(path, value) {
        try {
          (0, syntax_1.ensureValidNsid)(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid nsid`)
          };
        }
        return { success: true, value };
      }
      exports.nsid = nsid;
      function cid(path, value) {
        try {
          cid_1.CID.parse(value);
        } catch (e) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a cid string`)
          };
        }
        return { success: true, value };
      }
      exports.cid = cid;
      function language(path, value) {
        if ((0, common_web_1.validateLanguage)(value)) {
          return { success: true, value };
        }
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a well-formed BCP 47 language tag`)
        };
      }
      exports.language = language;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/validators/primitives.js
  var require_primitives = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/validators/primitives.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unknown = exports.cidLink = exports.bytes = exports.string = exports.integer = exports.boolean = exports.validate = void 0;
      var common_web_1 = require_dist2();
      var cid_1 = (init_cid3(), __toCommonJS(cid_exports2));
      var formats = __importStar(require_formats());
      var types_1 = require_types3();
      function validate(lexicons, path, def, value) {
        switch (def.type) {
          case "boolean":
            return boolean(lexicons, path, def, value);
          case "integer":
            return integer(lexicons, path, def, value);
          case "string":
            return string2(lexicons, path, def, value);
          case "bytes":
            return bytes(lexicons, path, def, value);
          case "cid-link":
            return cidLink(lexicons, path, def, value);
          case "unknown":
            return unknown(lexicons, path, def, value);
          default:
            return {
              success: false,
              error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
            };
        }
      }
      exports.validate = validate;
      function boolean(lexicons, path, def, value) {
        def = def;
        const type = typeof value;
        if (type === "undefined") {
          if (typeof def.default === "boolean") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a boolean`)
          };
        } else if (type !== "boolean") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a boolean`)
          };
        }
        if (typeof def.const === "boolean") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        return { success: true, value };
      }
      exports.boolean = boolean;
      function integer(lexicons, path, def, value) {
        def = def;
        const type = typeof value;
        if (type === "undefined") {
          if (typeof def.default === "number") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an integer`)
          };
        } else if (!Number.isInteger(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an integer`)
          };
        }
        if (typeof def.const === "number") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        if (Array.isArray(def.enum)) {
          if (!def.enum.includes(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be one of (${def.enum.join("|")})`)
            };
          }
        }
        if (typeof def.maximum === "number") {
          if (value > def.maximum) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} can not be greater than ${def.maximum}`)
            };
          }
        }
        if (typeof def.minimum === "number") {
          if (value < def.minimum) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} can not be less than ${def.minimum}`)
            };
          }
        }
        return { success: true, value };
      }
      exports.integer = integer;
      function string2(lexicons, path, def, value) {
        def = def;
        if (typeof value === "undefined") {
          if (typeof def.default === "string") {
            return { success: true, value: def.default };
          }
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a string`)
          };
        } else if (typeof value !== "string") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a string`)
          };
        }
        if (typeof def.const === "string") {
          if (value !== def.const) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be ${def.const}`)
            };
          }
        }
        if (Array.isArray(def.enum)) {
          if (!def.enum.includes(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be one of (${def.enum.join("|")})`)
            };
          }
        }
        if (typeof def.maxLength === "number") {
          if ((0, common_web_1.utf8Len)(value) > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be longer than ${def.maxLength} characters`)
            };
          }
        }
        if (typeof def.minLength === "number") {
          if ((0, common_web_1.utf8Len)(value) < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
            };
          }
        }
        if (typeof def.maxGraphemes === "number") {
          if ((0, common_web_1.graphemeLen)(value) > def.maxGraphemes) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be longer than ${def.maxGraphemes} graphemes`)
            };
          }
        }
        if (typeof def.minGraphemes === "number") {
          if ((0, common_web_1.graphemeLen)(value) < def.minGraphemes) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
            };
          }
        }
        if (typeof def.format === "string") {
          switch (def.format) {
            case "datetime":
              return formats.datetime(path, value);
            case "uri":
              return formats.uri(path, value);
            case "at-uri":
              return formats.atUri(path, value);
            case "did":
              return formats.did(path, value);
            case "handle":
              return formats.handle(path, value);
            case "at-identifier":
              return formats.atIdentifier(path, value);
            case "nsid":
              return formats.nsid(path, value);
            case "cid":
              return formats.cid(path, value);
            case "language":
              return formats.language(path, value);
          }
        }
        return { success: true, value };
      }
      exports.string = string2;
      function bytes(lexicons, path, def, value) {
        def = def;
        if (!value || !(value instanceof Uint8Array)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a byte array`)
          };
        }
        if (typeof def.maxLength === "number") {
          if (value.byteLength > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be larger than ${def.maxLength} bytes`)
            };
          }
        }
        if (typeof def.minLength === "number") {
          if (value.byteLength < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be smaller than ${def.minLength} bytes`)
            };
          }
        }
        return { success: true, value };
      }
      exports.bytes = bytes;
      function cidLink(lexicons, path, def, value) {
        if (cid_1.CID.asCID(value) === null) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a CID`)
          };
        }
        return { success: true, value };
      }
      exports.cidLink = cidLink;
      function unknown(lexicons, path, def, value) {
        if (!value || typeof value !== "object") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object`)
          };
        }
        return { success: true, value };
      }
      exports.unknown = unknown;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/blob-refs.js
  var require_blob_refs = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/blob-refs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BlobRef = exports.jsonBlobRef = exports.untypedJsonBlobRef = exports.typedJsonBlobRef = void 0;
      var common_web_1 = require_dist2();
      var cid_1 = (init_cid3(), __toCommonJS(cid_exports2));
      var zod_1 = require_lib();
      exports.typedJsonBlobRef = zod_1.z.object({
        $type: zod_1.z.literal("blob"),
        ref: common_web_1.schema.cid,
        mimeType: zod_1.z.string(),
        size: zod_1.z.number()
      }).strict();
      exports.untypedJsonBlobRef = zod_1.z.object({
        cid: zod_1.z.string(),
        mimeType: zod_1.z.string()
      }).strict();
      exports.jsonBlobRef = zod_1.z.union([exports.typedJsonBlobRef, exports.untypedJsonBlobRef]);
      var BlobRef = class _BlobRef {
        constructor(ref, mimeType, size, original) {
          Object.defineProperty(this, "ref", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ref
          });
          Object.defineProperty(this, "mimeType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mimeType
          });
          Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: size
          });
          Object.defineProperty(this, "original", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.original = original != null ? original : {
            $type: "blob",
            ref,
            mimeType,
            size
          };
        }
        static asBlobRef(obj) {
          if (common_web_1.check.is(obj, exports.jsonBlobRef)) {
            return _BlobRef.fromJsonRef(obj);
          }
          return null;
        }
        static fromJsonRef(json2) {
          if (common_web_1.check.is(json2, exports.typedJsonBlobRef)) {
            return new _BlobRef(json2.ref, json2.mimeType, json2.size);
          } else {
            return new _BlobRef(cid_1.CID.parse(json2.cid), json2.mimeType, -1, json2);
          }
        }
        ipld() {
          return {
            $type: "blob",
            ref: this.ref,
            mimeType: this.mimeType,
            size: this.size
          };
        }
        toJSON() {
          return (0, common_web_1.ipldToJson)(this.ipld());
        }
      };
      exports.BlobRef = BlobRef;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/validators/blob.js
  var require_blob = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/validators/blob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.blob = void 0;
      var blob_refs_1 = require_blob_refs();
      var types_1 = require_types3();
      function blob(lexicons, path, def, value) {
        if (!value || !(value instanceof blob_refs_1.BlobRef)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} should be a blob ref`)
          };
        }
        return { success: true, value };
      }
      exports.blob = blob;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/validators/complex.js
  var require_complex = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/validators/complex.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.object = exports.array = exports.validate = void 0;
      var types_1 = require_types3();
      var util_1 = require_util3();
      var Primitives = __importStar(require_primitives());
      var Blob2 = __importStar(require_blob());
      function validate(lexicons, path, def, value) {
        switch (def.type) {
          case "boolean":
            return Primitives.boolean(lexicons, path, def, value);
          case "integer":
            return Primitives.integer(lexicons, path, def, value);
          case "string":
            return Primitives.string(lexicons, path, def, value);
          case "bytes":
            return Primitives.bytes(lexicons, path, def, value);
          case "cid-link":
            return Primitives.cidLink(lexicons, path, def, value);
          case "unknown":
            return Primitives.unknown(lexicons, path, def, value);
          case "object":
            return object(lexicons, path, def, value);
          case "array":
            return array(lexicons, path, def, value);
          case "blob":
            return Blob2.blob(lexicons, path, def, value);
          default:
            return {
              success: false,
              error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
            };
        }
      }
      exports.validate = validate;
      function array(lexicons, path, def, value) {
        if (!Array.isArray(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an array`)
          };
        }
        if (typeof def.maxLength === "number") {
          if (value.length > def.maxLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`)
            };
          }
        }
        if (typeof def.minLength === "number") {
          if (value.length < def.minLength) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`)
            };
          }
        }
        const itemsDef = def.items;
        for (let i = 0; i < value.length; i++) {
          const itemValue = value[i];
          const itemPath = `${path}/${i}`;
          const res = (0, util_1.validateOneOf)(lexicons, itemPath, itemsDef, itemValue);
          if (!res.success) {
            return res;
          }
        }
        return { success: true, value };
      }
      exports.array = array;
      function object(lexicons, path, def, value) {
        def = def;
        if (!value || typeof value !== "object") {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object`)
          };
        }
        const requiredProps = new Set(def.required);
        const nullableProps = new Set(def.nullable);
        let resultValue = value;
        if (typeof def.properties === "object") {
          for (const key in def.properties) {
            if (value[key] === null && nullableProps.has(key)) {
              continue;
            }
            const propDef = def.properties[key];
            const propPath = `${path}/${key}`;
            const validated = (0, util_1.validateOneOf)(lexicons, propPath, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === "undefined";
            if (propIsUndefined && requiredProps.has(key)) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must have the property "${key}"`)
              };
            } else if (!propIsUndefined && !validated.success) {
              return validated;
            }
            if (propValue !== value[key]) {
              if (resultValue === value) {
                resultValue = __spreadValues({}, value);
              }
              resultValue[key] = propValue;
            }
          }
        }
        return { success: true, value: resultValue };
      }
      exports.object = object;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/util.js
  var require_util3 = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/util.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.requiredPropertiesRefinement = exports.toConcreteTypes = exports.assertValidOneOf = exports.validateOneOf = exports.toLexUri = void 0;
      var ComplexValidators = __importStar(require_complex());
      var types_1 = require_types3();
      var zod_1 = require_lib();
      function toLexUri(str, baseUri) {
        if (str.split("#").length > 2) {
          throw new Error("Uri can only have one hash segment");
        }
        if (str.startsWith("lex:")) {
          return str;
        }
        if (str.startsWith("#")) {
          if (!baseUri) {
            throw new Error(`Unable to resolve uri without anchor: ${str}`);
          }
          return `${baseUri}${str}`;
        }
        return `lex:${str}`;
      }
      exports.toLexUri = toLexUri;
      function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
        let error;
        let concreteDefs;
        if (def.type === "union") {
          if (!(0, types_1.isDiscriminatedObject)(value)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`)
            };
          }
          if (!refsContainType(def.refs, value.$type)) {
            if (def.closed) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(", ")}`)
              };
            }
            return { success: true, value };
          } else {
            concreteDefs = toConcreteTypes(lexicons, {
              type: "ref",
              ref: value.$type
            });
          }
        } else {
          concreteDefs = toConcreteTypes(lexicons, def);
        }
        for (const concreteDef of concreteDefs) {
          const result = mustBeObj ? ComplexValidators.object(lexicons, path, concreteDef, value) : ComplexValidators.validate(lexicons, path, concreteDef, value);
          if (result.success) {
            return result;
          }
          error != null ? error : error = result.error;
        }
        if (concreteDefs.length > 1) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} did not match any of the expected definitions`)
          };
        }
        return { success: false, error };
      }
      exports.validateOneOf = validateOneOf;
      function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
        const res = validateOneOf(lexicons, path, def, value, mustBeObj);
        if (!res.success)
          throw res.error;
        return res.value;
      }
      exports.assertValidOneOf = assertValidOneOf;
      function toConcreteTypes(lexicons, def) {
        if (def.type === "ref") {
          return [lexicons.getDefOrThrow(def.ref)];
        } else if (def.type === "union") {
          return def.refs.map((ref) => lexicons.getDefOrThrow(ref)).flat();
        } else {
          return [def];
        }
      }
      exports.toConcreteTypes = toConcreteTypes;
      function requiredPropertiesRefinement(object, ctx) {
        if (object.required === void 0) {
          return;
        }
        if (!Array.isArray(object.required)) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.invalid_type,
            received: typeof object.required,
            expected: "array"
          });
          return;
        }
        if (object.properties === void 0) {
          if (object.required.length > 0) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Required fields defined but no properties defined`
            });
          }
          return;
        }
        for (const field of object.required) {
          if (object.properties[field] === void 0) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Required field "${field}" not defined`
            });
          }
        }
      }
      exports.requiredPropertiesRefinement = requiredPropertiesRefinement;
      var refsContainType = (refs, type) => {
        const lexUri = toLexUri(type);
        if (refs.includes(lexUri)) {
          return true;
        }
        if (lexUri.endsWith("#main")) {
          return refs.includes(lexUri.replace("#main", ""));
        } else {
          return refs.includes(lexUri + "#main");
        }
      };
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/types.js
  var require_types3 = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LexiconDefNotFoundError = exports.InvalidLexiconError = exports.ValidationError = exports.parseLexiconDoc = exports.isDiscriminatedObject = exports.discriminatedObject = exports.hasProp = exports.isObj = exports.isValidLexiconDoc = exports.lexiconDoc = exports.lexUserType = exports.lexRecord = exports.lexXrpcSubscription = exports.lexXrpcProcedure = exports.lexXrpcQuery = exports.lexXrpcError = exports.lexXrpcSubscriptionMessage = exports.lexXrpcBody = exports.lexXrpcParameters = exports.lexObject = exports.lexToken = exports.lexPrimitiveArray = exports.lexArray = exports.lexBlob = exports.lexRefVariant = exports.lexRefUnion = exports.lexRef = exports.lexIpldType = exports.lexCidLink = exports.lexBytes = exports.lexPrimitive = exports.lexUnknown = exports.lexString = exports.lexStringFormat = exports.lexInteger = exports.lexBoolean = void 0;
      var zod_1 = require_lib();
      var syntax_1 = require_dist();
      var util_1 = require_util3();
      exports.lexBoolean = zod_1.z.object({
        type: zod_1.z.literal("boolean"),
        description: zod_1.z.string().optional(),
        default: zod_1.z.boolean().optional(),
        const: zod_1.z.boolean().optional()
      }).strict();
      exports.lexInteger = zod_1.z.object({
        type: zod_1.z.literal("integer"),
        description: zod_1.z.string().optional(),
        default: zod_1.z.number().int().optional(),
        minimum: zod_1.z.number().int().optional(),
        maximum: zod_1.z.number().int().optional(),
        enum: zod_1.z.number().int().array().optional(),
        const: zod_1.z.number().int().optional()
      }).strict();
      exports.lexStringFormat = zod_1.z.enum([
        "datetime",
        "uri",
        "at-uri",
        "did",
        "handle",
        "at-identifier",
        "nsid",
        "cid",
        "language"
      ]);
      exports.lexString = zod_1.z.object({
        type: zod_1.z.literal("string"),
        format: exports.lexStringFormat.optional(),
        description: zod_1.z.string().optional(),
        default: zod_1.z.string().optional(),
        minLength: zod_1.z.number().int().optional(),
        maxLength: zod_1.z.number().int().optional(),
        minGraphemes: zod_1.z.number().int().optional(),
        maxGraphemes: zod_1.z.number().int().optional(),
        enum: zod_1.z.string().array().optional(),
        const: zod_1.z.string().optional(),
        knownValues: zod_1.z.string().array().optional()
      }).strict();
      exports.lexUnknown = zod_1.z.object({
        type: zod_1.z.literal("unknown"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexPrimitive = zod_1.z.discriminatedUnion("type", [
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown
      ]);
      exports.lexBytes = zod_1.z.object({
        type: zod_1.z.literal("bytes"),
        description: zod_1.z.string().optional(),
        maxLength: zod_1.z.number().optional(),
        minLength: zod_1.z.number().optional()
      }).strict();
      exports.lexCidLink = zod_1.z.object({
        type: zod_1.z.literal("cid-link"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexIpldType = zod_1.z.discriminatedUnion("type", [exports.lexBytes, exports.lexCidLink]);
      exports.lexRef = zod_1.z.object({
        type: zod_1.z.literal("ref"),
        description: zod_1.z.string().optional(),
        ref: zod_1.z.string()
      }).strict();
      exports.lexRefUnion = zod_1.z.object({
        type: zod_1.z.literal("union"),
        description: zod_1.z.string().optional(),
        refs: zod_1.z.string().array(),
        closed: zod_1.z.boolean().optional()
      }).strict();
      exports.lexRefVariant = zod_1.z.discriminatedUnion("type", [exports.lexRef, exports.lexRefUnion]);
      exports.lexBlob = zod_1.z.object({
        type: zod_1.z.literal("blob"),
        description: zod_1.z.string().optional(),
        accept: zod_1.z.string().array().optional(),
        maxSize: zod_1.z.number().optional()
      }).strict();
      exports.lexArray = zod_1.z.object({
        type: zod_1.z.literal("array"),
        description: zod_1.z.string().optional(),
        items: zod_1.z.union([exports.lexPrimitive, exports.lexIpldType, exports.lexBlob, exports.lexRefVariant]),
        minLength: zod_1.z.number().int().optional(),
        maxLength: zod_1.z.number().int().optional()
      }).strict();
      exports.lexPrimitiveArray = exports.lexArray.merge(zod_1.z.object({
        items: exports.lexPrimitive
      }).strict());
      exports.lexToken = zod_1.z.object({
        type: zod_1.z.literal("token"),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexObject = zod_1.z.object({
        type: zod_1.z.literal("object"),
        description: zod_1.z.string().optional(),
        required: zod_1.z.string().array().optional(),
        nullable: zod_1.z.string().array().optional(),
        properties: zod_1.z.record(zod_1.z.union([exports.lexRefVariant, exports.lexIpldType, exports.lexArray, exports.lexBlob, exports.lexPrimitive]))
      }).strict().superRefine(util_1.requiredPropertiesRefinement);
      exports.lexXrpcParameters = zod_1.z.object({
        type: zod_1.z.literal("params"),
        description: zod_1.z.string().optional(),
        required: zod_1.z.string().array().optional(),
        properties: zod_1.z.record(zod_1.z.union([exports.lexPrimitive, exports.lexPrimitiveArray]))
      }).strict().superRefine(util_1.requiredPropertiesRefinement);
      exports.lexXrpcBody = zod_1.z.object({
        description: zod_1.z.string().optional(),
        encoding: zod_1.z.string(),
        schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
      }).strict();
      exports.lexXrpcSubscriptionMessage = zod_1.z.object({
        description: zod_1.z.string().optional(),
        schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
      }).strict();
      exports.lexXrpcError = zod_1.z.object({
        name: zod_1.z.string(),
        description: zod_1.z.string().optional()
      }).strict();
      exports.lexXrpcQuery = zod_1.z.object({
        type: zod_1.z.literal("query"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        output: exports.lexXrpcBody.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexXrpcProcedure = zod_1.z.object({
        type: zod_1.z.literal("procedure"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        input: exports.lexXrpcBody.optional(),
        output: exports.lexXrpcBody.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexXrpcSubscription = zod_1.z.object({
        type: zod_1.z.literal("subscription"),
        description: zod_1.z.string().optional(),
        parameters: exports.lexXrpcParameters.optional(),
        message: exports.lexXrpcSubscriptionMessage.optional(),
        errors: exports.lexXrpcError.array().optional()
      }).strict();
      exports.lexRecord = zod_1.z.object({
        type: zod_1.z.literal("record"),
        description: zod_1.z.string().optional(),
        key: zod_1.z.string().optional(),
        record: exports.lexObject
      }).strict();
      exports.lexUserType = zod_1.z.custom((val) => {
        if (!val || typeof val !== "object") {
          return;
        }
        if (val["type"] === void 0) {
          return;
        }
        switch (val["type"]) {
          case "record":
            return exports.lexRecord.parse(val);
          case "query":
            return exports.lexXrpcQuery.parse(val);
          case "procedure":
            return exports.lexXrpcProcedure.parse(val);
          case "subscription":
            return exports.lexXrpcSubscription.parse(val);
          case "blob":
            return exports.lexBlob.parse(val);
          case "array":
            return exports.lexArray.parse(val);
          case "token":
            return exports.lexToken.parse(val);
          case "object":
            return exports.lexObject.parse(val);
          case "boolean":
            return exports.lexBoolean.parse(val);
          case "integer":
            return exports.lexInteger.parse(val);
          case "string":
            return exports.lexString.parse(val);
          case "bytes":
            return exports.lexBytes.parse(val);
          case "cid-link":
            return exports.lexCidLink.parse(val);
          case "unknown":
            return exports.lexUnknown.parse(val);
        }
      }, (val) => {
        if (!val || typeof val !== "object") {
          return {
            message: "Must be an object",
            fatal: true
          };
        }
        if (val["type"] === void 0) {
          return {
            message: "Must have a type",
            fatal: true
          };
        }
        return {
          message: `Invalid type: ${val["type"]} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
          fatal: true
        };
      });
      exports.lexiconDoc = zod_1.z.object({
        lexicon: zod_1.z.literal(1),
        id: zod_1.z.string().refine((v) => syntax_1.NSID.isValid(v), {
          message: "Must be a valid NSID"
        }),
        revision: zod_1.z.number().optional(),
        description: zod_1.z.string().optional(),
        defs: zod_1.z.record(exports.lexUserType)
      }).strict().superRefine((doc, ctx) => {
        for (const defId in doc.defs) {
          const def = doc.defs[defId];
          if (defId !== "main" && (def.type === "record" || def.type === "procedure" || def.type === "query" || def.type === "subscription")) {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Records, procedures, queries, and subscriptions must be the main definition.`
            });
          }
        }
      });
      function isValidLexiconDoc(v) {
        return exports.lexiconDoc.safeParse(v).success;
      }
      exports.isValidLexiconDoc = isValidLexiconDoc;
      function isObj(obj) {
        return obj !== null && typeof obj === "object";
      }
      exports.isObj = isObj;
      function hasProp(data, prop) {
        return prop in data;
      }
      exports.hasProp = hasProp;
      exports.discriminatedObject = zod_1.z.object({ $type: zod_1.z.string() });
      function isDiscriminatedObject(value) {
        return exports.discriminatedObject.safeParse(value).success;
      }
      exports.isDiscriminatedObject = isDiscriminatedObject;
      function parseLexiconDoc(v) {
        exports.lexiconDoc.parse(v);
        return v;
      }
      exports.parseLexiconDoc = parseLexiconDoc;
      var ValidationError = class extends Error {
      };
      exports.ValidationError = ValidationError;
      var InvalidLexiconError = class extends Error {
      };
      exports.InvalidLexiconError = InvalidLexiconError;
      var LexiconDefNotFoundError = class extends Error {
      };
      exports.LexiconDefNotFoundError = LexiconDefNotFoundError;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/validators/xrpc.js
  var require_xrpc = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/validators/xrpc.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.params = void 0;
      var types_1 = require_types3();
      var PrimitiveValidators = __importStar(require_primitives());
      var complex_1 = require_complex();
      function params(lexicons, path, def, val) {
        var _a3;
        const value = val && typeof val === "object" ? val : {};
        const requiredProps = new Set((_a3 = def.required) != null ? _a3 : []);
        let resultValue = value;
        if (typeof def.properties === "object") {
          for (const key in def.properties) {
            const propDef = def.properties[key];
            const validated = propDef.type === "array" ? (0, complex_1.array)(lexicons, key, propDef, value[key]) : PrimitiveValidators.validate(lexicons, key, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === "undefined";
            if (propIsUndefined && requiredProps.has(key)) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must have the property "${key}"`)
              };
            } else if (!propIsUndefined && !validated.success) {
              return validated;
            }
            if (propValue !== value[key]) {
              if (resultValue === value) {
                resultValue = __spreadValues({}, value);
              }
              resultValue[key] = propValue;
            }
          }
        }
        return { success: true, value: resultValue };
      }
      exports.params = params;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/validation.js
  var require_validation = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/validation.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assertValidXrpcMessage = exports.assertValidXrpcOutput = exports.assertValidXrpcInput = exports.assertValidXrpcParams = exports.assertValidRecord = void 0;
      var util_1 = require_util3();
      var ComplexValidators = __importStar(require_complex());
      var XrpcValidators = __importStar(require_xrpc());
      function assertValidRecord(lexicons, def, value) {
        const res = ComplexValidators.object(lexicons, "Record", def.record, value);
        if (!res.success)
          throw res.error;
        return res.value;
      }
      exports.assertValidRecord = assertValidRecord;
      function assertValidXrpcParams(lexicons, def, value) {
        if (def.parameters) {
          const res = XrpcValidators.params(lexicons, "Params", def.parameters, value);
          if (!res.success)
            throw res.error;
          return res.value;
        }
      }
      exports.assertValidXrpcParams = assertValidXrpcParams;
      function assertValidXrpcInput(lexicons, def, value) {
        var _a3;
        if ((_a3 = def.input) == null ? void 0 : _a3.schema) {
          return (0, util_1.assertValidOneOf)(lexicons, "Input", def.input.schema, value, true);
        }
      }
      exports.assertValidXrpcInput = assertValidXrpcInput;
      function assertValidXrpcOutput(lexicons, def, value) {
        var _a3;
        if ((_a3 = def.output) == null ? void 0 : _a3.schema) {
          return (0, util_1.assertValidOneOf)(lexicons, "Output", def.output.schema, value, true);
        }
      }
      exports.assertValidXrpcOutput = assertValidXrpcOutput;
      function assertValidXrpcMessage(lexicons, def, value) {
        var _a3;
        if ((_a3 = def.message) == null ? void 0 : _a3.schema) {
          return (0, util_1.assertValidOneOf)(lexicons, "Message", def.message.schema, value, true);
        }
      }
      exports.assertValidXrpcMessage = assertValidXrpcMessage;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/lexicons.js
  var require_lexicons = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/lexicons.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Lexicons = void 0;
      var types_1 = require_types3();
      var validation_1 = require_validation();
      var util_1 = require_util3();
      var ComplexValidators = __importStar(require_complex());
      var Lexicons = class {
        constructor(docs) {
          Object.defineProperty(this, "docs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ new Map()
          });
          Object.defineProperty(this, "defs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: /* @__PURE__ */ new Map()
          });
          if (docs == null ? void 0 : docs.length) {
            for (const doc of docs) {
              this.add(doc);
            }
          }
        }
        /**
         * Add a lexicon doc.
         */
        add(doc) {
          const uri = (0, util_1.toLexUri)(doc.id);
          if (this.docs.has(uri)) {
            throw new Error(`${uri} has already been registered`);
          }
          resolveRefUris(doc, uri);
          this.docs.set(uri, doc);
          for (const [defUri, def] of iterDefs(doc)) {
            this.defs.set(defUri, def);
          }
        }
        /**
         * Remove a lexicon doc.
         */
        remove(uri) {
          uri = (0, util_1.toLexUri)(uri);
          const doc = this.docs.get(uri);
          if (!doc) {
            throw new Error(`Unable to remove "${uri}": does not exist`);
          }
          for (const [defUri, _def] of iterDefs(doc)) {
            this.defs.delete(defUri);
          }
          this.docs.delete(uri);
        }
        /**
         * Get a lexicon doc.
         */
        get(uri) {
          uri = (0, util_1.toLexUri)(uri);
          return this.docs.get(uri);
        }
        /**
         * Get a definition.
         */
        getDef(uri) {
          uri = (0, util_1.toLexUri)(uri);
          return this.defs.get(uri);
        }
        getDefOrThrow(uri, types) {
          const def = this.getDef(uri);
          if (!def) {
            throw new types_1.LexiconDefNotFoundError(`Lexicon not found: ${uri}`);
          }
          if (types && !types.includes(def.type)) {
            throw new types_1.InvalidLexiconError(`Not a ${types.join(" or ")} lexicon: ${uri}`);
          }
          return def;
        }
        /**
         * Validate a record or object.
         */
        validate(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["record", "object"]);
          if (!(0, types_1.isObj)(value)) {
            throw new types_1.ValidationError(`Value must be an object`);
          }
          if (def.type === "record") {
            return ComplexValidators.object(this, "Record", def.record, value);
          } else if (def.type === "object") {
            return ComplexValidators.object(this, "Object", def, value);
          } else {
            throw new types_1.InvalidLexiconError("Definition must be a record or object");
          }
        }
        /**
         * Validate a record and throw on any error.
         */
        assertValidRecord(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["record"]);
          if (!(0, types_1.isObj)(value)) {
            throw new types_1.ValidationError(`Record must be an object`);
          }
          if (!(0, types_1.hasProp)(value, "$type") || typeof value.$type !== "string") {
            throw new types_1.ValidationError(`Record/$type must be a string`);
          }
          const $type = value.$type || "";
          if ((0, util_1.toLexUri)($type) !== lexUri) {
            throw new types_1.ValidationError(`Invalid $type: must be ${lexUri}, got ${$type}`);
          }
          return (0, validation_1.assertValidRecord)(this, def, value);
        }
        /**
         * Validate xrpc query params and throw on any error.
         */
        assertValidXrpcParams(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, [
            "query",
            "procedure",
            "subscription"
          ]);
          return (0, validation_1.assertValidXrpcParams)(this, def, value);
        }
        /**
         * Validate xrpc input body and throw on any error.
         */
        assertValidXrpcInput(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["procedure"]);
          return (0, validation_1.assertValidXrpcInput)(this, def, value);
        }
        /**
         * Validate xrpc output body and throw on any error.
         */
        assertValidXrpcOutput(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["query", "procedure"]);
          return (0, validation_1.assertValidXrpcOutput)(this, def, value);
        }
        /**
         * Validate xrpc subscription message and throw on any error.
         */
        assertValidXrpcMessage(lexUri, value) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          const def = this.getDefOrThrow(lexUri, ["subscription"]);
          return (0, validation_1.assertValidXrpcMessage)(this, def, value);
        }
        /**
         * Resolve a lex uri given a ref
         */
        resolveLexUri(lexUri, ref) {
          lexUri = (0, util_1.toLexUri)(lexUri);
          return (0, util_1.toLexUri)(ref, lexUri);
        }
      };
      exports.Lexicons = Lexicons;
      function* iterDefs(doc) {
        for (const defId in doc.defs) {
          yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];
          if (defId === "main") {
            yield [`lex:${doc.id}`, doc.defs[defId]];
          }
        }
      }
      function resolveRefUris(obj, baseUri) {
        for (const k in obj) {
          if (obj.type === "ref") {
            obj.ref = (0, util_1.toLexUri)(obj.ref, baseUri);
          } else if (obj.type === "union") {
            obj.refs = obj.refs.map((ref) => (0, util_1.toLexUri)(ref, baseUri));
          } else if (Array.isArray(obj[k])) {
            obj[k] = obj[k].map((item) => {
              if (typeof item === "string") {
                return item.startsWith("#") ? (0, util_1.toLexUri)(item, baseUri) : item;
              } else if (item && typeof item === "object") {
                return resolveRefUris(item, baseUri);
              }
              return item;
            });
          } else if (obj[k] && typeof obj[k] === "object") {
            obj[k] = resolveRefUris(obj[k], baseUri);
          }
        }
        return obj;
      }
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/serialize.js
  var require_serialize = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/serialize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.ipldToLex = exports.lexToIpld = void 0;
      var common_web_1 = require_dist2();
      var cid_1 = (init_cid3(), __toCommonJS(cid_exports2));
      var blob_refs_1 = require_blob_refs();
      var lexToIpld = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.lexToIpld)(item));
        }
        if (val && typeof val === "object") {
          if (val instanceof blob_refs_1.BlobRef) {
            return val.original;
          }
          if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
            return val;
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.lexToIpld)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.lexToIpld = lexToIpld;
      var ipldToLex = (val) => {
        if (Array.isArray(val)) {
          return val.map((item) => (0, exports.ipldToLex)(item));
        }
        if (val && typeof val === "object") {
          if ((val["$type"] === "blob" || typeof val["cid"] === "string" && typeof val["mimeType"] === "string") && common_web_1.check.is(val, blob_refs_1.jsonBlobRef)) {
            return blob_refs_1.BlobRef.fromJsonRef(val);
          }
          if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
            return val;
          }
          const toReturn = {};
          for (const key of Object.keys(val)) {
            toReturn[key] = (0, exports.ipldToLex)(val[key]);
          }
          return toReturn;
        }
        return val;
      };
      exports.ipldToLex = ipldToLex;
      var lexToJson = (val) => {
        return (0, common_web_1.ipldToJson)((0, exports.lexToIpld)(val));
      };
      exports.lexToJson = lexToJson;
      var stringifyLex = (val) => {
        return JSON.stringify((0, exports.lexToJson)(val));
      };
      exports.stringifyLex = stringifyLex;
      var jsonToLex = (val) => {
        return (0, exports.ipldToLex)((0, common_web_1.jsonToIpld)(val));
      };
      exports.jsonToLex = jsonToLex;
      var jsonStringToLex = (val) => {
        return (0, exports.jsonToLex)(JSON.parse(val));
      };
      exports.jsonStringToLex = jsonStringToLex;
    }
  });

  // coldsky/node_modules/@atproto/lexicon/dist/index.js
  var require_dist4 = __commonJS({
    "coldsky/node_modules/@atproto/lexicon/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_types3(), exports);
      __exportStar(require_lexicons(), exports);
      __exportStar(require_blob_refs(), exports);
      __exportStar(require_serialize(), exports);
    }
  });

  // coldsky/node_modules/@atproto/api/dist/types.js
  var require_types4 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // coldsky/node_modules/@atproto/api/dist/const.js
  var require_const = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BSKY_LABELER_DID = void 0;
      exports.BSKY_LABELER_DID = "did:plc:ar7c4by46qjdydhdevvrndac";
    }
  });

  // coldsky/node_modules/@atproto/api/dist/util.js
  var require_util4 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sanitizeMutedWordValue = void 0;
      function sanitizeMutedWordValue(value) {
        return value.trim().replace(/^#(?!\ufe0f)/, "").replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, "");
      }
      exports.sanitizeMutedWordValue = sanitizeMutedWordValue;
    }
  });

  // coldsky/node_modules/@atproto/xrpc/dist/types.js
  var require_types5 = __commonJS({
    "coldsky/node_modules/@atproto/xrpc/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.XRPCInvalidResponseError = exports.XRPCError = exports.XRPCResponse = exports.ResponseTypeStrings = exports.ResponseTypeNames = exports.ResponseType = exports.errorResponseBody = void 0;
      var zod_1 = require_lib();
      exports.errorResponseBody = zod_1.z.object({
        error: zod_1.z.string().optional(),
        message: zod_1.z.string().optional()
      });
      var ResponseType;
      (function(ResponseType2) {
        ResponseType2[ResponseType2["Unknown"] = 1] = "Unknown";
        ResponseType2[ResponseType2["InvalidResponse"] = 2] = "InvalidResponse";
        ResponseType2[ResponseType2["Success"] = 200] = "Success";
        ResponseType2[ResponseType2["InvalidRequest"] = 400] = "InvalidRequest";
        ResponseType2[ResponseType2["AuthRequired"] = 401] = "AuthRequired";
        ResponseType2[ResponseType2["Forbidden"] = 403] = "Forbidden";
        ResponseType2[ResponseType2["XRPCNotSupported"] = 404] = "XRPCNotSupported";
        ResponseType2[ResponseType2["PayloadTooLarge"] = 413] = "PayloadTooLarge";
        ResponseType2[ResponseType2["RateLimitExceeded"] = 429] = "RateLimitExceeded";
        ResponseType2[ResponseType2["InternalServerError"] = 500] = "InternalServerError";
        ResponseType2[ResponseType2["MethodNotImplemented"] = 501] = "MethodNotImplemented";
        ResponseType2[ResponseType2["UpstreamFailure"] = 502] = "UpstreamFailure";
        ResponseType2[ResponseType2["NotEnoughResources"] = 503] = "NotEnoughResources";
        ResponseType2[ResponseType2["UpstreamTimeout"] = 504] = "UpstreamTimeout";
      })(ResponseType || (exports.ResponseType = ResponseType = {}));
      exports.ResponseTypeNames = {
        [ResponseType.InvalidResponse]: "InvalidResponse",
        [ResponseType.Success]: "Success",
        [ResponseType.InvalidRequest]: "InvalidRequest",
        [ResponseType.AuthRequired]: "AuthenticationRequired",
        [ResponseType.Forbidden]: "Forbidden",
        [ResponseType.XRPCNotSupported]: "XRPCNotSupported",
        [ResponseType.PayloadTooLarge]: "PayloadTooLarge",
        [ResponseType.RateLimitExceeded]: "RateLimitExceeded",
        [ResponseType.InternalServerError]: "InternalServerError",
        [ResponseType.MethodNotImplemented]: "MethodNotImplemented",
        [ResponseType.UpstreamFailure]: "UpstreamFailure",
        [ResponseType.NotEnoughResources]: "NotEnoughResources",
        [ResponseType.UpstreamTimeout]: "UpstreamTimeout"
      };
      exports.ResponseTypeStrings = {
        [ResponseType.InvalidResponse]: "Invalid Response",
        [ResponseType.Success]: "Success",
        [ResponseType.InvalidRequest]: "Invalid Request",
        [ResponseType.AuthRequired]: "Authentication Required",
        [ResponseType.Forbidden]: "Forbidden",
        [ResponseType.XRPCNotSupported]: "XRPC Not Supported",
        [ResponseType.PayloadTooLarge]: "Payload Too Large",
        [ResponseType.RateLimitExceeded]: "Rate Limit Exceeded",
        [ResponseType.InternalServerError]: "Internal Server Error",
        [ResponseType.MethodNotImplemented]: "Method Not Implemented",
        [ResponseType.UpstreamFailure]: "Upstream Failure",
        [ResponseType.NotEnoughResources]: "Not Enough Resources",
        [ResponseType.UpstreamTimeout]: "Upstream Timeout"
      };
      var XRPCResponse = class {
        constructor(data, headers) {
          Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: data
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: headers
          });
          Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
          });
        }
      };
      exports.XRPCResponse = XRPCResponse;
      var XRPCError = class extends Error {
        constructor(status, error, message, headers) {
          super(message || error || exports.ResponseTypeStrings[status]);
          Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: status
          });
          Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: error
          });
          Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          if (!this.error) {
            this.error = exports.ResponseTypeNames[status];
          }
          this.headers = headers;
        }
      };
      exports.XRPCError = XRPCError;
      var XRPCInvalidResponseError = class extends XRPCError {
        constructor(lexiconNsid, validationError, responseBody) {
          super(ResponseType.InvalidResponse, exports.ResponseTypeStrings[ResponseType.InvalidResponse], `The server gave an invalid response and may be out of date.`);
          Object.defineProperty(this, "lexiconNsid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: lexiconNsid
          });
          Object.defineProperty(this, "validationError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: validationError
          });
          Object.defineProperty(this, "responseBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: responseBody
          });
        }
      };
      exports.XRPCInvalidResponseError = XRPCInvalidResponseError;
    }
  });

  // coldsky/node_modules/@atproto/xrpc/dist/util.js
  var require_util5 = __commonJS({
    "coldsky/node_modules/@atproto/xrpc/dist/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.httpResponseBodyParse = exports.httpResponseCodeToEnum = exports.encodeMethodCallBody = exports.constructMethodCallHeaders = exports.normalizeHeaders = exports.encodeQueryParam = exports.constructMethodCallUri = exports.getMethodSchemaHTTPMethod = void 0;
      var lexicon_1 = require_dist4();
      var types_1 = require_types5();
      function getMethodSchemaHTTPMethod(schema) {
        if (schema.type === "procedure") {
          return "post";
        }
        return "get";
      }
      exports.getMethodSchemaHTTPMethod = getMethodSchemaHTTPMethod;
      function constructMethodCallUri(nsid, schema, serviceUri, params) {
        var _a3, _b;
        const uri = new URL(serviceUri);
        uri.pathname = `/xrpc/${nsid}`;
        if (params) {
          for (const [key, value] of Object.entries(params)) {
            const paramSchema = (_b = (_a3 = schema.parameters) == null ? void 0 : _a3.properties) == null ? void 0 : _b[key];
            if (!paramSchema) {
              throw new Error(`Invalid query parameter: ${key}`);
            }
            if (value !== void 0) {
              if (paramSchema.type === "array") {
                const vals = [];
                vals.concat(value).forEach((val) => {
                  uri.searchParams.append(key, encodeQueryParam(paramSchema.items.type, val));
                });
              } else {
                uri.searchParams.set(key, encodeQueryParam(paramSchema.type, value));
              }
            }
          }
        }
        return uri.toString();
      }
      exports.constructMethodCallUri = constructMethodCallUri;
      function encodeQueryParam(type, value) {
        if (type === "string" || type === "unknown") {
          return String(value);
        }
        if (type === "float") {
          return String(Number(value));
        } else if (type === "integer") {
          return String(Number(value) | 0);
        } else if (type === "boolean") {
          return value ? "true" : "false";
        } else if (type === "datetime") {
          if (value instanceof Date) {
            return value.toISOString();
          }
          return String(value);
        }
        throw new Error(`Unsupported query param type: ${type}`);
      }
      exports.encodeQueryParam = encodeQueryParam;
      function normalizeHeaders(headers) {
        const normalized = {};
        for (const [header, value] of Object.entries(headers)) {
          normalized[header.toLowerCase()] = value;
        }
        return normalized;
      }
      exports.normalizeHeaders = normalizeHeaders;
      function constructMethodCallHeaders(schema, data, opts) {
        const headers = (opts == null ? void 0 : opts.headers) || {};
        if (schema.type === "procedure") {
          if (opts == null ? void 0 : opts.encoding) {
            headers["Content-Type"] = opts.encoding;
          }
          if (data && typeof data === "object") {
            if (!headers["Content-Type"]) {
              headers["Content-Type"] = "application/json";
            }
          }
        }
        return headers;
      }
      exports.constructMethodCallHeaders = constructMethodCallHeaders;
      function encodeMethodCallBody(headers, data) {
        if (!headers["content-type"] || typeof data === "undefined") {
          return void 0;
        }
        if (data instanceof ArrayBuffer) {
          return data;
        }
        if (headers["content-type"].startsWith("text/")) {
          return new TextEncoder().encode(data.toString());
        }
        if (headers["content-type"].startsWith("application/json")) {
          return new TextEncoder().encode((0, lexicon_1.stringifyLex)(data));
        }
        return data;
      }
      exports.encodeMethodCallBody = encodeMethodCallBody;
      function httpResponseCodeToEnum(status) {
        let resCode;
        if (status in types_1.ResponseType) {
          resCode = status;
        } else if (status >= 100 && status < 200) {
          resCode = types_1.ResponseType.XRPCNotSupported;
        } else if (status >= 200 && status < 300) {
          resCode = types_1.ResponseType.Success;
        } else if (status >= 300 && status < 400) {
          resCode = types_1.ResponseType.XRPCNotSupported;
        } else if (status >= 400 && status < 500) {
          resCode = types_1.ResponseType.InvalidRequest;
        } else {
          resCode = types_1.ResponseType.InternalServerError;
        }
        return resCode;
      }
      exports.httpResponseCodeToEnum = httpResponseCodeToEnum;
      function httpResponseBodyParse(mimeType, data) {
        if (mimeType) {
          if (mimeType.includes("application/json") && (data == null ? void 0 : data.byteLength)) {
            try {
              const str = new TextDecoder().decode(data);
              return (0, lexicon_1.jsonStringToLex)(str);
            } catch (e) {
              throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, `Failed to parse response body: ${String(e)}`);
            }
          }
          if (mimeType.startsWith("text/") && (data == null ? void 0 : data.byteLength)) {
            try {
              return new TextDecoder().decode(data);
            } catch (e) {
              throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, `Failed to parse response body: ${String(e)}`);
            }
          }
        }
        if (data instanceof ArrayBuffer) {
          return new Uint8Array(data);
        }
        return data;
      }
      exports.httpResponseBodyParse = httpResponseBodyParse;
    }
  });

  // coldsky/node_modules/@atproto/xrpc/dist/client.js
  var require_client2 = __commonJS({
    "coldsky/node_modules/@atproto/xrpc/dist/client.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.defaultFetchHandler = exports.ServiceClient = exports.Client = void 0;
      var lexicon_1 = require_dist4();
      var util_1 = require_util5();
      var types_1 = require_types5();
      var Client = class {
        constructor() {
          Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: defaultFetchHandler
          });
          Object.defineProperty(this, "lex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new lexicon_1.Lexicons()
          });
        }
        // method calls
        //
        call(serviceUri, methodNsid, params, data, opts) {
          return __async(this, null, function* () {
            return this.service(serviceUri).call(methodNsid, params, data, opts);
          });
        }
        service(serviceUri) {
          return new ServiceClient(this, serviceUri);
        }
        // schemas
        // =
        addLexicon(doc) {
          this.lex.add(doc);
        }
        addLexicons(docs) {
          for (const doc of docs) {
            this.addLexicon(doc);
          }
        }
        removeLexicon(uri) {
          this.lex.remove(uri);
        }
      };
      exports.Client = Client;
      var ServiceClient = class {
        constructor(baseClient, serviceUri) {
          Object.defineProperty(this, "baseClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
          });
          this.baseClient = baseClient;
          this.uri = typeof serviceUri === "string" ? new URL(serviceUri) : serviceUri;
        }
        setHeader(key, value) {
          this.headers[key] = value;
        }
        unsetHeader(key) {
          delete this.headers[key];
        }
        call(methodNsid, params, data, opts) {
          return __async(this, null, function* () {
            const def = this.baseClient.lex.getDefOrThrow(methodNsid);
            if (!def || def.type !== "query" && def.type !== "procedure") {
              throw new Error(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
            }
            const httpMethod = (0, util_1.getMethodSchemaHTTPMethod)(def);
            const httpUri = (0, util_1.constructMethodCallUri)(methodNsid, def, this.uri, params);
            const httpHeaders = (0, util_1.constructMethodCallHeaders)(def, data, {
              headers: __spreadValues(__spreadValues({}, this.headers), opts == null ? void 0 : opts.headers),
              encoding: opts == null ? void 0 : opts.encoding
            });
            const res = yield this.baseClient.fetch(httpUri, httpMethod, httpHeaders, data);
            const resCode = (0, util_1.httpResponseCodeToEnum)(res.status);
            if (resCode === types_1.ResponseType.Success) {
              try {
                this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body);
              } catch (e) {
                if (e instanceof lexicon_1.ValidationError) {
                  throw new types_1.XRPCInvalidResponseError(methodNsid, e, res.body);
                } else {
                  throw e;
                }
              }
              return new types_1.XRPCResponse(res.body, res.headers);
            } else {
              if (res.body && isErrorResponseBody(res.body)) {
                throw new types_1.XRPCError(resCode, res.body.error, res.body.message, res.headers);
              } else {
                throw new types_1.XRPCError(resCode);
              }
            }
          });
        }
      };
      exports.ServiceClient = ServiceClient;
      function defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody) {
        return __async(this, null, function* () {
          try {
            const headers = (0, util_1.normalizeHeaders)(httpHeaders);
            const reqInit = {
              method: httpMethod,
              headers,
              body: (0, util_1.encodeMethodCallBody)(headers, httpReqBody),
              duplex: "half"
            };
            const res = yield fetch(httpUri, reqInit);
            const resBody = yield res.arrayBuffer();
            return {
              status: res.status,
              headers: Object.fromEntries(res.headers.entries()),
              body: (0, util_1.httpResponseBodyParse)(res.headers.get("content-type"), resBody)
            };
          } catch (e) {
            throw new types_1.XRPCError(types_1.ResponseType.Unknown, String(e));
          }
        });
      }
      exports.defaultFetchHandler = defaultFetchHandler;
      function isErrorResponseBody(v) {
        return types_1.errorResponseBody.safeParse(v).success;
      }
    }
  });

  // coldsky/node_modules/@atproto/xrpc/dist/index.js
  var require_dist5 = __commonJS({
    "coldsky/node_modules/@atproto/xrpc/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_types5(), exports);
      __exportStar(require_client2(), exports);
      var client_1 = require_client2();
      var defaultInst = new client_1.Client();
      exports.default = defaultInst;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/lexicons.js
  var require_lexicons2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/lexicons.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ids = exports.lexicons = exports.schemas = exports.schemaDict = void 0;
      var lexicon_1 = require_dist4();
      exports.schemaDict = {
        ComAtprotoAdminDefs: {
          lexicon: 1,
          id: "com.atproto.admin.defs",
          defs: {
            statusAttr: {
              type: "object",
              required: ["applied"],
              properties: {
                applied: {
                  type: "boolean"
                },
                ref: {
                  type: "string"
                }
              }
            },
            accountView: {
              type: "object",
              required: ["did", "handle", "indexedAt"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invites: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                },
                invitesDisabled: {
                  type: "boolean"
                },
                emailConfirmedAt: {
                  type: "string",
                  format: "datetime"
                },
                inviteNote: {
                  type: "string"
                }
              }
            },
            repoRef: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            repoBlobRef: {
              type: "object",
              required: ["did", "cid"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                recordUri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        ComAtprotoAdminDeleteAccount: {
          lexicon: 1,
          id: "com.atproto.admin.deleteAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a user account as an administrator.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminDisableAccountInvites: {
          lexicon: 1,
          id: "com.atproto.admin.disableAccountInvites",
          defs: {
            main: {
              type: "procedure",
              description: "Disable an account from receiving new invite codes, but does not invalidate existing codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account"],
                  properties: {
                    account: {
                      type: "string",
                      format: "did"
                    },
                    note: {
                      type: "string",
                      description: "Optional reason for disabled invites."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminDisableInviteCodes: {
          lexicon: 1,
          id: "com.atproto.admin.disableInviteCodes",
          defs: {
            main: {
              type: "procedure",
              description: "Disable some set of codes and/or all codes associated with a set of users.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    accounts: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminEnableAccountInvites: {
          lexicon: 1,
          id: "com.atproto.admin.enableAccountInvites",
          defs: {
            main: {
              type: "procedure",
              description: "Re-enable an account's ability to receive invite codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account"],
                  properties: {
                    account: {
                      type: "string",
                      format: "did"
                    },
                    note: {
                      type: "string",
                      description: "Optional reason for enabled invites."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetAccountInfo: {
          lexicon: 1,
          id: "com.atproto.admin.getAccountInfo",
          defs: {
            main: {
              type: "query",
              description: "Get details about an account.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#accountView"
                }
              }
            }
          }
        },
        ComAtprotoAdminGetAccountInfos: {
          lexicon: 1,
          id: "com.atproto.admin.getAccountInfos",
          defs: {
            main: {
              type: "query",
              description: "Get details about some accounts.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["infos"],
                  properties: {
                    infos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.admin.defs#accountView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetInviteCodes: {
          lexicon: 1,
          id: "com.atproto.admin.getInviteCodes",
          defs: {
            main: {
              type: "query",
              description: "Get an admin view of invite codes.",
              parameters: {
                type: "params",
                properties: {
                  sort: {
                    type: "string",
                    knownValues: ["recent", "usage"],
                    default: "recent"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 500,
                    default: 100
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminGetSubjectStatus: {
          lexicon: 1,
          id: "com.atproto.admin.getSubjectStatus",
          defs: {
            main: {
              type: "query",
              description: "Get the service-specific admin status of a subject (account, record, or blob).",
              parameters: {
                type: "params",
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  blob: {
                    type: "string",
                    format: "cid"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminSendEmail: {
          lexicon: 1,
          id: "com.atproto.admin.sendEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Send email to a user's account email address.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["recipientDid", "content", "senderDid"],
                  properties: {
                    recipientDid: {
                      type: "string",
                      format: "did"
                    },
                    content: {
                      type: "string"
                    },
                    subject: {
                      type: "string"
                    },
                    senderDid: {
                      type: "string",
                      format: "did"
                    },
                    comment: {
                      type: "string",
                      description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["sent"],
                  properties: {
                    sent: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountEmail: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["account", "email"],
                  properties: {
                    account: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo."
                    },
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountHandle: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an account's handle.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "handle"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateAccountPassword: {
          lexicon: 1,
          id: "com.atproto.admin.updateAccountPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Update the password for a user account as an administrator.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "password"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoAdminUpdateSubjectStatus: {
          lexicon: 1,
          id: "com.atproto.admin.updateSubjectStatus",
          defs: {
            main: {
              type: "procedure",
              description: "Update the service-specific admin status of a subject (account, record, or blob).",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject"],
                  properties: {
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef",
                        "lex:com.atproto.admin.defs#repoBlobRef"
                      ]
                    },
                    takedown: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#statusAttr"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityGetRecommendedDidCredentials: {
          lexicon: 1,
          id: "com.atproto.identity.getRecommendedDidCredentials",
          defs: {
            main: {
              type: "query",
              description: "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    rotationKeys: {
                      description: "Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.",
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    alsoKnownAs: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    verificationMethods: {
                      type: "unknown"
                    },
                    services: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityRequestPlcOperationSignature: {
          lexicon: 1,
          id: "com.atproto.identity.requestPlcOperationSignature",
          defs: {
            main: {
              type: "procedure",
              description: "Request an email with a code to in order to request a signed PLC operation. Requires Auth."
            }
          }
        },
        ComAtprotoIdentityResolveHandle: {
          lexicon: 1,
          id: "com.atproto.identity.resolveHandle",
          defs: {
            main: {
              type: "query",
              description: "Resolves a handle (domain name) to a DID.",
              parameters: {
                type: "params",
                required: ["handle"],
                properties: {
                  handle: {
                    type: "string",
                    format: "handle",
                    description: "The handle to resolve."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentitySignPlcOperation: {
          lexicon: 1,
          id: "com.atproto.identity.signPlcOperation",
          defs: {
            main: {
              type: "procedure",
              description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    token: {
                      description: "A token received through com.atproto.identity.requestPlcOperationSignature",
                      type: "string"
                    },
                    rotationKeys: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    alsoKnownAs: {
                      type: "array",
                      items: {
                        type: "string"
                      }
                    },
                    verificationMethods: {
                      type: "unknown"
                    },
                    services: {
                      type: "unknown"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["operation"],
                  properties: {
                    operation: {
                      type: "unknown",
                      description: "A signed DID PLC operation."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentitySubmitPlcOperation: {
          lexicon: 1,
          id: "com.atproto.identity.submitPlcOperation",
          defs: {
            main: {
              type: "procedure",
              description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["operation"],
                  properties: {
                    operation: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoIdentityUpdateHandle: {
          lexicon: 1,
          id: "com.atproto.identity.updateHandle",
          defs: {
            main: {
              type: "procedure",
              description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle"],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle",
                      description: "The new handle."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoLabelDefs: {
          lexicon: 1,
          id: "com.atproto.label.defs",
          defs: {
            label: {
              type: "object",
              description: "Metadata tag on an atproto resource (eg, repo or record).",
              required: ["src", "uri", "val", "cts"],
              properties: {
                ver: {
                  type: "integer",
                  description: "The AT Protocol version of the label object."
                },
                src: {
                  type: "string",
                  format: "did",
                  description: "DID of the actor who created this label."
                },
                uri: {
                  type: "string",
                  format: "uri",
                  description: "AT URI of the record, repository (account), or other resource that this label applies to."
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
                },
                val: {
                  type: "string",
                  maxLength: 128,
                  description: "The short string name of the value or type of this label."
                },
                neg: {
                  type: "boolean",
                  description: "If true, this is a negation label, overwriting a previous label."
                },
                cts: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp when this label was created."
                },
                exp: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp at which this label expires (no longer applies)."
                },
                sig: {
                  type: "bytes",
                  description: "Signature of dag-cbor encoded label."
                }
              }
            },
            selfLabels: {
              type: "object",
              description: "Metadata tags on an atproto record, published by the author within the record.",
              required: ["values"],
              properties: {
                values: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#selfLabel"
                  },
                  maxLength: 10
                }
              }
            },
            selfLabel: {
              type: "object",
              description: "Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.",
              required: ["val"],
              properties: {
                val: {
                  type: "string",
                  maxLength: 128,
                  description: "The short string name of the value or type of this label."
                }
              }
            },
            labelValueDefinition: {
              type: "object",
              description: "Declares a label value and its expected interpertations and behaviors.",
              required: ["identifier", "severity", "blurs", "locales"],
              properties: {
                identifier: {
                  type: "string",
                  description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
                  maxLength: 100,
                  maxGraphemes: 100
                },
                severity: {
                  type: "string",
                  description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
                  knownValues: ["inform", "alert", "none"]
                },
                blurs: {
                  type: "string",
                  description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
                  knownValues: ["content", "media", "none"]
                },
                defaultSetting: {
                  type: "string",
                  description: "The default setting for this label.",
                  knownValues: ["ignore", "warn", "hide"],
                  default: "warn"
                },
                adultOnly: {
                  type: "boolean",
                  description: "Does the user need to have adult content enabled in order to configure this label?"
                },
                locales: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValueDefinitionStrings"
                  }
                }
              }
            },
            labelValueDefinitionStrings: {
              type: "object",
              description: "Strings which describe the label in the UI, localized into a specific language.",
              required: ["lang", "name", "description"],
              properties: {
                lang: {
                  type: "string",
                  description: "The code of the language these strings are written in.",
                  format: "language"
                },
                name: {
                  type: "string",
                  description: "A short human-readable name for the label.",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  description: "A longer description of what the label means and why it might be applied.",
                  maxGraphemes: 1e4,
                  maxLength: 1e5
                }
              }
            },
            labelValue: {
              type: "string",
              knownValues: [
                "!hide",
                "!no-promote",
                "!warn",
                "!no-unauthenticated",
                "dmca-violation",
                "doxxing",
                "porn",
                "sexual",
                "nudity",
                "nsfl",
                "gore"
              ]
            }
          }
        },
        ComAtprotoLabelQueryLabels: {
          lexicon: 1,
          id: "com.atproto.label.queryLabels",
          defs: {
            main: {
              type: "query",
              description: "Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.",
              parameters: {
                type: "params",
                required: ["uriPatterns"],
                properties: {
                  uriPatterns: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
                  },
                  sources: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    },
                    description: "Optional list of label sources (DIDs) to filter on."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 250,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["labels"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    labels: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.label.defs#label"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoLabelSubscribeLabels: {
          lexicon: 1,
          id: "com.atproto.label.subscribeLabels",
          defs: {
            main: {
              type: "subscription",
              description: "Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "integer",
                    description: "The last known event seq number to backfill from."
                  }
                }
              },
              message: {
                schema: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.label.subscribeLabels#labels",
                    "lex:com.atproto.label.subscribeLabels#info"
                  ]
                }
              },
              errors: [
                {
                  name: "FutureCursor"
                }
              ]
            },
            labels: {
              type: "object",
              required: ["seq", "labels"],
              properties: {
                seq: {
                  type: "integer"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            info: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  knownValues: ["OutdatedCursor"]
                },
                message: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoModerationCreateReport: {
          lexicon: 1,
          id: "com.atproto.moderation.createReport",
          defs: {
            main: {
              type: "procedure",
              description: "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["reasonType", "subject"],
                  properties: {
                    reasonType: {
                      type: "ref",
                      description: "Indicates the broad category of violation the report is for.",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                      type: "string",
                      description: "Additional context about the content and violation."
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "id",
                    "reasonType",
                    "subject",
                    "reportedBy",
                    "createdAt"
                  ],
                  properties: {
                    id: {
                      type: "integer"
                    },
                    reasonType: {
                      type: "ref",
                      ref: "lex:com.atproto.moderation.defs#reasonType"
                    },
                    reason: {
                      type: "string",
                      maxGraphemes: 2e3,
                      maxLength: 2e4
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    },
                    reportedBy: {
                      type: "string",
                      format: "did"
                    },
                    createdAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoModerationDefs: {
          lexicon: 1,
          id: "com.atproto.moderation.defs",
          defs: {
            reasonType: {
              type: "string",
              knownValues: [
                "com.atproto.moderation.defs#reasonSpam",
                "com.atproto.moderation.defs#reasonViolation",
                "com.atproto.moderation.defs#reasonMisleading",
                "com.atproto.moderation.defs#reasonSexual",
                "com.atproto.moderation.defs#reasonRude",
                "com.atproto.moderation.defs#reasonOther",
                "com.atproto.moderation.defs#reasonAppeal"
              ]
            },
            reasonSpam: {
              type: "token",
              description: "Spam: frequent unwanted promotion, replies, mentions"
            },
            reasonViolation: {
              type: "token",
              description: "Direct violation of server rules, laws, terms of service"
            },
            reasonMisleading: {
              type: "token",
              description: "Misleading identity, affiliation, or content"
            },
            reasonSexual: {
              type: "token",
              description: "Unwanted or mislabeled sexual content"
            },
            reasonRude: {
              type: "token",
              description: "Rude, harassing, explicit, or otherwise unwelcoming behavior"
            },
            reasonOther: {
              type: "token",
              description: "Other: reports not falling under another report category"
            },
            reasonAppeal: {
              type: "token",
              description: "Appeal: appeal a previously taken moderation action"
            }
          }
        },
        ComAtprotoRepoApplyWrites: {
          lexicon: 1,
          id: "com.atproto.repo.applyWrites",
          defs: {
            main: {
              type: "procedure",
              description: "Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "writes"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data, for all operations."
                    },
                    writes: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:com.atproto.repo.applyWrites#create",
                          "lex:com.atproto.repo.applyWrites#update",
                          "lex:com.atproto.repo.applyWrites#delete"
                        ],
                        closed: true
                      }
                    },
                    swapCommit: {
                      type: "string",
                      description: "If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap",
                  description: "Indicates that the 'swapCommit' parameter did not match current commit."
                }
              ]
            },
            create: {
              type: "object",
              description: "Operation which creates a new record.",
              required: ["collection", "value"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string",
                  maxLength: 15
                },
                value: {
                  type: "unknown"
                }
              }
            },
            update: {
              type: "object",
              description: "Operation which updates an existing record.",
              required: ["collection", "rkey", "value"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string"
                },
                value: {
                  type: "unknown"
                }
              }
            },
            delete: {
              type: "object",
              description: "Operation which deletes an existing record.",
              required: ["collection", "rkey"],
              properties: {
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoRepoCreateRecord: {
          lexicon: 1,
          id: "com.atproto.repo.createRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Create a single new repository record. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "record"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The Record Key.",
                      maxLength: 15
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data."
                    },
                    record: {
                      type: "unknown",
                      description: "The record itself. Must contain a $type field."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "cid"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap",
                  description: "Indicates that 'swapCommit' didn't match current repo commit."
                }
              ]
            }
          }
        },
        ComAtprotoRepoDeleteRecord: {
          lexicon: 1,
          id: "com.atproto.repo.deleteRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "rkey"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The Record Key."
                    },
                    swapRecord: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous record by CID."
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoDescribeRepo: {
          lexicon: 1,
          id: "com.atproto.repo.describeRepo",
          defs: {
            main: {
              type: "query",
              description: "Get information about an account and repository, including the list of collections. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "handle",
                    "did",
                    "didDoc",
                    "collections",
                    "handleIsCorrect"
                  ],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown",
                      description: "The complete DID document for this account."
                    },
                    collections: {
                      type: "array",
                      description: "List of all the collections (NSIDs) for which this repo contains at least one record.",
                      items: {
                        type: "string",
                        format: "nsid"
                      }
                    },
                    handleIsCorrect: {
                      type: "boolean",
                      description: "Indicates if handle is currently valid (resolves bi-directionally)"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoRepoGetRecord: {
          lexicon: 1,
          id: "com.atproto.repo.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get a single record from a repository. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo", "collection", "rkey"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record collection."
                  },
                  rkey: {
                    type: "string",
                    description: "The Record Key."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "The CID of the version of the record. If not specified, then return the most recent version."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "value"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    value: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoRepoImportRepo: {
          lexicon: 1,
          id: "com.atproto.repo.importRepo",
          defs: {
            main: {
              type: "procedure",
              description: "Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.",
              input: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoRepoListMissingBlobs: {
          lexicon: 1,
          id: "com.atproto.repo.listMissingBlobs",
          defs: {
            main: {
              type: "query",
              description: "Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blobs"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    blobs: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.listMissingBlobs#recordBlob"
                      }
                    }
                  }
                }
              }
            },
            recordBlob: {
              type: "object",
              required: ["cid", "recordUri"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                recordUri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        ComAtprotoRepoListRecords: {
          lexicon: 1,
          id: "com.atproto.repo.listRecords",
          defs: {
            main: {
              type: "query",
              description: "List a range of records in a repository, matching a specific collection. Does not require auth.",
              parameters: {
                type: "params",
                required: ["repo", "collection"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record type."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50,
                    description: "The number of records to return."
                  },
                  cursor: {
                    type: "string"
                  },
                  rkeyStart: {
                    type: "string",
                    description: "DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)"
                  },
                  rkeyEnd: {
                    type: "string",
                    description: "DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)"
                  },
                  reverse: {
                    type: "boolean",
                    description: "Flag to reverse the order of the returned records."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["records"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    records: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.repo.listRecords#record"
                      }
                    }
                  }
                }
              }
            },
            record: {
              type: "object",
              required: ["uri", "cid", "value"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                }
              }
            }
          }
        },
        ComAtprotoRepoPutRecord: {
          lexicon: 1,
          id: "com.atproto.repo.putRecord",
          defs: {
            main: {
              type: "procedure",
              description: "Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repo", "collection", "rkey", "record"],
                  nullable: ["swapRecord"],
                  properties: {
                    repo: {
                      type: "string",
                      format: "at-identifier",
                      description: "The handle or DID of the repo (aka, current account)."
                    },
                    collection: {
                      type: "string",
                      format: "nsid",
                      description: "The NSID of the record collection."
                    },
                    rkey: {
                      type: "string",
                      description: "The Record Key.",
                      maxLength: 15
                    },
                    validate: {
                      type: "boolean",
                      default: true,
                      description: "Can be set to 'false' to skip Lexicon schema validation of record data."
                    },
                    record: {
                      type: "unknown",
                      description: "The record to write."
                    },
                    swapRecord: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation"
                    },
                    swapCommit: {
                      type: "string",
                      format: "cid",
                      description: "Compare and swap with the previous commit by CID."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "cid"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidSwap"
                }
              ]
            }
          }
        },
        ComAtprotoRepoStrongRef: {
          lexicon: 1,
          id: "com.atproto.repo.strongRef",
          description: "A URI with a content-hash fingerprint.",
          defs: {
            main: {
              type: "object",
              required: ["uri", "cid"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                }
              }
            }
          }
        },
        ComAtprotoRepoUploadBlob: {
          lexicon: 1,
          id: "com.atproto.repo.uploadBlob",
          defs: {
            main: {
              type: "procedure",
              description: "Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.",
              input: {
                encoding: "*/*"
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blob"],
                  properties: {
                    blob: {
                      type: "blob"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerActivateAccount: {
          lexicon: 1,
          id: "com.atproto.server.activateAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."
            }
          }
        },
        ComAtprotoServerCheckAccountStatus: {
          lexicon: 1,
          id: "com.atproto.server.checkAccountStatus",
          defs: {
            main: {
              type: "query",
              description: "Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: [
                    "activated",
                    "validDid",
                    "repoCommit",
                    "repoRev",
                    "repoBlocks",
                    "indexedRecords",
                    "privateStateValues",
                    "expectedBlobs",
                    "importedBlobs"
                  ],
                  properties: {
                    activated: {
                      type: "boolean"
                    },
                    validDid: {
                      type: "boolean"
                    },
                    repoCommit: {
                      type: "string",
                      format: "cid"
                    },
                    repoRev: {
                      type: "string"
                    },
                    repoBlocks: {
                      type: "integer"
                    },
                    indexedRecords: {
                      type: "integer"
                    },
                    privateStateValues: {
                      type: "integer"
                    },
                    expectedBlobs: {
                      type: "integer"
                    },
                    importedBlobs: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerConfirmEmail: {
          lexicon: 1,
          id: "com.atproto.server.confirmEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Confirm an email using a token from com.atproto.server.requestEmailConfirmation.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email", "token"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    token: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountNotFound"
                },
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                },
                {
                  name: "InvalidEmail"
                }
              ]
            }
          }
        },
        ComAtprotoServerCreateAccount: {
          lexicon: 1,
          id: "com.atproto.server.createAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Create an account. Implemented by PDS.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle",
                      description: "Requested handle for the account."
                    },
                    did: {
                      type: "string",
                      format: "did",
                      description: "Pre-existing atproto DID, being imported to a new account."
                    },
                    inviteCode: {
                      type: "string"
                    },
                    verificationCode: {
                      type: "string"
                    },
                    verificationPhone: {
                      type: "string"
                    },
                    password: {
                      type: "string",
                      description: "Initial account password. May need to meet instance-specific password strength requirements."
                    },
                    recoveryKey: {
                      type: "string",
                      description: "DID PLC rotation key (aka, recovery key) to be included in PLC creation operation."
                    },
                    plcOp: {
                      type: "unknown",
                      description: "A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  description: "Account login session returned on successful account creation.",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did",
                      description: "The DID of the new account."
                    },
                    didDoc: {
                      type: "unknown",
                      description: "Complete DID document."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "InvalidHandle"
                },
                {
                  name: "InvalidPassword"
                },
                {
                  name: "InvalidInviteCode"
                },
                {
                  name: "HandleNotAvailable"
                },
                {
                  name: "UnsupportedDomain"
                },
                {
                  name: "UnresolvableDid"
                },
                {
                  name: "IncompatibleDidDoc"
                }
              ]
            }
          }
        },
        ComAtprotoServerCreateAppPassword: {
          lexicon: 1,
          id: "com.atproto.server.createAppPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Create an App Password.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string",
                      description: "A short name for the App Password, to help distinguish them."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:com.atproto.server.createAppPassword#appPassword"
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            },
            appPassword: {
              type: "object",
              required: ["name", "password", "createdAt"],
              properties: {
                name: {
                  type: "string"
                },
                password: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerCreateInviteCode: {
          lexicon: 1,
          id: "com.atproto.server.createInviteCode",
          defs: {
            main: {
              type: "procedure",
              description: "Create an invite code.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["useCount"],
                  properties: {
                    useCount: {
                      type: "integer"
                    },
                    forAccount: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["code"],
                  properties: {
                    code: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateInviteCodes: {
          lexicon: 1,
          id: "com.atproto.server.createInviteCodes",
          defs: {
            main: {
              type: "procedure",
              description: "Create invite codes.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codeCount", "useCount"],
                  properties: {
                    codeCount: {
                      type: "integer",
                      default: 1
                    },
                    useCount: {
                      type: "integer"
                    },
                    forAccounts: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "did"
                      }
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.createInviteCodes#accountCodes"
                      }
                    }
                  }
                }
              }
            },
            accountCodes: {
              type: "object",
              required: ["account", "codes"],
              properties: {
                account: {
                  type: "string"
                },
                codes: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerCreateSession: {
          lexicon: 1,
          id: "com.atproto.server.createSession",
          defs: {
            main: {
              type: "procedure",
              description: "Create an authentication session.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["identifier", "password"],
                  properties: {
                    identifier: {
                      type: "string",
                      description: "Handle or other identifier supported by the server for the authenticating user."
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown"
                    },
                    email: {
                      type: "string"
                    },
                    emailConfirmed: {
                      type: "boolean"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            }
          }
        },
        ComAtprotoServerDeactivateAccount: {
          lexicon: 1,
          id: "com.atproto.server.deactivateAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    deleteAfter: {
                      type: "string",
                      format: "datetime",
                      description: "A recommendation to server as to how long they should hold onto the deactivated account before deleting."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerDefs: {
          lexicon: 1,
          id: "com.atproto.server.defs",
          defs: {
            inviteCode: {
              type: "object",
              required: [
                "code",
                "available",
                "disabled",
                "forAccount",
                "createdBy",
                "createdAt",
                "uses"
              ],
              properties: {
                code: {
                  type: "string"
                },
                available: {
                  type: "integer"
                },
                disabled: {
                  type: "boolean"
                },
                forAccount: {
                  type: "string"
                },
                createdBy: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                uses: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCodeUse"
                  }
                }
              }
            },
            inviteCodeUse: {
              type: "object",
              required: ["usedBy", "usedAt"],
              properties: {
                usedBy: {
                  type: "string",
                  format: "did"
                },
                usedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerDeleteAccount: {
          lexicon: 1,
          id: "com.atproto.server.deleteAccount",
          defs: {
            main: {
              type: "procedure",
              description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "password", "token"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    password: {
                      type: "string"
                    },
                    token: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                }
              ]
            }
          }
        },
        ComAtprotoServerDeleteSession: {
          lexicon: 1,
          id: "com.atproto.server.deleteSession",
          defs: {
            main: {
              type: "procedure",
              description: "Delete the current session. Requires auth."
            }
          }
        },
        ComAtprotoServerDescribeServer: {
          lexicon: 1,
          id: "com.atproto.server.describeServer",
          defs: {
            main: {
              type: "query",
              description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "availableUserDomains"],
                  properties: {
                    inviteCodeRequired: {
                      type: "boolean",
                      description: "If true, an invite code must be supplied to create an account on this instance."
                    },
                    phoneVerificationRequired: {
                      type: "boolean",
                      description: "If true, a phone verification token must be supplied to create an account on this instance."
                    },
                    availableUserDomains: {
                      type: "array",
                      description: "List of domain suffixes that can be used in account handles.",
                      items: {
                        type: "string"
                      }
                    },
                    links: {
                      type: "ref",
                      description: "URLs of service policy documents.",
                      ref: "lex:com.atproto.server.describeServer#links"
                    },
                    contact: {
                      type: "ref",
                      description: "Contact information",
                      ref: "lex:com.atproto.server.describeServer#contact"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            },
            links: {
              type: "object",
              properties: {
                privacyPolicy: {
                  type: "string"
                },
                termsOfService: {
                  type: "string"
                }
              }
            },
            contact: {
              type: "object",
              properties: {
                email: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoServerGetAccountInviteCodes: {
          lexicon: 1,
          id: "com.atproto.server.getAccountInviteCodes",
          defs: {
            main: {
              type: "query",
              description: "Get all invite codes for the current account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  includeUsed: {
                    type: "boolean",
                    default: true
                  },
                  createAvailable: {
                    type: "boolean",
                    default: true,
                    description: "Controls whether any new 'earned' but not 'created' invites should be created."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["codes"],
                  properties: {
                    codes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.defs#inviteCode"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "DuplicateCreate"
                }
              ]
            }
          }
        },
        ComAtprotoServerGetServiceAuth: {
          lexicon: 1,
          id: "com.atproto.server.getServiceAuth",
          defs: {
            main: {
              type: "query",
              description: "Get a signed token on behalf of the requesting DID for the requested service.",
              parameters: {
                type: "params",
                required: ["aud"],
                properties: {
                  aud: {
                    type: "string",
                    format: "did",
                    description: "The DID of the service that the token will be used to authenticate with"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["token"],
                  properties: {
                    token: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerGetSession: {
          lexicon: 1,
          id: "com.atproto.server.getSession",
          defs: {
            main: {
              type: "query",
              description: "Get information about the current auth session. Requires auth.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["handle", "did"],
                  properties: {
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    email: {
                      type: "string"
                    },
                    emailConfirmed: {
                      type: "boolean"
                    },
                    didDoc: {
                      type: "unknown"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerListAppPasswords: {
          lexicon: 1,
          id: "com.atproto.server.listAppPasswords",
          defs: {
            main: {
              type: "query",
              description: "List all App Passwords.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["passwords"],
                  properties: {
                    passwords: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.server.listAppPasswords#appPassword"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            },
            appPassword: {
              type: "object",
              required: ["name", "createdAt"],
              properties: {
                name: {
                  type: "string"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ComAtprotoServerRefreshSession: {
          lexicon: 1,
          id: "com.atproto.server.refreshSession",
          defs: {
            main: {
              type: "procedure",
              description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["accessJwt", "refreshJwt", "handle", "did"],
                  properties: {
                    accessJwt: {
                      type: "string"
                    },
                    refreshJwt: {
                      type: "string"
                    },
                    handle: {
                      type: "string",
                      format: "handle"
                    },
                    did: {
                      type: "string",
                      format: "did"
                    },
                    didDoc: {
                      type: "unknown"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "AccountTakedown"
                }
              ]
            }
          }
        },
        ComAtprotoServerRequestAccountDelete: {
          lexicon: 1,
          id: "com.atproto.server.requestAccountDelete",
          defs: {
            main: {
              type: "procedure",
              description: "Initiate a user account deletion via email."
            }
          }
        },
        ComAtprotoServerRequestEmailConfirmation: {
          lexicon: 1,
          id: "com.atproto.server.requestEmailConfirmation",
          defs: {
            main: {
              type: "procedure",
              description: "Request an email with a code to confirm ownership of email."
            }
          }
        },
        ComAtprotoServerRequestEmailUpdate: {
          lexicon: 1,
          id: "com.atproto.server.requestEmailUpdate",
          defs: {
            main: {
              type: "procedure",
              description: "Request a token in order to update email.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["tokenRequired"],
                  properties: {
                    tokenRequired: {
                      type: "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerRequestPasswordReset: {
          lexicon: 1,
          id: "com.atproto.server.requestPasswordReset",
          defs: {
            main: {
              type: "procedure",
              description: "Initiate a user account password reset via email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email"],
                  properties: {
                    email: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerReserveSigningKey: {
          lexicon: 1,
          id: "com.atproto.server.reserveSigningKey",
          defs: {
            main: {
              type: "procedure",
              description: "Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  properties: {
                    did: {
                      type: "string",
                      format: "did",
                      description: "The DID to reserve a key for."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["signingKey"],
                  properties: {
                    signingKey: {
                      type: "string",
                      description: "The public key for the reserved signing key, in did:key serialization."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerResetPassword: {
          lexicon: 1,
          id: "com.atproto.server.resetPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Reset a user account password using a token.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["token", "password"],
                  properties: {
                    token: {
                      type: "string"
                    },
                    password: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                }
              ]
            }
          }
        },
        ComAtprotoServerRevokeAppPassword: {
          lexicon: 1,
          id: "com.atproto.server.revokeAppPassword",
          defs: {
            main: {
              type: "procedure",
              description: "Revoke an App Password by name.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["name"],
                  properties: {
                    name: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoServerUpdateEmail: {
          lexicon: 1,
          id: "com.atproto.server.updateEmail",
          defs: {
            main: {
              type: "procedure",
              description: "Update an account's email.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["email"],
                  properties: {
                    email: {
                      type: "string"
                    },
                    token: {
                      type: "string",
                      description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ExpiredToken"
                },
                {
                  name: "InvalidToken"
                },
                {
                  name: "TokenRequired"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetBlob: {
          lexicon: 1,
          id: "com.atproto.sync.getBlob",
          defs: {
            main: {
              type: "query",
              description: "Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did", "cid"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the account."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "The CID of the blob to fetch"
                  }
                }
              },
              output: {
                encoding: "*/*"
              }
            }
          }
        },
        ComAtprotoSyncGetBlocks: {
          lexicon: 1,
          id: "com.atproto.sync.getBlocks",
          defs: {
            main: {
              type: "query",
              description: "Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did", "cids"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  cids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetCheckout: {
          lexicon: 1,
          id: "com.atproto.sync.getCheckout",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED - please use com.atproto.sync.getRepo instead",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetHead: {
          lexicon: 1,
          id: "com.atproto.sync.getHead",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["root"],
                  properties: {
                    root: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "HeadNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetLatestCommit: {
          lexicon: 1,
          id: "com.atproto.sync.getLatestCommit",
          defs: {
            main: {
              type: "query",
              description: "Get the current commit CID & revision of the specified repo. Does not require auth.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["cid", "rev"],
                  properties: {
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    rev: {
                      type: "string"
                    }
                  }
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                }
              ]
            }
          }
        },
        ComAtprotoSyncGetRecord: {
          lexicon: 1,
          id: "com.atproto.sync.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.",
              parameters: {
                type: "params",
                required: ["did", "collection", "rkey"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  collection: {
                    type: "string",
                    format: "nsid"
                  },
                  rkey: {
                    type: "string",
                    description: "Record Key"
                  },
                  commit: {
                    type: "string",
                    format: "cid",
                    description: "An optional past commit CID."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncGetRepo: {
          lexicon: 1,
          id: "com.atproto.sync.getRepo",
          defs: {
            main: {
              type: "query",
              description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  since: {
                    type: "string",
                    description: "The revision ('rev') of the repo to create a diff from."
                  }
                }
              },
              output: {
                encoding: "application/vnd.ipld.car"
              }
            }
          }
        },
        ComAtprotoSyncListBlobs: {
          lexicon: 1,
          id: "com.atproto.sync.listBlobs",
          defs: {
            main: {
              type: "query",
              description: "List blob CIDso for an account, since some repo revision. Does not require auth; implemented by PDS.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the repo."
                  },
                  since: {
                    type: "string",
                    description: "Optional revision of the repo to list blobs since."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["cids"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    cids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "cid"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncListRepos: {
          lexicon: 1,
          id: "com.atproto.sync.listRepos",
          defs: {
            main: {
              type: "query",
              description: "Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 1e3,
                    default: 500
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.sync.listRepos#repo"
                      }
                    }
                  }
                }
              }
            },
            repo: {
              type: "object",
              required: ["did", "head", "rev"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                head: {
                  type: "string",
                  format: "cid",
                  description: "Current repo commit CID"
                },
                rev: {
                  type: "string"
                }
              }
            }
          }
        },
        ComAtprotoSyncNotifyOfUpdate: {
          lexicon: 1,
          id: "com.atproto.sync.notifyOfUpdate",
          defs: {
            main: {
              type: "procedure",
              description: "Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string",
                      description: "Hostname of the current service (usually a PDS) that is notifying of update."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncRequestCrawl: {
          lexicon: 1,
          id: "com.atproto.sync.requestCrawl",
          defs: {
            main: {
              type: "procedure",
              description: "Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["hostname"],
                  properties: {
                    hostname: {
                      type: "string",
                      description: "Hostname of the current service (eg, PDS) that is requesting to be crawled."
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoSyncSubscribeRepos: {
          lexicon: 1,
          id: "com.atproto.sync.subscribeRepos",
          defs: {
            main: {
              type: "subscription",
              description: "Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.",
              parameters: {
                type: "params",
                properties: {
                  cursor: {
                    type: "integer",
                    description: "The last known event seq number to backfill from."
                  }
                }
              },
              message: {
                schema: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.sync.subscribeRepos#commit",
                    "lex:com.atproto.sync.subscribeRepos#identity",
                    "lex:com.atproto.sync.subscribeRepos#handle",
                    "lex:com.atproto.sync.subscribeRepos#migrate",
                    "lex:com.atproto.sync.subscribeRepos#tombstone",
                    "lex:com.atproto.sync.subscribeRepos#info"
                  ]
                }
              },
              errors: [
                {
                  name: "FutureCursor"
                },
                {
                  name: "ConsumerTooSlow",
                  description: "If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection."
                }
              ]
            },
            commit: {
              type: "object",
              description: "Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.",
              required: [
                "seq",
                "rebase",
                "tooBig",
                "repo",
                "commit",
                "rev",
                "since",
                "blocks",
                "ops",
                "blobs",
                "time"
              ],
              nullable: ["prev", "since"],
              properties: {
                seq: {
                  type: "integer",
                  description: "The stream sequence number of this message."
                },
                rebase: {
                  type: "boolean",
                  description: "DEPRECATED -- unused"
                },
                tooBig: {
                  type: "boolean",
                  description: "Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data."
                },
                repo: {
                  type: "string",
                  format: "did",
                  description: "The repo this event comes from."
                },
                commit: {
                  type: "cid-link",
                  description: "Repo commit object CID."
                },
                prev: {
                  type: "cid-link",
                  description: "DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability."
                },
                rev: {
                  type: "string",
                  description: "The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event."
                },
                since: {
                  type: "string",
                  description: "The rev of the last emitted commit from this repo (if any)."
                },
                blocks: {
                  type: "bytes",
                  description: "CAR file containing relevant blocks, as a diff since the previous repo state.",
                  maxLength: 1e6
                },
                ops: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.sync.subscribeRepos#repoOp",
                    description: "List of repo mutation operations in this commit (eg, records created, updated, or deleted)."
                  },
                  maxLength: 200
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "cid-link",
                    description: "List of new blobs (by CID) referenced by records in this commit."
                  }
                },
                time: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp of when this message was originally broadcast."
                }
              }
            },
            identity: {
              type: "object",
              description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
              required: ["seq", "did", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            handle: {
              type: "object",
              description: "Represents an update of the account's handle, or transition to/from invalid state. NOTE: Will be deprecated in favor of #identity.",
              required: ["seq", "did", "handle", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            migrate: {
              type: "object",
              description: "Represents an account moving from one PDS instance to another. NOTE: not implemented; account migration uses #identity instead",
              required: ["seq", "did", "migrateTo", "time"],
              nullable: ["migrateTo"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                migrateTo: {
                  type: "string"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            tombstone: {
              type: "object",
              description: "Indicates that an account has been deleted. NOTE: may be deprecated in favor of #identity or a future #account event",
              required: ["seq", "did", "time"],
              properties: {
                seq: {
                  type: "integer"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                time: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            info: {
              type: "object",
              required: ["name"],
              properties: {
                name: {
                  type: "string",
                  knownValues: ["OutdatedCursor"]
                },
                message: {
                  type: "string"
                }
              }
            },
            repoOp: {
              type: "object",
              description: "A repo operation, ie a mutation of a single record.",
              required: ["action", "path", "cid"],
              nullable: ["cid"],
              properties: {
                action: {
                  type: "string",
                  knownValues: ["create", "update", "delete"]
                },
                path: {
                  type: "string"
                },
                cid: {
                  type: "cid-link",
                  description: "For creates and updates, the new record CID. For deletions, null."
                }
              }
            }
          }
        },
        ComAtprotoTempCheckSignupQueue: {
          lexicon: 1,
          id: "com.atproto.temp.checkSignupQueue",
          defs: {
            main: {
              type: "query",
              description: "Check accounts location in signup queue.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["activated"],
                  properties: {
                    activated: {
                      type: "boolean"
                    },
                    placeInQueue: {
                      type: "integer"
                    },
                    estimatedTimeMs: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoTempFetchLabels: {
          lexicon: 1,
          id: "com.atproto.temp.fetchLabels",
          defs: {
            main: {
              type: "query",
              description: "DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.",
              parameters: {
                type: "params",
                properties: {
                  since: {
                    type: "integer"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 250,
                    default: 50
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["labels"],
                  properties: {
                    labels: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:com.atproto.label.defs#label"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ComAtprotoTempRequestPhoneVerification: {
          lexicon: 1,
          id: "com.atproto.temp.requestPhoneVerification",
          defs: {
            main: {
              type: "procedure",
              description: "Request a verification code to be sent to the supplied phone number",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["phoneNumber"],
                  properties: {
                    phoneNumber: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorDefs: {
          lexicon: 1,
          id: "app.bsky.actor.defs",
          defs: {
            profileViewBasic: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                avatar: {
                  type: "string"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            profileView: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "string"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            profileViewDetailed: {
              type: "object",
              required: ["did", "handle"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "string"
                },
                banner: {
                  type: "string"
                },
                followersCount: {
                  type: "integer"
                },
                followsCount: {
                  type: "integer"
                },
                postsCount: {
                  type: "integer"
                },
                associated: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileAssociated"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            profileAssociated: {
              type: "object",
              properties: {
                lists: {
                  type: "integer"
                },
                feedgens: {
                  type: "integer"
                },
                labeler: {
                  type: "boolean"
                }
              }
            },
            viewerState: {
              type: "object",
              description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
              properties: {
                muted: {
                  type: "boolean"
                },
                mutedByList: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                },
                blockedBy: {
                  type: "boolean"
                },
                blocking: {
                  type: "string",
                  format: "at-uri"
                },
                blockingByList: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                },
                following: {
                  type: "string",
                  format: "at-uri"
                },
                followedBy: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            preferences: {
              type: "array",
              items: {
                type: "union",
                refs: [
                  "lex:app.bsky.actor.defs#adultContentPref",
                  "lex:app.bsky.actor.defs#contentLabelPref",
                  "lex:app.bsky.actor.defs#savedFeedsPref",
                  "lex:app.bsky.actor.defs#personalDetailsPref",
                  "lex:app.bsky.actor.defs#feedViewPref",
                  "lex:app.bsky.actor.defs#threadViewPref",
                  "lex:app.bsky.actor.defs#interestsPref",
                  "lex:app.bsky.actor.defs#mutedWordsPref",
                  "lex:app.bsky.actor.defs#hiddenPostsPref"
                ]
              }
            },
            adultContentPref: {
              type: "object",
              required: ["enabled"],
              properties: {
                enabled: {
                  type: "boolean",
                  default: false
                }
              }
            },
            contentLabelPref: {
              type: "object",
              required: ["label", "visibility"],
              properties: {
                labelerDid: {
                  type: "string",
                  description: "Which labeler does this preference apply to? If undefined, applies globally.",
                  format: "did"
                },
                label: {
                  type: "string"
                },
                visibility: {
                  type: "string",
                  knownValues: ["ignore", "show", "warn", "hide"]
                }
              }
            },
            savedFeedsPref: {
              type: "object",
              required: ["pinned", "saved"],
              properties: {
                pinned: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                },
                saved: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                },
                timelineIndex: {
                  type: "integer"
                }
              }
            },
            personalDetailsPref: {
              type: "object",
              properties: {
                birthDate: {
                  type: "string",
                  format: "datetime",
                  description: "The birth date of account owner."
                }
              }
            },
            feedViewPref: {
              type: "object",
              required: ["feed"],
              properties: {
                feed: {
                  type: "string",
                  description: "The URI of the feed, or an identifier which describes the feed."
                },
                hideReplies: {
                  type: "boolean",
                  description: "Hide replies in the feed."
                },
                hideRepliesByUnfollowed: {
                  type: "boolean",
                  description: "Hide replies in the feed if they are not by followed users.",
                  default: true
                },
                hideRepliesByLikeCount: {
                  type: "integer",
                  description: "Hide replies in the feed if they do not have this number of likes."
                },
                hideReposts: {
                  type: "boolean",
                  description: "Hide reposts in the feed."
                },
                hideQuotePosts: {
                  type: "boolean",
                  description: "Hide quote posts in the feed."
                }
              }
            },
            threadViewPref: {
              type: "object",
              properties: {
                sort: {
                  type: "string",
                  description: "Sorting mode for threads.",
                  knownValues: ["oldest", "newest", "most-likes", "random"]
                },
                prioritizeFollowedUsers: {
                  type: "boolean",
                  description: "Show followed users at the top of all replies."
                }
              }
            },
            interestsPref: {
              type: "object",
              required: ["tags"],
              properties: {
                tags: {
                  type: "array",
                  maxLength: 100,
                  items: {
                    type: "string",
                    maxLength: 640,
                    maxGraphemes: 64
                  },
                  description: "A list of tags which describe the account owner's interests gathered during onboarding."
                }
              }
            },
            mutedWordTarget: {
              type: "string",
              knownValues: ["content", "tag"],
              maxLength: 640,
              maxGraphemes: 64
            },
            mutedWord: {
              type: "object",
              description: "A word that the account owner has muted.",
              required: ["value", "targets"],
              properties: {
                value: {
                  type: "string",
                  description: "The muted word itself.",
                  maxLength: 1e4,
                  maxGraphemes: 1e3
                },
                targets: {
                  type: "array",
                  description: "The intended targets of the muted word.",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#mutedWordTarget"
                  }
                }
              }
            },
            mutedWordsPref: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#mutedWord"
                  },
                  description: "A list of words the account owner has muted."
                }
              }
            },
            hiddenPostsPref: {
              type: "object",
              required: ["items"],
              properties: {
                items: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  },
                  description: "A list of URIs of posts the account owner has hidden."
                }
              }
            },
            labelersPref: {
              type: "object",
              required: ["labelers"],
              properties: {
                labelers: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#labelerPrefItem"
                  }
                }
              }
            },
            labelerPrefItem: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        },
        AppBskyActorGetPreferences: {
          lexicon: 1,
          id: "app.bsky.actor.getPreferences",
          defs: {
            main: {
              type: "query",
              description: "Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.",
              parameters: {
                type: "params",
                properties: {}
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["preferences"],
                  properties: {
                    preferences: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#preferences"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorGetProfile: {
          lexicon: 1,
          id: "app.bsky.actor.getProfile",
          defs: {
            main: {
              type: "query",
              description: "Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "Handle or DID of account to fetch profile of."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                }
              }
            }
          }
        },
        AppBskyActorGetProfiles: {
          lexicon: 1,
          id: "app.bsky.actor.getProfiles",
          defs: {
            main: {
              type: "query",
              description: "Get detailed profile views of multiple actors.",
              parameters: {
                type: "params",
                required: ["actors"],
                properties: {
                  actors: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-identifier"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["profiles"],
                  properties: {
                    profiles: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorGetSuggestions: {
          lexicon: 1,
          id: "app.bsky.actor.getSuggestions",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorProfile: {
          lexicon: 1,
          id: "app.bsky.actor.profile",
          defs: {
            main: {
              type: "record",
              description: "A declaration of a Bluesky account profile.",
              key: "literal:self",
              record: {
                type: "object",
                properties: {
                  displayName: {
                    type: "string",
                    maxGraphemes: 64,
                    maxLength: 640
                  },
                  description: {
                    type: "string",
                    description: "Free-form profile description text.",
                    maxGraphemes: 256,
                    maxLength: 2560
                  },
                  avatar: {
                    type: "blob",
                    description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  banner: {
                    type: "blob",
                    description: "Larger horizontal image to display behind profile view.",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values, specific to the Bluesky application, on the overall account.",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  }
                }
              }
            }
          }
        },
        AppBskyActorPutPreferences: {
          lexicon: 1,
          id: "app.bsky.actor.putPreferences",
          defs: {
            main: {
              type: "procedure",
              description: "Set the private preferences attached to the account.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["preferences"],
                  properties: {
                    preferences: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#preferences"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorSearchActors: {
          lexicon: 1,
          id: "app.bsky.actor.searchActors",
          defs: {
            main: {
              type: "query",
              description: "Find actors (profiles) matching search criteria. Does not require auth.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead."
                  },
                  q: {
                    type: "string",
                    description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyActorSearchActorsTypeahead: {
          lexicon: 1,
          id: "app.bsky.actor.searchActorsTypeahead",
          defs: {
            main: {
              type: "query",
              description: "Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead."
                  },
                  q: {
                    type: "string",
                    description: "Search query prefix; not a full query string."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 10
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileViewBasic"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyEmbedExternal: {
          lexicon: 1,
          id: "app.bsky.embed.external",
          defs: {
            main: {
              type: "object",
              description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
              required: ["external"],
              properties: {
                external: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.external#external"
                }
              }
            },
            external: {
              type: "object",
              required: ["uri", "title", "description"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                },
                title: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                thumb: {
                  type: "blob",
                  accept: ["image/*"],
                  maxSize: 1e6
                }
              }
            },
            view: {
              type: "object",
              required: ["external"],
              properties: {
                external: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.external#viewExternal"
                }
              }
            },
            viewExternal: {
              type: "object",
              required: ["uri", "title", "description"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                },
                title: {
                  type: "string"
                },
                description: {
                  type: "string"
                },
                thumb: {
                  type: "string"
                }
              }
            }
          }
        },
        AppBskyEmbedImages: {
          lexicon: 1,
          id: "app.bsky.embed.images",
          description: "A set of images embedded in a Bluesky record (eg, a post).",
          defs: {
            main: {
              type: "object",
              required: ["images"],
              properties: {
                images: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.images#image"
                  },
                  maxLength: 4
                }
              }
            },
            image: {
              type: "object",
              required: ["image", "alt"],
              properties: {
                image: {
                  type: "blob",
                  accept: ["image/*"],
                  maxSize: 1e6
                },
                alt: {
                  type: "string",
                  description: "Alt text description of the image, for accessibility."
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.images#aspectRatio"
                }
              }
            },
            aspectRatio: {
              type: "object",
              description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.",
              required: ["width", "height"],
              properties: {
                width: {
                  type: "integer",
                  minimum: 1
                },
                height: {
                  type: "integer",
                  minimum: 1
                }
              }
            },
            view: {
              type: "object",
              required: ["images"],
              properties: {
                images: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.embed.images#viewImage"
                  },
                  maxLength: 4
                }
              }
            },
            viewImage: {
              type: "object",
              required: ["thumb", "fullsize", "alt"],
              properties: {
                thumb: {
                  type: "string",
                  description: "Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View."
                },
                fullsize: {
                  type: "string",
                  description: "Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View."
                },
                alt: {
                  type: "string",
                  description: "Alt text description of the image, for accessibility."
                },
                aspectRatio: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.images#aspectRatio"
                }
              }
            }
          }
        },
        AppBskyEmbedRecord: {
          lexicon: 1,
          id: "app.bsky.embed.record",
          description: "A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.",
          defs: {
            main: {
              type: "object",
              required: ["record"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                }
              }
            },
            view: {
              type: "object",
              required: ["record"],
              properties: {
                record: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.record#viewRecord",
                    "lex:app.bsky.embed.record#viewNotFound",
                    "lex:app.bsky.embed.record#viewBlocked",
                    "lex:app.bsky.feed.defs#generatorView",
                    "lex:app.bsky.graph.defs#listView",
                    "lex:app.bsky.labeler.defs#labelerView"
                  ]
                }
              }
            },
            viewRecord: {
              type: "object",
              required: ["uri", "cid", "author", "value", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                value: {
                  type: "unknown",
                  description: "The record data itself."
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                embeds: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.embed.images#view",
                      "lex:app.bsky.embed.external#view",
                      "lex:app.bsky.embed.record#view",
                      "lex:app.bsky.embed.recordWithMedia#view"
                    ]
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            viewNotFound: {
              type: "object",
              required: ["uri", "notFound"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            viewBlocked: {
              type: "object",
              required: ["uri", "blocked", "author"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blocked: {
                  type: "boolean",
                  const: true
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#blockedAuthor"
                }
              }
            }
          }
        },
        AppBskyEmbedRecordWithMedia: {
          lexicon: 1,
          id: "app.bsky.embed.recordWithMedia",
          description: "A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.",
          defs: {
            main: {
              type: "object",
              required: ["record", "media"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.record"
                },
                media: {
                  type: "union",
                  refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.external"]
                }
              }
            },
            view: {
              type: "object",
              required: ["record", "media"],
              properties: {
                record: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.record#view"
                },
                media: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.external#view"
                  ]
                }
              }
            }
          }
        },
        AppBskyFeedDefs: {
          lexicon: 1,
          id: "app.bsky.feed.defs",
          defs: {
            postView: {
              type: "object",
              required: ["uri", "cid", "author", "record", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                record: {
                  type: "unknown"
                },
                embed: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.external#view",
                    "lex:app.bsky.embed.record#view",
                    "lex:app.bsky.embed.recordWithMedia#view"
                  ]
                },
                replyCount: {
                  type: "integer"
                },
                repostCount: {
                  type: "integer"
                },
                likeCount: {
                  type: "integer"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#viewerState"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                threadgate: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#threadgateView"
                }
              }
            },
            viewerState: {
              type: "object",
              description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
              properties: {
                repost: {
                  type: "string",
                  format: "at-uri"
                },
                like: {
                  type: "string",
                  format: "at-uri"
                },
                replyDisabled: {
                  type: "boolean"
                }
              }
            },
            feedViewPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#postView"
                },
                reply: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#replyRef"
                },
                reason: {
                  type: "union",
                  refs: ["lex:app.bsky.feed.defs#reasonRepost"]
                }
              }
            },
            replyRef: {
              type: "object",
              required: ["root", "parent"],
              properties: {
                root: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#postView",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                parent: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#postView",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                }
              }
            },
            reasonRepost: {
              type: "object",
              required: ["by", "indexedAt"],
              properties: {
                by: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            threadViewPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#postView"
                },
                parent: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#threadViewPost",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                },
                replies: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.feed.defs#threadViewPost",
                      "lex:app.bsky.feed.defs#notFoundPost",
                      "lex:app.bsky.feed.defs#blockedPost"
                    ]
                  }
                }
              }
            },
            notFoundPost: {
              type: "object",
              required: ["uri", "notFound"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            blockedPost: {
              type: "object",
              required: ["uri", "blocked", "author"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blocked: {
                  type: "boolean",
                  const: true
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#blockedAuthor"
                }
              }
            },
            blockedAuthor: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#viewerState"
                }
              }
            },
            generatorView: {
              type: "object",
              required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                did: {
                  type: "string",
                  format: "did"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                displayName: {
                  type: "string"
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "string"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#generatorViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            generatorViewerState: {
              type: "object",
              properties: {
                like: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            skeletonFeedPost: {
              type: "object",
              required: ["post"],
              properties: {
                post: {
                  type: "string",
                  format: "at-uri"
                },
                reason: {
                  type: "union",
                  refs: ["lex:app.bsky.feed.defs#skeletonReasonRepost"]
                }
              }
            },
            skeletonReasonRepost: {
              type: "object",
              required: ["repost"],
              properties: {
                repost: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            threadgateView: {
              type: "object",
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                record: {
                  type: "unknown"
                },
                lists: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listViewBasic"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedDescribeFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.describeFeedGenerator",
          defs: {
            main: {
              type: "query",
              description: "Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["did", "feeds"],
                  properties: {
                    did: {
                      type: "string",
                      format: "did"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.describeFeedGenerator#feed"
                      }
                    },
                    links: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.describeFeedGenerator#links"
                    }
                  }
                }
              }
            },
            feed: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            links: {
              type: "object",
              properties: {
                privacyPolicy: {
                  type: "string"
                },
                termsOfService: {
                  type: "string"
                }
              }
            }
          }
        },
        AppBskyFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.generator",
          defs: {
            main: {
              type: "record",
              description: "Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.",
              key: "any",
              record: {
                type: "object",
                required: ["did", "displayName", "createdAt"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  displayName: {
                    type: "string",
                    maxGraphemes: 24,
                    maxLength: 240
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetActorFeeds: {
          lexicon: 1,
          id: "app.bsky.feed.getActorFeeds",
          defs: {
            main: {
              type: "query",
              description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetActorLikes: {
          lexicon: 1,
          id: "app.bsky.feed.getActorLikes",
          defs: {
            main: {
              type: "query",
              description: "Get a list of posts liked by an actor. Does not require auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BlockedActor"
                },
                {
                  name: "BlockedByActor"
                }
              ]
            }
          }
        },
        AppBskyFeedGetAuthorFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getAuthorFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  filter: {
                    type: "string",
                    description: "Combinations of post/repost types to include in response.",
                    knownValues: [
                      "posts_with_replies",
                      "posts_no_replies",
                      "posts_with_media",
                      "posts_and_author_threads"
                    ],
                    default: "posts_with_replies"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BlockedActor"
                },
                {
                  name: "BlockedByActor"
                }
              ]
            }
          }
        },
        AppBskyFeedGetFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        },
        AppBskyFeedGetFeedGenerator: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedGenerator",
          defs: {
            main: {
              type: "query",
              description: "Get information about a feed generator. Implemented by AppView.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri",
                    description: "AT-URI of the feed generator record."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["view", "isOnline", "isValid"],
                  properties: {
                    view: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#generatorView"
                    },
                    isOnline: {
                      type: "boolean",
                      description: "Indicates whether the feed generator service has been online recently, or else seems to be inactive."
                    },
                    isValid: {
                      type: "boolean",
                      description: "Indicates whether the feed generator service is compatible with the record declaration."
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetFeedGenerators: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedGenerators",
          defs: {
            main: {
              type: "query",
              description: "Get information about a list of feed generators.",
              parameters: {
                type: "params",
                required: ["feeds"],
                properties: {
                  feeds: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetFeedSkeleton: {
          lexicon: 1,
          id: "app.bsky.feed.getFeedSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.",
              parameters: {
                type: "params",
                required: ["feed"],
                properties: {
                  feed: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference to feed generator record describing the specific feed being requested."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownFeed"
                }
              ]
            }
          }
        },
        AppBskyFeedGetLikes: {
          lexicon: 1,
          id: "app.bsky.feed.getLikes",
          defs: {
            main: {
              type: "query",
              description: "Get like records which reference a subject (by AT-URI and CID).",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "AT-URI of the subject (eg, a post record)."
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "CID of the subject record (aka, specific version of record), to filter likes."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "likes"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    likes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.getLikes#like"
                      }
                    }
                  }
                }
              }
            },
            like: {
              type: "object",
              required: ["indexedAt", "createdAt", "actor"],
              properties: {
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                actor: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                }
              }
            }
          }
        },
        AppBskyFeedGetListFeed: {
          lexicon: 1,
          id: "app.bsky.feed.getListFeed",
          defs: {
            main: {
              type: "query",
              description: "Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.",
              parameters: {
                type: "params",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the list record."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "UnknownList"
                }
              ]
            }
          }
        },
        AppBskyFeedGetPostThread: {
          lexicon: 1,
          id: "app.bsky.feed.getPostThread",
          defs: {
            main: {
              type: "query",
              description: "Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to post record."
                  },
                  depth: {
                    type: "integer",
                    description: "How many levels of reply depth should be included in response.",
                    default: 6,
                    minimum: 0,
                    maximum: 1e3
                  },
                  parentHeight: {
                    type: "integer",
                    description: "How many levels of parent (and grandparent, etc) post to include.",
                    default: 80,
                    minimum: 0,
                    maximum: 1e3
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["thread"],
                  properties: {
                    thread: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.feed.defs#threadViewPost",
                        "lex:app.bsky.feed.defs#notFoundPost",
                        "lex:app.bsky.feed.defs#blockedPost"
                      ]
                    }
                  }
                }
              },
              errors: [
                {
                  name: "NotFound"
                }
              ]
            }
          }
        },
        AppBskyFeedGetPosts: {
          lexicon: 1,
          id: "app.bsky.feed.getPosts",
          defs: {
            main: {
              type: "query",
              description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
              parameters: {
                type: "params",
                required: ["uris"],
                properties: {
                  uris: {
                    type: "array",
                    description: "List of post AT-URIs to return hydrated views for.",
                    items: {
                      type: "string",
                      format: "at-uri"
                    },
                    maxLength: 25
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetRepostedBy: {
          lexicon: 1,
          id: "app.bsky.feed.getRepostedBy",
          defs: {
            main: {
              type: "query",
              description: "Get a list of reposts for a given post.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) of post record"
                  },
                  cid: {
                    type: "string",
                    format: "cid",
                    description: "If supplied, filters to reposts of specific version (by CID) of the post record."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["uri", "repostedBy"],
                  properties: {
                    uri: {
                      type: "string",
                      format: "at-uri"
                    },
                    cid: {
                      type: "string",
                      format: "cid"
                    },
                    cursor: {
                      type: "string"
                    },
                    repostedBy: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetSuggestedFeeds: {
          lexicon: 1,
          id: "app.bsky.feed.getSuggestedFeeds",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggested feeds (feed generators) for the requesting account.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedGetTimeline: {
          lexicon: 1,
          id: "app.bsky.feed.getTimeline",
          defs: {
            main: {
              type: "query",
              description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
              parameters: {
                type: "params",
                properties: {
                  algorithm: {
                    type: "string",
                    description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feed"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feed: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#feedViewPost"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyFeedLike: {
          lexicon: 1,
          id: "app.bsky.feed.like",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a 'like' of a piece of subject content.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedPost: {
          lexicon: 1,
          id: "app.bsky.feed.post",
          defs: {
            main: {
              type: "record",
              description: "Record containing a Bluesky post.",
              key: "tid",
              record: {
                type: "object",
                required: ["text", "createdAt"],
                properties: {
                  text: {
                    type: "string",
                    maxLength: 3e3,
                    maxGraphemes: 300,
                    description: "The primary post content. May be an empty string, if there are embeds."
                  },
                  entities: {
                    type: "array",
                    description: "DEPRECATED: replaced by app.bsky.richtext.facet.",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.post#entity"
                    }
                  },
                  facets: {
                    type: "array",
                    description: "Annotations of text (mentions, URLs, hashtags, etc)",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  reply: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.post#replyRef"
                  },
                  embed: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.embed.images",
                      "lex:app.bsky.embed.external",
                      "lex:app.bsky.embed.record",
                      "lex:app.bsky.embed.recordWithMedia"
                    ]
                  },
                  langs: {
                    type: "array",
                    description: "Indicates human language of post primary text content.",
                    maxLength: 3,
                    items: {
                      type: "string",
                      format: "language"
                    }
                  },
                  labels: {
                    type: "union",
                    description: "Self-label values for this post. Effectively content warnings.",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  tags: {
                    type: "array",
                    description: "Additional hashtags, in addition to any included in post text and facets.",
                    maxLength: 8,
                    items: {
                      type: "string",
                      maxLength: 640,
                      maxGraphemes: 64
                    }
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime",
                    description: "Client-declared timestamp when this post was originally created."
                  }
                }
              }
            },
            replyRef: {
              type: "object",
              required: ["root", "parent"],
              properties: {
                root: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                parent: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                }
              }
            },
            entity: {
              type: "object",
              description: "Deprecated: use facets instead.",
              required: ["index", "type", "value"],
              properties: {
                index: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.post#textSlice"
                },
                type: {
                  type: "string",
                  description: "Expected values are 'mention' and 'link'."
                },
                value: {
                  type: "string"
                }
              }
            },
            textSlice: {
              type: "object",
              description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.",
              required: ["start", "end"],
              properties: {
                start: {
                  type: "integer",
                  minimum: 0
                },
                end: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        },
        AppBskyFeedRepost: {
          lexicon: 1,
          id: "app.bsky.feed.repost",
          defs: {
            main: {
              description: "Record representing a 'repost' of an existing Bluesky post.",
              type: "record",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.strongRef"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyFeedSearchPosts: {
          lexicon: 1,
          id: "app.bsky.feed.searchPosts",
          defs: {
            main: {
              type: "query",
              description: "Find posts matching search criteria, returning views of those posts.",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#postView"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        AppBskyFeedThreadgate: {
          lexicon: 1,
          id: "app.bsky.feed.threadgate",
          defs: {
            main: {
              type: "record",
              key: "tid",
              description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository..",
              record: {
                type: "object",
                required: ["post", "createdAt"],
                properties: {
                  post: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the post record."
                  },
                  allow: {
                    type: "array",
                    maxLength: 5,
                    items: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.feed.threadgate#mentionRule",
                        "lex:app.bsky.feed.threadgate#followingRule",
                        "lex:app.bsky.feed.threadgate#listRule"
                      ]
                    }
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            },
            mentionRule: {
              type: "object",
              description: "Allow replies from actors mentioned in your post.",
              properties: {}
            },
            followingRule: {
              type: "object",
              description: "Allow replies from actors you follow.",
              properties: {}
            },
            listRule: {
              type: "object",
              description: "Allow replies from actors on a list.",
              required: ["list"],
              properties: {
                list: {
                  type: "string",
                  format: "at-uri"
                }
              }
            }
          }
        },
        AppBskyGraphBlock: {
          lexicon: 1,
          id: "app.bsky.graph.block",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did",
                    description: "DID of the account to be blocked."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphDefs: {
          lexicon: 1,
          id: "app.bsky.graph.defs",
          defs: {
            listViewBasic: {
              type: "object",
              required: ["uri", "cid", "name", "purpose"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1
                },
                purpose: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                avatar: {
                  type: "string"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listView: {
              type: "object",
              required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1
                },
                purpose: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "string"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            listItemView: {
              type: "object",
              required: ["uri", "subject"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                subject: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                }
              }
            },
            listPurpose: {
              type: "string",
              knownValues: [
                "app.bsky.graph.defs#modlist",
                "app.bsky.graph.defs#curatelist"
              ]
            },
            modlist: {
              type: "token",
              description: "A list of actors to apply an aggregate moderation action (mute/block) on."
            },
            curatelist: {
              type: "token",
              description: "A list of actors used for curation purposes such as list feeds or interaction gating."
            },
            listViewerState: {
              type: "object",
              properties: {
                muted: {
                  type: "boolean"
                },
                blocked: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            notFoundActor: {
              type: "object",
              description: "indicates that a handle or DID could not be resolved",
              required: ["actor", "notFound"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                notFound: {
                  type: "boolean",
                  const: true
                }
              }
            },
            relationship: {
              type: "object",
              description: "lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                following: {
                  type: "string",
                  format: "at-uri",
                  description: "if the actor follows this DID, this is the AT-URI of the follow record"
                },
                followedBy: {
                  type: "string",
                  format: "at-uri",
                  description: "if the actor is followed by this DID, contains the AT-URI of the follow record"
                }
              }
            }
          }
        },
        AppBskyGraphFollow: {
          lexicon: 1,
          id: "app.bsky.graph.follow",
          defs: {
            main: {
              type: "record",
              description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetBlocks: {
          lexicon: 1,
          id: "app.bsky.graph.getBlocks",
          defs: {
            main: {
              type: "query",
              description: "Enumerates which accounts the requesting account is currently blocking. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["blocks"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    blocks: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetFollowers: {
          lexicon: 1,
          id: "app.bsky.graph.getFollowers",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts which follow a specified account (actor).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "followers"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    followers: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetFollows: {
          lexicon: 1,
          id: "app.bsky.graph.getFollows",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts which a specified account (actor) follows.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "follows"],
                  properties: {
                    subject: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    },
                    cursor: {
                      type: "string"
                    },
                    follows: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetList: {
          lexicon: 1,
          id: "app.bsky.graph.getList",
          defs: {
            main: {
              type: "query",
              description: "Gets a 'view' (with additional context) of a specified list.",
              parameters: {
                type: "params",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) of the list record to hydrate."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list", "items"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    list: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#listView"
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listItemView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetListBlocks: {
          lexicon: 1,
          id: "app.bsky.graph.getListBlocks",
          defs: {
            main: {
              type: "query",
              description: "Get mod lists that the requesting account (actor) is blocking. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetListMutes: {
          lexicon: 1,
          id: "app.bsky.graph.getListMutes",
          defs: {
            main: {
              type: "query",
              description: "Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetLists: {
          lexicon: 1,
          id: "app.bsky.graph.getLists",
          defs: {
            main: {
              type: "query",
              description: "Enumerates the lists created by a specified account (actor).",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "The account (actor) to enumerate lists from."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["lists"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    lists: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.graph.defs#listView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetMutes: {
          lexicon: 1,
          id: "app.bsky.graph.getMutes",
          defs: {
            main: {
              type: "query",
              description: "Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["mutes"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    mutes: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphGetRelationships: {
          lexicon: 1,
          id: "app.bsky.graph.getRelationships",
          defs: {
            main: {
              type: "query",
              description: "Enumerates public relationships between one account, and a list of other accounts. Does not require auth.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier",
                    description: "Primary account requesting relationships for."
                  },
                  others: {
                    type: "array",
                    description: "List of 'other' accounts to be related back to the primary.",
                    maxLength: 30,
                    items: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["relationships"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "did"
                    },
                    relationships: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:app.bsky.graph.defs#relationship",
                          "lex:app.bsky.graph.defs#notFoundActor"
                        ]
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "ActorNotFound",
                  description: "the primary actor at-identifier could not be resolved"
                }
              ]
            }
          }
        },
        AppBskyGraphGetSuggestedFollowsByActor: {
          lexicon: 1,
          id: "app.bsky.graph.getSuggestedFollowsByActor",
          defs: {
            main: {
              type: "query",
              description: "Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.",
              parameters: {
                type: "params",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["suggestions"],
                  properties: {
                    suggestions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.actor.defs#profileView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphList: {
          lexicon: 1,
          id: "app.bsky.graph.list",
          defs: {
            main: {
              type: "record",
              description: "Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.",
              key: "tid",
              record: {
                type: "object",
                required: ["name", "purpose", "createdAt"],
                properties: {
                  purpose: {
                    type: "ref",
                    description: "Defines the purpose of the list (aka, moderation-oriented or curration-oriented)",
                    ref: "lex:app.bsky.graph.defs#listPurpose"
                  },
                  name: {
                    type: "string",
                    maxLength: 64,
                    minLength: 1,
                    description: "Display name for list; can not be empty."
                  },
                  description: {
                    type: "string",
                    maxGraphemes: 300,
                    maxLength: 3e3
                  },
                  descriptionFacets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.richtext.facet"
                    }
                  },
                  avatar: {
                    type: "blob",
                    accept: ["image/png", "image/jpeg"],
                    maxSize: 1e6
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphListblock: {
          lexicon: 1,
          id: "app.bsky.graph.listblock",
          defs: {
            main: {
              type: "record",
              description: "Record representing a block relationship against an entire an entire list of accounts (actors).",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the mod list record."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphListitem: {
          lexicon: 1,
          id: "app.bsky.graph.listitem",
          defs: {
            main: {
              type: "record",
              description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
              key: "tid",
              record: {
                type: "object",
                required: ["subject", "list", "createdAt"],
                properties: {
                  subject: {
                    type: "string",
                    format: "did",
                    description: "The account which is included on the list."
                  },
                  list: {
                    type: "string",
                    format: "at-uri",
                    description: "Reference (AT-URI) to the list record (app.bsky.graph.list)."
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteActor: {
          lexicon: 1,
          id: "app.bsky.graph.muteActor",
          defs: {
            main: {
              type: "procedure",
              description: "Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphMuteActorList: {
          lexicon: 1,
          id: "app.bsky.graph.muteActorList",
          defs: {
            main: {
              type: "procedure",
              description: "Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list"],
                  properties: {
                    list: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteActor: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteActor",
          defs: {
            main: {
              type: "procedure",
              description: "Unmutes the specified account. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actor"],
                  properties: {
                    actor: {
                      type: "string",
                      format: "at-identifier"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyGraphUnmuteActorList: {
          lexicon: 1,
          id: "app.bsky.graph.unmuteActorList",
          defs: {
            main: {
              type: "procedure",
              description: "Unmutes the specified list of accounts. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["list"],
                  properties: {
                    list: {
                      type: "string",
                      format: "at-uri"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerDefs: {
          lexicon: 1,
          id: "app.bsky.labeler.defs",
          defs: {
            labelerView: {
              type: "object",
              required: ["uri", "cid", "creator", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            labelerViewDetailed: {
              type: "object",
              required: ["uri", "cid", "creator", "policies", "indexedAt"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                creator: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                policies: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerPolicies"
                },
                likeCount: {
                  type: "integer",
                  minimum: 0
                },
                viewer: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerViewerState"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            },
            labelerViewerState: {
              type: "object",
              properties: {
                like: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            labelerPolicies: {
              type: "object",
              required: ["labelValues"],
              properties: {
                labelValues: {
                  type: "array",
                  description: "The label values which this labeler publishes. May include global or custom labels.",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValue"
                  }
                },
                labelValueDefinitions: {
                  type: "array",
                  description: "Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#labelValueDefinition"
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerGetServices: {
          lexicon: 1,
          id: "app.bsky.labeler.getServices",
          defs: {
            main: {
              type: "query",
              description: "Get information about a list of labeler services.",
              parameters: {
                type: "params",
                required: ["dids"],
                properties: {
                  dids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  },
                  detailed: {
                    type: "boolean",
                    default: false
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["views"],
                  properties: {
                    views: {
                      type: "array",
                      items: {
                        type: "union",
                        refs: [
                          "lex:app.bsky.labeler.defs#labelerView",
                          "lex:app.bsky.labeler.defs#labelerViewDetailed"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyLabelerService: {
          lexicon: 1,
          id: "app.bsky.labeler.service",
          defs: {
            main: {
              type: "record",
              description: "A declaration of the existence of labeler service.",
              key: "literal:self",
              record: {
                type: "object",
                required: ["policies", "createdAt"],
                properties: {
                  policies: {
                    type: "ref",
                    ref: "lex:app.bsky.labeler.defs#labelerPolicies"
                  },
                  labels: {
                    type: "union",
                    refs: ["lex:com.atproto.label.defs#selfLabels"]
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationGetUnreadCount: {
          lexicon: 1,
          id: "app.bsky.notification.getUnreadCount",
          defs: {
            main: {
              type: "query",
              description: "Count the number of unread notifications for the requesting account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["count"],
                  properties: {
                    count: {
                      type: "integer"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationListNotifications: {
          lexicon: 1,
          id: "app.bsky.notification.listNotifications",
          defs: {
            main: {
              type: "query",
              description: "Enumerate notifications for the requesting account. Requires auth.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["notifications"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    notifications: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.notification.listNotifications#notification"
                      }
                    },
                    seenAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            },
            notification: {
              type: "object",
              required: [
                "uri",
                "cid",
                "author",
                "reason",
                "record",
                "isRead",
                "indexedAt"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                author: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileView"
                },
                reason: {
                  type: "string",
                  description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.",
                  knownValues: [
                    "like",
                    "repost",
                    "follow",
                    "mention",
                    "reply",
                    "quote"
                  ]
                },
                reasonSubject: {
                  type: "string",
                  format: "at-uri"
                },
                record: {
                  type: "unknown"
                },
                isRead: {
                  type: "boolean"
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationRegisterPush: {
          lexicon: 1,
          id: "app.bsky.notification.registerPush",
          defs: {
            main: {
              type: "procedure",
              description: "Register to receive push notifications, via a specified service, for the requesting account. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["serviceDid", "token", "platform", "appId"],
                  properties: {
                    serviceDid: {
                      type: "string",
                      format: "did"
                    },
                    token: {
                      type: "string"
                    },
                    platform: {
                      type: "string",
                      knownValues: ["ios", "android", "web"]
                    },
                    appId: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyNotificationUpdateSeen: {
          lexicon: 1,
          id: "app.bsky.notification.updateSeen",
          defs: {
            main: {
              type: "procedure",
              description: "Notify server that the requesting account has seen notifications. Requires auth.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["seenAt"],
                  properties: {
                    seenAt: {
                      type: "string",
                      format: "datetime"
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyRichtextFacet: {
          lexicon: 1,
          id: "app.bsky.richtext.facet",
          defs: {
            main: {
              type: "object",
              description: "Annotation of a sub-string within rich text.",
              required: ["index", "features"],
              properties: {
                index: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet#byteSlice"
                },
                features: {
                  type: "array",
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.richtext.facet#mention",
                      "lex:app.bsky.richtext.facet#link",
                      "lex:app.bsky.richtext.facet#tag"
                    ]
                  }
                }
              }
            },
            mention: {
              type: "object",
              description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            link: {
              type: "object",
              description: "Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "uri"
                }
              }
            },
            tag: {
              type: "object",
              description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
              required: ["tag"],
              properties: {
                tag: {
                  type: "string",
                  maxLength: 640,
                  maxGraphemes: 64
                }
              }
            },
            byteSlice: {
              type: "object",
              description: "Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.",
              required: ["byteStart", "byteEnd"],
              properties: {
                byteStart: {
                  type: "integer",
                  minimum: 0
                },
                byteEnd: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        },
        AppBskyUnspeccedDefs: {
          lexicon: 1,
          id: "app.bsky.unspecced.defs",
          defs: {
            skeletonSearchPost: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            skeletonSearchActor: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetPopularFeedGenerators: {
          lexicon: 1,
          id: "app.bsky.unspecced.getPopularFeedGenerators",
          defs: {
            main: {
              type: "query",
              description: "An unspecced view of globally popular feed generators.",
              parameters: {
                type: "params",
                properties: {
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  },
                  query: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["feeds"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    feeds: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.feed.defs#generatorView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        AppBskyUnspeccedGetTaggedSuggestions: {
          lexicon: 1,
          id: "app.bsky.unspecced.getTaggedSuggestions",
          defs: {
            main: {
              type: "query",
              description: "Get a list of suggestions (feeds and users) tagged with categories",
              parameters: {
                type: "params",
                properties: {}
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["suggestions"],
                  properties: {
                    suggestions: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.getTaggedSuggestions#suggestion"
                      }
                    }
                  }
                }
              }
            },
            suggestion: {
              type: "object",
              required: ["tag", "subjectType", "subject"],
              properties: {
                tag: {
                  type: "string"
                },
                subjectType: {
                  type: "string",
                  knownValues: ["actor", "feed"]
                },
                subject: {
                  type: "string",
                  format: "uri"
                }
              }
            }
          }
        },
        AppBskyUnspeccedSearchActorsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.searchActorsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Backend Actors (profile) search, returns only skeleton.",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax."
                  },
                  typeahead: {
                    type: "boolean",
                    description: "If true, acts as fast/simple 'typeahead' query."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["actors"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    actors: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        AppBskyUnspeccedSearchPostsSkeleton: {
          lexicon: 1,
          id: "app.bsky.unspecced.searchPostsSkeleton",
          defs: {
            main: {
              type: "query",
              description: "Backend Posts search, returns only skeleton",
              parameters: {
                type: "params",
                required: ["q"],
                properties: {
                  q: {
                    type: "string",
                    description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 25
                  },
                  cursor: {
                    type: "string",
                    description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["posts"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    hitsTotal: {
                      type: "integer",
                      description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                    },
                    posts: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:app.bsky.unspecced.defs#skeletonSearchPost"
                      }
                    }
                  }
                }
              },
              errors: [
                {
                  name: "BadQueryString"
                }
              ]
            }
          }
        },
        ToolsOzoneCommunicationCreateTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.createTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to create a new, re-usable communication (email for now) template.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subject", "contentMarkdown", "name"],
                  properties: {
                    name: {
                      type: "string",
                      description: "Name of the template."
                    },
                    contentMarkdown: {
                      type: "string",
                      description: "Content of the template, markdown supported, can contain variable placeholders."
                    },
                    subject: {
                      type: "string",
                      description: "Subject of the message, used in emails."
                    },
                    createdBy: {
                      type: "string",
                      format: "did",
                      description: "DID of the user who is creating the template."
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.communication.defs#templateView"
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationDefs: {
          lexicon: 1,
          id: "tools.ozone.communication.defs",
          defs: {
            templateView: {
              type: "object",
              required: [
                "id",
                "name",
                "contentMarkdown",
                "disabled",
                "lastUpdatedBy",
                "createdAt",
                "updatedAt"
              ],
              properties: {
                id: {
                  type: "string"
                },
                name: {
                  type: "string",
                  description: "Name of the template."
                },
                subject: {
                  type: "string",
                  description: "Content of the template, can contain markdown and variable placeholders."
                },
                contentMarkdown: {
                  type: "string",
                  description: "Subject of the message, used in emails."
                },
                disabled: {
                  type: "boolean"
                },
                lastUpdatedBy: {
                  type: "string",
                  format: "did",
                  description: "DID of the user who last updated the template."
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationDeleteTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.deleteTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Delete a communication template.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["id"],
                  properties: {
                    id: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationListTemplates: {
          lexicon: 1,
          id: "tools.ozone.communication.listTemplates",
          defs: {
            main: {
              type: "query",
              description: "Get list of all communication templates.",
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["communicationTemplates"],
                  properties: {
                    communicationTemplates: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.communication.defs#templateView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneCommunicationUpdateTemplate: {
          lexicon: 1,
          id: "tools.ozone.communication.updateTemplate",
          defs: {
            main: {
              type: "procedure",
              description: "Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["id"],
                  properties: {
                    id: {
                      type: "string",
                      description: "ID of the template to be updated."
                    },
                    name: {
                      type: "string",
                      description: "Name of the template."
                    },
                    contentMarkdown: {
                      type: "string",
                      description: "Content of the template, markdown supported, can contain variable placeholders."
                    },
                    subject: {
                      type: "string",
                      description: "Subject of the message, used in emails."
                    },
                    updatedBy: {
                      type: "string",
                      format: "did",
                      description: "DID of the user who is updating the template."
                    },
                    disabled: {
                      type: "boolean"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.communication.defs#templateView"
                }
              }
            }
          }
        },
        ToolsOzoneModerationDefs: {
          lexicon: 1,
          id: "tools.ozone.moderation.defs",
          defs: {
            modEventView: {
              type: "object",
              required: [
                "id",
                "event",
                "subject",
                "subjectBlobCids",
                "createdBy",
                "createdAt"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                event: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#modEventTakedown",
                    "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                    "lex:tools.ozone.moderation.defs#modEventComment",
                    "lex:tools.ozone.moderation.defs#modEventReport",
                    "lex:tools.ozone.moderation.defs#modEventLabel",
                    "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                    "lex:tools.ozone.moderation.defs#modEventEscalate",
                    "lex:tools.ozone.moderation.defs#modEventMute",
                    "lex:tools.ozone.moderation.defs#modEventEmail",
                    "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                    "lex:tools.ozone.moderation.defs#modEventDivert"
                  ]
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                subjectBlobCids: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                creatorHandle: {
                  type: "string"
                },
                subjectHandle: {
                  type: "string"
                }
              }
            },
            modEventViewDetail: {
              type: "object",
              required: [
                "id",
                "event",
                "subject",
                "subjectBlobs",
                "createdBy",
                "createdAt"
              ],
              properties: {
                id: {
                  type: "integer"
                },
                event: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#modEventTakedown",
                    "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                    "lex:tools.ozone.moderation.defs#modEventComment",
                    "lex:tools.ozone.moderation.defs#modEventReport",
                    "lex:tools.ozone.moderation.defs#modEventLabel",
                    "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                    "lex:tools.ozone.moderation.defs#modEventEscalate",
                    "lex:tools.ozone.moderation.defs#modEventMute",
                    "lex:tools.ozone.moderation.defs#modEventEmail",
                    "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                    "lex:tools.ozone.moderation.defs#modEventDivert"
                  ]
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#repoView",
                    "lex:tools.ozone.moderation.defs#repoViewNotFound",
                    "lex:tools.ozone.moderation.defs#recordView",
                    "lex:tools.ozone.moderation.defs#recordViewNotFound"
                  ]
                },
                subjectBlobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#blobView"
                  }
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            subjectStatusView: {
              type: "object",
              required: ["id", "subject", "createdAt", "updatedAt", "reviewState"],
              properties: {
                id: {
                  type: "integer"
                },
                subject: {
                  type: "union",
                  refs: [
                    "lex:com.atproto.admin.defs#repoRef",
                    "lex:com.atproto.repo.strongRef"
                  ]
                },
                subjectBlobCids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                },
                subjectRepoHandle: {
                  type: "string"
                },
                updatedAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing when the last update was made to the moderation status of the subject"
                },
                createdAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing the first moderation status impacting event was emitted on the subject"
                },
                reviewState: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectReviewState"
                },
                comment: {
                  type: "string",
                  description: "Sticky comment on the subject."
                },
                muteUntil: {
                  type: "string",
                  format: "datetime"
                },
                lastReviewedBy: {
                  type: "string",
                  format: "did"
                },
                lastReviewedAt: {
                  type: "string",
                  format: "datetime"
                },
                lastReportedAt: {
                  type: "string",
                  format: "datetime"
                },
                lastAppealedAt: {
                  type: "string",
                  format: "datetime",
                  description: "Timestamp referencing when the author of the subject appealed a moderation action"
                },
                takendown: {
                  type: "boolean"
                },
                appealed: {
                  type: "boolean",
                  description: "True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators."
                },
                suspendUntil: {
                  type: "string",
                  format: "datetime"
                },
                tags: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            },
            subjectReviewState: {
              type: "string",
              knownValues: [
                "lex:tools.ozone.moderation.defs#reviewOpen",
                "lex:tools.ozone.moderation.defs#reviewEscalated",
                "lex:tools.ozone.moderation.defs#reviewClosed",
                "lex:tools.ozone.moderation.defs#reviewNone"
              ]
            },
            reviewOpen: {
              type: "token",
              description: "Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator"
            },
            reviewEscalated: {
              type: "token",
              description: "Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator"
            },
            reviewClosed: {
              type: "token",
              description: "Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator"
            },
            reviewNone: {
              type: "token",
              description: "Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it"
            },
            modEventTakedown: {
              type: "object",
              description: "Take down a subject permanently or temporarily",
              properties: {
                comment: {
                  type: "string"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long the takedown should be in effect before automatically expiring."
                }
              }
            },
            modEventReverseTakedown: {
              type: "object",
              description: "Revert take down action on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe reasoning behind the reversal."
                }
              }
            },
            modEventResolveAppeal: {
              type: "object",
              description: "Resolve appeal on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe resolution."
                }
              }
            },
            modEventComment: {
              type: "object",
              description: "Add a comment to a subject",
              required: ["comment"],
              properties: {
                comment: {
                  type: "string"
                },
                sticky: {
                  type: "boolean",
                  description: "Make the comment persistent on the subject"
                }
              }
            },
            modEventReport: {
              type: "object",
              description: "Report a subject",
              required: ["reportType"],
              properties: {
                comment: {
                  type: "string"
                },
                reportType: {
                  type: "ref",
                  ref: "lex:com.atproto.moderation.defs#reasonType"
                }
              }
            },
            modEventLabel: {
              type: "object",
              description: "Apply/Negate labels on a subject",
              required: ["createLabelVals", "negateLabelVals"],
              properties: {
                comment: {
                  type: "string"
                },
                createLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                negateLabelVals: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                }
              }
            },
            modEventAcknowledge: {
              type: "object",
              properties: {
                comment: {
                  type: "string"
                }
              }
            },
            modEventEscalate: {
              type: "object",
              properties: {
                comment: {
                  type: "string"
                }
              }
            },
            modEventMute: {
              type: "object",
              description: "Mute incoming reports on a subject",
              required: ["durationInHours"],
              properties: {
                comment: {
                  type: "string"
                },
                durationInHours: {
                  type: "integer",
                  description: "Indicates how long the subject should remain muted."
                }
              }
            },
            modEventUnmute: {
              type: "object",
              description: "Unmute action on a subject",
              properties: {
                comment: {
                  type: "string",
                  description: "Describe reasoning behind the reversal."
                }
              }
            },
            modEventEmail: {
              type: "object",
              description: "Keep a log of outgoing email to a user",
              required: ["subjectLine"],
              properties: {
                subjectLine: {
                  type: "string",
                  description: "The subject line of the email sent to the user."
                },
                content: {
                  type: "string",
                  description: "The content of the email sent to the user."
                },
                comment: {
                  type: "string",
                  description: "Additional comment about the outgoing comm."
                }
              }
            },
            modEventDivert: {
              type: "object",
              description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
              properties: {
                comment: {
                  type: "string"
                }
              }
            },
            modEventTag: {
              type: "object",
              description: "Add/Remove a tag on a subject",
              required: ["add", "remove"],
              properties: {
                add: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "Tags to be added to the subject. If already exists, won't be duplicated."
                },
                remove: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."
                },
                comment: {
                  type: "string",
                  description: "Additional comment about added/removed tags."
                }
              }
            },
            repoView: {
              type: "object",
              required: [
                "did",
                "handle",
                "relatedRecords",
                "indexedAt",
                "moderation"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invitesDisabled: {
                  type: "boolean"
                },
                inviteNote: {
                  type: "string"
                }
              }
            },
            repoViewDetail: {
              type: "object",
              required: [
                "did",
                "handle",
                "relatedRecords",
                "indexedAt",
                "moderation"
              ],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                handle: {
                  type: "string",
                  format: "handle"
                },
                email: {
                  type: "string"
                },
                relatedRecords: {
                  type: "array",
                  items: {
                    type: "unknown"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderationDetail"
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                invitedBy: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                },
                invites: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.server.defs#inviteCode"
                  }
                },
                invitesDisabled: {
                  type: "boolean"
                },
                inviteNote: {
                  type: "string"
                },
                emailConfirmedAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            repoViewNotFound: {
              type: "object",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            recordView: {
              type: "object",
              required: [
                "uri",
                "cid",
                "value",
                "blobCids",
                "indexedAt",
                "moderation",
                "repo"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                },
                blobCids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                },
                repo: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoView"
                }
              }
            },
            recordViewDetail: {
              type: "object",
              required: [
                "uri",
                "cid",
                "value",
                "blobs",
                "indexedAt",
                "moderation",
                "repo"
              ],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                },
                value: {
                  type: "unknown"
                },
                blobs: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:tools.ozone.moderation.defs#blobView"
                  }
                },
                labels: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:com.atproto.label.defs#label"
                  }
                },
                indexedAt: {
                  type: "string",
                  format: "datetime"
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderationDetail"
                },
                repo: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoView"
                }
              }
            },
            recordViewNotFound: {
              type: "object",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                }
              }
            },
            moderation: {
              type: "object",
              properties: {
                subjectStatus: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                }
              }
            },
            moderationDetail: {
              type: "object",
              properties: {
                subjectStatus: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                }
              }
            },
            blobView: {
              type: "object",
              required: ["cid", "mimeType", "size", "createdAt"],
              properties: {
                cid: {
                  type: "string",
                  format: "cid"
                },
                mimeType: {
                  type: "string"
                },
                size: {
                  type: "integer"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                details: {
                  type: "union",
                  refs: [
                    "lex:tools.ozone.moderation.defs#imageDetails",
                    "lex:tools.ozone.moderation.defs#videoDetails"
                  ]
                },
                moderation: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#moderation"
                }
              }
            },
            imageDetails: {
              type: "object",
              required: ["width", "height"],
              properties: {
                width: {
                  type: "integer"
                },
                height: {
                  type: "integer"
                }
              }
            },
            videoDetails: {
              type: "object",
              required: ["width", "height", "length"],
              properties: {
                width: {
                  type: "integer"
                },
                height: {
                  type: "integer"
                },
                length: {
                  type: "integer"
                }
              }
            }
          }
        },
        ToolsOzoneModerationEmitEvent: {
          lexicon: 1,
          id: "tools.ozone.moderation.emitEvent",
          defs: {
            main: {
              type: "procedure",
              description: "Take a moderation action on an actor.",
              input: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["event", "subject", "createdBy"],
                  properties: {
                    event: {
                      type: "union",
                      refs: [
                        "lex:tools.ozone.moderation.defs#modEventTakedown",
                        "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                        "lex:tools.ozone.moderation.defs#modEventEscalate",
                        "lex:tools.ozone.moderation.defs#modEventComment",
                        "lex:tools.ozone.moderation.defs#modEventLabel",
                        "lex:tools.ozone.moderation.defs#modEventReport",
                        "lex:tools.ozone.moderation.defs#modEventMute",
                        "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                        "lex:tools.ozone.moderation.defs#modEventUnmute",
                        "lex:tools.ozone.moderation.defs#modEventEmail",
                        "lex:tools.ozone.moderation.defs#modEventTag"
                      ]
                    },
                    subject: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.admin.defs#repoRef",
                        "lex:com.atproto.repo.strongRef"
                      ]
                    },
                    subjectBlobCids: {
                      type: "array",
                      items: {
                        type: "string",
                        format: "cid"
                      }
                    },
                    createdBy: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#modEventView"
                }
              },
              errors: [
                {
                  name: "SubjectHasAction"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationGetEvent: {
          lexicon: 1,
          id: "tools.ozone.moderation.getEvent",
          defs: {
            main: {
              type: "query",
              description: "Get details about a moderation event.",
              parameters: {
                type: "params",
                required: ["id"],
                properties: {
                  id: {
                    type: "integer"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#modEventViewDetail"
                }
              }
            }
          }
        },
        ToolsOzoneModerationGetRecord: {
          lexicon: 1,
          id: "tools.ozone.moderation.getRecord",
          defs: {
            main: {
              type: "query",
              description: "Get details about a record.",
              parameters: {
                type: "params",
                required: ["uri"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#recordViewDetail"
                }
              },
              errors: [
                {
                  name: "RecordNotFound"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationGetRepo: {
          lexicon: 1,
          id: "tools.ozone.moderation.getRepo",
          defs: {
            main: {
              type: "query",
              description: "Get details about a repository.",
              parameters: {
                type: "params",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#repoViewDetail"
                }
              },
              errors: [
                {
                  name: "RepoNotFound"
                }
              ]
            }
          }
        },
        ToolsOzoneModerationQueryEvents: {
          lexicon: 1,
          id: "tools.ozone.moderation.queryEvents",
          defs: {
            main: {
              type: "query",
              description: "List moderation events related to a subject.",
              parameters: {
                type: "params",
                properties: {
                  types: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned."
                  },
                  createdBy: {
                    type: "string",
                    format: "did"
                  },
                  sortDirection: {
                    type: "string",
                    default: "desc",
                    enum: ["asc", "desc"],
                    description: "Sort direction for the events. Defaults to descending order of created at timestamp."
                  },
                  createdAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Retrieve events created after a given timestamp"
                  },
                  createdBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Retrieve events created before a given timestamp"
                  },
                  subject: {
                    type: "string",
                    format: "uri"
                  },
                  includeAllUserRecords: {
                    type: "boolean",
                    default: false,
                    description: "If true, events on all record types (posts, lists, profile etc.) owned by the did are returned"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  hasComment: {
                    type: "boolean",
                    description: "If true, only events with comments are returned"
                  },
                  comment: {
                    type: "string",
                    description: "If specified, only events with comments containing the keyword are returned"
                  },
                  addedLabels: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these labels were added are returned"
                  },
                  removedLabels: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these labels were removed are returned"
                  },
                  addedTags: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these tags were added are returned"
                  },
                  removedTags: {
                    type: "array",
                    items: {
                      type: "string"
                    },
                    description: "If specified, only events where all of these tags were removed are returned"
                  },
                  reportTypes: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["events"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    events: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#modEventView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationQueryStatuses: {
          lexicon: 1,
          id: "tools.ozone.moderation.queryStatuses",
          defs: {
            main: {
              type: "query",
              description: "View moderation statuses of subjects (record or repo).",
              parameters: {
                type: "params",
                properties: {
                  subject: {
                    type: "string",
                    format: "uri"
                  },
                  comment: {
                    type: "string",
                    description: "Search subjects by keyword from comments"
                  },
                  reportedAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reported after a given timestamp"
                  },
                  reportedBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reported before a given timestamp"
                  },
                  reviewedAfter: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reviewed after a given timestamp"
                  },
                  reviewedBefore: {
                    type: "string",
                    format: "datetime",
                    description: "Search subjects reviewed before a given timestamp"
                  },
                  includeMuted: {
                    type: "boolean",
                    description: "By default, we don't include muted subjects in the results. Set this to true to include them."
                  },
                  reviewState: {
                    type: "string",
                    description: "Specify when fetching subjects in a certain state"
                  },
                  ignoreSubjects: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "uri"
                    }
                  },
                  lastReviewedBy: {
                    type: "string",
                    format: "did",
                    description: "Get all subject statuses that were reviewed by a specific moderator"
                  },
                  sortField: {
                    type: "string",
                    default: "lastReportedAt",
                    enum: ["lastReviewedAt", "lastReportedAt"]
                  },
                  sortDirection: {
                    type: "string",
                    default: "desc",
                    enum: ["asc", "desc"]
                  },
                  takendown: {
                    type: "boolean",
                    description: "Get subjects that were taken down"
                  },
                  appealed: {
                    type: "boolean",
                    description: "Get subjects in unresolved appealed status"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  tags: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  excludeTags: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["subjectStatuses"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    subjectStatuses: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ToolsOzoneModerationSearchRepos: {
          lexicon: 1,
          id: "tools.ozone.moderation.searchRepos",
          defs: {
            main: {
              type: "query",
              description: "Find repositories based on a search term.",
              parameters: {
                type: "params",
                properties: {
                  term: {
                    type: "string",
                    description: "DEPRECATED: use 'q' instead"
                  },
                  q: {
                    type: "string"
                  },
                  limit: {
                    type: "integer",
                    minimum: 1,
                    maximum: 100,
                    default: 50
                  },
                  cursor: {
                    type: "string"
                  }
                }
              },
              output: {
                encoding: "application/json",
                schema: {
                  type: "object",
                  required: ["repos"],
                  properties: {
                    cursor: {
                      type: "string"
                    },
                    repos: {
                      type: "array",
                      items: {
                        type: "ref",
                        ref: "lex:tools.ozone.moderation.defs#repoView"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      exports.schemas = Object.values(exports.schemaDict);
      exports.lexicons = new lexicon_1.Lexicons(exports.schemas);
      exports.ids = {
        ComAtprotoAdminDefs: "com.atproto.admin.defs",
        ComAtprotoAdminDeleteAccount: "com.atproto.admin.deleteAccount",
        ComAtprotoAdminDisableAccountInvites: "com.atproto.admin.disableAccountInvites",
        ComAtprotoAdminDisableInviteCodes: "com.atproto.admin.disableInviteCodes",
        ComAtprotoAdminEnableAccountInvites: "com.atproto.admin.enableAccountInvites",
        ComAtprotoAdminGetAccountInfo: "com.atproto.admin.getAccountInfo",
        ComAtprotoAdminGetAccountInfos: "com.atproto.admin.getAccountInfos",
        ComAtprotoAdminGetInviteCodes: "com.atproto.admin.getInviteCodes",
        ComAtprotoAdminGetSubjectStatus: "com.atproto.admin.getSubjectStatus",
        ComAtprotoAdminSendEmail: "com.atproto.admin.sendEmail",
        ComAtprotoAdminUpdateAccountEmail: "com.atproto.admin.updateAccountEmail",
        ComAtprotoAdminUpdateAccountHandle: "com.atproto.admin.updateAccountHandle",
        ComAtprotoAdminUpdateAccountPassword: "com.atproto.admin.updateAccountPassword",
        ComAtprotoAdminUpdateSubjectStatus: "com.atproto.admin.updateSubjectStatus",
        ComAtprotoIdentityGetRecommendedDidCredentials: "com.atproto.identity.getRecommendedDidCredentials",
        ComAtprotoIdentityRequestPlcOperationSignature: "com.atproto.identity.requestPlcOperationSignature",
        ComAtprotoIdentityResolveHandle: "com.atproto.identity.resolveHandle",
        ComAtprotoIdentitySignPlcOperation: "com.atproto.identity.signPlcOperation",
        ComAtprotoIdentitySubmitPlcOperation: "com.atproto.identity.submitPlcOperation",
        ComAtprotoIdentityUpdateHandle: "com.atproto.identity.updateHandle",
        ComAtprotoLabelDefs: "com.atproto.label.defs",
        ComAtprotoLabelQueryLabels: "com.atproto.label.queryLabels",
        ComAtprotoLabelSubscribeLabels: "com.atproto.label.subscribeLabels",
        ComAtprotoModerationCreateReport: "com.atproto.moderation.createReport",
        ComAtprotoModerationDefs: "com.atproto.moderation.defs",
        ComAtprotoRepoApplyWrites: "com.atproto.repo.applyWrites",
        ComAtprotoRepoCreateRecord: "com.atproto.repo.createRecord",
        ComAtprotoRepoDeleteRecord: "com.atproto.repo.deleteRecord",
        ComAtprotoRepoDescribeRepo: "com.atproto.repo.describeRepo",
        ComAtprotoRepoGetRecord: "com.atproto.repo.getRecord",
        ComAtprotoRepoImportRepo: "com.atproto.repo.importRepo",
        ComAtprotoRepoListMissingBlobs: "com.atproto.repo.listMissingBlobs",
        ComAtprotoRepoListRecords: "com.atproto.repo.listRecords",
        ComAtprotoRepoPutRecord: "com.atproto.repo.putRecord",
        ComAtprotoRepoStrongRef: "com.atproto.repo.strongRef",
        ComAtprotoRepoUploadBlob: "com.atproto.repo.uploadBlob",
        ComAtprotoServerActivateAccount: "com.atproto.server.activateAccount",
        ComAtprotoServerCheckAccountStatus: "com.atproto.server.checkAccountStatus",
        ComAtprotoServerConfirmEmail: "com.atproto.server.confirmEmail",
        ComAtprotoServerCreateAccount: "com.atproto.server.createAccount",
        ComAtprotoServerCreateAppPassword: "com.atproto.server.createAppPassword",
        ComAtprotoServerCreateInviteCode: "com.atproto.server.createInviteCode",
        ComAtprotoServerCreateInviteCodes: "com.atproto.server.createInviteCodes",
        ComAtprotoServerCreateSession: "com.atproto.server.createSession",
        ComAtprotoServerDeactivateAccount: "com.atproto.server.deactivateAccount",
        ComAtprotoServerDefs: "com.atproto.server.defs",
        ComAtprotoServerDeleteAccount: "com.atproto.server.deleteAccount",
        ComAtprotoServerDeleteSession: "com.atproto.server.deleteSession",
        ComAtprotoServerDescribeServer: "com.atproto.server.describeServer",
        ComAtprotoServerGetAccountInviteCodes: "com.atproto.server.getAccountInviteCodes",
        ComAtprotoServerGetServiceAuth: "com.atproto.server.getServiceAuth",
        ComAtprotoServerGetSession: "com.atproto.server.getSession",
        ComAtprotoServerListAppPasswords: "com.atproto.server.listAppPasswords",
        ComAtprotoServerRefreshSession: "com.atproto.server.refreshSession",
        ComAtprotoServerRequestAccountDelete: "com.atproto.server.requestAccountDelete",
        ComAtprotoServerRequestEmailConfirmation: "com.atproto.server.requestEmailConfirmation",
        ComAtprotoServerRequestEmailUpdate: "com.atproto.server.requestEmailUpdate",
        ComAtprotoServerRequestPasswordReset: "com.atproto.server.requestPasswordReset",
        ComAtprotoServerReserveSigningKey: "com.atproto.server.reserveSigningKey",
        ComAtprotoServerResetPassword: "com.atproto.server.resetPassword",
        ComAtprotoServerRevokeAppPassword: "com.atproto.server.revokeAppPassword",
        ComAtprotoServerUpdateEmail: "com.atproto.server.updateEmail",
        ComAtprotoSyncGetBlob: "com.atproto.sync.getBlob",
        ComAtprotoSyncGetBlocks: "com.atproto.sync.getBlocks",
        ComAtprotoSyncGetCheckout: "com.atproto.sync.getCheckout",
        ComAtprotoSyncGetHead: "com.atproto.sync.getHead",
        ComAtprotoSyncGetLatestCommit: "com.atproto.sync.getLatestCommit",
        ComAtprotoSyncGetRecord: "com.atproto.sync.getRecord",
        ComAtprotoSyncGetRepo: "com.atproto.sync.getRepo",
        ComAtprotoSyncListBlobs: "com.atproto.sync.listBlobs",
        ComAtprotoSyncListRepos: "com.atproto.sync.listRepos",
        ComAtprotoSyncNotifyOfUpdate: "com.atproto.sync.notifyOfUpdate",
        ComAtprotoSyncRequestCrawl: "com.atproto.sync.requestCrawl",
        ComAtprotoSyncSubscribeRepos: "com.atproto.sync.subscribeRepos",
        ComAtprotoTempCheckSignupQueue: "com.atproto.temp.checkSignupQueue",
        ComAtprotoTempFetchLabels: "com.atproto.temp.fetchLabels",
        ComAtprotoTempRequestPhoneVerification: "com.atproto.temp.requestPhoneVerification",
        AppBskyActorDefs: "app.bsky.actor.defs",
        AppBskyActorGetPreferences: "app.bsky.actor.getPreferences",
        AppBskyActorGetProfile: "app.bsky.actor.getProfile",
        AppBskyActorGetProfiles: "app.bsky.actor.getProfiles",
        AppBskyActorGetSuggestions: "app.bsky.actor.getSuggestions",
        AppBskyActorProfile: "app.bsky.actor.profile",
        AppBskyActorPutPreferences: "app.bsky.actor.putPreferences",
        AppBskyActorSearchActors: "app.bsky.actor.searchActors",
        AppBskyActorSearchActorsTypeahead: "app.bsky.actor.searchActorsTypeahead",
        AppBskyEmbedExternal: "app.bsky.embed.external",
        AppBskyEmbedImages: "app.bsky.embed.images",
        AppBskyEmbedRecord: "app.bsky.embed.record",
        AppBskyEmbedRecordWithMedia: "app.bsky.embed.recordWithMedia",
        AppBskyFeedDefs: "app.bsky.feed.defs",
        AppBskyFeedDescribeFeedGenerator: "app.bsky.feed.describeFeedGenerator",
        AppBskyFeedGenerator: "app.bsky.feed.generator",
        AppBskyFeedGetActorFeeds: "app.bsky.feed.getActorFeeds",
        AppBskyFeedGetActorLikes: "app.bsky.feed.getActorLikes",
        AppBskyFeedGetAuthorFeed: "app.bsky.feed.getAuthorFeed",
        AppBskyFeedGetFeed: "app.bsky.feed.getFeed",
        AppBskyFeedGetFeedGenerator: "app.bsky.feed.getFeedGenerator",
        AppBskyFeedGetFeedGenerators: "app.bsky.feed.getFeedGenerators",
        AppBskyFeedGetFeedSkeleton: "app.bsky.feed.getFeedSkeleton",
        AppBskyFeedGetLikes: "app.bsky.feed.getLikes",
        AppBskyFeedGetListFeed: "app.bsky.feed.getListFeed",
        AppBskyFeedGetPostThread: "app.bsky.feed.getPostThread",
        AppBskyFeedGetPosts: "app.bsky.feed.getPosts",
        AppBskyFeedGetRepostedBy: "app.bsky.feed.getRepostedBy",
        AppBskyFeedGetSuggestedFeeds: "app.bsky.feed.getSuggestedFeeds",
        AppBskyFeedGetTimeline: "app.bsky.feed.getTimeline",
        AppBskyFeedLike: "app.bsky.feed.like",
        AppBskyFeedPost: "app.bsky.feed.post",
        AppBskyFeedRepost: "app.bsky.feed.repost",
        AppBskyFeedSearchPosts: "app.bsky.feed.searchPosts",
        AppBskyFeedThreadgate: "app.bsky.feed.threadgate",
        AppBskyGraphBlock: "app.bsky.graph.block",
        AppBskyGraphDefs: "app.bsky.graph.defs",
        AppBskyGraphFollow: "app.bsky.graph.follow",
        AppBskyGraphGetBlocks: "app.bsky.graph.getBlocks",
        AppBskyGraphGetFollowers: "app.bsky.graph.getFollowers",
        AppBskyGraphGetFollows: "app.bsky.graph.getFollows",
        AppBskyGraphGetList: "app.bsky.graph.getList",
        AppBskyGraphGetListBlocks: "app.bsky.graph.getListBlocks",
        AppBskyGraphGetListMutes: "app.bsky.graph.getListMutes",
        AppBskyGraphGetLists: "app.bsky.graph.getLists",
        AppBskyGraphGetMutes: "app.bsky.graph.getMutes",
        AppBskyGraphGetRelationships: "app.bsky.graph.getRelationships",
        AppBskyGraphGetSuggestedFollowsByActor: "app.bsky.graph.getSuggestedFollowsByActor",
        AppBskyGraphList: "app.bsky.graph.list",
        AppBskyGraphListblock: "app.bsky.graph.listblock",
        AppBskyGraphListitem: "app.bsky.graph.listitem",
        AppBskyGraphMuteActor: "app.bsky.graph.muteActor",
        AppBskyGraphMuteActorList: "app.bsky.graph.muteActorList",
        AppBskyGraphUnmuteActor: "app.bsky.graph.unmuteActor",
        AppBskyGraphUnmuteActorList: "app.bsky.graph.unmuteActorList",
        AppBskyLabelerDefs: "app.bsky.labeler.defs",
        AppBskyLabelerGetServices: "app.bsky.labeler.getServices",
        AppBskyLabelerService: "app.bsky.labeler.service",
        AppBskyNotificationGetUnreadCount: "app.bsky.notification.getUnreadCount",
        AppBskyNotificationListNotifications: "app.bsky.notification.listNotifications",
        AppBskyNotificationRegisterPush: "app.bsky.notification.registerPush",
        AppBskyNotificationUpdateSeen: "app.bsky.notification.updateSeen",
        AppBskyRichtextFacet: "app.bsky.richtext.facet",
        AppBskyUnspeccedDefs: "app.bsky.unspecced.defs",
        AppBskyUnspeccedGetPopularFeedGenerators: "app.bsky.unspecced.getPopularFeedGenerators",
        AppBskyUnspeccedGetTaggedSuggestions: "app.bsky.unspecced.getTaggedSuggestions",
        AppBskyUnspeccedSearchActorsSkeleton: "app.bsky.unspecced.searchActorsSkeleton",
        AppBskyUnspeccedSearchPostsSkeleton: "app.bsky.unspecced.searchPostsSkeleton",
        ToolsOzoneCommunicationCreateTemplate: "tools.ozone.communication.createTemplate",
        ToolsOzoneCommunicationDefs: "tools.ozone.communication.defs",
        ToolsOzoneCommunicationDeleteTemplate: "tools.ozone.communication.deleteTemplate",
        ToolsOzoneCommunicationListTemplates: "tools.ozone.communication.listTemplates",
        ToolsOzoneCommunicationUpdateTemplate: "tools.ozone.communication.updateTemplate",
        ToolsOzoneModerationDefs: "tools.ozone.moderation.defs",
        ToolsOzoneModerationEmitEvent: "tools.ozone.moderation.emitEvent",
        ToolsOzoneModerationGetEvent: "tools.ozone.moderation.getEvent",
        ToolsOzoneModerationGetRecord: "tools.ozone.moderation.getRecord",
        ToolsOzoneModerationGetRepo: "tools.ozone.moderation.getRepo",
        ToolsOzoneModerationQueryEvents: "tools.ozone.moderation.queryEvents",
        ToolsOzoneModerationQueryStatuses: "tools.ozone.moderation.queryStatuses",
        ToolsOzoneModerationSearchRepos: "tools.ozone.moderation.searchRepos"
      };
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js
  var require_deleteAccount = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js
  var require_disableAccountInvites = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js
  var require_disableInviteCodes = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js
  var require_enableAccountInvites = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js
  var require_getAccountInfo = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js
  var require_getAccountInfos = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js
  var require_getInviteCodes = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js
  var require_getSubjectStatus = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js
  var require_sendEmail = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js
  var require_updateAccountEmail = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js
  var require_updateAccountHandle = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js
  var require_updateAccountPassword = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js
  var require_updateSubjectStatus = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js
  var require_getRecommendedDidCredentials = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js
  var require_requestPlcOperationSignature = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js
  var require_resolveHandle = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js
  var require_signPlcOperation = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js
  var require_submitPlcOperation = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js
  var require_updateHandle = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js
  var require_queryLabels = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js
  var require_createReport = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/util.js
  var require_util6 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasProp = exports.isObj = void 0;
      function isObj(v) {
        return typeof v === "object" && v !== null;
      }
      exports.isObj = isObj;
      function hasProp(data, prop) {
        return prop in data;
      }
      exports.hasProp = hasProp;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js
  var require_applyWrites = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateDelete = exports.isDelete = exports.validateUpdate = exports.isUpdate = exports.validateCreate = exports.isCreate = exports.toKnownErr = exports.InvalidSwapError = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isCreate(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.applyWrites#create";
      }
      exports.isCreate = isCreate;
      function validateCreate(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#create", v);
      }
      exports.validateCreate = validateCreate;
      function isUpdate(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.applyWrites#update";
      }
      exports.isUpdate = isUpdate;
      function validateUpdate(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#update", v);
      }
      exports.validateUpdate = validateUpdate;
      function isDelete(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.applyWrites#delete";
      }
      exports.isDelete = isDelete;
      function validateDelete(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#delete", v);
      }
      exports.validateDelete = validateDelete;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js
  var require_createRecord = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidSwapError = void 0;
      var xrpc_1 = require_dist5();
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js
  var require_deleteRecord = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidSwapError = void 0;
      var xrpc_1 = require_dist5();
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js
  var require_describeRepo = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js
  var require_getRecord = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js
  var require_importRepo = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js
  var require_listMissingBlobs = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecordBlob = exports.isRecordBlob = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isRecordBlob(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.listMissingBlobs#recordBlob";
      }
      exports.isRecordBlob = isRecordBlob;
      function validateRecordBlob(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.listMissingBlobs#recordBlob", v);
      }
      exports.validateRecordBlob = validateRecordBlob;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js
  var require_listRecords = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.repo.listRecords#record";
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.listRecords#record", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js
  var require_putRecord = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidSwapError = void 0;
      var xrpc_1 = require_dist5();
      var InvalidSwapError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidSwapError = InvalidSwapError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidSwap")
            return new InvalidSwapError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js
  var require_uploadBlob = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js
  var require_activateAccount = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js
  var require_checkAccountStatus = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js
  var require_confirmEmail = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidEmailError = exports.InvalidTokenError = exports.ExpiredTokenError = exports.AccountNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var AccountNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountNotFoundError = AccountNotFoundError;
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      var InvalidEmailError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidEmailError = InvalidEmailError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountNotFound")
            return new AccountNotFoundError(e);
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
          if (e.error === "InvalidEmail")
            return new InvalidEmailError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js
  var require_createAccount = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.IncompatibleDidDocError = exports.UnresolvableDidError = exports.UnsupportedDomainError = exports.HandleNotAvailableError = exports.InvalidInviteCodeError = exports.InvalidPasswordError = exports.InvalidHandleError = void 0;
      var xrpc_1 = require_dist5();
      var InvalidHandleError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidHandleError = InvalidHandleError;
      var InvalidPasswordError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidPasswordError = InvalidPasswordError;
      var InvalidInviteCodeError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidInviteCodeError = InvalidInviteCodeError;
      var HandleNotAvailableError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.HandleNotAvailableError = HandleNotAvailableError;
      var UnsupportedDomainError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnsupportedDomainError = UnsupportedDomainError;
      var UnresolvableDidError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnresolvableDidError = UnresolvableDidError;
      var IncompatibleDidDocError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.IncompatibleDidDocError = IncompatibleDidDocError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "InvalidHandle")
            return new InvalidHandleError(e);
          if (e.error === "InvalidPassword")
            return new InvalidPasswordError(e);
          if (e.error === "InvalidInviteCode")
            return new InvalidInviteCodeError(e);
          if (e.error === "HandleNotAvailable")
            return new HandleNotAvailableError(e);
          if (e.error === "UnsupportedDomain")
            return new UnsupportedDomainError(e);
          if (e.error === "UnresolvableDid")
            return new UnresolvableDidError(e);
          if (e.error === "IncompatibleDidDoc")
            return new IncompatibleDidDocError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js
  var require_createAppPassword = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAppPassword = exports.isAppPassword = exports.toKnownErr = exports.AccountTakedownError = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isAppPassword(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.createAppPassword#appPassword";
      }
      exports.isAppPassword = isAppPassword;
      function validateAppPassword(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.createAppPassword#appPassword", v);
      }
      exports.validateAppPassword = validateAppPassword;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js
  var require_createInviteCode = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js
  var require_createInviteCodes = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAccountCodes = exports.isAccountCodes = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isAccountCodes(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.createInviteCodes#accountCodes";
      }
      exports.isAccountCodes = isAccountCodes;
      function validateAccountCodes(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.createInviteCodes#accountCodes", v);
      }
      exports.validateAccountCodes = validateAccountCodes;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js
  var require_createSession = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.AccountTakedownError = void 0;
      var xrpc_1 = require_dist5();
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js
  var require_deactivateAccount = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js
  var require_deleteAccount2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      var xrpc_1 = require_dist5();
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js
  var require_deleteSession = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js
  var require_describeServer = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateContact = exports.isContact = exports.validateLinks = exports.isLinks = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isLinks(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.describeServer#links";
      }
      exports.isLinks = isLinks;
      function validateLinks(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.describeServer#links", v);
      }
      exports.validateLinks = validateLinks;
      function isContact(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.describeServer#contact";
      }
      exports.isContact = isContact;
      function validateContact(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.describeServer#contact", v);
      }
      exports.validateContact = validateContact;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js
  var require_getAccountInviteCodes = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.DuplicateCreateError = void 0;
      var xrpc_1 = require_dist5();
      var DuplicateCreateError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.DuplicateCreateError = DuplicateCreateError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "DuplicateCreate")
            return new DuplicateCreateError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js
  var require_getServiceAuth = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js
  var require_getSession = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js
  var require_listAppPasswords = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAppPassword = exports.isAppPassword = exports.toKnownErr = exports.AccountTakedownError = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isAppPassword(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.listAppPasswords#appPassword";
      }
      exports.isAppPassword = isAppPassword;
      function validateAppPassword(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.listAppPasswords#appPassword", v);
      }
      exports.validateAppPassword = validateAppPassword;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js
  var require_refreshSession = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.AccountTakedownError = void 0;
      var xrpc_1 = require_dist5();
      var AccountTakedownError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.AccountTakedownError = AccountTakedownError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "AccountTakedown")
            return new AccountTakedownError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js
  var require_requestAccountDelete = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js
  var require_requestEmailConfirmation = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js
  var require_requestEmailUpdate = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js
  var require_requestPasswordReset = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js
  var require_reserveSigningKey = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js
  var require_resetPassword = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      var xrpc_1 = require_dist5();
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js
  var require_revokeAppPassword = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js
  var require_updateEmail = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.TokenRequiredError = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
      var xrpc_1 = require_dist5();
      var ExpiredTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ExpiredTokenError = ExpiredTokenError;
      var InvalidTokenError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.InvalidTokenError = InvalidTokenError;
      var TokenRequiredError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.TokenRequiredError = TokenRequiredError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ExpiredToken")
            return new ExpiredTokenError(e);
          if (e.error === "InvalidToken")
            return new InvalidTokenError(e);
          if (e.error === "TokenRequired")
            return new TokenRequiredError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js
  var require_getBlob = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js
  var require_getBlocks = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js
  var require_getCheckout = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js
  var require_getHead = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.HeadNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var HeadNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.HeadNotFoundError = HeadNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "HeadNotFound")
            return new HeadNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js
  var require_getLatestCommit = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.RepoNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js
  var require_getRecord2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js
  var require_getRepo = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js
  var require_listBlobs = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js
  var require_listRepos = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRepo = exports.isRepo = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isRepo(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.listRepos#repo";
      }
      exports.isRepo = isRepo;
      function validateRepo(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.listRepos#repo", v);
      }
      exports.validateRepo = validateRepo;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js
  var require_notifyOfUpdate = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js
  var require_requestCrawl = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js
  var require_checkSignupQueue = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js
  var require_fetchLabels = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js
  var require_requestPhoneVerification = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js
  var require_getPreferences = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js
  var require_getProfile = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js
  var require_getProfiles = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js
  var require_getSuggestions = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js
  var require_putPreferences = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js
  var require_searchActors = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js
  var require_searchActorsTypeahead = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js
  var require_describeFeedGenerator = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLinks = exports.isLinks = exports.validateFeed = exports.isFeed = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isFeed(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.describeFeedGenerator#feed";
      }
      exports.isFeed = isFeed;
      function validateFeed(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.describeFeedGenerator#feed", v);
      }
      exports.validateFeed = validateFeed;
      function isLinks(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.describeFeedGenerator#links";
      }
      exports.isLinks = isLinks;
      function validateLinks(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.describeFeedGenerator#links", v);
      }
      exports.validateLinks = validateLinks;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js
  var require_getActorFeeds = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js
  var require_getActorLikes = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BlockedByActorError = exports.BlockedActorError = void 0;
      var xrpc_1 = require_dist5();
      var BlockedActorError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BlockedActorError = BlockedActorError;
      var BlockedByActorError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BlockedByActorError = BlockedByActorError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BlockedActor")
            return new BlockedActorError(e);
          if (e.error === "BlockedByActor")
            return new BlockedByActorError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js
  var require_getAuthorFeed = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BlockedByActorError = exports.BlockedActorError = void 0;
      var xrpc_1 = require_dist5();
      var BlockedActorError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BlockedActorError = BlockedActorError;
      var BlockedByActorError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BlockedByActorError = BlockedByActorError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BlockedActor")
            return new BlockedActorError(e);
          if (e.error === "BlockedByActor")
            return new BlockedByActorError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js
  var require_getFeed = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.UnknownFeedError = void 0;
      var xrpc_1 = require_dist5();
      var UnknownFeedError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnknownFeedError = UnknownFeedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js
  var require_getFeedGenerator = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js
  var require_getFeedGenerators = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js
  var require_getFeedSkeleton = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.UnknownFeedError = void 0;
      var xrpc_1 = require_dist5();
      var UnknownFeedError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnknownFeedError = UnknownFeedError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownFeed")
            return new UnknownFeedError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js
  var require_getLikes = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLike = exports.isLike = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isLike(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.getLikes#like";
      }
      exports.isLike = isLike;
      function validateLike(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.getLikes#like", v);
      }
      exports.validateLike = validateLike;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js
  var require_getListFeed = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.UnknownListError = void 0;
      var xrpc_1 = require_dist5();
      var UnknownListError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.UnknownListError = UnknownListError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "UnknownList")
            return new UnknownListError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js
  var require_getPostThread = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.NotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var NotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.NotFoundError = NotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "NotFound")
            return new NotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js
  var require_getPosts = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js
  var require_getRepostedBy = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js
  var require_getSuggestedFeeds = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js
  var require_getTimeline = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js
  var require_searchPosts = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BadQueryStringError = void 0;
      var xrpc_1 = require_dist5();
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js
  var require_getBlocks2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js
  var require_getFollowers = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js
  var require_getFollows = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js
  var require_getList = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js
  var require_getListBlocks = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js
  var require_getListMutes = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js
  var require_getLists = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js
  var require_getMutes = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js
  var require_getRelationships = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.ActorNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var ActorNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.ActorNotFoundError = ActorNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "ActorNotFound")
            return new ActorNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js
  var require_getSuggestedFollowsByActor = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js
  var require_muteActor = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js
  var require_muteActorList = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js
  var require_unmuteActor = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js
  var require_unmuteActorList = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js
  var require_getServices = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js
  var require_getUnreadCount = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js
  var require_listNotifications = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateNotification = exports.isNotification = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isNotification(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.notification.listNotifications#notification";
      }
      exports.isNotification = isNotification;
      function validateNotification(v) {
        return lexicons_1.lexicons.validate("app.bsky.notification.listNotifications#notification", v);
      }
      exports.validateNotification = validateNotification;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js
  var require_registerPush = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js
  var require_updateSeen = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js
  var require_getPopularFeedGenerators = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js
  var require_getTaggedSuggestions = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateSuggestion = exports.isSuggestion = exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
      function isSuggestion(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.unspecced.getTaggedSuggestions#suggestion";
      }
      exports.isSuggestion = isSuggestion;
      function validateSuggestion(v) {
        return lexicons_1.lexicons.validate("app.bsky.unspecced.getTaggedSuggestions#suggestion", v);
      }
      exports.validateSuggestion = validateSuggestion;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js
  var require_searchActorsSkeleton = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BadQueryStringError = void 0;
      var xrpc_1 = require_dist5();
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js
  var require_searchPostsSkeleton = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.BadQueryStringError = void 0;
      var xrpc_1 = require_dist5();
      var BadQueryStringError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.BadQueryStringError = BadQueryStringError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "BadQueryString")
            return new BadQueryStringError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js
  var require_createTemplate = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js
  var require_deleteTemplate = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js
  var require_listTemplates = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js
  var require_updateTemplate = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js
  var require_emitEvent = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.SubjectHasActionError = void 0;
      var xrpc_1 = require_dist5();
      var SubjectHasActionError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.SubjectHasActionError = SubjectHasActionError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "SubjectHasAction")
            return new SubjectHasActionError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js
  var require_getEvent = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js
  var require_getRecord3 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.RecordNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var RecordNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.RecordNotFoundError = RecordNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RecordNotFound")
            return new RecordNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js
  var require_getRepo2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = exports.RepoNotFoundError = void 0;
      var xrpc_1 = require_dist5();
      var RepoNotFoundError = class extends xrpc_1.XRPCError {
        constructor(src6) {
          super(src6.status, src6.error, src6.message, src6.headers);
        }
      };
      exports.RepoNotFoundError = RepoNotFoundError;
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
          if (e.error === "RepoNotFound")
            return new RepoNotFoundError(e);
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js
  var require_queryEvents = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js
  var require_queryStatuses = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js
  var require_searchRepos = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toKnownErr = void 0;
      var xrpc_1 = require_dist5();
      function toKnownErr(e) {
        if (e instanceof xrpc_1.XRPCError) {
        }
        return e;
      }
      exports.toKnownErr = toKnownErr;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js
  var require_defs = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRepoBlobRef = exports.isRepoBlobRef = exports.validateRepoRef = exports.isRepoRef = exports.validateAccountView = exports.isAccountView = exports.validateStatusAttr = exports.isStatusAttr = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isStatusAttr(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.admin.defs#statusAttr";
      }
      exports.isStatusAttr = isStatusAttr;
      function validateStatusAttr(v) {
        return lexicons_1.lexicons.validate("com.atproto.admin.defs#statusAttr", v);
      }
      exports.validateStatusAttr = validateStatusAttr;
      function isAccountView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.admin.defs#accountView";
      }
      exports.isAccountView = isAccountView;
      function validateAccountView(v) {
        return lexicons_1.lexicons.validate("com.atproto.admin.defs#accountView", v);
      }
      exports.validateAccountView = validateAccountView;
      function isRepoRef(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.admin.defs#repoRef";
      }
      exports.isRepoRef = isRepoRef;
      function validateRepoRef(v) {
        return lexicons_1.lexicons.validate("com.atproto.admin.defs#repoRef", v);
      }
      exports.validateRepoRef = validateRepoRef;
      function isRepoBlobRef(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.admin.defs#repoBlobRef";
      }
      exports.isRepoBlobRef = isRepoBlobRef;
      function validateRepoBlobRef(v) {
        return lexicons_1.lexicons.validate("com.atproto.admin.defs#repoBlobRef", v);
      }
      exports.validateRepoBlobRef = validateRepoBlobRef;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js
  var require_defs2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLabelValueDefinitionStrings = exports.isLabelValueDefinitionStrings = exports.validateLabelValueDefinition = exports.isLabelValueDefinition = exports.validateSelfLabel = exports.isSelfLabel = exports.validateSelfLabels = exports.isSelfLabels = exports.validateLabel = exports.isLabel = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isLabel(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#label";
      }
      exports.isLabel = isLabel;
      function validateLabel(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#label", v);
      }
      exports.validateLabel = validateLabel;
      function isSelfLabels(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#selfLabels";
      }
      exports.isSelfLabels = isSelfLabels;
      function validateSelfLabels(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#selfLabels", v);
      }
      exports.validateSelfLabels = validateSelfLabels;
      function isSelfLabel(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#selfLabel";
      }
      exports.isSelfLabel = isSelfLabel;
      function validateSelfLabel(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#selfLabel", v);
      }
      exports.validateSelfLabel = validateSelfLabel;
      function isLabelValueDefinition(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#labelValueDefinition";
      }
      exports.isLabelValueDefinition = isLabelValueDefinition;
      function validateLabelValueDefinition(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#labelValueDefinition", v);
      }
      exports.validateLabelValueDefinition = validateLabelValueDefinition;
      function isLabelValueDefinitionStrings(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.defs#labelValueDefinitionStrings";
      }
      exports.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
      function validateLabelValueDefinitionStrings(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.defs#labelValueDefinitionStrings", v);
      }
      exports.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js
  var require_subscribeLabels = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateInfo = exports.isInfo = exports.validateLabels = exports.isLabels = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isLabels(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.subscribeLabels#labels";
      }
      exports.isLabels = isLabels;
      function validateLabels(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.subscribeLabels#labels", v);
      }
      exports.validateLabels = validateLabels;
      function isInfo(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.label.subscribeLabels#info";
      }
      exports.isInfo = isInfo;
      function validateInfo(v) {
        return lexicons_1.lexicons.validate("com.atproto.label.subscribeLabels#info", v);
      }
      exports.validateInfo = validateInfo;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js
  var require_defs3 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.REASONAPPEAL = exports.REASONOTHER = exports.REASONRUDE = exports.REASONSEXUAL = exports.REASONMISLEADING = exports.REASONVIOLATION = exports.REASONSPAM = void 0;
      exports.REASONSPAM = "com.atproto.moderation.defs#reasonSpam";
      exports.REASONVIOLATION = "com.atproto.moderation.defs#reasonViolation";
      exports.REASONMISLEADING = "com.atproto.moderation.defs#reasonMisleading";
      exports.REASONSEXUAL = "com.atproto.moderation.defs#reasonSexual";
      exports.REASONRUDE = "com.atproto.moderation.defs#reasonRude";
      exports.REASONOTHER = "com.atproto.moderation.defs#reasonOther";
      exports.REASONAPPEAL = "com.atproto.moderation.defs#reasonAppeal";
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js
  var require_strongRef = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "com.atproto.repo.strongRef#main" || v.$type === "com.atproto.repo.strongRef");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("com.atproto.repo.strongRef#main", v);
      }
      exports.validateMain = validateMain;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js
  var require_defs4 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateInviteCodeUse = exports.isInviteCodeUse = exports.validateInviteCode = exports.isInviteCode = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isInviteCode(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.defs#inviteCode";
      }
      exports.isInviteCode = isInviteCode;
      function validateInviteCode(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.defs#inviteCode", v);
      }
      exports.validateInviteCode = validateInviteCode;
      function isInviteCodeUse(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.server.defs#inviteCodeUse";
      }
      exports.isInviteCodeUse = isInviteCodeUse;
      function validateInviteCodeUse(v) {
        return lexicons_1.lexicons.validate("com.atproto.server.defs#inviteCodeUse", v);
      }
      exports.validateInviteCodeUse = validateInviteCodeUse;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js
  var require_subscribeRepos = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRepoOp = exports.isRepoOp = exports.validateInfo = exports.isInfo = exports.validateTombstone = exports.isTombstone = exports.validateMigrate = exports.isMigrate = exports.validateHandle = exports.isHandle = exports.validateIdentity = exports.isIdentity = exports.validateCommit = exports.isCommit = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isCommit(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#commit";
      }
      exports.isCommit = isCommit;
      function validateCommit(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#commit", v);
      }
      exports.validateCommit = validateCommit;
      function isIdentity(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#identity";
      }
      exports.isIdentity = isIdentity;
      function validateIdentity(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#identity", v);
      }
      exports.validateIdentity = validateIdentity;
      function isHandle(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#handle";
      }
      exports.isHandle = isHandle;
      function validateHandle(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#handle", v);
      }
      exports.validateHandle = validateHandle;
      function isMigrate(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#migrate";
      }
      exports.isMigrate = isMigrate;
      function validateMigrate(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#migrate", v);
      }
      exports.validateMigrate = validateMigrate;
      function isTombstone(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#tombstone";
      }
      exports.isTombstone = isTombstone;
      function validateTombstone(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#tombstone", v);
      }
      exports.validateTombstone = validateTombstone;
      function isInfo(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#info";
      }
      exports.isInfo = isInfo;
      function validateInfo(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#info", v);
      }
      exports.validateInfo = validateInfo;
      function isRepoOp(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "com.atproto.sync.subscribeRepos#repoOp";
      }
      exports.isRepoOp = isRepoOp;
      function validateRepoOp(v) {
        return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#repoOp", v);
      }
      exports.validateRepoOp = validateRepoOp;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js
  var require_defs5 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLabelerPrefItem = exports.isLabelerPrefItem = exports.validateLabelersPref = exports.isLabelersPref = exports.validateHiddenPostsPref = exports.isHiddenPostsPref = exports.validateMutedWordsPref = exports.isMutedWordsPref = exports.validateMutedWord = exports.isMutedWord = exports.validateInterestsPref = exports.isInterestsPref = exports.validateThreadViewPref = exports.isThreadViewPref = exports.validateFeedViewPref = exports.isFeedViewPref = exports.validatePersonalDetailsPref = exports.isPersonalDetailsPref = exports.validateSavedFeedsPref = exports.isSavedFeedsPref = exports.validateContentLabelPref = exports.isContentLabelPref = exports.validateAdultContentPref = exports.isAdultContentPref = exports.validateViewerState = exports.isViewerState = exports.validateProfileAssociated = exports.isProfileAssociated = exports.validateProfileViewDetailed = exports.isProfileViewDetailed = exports.validateProfileView = exports.isProfileView = exports.validateProfileViewBasic = exports.isProfileViewBasic = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isProfileViewBasic(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#profileViewBasic";
      }
      exports.isProfileViewBasic = isProfileViewBasic;
      function validateProfileViewBasic(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileViewBasic", v);
      }
      exports.validateProfileViewBasic = validateProfileViewBasic;
      function isProfileView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#profileView";
      }
      exports.isProfileView = isProfileView;
      function validateProfileView(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileView", v);
      }
      exports.validateProfileView = validateProfileView;
      function isProfileViewDetailed(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#profileViewDetailed";
      }
      exports.isProfileViewDetailed = isProfileViewDetailed;
      function validateProfileViewDetailed(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileViewDetailed", v);
      }
      exports.validateProfileViewDetailed = validateProfileViewDetailed;
      function isProfileAssociated(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#profileAssociated";
      }
      exports.isProfileAssociated = isProfileAssociated;
      function validateProfileAssociated(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileAssociated", v);
      }
      exports.validateProfileAssociated = validateProfileAssociated;
      function isViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#viewerState";
      }
      exports.isViewerState = isViewerState;
      function validateViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#viewerState", v);
      }
      exports.validateViewerState = validateViewerState;
      function isAdultContentPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#adultContentPref";
      }
      exports.isAdultContentPref = isAdultContentPref;
      function validateAdultContentPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#adultContentPref", v);
      }
      exports.validateAdultContentPref = validateAdultContentPref;
      function isContentLabelPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#contentLabelPref";
      }
      exports.isContentLabelPref = isContentLabelPref;
      function validateContentLabelPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#contentLabelPref", v);
      }
      exports.validateContentLabelPref = validateContentLabelPref;
      function isSavedFeedsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#savedFeedsPref";
      }
      exports.isSavedFeedsPref = isSavedFeedsPref;
      function validateSavedFeedsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#savedFeedsPref", v);
      }
      exports.validateSavedFeedsPref = validateSavedFeedsPref;
      function isPersonalDetailsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#personalDetailsPref";
      }
      exports.isPersonalDetailsPref = isPersonalDetailsPref;
      function validatePersonalDetailsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#personalDetailsPref", v);
      }
      exports.validatePersonalDetailsPref = validatePersonalDetailsPref;
      function isFeedViewPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#feedViewPref";
      }
      exports.isFeedViewPref = isFeedViewPref;
      function validateFeedViewPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#feedViewPref", v);
      }
      exports.validateFeedViewPref = validateFeedViewPref;
      function isThreadViewPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#threadViewPref";
      }
      exports.isThreadViewPref = isThreadViewPref;
      function validateThreadViewPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#threadViewPref", v);
      }
      exports.validateThreadViewPref = validateThreadViewPref;
      function isInterestsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#interestsPref";
      }
      exports.isInterestsPref = isInterestsPref;
      function validateInterestsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#interestsPref", v);
      }
      exports.validateInterestsPref = validateInterestsPref;
      function isMutedWord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#mutedWord";
      }
      exports.isMutedWord = isMutedWord;
      function validateMutedWord(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#mutedWord", v);
      }
      exports.validateMutedWord = validateMutedWord;
      function isMutedWordsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#mutedWordsPref";
      }
      exports.isMutedWordsPref = isMutedWordsPref;
      function validateMutedWordsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#mutedWordsPref", v);
      }
      exports.validateMutedWordsPref = validateMutedWordsPref;
      function isHiddenPostsPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#hiddenPostsPref";
      }
      exports.isHiddenPostsPref = isHiddenPostsPref;
      function validateHiddenPostsPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#hiddenPostsPref", v);
      }
      exports.validateHiddenPostsPref = validateHiddenPostsPref;
      function isLabelersPref(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#labelersPref";
      }
      exports.isLabelersPref = isLabelersPref;
      function validateLabelersPref(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#labelersPref", v);
      }
      exports.validateLabelersPref = validateLabelersPref;
      function isLabelerPrefItem(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.actor.defs#labelerPrefItem";
      }
      exports.isLabelerPrefItem = isLabelerPrefItem;
      function validateLabelerPrefItem(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.defs#labelerPrefItem", v);
      }
      exports.validateLabelerPrefItem = validateLabelerPrefItem;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js
  var require_profile = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.actor.profile#main" || v.$type === "app.bsky.actor.profile");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.actor.profile#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js
  var require_external2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateViewExternal = exports.isViewExternal = exports.validateView = exports.isView = exports.validateExternal = exports.isExternal = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.embed.external#main" || v.$type === "app.bsky.embed.external");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.external#main", v);
      }
      exports.validateMain = validateMain;
      function isExternal(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.external#external";
      }
      exports.isExternal = isExternal;
      function validateExternal(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.external#external", v);
      }
      exports.validateExternal = validateExternal;
      function isView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.external#view";
      }
      exports.isView = isView;
      function validateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.external#view", v);
      }
      exports.validateView = validateView;
      function isViewExternal(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.external#viewExternal";
      }
      exports.isViewExternal = isViewExternal;
      function validateViewExternal(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.external#viewExternal", v);
      }
      exports.validateViewExternal = validateViewExternal;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js
  var require_images = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateViewImage = exports.isViewImage = exports.validateView = exports.isView = exports.validateAspectRatio = exports.isAspectRatio = exports.validateImage = exports.isImage = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.embed.images#main" || v.$type === "app.bsky.embed.images");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#main", v);
      }
      exports.validateMain = validateMain;
      function isImage(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.images#image";
      }
      exports.isImage = isImage;
      function validateImage(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#image", v);
      }
      exports.validateImage = validateImage;
      function isAspectRatio(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.images#aspectRatio";
      }
      exports.isAspectRatio = isAspectRatio;
      function validateAspectRatio(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#aspectRatio", v);
      }
      exports.validateAspectRatio = validateAspectRatio;
      function isView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.images#view";
      }
      exports.isView = isView;
      function validateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#view", v);
      }
      exports.validateView = validateView;
      function isViewImage(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.images#viewImage";
      }
      exports.isViewImage = isViewImage;
      function validateViewImage(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.images#viewImage", v);
      }
      exports.validateViewImage = validateViewImage;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js
  var require_record = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateViewBlocked = exports.isViewBlocked = exports.validateViewNotFound = exports.isViewNotFound = exports.validateViewRecord = exports.isViewRecord = exports.validateView = exports.isView = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.embed.record#main" || v.$type === "app.bsky.embed.record");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#main", v);
      }
      exports.validateMain = validateMain;
      function isView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.record#view";
      }
      exports.isView = isView;
      function validateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#view", v);
      }
      exports.validateView = validateView;
      function isViewRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.record#viewRecord";
      }
      exports.isViewRecord = isViewRecord;
      function validateViewRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#viewRecord", v);
      }
      exports.validateViewRecord = validateViewRecord;
      function isViewNotFound(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.record#viewNotFound";
      }
      exports.isViewNotFound = isViewNotFound;
      function validateViewNotFound(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#viewNotFound", v);
      }
      exports.validateViewNotFound = validateViewNotFound;
      function isViewBlocked(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.record#viewBlocked";
      }
      exports.isViewBlocked = isViewBlocked;
      function validateViewBlocked(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.record#viewBlocked", v);
      }
      exports.validateViewBlocked = validateViewBlocked;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js
  var require_recordWithMedia = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateView = exports.isView = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.embed.recordWithMedia#main" || v.$type === "app.bsky.embed.recordWithMedia");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.recordWithMedia#main", v);
      }
      exports.validateMain = validateMain;
      function isView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.embed.recordWithMedia#view";
      }
      exports.isView = isView;
      function validateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.embed.recordWithMedia#view", v);
      }
      exports.validateView = validateView;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js
  var require_defs6 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateThreadgateView = exports.isThreadgateView = exports.validateSkeletonReasonRepost = exports.isSkeletonReasonRepost = exports.validateSkeletonFeedPost = exports.isSkeletonFeedPost = exports.validateGeneratorViewerState = exports.isGeneratorViewerState = exports.validateGeneratorView = exports.isGeneratorView = exports.validateBlockedAuthor = exports.isBlockedAuthor = exports.validateBlockedPost = exports.isBlockedPost = exports.validateNotFoundPost = exports.isNotFoundPost = exports.validateThreadViewPost = exports.isThreadViewPost = exports.validateReasonRepost = exports.isReasonRepost = exports.validateReplyRef = exports.isReplyRef = exports.validateFeedViewPost = exports.isFeedViewPost = exports.validateViewerState = exports.isViewerState = exports.validatePostView = exports.isPostView = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isPostView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#postView";
      }
      exports.isPostView = isPostView;
      function validatePostView(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#postView", v);
      }
      exports.validatePostView = validatePostView;
      function isViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#viewerState";
      }
      exports.isViewerState = isViewerState;
      function validateViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#viewerState", v);
      }
      exports.validateViewerState = validateViewerState;
      function isFeedViewPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#feedViewPost";
      }
      exports.isFeedViewPost = isFeedViewPost;
      function validateFeedViewPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#feedViewPost", v);
      }
      exports.validateFeedViewPost = validateFeedViewPost;
      function isReplyRef(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#replyRef";
      }
      exports.isReplyRef = isReplyRef;
      function validateReplyRef(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#replyRef", v);
      }
      exports.validateReplyRef = validateReplyRef;
      function isReasonRepost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#reasonRepost";
      }
      exports.isReasonRepost = isReasonRepost;
      function validateReasonRepost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#reasonRepost", v);
      }
      exports.validateReasonRepost = validateReasonRepost;
      function isThreadViewPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#threadViewPost";
      }
      exports.isThreadViewPost = isThreadViewPost;
      function validateThreadViewPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#threadViewPost", v);
      }
      exports.validateThreadViewPost = validateThreadViewPost;
      function isNotFoundPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#notFoundPost";
      }
      exports.isNotFoundPost = isNotFoundPost;
      function validateNotFoundPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#notFoundPost", v);
      }
      exports.validateNotFoundPost = validateNotFoundPost;
      function isBlockedPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#blockedPost";
      }
      exports.isBlockedPost = isBlockedPost;
      function validateBlockedPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#blockedPost", v);
      }
      exports.validateBlockedPost = validateBlockedPost;
      function isBlockedAuthor(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#blockedAuthor";
      }
      exports.isBlockedAuthor = isBlockedAuthor;
      function validateBlockedAuthor(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#blockedAuthor", v);
      }
      exports.validateBlockedAuthor = validateBlockedAuthor;
      function isGeneratorView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#generatorView";
      }
      exports.isGeneratorView = isGeneratorView;
      function validateGeneratorView(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#generatorView", v);
      }
      exports.validateGeneratorView = validateGeneratorView;
      function isGeneratorViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#generatorViewerState";
      }
      exports.isGeneratorViewerState = isGeneratorViewerState;
      function validateGeneratorViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#generatorViewerState", v);
      }
      exports.validateGeneratorViewerState = validateGeneratorViewerState;
      function isSkeletonFeedPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#skeletonFeedPost";
      }
      exports.isSkeletonFeedPost = isSkeletonFeedPost;
      function validateSkeletonFeedPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#skeletonFeedPost", v);
      }
      exports.validateSkeletonFeedPost = validateSkeletonFeedPost;
      function isSkeletonReasonRepost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#skeletonReasonRepost";
      }
      exports.isSkeletonReasonRepost = isSkeletonReasonRepost;
      function validateSkeletonReasonRepost(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#skeletonReasonRepost", v);
      }
      exports.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
      function isThreadgateView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.defs#threadgateView";
      }
      exports.isThreadgateView = isThreadgateView;
      function validateThreadgateView(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.defs#threadgateView", v);
      }
      exports.validateThreadgateView = validateThreadgateView;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js
  var require_generator = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.generator#main" || v.$type === "app.bsky.feed.generator");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.generator#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js
  var require_like = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.like#main" || v.$type === "app.bsky.feed.like");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.like#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js
  var require_post = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateTextSlice = exports.isTextSlice = exports.validateEntity = exports.isEntity = exports.validateReplyRef = exports.isReplyRef = exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.post#main" || v.$type === "app.bsky.feed.post");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.post#main", v);
      }
      exports.validateRecord = validateRecord;
      function isReplyRef(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.post#replyRef";
      }
      exports.isReplyRef = isReplyRef;
      function validateReplyRef(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.post#replyRef", v);
      }
      exports.validateReplyRef = validateReplyRef;
      function isEntity(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.post#entity";
      }
      exports.isEntity = isEntity;
      function validateEntity(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.post#entity", v);
      }
      exports.validateEntity = validateEntity;
      function isTextSlice(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.post#textSlice";
      }
      exports.isTextSlice = isTextSlice;
      function validateTextSlice(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.post#textSlice", v);
      }
      exports.validateTextSlice = validateTextSlice;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js
  var require_repost = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.repost#main" || v.$type === "app.bsky.feed.repost");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.repost#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js
  var require_threadgate = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateListRule = exports.isListRule = exports.validateFollowingRule = exports.isFollowingRule = exports.validateMentionRule = exports.isMentionRule = exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.feed.threadgate#main" || v.$type === "app.bsky.feed.threadgate");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#main", v);
      }
      exports.validateRecord = validateRecord;
      function isMentionRule(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.threadgate#mentionRule";
      }
      exports.isMentionRule = isMentionRule;
      function validateMentionRule(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#mentionRule", v);
      }
      exports.validateMentionRule = validateMentionRule;
      function isFollowingRule(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.threadgate#followingRule";
      }
      exports.isFollowingRule = isFollowingRule;
      function validateFollowingRule(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#followingRule", v);
      }
      exports.validateFollowingRule = validateFollowingRule;
      function isListRule(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.feed.threadgate#listRule";
      }
      exports.isListRule = isListRule;
      function validateListRule(v) {
        return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#listRule", v);
      }
      exports.validateListRule = validateListRule;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js
  var require_block = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.block#main" || v.$type === "app.bsky.graph.block");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.block#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js
  var require_defs7 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRelationship = exports.isRelationship = exports.validateNotFoundActor = exports.isNotFoundActor = exports.validateListViewerState = exports.isListViewerState = exports.CURATELIST = exports.MODLIST = exports.validateListItemView = exports.isListItemView = exports.validateListView = exports.isListView = exports.validateListViewBasic = exports.isListViewBasic = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isListViewBasic(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#listViewBasic";
      }
      exports.isListViewBasic = isListViewBasic;
      function validateListViewBasic(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#listViewBasic", v);
      }
      exports.validateListViewBasic = validateListViewBasic;
      function isListView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#listView";
      }
      exports.isListView = isListView;
      function validateListView(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#listView", v);
      }
      exports.validateListView = validateListView;
      function isListItemView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#listItemView";
      }
      exports.isListItemView = isListItemView;
      function validateListItemView(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#listItemView", v);
      }
      exports.validateListItemView = validateListItemView;
      exports.MODLIST = "app.bsky.graph.defs#modlist";
      exports.CURATELIST = "app.bsky.graph.defs#curatelist";
      function isListViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#listViewerState";
      }
      exports.isListViewerState = isListViewerState;
      function validateListViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#listViewerState", v);
      }
      exports.validateListViewerState = validateListViewerState;
      function isNotFoundActor(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#notFoundActor";
      }
      exports.isNotFoundActor = isNotFoundActor;
      function validateNotFoundActor(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#notFoundActor", v);
      }
      exports.validateNotFoundActor = validateNotFoundActor;
      function isRelationship(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.graph.defs#relationship";
      }
      exports.isRelationship = isRelationship;
      function validateRelationship(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.defs#relationship", v);
      }
      exports.validateRelationship = validateRelationship;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js
  var require_follow = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.follow#main" || v.$type === "app.bsky.graph.follow");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.follow#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js
  var require_list = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.list#main" || v.$type === "app.bsky.graph.list");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.list#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js
  var require_listblock = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.listblock#main" || v.$type === "app.bsky.graph.listblock");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.listblock#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js
  var require_listitem = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.graph.listitem#main" || v.$type === "app.bsky.graph.listitem");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.graph.listitem#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js
  var require_defs8 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateLabelerPolicies = exports.isLabelerPolicies = exports.validateLabelerViewerState = exports.isLabelerViewerState = exports.validateLabelerViewDetailed = exports.isLabelerViewDetailed = exports.validateLabelerView = exports.isLabelerView = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isLabelerView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.labeler.defs#labelerView";
      }
      exports.isLabelerView = isLabelerView;
      function validateLabelerView(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerView", v);
      }
      exports.validateLabelerView = validateLabelerView;
      function isLabelerViewDetailed(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.labeler.defs#labelerViewDetailed";
      }
      exports.isLabelerViewDetailed = isLabelerViewDetailed;
      function validateLabelerViewDetailed(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerViewDetailed", v);
      }
      exports.validateLabelerViewDetailed = validateLabelerViewDetailed;
      function isLabelerViewerState(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.labeler.defs#labelerViewerState";
      }
      exports.isLabelerViewerState = isLabelerViewerState;
      function validateLabelerViewerState(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerViewerState", v);
      }
      exports.validateLabelerViewerState = validateLabelerViewerState;
      function isLabelerPolicies(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.labeler.defs#labelerPolicies";
      }
      exports.isLabelerPolicies = isLabelerPolicies;
      function validateLabelerPolicies(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerPolicies", v);
      }
      exports.validateLabelerPolicies = validateLabelerPolicies;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js
  var require_service = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateRecord = exports.isRecord = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isRecord(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.labeler.service#main" || v.$type === "app.bsky.labeler.service");
      }
      exports.isRecord = isRecord;
      function validateRecord(v) {
        return lexicons_1.lexicons.validate("app.bsky.labeler.service#main", v);
      }
      exports.validateRecord = validateRecord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js
  var require_facet = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateByteSlice = exports.isByteSlice = exports.validateTag = exports.isTag = exports.validateLink = exports.isLink = exports.validateMention = exports.isMention = exports.validateMain = exports.isMain = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isMain(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && (v.$type === "app.bsky.richtext.facet#main" || v.$type === "app.bsky.richtext.facet");
      }
      exports.isMain = isMain;
      function validateMain(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#main", v);
      }
      exports.validateMain = validateMain;
      function isMention(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.richtext.facet#mention";
      }
      exports.isMention = isMention;
      function validateMention(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#mention", v);
      }
      exports.validateMention = validateMention;
      function isLink(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.richtext.facet#link";
      }
      exports.isLink = isLink;
      function validateLink(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#link", v);
      }
      exports.validateLink = validateLink;
      function isTag(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.richtext.facet#tag";
      }
      exports.isTag = isTag;
      function validateTag(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#tag", v);
      }
      exports.validateTag = validateTag;
      function isByteSlice(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.richtext.facet#byteSlice";
      }
      exports.isByteSlice = isByteSlice;
      function validateByteSlice(v) {
        return lexicons_1.lexicons.validate("app.bsky.richtext.facet#byteSlice", v);
      }
      exports.validateByteSlice = validateByteSlice;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js
  var require_defs9 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateSkeletonSearchActor = exports.isSkeletonSearchActor = exports.validateSkeletonSearchPost = exports.isSkeletonSearchPost = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isSkeletonSearchPost(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.unspecced.defs#skeletonSearchPost";
      }
      exports.isSkeletonSearchPost = isSkeletonSearchPost;
      function validateSkeletonSearchPost(v) {
        return lexicons_1.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchPost", v);
      }
      exports.validateSkeletonSearchPost = validateSkeletonSearchPost;
      function isSkeletonSearchActor(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "app.bsky.unspecced.defs#skeletonSearchActor";
      }
      exports.isSkeletonSearchActor = isSkeletonSearchActor;
      function validateSkeletonSearchActor(v) {
        return lexicons_1.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchActor", v);
      }
      exports.validateSkeletonSearchActor = validateSkeletonSearchActor;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js
  var require_defs10 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateTemplateView = exports.isTemplateView = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isTemplateView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.communication.defs#templateView";
      }
      exports.isTemplateView = isTemplateView;
      function validateTemplateView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.communication.defs#templateView", v);
      }
      exports.validateTemplateView = validateTemplateView;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js
  var require_defs11 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateModeration = exports.isModeration = exports.validateRecordViewNotFound = exports.isRecordViewNotFound = exports.validateRecordViewDetail = exports.isRecordViewDetail = exports.validateRecordView = exports.isRecordView = exports.validateRepoViewNotFound = exports.isRepoViewNotFound = exports.validateRepoViewDetail = exports.isRepoViewDetail = exports.validateRepoView = exports.isRepoView = exports.validateModEventTag = exports.isModEventTag = exports.validateModEventDivert = exports.isModEventDivert = exports.validateModEventEmail = exports.isModEventEmail = exports.validateModEventUnmute = exports.isModEventUnmute = exports.validateModEventMute = exports.isModEventMute = exports.validateModEventEscalate = exports.isModEventEscalate = exports.validateModEventAcknowledge = exports.isModEventAcknowledge = exports.validateModEventLabel = exports.isModEventLabel = exports.validateModEventReport = exports.isModEventReport = exports.validateModEventComment = exports.isModEventComment = exports.validateModEventResolveAppeal = exports.isModEventResolveAppeal = exports.validateModEventReverseTakedown = exports.isModEventReverseTakedown = exports.validateModEventTakedown = exports.isModEventTakedown = exports.REVIEWNONE = exports.REVIEWCLOSED = exports.REVIEWESCALATED = exports.REVIEWOPEN = exports.validateSubjectStatusView = exports.isSubjectStatusView = exports.validateModEventViewDetail = exports.isModEventViewDetail = exports.validateModEventView = exports.isModEventView = void 0;
      exports.validateVideoDetails = exports.isVideoDetails = exports.validateImageDetails = exports.isImageDetails = exports.validateBlobView = exports.isBlobView = exports.validateModerationDetail = exports.isModerationDetail = void 0;
      var util_1 = require_util6();
      var lexicons_1 = require_lexicons2();
      function isModEventView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventView";
      }
      exports.isModEventView = isModEventView;
      function validateModEventView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventView", v);
      }
      exports.validateModEventView = validateModEventView;
      function isModEventViewDetail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventViewDetail";
      }
      exports.isModEventViewDetail = isModEventViewDetail;
      function validateModEventViewDetail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventViewDetail", v);
      }
      exports.validateModEventViewDetail = validateModEventViewDetail;
      function isSubjectStatusView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#subjectStatusView";
      }
      exports.isSubjectStatusView = isSubjectStatusView;
      function validateSubjectStatusView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#subjectStatusView", v);
      }
      exports.validateSubjectStatusView = validateSubjectStatusView;
      exports.REVIEWOPEN = "tools.ozone.moderation.defs#reviewOpen";
      exports.REVIEWESCALATED = "tools.ozone.moderation.defs#reviewEscalated";
      exports.REVIEWCLOSED = "tools.ozone.moderation.defs#reviewClosed";
      exports.REVIEWNONE = "tools.ozone.moderation.defs#reviewNone";
      function isModEventTakedown(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventTakedown";
      }
      exports.isModEventTakedown = isModEventTakedown;
      function validateModEventTakedown(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventTakedown", v);
      }
      exports.validateModEventTakedown = validateModEventTakedown;
      function isModEventReverseTakedown(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventReverseTakedown";
      }
      exports.isModEventReverseTakedown = isModEventReverseTakedown;
      function validateModEventReverseTakedown(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventReverseTakedown", v);
      }
      exports.validateModEventReverseTakedown = validateModEventReverseTakedown;
      function isModEventResolveAppeal(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventResolveAppeal";
      }
      exports.isModEventResolveAppeal = isModEventResolveAppeal;
      function validateModEventResolveAppeal(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventResolveAppeal", v);
      }
      exports.validateModEventResolveAppeal = validateModEventResolveAppeal;
      function isModEventComment(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventComment";
      }
      exports.isModEventComment = isModEventComment;
      function validateModEventComment(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventComment", v);
      }
      exports.validateModEventComment = validateModEventComment;
      function isModEventReport(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventReport";
      }
      exports.isModEventReport = isModEventReport;
      function validateModEventReport(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventReport", v);
      }
      exports.validateModEventReport = validateModEventReport;
      function isModEventLabel(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventLabel";
      }
      exports.isModEventLabel = isModEventLabel;
      function validateModEventLabel(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventLabel", v);
      }
      exports.validateModEventLabel = validateModEventLabel;
      function isModEventAcknowledge(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventAcknowledge";
      }
      exports.isModEventAcknowledge = isModEventAcknowledge;
      function validateModEventAcknowledge(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventAcknowledge", v);
      }
      exports.validateModEventAcknowledge = validateModEventAcknowledge;
      function isModEventEscalate(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventEscalate";
      }
      exports.isModEventEscalate = isModEventEscalate;
      function validateModEventEscalate(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventEscalate", v);
      }
      exports.validateModEventEscalate = validateModEventEscalate;
      function isModEventMute(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventMute";
      }
      exports.isModEventMute = isModEventMute;
      function validateModEventMute(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventMute", v);
      }
      exports.validateModEventMute = validateModEventMute;
      function isModEventUnmute(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventUnmute";
      }
      exports.isModEventUnmute = isModEventUnmute;
      function validateModEventUnmute(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventUnmute", v);
      }
      exports.validateModEventUnmute = validateModEventUnmute;
      function isModEventEmail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventEmail";
      }
      exports.isModEventEmail = isModEventEmail;
      function validateModEventEmail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventEmail", v);
      }
      exports.validateModEventEmail = validateModEventEmail;
      function isModEventDivert(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventDivert";
      }
      exports.isModEventDivert = isModEventDivert;
      function validateModEventDivert(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventDivert", v);
      }
      exports.validateModEventDivert = validateModEventDivert;
      function isModEventTag(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#modEventTag";
      }
      exports.isModEventTag = isModEventTag;
      function validateModEventTag(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventTag", v);
      }
      exports.validateModEventTag = validateModEventTag;
      function isRepoView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#repoView";
      }
      exports.isRepoView = isRepoView;
      function validateRepoView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoView", v);
      }
      exports.validateRepoView = validateRepoView;
      function isRepoViewDetail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#repoViewDetail";
      }
      exports.isRepoViewDetail = isRepoViewDetail;
      function validateRepoViewDetail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoViewDetail", v);
      }
      exports.validateRepoViewDetail = validateRepoViewDetail;
      function isRepoViewNotFound(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#repoViewNotFound";
      }
      exports.isRepoViewNotFound = isRepoViewNotFound;
      function validateRepoViewNotFound(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoViewNotFound", v);
      }
      exports.validateRepoViewNotFound = validateRepoViewNotFound;
      function isRecordView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#recordView";
      }
      exports.isRecordView = isRecordView;
      function validateRecordView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordView", v);
      }
      exports.validateRecordView = validateRecordView;
      function isRecordViewDetail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#recordViewDetail";
      }
      exports.isRecordViewDetail = isRecordViewDetail;
      function validateRecordViewDetail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordViewDetail", v);
      }
      exports.validateRecordViewDetail = validateRecordViewDetail;
      function isRecordViewNotFound(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#recordViewNotFound";
      }
      exports.isRecordViewNotFound = isRecordViewNotFound;
      function validateRecordViewNotFound(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordViewNotFound", v);
      }
      exports.validateRecordViewNotFound = validateRecordViewNotFound;
      function isModeration(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#moderation";
      }
      exports.isModeration = isModeration;
      function validateModeration(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#moderation", v);
      }
      exports.validateModeration = validateModeration;
      function isModerationDetail(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#moderationDetail";
      }
      exports.isModerationDetail = isModerationDetail;
      function validateModerationDetail(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#moderationDetail", v);
      }
      exports.validateModerationDetail = validateModerationDetail;
      function isBlobView(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#blobView";
      }
      exports.isBlobView = isBlobView;
      function validateBlobView(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#blobView", v);
      }
      exports.validateBlobView = validateBlobView;
      function isImageDetails(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#imageDetails";
      }
      exports.isImageDetails = isImageDetails;
      function validateImageDetails(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#imageDetails", v);
      }
      exports.validateImageDetails = validateImageDetails;
      function isVideoDetails(v) {
        return (0, util_1.isObj)(v) && (0, util_1.hasProp)(v, "$type") && v.$type === "tools.ozone.moderation.defs#videoDetails";
      }
      exports.isVideoDetails = isVideoDetails;
      function validateVideoDetails(v) {
        return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#videoDetails", v);
      }
      exports.validateVideoDetails = validateVideoDetails;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/client/index.js
  var require_client3 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/client/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ComAtprotoServerGetAccountInviteCodes = exports.ComAtprotoServerDescribeServer = exports.ComAtprotoServerDeleteSession = exports.ComAtprotoServerDeleteAccount = exports.ComAtprotoServerDefs = exports.ComAtprotoServerDeactivateAccount = exports.ComAtprotoServerCreateSession = exports.ComAtprotoServerCreateInviteCodes = exports.ComAtprotoServerCreateInviteCode = exports.ComAtprotoServerCreateAppPassword = exports.ComAtprotoServerCreateAccount = exports.ComAtprotoServerConfirmEmail = exports.ComAtprotoServerCheckAccountStatus = exports.ComAtprotoServerActivateAccount = exports.ComAtprotoRepoUploadBlob = exports.ComAtprotoRepoStrongRef = exports.ComAtprotoRepoPutRecord = exports.ComAtprotoRepoListRecords = exports.ComAtprotoRepoListMissingBlobs = exports.ComAtprotoRepoImportRepo = exports.ComAtprotoRepoGetRecord = exports.ComAtprotoRepoDescribeRepo = exports.ComAtprotoRepoDeleteRecord = exports.ComAtprotoRepoCreateRecord = exports.ComAtprotoRepoApplyWrites = exports.ComAtprotoModerationDefs = exports.ComAtprotoModerationCreateReport = exports.ComAtprotoLabelSubscribeLabels = exports.ComAtprotoLabelQueryLabels = exports.ComAtprotoLabelDefs = exports.ComAtprotoIdentityUpdateHandle = exports.ComAtprotoIdentitySubmitPlcOperation = exports.ComAtprotoIdentitySignPlcOperation = exports.ComAtprotoIdentityResolveHandle = exports.ComAtprotoIdentityRequestPlcOperationSignature = exports.ComAtprotoIdentityGetRecommendedDidCredentials = exports.ComAtprotoAdminUpdateSubjectStatus = exports.ComAtprotoAdminUpdateAccountPassword = exports.ComAtprotoAdminUpdateAccountHandle = exports.ComAtprotoAdminUpdateAccountEmail = exports.ComAtprotoAdminSendEmail = exports.ComAtprotoAdminGetSubjectStatus = exports.ComAtprotoAdminGetInviteCodes = exports.ComAtprotoAdminGetAccountInfos = exports.ComAtprotoAdminGetAccountInfo = exports.ComAtprotoAdminEnableAccountInvites = exports.ComAtprotoAdminDisableInviteCodes = exports.ComAtprotoAdminDisableAccountInvites = exports.ComAtprotoAdminDeleteAccount = exports.ComAtprotoAdminDefs = void 0;
      exports.AppBskyFeedGetFeedSkeleton = exports.AppBskyFeedGetFeedGenerators = exports.AppBskyFeedGetFeedGenerator = exports.AppBskyFeedGetFeed = exports.AppBskyFeedGetAuthorFeed = exports.AppBskyFeedGetActorLikes = exports.AppBskyFeedGetActorFeeds = exports.AppBskyFeedGenerator = exports.AppBskyFeedDescribeFeedGenerator = exports.AppBskyFeedDefs = exports.AppBskyEmbedRecordWithMedia = exports.AppBskyEmbedRecord = exports.AppBskyEmbedImages = exports.AppBskyEmbedExternal = exports.AppBskyActorSearchActorsTypeahead = exports.AppBskyActorSearchActors = exports.AppBskyActorPutPreferences = exports.AppBskyActorProfile = exports.AppBskyActorGetSuggestions = exports.AppBskyActorGetProfiles = exports.AppBskyActorGetProfile = exports.AppBskyActorGetPreferences = exports.AppBskyActorDefs = exports.ComAtprotoTempRequestPhoneVerification = exports.ComAtprotoTempFetchLabels = exports.ComAtprotoTempCheckSignupQueue = exports.ComAtprotoSyncSubscribeRepos = exports.ComAtprotoSyncRequestCrawl = exports.ComAtprotoSyncNotifyOfUpdate = exports.ComAtprotoSyncListRepos = exports.ComAtprotoSyncListBlobs = exports.ComAtprotoSyncGetRepo = exports.ComAtprotoSyncGetRecord = exports.ComAtprotoSyncGetLatestCommit = exports.ComAtprotoSyncGetHead = exports.ComAtprotoSyncGetCheckout = exports.ComAtprotoSyncGetBlocks = exports.ComAtprotoSyncGetBlob = exports.ComAtprotoServerUpdateEmail = exports.ComAtprotoServerRevokeAppPassword = exports.ComAtprotoServerResetPassword = exports.ComAtprotoServerReserveSigningKey = exports.ComAtprotoServerRequestPasswordReset = exports.ComAtprotoServerRequestEmailUpdate = exports.ComAtprotoServerRequestEmailConfirmation = exports.ComAtprotoServerRequestAccountDelete = exports.ComAtprotoServerRefreshSession = exports.ComAtprotoServerListAppPasswords = exports.ComAtprotoServerGetSession = exports.ComAtprotoServerGetServiceAuth = void 0;
      exports.ToolsOzoneCommunicationUpdateTemplate = exports.ToolsOzoneCommunicationListTemplates = exports.ToolsOzoneCommunicationDeleteTemplate = exports.ToolsOzoneCommunicationDefs = exports.ToolsOzoneCommunicationCreateTemplate = exports.AppBskyUnspeccedSearchPostsSkeleton = exports.AppBskyUnspeccedSearchActorsSkeleton = exports.AppBskyUnspeccedGetTaggedSuggestions = exports.AppBskyUnspeccedGetPopularFeedGenerators = exports.AppBskyUnspeccedDefs = exports.AppBskyRichtextFacet = exports.AppBskyNotificationUpdateSeen = exports.AppBskyNotificationRegisterPush = exports.AppBskyNotificationListNotifications = exports.AppBskyNotificationGetUnreadCount = exports.AppBskyLabelerService = exports.AppBskyLabelerGetServices = exports.AppBskyLabelerDefs = exports.AppBskyGraphUnmuteActorList = exports.AppBskyGraphUnmuteActor = exports.AppBskyGraphMuteActorList = exports.AppBskyGraphMuteActor = exports.AppBskyGraphListitem = exports.AppBskyGraphListblock = exports.AppBskyGraphList = exports.AppBskyGraphGetSuggestedFollowsByActor = exports.AppBskyGraphGetRelationships = exports.AppBskyGraphGetMutes = exports.AppBskyGraphGetLists = exports.AppBskyGraphGetListMutes = exports.AppBskyGraphGetListBlocks = exports.AppBskyGraphGetList = exports.AppBskyGraphGetFollows = exports.AppBskyGraphGetFollowers = exports.AppBskyGraphGetBlocks = exports.AppBskyGraphFollow = exports.AppBskyGraphDefs = exports.AppBskyGraphBlock = exports.AppBskyFeedThreadgate = exports.AppBskyFeedSearchPosts = exports.AppBskyFeedRepost = exports.AppBskyFeedPost = exports.AppBskyFeedLike = exports.AppBskyFeedGetTimeline = exports.AppBskyFeedGetSuggestedFeeds = exports.AppBskyFeedGetRepostedBy = exports.AppBskyFeedGetPosts = exports.AppBskyFeedGetPostThread = exports.AppBskyFeedGetListFeed = exports.AppBskyFeedGetLikes = void 0;
      exports.ToolsOzoneModerationNS = exports.ToolsOzoneCommunicationNS = exports.ToolsOzoneNS = exports.ToolsNS = exports.AppBskyUnspeccedNS = exports.AppBskyRichtextNS = exports.AppBskyNotificationNS = exports.ServiceRecord = exports.AppBskyLabelerNS = exports.ListitemRecord = exports.ListblockRecord = exports.ListRecord = exports.FollowRecord = exports.BlockRecord = exports.AppBskyGraphNS = exports.ThreadgateRecord = exports.RepostRecord = exports.PostRecord = exports.LikeRecord = exports.GeneratorRecord = exports.AppBskyFeedNS = exports.AppBskyEmbedNS = exports.ProfileRecord = exports.AppBskyActorNS = exports.AppBskyNS = exports.AppNS = exports.ComAtprotoTempNS = exports.ComAtprotoSyncNS = exports.ComAtprotoServerNS = exports.ComAtprotoRepoNS = exports.ComAtprotoModerationNS = exports.ComAtprotoLabelNS = exports.ComAtprotoIdentityNS = exports.ComAtprotoAdminNS = exports.ComAtprotoNS = exports.ComNS = exports.AtpServiceClient = exports.AtpBaseClient = exports.TOOLS_OZONE_MODERATION = exports.APP_BSKY_GRAPH = exports.COM_ATPROTO_MODERATION = exports.ToolsOzoneModerationSearchRepos = exports.ToolsOzoneModerationQueryStatuses = exports.ToolsOzoneModerationQueryEvents = exports.ToolsOzoneModerationGetRepo = exports.ToolsOzoneModerationGetRecord = exports.ToolsOzoneModerationGetEvent = exports.ToolsOzoneModerationEmitEvent = exports.ToolsOzoneModerationDefs = void 0;
      var xrpc_1 = require_dist5();
      var lexicons_1 = require_lexicons2();
      var ComAtprotoAdminDeleteAccount = __importStar(require_deleteAccount());
      var ComAtprotoAdminDisableAccountInvites = __importStar(require_disableAccountInvites());
      var ComAtprotoAdminDisableInviteCodes = __importStar(require_disableInviteCodes());
      var ComAtprotoAdminEnableAccountInvites = __importStar(require_enableAccountInvites());
      var ComAtprotoAdminGetAccountInfo = __importStar(require_getAccountInfo());
      var ComAtprotoAdminGetAccountInfos = __importStar(require_getAccountInfos());
      var ComAtprotoAdminGetInviteCodes = __importStar(require_getInviteCodes());
      var ComAtprotoAdminGetSubjectStatus = __importStar(require_getSubjectStatus());
      var ComAtprotoAdminSendEmail = __importStar(require_sendEmail());
      var ComAtprotoAdminUpdateAccountEmail = __importStar(require_updateAccountEmail());
      var ComAtprotoAdminUpdateAccountHandle = __importStar(require_updateAccountHandle());
      var ComAtprotoAdminUpdateAccountPassword = __importStar(require_updateAccountPassword());
      var ComAtprotoAdminUpdateSubjectStatus = __importStar(require_updateSubjectStatus());
      var ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(require_getRecommendedDidCredentials());
      var ComAtprotoIdentityRequestPlcOperationSignature = __importStar(require_requestPlcOperationSignature());
      var ComAtprotoIdentityResolveHandle = __importStar(require_resolveHandle());
      var ComAtprotoIdentitySignPlcOperation = __importStar(require_signPlcOperation());
      var ComAtprotoIdentitySubmitPlcOperation = __importStar(require_submitPlcOperation());
      var ComAtprotoIdentityUpdateHandle = __importStar(require_updateHandle());
      var ComAtprotoLabelQueryLabels = __importStar(require_queryLabels());
      var ComAtprotoModerationCreateReport = __importStar(require_createReport());
      var ComAtprotoRepoApplyWrites = __importStar(require_applyWrites());
      var ComAtprotoRepoCreateRecord = __importStar(require_createRecord());
      var ComAtprotoRepoDeleteRecord = __importStar(require_deleteRecord());
      var ComAtprotoRepoDescribeRepo = __importStar(require_describeRepo());
      var ComAtprotoRepoGetRecord = __importStar(require_getRecord());
      var ComAtprotoRepoImportRepo = __importStar(require_importRepo());
      var ComAtprotoRepoListMissingBlobs = __importStar(require_listMissingBlobs());
      var ComAtprotoRepoListRecords = __importStar(require_listRecords());
      var ComAtprotoRepoPutRecord = __importStar(require_putRecord());
      var ComAtprotoRepoUploadBlob = __importStar(require_uploadBlob());
      var ComAtprotoServerActivateAccount = __importStar(require_activateAccount());
      var ComAtprotoServerCheckAccountStatus = __importStar(require_checkAccountStatus());
      var ComAtprotoServerConfirmEmail = __importStar(require_confirmEmail());
      var ComAtprotoServerCreateAccount = __importStar(require_createAccount());
      var ComAtprotoServerCreateAppPassword = __importStar(require_createAppPassword());
      var ComAtprotoServerCreateInviteCode = __importStar(require_createInviteCode());
      var ComAtprotoServerCreateInviteCodes = __importStar(require_createInviteCodes());
      var ComAtprotoServerCreateSession = __importStar(require_createSession());
      var ComAtprotoServerDeactivateAccount = __importStar(require_deactivateAccount());
      var ComAtprotoServerDeleteAccount = __importStar(require_deleteAccount2());
      var ComAtprotoServerDeleteSession = __importStar(require_deleteSession());
      var ComAtprotoServerDescribeServer = __importStar(require_describeServer());
      var ComAtprotoServerGetAccountInviteCodes = __importStar(require_getAccountInviteCodes());
      var ComAtprotoServerGetServiceAuth = __importStar(require_getServiceAuth());
      var ComAtprotoServerGetSession = __importStar(require_getSession());
      var ComAtprotoServerListAppPasswords = __importStar(require_listAppPasswords());
      var ComAtprotoServerRefreshSession = __importStar(require_refreshSession());
      var ComAtprotoServerRequestAccountDelete = __importStar(require_requestAccountDelete());
      var ComAtprotoServerRequestEmailConfirmation = __importStar(require_requestEmailConfirmation());
      var ComAtprotoServerRequestEmailUpdate = __importStar(require_requestEmailUpdate());
      var ComAtprotoServerRequestPasswordReset = __importStar(require_requestPasswordReset());
      var ComAtprotoServerReserveSigningKey = __importStar(require_reserveSigningKey());
      var ComAtprotoServerResetPassword = __importStar(require_resetPassword());
      var ComAtprotoServerRevokeAppPassword = __importStar(require_revokeAppPassword());
      var ComAtprotoServerUpdateEmail = __importStar(require_updateEmail());
      var ComAtprotoSyncGetBlob = __importStar(require_getBlob());
      var ComAtprotoSyncGetBlocks = __importStar(require_getBlocks());
      var ComAtprotoSyncGetCheckout = __importStar(require_getCheckout());
      var ComAtprotoSyncGetHead = __importStar(require_getHead());
      var ComAtprotoSyncGetLatestCommit = __importStar(require_getLatestCommit());
      var ComAtprotoSyncGetRecord = __importStar(require_getRecord2());
      var ComAtprotoSyncGetRepo = __importStar(require_getRepo());
      var ComAtprotoSyncListBlobs = __importStar(require_listBlobs());
      var ComAtprotoSyncListRepos = __importStar(require_listRepos());
      var ComAtprotoSyncNotifyOfUpdate = __importStar(require_notifyOfUpdate());
      var ComAtprotoSyncRequestCrawl = __importStar(require_requestCrawl());
      var ComAtprotoTempCheckSignupQueue = __importStar(require_checkSignupQueue());
      var ComAtprotoTempFetchLabels = __importStar(require_fetchLabels());
      var ComAtprotoTempRequestPhoneVerification = __importStar(require_requestPhoneVerification());
      var AppBskyActorGetPreferences = __importStar(require_getPreferences());
      var AppBskyActorGetProfile = __importStar(require_getProfile());
      var AppBskyActorGetProfiles = __importStar(require_getProfiles());
      var AppBskyActorGetSuggestions = __importStar(require_getSuggestions());
      var AppBskyActorPutPreferences = __importStar(require_putPreferences());
      var AppBskyActorSearchActors = __importStar(require_searchActors());
      var AppBskyActorSearchActorsTypeahead = __importStar(require_searchActorsTypeahead());
      var AppBskyFeedDescribeFeedGenerator = __importStar(require_describeFeedGenerator());
      var AppBskyFeedGetActorFeeds = __importStar(require_getActorFeeds());
      var AppBskyFeedGetActorLikes = __importStar(require_getActorLikes());
      var AppBskyFeedGetAuthorFeed = __importStar(require_getAuthorFeed());
      var AppBskyFeedGetFeed = __importStar(require_getFeed());
      var AppBskyFeedGetFeedGenerator = __importStar(require_getFeedGenerator());
      var AppBskyFeedGetFeedGenerators = __importStar(require_getFeedGenerators());
      var AppBskyFeedGetFeedSkeleton = __importStar(require_getFeedSkeleton());
      var AppBskyFeedGetLikes = __importStar(require_getLikes());
      var AppBskyFeedGetListFeed = __importStar(require_getListFeed());
      var AppBskyFeedGetPostThread = __importStar(require_getPostThread());
      var AppBskyFeedGetPosts = __importStar(require_getPosts());
      var AppBskyFeedGetRepostedBy = __importStar(require_getRepostedBy());
      var AppBskyFeedGetSuggestedFeeds = __importStar(require_getSuggestedFeeds());
      var AppBskyFeedGetTimeline = __importStar(require_getTimeline());
      var AppBskyFeedSearchPosts = __importStar(require_searchPosts());
      var AppBskyGraphGetBlocks = __importStar(require_getBlocks2());
      var AppBskyGraphGetFollowers = __importStar(require_getFollowers());
      var AppBskyGraphGetFollows = __importStar(require_getFollows());
      var AppBskyGraphGetList = __importStar(require_getList());
      var AppBskyGraphGetListBlocks = __importStar(require_getListBlocks());
      var AppBskyGraphGetListMutes = __importStar(require_getListMutes());
      var AppBskyGraphGetLists = __importStar(require_getLists());
      var AppBskyGraphGetMutes = __importStar(require_getMutes());
      var AppBskyGraphGetRelationships = __importStar(require_getRelationships());
      var AppBskyGraphGetSuggestedFollowsByActor = __importStar(require_getSuggestedFollowsByActor());
      var AppBskyGraphMuteActor = __importStar(require_muteActor());
      var AppBskyGraphMuteActorList = __importStar(require_muteActorList());
      var AppBskyGraphUnmuteActor = __importStar(require_unmuteActor());
      var AppBskyGraphUnmuteActorList = __importStar(require_unmuteActorList());
      var AppBskyLabelerGetServices = __importStar(require_getServices());
      var AppBskyNotificationGetUnreadCount = __importStar(require_getUnreadCount());
      var AppBskyNotificationListNotifications = __importStar(require_listNotifications());
      var AppBskyNotificationRegisterPush = __importStar(require_registerPush());
      var AppBskyNotificationUpdateSeen = __importStar(require_updateSeen());
      var AppBskyUnspeccedGetPopularFeedGenerators = __importStar(require_getPopularFeedGenerators());
      var AppBskyUnspeccedGetTaggedSuggestions = __importStar(require_getTaggedSuggestions());
      var AppBskyUnspeccedSearchActorsSkeleton = __importStar(require_searchActorsSkeleton());
      var AppBskyUnspeccedSearchPostsSkeleton = __importStar(require_searchPostsSkeleton());
      var ToolsOzoneCommunicationCreateTemplate = __importStar(require_createTemplate());
      var ToolsOzoneCommunicationDeleteTemplate = __importStar(require_deleteTemplate());
      var ToolsOzoneCommunicationListTemplates = __importStar(require_listTemplates());
      var ToolsOzoneCommunicationUpdateTemplate = __importStar(require_updateTemplate());
      var ToolsOzoneModerationEmitEvent = __importStar(require_emitEvent());
      var ToolsOzoneModerationGetEvent = __importStar(require_getEvent());
      var ToolsOzoneModerationGetRecord = __importStar(require_getRecord3());
      var ToolsOzoneModerationGetRepo = __importStar(require_getRepo2());
      var ToolsOzoneModerationQueryEvents = __importStar(require_queryEvents());
      var ToolsOzoneModerationQueryStatuses = __importStar(require_queryStatuses());
      var ToolsOzoneModerationSearchRepos = __importStar(require_searchRepos());
      exports.ComAtprotoAdminDefs = __importStar(require_defs());
      exports.ComAtprotoAdminDeleteAccount = __importStar(require_deleteAccount());
      exports.ComAtprotoAdminDisableAccountInvites = __importStar(require_disableAccountInvites());
      exports.ComAtprotoAdminDisableInviteCodes = __importStar(require_disableInviteCodes());
      exports.ComAtprotoAdminEnableAccountInvites = __importStar(require_enableAccountInvites());
      exports.ComAtprotoAdminGetAccountInfo = __importStar(require_getAccountInfo());
      exports.ComAtprotoAdminGetAccountInfos = __importStar(require_getAccountInfos());
      exports.ComAtprotoAdminGetInviteCodes = __importStar(require_getInviteCodes());
      exports.ComAtprotoAdminGetSubjectStatus = __importStar(require_getSubjectStatus());
      exports.ComAtprotoAdminSendEmail = __importStar(require_sendEmail());
      exports.ComAtprotoAdminUpdateAccountEmail = __importStar(require_updateAccountEmail());
      exports.ComAtprotoAdminUpdateAccountHandle = __importStar(require_updateAccountHandle());
      exports.ComAtprotoAdminUpdateAccountPassword = __importStar(require_updateAccountPassword());
      exports.ComAtprotoAdminUpdateSubjectStatus = __importStar(require_updateSubjectStatus());
      exports.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(require_getRecommendedDidCredentials());
      exports.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(require_requestPlcOperationSignature());
      exports.ComAtprotoIdentityResolveHandle = __importStar(require_resolveHandle());
      exports.ComAtprotoIdentitySignPlcOperation = __importStar(require_signPlcOperation());
      exports.ComAtprotoIdentitySubmitPlcOperation = __importStar(require_submitPlcOperation());
      exports.ComAtprotoIdentityUpdateHandle = __importStar(require_updateHandle());
      exports.ComAtprotoLabelDefs = __importStar(require_defs2());
      exports.ComAtprotoLabelQueryLabels = __importStar(require_queryLabels());
      exports.ComAtprotoLabelSubscribeLabels = __importStar(require_subscribeLabels());
      exports.ComAtprotoModerationCreateReport = __importStar(require_createReport());
      exports.ComAtprotoModerationDefs = __importStar(require_defs3());
      exports.ComAtprotoRepoApplyWrites = __importStar(require_applyWrites());
      exports.ComAtprotoRepoCreateRecord = __importStar(require_createRecord());
      exports.ComAtprotoRepoDeleteRecord = __importStar(require_deleteRecord());
      exports.ComAtprotoRepoDescribeRepo = __importStar(require_describeRepo());
      exports.ComAtprotoRepoGetRecord = __importStar(require_getRecord());
      exports.ComAtprotoRepoImportRepo = __importStar(require_importRepo());
      exports.ComAtprotoRepoListMissingBlobs = __importStar(require_listMissingBlobs());
      exports.ComAtprotoRepoListRecords = __importStar(require_listRecords());
      exports.ComAtprotoRepoPutRecord = __importStar(require_putRecord());
      exports.ComAtprotoRepoStrongRef = __importStar(require_strongRef());
      exports.ComAtprotoRepoUploadBlob = __importStar(require_uploadBlob());
      exports.ComAtprotoServerActivateAccount = __importStar(require_activateAccount());
      exports.ComAtprotoServerCheckAccountStatus = __importStar(require_checkAccountStatus());
      exports.ComAtprotoServerConfirmEmail = __importStar(require_confirmEmail());
      exports.ComAtprotoServerCreateAccount = __importStar(require_createAccount());
      exports.ComAtprotoServerCreateAppPassword = __importStar(require_createAppPassword());
      exports.ComAtprotoServerCreateInviteCode = __importStar(require_createInviteCode());
      exports.ComAtprotoServerCreateInviteCodes = __importStar(require_createInviteCodes());
      exports.ComAtprotoServerCreateSession = __importStar(require_createSession());
      exports.ComAtprotoServerDeactivateAccount = __importStar(require_deactivateAccount());
      exports.ComAtprotoServerDefs = __importStar(require_defs4());
      exports.ComAtprotoServerDeleteAccount = __importStar(require_deleteAccount2());
      exports.ComAtprotoServerDeleteSession = __importStar(require_deleteSession());
      exports.ComAtprotoServerDescribeServer = __importStar(require_describeServer());
      exports.ComAtprotoServerGetAccountInviteCodes = __importStar(require_getAccountInviteCodes());
      exports.ComAtprotoServerGetServiceAuth = __importStar(require_getServiceAuth());
      exports.ComAtprotoServerGetSession = __importStar(require_getSession());
      exports.ComAtprotoServerListAppPasswords = __importStar(require_listAppPasswords());
      exports.ComAtprotoServerRefreshSession = __importStar(require_refreshSession());
      exports.ComAtprotoServerRequestAccountDelete = __importStar(require_requestAccountDelete());
      exports.ComAtprotoServerRequestEmailConfirmation = __importStar(require_requestEmailConfirmation());
      exports.ComAtprotoServerRequestEmailUpdate = __importStar(require_requestEmailUpdate());
      exports.ComAtprotoServerRequestPasswordReset = __importStar(require_requestPasswordReset());
      exports.ComAtprotoServerReserveSigningKey = __importStar(require_reserveSigningKey());
      exports.ComAtprotoServerResetPassword = __importStar(require_resetPassword());
      exports.ComAtprotoServerRevokeAppPassword = __importStar(require_revokeAppPassword());
      exports.ComAtprotoServerUpdateEmail = __importStar(require_updateEmail());
      exports.ComAtprotoSyncGetBlob = __importStar(require_getBlob());
      exports.ComAtprotoSyncGetBlocks = __importStar(require_getBlocks());
      exports.ComAtprotoSyncGetCheckout = __importStar(require_getCheckout());
      exports.ComAtprotoSyncGetHead = __importStar(require_getHead());
      exports.ComAtprotoSyncGetLatestCommit = __importStar(require_getLatestCommit());
      exports.ComAtprotoSyncGetRecord = __importStar(require_getRecord2());
      exports.ComAtprotoSyncGetRepo = __importStar(require_getRepo());
      exports.ComAtprotoSyncListBlobs = __importStar(require_listBlobs());
      exports.ComAtprotoSyncListRepos = __importStar(require_listRepos());
      exports.ComAtprotoSyncNotifyOfUpdate = __importStar(require_notifyOfUpdate());
      exports.ComAtprotoSyncRequestCrawl = __importStar(require_requestCrawl());
      exports.ComAtprotoSyncSubscribeRepos = __importStar(require_subscribeRepos());
      exports.ComAtprotoTempCheckSignupQueue = __importStar(require_checkSignupQueue());
      exports.ComAtprotoTempFetchLabels = __importStar(require_fetchLabels());
      exports.ComAtprotoTempRequestPhoneVerification = __importStar(require_requestPhoneVerification());
      exports.AppBskyActorDefs = __importStar(require_defs5());
      exports.AppBskyActorGetPreferences = __importStar(require_getPreferences());
      exports.AppBskyActorGetProfile = __importStar(require_getProfile());
      exports.AppBskyActorGetProfiles = __importStar(require_getProfiles());
      exports.AppBskyActorGetSuggestions = __importStar(require_getSuggestions());
      exports.AppBskyActorProfile = __importStar(require_profile());
      exports.AppBskyActorPutPreferences = __importStar(require_putPreferences());
      exports.AppBskyActorSearchActors = __importStar(require_searchActors());
      exports.AppBskyActorSearchActorsTypeahead = __importStar(require_searchActorsTypeahead());
      exports.AppBskyEmbedExternal = __importStar(require_external2());
      exports.AppBskyEmbedImages = __importStar(require_images());
      exports.AppBskyEmbedRecord = __importStar(require_record());
      exports.AppBskyEmbedRecordWithMedia = __importStar(require_recordWithMedia());
      exports.AppBskyFeedDefs = __importStar(require_defs6());
      exports.AppBskyFeedDescribeFeedGenerator = __importStar(require_describeFeedGenerator());
      exports.AppBskyFeedGenerator = __importStar(require_generator());
      exports.AppBskyFeedGetActorFeeds = __importStar(require_getActorFeeds());
      exports.AppBskyFeedGetActorLikes = __importStar(require_getActorLikes());
      exports.AppBskyFeedGetAuthorFeed = __importStar(require_getAuthorFeed());
      exports.AppBskyFeedGetFeed = __importStar(require_getFeed());
      exports.AppBskyFeedGetFeedGenerator = __importStar(require_getFeedGenerator());
      exports.AppBskyFeedGetFeedGenerators = __importStar(require_getFeedGenerators());
      exports.AppBskyFeedGetFeedSkeleton = __importStar(require_getFeedSkeleton());
      exports.AppBskyFeedGetLikes = __importStar(require_getLikes());
      exports.AppBskyFeedGetListFeed = __importStar(require_getListFeed());
      exports.AppBskyFeedGetPostThread = __importStar(require_getPostThread());
      exports.AppBskyFeedGetPosts = __importStar(require_getPosts());
      exports.AppBskyFeedGetRepostedBy = __importStar(require_getRepostedBy());
      exports.AppBskyFeedGetSuggestedFeeds = __importStar(require_getSuggestedFeeds());
      exports.AppBskyFeedGetTimeline = __importStar(require_getTimeline());
      exports.AppBskyFeedLike = __importStar(require_like());
      exports.AppBskyFeedPost = __importStar(require_post());
      exports.AppBskyFeedRepost = __importStar(require_repost());
      exports.AppBskyFeedSearchPosts = __importStar(require_searchPosts());
      exports.AppBskyFeedThreadgate = __importStar(require_threadgate());
      exports.AppBskyGraphBlock = __importStar(require_block());
      exports.AppBskyGraphDefs = __importStar(require_defs7());
      exports.AppBskyGraphFollow = __importStar(require_follow());
      exports.AppBskyGraphGetBlocks = __importStar(require_getBlocks2());
      exports.AppBskyGraphGetFollowers = __importStar(require_getFollowers());
      exports.AppBskyGraphGetFollows = __importStar(require_getFollows());
      exports.AppBskyGraphGetList = __importStar(require_getList());
      exports.AppBskyGraphGetListBlocks = __importStar(require_getListBlocks());
      exports.AppBskyGraphGetListMutes = __importStar(require_getListMutes());
      exports.AppBskyGraphGetLists = __importStar(require_getLists());
      exports.AppBskyGraphGetMutes = __importStar(require_getMutes());
      exports.AppBskyGraphGetRelationships = __importStar(require_getRelationships());
      exports.AppBskyGraphGetSuggestedFollowsByActor = __importStar(require_getSuggestedFollowsByActor());
      exports.AppBskyGraphList = __importStar(require_list());
      exports.AppBskyGraphListblock = __importStar(require_listblock());
      exports.AppBskyGraphListitem = __importStar(require_listitem());
      exports.AppBskyGraphMuteActor = __importStar(require_muteActor());
      exports.AppBskyGraphMuteActorList = __importStar(require_muteActorList());
      exports.AppBskyGraphUnmuteActor = __importStar(require_unmuteActor());
      exports.AppBskyGraphUnmuteActorList = __importStar(require_unmuteActorList());
      exports.AppBskyLabelerDefs = __importStar(require_defs8());
      exports.AppBskyLabelerGetServices = __importStar(require_getServices());
      exports.AppBskyLabelerService = __importStar(require_service());
      exports.AppBskyNotificationGetUnreadCount = __importStar(require_getUnreadCount());
      exports.AppBskyNotificationListNotifications = __importStar(require_listNotifications());
      exports.AppBskyNotificationRegisterPush = __importStar(require_registerPush());
      exports.AppBskyNotificationUpdateSeen = __importStar(require_updateSeen());
      exports.AppBskyRichtextFacet = __importStar(require_facet());
      exports.AppBskyUnspeccedDefs = __importStar(require_defs9());
      exports.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(require_getPopularFeedGenerators());
      exports.AppBskyUnspeccedGetTaggedSuggestions = __importStar(require_getTaggedSuggestions());
      exports.AppBskyUnspeccedSearchActorsSkeleton = __importStar(require_searchActorsSkeleton());
      exports.AppBskyUnspeccedSearchPostsSkeleton = __importStar(require_searchPostsSkeleton());
      exports.ToolsOzoneCommunicationCreateTemplate = __importStar(require_createTemplate());
      exports.ToolsOzoneCommunicationDefs = __importStar(require_defs10());
      exports.ToolsOzoneCommunicationDeleteTemplate = __importStar(require_deleteTemplate());
      exports.ToolsOzoneCommunicationListTemplates = __importStar(require_listTemplates());
      exports.ToolsOzoneCommunicationUpdateTemplate = __importStar(require_updateTemplate());
      exports.ToolsOzoneModerationDefs = __importStar(require_defs11());
      exports.ToolsOzoneModerationEmitEvent = __importStar(require_emitEvent());
      exports.ToolsOzoneModerationGetEvent = __importStar(require_getEvent());
      exports.ToolsOzoneModerationGetRecord = __importStar(require_getRecord3());
      exports.ToolsOzoneModerationGetRepo = __importStar(require_getRepo2());
      exports.ToolsOzoneModerationQueryEvents = __importStar(require_queryEvents());
      exports.ToolsOzoneModerationQueryStatuses = __importStar(require_queryStatuses());
      exports.ToolsOzoneModerationSearchRepos = __importStar(require_searchRepos());
      exports.COM_ATPROTO_MODERATION = {
        DefsReasonSpam: "com.atproto.moderation.defs#reasonSpam",
        DefsReasonViolation: "com.atproto.moderation.defs#reasonViolation",
        DefsReasonMisleading: "com.atproto.moderation.defs#reasonMisleading",
        DefsReasonSexual: "com.atproto.moderation.defs#reasonSexual",
        DefsReasonRude: "com.atproto.moderation.defs#reasonRude",
        DefsReasonOther: "com.atproto.moderation.defs#reasonOther",
        DefsReasonAppeal: "com.atproto.moderation.defs#reasonAppeal"
      };
      exports.APP_BSKY_GRAPH = {
        DefsModlist: "app.bsky.graph.defs#modlist",
        DefsCuratelist: "app.bsky.graph.defs#curatelist"
      };
      exports.TOOLS_OZONE_MODERATION = {
        DefsReviewOpen: "tools.ozone.moderation.defs#reviewOpen",
        DefsReviewEscalated: "tools.ozone.moderation.defs#reviewEscalated",
        DefsReviewClosed: "tools.ozone.moderation.defs#reviewClosed",
        DefsReviewNone: "tools.ozone.moderation.defs#reviewNone"
      };
      var AtpBaseClient = class {
        constructor() {
          Object.defineProperty(this, "xrpc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new xrpc_1.Client()
          });
          this.xrpc.addLexicons(lexicons_1.schemas);
        }
        service(serviceUri) {
          return new AtpServiceClient(this, this.xrpc.service(serviceUri));
        }
      };
      exports.AtpBaseClient = AtpBaseClient;
      var AtpServiceClient = class {
        constructor(baseClient, xrpcService) {
          Object.defineProperty(this, "_baseClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "xrpc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "com", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "tools", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._baseClient = baseClient;
          this.xrpc = xrpcService;
          this.com = new ComNS(this);
          this.app = new AppNS(this);
          this.tools = new ToolsNS(this);
        }
        setHeader(key, value) {
          this.xrpc.setHeader(key, value);
        }
      };
      exports.AtpServiceClient = AtpServiceClient;
      var ComNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "atproto", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.atproto = new ComAtprotoNS(service);
        }
      };
      exports.ComNS = ComNS;
      var ComAtprotoNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "admin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "identity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "repo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "sync", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "temp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.admin = new ComAtprotoAdminNS(service);
          this.identity = new ComAtprotoIdentityNS(service);
          this.label = new ComAtprotoLabelNS(service);
          this.moderation = new ComAtprotoModerationNS(service);
          this.repo = new ComAtprotoRepoNS(service);
          this.server = new ComAtprotoServerNS(service);
          this.sync = new ComAtprotoSyncNS(service);
          this.temp = new ComAtprotoTempNS(service);
        }
      };
      exports.ComAtprotoNS = ComAtprotoNS;
      var ComAtprotoAdminNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        deleteAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.deleteAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminDeleteAccount.toKnownErr(e);
          });
        }
        disableAccountInvites(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.disableAccountInvites", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminDisableAccountInvites.toKnownErr(e);
          });
        }
        disableInviteCodes(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.disableInviteCodes", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminDisableInviteCodes.toKnownErr(e);
          });
        }
        enableAccountInvites(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.enableAccountInvites", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminEnableAccountInvites.toKnownErr(e);
          });
        }
        getAccountInfo(params, opts) {
          return this._service.xrpc.call("com.atproto.admin.getAccountInfo", params, void 0, opts).catch((e) => {
            throw ComAtprotoAdminGetAccountInfo.toKnownErr(e);
          });
        }
        getAccountInfos(params, opts) {
          return this._service.xrpc.call("com.atproto.admin.getAccountInfos", params, void 0, opts).catch((e) => {
            throw ComAtprotoAdminGetAccountInfos.toKnownErr(e);
          });
        }
        getInviteCodes(params, opts) {
          return this._service.xrpc.call("com.atproto.admin.getInviteCodes", params, void 0, opts).catch((e) => {
            throw ComAtprotoAdminGetInviteCodes.toKnownErr(e);
          });
        }
        getSubjectStatus(params, opts) {
          return this._service.xrpc.call("com.atproto.admin.getSubjectStatus", params, void 0, opts).catch((e) => {
            throw ComAtprotoAdminGetSubjectStatus.toKnownErr(e);
          });
        }
        sendEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.sendEmail", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminSendEmail.toKnownErr(e);
          });
        }
        updateAccountEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateAccountEmail", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminUpdateAccountEmail.toKnownErr(e);
          });
        }
        updateAccountHandle(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateAccountHandle", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminUpdateAccountHandle.toKnownErr(e);
          });
        }
        updateAccountPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateAccountPassword", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminUpdateAccountPassword.toKnownErr(e);
          });
        }
        updateSubjectStatus(data, opts) {
          return this._service.xrpc.call("com.atproto.admin.updateSubjectStatus", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoAdminUpdateSubjectStatus.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoAdminNS = ComAtprotoAdminNS;
      var ComAtprotoIdentityNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        getRecommendedDidCredentials(params, opts) {
          return this._service.xrpc.call("com.atproto.identity.getRecommendedDidCredentials", params, void 0, opts).catch((e) => {
            throw ComAtprotoIdentityGetRecommendedDidCredentials.toKnownErr(e);
          });
        }
        requestPlcOperationSignature(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.requestPlcOperationSignature", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentityRequestPlcOperationSignature.toKnownErr(e);
          });
        }
        resolveHandle(params, opts) {
          return this._service.xrpc.call("com.atproto.identity.resolveHandle", params, void 0, opts).catch((e) => {
            throw ComAtprotoIdentityResolveHandle.toKnownErr(e);
          });
        }
        signPlcOperation(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.signPlcOperation", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentitySignPlcOperation.toKnownErr(e);
          });
        }
        submitPlcOperation(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.submitPlcOperation", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentitySubmitPlcOperation.toKnownErr(e);
          });
        }
        updateHandle(data, opts) {
          return this._service.xrpc.call("com.atproto.identity.updateHandle", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoIdentityUpdateHandle.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
      var ComAtprotoLabelNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        queryLabels(params, opts) {
          return this._service.xrpc.call("com.atproto.label.queryLabels", params, void 0, opts).catch((e) => {
            throw ComAtprotoLabelQueryLabels.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoLabelNS = ComAtprotoLabelNS;
      var ComAtprotoModerationNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        createReport(data, opts) {
          return this._service.xrpc.call("com.atproto.moderation.createReport", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoModerationCreateReport.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoModerationNS = ComAtprotoModerationNS;
      var ComAtprotoRepoNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        applyWrites(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.applyWrites", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoApplyWrites.toKnownErr(e);
          });
        }
        createRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.createRecord", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoCreateRecord.toKnownErr(e);
          });
        }
        deleteRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.deleteRecord", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoDeleteRecord.toKnownErr(e);
          });
        }
        describeRepo(params, opts) {
          return this._service.xrpc.call("com.atproto.repo.describeRepo", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoDescribeRepo.toKnownErr(e);
          });
        }
        getRecord(params, opts) {
          return this._service.xrpc.call("com.atproto.repo.getRecord", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoGetRecord.toKnownErr(e);
          });
        }
        importRepo(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.importRepo", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoImportRepo.toKnownErr(e);
          });
        }
        listMissingBlobs(params, opts) {
          return this._service.xrpc.call("com.atproto.repo.listMissingBlobs", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoListMissingBlobs.toKnownErr(e);
          });
        }
        listRecords(params, opts) {
          return this._service.xrpc.call("com.atproto.repo.listRecords", params, void 0, opts).catch((e) => {
            throw ComAtprotoRepoListRecords.toKnownErr(e);
          });
        }
        putRecord(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.putRecord", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoPutRecord.toKnownErr(e);
          });
        }
        uploadBlob(data, opts) {
          return this._service.xrpc.call("com.atproto.repo.uploadBlob", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoRepoUploadBlob.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoRepoNS = ComAtprotoRepoNS;
      var ComAtprotoServerNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        activateAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.activateAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerActivateAccount.toKnownErr(e);
          });
        }
        checkAccountStatus(params, opts) {
          return this._service.xrpc.call("com.atproto.server.checkAccountStatus", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerCheckAccountStatus.toKnownErr(e);
          });
        }
        confirmEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.server.confirmEmail", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerConfirmEmail.toKnownErr(e);
          });
        }
        createAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateAccount.toKnownErr(e);
          });
        }
        createAppPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createAppPassword", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateAppPassword.toKnownErr(e);
          });
        }
        createInviteCode(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createInviteCode", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateInviteCode.toKnownErr(e);
          });
        }
        createInviteCodes(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createInviteCodes", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateInviteCodes.toKnownErr(e);
          });
        }
        createSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.createSession", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerCreateSession.toKnownErr(e);
          });
        }
        deactivateAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.deactivateAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerDeactivateAccount.toKnownErr(e);
          });
        }
        deleteAccount(data, opts) {
          return this._service.xrpc.call("com.atproto.server.deleteAccount", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerDeleteAccount.toKnownErr(e);
          });
        }
        deleteSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.deleteSession", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerDeleteSession.toKnownErr(e);
          });
        }
        describeServer(params, opts) {
          return this._service.xrpc.call("com.atproto.server.describeServer", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerDescribeServer.toKnownErr(e);
          });
        }
        getAccountInviteCodes(params, opts) {
          return this._service.xrpc.call("com.atproto.server.getAccountInviteCodes", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e);
          });
        }
        getServiceAuth(params, opts) {
          return this._service.xrpc.call("com.atproto.server.getServiceAuth", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerGetServiceAuth.toKnownErr(e);
          });
        }
        getSession(params, opts) {
          return this._service.xrpc.call("com.atproto.server.getSession", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerGetSession.toKnownErr(e);
          });
        }
        listAppPasswords(params, opts) {
          return this._service.xrpc.call("com.atproto.server.listAppPasswords", params, void 0, opts).catch((e) => {
            throw ComAtprotoServerListAppPasswords.toKnownErr(e);
          });
        }
        refreshSession(data, opts) {
          return this._service.xrpc.call("com.atproto.server.refreshSession", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRefreshSession.toKnownErr(e);
          });
        }
        requestAccountDelete(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestAccountDelete", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRequestAccountDelete.toKnownErr(e);
          });
        }
        requestEmailConfirmation(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestEmailConfirmation", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRequestEmailConfirmation.toKnownErr(e);
          });
        }
        requestEmailUpdate(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestEmailUpdate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRequestEmailUpdate.toKnownErr(e);
          });
        }
        requestPasswordReset(data, opts) {
          return this._service.xrpc.call("com.atproto.server.requestPasswordReset", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRequestPasswordReset.toKnownErr(e);
          });
        }
        reserveSigningKey(data, opts) {
          return this._service.xrpc.call("com.atproto.server.reserveSigningKey", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerReserveSigningKey.toKnownErr(e);
          });
        }
        resetPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.resetPassword", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerResetPassword.toKnownErr(e);
          });
        }
        revokeAppPassword(data, opts) {
          return this._service.xrpc.call("com.atproto.server.revokeAppPassword", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerRevokeAppPassword.toKnownErr(e);
          });
        }
        updateEmail(data, opts) {
          return this._service.xrpc.call("com.atproto.server.updateEmail", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoServerUpdateEmail.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoServerNS = ComAtprotoServerNS;
      var ComAtprotoSyncNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        getBlob(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getBlob", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetBlob.toKnownErr(e);
          });
        }
        getBlocks(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getBlocks", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetBlocks.toKnownErr(e);
          });
        }
        getCheckout(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getCheckout", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetCheckout.toKnownErr(e);
          });
        }
        getHead(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getHead", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetHead.toKnownErr(e);
          });
        }
        getLatestCommit(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getLatestCommit", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetLatestCommit.toKnownErr(e);
          });
        }
        getRecord(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getRecord", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetRecord.toKnownErr(e);
          });
        }
        getRepo(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.getRepo", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncGetRepo.toKnownErr(e);
          });
        }
        listBlobs(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.listBlobs", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncListBlobs.toKnownErr(e);
          });
        }
        listRepos(params, opts) {
          return this._service.xrpc.call("com.atproto.sync.listRepos", params, void 0, opts).catch((e) => {
            throw ComAtprotoSyncListRepos.toKnownErr(e);
          });
        }
        notifyOfUpdate(data, opts) {
          return this._service.xrpc.call("com.atproto.sync.notifyOfUpdate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoSyncNotifyOfUpdate.toKnownErr(e);
          });
        }
        requestCrawl(data, opts) {
          return this._service.xrpc.call("com.atproto.sync.requestCrawl", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoSyncRequestCrawl.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoSyncNS = ComAtprotoSyncNS;
      var ComAtprotoTempNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        checkSignupQueue(params, opts) {
          return this._service.xrpc.call("com.atproto.temp.checkSignupQueue", params, void 0, opts).catch((e) => {
            throw ComAtprotoTempCheckSignupQueue.toKnownErr(e);
          });
        }
        fetchLabels(params, opts) {
          return this._service.xrpc.call("com.atproto.temp.fetchLabels", params, void 0, opts).catch((e) => {
            throw ComAtprotoTempFetchLabels.toKnownErr(e);
          });
        }
        requestPhoneVerification(data, opts) {
          return this._service.xrpc.call("com.atproto.temp.requestPhoneVerification", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ComAtprotoTempRequestPhoneVerification.toKnownErr(e);
          });
        }
      };
      exports.ComAtprotoTempNS = ComAtprotoTempNS;
      var AppNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "bsky", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.bsky = new AppBskyNS(service);
        }
      };
      exports.AppNS = AppNS;
      var AppBskyNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "embed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "feed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "labeler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "notification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "richtext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "unspecced", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.actor = new AppBskyActorNS(service);
          this.embed = new AppBskyEmbedNS(service);
          this.feed = new AppBskyFeedNS(service);
          this.graph = new AppBskyGraphNS(service);
          this.labeler = new AppBskyLabelerNS(service);
          this.notification = new AppBskyNotificationNS(service);
          this.richtext = new AppBskyRichtextNS(service);
          this.unspecced = new AppBskyUnspeccedNS(service);
        }
      };
      exports.AppBskyNS = AppBskyNS;
      var AppBskyActorNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "profile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.profile = new ProfileRecord(service);
        }
        getPreferences(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.getPreferences", params, void 0, opts).catch((e) => {
            throw AppBskyActorGetPreferences.toKnownErr(e);
          });
        }
        getProfile(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.getProfile", params, void 0, opts).catch((e) => {
            throw AppBskyActorGetProfile.toKnownErr(e);
          });
        }
        getProfiles(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.getProfiles", params, void 0, opts).catch((e) => {
            throw AppBskyActorGetProfiles.toKnownErr(e);
          });
        }
        getSuggestions(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.getSuggestions", params, void 0, opts).catch((e) => {
            throw AppBskyActorGetSuggestions.toKnownErr(e);
          });
        }
        putPreferences(data, opts) {
          return this._service.xrpc.call("app.bsky.actor.putPreferences", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyActorPutPreferences.toKnownErr(e);
          });
        }
        searchActors(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.searchActors", params, void 0, opts).catch((e) => {
            throw AppBskyActorSearchActors.toKnownErr(e);
          });
        }
        searchActorsTypeahead(params, opts) {
          return this._service.xrpc.call("app.bsky.actor.searchActorsTypeahead", params, void 0, opts).catch((e) => {
            throw AppBskyActorSearchActorsTypeahead.toKnownErr(e);
          });
        }
      };
      exports.AppBskyActorNS = AppBskyActorNS;
      var ProfileRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.actor.profile"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.actor.profile"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.actor.profile";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.actor.profile", rkey: "self" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.actor.profile" }, params), { headers });
          });
        }
      };
      exports.ProfileRecord = ProfileRecord;
      var AppBskyEmbedNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
      };
      exports.AppBskyEmbedNS = AppBskyEmbedNS;
      var AppBskyFeedNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "generator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "like", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "repost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "threadgate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.generator = new GeneratorRecord(service);
          this.like = new LikeRecord(service);
          this.post = new PostRecord(service);
          this.repost = new RepostRecord(service);
          this.threadgate = new ThreadgateRecord(service);
        }
        describeFeedGenerator(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.describeFeedGenerator", params, void 0, opts).catch((e) => {
            throw AppBskyFeedDescribeFeedGenerator.toKnownErr(e);
          });
        }
        getActorFeeds(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getActorFeeds", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetActorFeeds.toKnownErr(e);
          });
        }
        getActorLikes(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getActorLikes", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetActorLikes.toKnownErr(e);
          });
        }
        getAuthorFeed(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getAuthorFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetAuthorFeed.toKnownErr(e);
          });
        }
        getFeed(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeed.toKnownErr(e);
          });
        }
        getFeedGenerator(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedGenerator", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeedGenerator.toKnownErr(e);
          });
        }
        getFeedGenerators(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedGenerators", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeedGenerators.toKnownErr(e);
          });
        }
        getFeedSkeleton(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getFeedSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetFeedSkeleton.toKnownErr(e);
          });
        }
        getLikes(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getLikes", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetLikes.toKnownErr(e);
          });
        }
        getListFeed(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getListFeed", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetListFeed.toKnownErr(e);
          });
        }
        getPostThread(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getPostThread", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetPostThread.toKnownErr(e);
          });
        }
        getPosts(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getPosts", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetPosts.toKnownErr(e);
          });
        }
        getRepostedBy(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getRepostedBy", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetRepostedBy.toKnownErr(e);
          });
        }
        getSuggestedFeeds(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getSuggestedFeeds", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetSuggestedFeeds.toKnownErr(e);
          });
        }
        getTimeline(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.getTimeline", params, void 0, opts).catch((e) => {
            throw AppBskyFeedGetTimeline.toKnownErr(e);
          });
        }
        searchPosts(params, opts) {
          return this._service.xrpc.call("app.bsky.feed.searchPosts", params, void 0, opts).catch((e) => {
            throw AppBskyFeedSearchPosts.toKnownErr(e);
          });
        }
      };
      exports.AppBskyFeedNS = AppBskyFeedNS;
      var GeneratorRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.generator"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.generator"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.generator";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.generator" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.generator" }, params), { headers });
          });
        }
      };
      exports.GeneratorRecord = GeneratorRecord;
      var LikeRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.like"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.like"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.like";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.like" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.like" }, params), { headers });
          });
        }
      };
      exports.LikeRecord = LikeRecord;
      var PostRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.post"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.post"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.post";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.post" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.post" }, params), { headers });
          });
        }
      };
      exports.PostRecord = PostRecord;
      var RepostRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.repost"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.repost"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.repost";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.repost" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.repost" }, params), { headers });
          });
        }
      };
      exports.RepostRecord = RepostRecord;
      var ThreadgateRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.feed.threadgate"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.feed.threadgate"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.feed.threadgate";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.feed.threadgate" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.feed.threadgate" }, params), { headers });
          });
        }
      };
      exports.ThreadgateRecord = ThreadgateRecord;
      var AppBskyGraphNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "block", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "follow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "list", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "listblock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "listitem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.block = new BlockRecord(service);
          this.follow = new FollowRecord(service);
          this.list = new ListRecord(service);
          this.listblock = new ListblockRecord(service);
          this.listitem = new ListitemRecord(service);
        }
        getBlocks(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getBlocks", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetBlocks.toKnownErr(e);
          });
        }
        getFollowers(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getFollowers", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetFollowers.toKnownErr(e);
          });
        }
        getFollows(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getFollows", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetFollows.toKnownErr(e);
          });
        }
        getList(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getList", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetList.toKnownErr(e);
          });
        }
        getListBlocks(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getListBlocks", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetListBlocks.toKnownErr(e);
          });
        }
        getListMutes(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getListMutes", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetListMutes.toKnownErr(e);
          });
        }
        getLists(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getLists", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetLists.toKnownErr(e);
          });
        }
        getMutes(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getMutes", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetMutes.toKnownErr(e);
          });
        }
        getRelationships(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getRelationships", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetRelationships.toKnownErr(e);
          });
        }
        getSuggestedFollowsByActor(params, opts) {
          return this._service.xrpc.call("app.bsky.graph.getSuggestedFollowsByActor", params, void 0, opts).catch((e) => {
            throw AppBskyGraphGetSuggestedFollowsByActor.toKnownErr(e);
          });
        }
        muteActor(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.muteActor", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyGraphMuteActor.toKnownErr(e);
          });
        }
        muteActorList(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.muteActorList", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyGraphMuteActorList.toKnownErr(e);
          });
        }
        unmuteActor(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.unmuteActor", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyGraphUnmuteActor.toKnownErr(e);
          });
        }
        unmuteActorList(data, opts) {
          return this._service.xrpc.call("app.bsky.graph.unmuteActorList", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyGraphUnmuteActorList.toKnownErr(e);
          });
        }
      };
      exports.AppBskyGraphNS = AppBskyGraphNS;
      var BlockRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.block"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.block"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.block";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.block" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.block" }, params), { headers });
          });
        }
      };
      exports.BlockRecord = BlockRecord;
      var FollowRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.follow"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.follow"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.follow";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.follow" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.follow" }, params), { headers });
          });
        }
      };
      exports.FollowRecord = FollowRecord;
      var ListRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.list"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.list"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.list";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.list" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.list" }, params), { headers });
          });
        }
      };
      exports.ListRecord = ListRecord;
      var ListblockRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.listblock"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.listblock"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.listblock";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.listblock" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.listblock" }, params), { headers });
          });
        }
      };
      exports.ListblockRecord = ListblockRecord;
      var ListitemRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.graph.listitem"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.graph.listitem"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.graph.listitem";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({ collection: "app.bsky.graph.listitem" }, params), { record }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.graph.listitem" }, params), { headers });
          });
        }
      };
      exports.ListitemRecord = ListitemRecord;
      var AppBskyLabelerNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.service = new ServiceRecord(service);
        }
        getServices(params, opts) {
          return this._service.xrpc.call("app.bsky.labeler.getServices", params, void 0, opts).catch((e) => {
            throw AppBskyLabelerGetServices.toKnownErr(e);
          });
        }
      };
      exports.AppBskyLabelerNS = AppBskyLabelerNS;
      var ServiceRecord = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        list(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.listRecords", __spreadValues({
              collection: "app.bsky.labeler.service"
            }, params));
            return res.data;
          });
        }
        get(params) {
          return __async(this, null, function* () {
            const res = yield this._service.xrpc.call("com.atproto.repo.getRecord", __spreadValues({
              collection: "app.bsky.labeler.service"
            }, params));
            return res.data;
          });
        }
        create(params, record, headers) {
          return __async(this, null, function* () {
            record.$type = "app.bsky.labeler.service";
            const res = yield this._service.xrpc.call("com.atproto.repo.createRecord", void 0, __spreadProps(__spreadValues({
              collection: "app.bsky.labeler.service",
              rkey: "self"
            }, params), {
              record
            }), { encoding: "application/json", headers });
            return res.data;
          });
        }
        delete(params, headers) {
          return __async(this, null, function* () {
            yield this._service.xrpc.call("com.atproto.repo.deleteRecord", void 0, __spreadValues({ collection: "app.bsky.labeler.service" }, params), { headers });
          });
        }
      };
      exports.ServiceRecord = ServiceRecord;
      var AppBskyNotificationNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        getUnreadCount(params, opts) {
          return this._service.xrpc.call("app.bsky.notification.getUnreadCount", params, void 0, opts).catch((e) => {
            throw AppBskyNotificationGetUnreadCount.toKnownErr(e);
          });
        }
        listNotifications(params, opts) {
          return this._service.xrpc.call("app.bsky.notification.listNotifications", params, void 0, opts).catch((e) => {
            throw AppBskyNotificationListNotifications.toKnownErr(e);
          });
        }
        registerPush(data, opts) {
          return this._service.xrpc.call("app.bsky.notification.registerPush", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyNotificationRegisterPush.toKnownErr(e);
          });
        }
        updateSeen(data, opts) {
          return this._service.xrpc.call("app.bsky.notification.updateSeen", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw AppBskyNotificationUpdateSeen.toKnownErr(e);
          });
        }
      };
      exports.AppBskyNotificationNS = AppBskyNotificationNS;
      var AppBskyRichtextNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
      };
      exports.AppBskyRichtextNS = AppBskyRichtextNS;
      var AppBskyUnspeccedNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        getPopularFeedGenerators(params, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.getPopularFeedGenerators", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedGetPopularFeedGenerators.toKnownErr(e);
          });
        }
        getTaggedSuggestions(params, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.getTaggedSuggestions", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedGetTaggedSuggestions.toKnownErr(e);
          });
        }
        searchActorsSkeleton(params, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.searchActorsSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e);
          });
        }
        searchPostsSkeleton(params, opts) {
          return this._service.xrpc.call("app.bsky.unspecced.searchPostsSkeleton", params, void 0, opts).catch((e) => {
            throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e);
          });
        }
      };
      exports.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
      var ToolsNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "ozone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.ozone = new ToolsOzoneNS(service);
        }
      };
      exports.ToolsNS = ToolsNS;
      var ToolsOzoneNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "communication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
          this.communication = new ToolsOzoneCommunicationNS(service);
          this.moderation = new ToolsOzoneModerationNS(service);
        }
      };
      exports.ToolsOzoneNS = ToolsOzoneNS;
      var ToolsOzoneCommunicationNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        createTemplate(data, opts) {
          return this._service.xrpc.call("tools.ozone.communication.createTemplate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e);
          });
        }
        deleteTemplate(data, opts) {
          return this._service.xrpc.call("tools.ozone.communication.deleteTemplate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ToolsOzoneCommunicationDeleteTemplate.toKnownErr(e);
          });
        }
        listTemplates(params, opts) {
          return this._service.xrpc.call("tools.ozone.communication.listTemplates", params, void 0, opts).catch((e) => {
            throw ToolsOzoneCommunicationListTemplates.toKnownErr(e);
          });
        }
        updateTemplate(data, opts) {
          return this._service.xrpc.call("tools.ozone.communication.updateTemplate", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e);
          });
        }
      };
      exports.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
      var ToolsOzoneModerationNS = class {
        constructor(service) {
          Object.defineProperty(this, "_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this._service = service;
        }
        emitEvent(data, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.emitEvent", opts == null ? void 0 : opts.qp, data, opts).catch((e) => {
            throw ToolsOzoneModerationEmitEvent.toKnownErr(e);
          });
        }
        getEvent(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.getEvent", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationGetEvent.toKnownErr(e);
          });
        }
        getRecord(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.getRecord", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationGetRecord.toKnownErr(e);
          });
        }
        getRepo(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.getRepo", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationGetRepo.toKnownErr(e);
          });
        }
        queryEvents(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.queryEvents", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationQueryEvents.toKnownErr(e);
          });
        }
        queryStatuses(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.queryStatuses", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationQueryStatuses.toKnownErr(e);
          });
        }
        searchRepos(params, opts) {
          return this._service.xrpc.call("tools.ozone.moderation.searchRepos", params, void 0, opts).catch((e) => {
            throw ToolsOzoneModerationSearchRepos.toKnownErr(e);
          });
        }
      };
      exports.ToolsOzoneModerationNS = ToolsOzoneModerationNS;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/agent.js
  var require_agent = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/agent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AtpAgent = void 0;
      var xrpc_1 = require_dist5();
      var xrpc_2 = require_dist5();
      var common_web_1 = require_dist2();
      var client_1 = require_client3();
      var const_1 = require_const();
      var MAX_LABELERS = 10;
      var REFRESH_SESSION = "com.atproto.server.refreshSession";
      var AtpAgent = class _AtpAgent {
        get com() {
          return this.api.com;
        }
        /**
         * Configures the API globally.
         */
        static configure(opts) {
          if (opts.fetch) {
            _AtpAgent.fetch = opts.fetch;
          }
          if (opts.appLabelers) {
            _AtpAgent.appLabelers = opts.appLabelers;
          }
        }
        constructor(opts) {
          Object.defineProperty(this, "service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "api", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "session", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "labelersHeader", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "proxyHeader", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "pdsUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_baseClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_persistSession", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_refreshSessionPromise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "uploadBlob", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts2) => this.api.com.atproto.repo.uploadBlob(data, opts2)
          });
          Object.defineProperty(this, "resolveHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts2) => this.api.com.atproto.identity.resolveHandle(params, opts2)
          });
          Object.defineProperty(this, "updateHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts2) => this.api.com.atproto.identity.updateHandle(data, opts2)
          });
          Object.defineProperty(this, "createModerationReport", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts2) => this.api.com.atproto.moderation.createReport(data, opts2)
          });
          this.service = opts.service instanceof URL ? opts.service : new URL(opts.service);
          this._persistSession = opts.persistSession;
          this._baseClient = new client_1.AtpBaseClient();
          this._baseClient.xrpc.fetch = this._fetch.bind(this);
          this.api = this._baseClient.service(opts.service);
        }
        clone() {
          const inst = new _AtpAgent({
            service: this.service
          });
          this.copyInto(inst);
          return inst;
        }
        copyInto(inst) {
          inst.session = this.session;
          inst.labelersHeader = this.labelersHeader;
          inst.proxyHeader = this.proxyHeader;
          inst.pdsUrl = this.pdsUrl;
          inst.api.xrpc.uri = this.pdsUrl || this.service;
        }
        withProxy(serviceType, did) {
          const inst = this.clone();
          inst.configureProxyHeader(serviceType, did);
          return inst;
        }
        /**
         * Is there any active session?
         */
        get hasSession() {
          return !!this.session;
        }
        /**
         * Sets the "Persist Session" method which can be used to store access tokens
         * as they change.
         */
        setPersistSessionHandler(handler) {
          this._persistSession = handler;
        }
        /**
         * Configures the moderation services to be applied on requests.
         * NOTE: this is called automatically by getPreferences() and the relevant moderation config
         * methods in BskyAgent instances.
         */
        configureLabelersHeader(labelerDids) {
          this.labelersHeader = labelerDids;
        }
        /**
         * Configures the atproto-proxy header to be applied on requests
         */
        configureProxyHeader(serviceType, did) {
          if (did.startsWith("did:")) {
            this.proxyHeader = `${did}#${serviceType}`;
          }
        }
        /**
         * Create a new account and hydrate its session in this agent.
         */
        createAccount(opts) {
          return __async(this, null, function* () {
            var _a3, _b;
            try {
              const res = yield this.api.com.atproto.server.createAccount(opts);
              this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: opts.email,
                emailConfirmed: false
              };
              this._updateApiEndpoint(res.data.didDoc);
              return res;
            } catch (e) {
              this.session = void 0;
              throw e;
            } finally {
              if (this.session) {
                (_a3 = this._persistSession) == null ? void 0 : _a3.call(this, "create", this.session);
              } else {
                (_b = this._persistSession) == null ? void 0 : _b.call(this, "create-failed", void 0);
              }
            }
          });
        }
        /**
         * Start a new session with this agent.
         */
        login(opts) {
          return __async(this, null, function* () {
            var _a3, _b;
            try {
              const res = yield this.api.com.atproto.server.createSession({
                identifier: opts.identifier,
                password: opts.password
              });
              this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: res.data.email,
                emailConfirmed: res.data.emailConfirmed
              };
              this._updateApiEndpoint(res.data.didDoc);
              return res;
            } catch (e) {
              this.session = void 0;
              throw e;
            } finally {
              if (this.session) {
                (_a3 = this._persistSession) == null ? void 0 : _a3.call(this, "create", this.session);
              } else {
                (_b = this._persistSession) == null ? void 0 : _b.call(this, "create-failed", void 0);
              }
            }
          });
        }
        /**
         * Resume a pre-existing session with this agent.
         */
        resumeSession(session) {
          return __async(this, null, function* () {
            var _a3, _b, _c, _d;
            try {
              this.session = session;
              const res = yield this.api.com.atproto.server.getSession();
              if (res.data.did !== this.session.did) {
                throw new xrpc_2.XRPCError(xrpc_2.ResponseType.InvalidRequest, "Invalid session", "InvalidDID");
              }
              this.session.email = res.data.email;
              this.session.handle = res.data.handle;
              this.session.emailConfirmed = res.data.emailConfirmed;
              this._updateApiEndpoint(res.data.didDoc);
              (_a3 = this._persistSession) == null ? void 0 : _a3.call(this, "update", this.session);
              return res;
            } catch (e) {
              this.session = void 0;
              if (e instanceof xrpc_2.XRPCError) {
                if ([1, 408, 425, 429, 500, 502, 503, 504, 522, 524].includes(e.status)) {
                  (_b = this._persistSession) == null ? void 0 : _b.call(this, "network-error", void 0);
                } else {
                  (_c = this._persistSession) == null ? void 0 : _c.call(this, "expired", void 0);
                }
              } else {
                (_d = this._persistSession) == null ? void 0 : _d.call(this, "network-error", void 0);
              }
              throw e;
            }
          });
        }
        /**
         * Internal helper to add authorization headers to requests.
         */
        _addHeaders(reqHeaders) {
          var _a3;
          if (!reqHeaders.authorization && ((_a3 = this.session) == null ? void 0 : _a3.accessJwt)) {
            reqHeaders = __spreadProps(__spreadValues({}, reqHeaders), {
              authorization: `Bearer ${this.session.accessJwt}`
            });
          }
          if (this.proxyHeader) {
            reqHeaders = __spreadProps(__spreadValues({}, reqHeaders), {
              "atproto-proxy": this.proxyHeader
            });
          }
          reqHeaders = __spreadProps(__spreadValues({}, reqHeaders), {
            "atproto-accept-labelers": _AtpAgent.appLabelers.map((str) => `${str};redact`).concat(this.labelersHeader.filter((str) => str.startsWith("did:"))).slice(0, MAX_LABELERS).join(", ")
          });
          return reqHeaders;
        }
        /**
         * Internal fetch handler which adds access-token management
         */
        _fetch(reqUri, reqMethod, reqHeaders, reqBody) {
          return __async(this, null, function* () {
            var _a3;
            if (!_AtpAgent.fetch) {
              throw new Error("AtpAgent fetch() method not configured");
            }
            yield this._refreshSessionPromise;
            let res = yield _AtpAgent.fetch(reqUri, reqMethod, this._addHeaders(reqHeaders), reqBody);
            if (isErrorResponse(res, ["ExpiredToken"]) && ((_a3 = this.session) == null ? void 0 : _a3.refreshJwt)) {
              yield this.refreshSession();
              res = yield _AtpAgent.fetch(reqUri, reqMethod, this._addHeaders(reqHeaders), reqBody);
            }
            return res;
          });
        }
        /**
         * Internal helper to refresh sessions
         * - Wraps the actual implementation in a promise-guard to ensure only
         *   one refresh is attempted at a time.
         */
        refreshSession() {
          return __async(this, null, function* () {
            if (this._refreshSessionPromise) {
              return this._refreshSessionPromise;
            }
            this._refreshSessionPromise = this._refreshSessionInner();
            try {
              yield this._refreshSessionPromise;
            } finally {
              this._refreshSessionPromise = void 0;
            }
          });
        }
        /**
         * Internal helper to refresh sessions (actual behavior)
         */
        _refreshSessionInner() {
          return __async(this, null, function* () {
            var _a3, _b, _c;
            if (!_AtpAgent.fetch) {
              throw new Error("AtpAgent fetch() method not configured");
            }
            if (!((_a3 = this.session) == null ? void 0 : _a3.refreshJwt)) {
              return;
            }
            const url = new URL((this.pdsUrl || this.service).origin);
            url.pathname = `/xrpc/${REFRESH_SESSION}`;
            const res = yield _AtpAgent.fetch(url.toString(), "POST", {
              authorization: `Bearer ${this.session.refreshJwt}`
            }, void 0);
            if (isErrorResponse(res, ["ExpiredToken", "InvalidToken"])) {
              this.session = void 0;
              (_b = this._persistSession) == null ? void 0 : _b.call(this, "expired", void 0);
            } else if (isNewSessionObject(this._baseClient, res.body)) {
              this.session = __spreadProps(__spreadValues({}, this.session || {}), {
                accessJwt: res.body.accessJwt,
                refreshJwt: res.body.refreshJwt,
                handle: res.body.handle,
                did: res.body.did
              });
              this._updateApiEndpoint(res.body.didDoc);
              (_c = this._persistSession) == null ? void 0 : _c.call(this, "update", this.session);
            }
          });
        }
        /**
         * Helper to update the pds endpoint dynamically.
         *
         * The session methods (create, resume, refresh) may respond with the user's
         * did document which contains the user's canonical PDS endpoint. That endpoint
         * may differ from the endpoint used to contact the server. We capture that
         * PDS endpoint and update the client to use that given endpoint for future
         * requests. (This helps ensure smooth migrations between PDSes, especially
         * when the PDSes are operated by a single org.)
         */
        _updateApiEndpoint(didDoc) {
          if ((0, common_web_1.isValidDidDoc)(didDoc)) {
            const endpoint = (0, common_web_1.getPdsEndpoint)(didDoc);
            this.pdsUrl = endpoint ? new URL(endpoint) : void 0;
          }
          this.api.xrpc.uri = this.pdsUrl || this.service;
        }
      };
      exports.AtpAgent = AtpAgent;
      Object.defineProperty(AtpAgent, "fetch", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: xrpc_2.defaultFetchHandler
      });
      Object.defineProperty(AtpAgent, "appLabelers", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: [const_1.BSKY_LABELER_DID]
      });
      function isErrorObject(v) {
        return xrpc_1.errorResponseBody.safeParse(v).success;
      }
      function isErrorResponse(res, errorNames) {
        if (res.status !== 400) {
          return false;
        }
        if (!isErrorObject(res.body)) {
          return false;
        }
        return typeof res.body.error === "string" && errorNames.includes(res.body.error);
      }
      function isNewSessionObject(client, v) {
        try {
          client.xrpc.lex.assertValidXrpcOutput("com.atproto.server.refreshSession", v);
          return true;
        } catch (e) {
          return false;
        }
      }
    }
  });

  // coldsky/node_modules/@atproto/api/dist/rich-text/unicode.js
  var require_unicode = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/rich-text/unicode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnicodeString = void 0;
      var common_web_1 = require_dist2();
      var encoder = new TextEncoder();
      var decoder2 = new TextDecoder();
      var UnicodeString = class {
        constructor(utf16) {
          Object.defineProperty(this, "utf16", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "utf8", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "_graphemeLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.utf16 = utf16;
          this.utf8 = encoder.encode(utf16);
        }
        get length() {
          return this.utf8.byteLength;
        }
        get graphemeLength() {
          if (!this._graphemeLen) {
            this._graphemeLen = (0, common_web_1.graphemeLen)(this.utf16);
          }
          return this._graphemeLen;
        }
        slice(start, end) {
          return decoder2.decode(this.utf8.slice(start, end));
        }
        utf16IndexToUtf8Index(i) {
          return encoder.encode(this.utf16.slice(0, i)).byteLength;
        }
        toString() {
          return this.utf16;
        }
      };
      exports.UnicodeString = UnicodeString;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/rich-text/sanitization.js
  var require_sanitization = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/rich-text/sanitization.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sanitizeRichText = void 0;
      var unicode_1 = require_unicode();
      var EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
      var REPLACEMENT_STR = "\n\n";
      function sanitizeRichText(richText, opts) {
        if (opts.cleanNewlines) {
          richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
        }
        return richText;
      }
      exports.sanitizeRichText = sanitizeRichText;
      function clean(richText, targetRegexp, replacementString) {
        richText = richText.clone();
        let match2 = richText.unicodeText.utf16.match(targetRegexp);
        while (match2 && typeof match2.index !== "undefined") {
          const oldText = richText.unicodeText;
          const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match2.index);
          const removeEndIndex = removeStartIndex + new unicode_1.UnicodeString(match2[0]).length;
          richText.delete(removeStartIndex, removeEndIndex);
          if (richText.unicodeText.utf16 === oldText.utf16) {
            break;
          }
          richText.insert(removeStartIndex, replacementString);
          match2 = richText.unicodeText.utf16.match(targetRegexp);
        }
        return richText;
      }
    }
  });

  // coldsky/node_modules/tlds/index.json
  var require_tlds = __commonJS({
    "coldsky/node_modules/tlds/index.json"(exports, module) {
      module.exports = [
        "aaa",
        "aarp",
        "abb",
        "abbott",
        "abbvie",
        "abc",
        "able",
        "abogado",
        "abudhabi",
        "ac",
        "academy",
        "accenture",
        "accountant",
        "accountants",
        "aco",
        "actor",
        "ad",
        "ads",
        "adult",
        "ae",
        "aeg",
        "aero",
        "aetna",
        "af",
        "afl",
        "africa",
        "ag",
        "agakhan",
        "agency",
        "ai",
        "aig",
        "airbus",
        "airforce",
        "airtel",
        "akdn",
        "al",
        "alibaba",
        "alipay",
        "allfinanz",
        "allstate",
        "ally",
        "alsace",
        "alstom",
        "am",
        "amazon",
        "americanexpress",
        "americanfamily",
        "amex",
        "amfam",
        "amica",
        "amsterdam",
        "analytics",
        "android",
        "anquan",
        "anz",
        "ao",
        "aol",
        "apartments",
        "app",
        "apple",
        "aq",
        "aquarelle",
        "ar",
        "arab",
        "aramco",
        "archi",
        "army",
        "arpa",
        "art",
        "arte",
        "as",
        "asda",
        "asia",
        "associates",
        "at",
        "athleta",
        "attorney",
        "au",
        "auction",
        "audi",
        "audible",
        "audio",
        "auspost",
        "author",
        "auto",
        "autos",
        "aw",
        "aws",
        "ax",
        "axa",
        "az",
        "azure",
        "ba",
        "baby",
        "baidu",
        "banamex",
        "band",
        "bank",
        "bar",
        "barcelona",
        "barclaycard",
        "barclays",
        "barefoot",
        "bargains",
        "baseball",
        "basketball",
        "bauhaus",
        "bayern",
        "bb",
        "bbc",
        "bbt",
        "bbva",
        "bcg",
        "bcn",
        "bd",
        "be",
        "beats",
        "beauty",
        "beer",
        "bentley",
        "berlin",
        "best",
        "bestbuy",
        "bet",
        "bf",
        "bg",
        "bh",
        "bharti",
        "bi",
        "bible",
        "bid",
        "bike",
        "bing",
        "bingo",
        "bio",
        "biz",
        "bj",
        "black",
        "blackfriday",
        "blockbuster",
        "blog",
        "bloomberg",
        "blue",
        "bm",
        "bms",
        "bmw",
        "bn",
        "bnpparibas",
        "bo",
        "boats",
        "boehringer",
        "bofa",
        "bom",
        "bond",
        "boo",
        "book",
        "booking",
        "bosch",
        "bostik",
        "boston",
        "bot",
        "boutique",
        "box",
        "br",
        "bradesco",
        "bridgestone",
        "broadway",
        "broker",
        "brother",
        "brussels",
        "bs",
        "bt",
        "build",
        "builders",
        "business",
        "buy",
        "buzz",
        "bv",
        "bw",
        "by",
        "bz",
        "bzh",
        "ca",
        "cab",
        "cafe",
        "cal",
        "call",
        "calvinklein",
        "cam",
        "camera",
        "camp",
        "canon",
        "capetown",
        "capital",
        "capitalone",
        "car",
        "caravan",
        "cards",
        "care",
        "career",
        "careers",
        "cars",
        "casa",
        "case",
        "cash",
        "casino",
        "cat",
        "catering",
        "catholic",
        "cba",
        "cbn",
        "cbre",
        "cc",
        "cd",
        "center",
        "ceo",
        "cern",
        "cf",
        "cfa",
        "cfd",
        "cg",
        "ch",
        "chanel",
        "channel",
        "charity",
        "chase",
        "chat",
        "cheap",
        "chintai",
        "christmas",
        "chrome",
        "church",
        "ci",
        "cipriani",
        "circle",
        "cisco",
        "citadel",
        "citi",
        "citic",
        "city",
        "ck",
        "cl",
        "claims",
        "cleaning",
        "click",
        "clinic",
        "clinique",
        "clothing",
        "cloud",
        "club",
        "clubmed",
        "cm",
        "cn",
        "co",
        "coach",
        "codes",
        "coffee",
        "college",
        "cologne",
        "com",
        "commbank",
        "community",
        "company",
        "compare",
        "computer",
        "comsec",
        "condos",
        "construction",
        "consulting",
        "contact",
        "contractors",
        "cooking",
        "cool",
        "coop",
        "corsica",
        "country",
        "coupon",
        "coupons",
        "courses",
        "cpa",
        "cr",
        "credit",
        "creditcard",
        "creditunion",
        "cricket",
        "crown",
        "crs",
        "cruise",
        "cruises",
        "cu",
        "cuisinella",
        "cv",
        "cw",
        "cx",
        "cy",
        "cymru",
        "cyou",
        "cz",
        "dabur",
        "dad",
        "dance",
        "data",
        "date",
        "dating",
        "datsun",
        "day",
        "dclk",
        "dds",
        "de",
        "deal",
        "dealer",
        "deals",
        "degree",
        "delivery",
        "dell",
        "deloitte",
        "delta",
        "democrat",
        "dental",
        "dentist",
        "desi",
        "design",
        "dev",
        "dhl",
        "diamonds",
        "diet",
        "digital",
        "direct",
        "directory",
        "discount",
        "discover",
        "dish",
        "diy",
        "dj",
        "dk",
        "dm",
        "dnp",
        "do",
        "docs",
        "doctor",
        "dog",
        "domains",
        "dot",
        "download",
        "drive",
        "dtv",
        "dubai",
        "dunlop",
        "dupont",
        "durban",
        "dvag",
        "dvr",
        "dz",
        "earth",
        "eat",
        "ec",
        "eco",
        "edeka",
        "edu",
        "education",
        "ee",
        "eg",
        "email",
        "emerck",
        "energy",
        "engineer",
        "engineering",
        "enterprises",
        "epson",
        "equipment",
        "er",
        "ericsson",
        "erni",
        "es",
        "esq",
        "estate",
        "et",
        "eu",
        "eurovision",
        "eus",
        "events",
        "exchange",
        "expert",
        "exposed",
        "express",
        "extraspace",
        "fage",
        "fail",
        "fairwinds",
        "faith",
        "family",
        "fan",
        "fans",
        "farm",
        "farmers",
        "fashion",
        "fast",
        "fedex",
        "feedback",
        "ferrari",
        "ferrero",
        "fi",
        "fidelity",
        "fido",
        "film",
        "final",
        "finance",
        "financial",
        "fire",
        "firestone",
        "firmdale",
        "fish",
        "fishing",
        "fit",
        "fitness",
        "fj",
        "fk",
        "flickr",
        "flights",
        "flir",
        "florist",
        "flowers",
        "fly",
        "fm",
        "fo",
        "foo",
        "food",
        "football",
        "ford",
        "forex",
        "forsale",
        "forum",
        "foundation",
        "fox",
        "fr",
        "free",
        "fresenius",
        "frl",
        "frogans",
        "frontier",
        "ftr",
        "fujitsu",
        "fun",
        "fund",
        "furniture",
        "futbol",
        "fyi",
        "ga",
        "gal",
        "gallery",
        "gallo",
        "gallup",
        "game",
        "games",
        "gap",
        "garden",
        "gay",
        "gb",
        "gbiz",
        "gd",
        "gdn",
        "ge",
        "gea",
        "gent",
        "genting",
        "george",
        "gf",
        "gg",
        "ggee",
        "gh",
        "gi",
        "gift",
        "gifts",
        "gives",
        "giving",
        "gl",
        "glass",
        "gle",
        "global",
        "globo",
        "gm",
        "gmail",
        "gmbh",
        "gmo",
        "gmx",
        "gn",
        "godaddy",
        "gold",
        "goldpoint",
        "golf",
        "goo",
        "goodyear",
        "goog",
        "google",
        "gop",
        "got",
        "gov",
        "gp",
        "gq",
        "gr",
        "grainger",
        "graphics",
        "gratis",
        "green",
        "gripe",
        "grocery",
        "group",
        "gs",
        "gt",
        "gu",
        "gucci",
        "guge",
        "guide",
        "guitars",
        "guru",
        "gw",
        "gy",
        "hair",
        "hamburg",
        "hangout",
        "haus",
        "hbo",
        "hdfc",
        "hdfcbank",
        "health",
        "healthcare",
        "help",
        "helsinki",
        "here",
        "hermes",
        "hiphop",
        "hisamitsu",
        "hitachi",
        "hiv",
        "hk",
        "hkt",
        "hm",
        "hn",
        "hockey",
        "holdings",
        "holiday",
        "homedepot",
        "homegoods",
        "homes",
        "homesense",
        "honda",
        "horse",
        "hospital",
        "host",
        "hosting",
        "hot",
        "hotels",
        "hotmail",
        "house",
        "how",
        "hr",
        "hsbc",
        "ht",
        "hu",
        "hughes",
        "hyatt",
        "hyundai",
        "ibm",
        "icbc",
        "ice",
        "icu",
        "id",
        "ie",
        "ieee",
        "ifm",
        "ikano",
        "il",
        "im",
        "imamat",
        "imdb",
        "immo",
        "immobilien",
        "in",
        "inc",
        "industries",
        "infiniti",
        "info",
        "ing",
        "ink",
        "institute",
        "insurance",
        "insure",
        "int",
        "international",
        "intuit",
        "investments",
        "io",
        "ipiranga",
        "iq",
        "ir",
        "irish",
        "is",
        "ismaili",
        "ist",
        "istanbul",
        "it",
        "itau",
        "itv",
        "jaguar",
        "java",
        "jcb",
        "je",
        "jeep",
        "jetzt",
        "jewelry",
        "jio",
        "jll",
        "jm",
        "jmp",
        "jnj",
        "jo",
        "jobs",
        "joburg",
        "jot",
        "joy",
        "jp",
        "jpmorgan",
        "jprs",
        "juegos",
        "juniper",
        "kaufen",
        "kddi",
        "ke",
        "kerryhotels",
        "kerrylogistics",
        "kerryproperties",
        "kfh",
        "kg",
        "kh",
        "ki",
        "kia",
        "kids",
        "kim",
        "kindle",
        "kitchen",
        "kiwi",
        "km",
        "kn",
        "koeln",
        "komatsu",
        "kosher",
        "kp",
        "kpmg",
        "kpn",
        "kr",
        "krd",
        "kred",
        "kuokgroup",
        "kw",
        "ky",
        "kyoto",
        "kz",
        "la",
        "lacaixa",
        "lamborghini",
        "lamer",
        "lancaster",
        "land",
        "landrover",
        "lanxess",
        "lasalle",
        "lat",
        "latino",
        "latrobe",
        "law",
        "lawyer",
        "lb",
        "lc",
        "lds",
        "lease",
        "leclerc",
        "lefrak",
        "legal",
        "lego",
        "lexus",
        "lgbt",
        "li",
        "lidl",
        "life",
        "lifeinsurance",
        "lifestyle",
        "lighting",
        "like",
        "lilly",
        "limited",
        "limo",
        "lincoln",
        "link",
        "lipsy",
        "live",
        "living",
        "lk",
        "llc",
        "llp",
        "loan",
        "loans",
        "locker",
        "locus",
        "lol",
        "london",
        "lotte",
        "lotto",
        "love",
        "lpl",
        "lplfinancial",
        "lr",
        "ls",
        "lt",
        "ltd",
        "ltda",
        "lu",
        "lundbeck",
        "luxe",
        "luxury",
        "lv",
        "ly",
        "ma",
        "madrid",
        "maif",
        "maison",
        "makeup",
        "man",
        "management",
        "mango",
        "map",
        "market",
        "marketing",
        "markets",
        "marriott",
        "marshalls",
        "mattel",
        "mba",
        "mc",
        "mckinsey",
        "md",
        "me",
        "med",
        "media",
        "meet",
        "melbourne",
        "meme",
        "memorial",
        "men",
        "menu",
        "merckmsd",
        "mg",
        "mh",
        "miami",
        "microsoft",
        "mil",
        "mini",
        "mint",
        "mit",
        "mitsubishi",
        "mk",
        "ml",
        "mlb",
        "mls",
        "mm",
        "mma",
        "mn",
        "mo",
        "mobi",
        "mobile",
        "moda",
        "moe",
        "moi",
        "mom",
        "monash",
        "money",
        "monster",
        "mormon",
        "mortgage",
        "moscow",
        "moto",
        "motorcycles",
        "mov",
        "movie",
        "mp",
        "mq",
        "mr",
        "ms",
        "msd",
        "mt",
        "mtn",
        "mtr",
        "mu",
        "museum",
        "music",
        "mv",
        "mw",
        "mx",
        "my",
        "mz",
        "na",
        "nab",
        "nagoya",
        "name",
        "natura",
        "navy",
        "nba",
        "nc",
        "ne",
        "nec",
        "net",
        "netbank",
        "netflix",
        "network",
        "neustar",
        "new",
        "news",
        "next",
        "nextdirect",
        "nexus",
        "nf",
        "nfl",
        "ng",
        "ngo",
        "nhk",
        "ni",
        "nico",
        "nike",
        "nikon",
        "ninja",
        "nissan",
        "nissay",
        "nl",
        "no",
        "nokia",
        "norton",
        "now",
        "nowruz",
        "nowtv",
        "np",
        "nr",
        "nra",
        "nrw",
        "ntt",
        "nu",
        "nyc",
        "nz",
        "obi",
        "observer",
        "office",
        "okinawa",
        "olayan",
        "olayangroup",
        "ollo",
        "om",
        "omega",
        "one",
        "ong",
        "onl",
        "online",
        "ooo",
        "open",
        "oracle",
        "orange",
        "org",
        "organic",
        "origins",
        "osaka",
        "otsuka",
        "ott",
        "ovh",
        "pa",
        "page",
        "panasonic",
        "paris",
        "pars",
        "partners",
        "parts",
        "party",
        "pay",
        "pccw",
        "pe",
        "pet",
        "pf",
        "pfizer",
        "pg",
        "ph",
        "pharmacy",
        "phd",
        "philips",
        "phone",
        "photo",
        "photography",
        "photos",
        "physio",
        "pics",
        "pictet",
        "pictures",
        "pid",
        "pin",
        "ping",
        "pink",
        "pioneer",
        "pizza",
        "pk",
        "pl",
        "place",
        "play",
        "playstation",
        "plumbing",
        "plus",
        "pm",
        "pn",
        "pnc",
        "pohl",
        "poker",
        "politie",
        "porn",
        "post",
        "pr",
        "pramerica",
        "praxi",
        "press",
        "prime",
        "pro",
        "prod",
        "productions",
        "prof",
        "progressive",
        "promo",
        "properties",
        "property",
        "protection",
        "pru",
        "prudential",
        "ps",
        "pt",
        "pub",
        "pw",
        "pwc",
        "py",
        "qa",
        "qpon",
        "quebec",
        "quest",
        "racing",
        "radio",
        "re",
        "read",
        "realestate",
        "realtor",
        "realty",
        "recipes",
        "red",
        "redstone",
        "redumbrella",
        "rehab",
        "reise",
        "reisen",
        "reit",
        "reliance",
        "ren",
        "rent",
        "rentals",
        "repair",
        "report",
        "republican",
        "rest",
        "restaurant",
        "review",
        "reviews",
        "rexroth",
        "rich",
        "richardli",
        "ricoh",
        "ril",
        "rio",
        "rip",
        "ro",
        "rocks",
        "rodeo",
        "rogers",
        "room",
        "rs",
        "rsvp",
        "ru",
        "rugby",
        "ruhr",
        "run",
        "rw",
        "rwe",
        "ryukyu",
        "sa",
        "saarland",
        "safe",
        "safety",
        "sakura",
        "sale",
        "salon",
        "samsclub",
        "samsung",
        "sandvik",
        "sandvikcoromant",
        "sanofi",
        "sap",
        "sarl",
        "sas",
        "save",
        "saxo",
        "sb",
        "sbi",
        "sbs",
        "sc",
        "scb",
        "schaeffler",
        "schmidt",
        "scholarships",
        "school",
        "schule",
        "schwarz",
        "science",
        "scot",
        "sd",
        "se",
        "search",
        "seat",
        "secure",
        "security",
        "seek",
        "select",
        "sener",
        "services",
        "seven",
        "sew",
        "sex",
        "sexy",
        "sfr",
        "sg",
        "sh",
        "shangrila",
        "sharp",
        "shaw",
        "shell",
        "shia",
        "shiksha",
        "shoes",
        "shop",
        "shopping",
        "shouji",
        "show",
        "si",
        "silk",
        "sina",
        "singles",
        "site",
        "sj",
        "sk",
        "ski",
        "skin",
        "sky",
        "skype",
        "sl",
        "sling",
        "sm",
        "smart",
        "smile",
        "sn",
        "sncf",
        "so",
        "soccer",
        "social",
        "softbank",
        "software",
        "sohu",
        "solar",
        "solutions",
        "song",
        "sony",
        "soy",
        "spa",
        "space",
        "sport",
        "spot",
        "sr",
        "srl",
        "ss",
        "st",
        "stada",
        "staples",
        "star",
        "statebank",
        "statefarm",
        "stc",
        "stcgroup",
        "stockholm",
        "storage",
        "store",
        "stream",
        "studio",
        "study",
        "style",
        "su",
        "sucks",
        "supplies",
        "supply",
        "support",
        "surf",
        "surgery",
        "suzuki",
        "sv",
        "swatch",
        "swiss",
        "sx",
        "sy",
        "sydney",
        "systems",
        "sz",
        "tab",
        "taipei",
        "talk",
        "taobao",
        "target",
        "tatamotors",
        "tatar",
        "tattoo",
        "tax",
        "taxi",
        "tc",
        "tci",
        "td",
        "tdk",
        "team",
        "tech",
        "technology",
        "tel",
        "temasek",
        "tennis",
        "teva",
        "tf",
        "tg",
        "th",
        "thd",
        "theater",
        "theatre",
        "tiaa",
        "tickets",
        "tienda",
        "tips",
        "tires",
        "tirol",
        "tj",
        "tjmaxx",
        "tjx",
        "tk",
        "tkmaxx",
        "tl",
        "tm",
        "tmall",
        "tn",
        "to",
        "today",
        "tokyo",
        "tools",
        "top",
        "toray",
        "toshiba",
        "total",
        "tours",
        "town",
        "toyota",
        "toys",
        "tr",
        "trade",
        "trading",
        "training",
        "travel",
        "travelers",
        "travelersinsurance",
        "trust",
        "trv",
        "tt",
        "tube",
        "tui",
        "tunes",
        "tushu",
        "tv",
        "tvs",
        "tw",
        "tz",
        "ua",
        "ubank",
        "ubs",
        "ug",
        "uk",
        "unicom",
        "university",
        "uno",
        "uol",
        "ups",
        "us",
        "uy",
        "uz",
        "va",
        "vacations",
        "vana",
        "vanguard",
        "vc",
        "ve",
        "vegas",
        "ventures",
        "verisign",
        "verm\xF6gensberater",
        "verm\xF6gensberatung",
        "versicherung",
        "vet",
        "vg",
        "vi",
        "viajes",
        "video",
        "vig",
        "viking",
        "villas",
        "vin",
        "vip",
        "virgin",
        "visa",
        "vision",
        "viva",
        "vivo",
        "vlaanderen",
        "vn",
        "vodka",
        "volvo",
        "vote",
        "voting",
        "voto",
        "voyage",
        "vu",
        "wales",
        "walmart",
        "walter",
        "wang",
        "wanggou",
        "watch",
        "watches",
        "weather",
        "weatherchannel",
        "webcam",
        "weber",
        "website",
        "wed",
        "wedding",
        "weibo",
        "weir",
        "wf",
        "whoswho",
        "wien",
        "wiki",
        "williamhill",
        "win",
        "windows",
        "wine",
        "winners",
        "wme",
        "wolterskluwer",
        "woodside",
        "work",
        "works",
        "world",
        "wow",
        "ws",
        "wtc",
        "wtf",
        "xbox",
        "xerox",
        "xihuan",
        "xin",
        "xxx",
        "xyz",
        "yachts",
        "yahoo",
        "yamaxun",
        "yandex",
        "ye",
        "yodobashi",
        "yoga",
        "yokohama",
        "you",
        "youtube",
        "yt",
        "yun",
        "za",
        "zappos",
        "zara",
        "zero",
        "zip",
        "zm",
        "zone",
        "zuerich",
        "zw",
        "\u03B5\u03BB",
        "\u03B5\u03C5",
        "\u0431\u0433",
        "\u0431\u0435\u043B",
        "\u0434\u0435\u0442\u0438",
        "\u0435\u044E",
        "\u043A\u0430\u0442\u043E\u043B\u0438\u043A",
        "\u043A\u043E\u043C",
        "\u043C\u043A\u0434",
        "\u043C\u043E\u043D",
        "\u043C\u043E\u0441\u043A\u0432\u0430",
        "\u043E\u043D\u043B\u0430\u0439\u043D",
        "\u043E\u0440\u0433",
        "\u0440\u0443\u0441",
        "\u0440\u0444",
        "\u0441\u0430\u0439\u0442",
        "\u0441\u0440\u0431",
        "\u0443\u043A\u0440",
        "\u049B\u0430\u0437",
        "\u0570\u0561\u0575",
        "\u05D9\u05E9\u05E8\u05D0\u05DC",
        "\u05E7\u05D5\u05DD",
        "\u0627\u0628\u0648\u0638\u0628\u064A",
        "\u0627\u0631\u0627\u0645\u0643\u0648",
        "\u0627\u0644\u0627\u0631\u062F\u0646",
        "\u0627\u0644\u0628\u062D\u0631\u064A\u0646",
        "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
        "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
        "\u0627\u0644\u0639\u0644\u064A\u0627\u0646",
        "\u0627\u0644\u0645\u063A\u0631\u0628",
        "\u0627\u0645\u0627\u0631\u0627\u062A",
        "\u0627\u06CC\u0631\u0627\u0646",
        "\u0628\u0627\u0631\u062A",
        "\u0628\u0627\u0632\u0627\u0631",
        "\u0628\u064A\u062A\u0643",
        "\u0628\u06BE\u0627\u0631\u062A",
        "\u062A\u0648\u0646\u0633",
        "\u0633\u0648\u062F\u0627\u0646",
        "\u0633\u0648\u0631\u064A\u0629",
        "\u0634\u0628\u0643\u0629",
        "\u0639\u0631\u0627\u0642",
        "\u0639\u0631\u0628",
        "\u0639\u0645\u0627\u0646",
        "\u0641\u0644\u0633\u0637\u064A\u0646",
        "\u0642\u0637\u0631",
        "\u0643\u0627\u062B\u0648\u0644\u064A\u0643",
        "\u0643\u0648\u0645",
        "\u0645\u0635\u0631",
        "\u0645\u0644\u064A\u0633\u064A\u0627",
        "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627",
        "\u0645\u0648\u0642\u0639",
        "\u0647\u0645\u0631\u0627\u0647",
        "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
        "\u0680\u0627\u0631\u062A",
        "\u0915\u0949\u092E",
        "\u0928\u0947\u091F",
        "\u092D\u093E\u0930\u0924",
        "\u092D\u093E\u0930\u0924\u092E\u094D",
        "\u092D\u093E\u0930\u094B\u0924",
        "\u0938\u0902\u0917\u0920\u0928",
        "\u09AC\u09BE\u0982\u09B2\u09BE",
        "\u09AD\u09BE\u09B0\u09A4",
        "\u09AD\u09BE\u09F0\u09A4",
        "\u0A2D\u0A3E\u0A30\u0A24",
        "\u0AAD\u0ABE\u0AB0\u0AA4",
        "\u0B2D\u0B3E\u0B30\u0B24",
        "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE",
        "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
        "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD",
        "\u0C2D\u0C3E\u0C30\u0C24\u0C4D",
        "\u0CAD\u0CBE\u0CB0\u0CA4",
        "\u0D2D\u0D3E\u0D30\u0D24\u0D02",
        "\u0DBD\u0D82\u0D9A\u0DCF",
        "\u0E04\u0E2D\u0E21",
        "\u0E44\u0E17\u0E22",
        "\u0EA5\u0EB2\u0EA7",
        "\u10D2\u10D4",
        "\u307F\u3093\u306A",
        "\u30A2\u30DE\u30BE\u30F3",
        "\u30AF\u30E9\u30A6\u30C9",
        "\u30B0\u30FC\u30B0\u30EB",
        "\u30B3\u30E0",
        "\u30B9\u30C8\u30A2",
        "\u30BB\u30FC\u30EB",
        "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3",
        "\u30DD\u30A4\u30F3\u30C8",
        "\u4E16\u754C",
        "\u4E2D\u4FE1",
        "\u4E2D\u56FD",
        "\u4E2D\u570B",
        "\u4E2D\u6587\u7F51",
        "\u4E9A\u9A6C\u900A",
        "\u4F01\u4E1A",
        "\u4F5B\u5C71",
        "\u4FE1\u606F",
        "\u5065\u5EB7",
        "\u516B\u5366",
        "\u516C\u53F8",
        "\u516C\u76CA",
        "\u53F0\u6E7E",
        "\u53F0\u7063",
        "\u5546\u57CE",
        "\u5546\u5E97",
        "\u5546\u6807",
        "\u5609\u91CC",
        "\u5609\u91CC\u5927\u9152\u5E97",
        "\u5728\u7EBF",
        "\u5927\u62FF",
        "\u5929\u4E3B\u6559",
        "\u5A31\u4E50",
        "\u5BB6\u96FB",
        "\u5E7F\u4E1C",
        "\u5FAE\u535A",
        "\u6148\u5584",
        "\u6211\u7231\u4F60",
        "\u624B\u673A",
        "\u62DB\u8058",
        "\u653F\u52A1",
        "\u653F\u5E9C",
        "\u65B0\u52A0\u5761",
        "\u65B0\u95FB",
        "\u65F6\u5C1A",
        "\u66F8\u7C4D",
        "\u673A\u6784",
        "\u6DE1\u9A6C\u9521",
        "\u6E38\u620F",
        "\u6FB3\u9580",
        "\u70B9\u770B",
        "\u79FB\u52A8",
        "\u7EC4\u7EC7\u673A\u6784",
        "\u7F51\u5740",
        "\u7F51\u5E97",
        "\u7F51\u7AD9",
        "\u7F51\u7EDC",
        "\u8054\u901A",
        "\u8C37\u6B4C",
        "\u8D2D\u7269",
        "\u901A\u8CA9",
        "\u96C6\u56E2",
        "\u96FB\u8A0A\u76C8\u79D1",
        "\u98DE\u5229\u6D66",
        "\u98DF\u54C1",
        "\u9910\u5385",
        "\u9999\u683C\u91CC\u62C9",
        "\u9999\u6E2F",
        "\uB2F7\uB137",
        "\uB2F7\uCEF4",
        "\uC0BC\uC131",
        "\uD55C\uAD6D"
      ];
    }
  });

  // coldsky/node_modules/@atproto/api/dist/rich-text/util.js
  var require_util7 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/rich-text/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TAG_REGEX = exports.TRAILING_PUNCTUATION_REGEX = exports.URL_REGEX = exports.MENTION_REGEX = void 0;
      exports.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
      exports.URL_REGEX = new RegExp("(^|\\s|\\()((https?:\\/\\/[\\S]+)|((?<domain>[a-z][a-z0-9]*(\\.[a-z0-9]+)+)[\\S]*))", "gim");
      exports.TRAILING_PUNCTUATION_REGEX = new RegExp("\\p{P}+$", "gu");
      exports.TAG_REGEX = /(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/rich-text/detection.js
  var require_detection = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/rich-text/detection.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.detectFacets = void 0;
      var tlds_1 = __importDefault(require_tlds());
      var util_1 = require_util7();
      function detectFacets(text) {
        var _a3;
        let match2;
        const facets = [];
        {
          const re = util_1.MENTION_REGEX;
          while (match2 = re.exec(text.utf16)) {
            if (!isValidDomain(match2[3]) && !match2[3].endsWith(".test")) {
              continue;
            }
            const start = text.utf16.indexOf(match2[3], match2.index) - 1;
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(start),
                byteEnd: text.utf16IndexToUtf8Index(start + match2[3].length + 1)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#mention",
                  did: match2[3]
                  // must be resolved afterwards
                }
              ]
            });
          }
        }
        {
          const re = util_1.URL_REGEX;
          while (match2 = re.exec(text.utf16)) {
            let uri = match2[2];
            if (!uri.startsWith("http")) {
              const domain = (_a3 = match2.groups) == null ? void 0 : _a3.domain;
              if (!domain || !isValidDomain(domain)) {
                continue;
              }
              uri = `https://${uri}`;
            }
            const start = text.utf16.indexOf(match2[2], match2.index);
            const index = { start, end: start + match2[2].length };
            if (/[.,;:!?]$/.test(uri)) {
              uri = uri.slice(0, -1);
              index.end--;
            }
            if (/[)]$/.test(uri) && !uri.includes("(")) {
              uri = uri.slice(0, -1);
              index.end--;
            }
            facets.push({
              index: {
                byteStart: text.utf16IndexToUtf8Index(index.start),
                byteEnd: text.utf16IndexToUtf8Index(index.end)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#link",
                  uri
                }
              ]
            });
          }
        }
        {
          const re = util_1.TAG_REGEX;
          while (match2 = re.exec(text.utf16)) {
            let [, leading, tag] = match2;
            if (!tag)
              continue;
            tag = tag.trim().replace(util_1.TRAILING_PUNCTUATION_REGEX, "");
            if (tag.length === 0 || tag.length > 64)
              continue;
            const index = match2.index + leading.length;
            facets.push({
              index: {
                byteStart: text.utf16IndexToUtf8Index(index),
                byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag.length)
              },
              features: [
                {
                  $type: "app.bsky.richtext.facet#tag",
                  tag
                }
              ]
            });
          }
        }
        return facets.length > 0 ? facets : void 0;
      }
      exports.detectFacets = detectFacets;
      function isValidDomain(str) {
        return !!tlds_1.default.find((tld) => {
          const i = str.lastIndexOf(tld);
          if (i === -1) {
            return false;
          }
          return str.charAt(i - 1) === "." && i === str.length - tld.length;
        });
      }
    }
  });

  // coldsky/node_modules/@atproto/api/dist/rich-text/rich-text.js
  var require_rich_text = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/rich-text/rich-text.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RichText = exports.RichTextSegment = void 0;
      var client_1 = require_client3();
      var unicode_1 = require_unicode();
      var sanitization_1 = require_sanitization();
      var detection_1 = require_detection();
      var RichTextSegment = class {
        constructor(text, facet) {
          Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: text
          });
          Object.defineProperty(this, "facet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: facet
          });
        }
        get link() {
          var _a3;
          const link = (_a3 = this.facet) == null ? void 0 : _a3.features.find(client_1.AppBskyRichtextFacet.isLink);
          if (client_1.AppBskyRichtextFacet.isLink(link)) {
            return link;
          }
          return void 0;
        }
        isLink() {
          return !!this.link;
        }
        get mention() {
          var _a3;
          const mention = (_a3 = this.facet) == null ? void 0 : _a3.features.find(client_1.AppBskyRichtextFacet.isMention);
          if (client_1.AppBskyRichtextFacet.isMention(mention)) {
            return mention;
          }
          return void 0;
        }
        isMention() {
          return !!this.mention;
        }
        get tag() {
          var _a3;
          const tag = (_a3 = this.facet) == null ? void 0 : _a3.features.find(client_1.AppBskyRichtextFacet.isTag);
          if (client_1.AppBskyRichtextFacet.isTag(tag)) {
            return tag;
          }
          return void 0;
        }
        isTag() {
          return !!this.tag;
        }
      };
      exports.RichTextSegment = RichTextSegment;
      var RichText = class _RichText {
        constructor(props, opts) {
          var _a3, _b;
          Object.defineProperty(this, "unicodeText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "facets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.unicodeText = new unicode_1.UnicodeString(props.text);
          this.facets = props.facets;
          if (!((_a3 = this.facets) == null ? void 0 : _a3.length) && ((_b = props.entities) == null ? void 0 : _b.length)) {
            this.facets = entitiesToFacets(this.unicodeText, props.entities);
          }
          if (this.facets) {
            this.facets.sort(facetSort);
          }
          if (opts == null ? void 0 : opts.cleanNewlines) {
            (0, sanitization_1.sanitizeRichText)(this, { cleanNewlines: true }).copyInto(this);
          }
        }
        get text() {
          return this.unicodeText.toString();
        }
        get length() {
          return this.unicodeText.length;
        }
        get graphemeLength() {
          return this.unicodeText.graphemeLength;
        }
        clone() {
          return new _RichText({
            text: this.unicodeText.utf16,
            facets: cloneDeep(this.facets)
          });
        }
        copyInto(target2) {
          target2.unicodeText = this.unicodeText;
          target2.facets = cloneDeep(this.facets);
        }
        *segments() {
          const facets = this.facets || [];
          if (!facets.length) {
            yield new RichTextSegment(this.unicodeText.utf16);
            return;
          }
          let textCursor = 0;
          let facetCursor = 0;
          do {
            const currFacet = facets[facetCursor];
            if (textCursor < currFacet.index.byteStart) {
              yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
            } else if (textCursor > currFacet.index.byteStart) {
              facetCursor++;
              continue;
            }
            if (currFacet.index.byteStart < currFacet.index.byteEnd) {
              const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
              if (!subtext.trim()) {
                yield new RichTextSegment(subtext);
              } else {
                yield new RichTextSegment(subtext, currFacet);
              }
            }
            textCursor = currFacet.index.byteEnd;
            facetCursor++;
          } while (facetCursor < facets.length);
          if (textCursor < this.unicodeText.length) {
            yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
          }
        }
        insert(insertIndex, insertText) {
          var _a3;
          this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
          if (!((_a3 = this.facets) == null ? void 0 : _a3.length)) {
            return this;
          }
          const numCharsAdded = insertText.length;
          for (const ent of this.facets) {
            if (insertIndex <= ent.index.byteStart) {
              ent.index.byteStart += numCharsAdded;
              ent.index.byteEnd += numCharsAdded;
            } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {
              ent.index.byteEnd += numCharsAdded;
            }
          }
          return this;
        }
        delete(removeStartIndex, removeEndIndex) {
          var _a3;
          this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
          if (!((_a3 = this.facets) == null ? void 0 : _a3.length)) {
            return this;
          }
          const numCharsRemoved = removeEndIndex - removeStartIndex;
          for (const ent of this.facets) {
            if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
              ent.index.byteStart = 0;
              ent.index.byteEnd = 0;
            } else if (removeStartIndex > ent.index.byteEnd) {
            } else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {
              ent.index.byteEnd = removeStartIndex;
            } else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
              ent.index.byteEnd -= numCharsRemoved;
            } else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
              ent.index.byteStart = removeStartIndex;
              ent.index.byteEnd -= numCharsRemoved;
            } else if (removeEndIndex < ent.index.byteStart) {
              ent.index.byteStart -= numCharsRemoved;
              ent.index.byteEnd -= numCharsRemoved;
            }
          }
          this.facets = this.facets.filter((ent) => ent.index.byteStart < ent.index.byteEnd);
          return this;
        }
        /**
         * Detects facets such as links and mentions
         * Note: Overwrites the existing facets with auto-detected facets
         */
        detectFacets(agent) {
          return __async(this, null, function* () {
            this.facets = (0, detection_1.detectFacets)(this.unicodeText);
            if (this.facets) {
              for (const facet of this.facets) {
                for (const feature of facet.features) {
                  if (client_1.AppBskyRichtextFacet.isMention(feature)) {
                    const did = yield agent.resolveHandle({ handle: feature.did }).catch((_) => void 0).then((res) => res == null ? void 0 : res.data.did);
                    feature.did = did || "";
                  }
                }
              }
              this.facets.sort(facetSort);
            }
          });
        }
        /**
         * Detects facets such as links and mentions but does not resolve them
         * Will produce invalid facets! For instance, mentions will not have their DIDs set.
         * Note: Overwrites the existing facets with auto-detected facets
         */
        detectFacetsWithoutResolution() {
          this.facets = (0, detection_1.detectFacets)(this.unicodeText);
          if (this.facets) {
            this.facets.sort(facetSort);
          }
        }
      };
      exports.RichText = RichText;
      var facetSort = (a, b) => a.index.byteStart - b.index.byteStart;
      function entitiesToFacets(text, entities) {
        const facets = [];
        for (const ent of entities) {
          if (ent.type === "link") {
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
              },
              features: [{ $type: "app.bsky.richtext.facet#link", uri: ent.value }]
            });
          } else if (ent.type === "mention") {
            facets.push({
              $type: "app.bsky.richtext.facet",
              index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
              },
              features: [
                { $type: "app.bsky.richtext.facet#mention", did: ent.value }
              ]
            });
          }
        }
        return facets;
      }
      function cloneDeep(v) {
        if (typeof v === "undefined") {
          return v;
        }
        return JSON.parse(JSON.stringify(v));
      }
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/types.js
  var require_types6 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NOOP_BEHAVIOR = exports.HIDE_BEHAVIOR = exports.MUTEWORD_BEHAVIOR = exports.MUTE_BEHAVIOR = exports.BLOCK_BEHAVIOR = exports.CUSTOM_LABEL_VALUE_RE = void 0;
      exports.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
      exports.BLOCK_BEHAVIOR = {
        profileList: "blur",
        profileView: "alert",
        avatar: "blur",
        banner: "blur",
        contentList: "blur",
        contentView: "blur"
      };
      exports.MUTE_BEHAVIOR = {
        profileList: "inform",
        profileView: "alert",
        contentList: "blur",
        contentView: "inform"
      };
      exports.MUTEWORD_BEHAVIOR = {
        contentList: "blur",
        contentView: "blur"
      };
      exports.HIDE_BEHAVIOR = {
        contentList: "blur",
        contentView: "blur"
      };
      exports.NOOP_BEHAVIOR = {};
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/ui.js
  var require_ui = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/ui.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModerationUI = void 0;
      var ModerationUI = class {
        constructor() {
          Object.defineProperty(this, "noOverride", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "filters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "blurs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "alerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
          Object.defineProperty(this, "informs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
        }
        get filter() {
          return this.filters.length !== 0;
        }
        get blur() {
          return this.blurs.length !== 0;
        }
        get alert() {
          return this.alerts.length !== 0;
        }
        get inform() {
          return this.informs.length !== 0;
        }
      };
      exports.ModerationUI = ModerationUI;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/const/labels.js
  var require_labels = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/const/labels.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = void 0;
      exports.DEFAULT_LABEL_SETTINGS = {
        porn: "hide",
        sexual: "warn",
        nudity: "ignore",
        "graphic-media": "warn"
      };
      exports.LABELS = {
        "!hide": {
          identifier: "!hide",
          configurable: false,
          defaultSetting: "hide",
          flags: ["no-override", "no-self"],
          severity: "alert",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              displayName: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        "!warn": {
          identifier: "!warn",
          configurable: false,
          defaultSetting: "warn",
          flags: ["no-self"],
          severity: "none",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        "!no-unauthenticated": {
          identifier: "!no-unauthenticated",
          configurable: false,
          defaultSetting: "hide",
          flags: ["no-override", "unauthed"],
          severity: "none",
          blurs: "content",
          behaviors: {
            account: {
              profileList: "blur",
              profileView: "blur",
              avatar: "blur",
              banner: "blur",
              displayName: "blur",
              contentList: "blur",
              contentView: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur",
              displayName: "blur"
            },
            content: {
              contentList: "blur",
              contentView: "blur"
            }
          },
          locales: []
        },
        porn: {
          identifier: "porn",
          configurable: true,
          defaultSetting: "hide",
          flags: ["adult"],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        sexual: {
          identifier: "sexual",
          configurable: true,
          defaultSetting: "warn",
          flags: ["adult"],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        nudity: {
          identifier: "nudity",
          configurable: true,
          defaultSetting: "ignore",
          flags: [],
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        },
        "graphic-media": {
          identifier: "graphic-media",
          flags: ["adult"],
          configurable: true,
          defaultSetting: "warn",
          severity: "none",
          blurs: "media",
          behaviors: {
            account: {
              avatar: "blur",
              banner: "blur"
            },
            profile: {
              avatar: "blur",
              banner: "blur"
            },
            content: {
              contentMedia: "blur"
            }
          },
          locales: []
        }
      };
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/decision.js
  var require_decision = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/decision.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModerationDecision = void 0;
      var types_1 = require_types6();
      var ui_1 = require_ui();
      var labels_1 = require_labels();
      var ModerationBehaviorSeverity;
      (function(ModerationBehaviorSeverity2) {
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["High"] = 0] = "High";
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["Medium"] = 1] = "Medium";
        ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["Low"] = 2] = "Low";
      })(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
      var ModerationDecision = class _ModerationDecision {
        constructor() {
          Object.defineProperty(this, "did", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
          });
          Object.defineProperty(this, "isMe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
          });
          Object.defineProperty(this, "causes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
          });
        }
        static merge(...decisions) {
          const decisionsFiltered = decisions.filter((v) => !!v);
          const decision = new _ModerationDecision();
          if (decisionsFiltered[0]) {
            decision.did = decisionsFiltered[0].did;
            decision.isMe = decisionsFiltered[0].isMe;
          }
          decision.causes = decisionsFiltered.flatMap((d) => d.causes);
          return decision;
        }
        downgrade() {
          for (const cause of this.causes) {
            cause.downgraded = true;
          }
          return this;
        }
        get blocked() {
          return !!this.blockCause;
        }
        get muted() {
          return !!this.muteCause;
        }
        get blockCause() {
          return this.causes.find((cause) => cause.type === "blocking" || cause.type === "blocked-by" || cause.type === "block-other");
        }
        get muteCause() {
          return this.causes.find((cause) => cause.type === "muted");
        }
        get labelCauses() {
          return this.causes.filter((cause) => cause.type === "label");
        }
        ui(context) {
          const ui = new ui_1.ModerationUI();
          if (this.isMe) {
            return ui;
          }
          for (const cause of this.causes) {
            if (cause.type === "blocking" || cause.type === "blocked-by" || cause.type === "block-other") {
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.BLOCK_BEHAVIOR[context] === "blur") {
                  ui.noOverride = true;
                  ui.blurs.push(cause);
                } else if (types_1.BLOCK_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.BLOCK_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "muted") {
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.MUTE_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.MUTE_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.MUTE_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "mute-word") {
              if (context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.MUTEWORD_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.MUTEWORD_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.MUTEWORD_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "hidden") {
              if (context === "profileList" || context === "contentList") {
                ui.filters.push(cause);
              }
              if (!cause.downgraded) {
                if (types_1.HIDE_BEHAVIOR[context] === "blur") {
                  ui.blurs.push(cause);
                } else if (types_1.HIDE_BEHAVIOR[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (types_1.HIDE_BEHAVIOR[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            } else if (cause.type === "label") {
              if (context === "profileList" && cause.target === "account") {
                if (cause.setting === "hide") {
                  ui.filters.push(cause);
                }
              } else if (context === "contentList" && (cause.target === "account" || cause.target === "content")) {
                if (cause.setting === "hide") {
                  ui.filters.push(cause);
                }
              }
              if (!cause.downgraded) {
                if (cause.behavior[context] === "blur") {
                  ui.blurs.push(cause);
                  if (cause.noOverride) {
                    ui.noOverride = true;
                  }
                } else if (cause.behavior[context] === "alert") {
                  ui.alerts.push(cause);
                } else if (cause.behavior[context] === "inform") {
                  ui.informs.push(cause);
                }
              }
            }
          }
          ui.filters.sort(sortByPriority);
          ui.blurs.sort(sortByPriority);
          return ui;
        }
        setDid(did) {
          this.did = did;
        }
        setIsMe(isMe) {
          this.isMe = isMe;
        }
        addHidden(hidden4) {
          if (hidden4) {
            this.causes.push({
              type: "hidden",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addMutedWord(mutedWord) {
          if (mutedWord) {
            this.causes.push({
              type: "mute-word",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addBlocking(blocking) {
          if (blocking) {
            this.causes.push({
              type: "blocking",
              source: { type: "user" },
              priority: 3
            });
          }
        }
        addBlockingByList(blockingByList) {
          if (blockingByList) {
            this.causes.push({
              type: "blocking",
              source: { type: "list", list: blockingByList },
              priority: 3
            });
          }
        }
        addBlockedBy(blockedBy) {
          if (blockedBy) {
            this.causes.push({
              type: "blocked-by",
              source: { type: "user" },
              priority: 4
            });
          }
        }
        addBlockOther(blockOther) {
          if (blockOther) {
            this.causes.push({
              type: "block-other",
              source: { type: "user" },
              priority: 4
            });
          }
        }
        addLabel(target2, label, opts) {
          var _a3, _b;
          const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val) ? ((_b = (_a3 = opts.labelDefs) == null ? void 0 : _a3[label.src]) == null ? void 0 : _b.find((def) => def.identifier === label.val)) || labels_1.LABELS[label.val] : labels_1.LABELS[label.val];
          if (!labelDef) {
            return;
          }
          const isSelf = label.src === this.did;
          const labeler = isSelf ? void 0 : opts.prefs.labelers.find((s) => s.did === label.src);
          if (!isSelf && !labeler) {
            return;
          }
          if (isSelf && labelDef.flags.includes("no-self")) {
            return;
          }
          let labelPref = labelDef.defaultSetting || "ignore";
          if (!labelDef.configurable) {
            labelPref = labelDef.defaultSetting || "hide";
          } else if (labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            labelPref = "hide";
          } else if (labeler == null ? void 0 : labeler.labels[labelDef.identifier]) {
            labelPref = labeler == null ? void 0 : labeler.labels[labelDef.identifier];
          } else if (opts.prefs.labels[labelDef.identifier]) {
            labelPref = opts.prefs.labels[labelDef.identifier];
          }
          if (labelPref === "ignore") {
            return;
          }
          if (labelDef.flags.includes("unauthed") && !!opts.userDid) {
            return;
          }
          let priority;
          const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target2]);
          if (labelDef.flags.includes("no-override") || labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            priority = 1;
          } else if (labelPref === "hide") {
            priority = 2;
          } else if (severity === ModerationBehaviorSeverity.High) {
            priority = 5;
          } else if (severity === ModerationBehaviorSeverity.Medium) {
            priority = 7;
          } else {
            priority = 8;
          }
          let noOverride = false;
          if (labelDef.flags.includes("no-override")) {
            noOverride = true;
          } else if (labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
            noOverride = true;
          }
          this.causes.push({
            type: "label",
            source: isSelf || !labeler ? { type: "user" } : { type: "labeler", did: labeler.did },
            label,
            labelDef,
            target: target2,
            setting: labelPref,
            behavior: labelDef.behaviors[target2] || types_1.NOOP_BEHAVIOR,
            noOverride,
            priority
          });
        }
        addMuted(muted) {
          if (muted) {
            this.causes.push({
              type: "muted",
              source: { type: "user" },
              priority: 6
            });
          }
        }
        addMutedByList(mutedByList) {
          if (mutedByList) {
            this.causes.push({
              type: "muted",
              source: { type: "list", list: mutedByList },
              priority: 6
            });
          }
        }
      };
      exports.ModerationDecision = ModerationDecision;
      function measureModerationBehaviorSeverity(beh) {
        if (!beh) {
          return ModerationBehaviorSeverity.Low;
        }
        if (beh.profileView === "blur" || beh.contentView === "blur") {
          return ModerationBehaviorSeverity.High;
        }
        if (beh.contentList === "blur" || beh.contentMedia === "blur") {
          return ModerationBehaviorSeverity.Medium;
        }
        return ModerationBehaviorSeverity.Low;
      }
      function sortByPriority(a, b) {
        return a.priority - b.priority;
      }
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/subjects/account.js
  var require_account = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/subjects/account.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.filterAccountLabels = exports.decideAccount = void 0;
      var decision_1 = require_decision();
      function decideAccount(subject, opts) {
        var _a3, _b, _c, _d, _e, _f, _g, _h, _i;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.did);
        acc.setIsMe(subject.did === opts.userDid);
        if ((_a3 = subject.viewer) == null ? void 0 : _a3.muted) {
          if ((_b = subject.viewer) == null ? void 0 : _b.mutedByList) {
            acc.addMutedByList((_c = subject.viewer) == null ? void 0 : _c.mutedByList);
          } else {
            acc.addMuted((_d = subject.viewer) == null ? void 0 : _d.muted);
          }
        }
        if ((_e = subject.viewer) == null ? void 0 : _e.blocking) {
          if ((_f = subject.viewer) == null ? void 0 : _f.blockingByList) {
            acc.addBlockingByList((_g = subject.viewer) == null ? void 0 : _g.blockingByList);
          } else {
            acc.addBlocking((_h = subject.viewer) == null ? void 0 : _h.blocking);
          }
        }
        acc.addBlockedBy((_i = subject.viewer) == null ? void 0 : _i.blockedBy);
        for (const label of filterAccountLabels(subject.labels)) {
          acc.addLabel("account", label, opts);
        }
        return acc;
      }
      exports.decideAccount = decideAccount;
      function filterAccountLabels(labels) {
        if (!labels) {
          return [];
        }
        return labels.filter((label) => !label.uri.endsWith("/app.bsky.actor.profile/self") || label.val === "!no-unauthenticated");
      }
      exports.filterAccountLabels = filterAccountLabels;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/subjects/profile.js
  var require_profile2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/subjects/profile.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.filterProfileLabels = exports.decideProfile = void 0;
      var decision_1 = require_decision();
      function decideProfile(subject, opts) {
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.did);
        acc.setIsMe(subject.did === opts.userDid);
        for (const label of filterProfileLabels(subject.labels)) {
          acc.addLabel("profile", label, opts);
        }
        return acc;
      }
      exports.decideProfile = decideProfile;
      function filterProfileLabels(labels) {
        if (!labels) {
          return [];
        }
        return labels.filter((label) => label.uri.endsWith("/app.bsky.actor.profile/self"));
      }
      exports.filterProfileLabels = filterProfileLabels;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/subjects/notification.js
  var require_notification = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/subjects/notification.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideNotification = void 0;
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideNotification(subject, opts) {
        var _a3;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if ((_a3 = subject.labels) == null ? void 0 : _a3.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
      exports.decideNotification = decideNotification;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/mutewords.js
  var require_mutewords = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/mutewords.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasMutedWord = void 0;
      var client_1 = require_client3();
      var REGEX = {
        LEADING_TRAILING_PUNCTUATION: new RegExp("(?:^\\p{P}+|\\p{P}+$)", "gu"),
        ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
        SEPARATORS: /[/\-–—()[\]_]+/g,
        WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
      };
      var LANGUAGE_EXCEPTIONS = [
        "ja",
        // Japanese
        "zh",
        // Chinese
        "ko",
        // Korean
        "th",
        // Thai
        "vi"
        // Vietnamese
      ];
      function hasMutedWord({ mutedWords, text, facets, outlineTags, languages }) {
        const exception = LANGUAGE_EXCEPTIONS.includes((languages == null ? void 0 : languages[0]) || "");
        const tags2 = [].concat(outlineTags || []).concat((facets == null ? void 0 : facets.filter((facet) => {
          return facet.features.find((feature) => client_1.AppBskyRichtextFacet.isTag(feature));
        }).map((t) => t.features[0].tag)) || []).map((t) => t.toLowerCase());
        for (const mute of mutedWords) {
          const mutedWord = mute.value.toLowerCase();
          const postText = text.toLowerCase();
          if (tags2.includes(mutedWord))
            return true;
          if (!mute.targets.includes("content"))
            continue;
          if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord))
            return true;
          if (mutedWord.length > postText.length)
            continue;
          if (mutedWord === postText)
            return true;
          if (new RegExp("(?:\\s|\\p{P})+?", "u").test(mutedWord) && postText.includes(mutedWord))
            return true;
          const words = postText.split(REGEX.WORD_BOUNDARY);
          for (const word of words) {
            if (word === mutedWord)
              return true;
            const wordTrimmedPunctuation = word.replace(REGEX.LEADING_TRAILING_PUNCTUATION, "");
            if (mutedWord === wordTrimmedPunctuation)
              return true;
            if (mutedWord.length > wordTrimmedPunctuation.length)
              continue;
            if (new RegExp("\\p{P}+", "u").test(wordTrimmedPunctuation)) {
              const spacedWord = wordTrimmedPunctuation.replace(new RegExp("\\p{P}+", "gu"), " ");
              if (spacedWord === mutedWord)
                return true;
              const contiguousWord = spacedWord.replace(/\s/gu, "");
              if (contiguousWord === mutedWord)
                return true;
              const wordParts = wordTrimmedPunctuation.split(new RegExp("\\p{P}+", "u"));
              for (const wordPart of wordParts) {
                if (wordPart === mutedWord)
                  return true;
              }
            }
          }
        }
        return false;
      }
      exports.hasMutedWord = hasMutedWord;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/subjects/post.js
  var require_post2 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/subjects/post.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decidePost = void 0;
      var decision_1 = require_decision();
      var client_1 = require_client3();
      var mutewords_1 = require_mutewords();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decidePost(subject, opts) {
        var _a3;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if ((_a3 = subject.labels) == null ? void 0 : _a3.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
        if (!acc.isMe) {
          acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
        }
        let embedAcc;
        if (subject.embed) {
          if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
            embedAcc = decideQuotedPost(subject.embed.record, opts);
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
            embedAcc = decideQuotedPost(subject.embed.record.record, opts);
          } else if (client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record)) {
            embedAcc = decideBlockedQuotedPost(subject.embed.record, opts);
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record.record)) {
            embedAcc = decideBlockedQuotedPost(subject.embed.record.record, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, embedAcc == null ? void 0 : embedAcc.downgrade(), (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
      exports.decidePost = decidePost;
      function decideQuotedPost(subject, opts) {
        var _a3;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if ((_a3 = subject.labels) == null ? void 0 : _a3.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
      }
      function decideBlockedQuotedPost(subject, opts) {
        var _a3, _b, _c, _d, _e, _f, _g, _h, _i;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.author.did);
        acc.setIsMe(subject.author.did === opts.userDid);
        if ((_a3 = subject.author.viewer) == null ? void 0 : _a3.muted) {
          if ((_b = subject.author.viewer) == null ? void 0 : _b.mutedByList) {
            acc.addMutedByList((_c = subject.author.viewer) == null ? void 0 : _c.mutedByList);
          } else {
            acc.addMuted((_d = subject.author.viewer) == null ? void 0 : _d.muted);
          }
        }
        if ((_e = subject.author.viewer) == null ? void 0 : _e.blocking) {
          if ((_f = subject.author.viewer) == null ? void 0 : _f.blockingByList) {
            acc.addBlockingByList((_g = subject.author.viewer) == null ? void 0 : _g.blockingByList);
          } else {
            acc.addBlocking((_h = subject.author.viewer) == null ? void 0 : _h.blocking);
          }
        }
        acc.addBlockedBy((_i = subject.author.viewer) == null ? void 0 : _i.blockedBy);
        return acc;
      }
      function checkHiddenPost(subject, hiddenPosts) {
        if (!(hiddenPosts == null ? void 0 : hiddenPosts.length)) {
          return false;
        }
        if (hiddenPosts.includes(subject.uri)) {
          return true;
        }
        if (subject.embed) {
          if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record) && hiddenPosts.includes(subject.embed.record.uri)) {
            return true;
          }
          if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) && hiddenPosts.includes(subject.embed.record.record.uri)) {
            return true;
          }
        }
        return false;
      }
      function checkMutedWords(subject, mutedWords) {
        if (!(mutedWords == null ? void 0 : mutedWords.length)) {
          return false;
        }
        if (client_1.AppBskyFeedPost.isRecord(subject.record)) {
          if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: subject.record.text,
            facets: subject.record.facets,
            outlineTags: subject.record.tags,
            languages: subject.record.langs
          })) {
            return true;
          }
          if (subject.record.embed && client_1.AppBskyEmbedImages.isMain(subject.record.embed)) {
            for (const image of subject.record.embed.images) {
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: image.alt,
                languages: subject.record.langs
              })) {
                return true;
              }
            }
          }
        }
        if (subject.embed) {
          if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
            if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.value)) {
              const embeddedPost = subject.embed.record.value;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: embeddedPost.text,
                facets: embeddedPost.facets,
                outlineTags: embeddedPost.tags,
                languages: embeddedPost.langs
              })) {
                return true;
              }
              if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed)) {
                for (const image of embeddedPost.embed.images) {
                  if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: image.alt,
                    languages: embeddedPost.langs
                  })) {
                    return true;
                  }
                }
              }
              if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
                const { external } = embeddedPost.embed;
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: external.title + " " + external.description,
                  languages: []
                })) {
                  return true;
                }
              }
              if (client_1.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
                if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
                  const { external } = embeddedPost.embed.media;
                  if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: external.title + " " + external.description,
                    languages: []
                  })) {
                    return true;
                  }
                }
                if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) {
                  for (const image of embeddedPost.embed.media.images) {
                    if ((0, mutewords_1.hasMutedWord)({
                      mutedWords,
                      text: image.alt,
                      languages: client_1.AppBskyFeedPost.isRecord(embeddedPost.record) ? embeddedPost.langs : []
                    })) {
                      return true;
                    }
                  }
                }
              }
            }
          } else if (client_1.AppBskyEmbedExternal.isView(subject.embed)) {
            const { external } = subject.embed;
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: external.title + " " + external.description,
              languages: []
            })) {
              return true;
            }
          } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
            if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.record.value)) {
              const post = subject.embed.record.record.value;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: post.text,
                facets: post.facets,
                outlineTags: post.tags,
                languages: post.langs
              })) {
                return true;
              }
            }
            if (client_1.AppBskyEmbedImages.isView(subject.embed.media)) {
              for (const image of subject.embed.media.images) {
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: image.alt,
                  languages: client_1.AppBskyFeedPost.isRecord(subject.record) ? subject.record.langs : []
                })) {
                  return true;
                }
              }
            }
          }
        }
        return false;
      }
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js
  var require_feed_generator = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideFeedGenerator = void 0;
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideFeedGenerator(subject, opts) {
        var _a3;
        const acc = new decision_1.ModerationDecision();
        acc.setDid(subject.creator.did);
        acc.setIsMe(subject.creator.did === opts.userDid);
        if ((_a3 = subject.labels) == null ? void 0 : _a3.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.creator, opts), (0, profile_1.decideProfile)(subject.creator, opts));
      }
      exports.decideFeedGenerator = decideFeedGenerator;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/subjects/user-list.js
  var require_user_list = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/subjects/user-list.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decideUserList = void 0;
      var syntax_1 = require_dist();
      var decision_1 = require_decision();
      var account_1 = require_account();
      var profile_1 = require_profile2();
      function decideUserList(subject, opts) {
        var _a3, _b;
        const acc = new decision_1.ModerationDecision();
        const creator = isProfile(subject.creator) ? subject.creator : void 0;
        if (creator) {
          acc.setDid(creator.did);
          acc.setIsMe(creator.did === opts.userDid);
          if ((_a3 = subject.labels) == null ? void 0 : _a3.length) {
            for (const label of subject.labels) {
              acc.addLabel("content", label, opts);
            }
          }
          return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
        }
        const creatorDid = new syntax_1.AtUri(subject.uri).hostname;
        acc.setDid(creatorDid);
        acc.setIsMe(creatorDid === opts.userDid);
        if ((_b = subject.labels) == null ? void 0 : _b.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return acc;
      }
      exports.decideUserList = decideUserList;
      function isProfile(v) {
        return v && typeof v === "object" && "did" in v;
      }
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/util.js
  var require_util8 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.isQuotedPostWithMedia = exports.isQuotedPost = void 0;
      var client_1 = require_client3();
      function isQuotedPost(embed) {
        return Boolean(embed && client_1.AppBskyEmbedRecord.isView(embed));
      }
      exports.isQuotedPost = isQuotedPost;
      function isQuotedPostWithMedia(embed) {
        return Boolean(embed && client_1.AppBskyEmbedRecordWithMedia.isView(embed));
      }
      exports.isQuotedPostWithMedia = isQuotedPostWithMedia;
      function interpretLabelValueDefinition(def, definedBy) {
        const behaviors = {
          account: {},
          profile: {},
          content: {}
        };
        const alertOrInform = def.severity === "alert" ? "alert" : def.severity === "inform" ? "inform" : void 0;
        if (def.blurs === "content") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.contentList = "blur";
          behaviors.account.contentView = def.adultOnly ? "blur" : alertOrInform;
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.content.contentList = "blur";
          behaviors.content.contentView = def.adultOnly ? "blur" : alertOrInform;
        } else if (def.blurs === "media") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.avatar = "blur";
          behaviors.account.banner = "blur";
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.profile.avatar = "blur";
          behaviors.profile.banner = "blur";
          behaviors.content.contentMedia = "blur";
        } else if (def.blurs === "none") {
          behaviors.account.profileList = alertOrInform;
          behaviors.account.profileView = alertOrInform;
          behaviors.account.contentList = alertOrInform;
          behaviors.account.contentView = alertOrInform;
          behaviors.profile.profileList = alertOrInform;
          behaviors.profile.profileView = alertOrInform;
          behaviors.content.contentList = alertOrInform;
          behaviors.content.contentView = alertOrInform;
        }
        let defaultSetting = "warn";
        if (def.defaultSetting === "hide" || def.defaultSetting === "ignore") {
          defaultSetting = def.defaultSetting;
        }
        const flags = ["no-self"];
        if (def.adultOnly) {
          flags.push("adult");
        }
        return __spreadProps(__spreadValues({}, def), {
          definedBy,
          configurable: true,
          defaultSetting,
          flags,
          behaviors
        });
      }
      exports.interpretLabelValueDefinition = interpretLabelValueDefinition;
      function interpretLabelValueDefinitions(labelerView) {
        var _a3;
        return (((_a3 = labelerView.policies) == null ? void 0 : _a3.labelValueDefinitions) || []).filter((labelValDef) => client_1.ComAtprotoLabelDefs.validateLabelValueDefinition(labelValDef).success).map((labelValDef) => interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
      }
      exports.interpretLabelValueDefinitions = interpretLabelValueDefinitions;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/moderation/index.js
  var require_moderation = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/moderation/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.moderateUserList = exports.moderateFeedGenerator = exports.moderateNotification = exports.moderatePost = exports.moderateProfile = exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = void 0;
      var account_1 = require_account();
      var profile_1 = require_profile2();
      var notification_1 = require_notification();
      var post_1 = require_post2();
      var feed_generator_1 = require_feed_generator();
      var user_list_1 = require_user_list();
      var decision_1 = require_decision();
      var ui_1 = require_ui();
      Object.defineProperty(exports, "ModerationUI", { enumerable: true, get: function() {
        return ui_1.ModerationUI;
      } });
      var decision_2 = require_decision();
      Object.defineProperty(exports, "ModerationDecision", { enumerable: true, get: function() {
        return decision_2.ModerationDecision;
      } });
      var mutewords_1 = require_mutewords();
      Object.defineProperty(exports, "hasMutedWord", { enumerable: true, get: function() {
        return mutewords_1.hasMutedWord;
      } });
      var util_1 = require_util8();
      Object.defineProperty(exports, "interpretLabelValueDefinition", { enumerable: true, get: function() {
        return util_1.interpretLabelValueDefinition;
      } });
      Object.defineProperty(exports, "interpretLabelValueDefinitions", { enumerable: true, get: function() {
        return util_1.interpretLabelValueDefinitions;
      } });
      function moderateProfile(subject, opts) {
        return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
      }
      exports.moderateProfile = moderateProfile;
      function moderatePost(subject, opts) {
        return (0, post_1.decidePost)(subject, opts);
      }
      exports.moderatePost = moderatePost;
      function moderateNotification(subject, opts) {
        return (0, notification_1.decideNotification)(subject, opts);
      }
      exports.moderateNotification = moderateNotification;
      function moderateFeedGenerator(subject, opts) {
        return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
      }
      exports.moderateFeedGenerator = moderateFeedGenerator;
      function moderateUserList(subject, opts) {
        return (0, user_list_1.decideUserList)(subject, opts);
      }
      exports.moderateUserList = moderateUserList;
    }
  });

  // coldsky/node_modules/@atproto/api/dist/mocker.js
  var require_mocker = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/mocker.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mock = void 0;
      var FAKE_CID = "bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq";
      exports.mock = {
        post({ text, facets, reply, embed }) {
          return {
            $type: "app.bsky.feed.post",
            text,
            facets,
            reply,
            embed,
            langs: ["en"],
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          };
        },
        postView({ record, author, embed, replyCount, repostCount, likeCount, viewer, labels }) {
          return {
            $type: "app.bsky.feed.defs#postView",
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            record,
            embed,
            replyCount,
            repostCount,
            likeCount,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            viewer,
            labels
          };
        },
        embedRecordView({ record, author, labels }) {
          return {
            $type: "app.bsky.embed.record#view",
            record: {
              $type: "app.bsky.embed.record#viewRecord",
              uri: `at://${author.did}/app.bsky.feed.post/fake`,
              cid: FAKE_CID,
              author,
              value: record,
              labels,
              indexedAt: (/* @__PURE__ */ new Date()).toISOString()
            }
          };
        },
        profileViewBasic({ handle, displayName, description, viewer, labels }) {
          return {
            did: `did:web:${handle}`,
            handle,
            displayName,
            description,
            // technically not in ProfileViewBasic but useful in some cases
            viewer,
            labels
          };
        },
        actorViewerState({ muted, mutedByList, blockedBy, blocking, blockingByList, following, followedBy }) {
          return {
            muted,
            mutedByList,
            blockedBy,
            blocking,
            blockingByList,
            following,
            followedBy
          };
        },
        listViewBasic({ name: name2 }) {
          return {
            uri: "at://did:plc:fake/app.bsky.graph.list/fake",
            cid: FAKE_CID,
            name: name2,
            purpose: "app.bsky.graph.defs#modlist",
            indexedAt: (/* @__PURE__ */ new Date()).toISOString()
          };
        },
        replyNotification({ author, record, labels }) {
          return {
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            reason: "reply",
            reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
            record,
            isRead: false,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            labels
          };
        },
        followNotification({ author, subjectDid, labels }) {
          return {
            uri: `at://${author.did}/app.bsky.graph.follow/fake`,
            cid: FAKE_CID,
            author,
            reason: "follow",
            record: {
              $type: "app.bsky.graph.follow",
              createdAt: (/* @__PURE__ */ new Date()).toISOString(),
              subject: subjectDid
            },
            isRead: false,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
            labels
          };
        },
        label({ val, uri, src: src6 }) {
          return {
            src: src6 || "did:plc:fake-labeler",
            uri,
            val,
            cts: (/* @__PURE__ */ new Date()).toISOString()
          };
        }
      };
    }
  });

  // coldsky/node_modules/@atproto/api/dist/bsky-agent.js
  var require_bsky_agent = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/bsky-agent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BskyAgent = void 0;
      var syntax_1 = require_dist();
      var agent_1 = require_agent();
      var client_1 = require_client3();
      var labels_1 = require_labels();
      var util_1 = require_util4();
      var moderation_1 = require_moderation();
      var FEED_VIEW_PREF_DEFAULTS = {
        hideReplies: false,
        hideRepliesByUnfollowed: true,
        hideRepliesByLikeCount: 0,
        hideReposts: false,
        hideQuotePosts: false
      };
      var THREAD_VIEW_PREF_DEFAULTS = {
        sort: "oldest",
        prioritizeFollowedUsers: true
      };
      var BskyAgent2 = class _BskyAgent extends agent_1.AtpAgent {
        constructor() {
          super(...arguments);
          Object.defineProperty(this, "getTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getTimeline(params, opts)
          });
          Object.defineProperty(this, "getAuthorFeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getAuthorFeed(params, opts)
          });
          Object.defineProperty(this, "getActorLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getActorLikes(params, opts)
          });
          Object.defineProperty(this, "getPostThread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getPostThread(params, opts)
          });
          Object.defineProperty(this, "getPost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params) => this.api.app.bsky.feed.post.get(params)
          });
          Object.defineProperty(this, "getPosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getPosts(params, opts)
          });
          Object.defineProperty(this, "getLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getLikes(params, opts)
          });
          Object.defineProperty(this, "getRepostedBy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.feed.getRepostedBy(params, opts)
          });
          Object.defineProperty(this, "getFollows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.graph.getFollows(params, opts)
          });
          Object.defineProperty(this, "getFollowers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.graph.getFollowers(params, opts)
          });
          Object.defineProperty(this, "getProfile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.getProfile(params, opts)
          });
          Object.defineProperty(this, "getProfiles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.getProfiles(params, opts)
          });
          Object.defineProperty(this, "getSuggestions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.getSuggestions(params, opts)
          });
          Object.defineProperty(this, "searchActors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.searchActors(params, opts)
          });
          Object.defineProperty(this, "searchActorsTypeahead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.actor.searchActorsTypeahead(params, opts)
          });
          Object.defineProperty(this, "listNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.notification.listNotifications(params, opts)
          });
          Object.defineProperty(this, "countUnreadNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.notification.getUnreadCount(params, opts)
          });
          Object.defineProperty(this, "getLabelers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts) => this.api.app.bsky.labeler.getServices(params, opts)
          });
        }
        clone() {
          const inst = new _BskyAgent({
            service: this.service
          });
          this.copyInto(inst);
          return inst;
        }
        get app() {
          return this.api.app;
        }
        getLabelDefinitions(prefs) {
          return __async(this, null, function* () {
            let dids = _BskyAgent.appLabelers;
            if (isBskyPrefs(prefs)) {
              dids = dids.concat(prefs.moderationPrefs.labelers.map((l) => l.did));
            } else if (isModPrefs(prefs)) {
              dids = dids.concat(prefs.labelers.map((l) => l.did));
            } else {
              dids = dids.concat(prefs);
            }
            const labelers = yield this.getLabelers({
              dids,
              detailed: true
            });
            const labelDefs = {};
            if (labelers.data) {
              for (const labeler of labelers.data.views) {
                labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
              }
            }
            return labelDefs;
          });
        }
        post(record) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            record.createdAt = record.createdAt || (/* @__PURE__ */ new Date()).toISOString();
            return this.api.app.bsky.feed.post.create({ repo: this.session.did }, record);
          });
        }
        deletePost(postUri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const postUrip = new syntax_1.AtUri(postUri);
            return yield this.api.app.bsky.feed.post.delete({
              repo: postUrip.hostname,
              rkey: postUrip.rkey
            });
          });
        }
        like(uri, cid) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            return yield this.api.app.bsky.feed.like.create({ repo: this.session.did }, {
              subject: { uri, cid },
              createdAt: (/* @__PURE__ */ new Date()).toISOString()
            });
          });
        }
        deleteLike(likeUri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const likeUrip = new syntax_1.AtUri(likeUri);
            return yield this.api.app.bsky.feed.like.delete({
              repo: likeUrip.hostname,
              rkey: likeUrip.rkey
            });
          });
        }
        repost(uri, cid) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            return yield this.api.app.bsky.feed.repost.create({ repo: this.session.did }, {
              subject: { uri, cid },
              createdAt: (/* @__PURE__ */ new Date()).toISOString()
            });
          });
        }
        deleteRepost(repostUri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const repostUrip = new syntax_1.AtUri(repostUri);
            return yield this.api.app.bsky.feed.repost.delete({
              repo: repostUrip.hostname,
              rkey: repostUrip.rkey
            });
          });
        }
        follow(subjectDid) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            return yield this.api.app.bsky.graph.follow.create({ repo: this.session.did }, {
              subject: subjectDid,
              createdAt: (/* @__PURE__ */ new Date()).toISOString()
            });
          });
        }
        deleteFollow(followUri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const followUrip = new syntax_1.AtUri(followUri);
            return yield this.api.app.bsky.graph.follow.delete({
              repo: followUrip.hostname,
              rkey: followUrip.rkey
            });
          });
        }
        upsertProfile(updateFn) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            let retriesRemaining = 5;
            while (retriesRemaining >= 0) {
              const existing = yield this.com.atproto.repo.getRecord({
                repo: this.session.did,
                collection: "app.bsky.actor.profile",
                rkey: "self"
              }).catch((_) => void 0);
              const updated = yield updateFn(existing == null ? void 0 : existing.data.value);
              if (updated) {
                updated.$type = "app.bsky.actor.profile";
              }
              const validation = client_1.AppBskyActorProfile.validateRecord(updated);
              if (!validation.success) {
                throw validation.error;
              }
              try {
                yield this.com.atproto.repo.putRecord({
                  repo: this.session.did,
                  collection: "app.bsky.actor.profile",
                  rkey: "self",
                  record: updated,
                  swapRecord: (existing == null ? void 0 : existing.data.cid) || null
                });
              } catch (e) {
                if (retriesRemaining > 0 && e instanceof client_1.ComAtprotoRepoPutRecord.InvalidSwapError) {
                  retriesRemaining--;
                  continue;
                } else {
                  throw e;
                }
              }
              break;
            }
          });
        }
        mute(actor) {
          return __async(this, null, function* () {
            return this.api.app.bsky.graph.muteActor({ actor });
          });
        }
        unmute(actor) {
          return __async(this, null, function* () {
            return this.api.app.bsky.graph.unmuteActor({ actor });
          });
        }
        muteModList(uri) {
          return __async(this, null, function* () {
            return this.api.app.bsky.graph.muteActorList({
              list: uri
            });
          });
        }
        unmuteModList(uri) {
          return __async(this, null, function* () {
            return this.api.app.bsky.graph.unmuteActorList({
              list: uri
            });
          });
        }
        blockModList(uri) {
          return __async(this, null, function* () {
            if (!this.session) {
              throw new Error("Not logged in");
            }
            return yield this.api.app.bsky.graph.listblock.create({ repo: this.session.did }, {
              subject: uri,
              createdAt: (/* @__PURE__ */ new Date()).toISOString()
            });
          });
        }
        unblockModList(uri) {
          return __async(this, null, function* () {
            var _a3;
            if (!this.session) {
              throw new Error("Not logged in");
            }
            const listInfo = yield this.api.app.bsky.graph.getList({
              list: uri,
              limit: 1
            });
            if (!((_a3 = listInfo.data.list.viewer) == null ? void 0 : _a3.blocked)) {
              return;
            }
            const { rkey } = new syntax_1.AtUri(listInfo.data.list.viewer.blocked);
            return yield this.api.app.bsky.graph.listblock.delete({
              repo: this.session.did,
              rkey
            });
          });
        }
        updateSeenNotifications(seenAt) {
          return __async(this, null, function* () {
            seenAt = seenAt || (/* @__PURE__ */ new Date()).toISOString();
            return this.api.app.bsky.notification.updateSeen({
              seenAt
            });
          });
        }
        getPreferences() {
          return __async(this, null, function* () {
            const prefs = {
              feeds: {
                saved: void 0,
                pinned: void 0
              },
              feedViewPrefs: {
                home: __spreadValues({}, FEED_VIEW_PREF_DEFAULTS)
              },
              threadViewPrefs: __spreadValues({}, THREAD_VIEW_PREF_DEFAULTS),
              moderationPrefs: {
                adultContentEnabled: false,
                labels: __spreadValues({}, labels_1.DEFAULT_LABEL_SETTINGS),
                labelers: _BskyAgent.appLabelers.map((did) => ({ did, labels: {} })),
                mutedWords: [],
                hiddenPosts: []
              },
              birthDate: void 0,
              interests: {
                tags: []
              }
            };
            const res = yield this.app.bsky.actor.getPreferences({});
            const labelPrefs = [];
            for (const pref of res.data.preferences) {
              if (client_1.AppBskyActorDefs.isAdultContentPref(pref) && client_1.AppBskyActorDefs.validateAdultContentPref(pref).success) {
                prefs.moderationPrefs.adultContentEnabled = pref.enabled;
              } else if (client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success) {
                const adjustedPref = adjustLegacyContentLabelPref(pref);
                labelPrefs.push(adjustedPref);
              } else if (client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success) {
                prefs.moderationPrefs.labelers = _BskyAgent.appLabelers.map((did) => ({ did, labels: {} })).concat(pref.labelers.map((labeler) => __spreadProps(__spreadValues({}, labeler), {
                  labels: {}
                })));
              } else if (client_1.AppBskyActorDefs.isSavedFeedsPref(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success) {
                prefs.feeds.saved = pref.saved;
                prefs.feeds.pinned = pref.pinned;
              } else if (client_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && client_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success) {
                if (pref.birthDate) {
                  prefs.birthDate = new Date(pref.birthDate);
                }
              } else if (client_1.AppBskyActorDefs.isFeedViewPref(pref) && client_1.AppBskyActorDefs.validateFeedViewPref(pref).success) {
                const _a3 = pref, { $type, feed } = _a3, v = __objRest(_a3, ["$type", "feed"]);
                prefs.feedViewPrefs[pref.feed] = __spreadValues(__spreadValues({}, FEED_VIEW_PREF_DEFAULTS), v);
              } else if (client_1.AppBskyActorDefs.isThreadViewPref(pref) && client_1.AppBskyActorDefs.validateThreadViewPref(pref).success) {
                const _b = pref, { $type } = _b, v = __objRest(_b, ["$type"]);
                prefs.threadViewPrefs = __spreadValues(__spreadValues({}, prefs.threadViewPrefs), v);
              } else if (client_1.AppBskyActorDefs.isInterestsPref(pref) && client_1.AppBskyActorDefs.validateInterestsPref(pref).success) {
                const _c = pref, { $type } = _c, v = __objRest(_c, ["$type"]);
                prefs.interests = __spreadValues(__spreadValues({}, prefs.interests), v);
              } else if (client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success) {
                const _d = pref, { $type } = _d, v = __objRest(_d, ["$type"]);
                prefs.moderationPrefs.mutedWords = v.items;
              } else if (client_1.AppBskyActorDefs.isHiddenPostsPref(pref) && client_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success) {
                const _e = pref, { $type } = _e, v = __objRest(_e, ["$type"]);
                prefs.moderationPrefs.hiddenPosts = v.items;
              }
            }
            for (const pref of labelPrefs) {
              if (pref.labelerDid) {
                const labeler = prefs.moderationPrefs.labelers.find((labeler2) => labeler2.did === pref.labelerDid);
                if (!labeler)
                  continue;
                labeler.labels[pref.label] = pref.visibility;
              } else {
                prefs.moderationPrefs.labels[pref.label] = pref.visibility;
              }
            }
            prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
            this.configureLabelersHeader(prefsArrayToLabelerDids(res.data.preferences));
            return prefs;
          });
        }
        setSavedFeeds(saved, pinned) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, () => ({
              saved,
              pinned
            }));
          });
        }
        addSavedFeed(v) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, (saved, pinned) => ({
              saved: [...saved.filter((uri) => uri !== v), v],
              pinned
            }));
          });
        }
        removeSavedFeed(v) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, (saved, pinned) => ({
              saved: saved.filter((uri) => uri !== v),
              pinned: pinned.filter((uri) => uri !== v)
            }));
          });
        }
        addPinnedFeed(v) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, (saved, pinned) => ({
              saved: [...saved.filter((uri) => uri !== v), v],
              pinned: [...pinned.filter((uri) => uri !== v), v]
            }));
          });
        }
        removePinnedFeed(v) {
          return __async(this, null, function* () {
            return updateFeedPreferences(this, (saved, pinned) => ({
              saved,
              pinned: pinned.filter((uri) => uri !== v)
            }));
          });
        }
        setAdultContentEnabled(v) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              let adultContentPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isAdultContentPref(pref) && client_1.AppBskyActorDefs.validateAdultContentPref(pref).success);
              if (adultContentPref) {
                adultContentPref.enabled = v;
              } else {
                adultContentPref = {
                  $type: "app.bsky.actor.defs#adultContentPref",
                  enabled: v
                };
              }
              return prefs.filter((pref) => !client_1.AppBskyActorDefs.isAdultContentPref(pref)).concat([adultContentPref]);
            });
          });
        }
        setContentLabelPref(key, value, labelerDid) {
          return __async(this, null, function* () {
            if (labelerDid) {
              (0, syntax_1.ensureValidDid)(labelerDid);
            }
            yield updatePreferences(this, (prefs) => {
              let labelPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === key && pref.labelerDid === labelerDid);
              let legacyLabelPref;
              if (labelPref) {
                labelPref.visibility = value;
              } else {
                labelPref = {
                  $type: "app.bsky.actor.defs#contentLabelPref",
                  label: key,
                  labelerDid,
                  visibility: value
                };
              }
              if (client_1.AppBskyActorDefs.isContentLabelPref(labelPref)) {
                if (!labelPref.labelerDid) {
                  const legacyLabelValue = {
                    "graphic-media": "gore",
                    porn: "nsfw",
                    sexual: "suggestive"
                  }[labelPref.label];
                  if (legacyLabelValue) {
                    legacyLabelPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isContentLabelPref(pref) && client_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === legacyLabelValue && pref.labelerDid === void 0);
                    if (legacyLabelPref) {
                      legacyLabelPref.visibility = value;
                    } else {
                      legacyLabelPref = {
                        $type: "app.bsky.actor.defs#contentLabelPref",
                        label: legacyLabelValue,
                        labelerDid: void 0,
                        visibility: value
                      };
                    }
                  }
                }
              }
              return prefs.filter((pref) => !client_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === key && pref.labelerDid === labelerDid)).concat([labelPref]).filter((pref) => {
                if (!legacyLabelPref)
                  return true;
                return !client_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === legacyLabelPref.label && pref.labelerDid === void 0);
              }).concat(legacyLabelPref ? [legacyLabelPref] : []);
            });
          });
        }
        addLabeler(did) {
          return __async(this, null, function* () {
            const prefs = yield updatePreferences(this, (prefs2) => {
              let labelersPref = prefs2.findLast((pref) => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
              if (!labelersPref) {
                labelersPref = {
                  $type: "app.bsky.actor.defs#labelersPref",
                  labelers: []
                };
              }
              if (client_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
                let labelerPrefItem = labelersPref.labelers.find((labeler) => labeler.did === did);
                if (!labelerPrefItem) {
                  labelerPrefItem = {
                    did
                  };
                  labelersPref.labelers.push(labelerPrefItem);
                }
              }
              return prefs2.filter((pref) => !client_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
            });
            this.configureLabelersHeader(prefsArrayToLabelerDids(prefs));
          });
        }
        removeLabeler(did) {
          return __async(this, null, function* () {
            const prefs = yield updatePreferences(this, (prefs2) => {
              let labelersPref = prefs2.findLast((pref) => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
              if (!labelersPref) {
                labelersPref = {
                  $type: "app.bsky.actor.defs#labelersPref",
                  labelers: []
                };
              }
              if (client_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
                labelersPref.labelers = labelersPref.labelers.filter((labeler) => labeler.did !== did);
              }
              return prefs2.filter((pref) => !client_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
            });
            this.configureLabelersHeader(prefsArrayToLabelerDids(prefs));
          });
        }
        setPersonalDetails(_0) {
          return __async(this, arguments, function* ({ birthDate }) {
            birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
            yield updatePreferences(this, (prefs) => {
              let personalDetailsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && client_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success);
              if (personalDetailsPref) {
                personalDetailsPref.birthDate = birthDate;
              } else {
                personalDetailsPref = {
                  $type: "app.bsky.actor.defs#personalDetailsPref",
                  birthDate
                };
              }
              return prefs.filter((pref) => !client_1.AppBskyActorDefs.isPersonalDetailsPref(pref)).concat([personalDetailsPref]);
            });
          });
        }
        setFeedViewPrefs(feed, pref) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const existing = prefs.findLast((pref2) => client_1.AppBskyActorDefs.isFeedViewPref(pref2) && client_1.AppBskyActorDefs.validateFeedViewPref(pref2).success && pref2.feed === feed);
              if (existing) {
                pref = __spreadValues(__spreadValues({}, existing), pref);
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isFeedViewPref(pref) || p.feed !== feed).concat([__spreadProps(__spreadValues({}, pref), { $type: "app.bsky.actor.defs#feedViewPref", feed })]);
            });
          });
        }
        setThreadViewPrefs(pref) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const existing = prefs.findLast((pref2) => client_1.AppBskyActorDefs.isThreadViewPref(pref2) && client_1.AppBskyActorDefs.validateThreadViewPref(pref2).success);
              if (existing) {
                pref = __spreadValues(__spreadValues({}, existing), pref);
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isThreadViewPref(p)).concat([__spreadProps(__spreadValues({}, pref), { $type: "app.bsky.actor.defs#threadViewPref" })]);
            });
          });
        }
        setInterestsPref(pref) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const existing = prefs.findLast((pref2) => client_1.AppBskyActorDefs.isInterestsPref(pref2) && client_1.AppBskyActorDefs.validateInterestsPref(pref2).success);
              if (existing) {
                pref = __spreadValues(__spreadValues({}, existing), pref);
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isInterestsPref(p)).concat([__spreadProps(__spreadValues({}, pref), { $type: "app.bsky.actor.defs#interestsPref" })]);
            });
          });
        }
        upsertMutedWords(newMutedWords) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              let mutedWordsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
              if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                for (const updatedWord of newMutedWords) {
                  let foundMatch = false;
                  const sanitizedUpdatedValue = (0, util_1.sanitizeMutedWordValue)(updatedWord.value);
                  if (!sanitizedUpdatedValue)
                    continue;
                  for (const existingItem of mutedWordsPref.items) {
                    if (existingItem.value === sanitizedUpdatedValue) {
                      existingItem.targets = Array.from(/* @__PURE__ */ new Set([...existingItem.targets, ...updatedWord.targets]));
                      foundMatch = true;
                      break;
                    }
                  }
                  if (!foundMatch) {
                    mutedWordsPref.items.push(__spreadProps(__spreadValues({}, updatedWord), {
                      value: sanitizedUpdatedValue
                    }));
                  }
                }
              } else {
                mutedWordsPref = {
                  items: newMutedWords.map((w) => __spreadProps(__spreadValues({}, w), {
                    value: (0, util_1.sanitizeMutedWordValue)(w.value)
                  }))
                };
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                __spreadProps(__spreadValues({}, mutedWordsPref), { $type: "app.bsky.actor.defs#mutedWordsPref" })
              ]);
            });
          });
        }
        updateMutedWord(mutedWord) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const mutedWordsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
              if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                for (const existingItem of mutedWordsPref.items) {
                  if (existingItem.value === mutedWord.value) {
                    existingItem.targets = mutedWord.targets;
                    break;
                  }
                }
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                __spreadProps(__spreadValues({}, mutedWordsPref), { $type: "app.bsky.actor.defs#mutedWordsPref" })
              ]);
            });
          });
        }
        removeMutedWord(mutedWord) {
          return __async(this, null, function* () {
            yield updatePreferences(this, (prefs) => {
              const mutedWordsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isMutedWordsPref(pref) && client_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
              if (mutedWordsPref && client_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
                for (let i = 0; i < mutedWordsPref.items.length; i++) {
                  const existing = mutedWordsPref.items[i];
                  if (existing.value === mutedWord.value) {
                    mutedWordsPref.items.splice(i, 1);
                    break;
                  }
                }
              }
              return prefs.filter((p) => !client_1.AppBskyActorDefs.isMutedWordsPref(p)).concat([
                __spreadProps(__spreadValues({}, mutedWordsPref), { $type: "app.bsky.actor.defs#mutedWordsPref" })
              ]);
            });
          });
        }
        hidePost(postUri) {
          return __async(this, null, function* () {
            yield updateHiddenPost(this, postUri, "hide");
          });
        }
        unhidePost(postUri) {
          return __async(this, null, function* () {
            yield updateHiddenPost(this, postUri, "unhide");
          });
        }
      };
      exports.BskyAgent = BskyAgent2;
      function updatePreferences(agent, cb) {
        return __async(this, null, function* () {
          const res = yield agent.app.bsky.actor.getPreferences({});
          const newPrefs = cb(res.data.preferences);
          if (newPrefs === false) {
            return res.data.preferences;
          }
          yield agent.app.bsky.actor.putPreferences({
            preferences: newPrefs
          });
          return newPrefs;
        });
      }
      function updateFeedPreferences(agent, cb) {
        return __async(this, null, function* () {
          let res;
          yield updatePreferences(agent, (prefs) => {
            let feedsPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isSavedFeedsPref(pref) && client_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
            if (feedsPref) {
              res = cb(feedsPref.saved, feedsPref.pinned);
              feedsPref.saved = res.saved;
              feedsPref.pinned = res.pinned;
            } else {
              res = cb([], []);
              feedsPref = {
                $type: "app.bsky.actor.defs#savedFeedsPref",
                saved: res.saved,
                pinned: res.pinned
              };
            }
            return prefs.filter((pref) => !client_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat([feedsPref]);
          });
          return res;
        });
      }
      function adjustLegacyContentLabelPref(pref) {
        let visibility = pref.visibility;
        if (visibility === "show") {
          visibility = "ignore";
        }
        return __spreadProps(__spreadValues({}, pref), { visibility });
      }
      function remapLegacyLabels(labels) {
        const _labels = __spreadValues({}, labels);
        const legacyToNewMap = {
          gore: "graphic-media",
          nsfw: "porn",
          suggestive: "sexual"
        };
        for (const labelName in _labels) {
          const newLabelName = legacyToNewMap[labelName];
          if (newLabelName) {
            _labels[newLabelName] = _labels[labelName];
          }
        }
        return _labels;
      }
      function prefsArrayToLabelerDids(prefs) {
        const labelersPref = prefs.findLast((pref) => client_1.AppBskyActorDefs.isLabelersPref(pref) && client_1.AppBskyActorDefs.validateLabelersPref(pref).success);
        let dids = [];
        if (labelersPref) {
          dids = labelersPref.labelers.map((labeler) => labeler.did);
        }
        return dids;
      }
      function updateHiddenPost(agent, postUri, action) {
        return __async(this, null, function* () {
          yield updatePreferences(agent, (prefs) => {
            let pref = prefs.findLast((pref2) => client_1.AppBskyActorDefs.isHiddenPostsPref(pref2) && client_1.AppBskyActorDefs.validateHiddenPostsPref(pref2).success);
            if (pref && client_1.AppBskyActorDefs.isHiddenPostsPref(pref)) {
              pref.items = action === "hide" ? Array.from(/* @__PURE__ */ new Set([...pref.items, postUri])) : pref.items.filter((uri) => uri !== postUri);
            } else {
              if (action === "hide") {
                pref = {
                  $type: "app.bsky.actor.defs#hiddenPostsPref",
                  items: [postUri]
                };
              }
            }
            return prefs.filter((p) => !client_1.AppBskyActorDefs.isInterestsPref(p)).concat([__spreadProps(__spreadValues({}, pref), { $type: "app.bsky.actor.defs#hiddenPostsPref" })]);
          });
        });
      }
      function isBskyPrefs(v) {
        return v && typeof v === "object" && "moderationPrefs" in v && isModPrefs(v.moderationPrefs);
      }
      function isModPrefs(v) {
        return v && typeof v === "object" && "labelers" in v;
      }
    }
  });

  // coldsky/node_modules/@atproto/api/dist/index.js
  var require_dist6 = __commonJS({
    "coldsky/node_modules/@atproto/api/dist/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = exports.BskyAgent = exports.DEFAULT_LABEL_SETTINGS = exports.LABELS = exports.parseLanguage = exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.BlobRef = exports.AtUri = void 0;
      var syntax_1 = require_dist();
      Object.defineProperty(exports, "AtUri", { enumerable: true, get: function() {
        return syntax_1.AtUri;
      } });
      var lexicon_1 = require_dist4();
      Object.defineProperty(exports, "BlobRef", { enumerable: true, get: function() {
        return lexicon_1.BlobRef;
      } });
      Object.defineProperty(exports, "lexToJson", { enumerable: true, get: function() {
        return lexicon_1.lexToJson;
      } });
      Object.defineProperty(exports, "stringifyLex", { enumerable: true, get: function() {
        return lexicon_1.stringifyLex;
      } });
      Object.defineProperty(exports, "jsonToLex", { enumerable: true, get: function() {
        return lexicon_1.jsonToLex;
      } });
      Object.defineProperty(exports, "jsonStringToLex", { enumerable: true, get: function() {
        return lexicon_1.jsonStringToLex;
      } });
      var common_web_1 = require_dist2();
      Object.defineProperty(exports, "parseLanguage", { enumerable: true, get: function() {
        return common_web_1.parseLanguage;
      } });
      __exportStar(require_types4(), exports);
      __exportStar(require_const(), exports);
      __exportStar(require_util4(), exports);
      __exportStar(require_client3(), exports);
      __exportStar(require_agent(), exports);
      __exportStar(require_rich_text(), exports);
      __exportStar(require_sanitization(), exports);
      __exportStar(require_unicode(), exports);
      __exportStar(require_util7(), exports);
      __exportStar(require_moderation(), exports);
      __exportStar(require_types6(), exports);
      __exportStar(require_mocker(), exports);
      var labels_1 = require_labels();
      Object.defineProperty(exports, "LABELS", { enumerable: true, get: function() {
        return labels_1.LABELS;
      } });
      Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", { enumerable: true, get: function() {
        return labels_1.DEFAULT_LABEL_SETTINGS;
      } });
      var bsky_agent_1 = require_bsky_agent();
      Object.defineProperty(exports, "BskyAgent", { enumerable: true, get: function() {
        return bsky_agent_1.BskyAgent;
      } });
      var agent_1 = require_agent();
      Object.defineProperty(exports, "default", { enumerable: true, get: function() {
        return agent_1.AtpAgent;
      } });
    }
  });

  // coldsky/node_modules/varint/encode.js
  var require_encode = __commonJS({
    "coldsky/node_modules/varint/encode.js"(exports, module) {
      module.exports = encode13;
      var MSB5 = 128;
      var REST5 = 127;
      var MSBALL5 = ~REST5;
      var INT5 = Math.pow(2, 31);
      function encode13(num, out, offset) {
        if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
          encode13.bytes = 0;
          throw new RangeError("Could not encode varint");
        }
        out = out || [];
        offset = offset || 0;
        var oldOffset = offset;
        while (num >= INT5) {
          out[offset++] = num & 255 | MSB5;
          num /= 128;
        }
        while (num & MSBALL5) {
          out[offset++] = num & 255 | MSB5;
          num >>>= 7;
        }
        out[offset] = num | 0;
        encode13.bytes = offset - oldOffset + 1;
        return out;
      }
    }
  });

  // coldsky/node_modules/varint/decode.js
  var require_decode = __commonJS({
    "coldsky/node_modules/varint/decode.js"(exports, module) {
      module.exports = read6;
      var MSB5 = 128;
      var REST5 = 127;
      function read6(buf2, offset) {
        var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
        do {
          if (counter >= l || shift > 49) {
            read6.bytes = 0;
            throw new RangeError("Could not decode varint");
          }
          b = buf2[counter++];
          res += shift < 28 ? (b & REST5) << shift : (b & REST5) * Math.pow(2, shift);
          shift += 7;
        } while (b >= MSB5);
        read6.bytes = counter - offset;
        return res;
      }
    }
  });

  // coldsky/node_modules/varint/length.js
  var require_length = __commonJS({
    "coldsky/node_modules/varint/length.js"(exports, module) {
      var N15 = Math.pow(2, 7);
      var N25 = Math.pow(2, 14);
      var N35 = Math.pow(2, 21);
      var N45 = Math.pow(2, 28);
      var N55 = Math.pow(2, 35);
      var N65 = Math.pow(2, 42);
      var N75 = Math.pow(2, 49);
      var N85 = Math.pow(2, 56);
      var N95 = Math.pow(2, 63);
      module.exports = function(value) {
        return value < N15 ? 1 : value < N25 ? 2 : value < N35 ? 3 : value < N45 ? 4 : value < N55 ? 5 : value < N65 ? 6 : value < N75 ? 7 : value < N85 ? 8 : value < N95 ? 9 : 10;
      };
    }
  });

  // coldsky/node_modules/varint/index.js
  var require_varint = __commonJS({
    "coldsky/node_modules/varint/index.js"(exports, module) {
      module.exports = {
        encode: require_encode(),
        decode: require_decode(),
        encodingLength: require_length()
      };
    }
  });

  // src/index.js
  var import_react14 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // node_modules/react-router-dom/dist/index.js
  var React2 = __toESM(require_react());
  var ReactDOM = __toESM(require_react_dom());

  // node_modules/react-router/dist/index.js
  var React = __toESM(require_react());

  // node_modules/@remix-run/router/dist/router.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target2) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target2[key] = source[key];
          }
        }
      }
      return target2;
    };
    return _extends.apply(this, arguments);
  }
  var Action;
  (function(Action2) {
    Action2["Pop"] = "POP";
    Action2["Push"] = "PUSH";
    Action2["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var PopStateEventType = "popstate";
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createBrowserLocation(window2, globalHistory) {
      let {
        pathname,
        search: search2,
        hash: hash2
      } = window2.location;
      return createLocation(
        "",
        {
          pathname,
          search: search2,
          hash: hash2
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
  }
  function createHashHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createHashLocation(window2, globalHistory) {
      let {
        pathname = "/",
        search: search2 = "",
        hash: hash2 = ""
      } = parsePath(window2.location.hash.substr(1));
      if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
        pathname = "/" + pathname;
      }
      return createLocation(
        "",
        {
          pathname,
          search: search2,
          hash: hash2
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createHashHref(window2, to) {
      let base5 = window2.document.querySelector("base");
      let href = "";
      if (base5 && base5.getAttribute("href")) {
        let url = window2.location.href;
        let hashIndex = url.indexOf("#");
        href = hashIndex === -1 ? url : url.slice(0, hashIndex);
      }
      return href + "#" + (typeof to === "string" ? to : createPath(to));
    }
    function validateHashLocation(location2, to) {
      warning(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
    }
    return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location2, index) {
    return {
      usr: location2.state,
      key: location2.key,
      idx: index
    };
  }
  function createLocation(current, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location2 = _extends({
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    });
    return location2;
  }
  function createPath(_ref) {
    let {
      pathname = "/",
      search: search2 = "",
      hash: hash2 = ""
    } = _ref;
    if (search2 && search2 !== "?")
      pathname += search2.charAt(0) === "?" ? search2 : "?" + search2;
    if (hash2 && hash2 !== "#")
      pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substr(hashIndex);
        path = path.substr(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substr(searchIndex);
        path = path.substr(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener = null;
    let index = getIndex();
    if (index == null) {
      index = 0;
      globalHistory.replaceState(_extends({}, globalHistory.state, {
        idx: index
      }), "");
    }
    function getIndex() {
      let state = globalHistory.state || {
        idx: null
      };
      return state.idx;
    }
    function handlePop() {
      action = Action.Pop;
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index;
      index = nextIndex;
      if (listener) {
        listener({
          action,
          location: history.location,
          delta
        });
      }
    }
    function push(to, state) {
      action = Action.Push;
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index = getIndex() + 1;
      let historyState = getHistoryState(location2, index);
      let url = history.createHref(location2);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 1
        });
      }
    }
    function replace2(to, state) {
      action = Action.Replace;
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index = getIndex();
      let historyState = getHistoryState(location2, index);
      let url = history.createHref(location2);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 0
        });
      }
    }
    function createURL(to) {
      let base5 = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      href = href.replace(/ $/, "%20");
      invariant(base5, "No window.location.(origin|href) available to create URL for href: " + href);
      return new URL(href, base5);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace2,
      go(n) {
        return globalHistory.go(n);
      }
    };
    return history;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  var immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
  function isIndexRoute(route) {
    return route.index === true;
  }
  function convertRoutesToDataRoutes(routes, mapRouteProperties2, parentPath, manifest) {
    if (parentPath === void 0) {
      parentPath = [];
    }
    if (manifest === void 0) {
      manifest = {};
    }
    return routes.map((route, index) => {
      let treePath = [...parentPath, index];
      let id = typeof route.id === "string" ? route.id : treePath.join("-");
      invariant(route.index !== true || !route.children, "Cannot specify children on an index route");
      invariant(!manifest[id], 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`);
      if (isIndexRoute(route)) {
        let indexRoute = _extends({}, route, mapRouteProperties2(route), {
          id
        });
        manifest[id] = indexRoute;
        return indexRoute;
      } else {
        let pathOrLayoutRoute = _extends({}, route, mapRouteProperties2(route), {
          id,
          children: void 0
        });
        manifest[id] = pathOrLayoutRoute;
        if (route.children) {
          pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties2, treePath, manifest);
        }
        return pathOrLayoutRoute;
      }
    });
  }
  function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
      basename = "/";
    }
    let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location2.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i = 0; matches == null && i < branches.length; ++i) {
      let decoded = decodePath(pathname);
      matches = matchRouteBranch(branches[i], decoded);
    }
    return matches;
  }
  function convertRouteMatchToUiMatch(match2, loaderData) {
    let {
      route,
      pathname,
      params
    } = match2;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0)
      return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:[\w-]+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s) => s === "*";
  function computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a[a.length - 1] - b[b.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname) {
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i = 0; i < routesMeta.length; ++i) {
      let meta = routesMeta[i];
      let end = i === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match2 = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end
      }, remainingPathname);
      if (!match2)
        return null;
      Object.assign(matchedParams, match2.params);
      let route = meta.route;
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match2.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
        route
      });
      if (match2.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match2 = pathname.match(matcher);
    if (!match2)
      return null;
    let matchedPathname = match2[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match2.slice(1);
    let params = compiledParams.reduce((memo2, _ref, index) => {
      let {
        paramName,
        isOptional
      } = _ref;
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index];
      if (isOptional && !value) {
        memo2[paramName] = void 0;
      } else {
        memo2[paramName] = (value || "").replace(/%2F/g, "/");
      }
      return memo2;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end === void 0) {
      end = true;
    }
    warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
      params.push({
        paramName,
        isOptional: isOptional != null
      });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    });
    if (path.endsWith("*")) {
      params.push({
        paramName: "*"
      });
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else
      ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function decodePath(value) {
    try {
      return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error) {
      warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search: search2 = "",
      hash: hash2 = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search2),
      hash: normalizeHash(hash2)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char2, field, dest, path) {
    return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match2, index) => index === 0 || match2.route.path && match2.route.path.length > 0);
  }
  function getResolveToMatches(matches, v7_relativeSplatPath) {
    let pathMatches = getPathContributingMatches(matches);
    if (v7_relativeSplatPath) {
      return pathMatches.map((match2, idx) => idx === matches.length - 1 ? match2.pathname : match2.pathnameBase);
    }
    return pathMatches.map((match2) => match2.pathnameBase);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends({}, toArg);
      invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from7;
    if (toPathname == null) {
      from7 = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from7 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from7);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search2) => !search2 || search2 === "?" ? "" : search2.startsWith("?") ? search2 : "?" + search2;
  var normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
  var ErrorResponseImpl = class {
    constructor(status, statusText, data, internal) {
      if (internal === void 0) {
        internal = false;
      }
      this.status = status;
      this.statusText = statusText || "";
      this.internal = internal;
      if (data instanceof Error) {
        this.data = data.toString();
        this.error = data;
      } else {
        this.data = data;
      }
    }
  };
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = ["post", "put", "patch", "delete"];
  var validMutationMethods = new Set(validMutationMethodsArr);
  var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
  var redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
  var IDLE_NAVIGATION = {
    state: "idle",
    location: void 0,
    formMethod: void 0,
    formAction: void 0,
    formEncType: void 0,
    formData: void 0,
    json: void 0,
    text: void 0
  };
  var IDLE_FETCHER = {
    state: "idle",
    data: void 0,
    formMethod: void 0,
    formAction: void 0,
    formEncType: void 0,
    formData: void 0,
    json: void 0,
    text: void 0
  };
  var IDLE_BLOCKER = {
    state: "unblocked",
    proceed: void 0,
    reset: void 0,
    location: void 0
  };
  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var defaultMapRouteProperties = (route) => ({
    hasErrorBoundary: Boolean(route.hasErrorBoundary)
  });
  var TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
  function createRouter(init) {
    const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : void 0;
    const isBrowser4 = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
    const isServer = !isBrowser4;
    invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
    let mapRouteProperties2;
    if (init.mapRouteProperties) {
      mapRouteProperties2 = init.mapRouteProperties;
    } else if (init.detectErrorBoundary) {
      let detectErrorBoundary = init.detectErrorBoundary;
      mapRouteProperties2 = (route) => ({
        hasErrorBoundary: detectErrorBoundary(route)
      });
    } else {
      mapRouteProperties2 = defaultMapRouteProperties;
    }
    let manifest = {};
    let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties2, void 0, manifest);
    let inFlightDataRoutes;
    let basename = init.basename || "/";
    let future = _extends({
      v7_fetcherPersist: false,
      v7_normalizeFormMethod: false,
      v7_partialHydration: false,
      v7_prependBasename: false,
      v7_relativeSplatPath: false
    }, init.future);
    let unlistenHistory = null;
    let subscribers = /* @__PURE__ */ new Set();
    let savedScrollPositions2 = null;
    let getScrollRestorationKey = null;
    let getScrollPosition = null;
    let initialScrollRestored = init.hydrationData != null;
    let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
    let initialErrors = null;
    if (initialMatches == null) {
      let error = getInternalRouterError(404, {
        pathname: init.history.location.pathname
      });
      let {
        matches,
        route
      } = getShortCircuitMatches(dataRoutes);
      initialMatches = matches;
      initialErrors = {
        [route.id]: error
      };
    }
    let initialized;
    let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);
    let hasLoaders = initialMatches.some((m) => m.route.loader);
    if (hasLazyRoutes) {
      initialized = false;
    } else if (!hasLoaders) {
      initialized = true;
    } else if (future.v7_partialHydration) {
      let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;
      let errors = init.hydrationData ? init.hydrationData.errors : null;
      let isRouteInitialized = (m) => {
        if (!m.route.loader)
          return true;
        if (m.route.loader.hydrate === true)
          return false;
        return loaderData && loaderData[m.route.id] !== void 0 || errors && errors[m.route.id] !== void 0;
      };
      if (errors) {
        let idx = initialMatches.findIndex((m) => errors[m.route.id] !== void 0);
        initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);
      } else {
        initialized = initialMatches.every(isRouteInitialized);
      }
    } else {
      initialized = init.hydrationData != null;
    }
    let router;
    let state = {
      historyAction: init.history.action,
      location: init.history.location,
      matches: initialMatches,
      initialized,
      navigation: IDLE_NAVIGATION,
      // Don't restore on initial updateState() if we were SSR'd
      restoreScrollPosition: init.hydrationData != null ? false : null,
      preventScrollReset: false,
      revalidation: "idle",
      loaderData: init.hydrationData && init.hydrationData.loaderData || {},
      actionData: init.hydrationData && init.hydrationData.actionData || null,
      errors: init.hydrationData && init.hydrationData.errors || initialErrors,
      fetchers: /* @__PURE__ */ new Map(),
      blockers: /* @__PURE__ */ new Map()
    };
    let pendingAction = Action.Pop;
    let pendingPreventScrollReset = false;
    let pendingNavigationController;
    let pendingViewTransitionEnabled = false;
    let appliedViewTransitions = /* @__PURE__ */ new Map();
    let removePageHideEventListener = null;
    let isUninterruptedRevalidation = false;
    let isRevalidationRequired = false;
    let cancelledDeferredRoutes = [];
    let cancelledFetcherLoads = [];
    let fetchControllers = /* @__PURE__ */ new Map();
    let incrementingLoadId = 0;
    let pendingNavigationLoadId = -1;
    let fetchReloadIds = /* @__PURE__ */ new Map();
    let fetchRedirectIds = /* @__PURE__ */ new Set();
    let fetchLoadMatches = /* @__PURE__ */ new Map();
    let activeFetchers = /* @__PURE__ */ new Map();
    let deletedFetchers = /* @__PURE__ */ new Set();
    let activeDeferreds = /* @__PURE__ */ new Map();
    let blockerFunctions = /* @__PURE__ */ new Map();
    let ignoreNextHistoryUpdate = false;
    function initialize() {
      unlistenHistory = init.history.listen((_ref) => {
        let {
          action: historyAction,
          location: location2,
          delta
        } = _ref;
        if (ignoreNextHistoryUpdate) {
          ignoreNextHistoryUpdate = false;
          return;
        }
        warning(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
        let blockerKey = shouldBlockNavigation({
          currentLocation: state.location,
          nextLocation: location2,
          historyAction
        });
        if (blockerKey && delta != null) {
          ignoreNextHistoryUpdate = true;
          init.history.go(delta * -1);
          updateBlocker(blockerKey, {
            state: "blocked",
            location: location2,
            proceed() {
              updateBlocker(blockerKey, {
                state: "proceeding",
                proceed: void 0,
                reset: void 0,
                location: location2
              });
              init.history.go(delta);
            },
            reset() {
              let blockers = new Map(state.blockers);
              blockers.set(blockerKey, IDLE_BLOCKER);
              updateState({
                blockers
              });
            }
          });
          return;
        }
        return startNavigation(historyAction, location2);
      });
      if (isBrowser4) {
        restoreAppliedTransitions(routerWindow, appliedViewTransitions);
        let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);
        routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
        removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
      }
      if (!state.initialized) {
        startNavigation(Action.Pop, state.location, {
          initialHydration: true
        });
      }
      return router;
    }
    function dispose() {
      if (unlistenHistory) {
        unlistenHistory();
      }
      if (removePageHideEventListener) {
        removePageHideEventListener();
      }
      subscribers.clear();
      pendingNavigationController && pendingNavigationController.abort();
      state.fetchers.forEach((_, key) => deleteFetcher(key));
      state.blockers.forEach((_, key) => deleteBlocker(key));
    }
    function subscribe(fn) {
      subscribers.add(fn);
      return () => subscribers.delete(fn);
    }
    function updateState(newState, opts) {
      if (opts === void 0) {
        opts = {};
      }
      state = _extends({}, state, newState);
      let completedFetchers = [];
      let deletedFetchersKeys = [];
      if (future.v7_fetcherPersist) {
        state.fetchers.forEach((fetcher, key) => {
          if (fetcher.state === "idle") {
            if (deletedFetchers.has(key)) {
              deletedFetchersKeys.push(key);
            } else {
              completedFetchers.push(key);
            }
          }
        });
      }
      [...subscribers].forEach((subscriber) => subscriber(state, {
        deletedFetchers: deletedFetchersKeys,
        unstable_viewTransitionOpts: opts.viewTransitionOpts,
        unstable_flushSync: opts.flushSync === true
      }));
      if (future.v7_fetcherPersist) {
        completedFetchers.forEach((key) => state.fetchers.delete(key));
        deletedFetchersKeys.forEach((key) => deleteFetcher(key));
      }
    }
    function completeNavigation(location2, newState, _temp) {
      var _location$state, _location$state2;
      let {
        flushSync
      } = _temp === void 0 ? {} : _temp;
      let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location2.state) == null ? void 0 : _location$state._isRedirect) !== true;
      let actionData;
      if (newState.actionData) {
        if (Object.keys(newState.actionData).length > 0) {
          actionData = newState.actionData;
        } else {
          actionData = null;
        }
      } else if (isActionReload) {
        actionData = state.actionData;
      } else {
        actionData = null;
      }
      let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
      let blockers = state.blockers;
      if (blockers.size > 0) {
        blockers = new Map(blockers);
        blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));
      }
      let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location2.state) == null ? void 0 : _location$state2._isRedirect) !== true;
      if (inFlightDataRoutes) {
        dataRoutes = inFlightDataRoutes;
        inFlightDataRoutes = void 0;
      }
      if (isUninterruptedRevalidation)
        ;
      else if (pendingAction === Action.Pop)
        ;
      else if (pendingAction === Action.Push) {
        init.history.push(location2, location2.state);
      } else if (pendingAction === Action.Replace) {
        init.history.replace(location2, location2.state);
      }
      let viewTransitionOpts;
      if (pendingAction === Action.Pop) {
        let priorPaths = appliedViewTransitions.get(state.location.pathname);
        if (priorPaths && priorPaths.has(location2.pathname)) {
          viewTransitionOpts = {
            currentLocation: state.location,
            nextLocation: location2
          };
        } else if (appliedViewTransitions.has(location2.pathname)) {
          viewTransitionOpts = {
            currentLocation: location2,
            nextLocation: state.location
          };
        }
      } else if (pendingViewTransitionEnabled) {
        let toPaths = appliedViewTransitions.get(state.location.pathname);
        if (toPaths) {
          toPaths.add(location2.pathname);
        } else {
          toPaths = /* @__PURE__ */ new Set([location2.pathname]);
          appliedViewTransitions.set(state.location.pathname, toPaths);
        }
        viewTransitionOpts = {
          currentLocation: state.location,
          nextLocation: location2
        };
      }
      updateState(_extends({}, newState, {
        actionData,
        loaderData,
        historyAction: pendingAction,
        location: location2,
        initialized: true,
        navigation: IDLE_NAVIGATION,
        revalidation: "idle",
        restoreScrollPosition: getSavedScrollPosition(location2, newState.matches || state.matches),
        preventScrollReset,
        blockers
      }), {
        viewTransitionOpts,
        flushSync: flushSync === true
      });
      pendingAction = Action.Pop;
      pendingPreventScrollReset = false;
      pendingViewTransitionEnabled = false;
      isUninterruptedRevalidation = false;
      isRevalidationRequired = false;
      cancelledDeferredRoutes = [];
      cancelledFetcherLoads = [];
    }
    function navigate(to, opts) {
      return __async(this, null, function* () {
        if (typeof to === "number") {
          init.history.go(to);
          return;
        }
        let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
        let {
          path,
          submission,
          error
        } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
        let currentLocation = state.location;
        let nextLocation = createLocation(state.location, path, opts && opts.state);
        nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));
        let userReplace = opts && opts.replace != null ? opts.replace : void 0;
        let historyAction = Action.Push;
        if (userReplace === true) {
          historyAction = Action.Replace;
        } else if (userReplace === false)
          ;
        else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
          historyAction = Action.Replace;
        }
        let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
        let flushSync = (opts && opts.unstable_flushSync) === true;
        let blockerKey = shouldBlockNavigation({
          currentLocation,
          nextLocation,
          historyAction
        });
        if (blockerKey) {
          updateBlocker(blockerKey, {
            state: "blocked",
            location: nextLocation,
            proceed() {
              updateBlocker(blockerKey, {
                state: "proceeding",
                proceed: void 0,
                reset: void 0,
                location: nextLocation
              });
              navigate(to, opts);
            },
            reset() {
              let blockers = new Map(state.blockers);
              blockers.set(blockerKey, IDLE_BLOCKER);
              updateState({
                blockers
              });
            }
          });
          return;
        }
        return yield startNavigation(historyAction, nextLocation, {
          submission,
          // Send through the formData serialization error if we have one so we can
          // render at the right error boundary after we match routes
          pendingError: error,
          preventScrollReset,
          replace: opts && opts.replace,
          enableViewTransition: opts && opts.unstable_viewTransition,
          flushSync
        });
      });
    }
    function revalidate() {
      interruptActiveLoads();
      updateState({
        revalidation: "loading"
      });
      if (state.navigation.state === "submitting") {
        return;
      }
      if (state.navigation.state === "idle") {
        startNavigation(state.historyAction, state.location, {
          startUninterruptedRevalidation: true
        });
        return;
      }
      startNavigation(pendingAction || state.historyAction, state.navigation.location, {
        overrideNavigation: state.navigation
      });
    }
    function startNavigation(historyAction, location2, opts) {
      return __async(this, null, function* () {
        pendingNavigationController && pendingNavigationController.abort();
        pendingNavigationController = null;
        pendingAction = historyAction;
        isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
        saveScrollPosition(state.location, state.matches);
        pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
        pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let loadingNavigation = opts && opts.overrideNavigation;
        let matches = matchRoutes(routesToUse, location2, basename);
        let flushSync = (opts && opts.flushSync) === true;
        if (!matches) {
          let error = getInternalRouterError(404, {
            pathname: location2.pathname
          });
          let {
            matches: notFoundMatches,
            route
          } = getShortCircuitMatches(routesToUse);
          cancelActiveDeferreds();
          completeNavigation(location2, {
            matches: notFoundMatches,
            loaderData: {},
            errors: {
              [route.id]: error
            }
          }, {
            flushSync
          });
          return;
        }
        if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location2) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
          completeNavigation(location2, {
            matches
          }, {
            flushSync
          });
          return;
        }
        pendingNavigationController = new AbortController();
        let request = createClientSideRequest(init.history, location2, pendingNavigationController.signal, opts && opts.submission);
        let pendingActionData;
        let pendingError;
        if (opts && opts.pendingError) {
          pendingError = {
            [findNearestBoundary(matches).route.id]: opts.pendingError
          };
        } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
          let actionOutput = yield handleAction(request, location2, opts.submission, matches, {
            replace: opts.replace,
            flushSync
          });
          if (actionOutput.shortCircuited) {
            return;
          }
          pendingActionData = actionOutput.pendingActionData;
          pendingError = actionOutput.pendingActionError;
          loadingNavigation = getLoadingNavigation(location2, opts.submission);
          flushSync = false;
          request = new Request(request.url, {
            signal: request.signal
          });
        }
        let {
          shortCircuited,
          loaderData,
          errors
        } = yield handleLoaders(request, location2, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);
        if (shortCircuited) {
          return;
        }
        pendingNavigationController = null;
        completeNavigation(location2, _extends({
          matches
        }, pendingActionData ? {
          actionData: pendingActionData
        } : {}, {
          loaderData,
          errors
        }));
      });
    }
    function handleAction(request, location2, submission, matches, opts) {
      return __async(this, null, function* () {
        if (opts === void 0) {
          opts = {};
        }
        interruptActiveLoads();
        let navigation = getSubmittingNavigation(location2, submission);
        updateState({
          navigation
        }, {
          flushSync: opts.flushSync === true
        });
        let result;
        let actionMatch = getTargetMatch(matches, location2);
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
          result = {
            type: ResultType.error,
            error: getInternalRouterError(405, {
              method: request.method,
              pathname: location2.pathname,
              routeId: actionMatch.route.id
            })
          };
        } else {
          result = yield callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath);
          if (request.signal.aborted) {
            return {
              shortCircuited: true
            };
          }
        }
        if (isRedirectResult(result)) {
          let replace2;
          if (opts && opts.replace != null) {
            replace2 = opts.replace;
          } else {
            replace2 = result.location === state.location.pathname + state.location.search;
          }
          yield startRedirectNavigation(state, result, {
            submission,
            replace: replace2
          });
          return {
            shortCircuited: true
          };
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
          if ((opts && opts.replace) !== true) {
            pendingAction = Action.Push;
          }
          return {
            // Send back an empty object we can use to clear out any prior actionData
            pendingActionData: {},
            pendingActionError: {
              [boundaryMatch.route.id]: result.error
            }
          };
        }
        if (isDeferredResult(result)) {
          throw getInternalRouterError(400, {
            type: "defer-action"
          });
        }
        return {
          pendingActionData: {
            [actionMatch.route.id]: result.data
          }
        };
      });
    }
    function handleLoaders(request, location2, matches, overrideNavigation, submission, fetcherSubmission, replace2, initialHydration, flushSync, pendingActionData, pendingError) {
      return __async(this, null, function* () {
        let loadingNavigation = overrideNavigation || getLoadingNavigation(location2, submission);
        let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location2, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);
        cancelActiveDeferreds((routeId) => !(matches && matches.some((m) => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId));
        pendingNavigationLoadId = ++incrementingLoadId;
        if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
          let updatedFetchers2 = markFetchRedirectsDone();
          completeNavigation(location2, _extends({
            matches,
            loaderData: {},
            // Commit pending error if we're short circuiting
            errors: pendingError || null
          }, pendingActionData ? {
            actionData: pendingActionData
          } : {}, updatedFetchers2 ? {
            fetchers: new Map(state.fetchers)
          } : {}), {
            flushSync
          });
          return {
            shortCircuited: true
          };
        }
        if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {
          revalidatingFetchers.forEach((rf) => {
            let fetcher = state.fetchers.get(rf.key);
            let revalidatingFetcher = getLoadingFetcher(void 0, fetcher ? fetcher.data : void 0);
            state.fetchers.set(rf.key, revalidatingFetcher);
          });
          let actionData = pendingActionData || state.actionData;
          updateState(_extends({
            navigation: loadingNavigation
          }, actionData ? Object.keys(actionData).length === 0 ? {
            actionData: null
          } : {
            actionData
          } : {}, revalidatingFetchers.length > 0 ? {
            fetchers: new Map(state.fetchers)
          } : {}), {
            flushSync
          });
        }
        revalidatingFetchers.forEach((rf) => {
          if (fetchControllers.has(rf.key)) {
            abortFetcher(rf.key);
          }
          if (rf.controller) {
            fetchControllers.set(rf.key, rf.controller);
          }
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));
        if (pendingNavigationController) {
          pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        }
        let {
          results,
          loaderResults,
          fetcherResults
        } = yield callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
        if (request.signal.aborted) {
          return {
            shortCircuited: true
          };
        }
        if (pendingNavigationController) {
          pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        }
        revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
        let redirect2 = findRedirect(results);
        if (redirect2) {
          if (redirect2.idx >= matchesToLoad.length) {
            let fetcherKey = revalidatingFetchers[redirect2.idx - matchesToLoad.length].key;
            fetchRedirectIds.add(fetcherKey);
          }
          yield startRedirectNavigation(state, redirect2.result, {
            replace: replace2
          });
          return {
            shortCircuited: true
          };
        }
        let {
          loaderData,
          errors
        } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
        activeDeferreds.forEach((deferredData, routeId) => {
          deferredData.subscribe((aborted) => {
            if (aborted || deferredData.done) {
              activeDeferreds.delete(routeId);
            }
          });
        });
        if (future.v7_partialHydration && initialHydration && state.errors) {
          Object.entries(state.errors).filter((_ref2) => {
            let [id] = _ref2;
            return !matchesToLoad.some((m) => m.route.id === id);
          }).forEach((_ref3) => {
            let [routeId, error] = _ref3;
            errors = Object.assign(errors || {}, {
              [routeId]: error
            });
          });
        }
        let updatedFetchers = markFetchRedirectsDone();
        let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
        let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
        return _extends({
          loaderData,
          errors
        }, shouldUpdateFetchers ? {
          fetchers: new Map(state.fetchers)
        } : {});
      });
    }
    function fetch2(key, routeId, href, opts) {
      if (isServer) {
        throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
      }
      if (fetchControllers.has(key))
        abortFetcher(key);
      let flushSync = (opts && opts.unstable_flushSync) === true;
      let routesToUse = inFlightDataRoutes || dataRoutes;
      let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);
      let matches = matchRoutes(routesToUse, normalizedPath, basename);
      if (!matches) {
        setFetcherError(key, routeId, getInternalRouterError(404, {
          pathname: normalizedPath
        }), {
          flushSync
        });
        return;
      }
      let {
        path,
        submission,
        error
      } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
      if (error) {
        setFetcherError(key, routeId, error, {
          flushSync
        });
        return;
      }
      let match2 = getTargetMatch(matches, path);
      pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
      if (submission && isMutationMethod(submission.formMethod)) {
        handleFetcherAction(key, routeId, path, match2, matches, flushSync, submission);
        return;
      }
      fetchLoadMatches.set(key, {
        routeId,
        path
      });
      handleFetcherLoader(key, routeId, path, match2, matches, flushSync, submission);
    }
    function handleFetcherAction(key, routeId, path, match2, requestMatches, flushSync, submission) {
      return __async(this, null, function* () {
        interruptActiveLoads();
        fetchLoadMatches.delete(key);
        if (!match2.route.action && !match2.route.lazy) {
          let error = getInternalRouterError(405, {
            method: submission.formMethod,
            pathname: path,
            routeId
          });
          setFetcherError(key, routeId, error, {
            flushSync
          });
          return;
        }
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {
          flushSync
        });
        let abortController = new AbortController();
        let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let actionResult = yield callLoaderOrAction("action", fetchRequest, match2, requestMatches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath);
        if (fetchRequest.signal.aborted) {
          if (fetchControllers.get(key) === abortController) {
            fetchControllers.delete(key);
          }
          return;
        }
        if (future.v7_fetcherPersist && deletedFetchers.has(key)) {
          if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {
            updateFetcherState(key, getDoneFetcher(void 0));
            return;
          }
        } else {
          if (isRedirectResult(actionResult)) {
            fetchControllers.delete(key);
            if (pendingNavigationLoadId > originatingLoadId) {
              updateFetcherState(key, getDoneFetcher(void 0));
              return;
            } else {
              fetchRedirectIds.add(key);
              updateFetcherState(key, getLoadingFetcher(submission));
              return startRedirectNavigation(state, actionResult, {
                fetcherSubmission: submission
              });
            }
          }
          if (isErrorResult(actionResult)) {
            setFetcherError(key, routeId, actionResult.error);
            return;
          }
        }
        if (isDeferredResult(actionResult)) {
          throw getInternalRouterError(400, {
            type: "defer-action"
          });
        }
        let nextLocation = state.navigation.location || state.location;
        let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
        invariant(matches, "Didn't find any matches after fetcher action");
        let loadId = ++incrementingLoadId;
        fetchReloadIds.set(key, loadId);
        let loadFetcher = getLoadingFetcher(submission, actionResult.data);
        state.fetchers.set(key, loadFetcher);
        let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
          init.history,
          state,
          matches,
          submission,
          nextLocation,
          false,
          isRevalidationRequired,
          cancelledDeferredRoutes,
          cancelledFetcherLoads,
          deletedFetchers,
          fetchLoadMatches,
          fetchRedirectIds,
          routesToUse,
          basename,
          {
            [match2.route.id]: actionResult.data
          },
          void 0
          // No need to send through errors since we short circuit above
        );
        revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
          let staleKey = rf.key;
          let existingFetcher2 = state.fetchers.get(staleKey);
          let revalidatingFetcher = getLoadingFetcher(void 0, existingFetcher2 ? existingFetcher2.data : void 0);
          state.fetchers.set(staleKey, revalidatingFetcher);
          if (fetchControllers.has(staleKey)) {
            abortFetcher(staleKey);
          }
          if (rf.controller) {
            fetchControllers.set(staleKey, rf.controller);
          }
        });
        updateState({
          fetchers: new Map(state.fetchers)
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
        abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let {
          results,
          loaderResults,
          fetcherResults
        } = yield callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
        if (abortController.signal.aborted) {
          return;
        }
        abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        fetchReloadIds.delete(key);
        fetchControllers.delete(key);
        revalidatingFetchers.forEach((r2) => fetchControllers.delete(r2.key));
        let redirect2 = findRedirect(results);
        if (redirect2) {
          if (redirect2.idx >= matchesToLoad.length) {
            let fetcherKey = revalidatingFetchers[redirect2.idx - matchesToLoad.length].key;
            fetchRedirectIds.add(fetcherKey);
          }
          return startRedirectNavigation(state, redirect2.result);
        }
        let {
          loaderData,
          errors
        } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
        if (state.fetchers.has(key)) {
          let doneFetcher = getDoneFetcher(actionResult.data);
          state.fetchers.set(key, doneFetcher);
        }
        abortStaleFetchLoads(loadId);
        if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
          invariant(pendingAction, "Expected pending action");
          pendingNavigationController && pendingNavigationController.abort();
          completeNavigation(state.navigation.location, {
            matches,
            loaderData,
            errors,
            fetchers: new Map(state.fetchers)
          });
        } else {
          updateState({
            errors,
            loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),
            fetchers: new Map(state.fetchers)
          });
          isRevalidationRequired = false;
        }
      });
    }
    function handleFetcherLoader(key, routeId, path, match2, matches, flushSync, submission) {
      return __async(this, null, function* () {
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : void 0), {
          flushSync
        });
        let abortController = new AbortController();
        let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let result = yield callLoaderOrAction("loader", fetchRequest, match2, matches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath);
        if (isDeferredResult(result)) {
          result = (yield resolveDeferredData(result, fetchRequest.signal, true)) || result;
        }
        if (fetchControllers.get(key) === abortController) {
          fetchControllers.delete(key);
        }
        if (fetchRequest.signal.aborted) {
          return;
        }
        if (deletedFetchers.has(key)) {
          updateFetcherState(key, getDoneFetcher(void 0));
          return;
        }
        if (isRedirectResult(result)) {
          if (pendingNavigationLoadId > originatingLoadId) {
            updateFetcherState(key, getDoneFetcher(void 0));
            return;
          } else {
            fetchRedirectIds.add(key);
            yield startRedirectNavigation(state, result);
            return;
          }
        }
        if (isErrorResult(result)) {
          setFetcherError(key, routeId, result.error);
          return;
        }
        invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
        updateFetcherState(key, getDoneFetcher(result.data));
      });
    }
    function startRedirectNavigation(state2, redirect2, _temp2) {
      return __async(this, null, function* () {
        let {
          submission,
          fetcherSubmission,
          replace: replace2
        } = _temp2 === void 0 ? {} : _temp2;
        if (redirect2.revalidate) {
          isRevalidationRequired = true;
        }
        let redirectLocation = createLocation(state2.location, redirect2.location, {
          _isRedirect: true
        });
        invariant(redirectLocation, "Expected a location on the redirect navigation");
        if (isBrowser4) {
          let isDocumentReload = false;
          if (redirect2.reloadDocument) {
            isDocumentReload = true;
          } else if (ABSOLUTE_URL_REGEX.test(redirect2.location)) {
            const url = init.history.createURL(redirect2.location);
            isDocumentReload = // Hard reload if it's an absolute URL to a new origin
            url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
            stripBasename(url.pathname, basename) == null;
          }
          if (isDocumentReload) {
            if (replace2) {
              routerWindow.location.replace(redirect2.location);
            } else {
              routerWindow.location.assign(redirect2.location);
            }
            return;
          }
        }
        pendingNavigationController = null;
        let redirectHistoryAction = replace2 === true ? Action.Replace : Action.Push;
        let {
          formMethod,
          formAction,
          formEncType
        } = state2.navigation;
        if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {
          submission = getSubmissionFromNavigation(state2.navigation);
        }
        let activeSubmission = submission || fetcherSubmission;
        if (redirectPreserveMethodStatusCodes.has(redirect2.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {
          yield startNavigation(redirectHistoryAction, redirectLocation, {
            submission: _extends({}, activeSubmission, {
              formAction: redirect2.location
            }),
            // Preserve this flag across redirects
            preventScrollReset: pendingPreventScrollReset
          });
        } else {
          let overrideNavigation = getLoadingNavigation(redirectLocation, submission);
          yield startNavigation(redirectHistoryAction, redirectLocation, {
            overrideNavigation,
            // Send fetcher submissions through for shouldRevalidate
            fetcherSubmission,
            // Preserve this flag across redirects
            preventScrollReset: pendingPreventScrollReset
          });
        }
      });
    }
    function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
      return __async(this, null, function* () {
        let results = yield Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map((f) => {
          if (f.matches && f.match && f.controller) {
            return callLoaderOrAction("loader", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath);
          } else {
            let error = {
              type: ResultType.error,
              error: getInternalRouterError(404, {
                pathname: f.path
              })
            };
            return error;
          }
        })]);
        let loaderResults = results.slice(0, matchesToLoad.length);
        let fetcherResults = results.slice(matchesToLoad.length);
        yield Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f) => f.match), fetcherResults, fetchersToLoad.map((f) => f.controller ? f.controller.signal : null), true)]);
        return {
          results,
          loaderResults,
          fetcherResults
        };
      });
    }
    function interruptActiveLoads() {
      isRevalidationRequired = true;
      cancelledDeferredRoutes.push(...cancelActiveDeferreds());
      fetchLoadMatches.forEach((_, key) => {
        if (fetchControllers.has(key)) {
          cancelledFetcherLoads.push(key);
          abortFetcher(key);
        }
      });
    }
    function updateFetcherState(key, fetcher, opts) {
      if (opts === void 0) {
        opts = {};
      }
      state.fetchers.set(key, fetcher);
      updateState({
        fetchers: new Map(state.fetchers)
      }, {
        flushSync: (opts && opts.flushSync) === true
      });
    }
    function setFetcherError(key, routeId, error, opts) {
      if (opts === void 0) {
        opts = {};
      }
      let boundaryMatch = findNearestBoundary(state.matches, routeId);
      deleteFetcher(key);
      updateState({
        errors: {
          [boundaryMatch.route.id]: error
        },
        fetchers: new Map(state.fetchers)
      }, {
        flushSync: (opts && opts.flushSync) === true
      });
    }
    function getFetcher(key) {
      if (future.v7_fetcherPersist) {
        activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
        if (deletedFetchers.has(key)) {
          deletedFetchers.delete(key);
        }
      }
      return state.fetchers.get(key) || IDLE_FETCHER;
    }
    function deleteFetcher(key) {
      let fetcher = state.fetchers.get(key);
      if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {
        abortFetcher(key);
      }
      fetchLoadMatches.delete(key);
      fetchReloadIds.delete(key);
      fetchRedirectIds.delete(key);
      deletedFetchers.delete(key);
      state.fetchers.delete(key);
    }
    function deleteFetcherAndUpdateState(key) {
      if (future.v7_fetcherPersist) {
        let count = (activeFetchers.get(key) || 0) - 1;
        if (count <= 0) {
          activeFetchers.delete(key);
          deletedFetchers.add(key);
        } else {
          activeFetchers.set(key, count);
        }
      } else {
        deleteFetcher(key);
      }
      updateState({
        fetchers: new Map(state.fetchers)
      });
    }
    function abortFetcher(key) {
      let controller = fetchControllers.get(key);
      invariant(controller, "Expected fetch controller: " + key);
      controller.abort();
      fetchControllers.delete(key);
    }
    function markFetchersDone(keys) {
      for (let key of keys) {
        let fetcher = getFetcher(key);
        let doneFetcher = getDoneFetcher(fetcher.data);
        state.fetchers.set(key, doneFetcher);
      }
    }
    function markFetchRedirectsDone() {
      let doneKeys = [];
      let updatedFetchers = false;
      for (let key of fetchRedirectIds) {
        let fetcher = state.fetchers.get(key);
        invariant(fetcher, "Expected fetcher: " + key);
        if (fetcher.state === "loading") {
          fetchRedirectIds.delete(key);
          doneKeys.push(key);
          updatedFetchers = true;
        }
      }
      markFetchersDone(doneKeys);
      return updatedFetchers;
    }
    function abortStaleFetchLoads(landedId) {
      let yeetedKeys = [];
      for (let [key, id] of fetchReloadIds) {
        if (id < landedId) {
          let fetcher = state.fetchers.get(key);
          invariant(fetcher, "Expected fetcher: " + key);
          if (fetcher.state === "loading") {
            abortFetcher(key);
            fetchReloadIds.delete(key);
            yeetedKeys.push(key);
          }
        }
      }
      markFetchersDone(yeetedKeys);
      return yeetedKeys.length > 0;
    }
    function getBlocker(key, fn) {
      let blocker = state.blockers.get(key) || IDLE_BLOCKER;
      if (blockerFunctions.get(key) !== fn) {
        blockerFunctions.set(key, fn);
      }
      return blocker;
    }
    function deleteBlocker(key) {
      state.blockers.delete(key);
      blockerFunctions.delete(key);
    }
    function updateBlocker(key, newBlocker) {
      let blocker = state.blockers.get(key) || IDLE_BLOCKER;
      invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
      let blockers = new Map(state.blockers);
      blockers.set(key, newBlocker);
      updateState({
        blockers
      });
    }
    function shouldBlockNavigation(_ref4) {
      let {
        currentLocation,
        nextLocation,
        historyAction
      } = _ref4;
      if (blockerFunctions.size === 0) {
        return;
      }
      if (blockerFunctions.size > 1) {
        warning(false, "A router only supports one blocker at a time");
      }
      let entries = Array.from(blockerFunctions.entries());
      let [blockerKey, blockerFunction] = entries[entries.length - 1];
      let blocker = state.blockers.get(blockerKey);
      if (blocker && blocker.state === "proceeding") {
        return;
      }
      if (blockerFunction({
        currentLocation,
        nextLocation,
        historyAction
      })) {
        return blockerKey;
      }
    }
    function cancelActiveDeferreds(predicate) {
      let cancelledRouteIds = [];
      activeDeferreds.forEach((dfd, routeId) => {
        if (!predicate || predicate(routeId)) {
          dfd.cancel();
          cancelledRouteIds.push(routeId);
          activeDeferreds.delete(routeId);
        }
      });
      return cancelledRouteIds;
    }
    function enableScrollRestoration(positions, getPosition, getKey) {
      savedScrollPositions2 = positions;
      getScrollPosition = getPosition;
      getScrollRestorationKey = getKey || null;
      if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
        initialScrollRestored = true;
        let y = getSavedScrollPosition(state.location, state.matches);
        if (y != null) {
          updateState({
            restoreScrollPosition: y
          });
        }
      }
      return () => {
        savedScrollPositions2 = null;
        getScrollPosition = null;
        getScrollRestorationKey = null;
      };
    }
    function getScrollKey(location2, matches) {
      if (getScrollRestorationKey) {
        let key = getScrollRestorationKey(location2, matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData)));
        return key || location2.key;
      }
      return location2.key;
    }
    function saveScrollPosition(location2, matches) {
      if (savedScrollPositions2 && getScrollPosition) {
        let key = getScrollKey(location2, matches);
        savedScrollPositions2[key] = getScrollPosition();
      }
    }
    function getSavedScrollPosition(location2, matches) {
      if (savedScrollPositions2) {
        let key = getScrollKey(location2, matches);
        let y = savedScrollPositions2[key];
        if (typeof y === "number") {
          return y;
        }
      }
      return null;
    }
    function _internalSetRoutes(newRoutes) {
      manifest = {};
      inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties2, void 0, manifest);
    }
    router = {
      get basename() {
        return basename;
      },
      get future() {
        return future;
      },
      get state() {
        return state;
      },
      get routes() {
        return dataRoutes;
      },
      get window() {
        return routerWindow;
      },
      initialize,
      subscribe,
      enableScrollRestoration,
      navigate,
      fetch: fetch2,
      revalidate,
      // Passthrough to history-aware createHref used by useHref so we get proper
      // hash-aware URLs in DOM paths
      createHref: (to) => init.history.createHref(to),
      encodeLocation: (to) => init.history.encodeLocation(to),
      getFetcher,
      deleteFetcher: deleteFetcherAndUpdateState,
      dispose,
      getBlocker,
      deleteBlocker,
      _internalFetchControllers: fetchControllers,
      _internalActiveDeferreds: activeDeferreds,
      // TODO: Remove setRoutes, it's temporary to avoid dealing with
      // updating the tree while validating the update algorithm.
      _internalSetRoutes
    };
    return router;
  }
  var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
  function isSubmissionNavigation(opts) {
    return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
  }
  function normalizeTo(location2, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {
    let contextualMatches;
    let activeRouteMatch;
    if (fromRouteId) {
      contextualMatches = [];
      for (let match2 of matches) {
        contextualMatches.push(match2);
        if (match2.route.id === fromRouteId) {
          activeRouteMatch = match2;
          break;
        }
      }
    } else {
      contextualMatches = matches;
      activeRouteMatch = matches[matches.length - 1];
    }
    let path = resolveTo(to ? to : ".", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location2.pathname, basename) || location2.pathname, relative === "path");
    if (to == null) {
      path.search = location2.search;
      path.hash = location2.hash;
    }
    if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (prependBasename && basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
    if (!opts || !isSubmissionNavigation(opts)) {
      return {
        path
      };
    }
    if (opts.formMethod && !isValidMethod(opts.formMethod)) {
      return {
        path,
        error: getInternalRouterError(405, {
          method: opts.formMethod
        })
      };
    }
    let getInvalidBodyError = () => ({
      path,
      error: getInternalRouterError(400, {
        type: "invalid-body"
      })
    });
    let rawFormMethod = opts.formMethod || "get";
    let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
    let formAction = stripHashFromPath(path);
    if (opts.body !== void 0) {
      if (opts.formEncType === "text/plain") {
        if (!isMutationMethod(formMethod)) {
          return getInvalidBodyError();
        }
        let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
          Array.from(opts.body.entries()).reduce((acc, _ref5) => {
            let [name2, value] = _ref5;
            return "" + acc + name2 + "=" + value + "\n";
          }, "")
        ) : String(opts.body);
        return {
          path,
          submission: {
            formMethod,
            formAction,
            formEncType: opts.formEncType,
            formData: void 0,
            json: void 0,
            text
          }
        };
      } else if (opts.formEncType === "application/json") {
        if (!isMutationMethod(formMethod)) {
          return getInvalidBodyError();
        }
        try {
          let json2 = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
          return {
            path,
            submission: {
              formMethod,
              formAction,
              formEncType: opts.formEncType,
              formData: void 0,
              json: json2,
              text: void 0
            }
          };
        } catch (e) {
          return getInvalidBodyError();
        }
      }
    }
    invariant(typeof FormData === "function", "FormData is not available in this environment");
    let searchParams;
    let formData;
    if (opts.formData) {
      searchParams = convertFormDataToSearchParams(opts.formData);
      formData = opts.formData;
    } else if (opts.body instanceof FormData) {
      searchParams = convertFormDataToSearchParams(opts.body);
      formData = opts.body;
    } else if (opts.body instanceof URLSearchParams) {
      searchParams = opts.body;
      formData = convertSearchParamsToFormData(searchParams);
    } else if (opts.body == null) {
      searchParams = new URLSearchParams();
      formData = new FormData();
    } else {
      try {
        searchParams = new URLSearchParams(opts.body);
        formData = convertSearchParamsToFormData(searchParams);
      } catch (e) {
        return getInvalidBodyError();
      }
    }
    let submission = {
      formMethod,
      formAction,
      formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
      formData,
      json: void 0,
      text: void 0
    };
    if (isMutationMethod(submission.formMethod)) {
      return {
        path,
        submission
      };
    }
    let parsedPath = parsePath(path);
    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
      searchParams.append("index", "");
    }
    parsedPath.search = "?" + searchParams;
    return {
      path: createPath(parsedPath),
      submission
    };
  }
  function getLoaderMatchesUntilBoundary(matches, boundaryId) {
    let boundaryMatches = matches;
    if (boundaryId) {
      let index = matches.findIndex((m) => m.route.id === boundaryId);
      if (index >= 0) {
        boundaryMatches = matches.slice(0, index);
      }
    }
    return boundaryMatches;
  }
  function getMatchesToLoad(history, state, matches, submission, location2, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {
    let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0;
    let currentUrl = history.createURL(state.location);
    let nextUrl = history.createURL(location2);
    let boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0;
    let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);
    let navigationMatches = boundaryMatches.filter((match2, index) => {
      let {
        route
      } = match2;
      if (route.lazy) {
        return true;
      }
      if (route.loader == null) {
        return false;
      }
      if (isInitialLoad) {
        if (route.loader.hydrate) {
          return true;
        }
        return state.loaderData[route.id] === void 0 && // Don't re-run if the loader ran and threw an error
        (!state.errors || state.errors[route.id] === void 0);
      }
      if (isNewLoader(state.loaderData, state.matches[index], match2) || cancelledDeferredRoutes.some((id) => id === match2.route.id)) {
        return true;
      }
      let currentRouteMatch = state.matches[index];
      let nextRouteMatch = match2;
      return shouldRevalidateLoader(match2, _extends({
        currentUrl,
        currentParams: currentRouteMatch.params,
        nextUrl,
        nextParams: nextRouteMatch.params
      }, submission, {
        actionResult,
        defaultShouldRevalidate: (
          // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
          isRevalidationRequired || // Clicked the same link, resubmitted a GET form
          currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
          currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
        )
      }));
    });
    let revalidatingFetchers = [];
    fetchLoadMatches.forEach((f, key) => {
      if (isInitialLoad || !matches.some((m) => m.route.id === f.routeId) || deletedFetchers.has(key)) {
        return;
      }
      let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
      if (!fetcherMatches) {
        revalidatingFetchers.push({
          key,
          routeId: f.routeId,
          path: f.path,
          matches: null,
          match: null,
          controller: null
        });
        return;
      }
      let fetcher = state.fetchers.get(key);
      let fetcherMatch = getTargetMatch(fetcherMatches, f.path);
      let shouldRevalidate = false;
      if (fetchRedirectIds.has(key)) {
        shouldRevalidate = false;
      } else if (cancelledFetcherLoads.includes(key)) {
        shouldRevalidate = true;
      } else if (fetcher && fetcher.state !== "idle" && fetcher.data === void 0) {
        shouldRevalidate = isRevalidationRequired;
      } else {
        shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({
          currentUrl,
          currentParams: state.matches[state.matches.length - 1].params,
          nextUrl,
          nextParams: matches[matches.length - 1].params
        }, submission, {
          actionResult,
          defaultShouldRevalidate: isRevalidationRequired
        }));
      }
      if (shouldRevalidate) {
        revalidatingFetchers.push({
          key,
          routeId: f.routeId,
          path: f.path,
          matches: fetcherMatches,
          match: fetcherMatch,
          controller: new AbortController()
        });
      }
    });
    return [navigationMatches, revalidatingFetchers];
  }
  function isNewLoader(currentLoaderData, currentMatch, match2) {
    let isNew = (
      // [a] -> [a, b]
      !currentMatch || // [a, b] -> [a, c]
      match2.route.id !== currentMatch.route.id
    );
    let isMissingData = currentLoaderData[match2.route.id] === void 0;
    return isNew || isMissingData;
  }
  function isNewRouteInstance(currentMatch, match2) {
    let currentPath = currentMatch.route.path;
    return (
      // param change for this match, /users/123 -> /users/456
      currentMatch.pathname !== match2.pathname || // splat param changed, which is not present in match.path
      // e.g. /files/images/avatar.jpg -> files/finances.xls
      currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match2.params["*"]
    );
  }
  function shouldRevalidateLoader(loaderMatch, arg) {
    if (loaderMatch.route.shouldRevalidate) {
      let routeChoice = loaderMatch.route.shouldRevalidate(arg);
      if (typeof routeChoice === "boolean") {
        return routeChoice;
      }
    }
    return arg.defaultShouldRevalidate;
  }
  function loadLazyRouteModule(route, mapRouteProperties2, manifest) {
    return __async(this, null, function* () {
      if (!route.lazy) {
        return;
      }
      let lazyRoute = yield route.lazy();
      if (!route.lazy) {
        return;
      }
      let routeToUpdate = manifest[route.id];
      invariant(routeToUpdate, "No route found in manifest");
      let routeUpdates = {};
      for (let lazyRouteProperty in lazyRoute) {
        let staticRouteValue = routeToUpdate[lazyRouteProperty];
        let isPropertyStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
        // on the route updates
        lazyRouteProperty !== "hasErrorBoundary";
        warning(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
        if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {
          routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
        }
      }
      Object.assign(routeToUpdate, routeUpdates);
      Object.assign(routeToUpdate, _extends({}, mapRouteProperties2(routeToUpdate), {
        lazy: void 0
      }));
    });
  }
  function callLoaderOrAction(type, request, match2, matches, manifest, mapRouteProperties2, basename, v7_relativeSplatPath, opts) {
    return __async(this, null, function* () {
      if (opts === void 0) {
        opts = {};
      }
      let resultType;
      let result;
      let onReject;
      let runHandler = (handler) => {
        let reject;
        let abortPromise = new Promise((_, r2) => reject = r2);
        onReject = () => reject();
        request.signal.addEventListener("abort", onReject);
        return Promise.race([handler({
          request,
          params: match2.params,
          context: opts.requestContext
        }), abortPromise]);
      };
      try {
        let handler = match2.route[type];
        if (match2.route.lazy) {
          if (handler) {
            let handlerError;
            let values2 = yield Promise.all([
              // If the handler throws, don't let it immediately bubble out,
              // since we need to let the lazy() execution finish so we know if this
              // route has a boundary that can handle the error
              runHandler(handler).catch((e) => {
                handlerError = e;
              }),
              loadLazyRouteModule(match2.route, mapRouteProperties2, manifest)
            ]);
            if (handlerError) {
              throw handlerError;
            }
            result = values2[0];
          } else {
            yield loadLazyRouteModule(match2.route, mapRouteProperties2, manifest);
            handler = match2.route[type];
            if (handler) {
              result = yield runHandler(handler);
            } else if (type === "action") {
              let url = new URL(request.url);
              let pathname = url.pathname + url.search;
              throw getInternalRouterError(405, {
                method: request.method,
                pathname,
                routeId: match2.route.id
              });
            } else {
              return {
                type: ResultType.data,
                data: void 0
              };
            }
          }
        } else if (!handler) {
          let url = new URL(request.url);
          let pathname = url.pathname + url.search;
          throw getInternalRouterError(404, {
            pathname
          });
        } else {
          result = yield runHandler(handler);
        }
        invariant(result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match2.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
      } catch (e) {
        resultType = ResultType.error;
        result = e;
      } finally {
        if (onReject) {
          request.signal.removeEventListener("abort", onReject);
        }
      }
      if (isResponse(result)) {
        let status = result.status;
        if (redirectStatusCodes.has(status)) {
          let location2 = result.headers.get("Location");
          invariant(location2, "Redirects returned/thrown from loaders/actions must have a Location header");
          if (!ABSOLUTE_URL_REGEX.test(location2)) {
            location2 = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match2) + 1), basename, true, location2, v7_relativeSplatPath);
          } else if (!opts.isStaticRequest) {
            let currentUrl = new URL(request.url);
            let url = location2.startsWith("//") ? new URL(currentUrl.protocol + location2) : new URL(location2);
            let isSameBasename = stripBasename(url.pathname, basename) != null;
            if (url.origin === currentUrl.origin && isSameBasename) {
              location2 = url.pathname + url.search + url.hash;
            }
          }
          if (opts.isStaticRequest) {
            result.headers.set("Location", location2);
            throw result;
          }
          return {
            type: ResultType.redirect,
            status,
            location: location2,
            revalidate: result.headers.get("X-Remix-Revalidate") !== null,
            reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
          };
        }
        if (opts.isRouteRequest) {
          let queryRouteResponse = {
            type: resultType === ResultType.error ? ResultType.error : ResultType.data,
            response: result
          };
          throw queryRouteResponse;
        }
        let data;
        try {
          let contentType = result.headers.get("Content-Type");
          if (contentType && /\bapplication\/json\b/.test(contentType)) {
            if (result.body == null) {
              data = null;
            } else {
              data = yield result.json();
            }
          } else {
            data = yield result.text();
          }
        } catch (e) {
          return {
            type: ResultType.error,
            error: e
          };
        }
        if (resultType === ResultType.error) {
          return {
            type: resultType,
            error: new ErrorResponseImpl(status, result.statusText, data),
            headers: result.headers
          };
        }
        return {
          type: ResultType.data,
          data,
          statusCode: result.status,
          headers: result.headers
        };
      }
      if (resultType === ResultType.error) {
        return {
          type: resultType,
          error: result
        };
      }
      if (isDeferredData(result)) {
        var _result$init, _result$init2;
        return {
          type: ResultType.deferred,
          deferredData: result,
          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
          headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
        };
      }
      return {
        type: ResultType.data,
        data: result
      };
    });
  }
  function createClientSideRequest(history, location2, signal, submission) {
    let url = history.createURL(stripHashFromPath(location2)).toString();
    let init = {
      signal
    };
    if (submission && isMutationMethod(submission.formMethod)) {
      let {
        formMethod,
        formEncType
      } = submission;
      init.method = formMethod.toUpperCase();
      if (formEncType === "application/json") {
        init.headers = new Headers({
          "Content-Type": formEncType
        });
        init.body = JSON.stringify(submission.json);
      } else if (formEncType === "text/plain") {
        init.body = submission.text;
      } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {
        init.body = convertFormDataToSearchParams(submission.formData);
      } else {
        init.body = submission.formData;
      }
    }
    return new Request(url, init);
  }
  function convertFormDataToSearchParams(formData) {
    let searchParams = new URLSearchParams();
    for (let [key, value] of formData.entries()) {
      searchParams.append(key, typeof value === "string" ? value : value.name);
    }
    return searchParams;
  }
  function convertSearchParamsToFormData(searchParams) {
    let formData = new FormData();
    for (let [key, value] of searchParams.entries()) {
      formData.append(key, value);
    }
    return formData;
  }
  function processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
    let loaderData = {};
    let errors = null;
    let statusCode;
    let foundError = false;
    let loaderHeaders = {};
    results.forEach((result, index) => {
      let id = matchesToLoad[index].route.id;
      invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
      if (isErrorResult(result)) {
        let boundaryMatch = findNearestBoundary(matches, id);
        let error = result.error;
        if (pendingError) {
          error = Object.values(pendingError)[0];
          pendingError = void 0;
        }
        errors = errors || {};
        if (errors[boundaryMatch.route.id] == null) {
          errors[boundaryMatch.route.id] = error;
        }
        loaderData[id] = void 0;
        if (!foundError) {
          foundError = true;
          statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
        }
        if (result.headers) {
          loaderHeaders[id] = result.headers;
        }
      } else {
        if (isDeferredResult(result)) {
          activeDeferreds.set(id, result.deferredData);
          loaderData[id] = result.deferredData.data;
        } else {
          loaderData[id] = result.data;
        }
        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {
          statusCode = result.statusCode;
        }
        if (result.headers) {
          loaderHeaders[id] = result.headers;
        }
      }
    });
    if (pendingError) {
      errors = pendingError;
      loaderData[Object.keys(pendingError)[0]] = void 0;
    }
    return {
      loaderData,
      errors,
      statusCode: statusCode || 200,
      loaderHeaders
    };
  }
  function processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
    let {
      loaderData,
      errors
    } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
    for (let index = 0; index < revalidatingFetchers.length; index++) {
      let {
        key,
        match: match2,
        controller
      } = revalidatingFetchers[index];
      invariant(fetcherResults !== void 0 && fetcherResults[index] !== void 0, "Did not find corresponding fetcher result");
      let result = fetcherResults[index];
      if (controller && controller.signal.aborted) {
        continue;
      } else if (isErrorResult(result)) {
        let boundaryMatch = findNearestBoundary(state.matches, match2 == null ? void 0 : match2.route.id);
        if (!(errors && errors[boundaryMatch.route.id])) {
          errors = _extends({}, errors, {
            [boundaryMatch.route.id]: result.error
          });
        }
        state.fetchers.delete(key);
      } else if (isRedirectResult(result)) {
        invariant(false, "Unhandled fetcher revalidation redirect");
      } else if (isDeferredResult(result)) {
        invariant(false, "Unhandled fetcher deferred data");
      } else {
        let doneFetcher = getDoneFetcher(result.data);
        state.fetchers.set(key, doneFetcher);
      }
    }
    return {
      loaderData,
      errors
    };
  }
  function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
    let mergedLoaderData = _extends({}, newLoaderData);
    for (let match2 of matches) {
      let id = match2.route.id;
      if (newLoaderData.hasOwnProperty(id)) {
        if (newLoaderData[id] !== void 0) {
          mergedLoaderData[id] = newLoaderData[id];
        }
      } else if (loaderData[id] !== void 0 && match2.route.loader) {
        mergedLoaderData[id] = loaderData[id];
      }
      if (errors && errors.hasOwnProperty(id)) {
        break;
      }
    }
    return mergedLoaderData;
  }
  function findNearestBoundary(matches, routeId) {
    let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1) : [...matches];
    return eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) || matches[0];
  }
  function getShortCircuitMatches(routes) {
    let route = routes.length === 1 ? routes[0] : routes.find((r2) => r2.index || !r2.path || r2.path === "/") || {
      id: "__shim-error-route__"
    };
    return {
      matches: [{
        params: {},
        pathname: "",
        pathnameBase: "",
        route
      }],
      route
    };
  }
  function getInternalRouterError(status, _temp5) {
    let {
      pathname,
      routeId,
      method,
      type
    } = _temp5 === void 0 ? {} : _temp5;
    let statusText = "Unknown Server Error";
    let errorMessage = "Unknown @remix-run/router error";
    if (status === 400) {
      statusText = "Bad Request";
      if (method && pathname && routeId) {
        errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
      } else if (type === "defer-action") {
        errorMessage = "defer() is not supported in actions";
      } else if (type === "invalid-body") {
        errorMessage = "Unable to encode submission body";
      }
    } else if (status === 403) {
      statusText = "Forbidden";
      errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
    } else if (status === 404) {
      statusText = "Not Found";
      errorMessage = 'No route matches URL "' + pathname + '"';
    } else if (status === 405) {
      statusText = "Method Not Allowed";
      if (method && pathname && routeId) {
        errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
      } else if (method) {
        errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
      }
    }
    return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);
  }
  function findRedirect(results) {
    for (let i = results.length - 1; i >= 0; i--) {
      let result = results[i];
      if (isRedirectResult(result)) {
        return {
          result,
          idx: i
        };
      }
    }
  }
  function stripHashFromPath(path) {
    let parsedPath = typeof path === "string" ? parsePath(path) : path;
    return createPath(_extends({}, parsedPath, {
      hash: ""
    }));
  }
  function isHashChangeOnly(a, b) {
    if (a.pathname !== b.pathname || a.search !== b.search) {
      return false;
    }
    if (a.hash === "") {
      return b.hash !== "";
    } else if (a.hash === b.hash) {
      return true;
    } else if (b.hash !== "") {
      return true;
    }
    return false;
  }
  function isDeferredResult(result) {
    return result.type === ResultType.deferred;
  }
  function isErrorResult(result) {
    return result.type === ResultType.error;
  }
  function isRedirectResult(result) {
    return (result && result.type) === ResultType.redirect;
  }
  function isDeferredData(value) {
    let deferred = value;
    return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
  }
  function isResponse(value) {
    return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
  }
  function isValidMethod(method) {
    return validRequestMethods.has(method.toLowerCase());
  }
  function isMutationMethod(method) {
    return validMutationMethods.has(method.toLowerCase());
  }
  function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
    return __async(this, null, function* () {
      for (let index = 0; index < results.length; index++) {
        let result = results[index];
        let match2 = matchesToLoad[index];
        if (!match2) {
          continue;
        }
        let currentMatch = currentMatches.find((m) => m.route.id === match2.route.id);
        let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match2) && (currentLoaderData && currentLoaderData[match2.route.id]) !== void 0;
        if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
          let signal = signals[index];
          invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
          yield resolveDeferredData(result, signal, isFetcher).then((result2) => {
            if (result2) {
              results[index] = result2 || results[index];
            }
          });
        }
      }
    });
  }
  function resolveDeferredData(result, signal, unwrap) {
    return __async(this, null, function* () {
      if (unwrap === void 0) {
        unwrap = false;
      }
      let aborted = yield result.deferredData.resolveData(signal);
      if (aborted) {
        return;
      }
      if (unwrap) {
        try {
          return {
            type: ResultType.data,
            data: result.deferredData.unwrappedData
          };
        } catch (e) {
          return {
            type: ResultType.error,
            error: e
          };
        }
      }
      return {
        type: ResultType.data,
        data: result.deferredData.data
      };
    });
  }
  function hasNakedIndexQuery(search2) {
    return new URLSearchParams(search2).getAll("index").some((v) => v === "");
  }
  function getTargetMatch(matches, location2) {
    let search2 = typeof location2 === "string" ? parsePath(location2).search : location2.search;
    if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search2 || "")) {
      return matches[matches.length - 1];
    }
    let pathMatches = getPathContributingMatches(matches);
    return pathMatches[pathMatches.length - 1];
  }
  function getSubmissionFromNavigation(navigation) {
    let {
      formMethod,
      formAction,
      formEncType,
      text,
      formData,
      json: json2
    } = navigation;
    if (!formMethod || !formAction || !formEncType) {
      return;
    }
    if (text != null) {
      return {
        formMethod,
        formAction,
        formEncType,
        formData: void 0,
        json: void 0,
        text
      };
    } else if (formData != null) {
      return {
        formMethod,
        formAction,
        formEncType,
        formData,
        json: void 0,
        text: void 0
      };
    } else if (json2 !== void 0) {
      return {
        formMethod,
        formAction,
        formEncType,
        formData: void 0,
        json: json2,
        text: void 0
      };
    }
  }
  function getLoadingNavigation(location2, submission) {
    if (submission) {
      let navigation = {
        state: "loading",
        location: location2,
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text
      };
      return navigation;
    } else {
      let navigation = {
        state: "loading",
        location: location2,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0
      };
      return navigation;
    }
  }
  function getSubmittingNavigation(location2, submission) {
    let navigation = {
      state: "submitting",
      location: location2,
      formMethod: submission.formMethod,
      formAction: submission.formAction,
      formEncType: submission.formEncType,
      formData: submission.formData,
      json: submission.json,
      text: submission.text
    };
    return navigation;
  }
  function getLoadingFetcher(submission, data) {
    if (submission) {
      let fetcher = {
        state: "loading",
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text,
        data
      };
      return fetcher;
    } else {
      let fetcher = {
        state: "loading",
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0,
        data
      };
      return fetcher;
    }
  }
  function getSubmittingFetcher(submission, existingFetcher) {
    let fetcher = {
      state: "submitting",
      formMethod: submission.formMethod,
      formAction: submission.formAction,
      formEncType: submission.formEncType,
      formData: submission.formData,
      json: submission.json,
      text: submission.text,
      data: existingFetcher ? existingFetcher.data : void 0
    };
    return fetcher;
  }
  function getDoneFetcher(data) {
    let fetcher = {
      state: "idle",
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0,
      data
    };
    return fetcher;
  }
  function restoreAppliedTransitions(_window, transitions) {
    try {
      let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);
      if (sessionPositions) {
        let json2 = JSON.parse(sessionPositions);
        for (let [k, v] of Object.entries(json2 || {})) {
          if (v && Array.isArray(v)) {
            transitions.set(k, new Set(v || []));
          }
        }
      }
    } catch (e) {
    }
  }
  function persistAppliedTransitions(_window, transitions) {
    if (transitions.size > 0) {
      let json2 = {};
      for (let [k, v] of transitions) {
        json2[k] = [...v];
      }
      try {
        _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json2));
      } catch (error) {
        warning(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");
      }
    }
  }

  // node_modules/react-router/dist/index.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target2) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target2[key] = source[key];
          }
        }
      }
      return target2;
    };
    return _extends2.apply(this, arguments);
  }
  var DataRouterContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  var AwaitContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  if (true) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React.createContext(null);
  if (true) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      hash: hash2,
      pathname,
      search: search2
    } = useResolvedPath(to, {
      relative
    });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search: search2,
      hash: hash2
    });
  }
  function useInRouterContext() {
    return React.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    return React.useContext(LocationContext).location;
  }
  var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
  function useIsomorphicLayoutEffect(cb) {
    let isStatic = React.useContext(NavigationContext).static;
    if (!isStatic) {
      React.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let {
      isDataRoute
    } = React.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let dataRouterContext = React.useContext(DataRouterContext);
    let {
      basename,
      future,
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
    let activeRef = React.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (dataRouterContext == null && basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
    }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
    return navigate;
  }
  function useParams() {
    let {
      matches
    } = React.useContext(RouteContext);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      future
    } = React.useContext(NavigationContext);
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
    return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location2;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
      location2 = parsedLocationArg;
    } else {
      location2 = locationFromContext;
    }
    let pathname = location2.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
      let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
      let segments = pathname.replace(/^\//, "").split("/");
      remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches = matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning(parentRoute || matches != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" ') : void 0;
      true ? warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
      params: Object.assign({}, parentParams, match2.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
      ]),
      pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
      ])
    })), parentMatches, dataRouterState, future);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React.createElement(LocationContext.Provider, {
        value: {
          location: _extends2({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location2),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (true) {
      console.error("Error handled by React Router default ErrorBoundary:", error);
      devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return {
        error
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error !== void 0 ? props.error : state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
      return this.state.error !== void 0 ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
        value: this.props.routeContext
      }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      })) : this.props.children;
    }
  };
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match: match2,
      children
    } = _ref;
    let dataRouterContext = React.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
    }
    return /* @__PURE__ */ React.createElement(RouteContext.Provider, {
      value: routeContext
    }, children);
  }
  function _renderMatches(matches, parentMatches, dataRouterState, future) {
    var _dataRouterState2;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (future === void 0) {
      future = null;
    }
    if (matches == null) {
      var _dataRouterState;
      if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]));
      !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState && future && future.v7_partialHydration) {
      for (let i = 0; i < renderedMatches.length; i++) {
        let match2 = renderedMatches[i];
        if (match2.route.HydrateFallback || match2.route.hydrateFallbackElement) {
          fallbackIndex = i;
        }
        if (match2.route.id) {
          let {
            loaderData,
            errors: errors2
          } = dataRouterState;
          let needsToRunLoader = match2.route.loader && loaderData[match2.route.id] === void 0 && (!errors2 || errors2[match2.route.id] === void 0);
          if (match2.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight((outlet, match2, index) => {
      let error;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error = errors && match2.route.id ? errors[match2.route.id] : void 0;
        errorElement = match2.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index === 0) {
            warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match2.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
      let getChildren = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match2.route.Component) {
          children = /* @__PURE__ */ React.createElement(match2.route.Component, null);
        } else if (match2.route.element) {
          children = match2.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React.createElement(RenderedRoute, {
          match: match2,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children
        });
      };
      return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren(),
        routeContext: {
          outlet: null,
          matches: matches2,
          isDataRoute: true
        }
      }) : getChildren();
    }, null);
  }
  var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
    DataRouterHook3["UseBlocker"] = "useBlocker";
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
    DataRouterHook3["UseNavigateStable"] = "useNavigate";
    return DataRouterHook3;
  }(DataRouterHook || {});
  var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
    DataRouterStateHook3["UseBlocker"] = "useBlocker";
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook3["UseRouteId"] = "useRouteId";
    return DataRouterStateHook3;
  }(DataRouterStateHook || {});
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React.useContext(RouteContext);
    !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(DataRouterStateHook.UseRouteId);
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React.useMemo(() => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error = React.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error !== void 0) {
      return error;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends2({
          fromRouteId: id
        }, options));
      }
    }, [router, id]);
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      true ? warning(false, message) : void 0;
    }
  }
  var START_TRANSITION = "startTransition";
  var startTransitionImpl = React[START_TRANSITION];
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false,
      future
    } = _ref5;
    !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React.useMemo(() => ({
      basename,
      navigator: navigator2,
      static: staticProp,
      future: _extends2({
        v7_relativeSplatPath: false
      }, future)
    }), [basename, future, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search: search2 = "",
      hash: hash2 = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search: search2,
          hash: hash2,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search2, hash2, state, key, navigationType]);
    true ? warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search2 + hash2 + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
      children,
      value: locationContext
    }));
  }
  var neverSettledPromise = new Promise(() => {
  });
  function mapRouteProperties(route) {
    let updates = {
      // Note: this check also occurs in createRoutesFromChildren so update
      // there if you change this -- please and thank you!
      hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
    };
    if (route.Component) {
      if (true) {
        if (route.element) {
          true ? warning(false, "You should not include both `Component` and `element` on your route - `Component` will be used.") : void 0;
        }
      }
      Object.assign(updates, {
        element: /* @__PURE__ */ React.createElement(route.Component),
        Component: void 0
      });
    }
    if (route.HydrateFallback) {
      if (true) {
        if (route.hydrateFallbackElement) {
          true ? warning(false, "You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.") : void 0;
        }
      }
      Object.assign(updates, {
        hydrateFallbackElement: /* @__PURE__ */ React.createElement(route.HydrateFallback),
        HydrateFallback: void 0
      });
    }
    if (route.ErrorBoundary) {
      if (true) {
        if (route.errorElement) {
          true ? warning(false, "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.") : void 0;
        }
      }
      Object.assign(updates, {
        errorElement: /* @__PURE__ */ React.createElement(route.ErrorBoundary),
        ErrorBoundary: void 0
      });
    }
    return updates;
  }

  // node_modules/react-router-dom/dist/index.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target2) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target2[key] = source[key];
          }
        }
      }
      return target2;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target2 = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target2[key] = source[key];
    }
    return target2;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target2) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target2 || target2 === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  function createSearchParams(init) {
    if (init === void 0) {
      init = "";
    }
    return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo2, key) => {
      let value = init[key];
      return memo2.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);
    }, []));
  }
  function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
    let searchParams = createSearchParams(locationSearch);
    if (defaultSearchParams) {
      defaultSearchParams.forEach((_, key) => {
        if (!searchParams.has(key)) {
          defaultSearchParams.getAll(key).forEach((value) => {
            searchParams.append(key, value);
          });
        }
      });
    }
    return searchParams;
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      true ? warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target2, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target2)) {
      let attr = target2.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target2.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target2.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target2);
    } else if (isButtonElement(target2) || isInputElement(target2) && (target2.type === "submit" || target2.type === "image")) {
      let form = target2.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      let attr = target2.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target2.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target2.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target2);
      if (!isFormDataSubmitterSupported()) {
        let {
          name: name2,
          type,
          value
        } = target2;
        if (type === "image") {
          let prefix2 = name2 ? name2 + "." : "";
          formData.append(prefix2 + "x", "0");
          formData.append(prefix2 + "y", "0");
        } else if (name2) {
          formData.append(name2, value);
        }
      }
    } else if (isHtmlElement(target2)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target2;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return {
      action,
      method: method.toLowerCase(),
      encType,
      formData,
      body
    };
  }
  var _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"];
  var _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "unstable_viewTransition", "children"];
  var _excluded3 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "unstable_viewTransition"];
  var REACT_ROUTER_VERSION = "6";
  try {
    window.__reactRouterVersion = REACT_ROUTER_VERSION;
  } catch (e) {
  }
  function createBrowserRouter(routes, opts) {
    return createRouter({
      basename: opts == null ? void 0 : opts.basename,
      future: _extends3({}, opts == null ? void 0 : opts.future, {
        v7_prependBasename: true
      }),
      history: createBrowserHistory({
        window: opts == null ? void 0 : opts.window
      }),
      hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
      routes,
      mapRouteProperties,
      window: opts == null ? void 0 : opts.window
    }).initialize();
  }
  function createHashRouter(routes, opts) {
    return createRouter({
      basename: opts == null ? void 0 : opts.basename,
      future: _extends3({}, opts == null ? void 0 : opts.future, {
        v7_prependBasename: true
      }),
      history: createHashHistory({
        window: opts == null ? void 0 : opts.window
      }),
      hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
      routes,
      mapRouteProperties,
      window: opts == null ? void 0 : opts.window
    }).initialize();
  }
  function parseHydrationData() {
    var _window;
    let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
    if (state && state.errors) {
      state = _extends3({}, state, {
        errors: deserializeErrors(state.errors)
      });
    }
    return state;
  }
  function deserializeErrors(errors) {
    if (!errors)
      return null;
    let entries = Object.entries(errors);
    let serialized = {};
    for (let [key, val] of entries) {
      if (val && val.__type === "RouteErrorResponse") {
        serialized[key] = new ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);
      } else if (val && val.__type === "Error") {
        if (val.__subType) {
          let ErrorConstructor = window[val.__subType];
          if (typeof ErrorConstructor === "function") {
            try {
              let error = new ErrorConstructor(val.message);
              error.stack = "";
              serialized[key] = error;
            } catch (e) {
            }
          }
        }
        if (serialized[key] == null) {
          let error = new Error(val.message);
          error.stack = "";
          serialized[key] = error;
        }
      } else {
        serialized[key] = val;
      }
    }
    return serialized;
  }
  var ViewTransitionContext = /* @__PURE__ */ React2.createContext({
    isTransitioning: false
  });
  if (true) {
    ViewTransitionContext.displayName = "ViewTransition";
  }
  var FetchersContext = /* @__PURE__ */ React2.createContext(/* @__PURE__ */ new Map());
  if (true) {
    FetchersContext.displayName = "Fetchers";
  }
  var START_TRANSITION2 = "startTransition";
  var startTransitionImpl2 = React2[START_TRANSITION2];
  var FLUSH_SYNC = "flushSync";
  var flushSyncImpl = ReactDOM[FLUSH_SYNC];
  var USE_ID = "useId";
  var useIdImpl = React2[USE_ID];
  function startTransitionSafe(cb) {
    if (startTransitionImpl2) {
      startTransitionImpl2(cb);
    } else {
      cb();
    }
  }
  function flushSyncSafe(cb) {
    if (flushSyncImpl) {
      flushSyncImpl(cb);
    } else {
      cb();
    }
  }
  var Deferred = class {
    constructor() {
      this.status = "pending";
      this.promise = new Promise((resolve, reject) => {
        this.resolve = (value) => {
          if (this.status === "pending") {
            this.status = "resolved";
            resolve(value);
          }
        };
        this.reject = (reason) => {
          if (this.status === "pending") {
            this.status = "rejected";
            reject(reason);
          }
        };
      });
    }
  };
  function RouterProvider(_ref) {
    let {
      fallbackElement,
      router,
      future
    } = _ref;
    let [state, setStateImpl] = React2.useState(router.state);
    let [pendingState, setPendingState] = React2.useState();
    let [vtContext, setVtContext] = React2.useState({
      isTransitioning: false
    });
    let [renderDfd, setRenderDfd] = React2.useState();
    let [transition, setTransition] = React2.useState();
    let [interruption, setInterruption] = React2.useState();
    let fetcherData = React2.useRef(/* @__PURE__ */ new Map());
    let {
      v7_startTransition
    } = future || {};
    let optInStartTransition = React2.useCallback((cb) => {
      if (v7_startTransition) {
        startTransitionSafe(cb);
      } else {
        cb();
      }
    }, [v7_startTransition]);
    let setState = React2.useCallback((newState, _ref2) => {
      let {
        deletedFetchers,
        unstable_flushSync: flushSync,
        unstable_viewTransitionOpts: viewTransitionOpts
      } = _ref2;
      deletedFetchers.forEach((key) => fetcherData.current.delete(key));
      newState.fetchers.forEach((fetcher, key) => {
        if (fetcher.data !== void 0) {
          fetcherData.current.set(key, fetcher.data);
        }
      });
      let isViewTransitionUnavailable = router.window == null || typeof router.window.document.startViewTransition !== "function";
      if (!viewTransitionOpts || isViewTransitionUnavailable) {
        if (flushSync) {
          flushSyncSafe(() => setStateImpl(newState));
        } else {
          optInStartTransition(() => setStateImpl(newState));
        }
        return;
      }
      if (flushSync) {
        flushSyncSafe(() => {
          if (transition) {
            renderDfd && renderDfd.resolve();
            transition.skipTransition();
          }
          setVtContext({
            isTransitioning: true,
            flushSync: true,
            currentLocation: viewTransitionOpts.currentLocation,
            nextLocation: viewTransitionOpts.nextLocation
          });
        });
        let t = router.window.document.startViewTransition(() => {
          flushSyncSafe(() => setStateImpl(newState));
        });
        t.finished.finally(() => {
          flushSyncSafe(() => {
            setRenderDfd(void 0);
            setTransition(void 0);
            setPendingState(void 0);
            setVtContext({
              isTransitioning: false
            });
          });
        });
        flushSyncSafe(() => setTransition(t));
        return;
      }
      if (transition) {
        renderDfd && renderDfd.resolve();
        transition.skipTransition();
        setInterruption({
          state: newState,
          currentLocation: viewTransitionOpts.currentLocation,
          nextLocation: viewTransitionOpts.nextLocation
        });
      } else {
        setPendingState(newState);
        setVtContext({
          isTransitioning: true,
          flushSync: false,
          currentLocation: viewTransitionOpts.currentLocation,
          nextLocation: viewTransitionOpts.nextLocation
        });
      }
    }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);
    React2.useLayoutEffect(() => router.subscribe(setState), [router, setState]);
    React2.useEffect(() => {
      if (vtContext.isTransitioning && !vtContext.flushSync) {
        setRenderDfd(new Deferred());
      }
    }, [vtContext]);
    React2.useEffect(() => {
      if (renderDfd && pendingState && router.window) {
        let newState = pendingState;
        let renderPromise = renderDfd.promise;
        let transition2 = router.window.document.startViewTransition(() => __async(this, null, function* () {
          optInStartTransition(() => setStateImpl(newState));
          yield renderPromise;
        }));
        transition2.finished.finally(() => {
          setRenderDfd(void 0);
          setTransition(void 0);
          setPendingState(void 0);
          setVtContext({
            isTransitioning: false
          });
        });
        setTransition(transition2);
      }
    }, [optInStartTransition, pendingState, renderDfd, router.window]);
    React2.useEffect(() => {
      if (renderDfd && pendingState && state.location.key === pendingState.location.key) {
        renderDfd.resolve();
      }
    }, [renderDfd, transition, state.location, pendingState]);
    React2.useEffect(() => {
      if (!vtContext.isTransitioning && interruption) {
        setPendingState(interruption.state);
        setVtContext({
          isTransitioning: true,
          flushSync: false,
          currentLocation: interruption.currentLocation,
          nextLocation: interruption.nextLocation
        });
        setInterruption(void 0);
      }
    }, [vtContext.isTransitioning, interruption]);
    React2.useEffect(() => {
      true ? warning(fallbackElement == null || !router.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead") : void 0;
    }, []);
    let navigator2 = React2.useMemo(() => {
      return {
        createHref: router.createHref,
        encodeLocation: router.encodeLocation,
        go: (n) => router.navigate(n),
        push: (to, state2, opts) => router.navigate(to, {
          state: state2,
          preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
        }),
        replace: (to, state2, opts) => router.navigate(to, {
          replace: true,
          state: state2,
          preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
        })
      };
    }, [router]);
    let basename = router.basename || "/";
    let dataRouterContext = React2.useMemo(() => ({
      router,
      navigator: navigator2,
      static: false,
      basename
    }), [router, navigator2, basename]);
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(DataRouterContext.Provider, {
      value: dataRouterContext
    }, /* @__PURE__ */ React2.createElement(DataRouterStateContext.Provider, {
      value: state
    }, /* @__PURE__ */ React2.createElement(FetchersContext.Provider, {
      value: fetcherData.current
    }, /* @__PURE__ */ React2.createElement(ViewTransitionContext.Provider, {
      value: vtContext
    }, /* @__PURE__ */ React2.createElement(Router, {
      basename,
      location: state.location,
      navigationType: state.historyAction,
      navigator: navigator2,
      future: {
        v7_relativeSplatPath: router.future.v7_relativeSplatPath
      }
    }, state.initialized || router.future.v7_partialHydration ? /* @__PURE__ */ React2.createElement(DataRoutes, {
      routes: router.routes,
      future: router.future,
      state
    }) : fallbackElement))))), null);
  }
  function DataRoutes(_ref3) {
    let {
      routes,
      future,
      state
    } = _ref3;
    return useRoutesImpl(routes, void 0, state, future);
  }
  function HistoryRouter(_ref6) {
    let {
      basename,
      children,
      future,
      history
    } = _ref6;
    let [state, setStateImpl] = React2.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React2.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React2.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React2.createElement(Router, {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history,
      future
    });
  }
  if (true) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link = /* @__PURE__ */ React2.forwardRef(function LinkWithRef(_ref7, ref) {
    let {
      onClick,
      relative,
      reloadDocument,
      replace: replace2,
      state,
      target: target2,
      to,
      preventScrollReset,
      unstable_viewTransition
    } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to)) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path != null) {
            to = path + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e) {
          true ? warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
        }
      }
    }
    let href = useHref(to, {
      relative
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target: target2,
      preventScrollReset,
      relative,
      unstable_viewTransition
    });
    function handleClick(event) {
      if (onClick)
        onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React2.createElement("a", _extends3({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref,
        target: target2
      }))
    );
  });
  if (true) {
    Link.displayName = "Link";
  }
  var NavLink = /* @__PURE__ */ React2.forwardRef(function NavLinkWithRef(_ref8, ref) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      unstable_viewTransition,
      children
    } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
    let path = useResolvedPath(to, {
      relative: rest.relative
    });
    let location2 = useLocation();
    let routerState = React2.useContext(DataRouterStateContext);
    let {
      navigator: navigator2,
      basename
    } = React2.useContext(NavigationContext);
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useViewTransitionState(path) && unstable_viewTransition === true;
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location2.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    if (nextLocationPathname && basename) {
      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
    }
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
      isActive,
      isPending,
      isTransitioning
    };
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp(renderProps);
    } else {
      className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
    }
    let style3 = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /* @__PURE__ */ React2.createElement(Link, _extends3({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref,
      style: style3,
      to,
      unstable_viewTransition
    }), typeof children === "function" ? children(renderProps) : children);
  });
  if (true) {
    NavLink.displayName = "NavLink";
  }
  var Form = /* @__PURE__ */ React2.forwardRef((_ref9, forwardedRef) => {
    let {
      fetcherKey,
      navigate,
      reloadDocument,
      replace: replace2,
      state,
      method = defaultMethod,
      action,
      onSubmit,
      relative,
      preventScrollReset,
      unstable_viewTransition
    } = _ref9, props = _objectWithoutPropertiesLoose(_ref9, _excluded3);
    let submit = useSubmit();
    let formAction = useFormAction(action, {
      relative
    });
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
      submit(submitter || event.currentTarget, {
        fetcherKey,
        method: submitMethod,
        navigate,
        replace: replace2,
        state,
        relative,
        preventScrollReset,
        unstable_viewTransition
      });
    };
    return /* @__PURE__ */ React2.createElement("form", _extends3({
      ref: forwardedRef,
      method: formMethod,
      action: formAction,
      onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
  });
  if (true) {
    Form.displayName = "Form";
  }
  function ScrollRestoration(_ref10) {
    let {
      getKey,
      storageKey
    } = _ref10;
    useScrollRestoration({
      getKey,
      storageKey
    });
    return null;
  }
  if (true) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmit"] = "useSubmit";
    DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook3["UseFetcher"] = "useFetcher";
    DataRouterHook3["useViewTransitionState"] = "useViewTransitionState";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetcher"] = "useFetcher";
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext2(hookName) {
    let ctx = React2.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React2.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target: target2,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative,
      unstable_viewTransition
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location2 = useLocation();
    let path = useResolvedPath(to, {
      relative
    });
    return React2.useCallback((event) => {
      if (shouldProcessLinkClick(event, target2)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative,
          unstable_viewTransition
        });
      }
    }, [location2, navigate, path, replaceProp, state, target2, to, preventScrollReset, relative, unstable_viewTransition]);
  }
  function useSearchParams(defaultInit) {
    true ? warning(typeof URLSearchParams !== "undefined", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.") : void 0;
    let defaultSearchParamsRef = React2.useRef(createSearchParams(defaultInit));
    let hasSetSearchParamsRef = React2.useRef(false);
    let location2 = useLocation();
    let searchParams = React2.useMemo(() => (
      // Only merge in the defaults if we haven't yet called setSearchParams.
      // Once we call that we want those to take precedence, otherwise you can't
      // remove a param with setSearchParams({}) if it has an initial value
      getSearchParamsForLocation(location2.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
    ), [location2.search]);
    let navigate = useNavigate();
    let setSearchParams = React2.useCallback((nextInit, navigateOptions) => {
      const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
      hasSetSearchParamsRef.current = true;
      navigate("?" + newSearchParams, navigateOptions);
    }, [navigate, searchParams]);
    return [searchParams, setSearchParams];
  }
  function validateClientSideSubmission() {
    if (typeof document === "undefined") {
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    }
  }
  var fetcherId = 0;
  var getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
  function useSubmit() {
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseSubmit);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React2.useCallback(function(target2, options) {
      if (options === void 0) {
        options = {};
      }
      validateClientSideSubmission();
      let {
        action,
        method,
        encType,
        formData,
        body
      } = getFormSubmissionInfo(target2, basename);
      if (options.navigate === false) {
        let key = options.fetcherKey || getUniqueFetcherId();
        router.fetch(key, currentRouteId, options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          unstable_flushSync: options.unstable_flushSync
        });
      } else {
        router.navigate(options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          replace: options.replace,
          state: options.state,
          fromRouteId: currentRouteId,
          unstable_flushSync: options.unstable_flushSync,
          unstable_viewTransition: options.unstable_viewTransition
        });
      }
    }, [router, basename, currentRouteId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename
    } = React2.useContext(NavigationContext);
    let routeContext = React2.useContext(RouteContext);
    !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
    let [match2] = routeContext.matches.slice(-1);
    let path = _extends3({}, useResolvedPath(action ? action : ".", {
      relative
    }));
    let location2 = useLocation();
    if (action == null) {
      path.search = location2.search;
      let params = new URLSearchParams(path.search);
      if (params.has("index") && params.get("index") === "") {
        params.delete("index");
        path.search = params.toString() ? "?" + params.toString() : "";
      }
    }
    if ((!action || action === ".") && match2.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function useScrollRestoration(_temp4) {
    let {
      getKey,
      storageKey
    } = _temp4 === void 0 ? {} : _temp4;
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let location2 = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React2.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(React2.useCallback(() => {
      if (navigation.state === "idle") {
        let key = (getKey ? getKey(location2, matches) : null) || location2.key;
        savedScrollPositions[key] = window.scrollY;
      }
      try {
        sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      } catch (error) {
        true ? warning(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").") : void 0;
      }
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey, navigation.state, location2, matches]));
    if (typeof document !== "undefined") {
      React2.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e) {
        }
      }, [storageKey]);
      React2.useLayoutEffect(() => {
        let getKeyWithoutBasename = getKey && basename !== "/" ? (location3, matches2) => getKey(
          // Strip the basename to match useLocation()
          _extends3({}, location3, {
            pathname: stripBasename(location3.pathname, basename) || location3.pathname
          }),
          matches2
        ) : getKey;
        let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey]);
      React2.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location2.hash) {
          let el = document.getElementById(decodeURIComponent(location2.hash.slice(1)));
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location2, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let {
      capture
    } = options || {};
    React2.useEffect(() => {
      let opts = capture != null ? {
        capture
      } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }
  function useViewTransitionState(to, opts) {
    if (opts === void 0) {
      opts = {};
    }
    let vtContext = React2.useContext(ViewTransitionContext);
    !(vtContext != null) ? true ? invariant(false, "`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : invariant(false) : void 0;
    let {
      basename
    } = useDataRouterContext2(DataRouterHook2.useViewTransitionState);
    let path = useResolvedPath(to, {
      relative: opts.relative
    });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
  }

  // node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@mui/material/styles/identifier.js
  var identifier_default = "$$material";

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target2 = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target2[key] = source[key];
    }
    return target2;
  }

  // node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var React8 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_styled_engine2 = __toESM(require_node());

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  init_extends();
  var import_deepmerge2 = __toESM(require_deepmerge2());

  // node_modules/@mui/system/esm/createTheme/createBreakpoints.js
  init_extends();
  var _excluded4 = ["values", "unit", "step"];
  var sortBreakpointsValues = (values2) => {
    const breakpointsAsArray = Object.keys(values2).map((key) => ({
      key,
      val: values2[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends4({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values2 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5
    } = breakpoints, other = _objectWithoutPropertiesLoose2(breakpoints, _excluded4);
    const sortedValues = sortBreakpointsValues(values2);
    const keys = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start, end) {
      const endIndex = keys.indexOf(end);
      return `@media (min-width:${typeof values2[start] === "number" ? values2[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys[endIndex]] === "number" ? values2[keys[endIndex]] : end) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys.indexOf(key);
      if (keyIndex === 0) {
        return up(keys[1]);
      }
      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }
      return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends4({
      keys,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }

  // node_modules/@mui/system/esm/createTheme/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // node_modules/@mui/system/esm/responsivePropType.js
  var import_prop_types = __toESM(require_prop_types());
  var responsivePropType = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.object, import_prop_types.default.array]) : {};
  var responsivePropType_default = responsivePropType;

  // node_modules/@mui/system/esm/breakpoints.js
  init_extends();

  // node_modules/@mui/system/esm/merge.js
  var import_deepmerge = __toESM(require_deepmerge2());
  function merge2(acc, item) {
    if (!item) {
      return acc;
    }
    return (0, import_deepmerge.default)(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  var merge_default = merge2;

  // node_modules/@mui/system/esm/breakpoints.js
  var values = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  var defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style3) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style3);
  }

  // node_modules/@mui/system/esm/style.js
  var import_capitalize = __toESM(require_capitalize2());
  function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, import_capitalize.default)(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = true ? {
      [prop]: responsivePropType_default
    } : {};
    fn.filterProps = [prop];
    return fn;
  }
  var style_default = style;

  // node_modules/@mui/system/esm/memoize.js
  function memoize2(fn) {
    const cache2 = {};
    return (arg) => {
      if (cache2[arg] === void 0) {
        cache2[arg] = fn(arg);
      }
      return cache2[arg];
    };
  }

  // node_modules/@mui/system/esm/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize2((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property = properties[a];
    const direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
  });
  var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  var spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys, prop, transformer) {
    if (keys.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style2(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge_default, {});
  }
  function margin(props) {
    return style2(props, marginKeys);
  }
  margin.propTypes = true ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style2(props, paddingKeys);
  }
  padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style2(props, spacingKeys);
  }
  spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;

  // node_modules/@mui/system/esm/createTheme/createSpacing.js
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing2 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing2.mui = true;
    return spacing2;
  }

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  var import_capitalize2 = __toESM(require_capitalize2());

  // node_modules/@mui/system/esm/compose.js
  function compose(...styles4) {
    const handlers = styles4.reduce((acc, style3) => {
      style3.filterProps.forEach((prop) => {
        acc[prop] = style3;
      });
      return acc;
    }, {});
    const fn = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn.propTypes = true ? styles4.reduce((acc, style3) => Object.assign(acc, style3.propTypes), {}) : {};
    fn.filterProps = styles4.reduce((acc, style3) => acc.concat(style3.filterProps), []);
    return fn;
  }
  var compose_default = compose;

  // node_modules/@mui/system/esm/borders.js
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  function createBorderStyle(prop, transform) {
    return style_default({
      prop,
      themeKey: "borders",
      transform
    });
  }
  var border = createBorderStyle("border", borderTransform);
  var borderTop = createBorderStyle("borderTop", borderTransform);
  var borderRight = createBorderStyle("borderRight", borderTransform);
  var borderBottom = createBorderStyle("borderBottom", borderTransform);
  var borderLeft = createBorderStyle("borderLeft", borderTransform);
  var borderColor = createBorderStyle("borderColor");
  var borderTopColor = createBorderStyle("borderTopColor");
  var borderRightColor = createBorderStyle("borderRightColor");
  var borderBottomColor = createBorderStyle("borderBottomColor");
  var borderLeftColor = createBorderStyle("borderLeftColor");
  var outline = createBorderStyle("outline", borderTransform);
  var outlineColor = createBorderStyle("outlineColor");
  var borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = true ? {
    borderRadius: responsivePropType_default
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

  // node_modules/@mui/system/esm/cssGrid.js
  var gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = true ? {
    gap: responsivePropType_default
  } : {};
  gap.filterProps = ["gap"];
  var columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = true ? {
    columnGap: responsivePropType_default
  } : {};
  columnGap.filterProps = ["columnGap"];
  var rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = true ? {
    rowGap: responsivePropType_default
  } : {};
  rowGap.filterProps = ["rowGap"];
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

  // node_modules/@mui/system/esm/palette.js
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  var color = style_default({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var backgroundColor = style_default({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var palette = compose_default(color, bgcolor, backgroundColor);

  // node_modules/@mui/system/esm/sizing.js
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  var width = style_default({
    prop: "width",
    transform: sizingTransform
  });
  var maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme2;
        const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform(propValue)
          };
        }
        if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  var minWidth = style_default({
    prop: "minWidth",
    transform: sizingTransform
  });
  var height = style_default({
    prop: "height",
    transform: sizingTransform
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform: sizingTransform
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform: sizingTransform
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

  // node_modules/@mui/system/esm/styleFunctionSx/defaultSxConfig.js
  var defaultSxConfig = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    outline: {
      themeKey: "borders",
      transform: borderTransform
    },
    outlineColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    // spacing
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    // typography
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  var defaultSxConfig_default = defaultSxConfig;

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue(prop, val, theme, config) {
      const props = {
        [prop]: val,
        theme
      };
      const options = config[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style3
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme, themeKey) || {};
      if (style3) {
        return style3(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, import_capitalize2.default)(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx3(props) {
      var _theme$unstable_sxCon;
      const {
        sx,
        theme = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig_default;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css2 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config[styleKey]) {
                css2 = merge_default(css2, getThemeValue(styleKey, value, theme, config));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css2[styleKey] = styleFunctionSx3({
                    sx: value,
                    theme
                  });
                } else {
                  css2 = merge_default(css2, breakpointsValues);
                }
              }
            } else {
              css2 = merge_default(css2, getThemeValue(styleKey, value, theme, config));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css2);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx3;
  }
  var styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  var styleFunctionSx_default = styleFunctionSx;

  // node_modules/@mui/system/esm/createTheme/applyStyles.js
  function applyStyles(key, styles4) {
    const theme = this;
    if (theme.vars && typeof theme.getColorSchemeSelector === "function") {
      const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
      return {
        [selector]: styles4
      };
    }
    if (theme.palette.mode === key) {
      return styles4;
    }
    return {};
  }

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  var _excluded5 = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose2(options, _excluded5);
    const breakpoints = createBreakpoints(breakpointsInput);
    const spacing2 = createSpacing(spacingInput);
    let muiTheme = (0, import_deepmerge2.default)({
      breakpoints,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: _extends4({
        mode: "light"
      }, paletteInput),
      spacing: spacing2,
      shape: _extends4({}, shape_default, shapeInput)
    }, other);
    muiTheme.applyStyles = applyStyles;
    muiTheme = args.reduce((acc, argument) => (0, import_deepmerge2.default)(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = _extends4({}, defaultSxConfig_default, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/system/esm/useThemeWithoutDefault.js
  var React7 = __toESM(require_react());
  var import_styled_engine = __toESM(require_node());
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme3(defaultTheme2 = null) {
    const contextTheme = React7.useContext(import_styled_engine.ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme2 : contextTheme;
  }
  var useThemeWithoutDefault_default = useTheme3;

  // node_modules/@mui/system/esm/useTheme.js
  var systemDefaultTheme = createTheme_default();
  function useTheme4(defaultTheme2 = systemDefaultTheme) {
    return useThemeWithoutDefault_default(defaultTheme2);
  }
  var useTheme_default = useTheme4;

  // node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function GlobalStyles({
    styles: styles4,
    themeId,
    defaultTheme: defaultTheme2 = {}
  }) {
    const upperTheme = useTheme_default(defaultTheme2);
    const globalStyles = typeof styles4 === "function" ? styles4(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles4;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_styled_engine2.GlobalStyles, {
      styles: globalStyles
    });
  }
  true ? GlobalStyles.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    defaultTheme: import_prop_types2.default.object,
    /**
     * @ignore
     */
    styles: import_prop_types2.default.oneOfType([import_prop_types2.default.array, import_prop_types2.default.func, import_prop_types2.default.number, import_prop_types2.default.object, import_prop_types2.default.string, import_prop_types2.default.bool]),
    /**
     * @ignore
     */
    themeId: import_prop_types2.default.string
  } : void 0;
  var GlobalStyles_default = GlobalStyles;

  // node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js
  var defaultGenerator = (componentName) => componentName;
  var createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  var ClassNameGenerator = createClassNameGenerator();
  var ClassNameGenerator_default = ClassNameGenerator;

  // node_modules/clsx/dist/clsx.mjs
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e)
      n += e;
    else if ("object" == typeof e)
      if (Array.isArray(e)) {
        var o = e.length;
        for (t = 0; t < o; t++)
          e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
      } else
        for (f in e)
          e[f] && (n && (n += " "), n += f);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
      (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }
  var clsx_default = clsx;

  // node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js
  var globalStateClasses = {
    active: "active",
    checked: "checked",
    completed: "completed",
    disabled: "disabled",
    error: "error",
    expanded: "expanded",
    focused: "focused",
    focusVisible: "focusVisible",
    open: "open",
    readOnly: "readOnly",
    required: "required",
    selected: "selected"
  };
  function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
    const globalStateClass = globalStateClasses[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
  }

  // node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js
  function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
    });
    return result;
  }

  // node_modules/@mui/utils/resolveProps/resolveProps.js
  init_extends();
  function resolveProps(defaultProps, props) {
    const output = _extends4({}, props);
    Object.keys(defaultProps).forEach((propName) => {
      if (propName.toString().match(/^(components|slots)$/)) {
        output[propName] = _extends4({}, defaultProps[propName], output[propName]);
      } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
        const defaultSlotProps = defaultProps[propName] || {};
        const slotProps = props[propName];
        output[propName] = {};
        if (!slotProps || !Object.keys(slotProps)) {
          output[propName] = defaultSlotProps;
        } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
          output[propName] = slotProps;
        } else {
          output[propName] = _extends4({}, slotProps);
          Object.keys(defaultSlotProps).forEach((slotPropName) => {
            output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
          });
        }
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps[propName];
      }
    });
    return output;
  }

  // node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
  function getThemeProps(params) {
    const {
      theme,
      name: name2,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name2] || !theme.components[name2].defaultProps) {
      return props;
    }
    return resolveProps(theme.components[name2].defaultProps, props);
  }

  // node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
  function useThemeProps({
    props,
    name: name2,
    defaultTheme: defaultTheme2,
    themeId
  }) {
    let theme = useTheme_default(defaultTheme2);
    if (themeId) {
      theme = theme[themeId] || theme;
    }
    const mergedProps = getThemeProps({
      theme,
      name: name2,
      props
    });
    return mergedProps;
  }

  // node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js
  var React9 = __toESM(require_react());
  var useEnhancedEffect = typeof window !== "undefined" ? React9.useLayoutEffect : React9.useEffect;
  var useEnhancedEffect_default = useEnhancedEffect;

  // node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  init_extends();
  var React21 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());

  // node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
  init_extends();
  var React19 = __toESM(require_react());
  var import_prop_types6 = __toESM(require_prop_types());

  // node_modules/@mui/utils/chainPropTypes/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }

  // node_modules/@mui/utils/elementAcceptingRef/elementAcceptingRef.js
  var import_prop_types3 = __toESM(require_prop_types());
  function isClassComponent(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location2, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for Emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementAcceptingRef = chainPropTypes(import_prop_types3.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(import_prop_types3.default.element.isRequired, acceptingRef);
  var elementAcceptingRef_default = elementAcceptingRef;

  // node_modules/@mui/utils/elementTypeAcceptingRef/elementTypeAcceptingRef.js
  var import_prop_types4 = __toESM(require_prop_types());
  function isClassComponent2(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location2, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementTypeAcceptingRef_default = chainPropTypes(import_prop_types4.default.elementType, elementTypeAcceptingRef);

  // node_modules/@mui/utils/exactProp/exactProp.js
  init_extends();
  var specialProperty = "exact-prop: \u200B";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return _extends4({}, propTypes, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }

  // node_modules/@mui/utils/HTMLElementType/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location2, propFullName) {
    if (false) {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }

  // node_modules/@mui/utils/refType/refType.js
  var import_prop_types5 = __toESM(require_prop_types());
  var refType = import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]);
  var refType_default = refType;

  // node_modules/@mui/utils/createChainedFunction/createChainedFunction.js
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }

  // node_modules/@mui/utils/debounce/debounce.js
  function debounce(func, wait = 166) {
    let timeout2;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout2);
      timeout2 = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout2);
    };
    return debounced;
  }

  // node_modules/@mui/utils/isMuiElement/isMuiElement.js
  var React10 = __toESM(require_react());
  function isMuiElement(element, muiNames) {
    var _muiName, _element$type;
    return /* @__PURE__ */ React10.isValidElement(element) && muiNames.indexOf(
      // For server components `muiName` is avaialble in element.type._payload.value.muiName
      // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
      // eslint-disable-next-line no-underscore-dangle
      (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName
    ) !== -1;
  }

  // node_modules/@mui/utils/ownerDocument/ownerDocument.js
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }

  // node_modules/@mui/utils/ownerWindow/ownerWindow.js
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }

  // node_modules/@mui/utils/setRef/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@mui/utils/useId/useId.js
  var React11 = __toESM(require_react());
  var globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React11.useState(idOverride);
    const id = idOverride || defaultId;
    React11.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  var maybeReactUseId = React11["useId".toString()];
  function useId(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    }
    return useGlobalId(idOverride);
  }

  // node_modules/@mui/utils/useControlled/useControlled.js
  var React12 = __toESM(require_react());
  function useControlled({
    controlled,
    default: defaultProp,
    name: name2,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React12.useRef(controlled !== void 0);
    const [valueState, setValue] = React12.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (true) {
      React12.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name2} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name2} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name2, controlled]);
      const {
        current: defaultValue
      } = React12.useRef(defaultProp);
      React12.useEffect(() => {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name2} after being initialized. To suppress this warning opt to use a controlled ${name2}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React12.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@mui/utils/useEventCallback/useEventCallback.js
  var React13 = __toESM(require_react());
  function useEventCallback(fn) {
    const ref = React13.useRef(fn);
    useEnhancedEffect_default(() => {
      ref.current = fn;
    });
    return React13.useRef((...args) => (
      // @ts-expect-error hide `this`
      (0, ref.current)(...args)
    )).current;
  }
  var useEventCallback_default = useEventCallback;

  // node_modules/@mui/utils/useForkRef/useForkRef.js
  var React14 = __toESM(require_react());
  function useForkRef(...refs) {
    return React14.useMemo(() => {
      if (refs.every((ref) => ref == null)) {
        return null;
      }
      return (instance) => {
        refs.forEach((ref) => {
          setRef(ref, instance);
        });
      };
    }, refs);
  }

  // node_modules/@mui/utils/useLazyRef/useLazyRef.js
  var React15 = __toESM(require_react());
  var UNINITIALIZED = {};
  function useLazyRef(init, initArg) {
    const ref = React15.useRef(UNINITIALIZED);
    if (ref.current === UNINITIALIZED) {
      ref.current = init(initArg);
    }
    return ref;
  }

  // node_modules/@mui/utils/useOnMount/useOnMount.js
  var React16 = __toESM(require_react());
  var EMPTY = [];
  function useOnMount(fn) {
    React16.useEffect(fn, EMPTY);
  }

  // node_modules/@mui/utils/useTimeout/useTimeout.js
  var Timeout = class _Timeout {
    constructor() {
      this.currentId = null;
      this.clear = () => {
        if (this.currentId !== null) {
          clearTimeout(this.currentId);
          this.currentId = null;
        }
      };
      this.disposeEffect = () => {
        return this.clear;
      };
    }
    static create() {
      return new _Timeout();
    }
    /**
     * Executes `fn` after `delay`, clearing any previously scheduled call.
     */
    start(delay, fn) {
      this.clear();
      this.currentId = setTimeout(() => {
        this.currentId = null;
        fn();
      }, delay);
    }
  };
  function useTimeout() {
    const timeout2 = useLazyRef(Timeout.create).current;
    useOnMount(timeout2.disposeEffect);
    return timeout2;
  }

  // node_modules/@mui/utils/getScrollbarSize/getScrollbarSize.js
  function getScrollbarSize(doc) {
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  // node_modules/@mui/utils/integerPropType/integerPropType.js
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
  }
  var isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location2) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location2} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  var integerPropType_default = false ? validatorNoop : validator;

  // node_modules/@mui/utils/composeClasses/composeClasses.js
  function composeClasses(slots, getUtilityClass, classes = void 0) {
    const output = {};
    Object.keys(slots).forEach(
      // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
      // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
      (slot) => {
        output[slot] = slots[slot].reduce((acc, key) => {
          if (key) {
            const utilityClass = getUtilityClass(key);
            if (utilityClass !== "") {
              acc.push(utilityClass);
            }
            if (classes && classes[key]) {
              acc.push(classes[key]);
            }
          }
          return acc;
        }, []).join(" ");
      }
    );
    return output;
  }

  // node_modules/@mui/private-theming/useTheme/ThemeContext.js
  var React17 = __toESM(require_react());
  var ThemeContext3 = /* @__PURE__ */ React17.createContext(null);
  if (true) {
    ThemeContext3.displayName = "ThemeContext";
  }
  var ThemeContext_default = ThemeContext3;

  // node_modules/@mui/private-theming/useTheme/useTheme.js
  var React18 = __toESM(require_react());
  function useTheme5() {
    const theme = React18.useContext(ThemeContext_default);
    if (true) {
      React18.useDebugValue(theme);
    }
    return theme;
  }

  // node_modules/@mui/private-theming/ThemeProvider/nested.js
  var hasSymbol = typeof Symbol === "function" && Symbol.for;
  var nested_default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";

  // node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      const mergedTheme = localTheme(outerTheme);
      if (true) {
        if (!mergedTheme) {
          console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return _extends4({}, outerTheme, localTheme);
  }
  function ThemeProvider3(props) {
    const {
      children,
      theme: localTheme
    } = props;
    const outerTheme = useTheme5();
    if (true) {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const theme = React19.useMemo(() => {
      const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output != null) {
        output[nested_default] = outerTheme !== null;
      }
      return output;
    }, [localTheme, outerTheme]);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ThemeContext_default.Provider, {
      value: theme,
      children
    });
  }
  true ? ThemeProvider3.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types6.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types6.default.oneOfType([import_prop_types6.default.object, import_prop_types6.default.func]).isRequired
  } : void 0;
  if (true) {
    true ? ThemeProvider3.propTypes = exactProp(ThemeProvider3.propTypes) : void 0;
  }
  var ThemeProvider_default = ThemeProvider3;

  // node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  var import_styled_engine3 = __toESM(require_node());

  // node_modules/@mui/system/esm/RtlProvider/index.js
  init_extends();
  var React20 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var _excluded6 = ["value"];
  var RtlContext = /* @__PURE__ */ React20.createContext();
  function RtlProvider(_ref) {
    let {
      value
    } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded6);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(RtlContext.Provider, _extends4({
      value: value != null ? value : true
    }, props));
  }
  true ? RtlProvider.propTypes = {
    children: import_prop_types7.default.node,
    value: import_prop_types7.default.bool
  } : void 0;
  var useRtl = () => {
    const value = React20.useContext(RtlContext);
    return value != null ? value : false;
  };
  var RtlProvider_default = RtlProvider;

  // node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var EMPTY_THEME = {};
  function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
    return React21.useMemo(() => {
      const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(resolvedTheme);
        const result = themeId ? _extends4({}, upperTheme, {
          [themeId]: mergedTheme
        }) : mergedTheme;
        if (isPrivate) {
          return () => result;
        }
        return result;
      }
      return themeId ? _extends4({}, upperTheme, {
        [themeId]: localTheme
      }) : _extends4({}, upperTheme, localTheme);
    }, [themeId, upperTheme, localTheme, isPrivate]);
  }
  function ThemeProvider4(props) {
    const {
      children,
      theme: localTheme,
      themeId
    } = props;
    const upperTheme = useThemeWithoutDefault_default(EMPTY_THEME);
    const upperPrivateTheme = useTheme5() || EMPTY_THEME;
    if (true) {
      if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
    const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
    const rtlValue = engineTheme.direction === "rtl";
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ThemeProvider_default, {
      theme: privateTheme,
      children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_styled_engine3.ThemeContext.Provider, {
        value: engineTheme,
        children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(RtlProvider_default, {
          value: rtlValue,
          children
        })
      })
    });
  }
  true ? ThemeProvider4.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Your component tree.
     */
    children: import_prop_types8.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object]).isRequired,
    /**
     * The design system's unique id for getting the corresponded theme when there are multiple design systems.
     */
    themeId: import_prop_types8.default.string
  } : void 0;
  if (true) {
    true ? ThemeProvider4.propTypes = exactProp(ThemeProvider4.propTypes) : void 0;
  }
  var ThemeProvider_default2 = ThemeProvider4;

  // node_modules/@mui/material/styles/createTheme.js
  init_extends();
  var import_deepmerge5 = __toESM(require_deepmerge2());
  var import_styleFunctionSx2 = __toESM(require_styleFunctionSx2());
  var import_createTheme3 = __toESM(require_createTheme2());

  // node_modules/@mui/material/styles/createMixins.js
  init_extends();
  function createMixins(breakpoints, mixins) {
    return _extends4({
      toolbar: {
        minHeight: 56,
        [breakpoints.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/styles/createPalette.js
  init_extends();
  var import_deepmerge3 = __toESM(require_deepmerge2());
  var import_colorManipulator = __toESM(require_colorManipulator());
  var _excluded7 = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = (0, import_colorManipulator.lighten)(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = (0, import_colorManipulator.darken)(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette2) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette2, other = _objectWithoutPropertiesLoose2(palette2, _excluded7);
    const primary = palette2.primary || getDefaultPrimary(mode);
    const secondary = palette2.secondary || getDefaultSecondary(mode);
    const error = palette2.error || getDefaultError(mode);
    const info = palette2.info || getDefaultInfo(mode);
    const success = palette2.success || getDefaultSuccess(mode);
    const warning2 = palette2.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = (0, import_colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = (0, import_colorManipulator.getContrastRatio)(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name: name2,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends4({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name2 ? ` (${name2})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, import_formatMuiErrorMessage.default)(11, name2 ? ` (${name2})` : "", mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(true ? `MUI: The color${name2 ? ` (${name2})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, import_formatMuiErrorMessage.default)(12, name2 ? ` (${name2})` : "", JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = (0, import_deepmerge3.default)(_extends4({
      // A collection of common colors.
      common: _extends4({}, common_default),
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning2,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey: grey_default,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  init_extends();
  var import_deepmerge4 = __toESM(require_deepmerge2());
  var _excluded8 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography) {
    const _ref = typeof typography === "function" ? typography(palette2) : typography, {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose2(_ref, _excluded8);
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends4({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size)}em`
    } : {}, casing, allVariants);
    const variants2 = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return (0, import_deepmerge4.default)(_extends4({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants2), other, {
      clone: false
      // No need to clone deep
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@mui/material/styles/createTransitions.js
  init_extends();
  var _excluded9 = ["duration", "easing", "delay"];
  var easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * __pow(constant, 0.25) + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends4({}, easing, inputTransitions.easing);
    const mergedDuration = _extends4({}, duration, inputTransitions.duration);
    const create5 = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose2(options, _excluded9);
      if (true) {
        const isString2 = (value) => typeof value === "string";
        const isNumber2 = (value) => !isNaN(parseFloat(value));
        if (!isString2(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber2(durationOption) && !isString2(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString2(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber2(delay) && !isString2(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (typeof options !== "object") {
          console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends4({
      getAutoHeightDuration,
      create: create5
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // node_modules/@mui/material/styles/createTheme.js
  var _excluded10 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme2(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose2(options, _excluded10);
    if (options.vars) {
      throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, import_formatMuiErrorMessage.default)(18));
    }
    const palette2 = createPalette(paletteInput);
    const systemTheme = (0, import_createTheme3.default)(options);
    let muiTheme = (0, import_deepmerge5.default)(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette: palette2,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows_default.slice(),
      typography: createTypography(palette2, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends4({}, zIndex_default)
    });
    muiTheme = (0, import_deepmerge5.default)(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => (0, import_deepmerge5.default)(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends4({}, import_styleFunctionSx2.unstable_defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return (0, import_styleFunctionSx2.default)({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default2 = createTheme2;

  // node_modules/@mui/material/styles/useTheme.js
  var React22 = __toESM(require_react());

  // node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme = createTheme_default2();
  var defaultTheme_default = defaultTheme;

  // node_modules/@mui/material/styles/useTheme.js
  function useTheme6() {
    const theme = useTheme_default(defaultTheme_default);
    if (true) {
      React22.useDebugValue(theme);
    }
    return theme[identifier_default] || theme;
  }

  // node_modules/@mui/material/styles/useThemeProps.js
  function useThemeProps2({
    props,
    name: name2
  }) {
    return useThemeProps({
      props,
      name: name2,
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    });
  }

  // node_modules/@mui/material/styles/styled.js
  var import_createStyled = __toESM(require_createStyled());

  // node_modules/@mui/material/styles/slotShouldForwardProp.js
  function slotShouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var slotShouldForwardProp_default = slotShouldForwardProp;

  // node_modules/@mui/material/styles/rootShouldForwardProp.js
  var rootShouldForwardProp = (prop) => slotShouldForwardProp_default(prop) && prop !== "classes";
  var rootShouldForwardProp_default = rootShouldForwardProp;

  // node_modules/@mui/material/styles/styled.js
  var styled = (0, import_createStyled.default)({
    themeId: identifier_default,
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp: rootShouldForwardProp_default
  });
  var styled_default = styled;

  // node_modules/@mui/material/styles/ThemeProvider.js
  init_extends();
  var React23 = __toESM(require_react());
  var import_prop_types9 = __toESM(require_prop_types());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var _excluded11 = ["theme"];
  function ThemeProvider5(_ref) {
    let {
      theme: themeInput
    } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded11);
    const scopedTheme = themeInput[identifier_default];
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(ThemeProvider_default2, _extends4({}, props, {
      themeId: scopedTheme ? identifier_default : void 0,
      theme: scopedTheme || themeInput
    }));
  }
  true ? ThemeProvider5.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types9.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types9.default.oneOfType([import_prop_types9.default.object, import_prop_types9.default.func]).isRequired
  } : void 0;

  // node_modules/@mui/material/styles/getOverlayAlpha.js
  var getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * __pow(elevation, 2);
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  var getOverlayAlpha_default = getOverlayAlpha;

  // node_modules/@mui/material/utils/capitalize.js
  var import_capitalize3 = __toESM(require_capitalize2());
  var capitalize_default = import_capitalize3.default;

  // node_modules/@mui/material/utils/createSvgIcon.js
  init_extends();
  var React25 = __toESM(require_react());

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  init_extends();
  var React24 = __toESM(require_react());
  var import_prop_types10 = __toESM(require_prop_types());

  // node_modules/@mui/material/SvgIcon/svgIconClasses.js
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  var svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var _excluded12 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  var useUtilityClasses = (ownerState) => {
    const {
      color: color2,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize_default(color2)}`, `fontSize${capitalize_default(fontSize)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  var SvgIconRoot = styled_default("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.color !== "inherit" && styles4[`color${capitalize_default(ownerState.color)}`], styles4[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      // the <svg> will define the property that has `currentColor`
      // for example heroicons uses fill="none" and stroke="currentColor"
      fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
        action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
        disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  var SvgIcon = /* @__PURE__ */ React24.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color2 = "inherit",
      component = "svg",
      fontSize = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded12);
    const hasSvgAsChild = /* @__PURE__ */ React24.isValidElement(children) && children.type === "svg";
    const ownerState = _extends4({}, props, {
      color: color2,
      component,
      fontSize,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox,
      hasSvgAsChild
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(SvgIconRoot, _extends4({
      as: component,
      className: clsx_default(classes.root, className),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, hasSvgAsChild && children.props, {
      ownerState,
      children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("title", {
        children: titleAccess
      }) : null]
    }));
  });
  true ? SvgIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Node passed into the SVG element.
     */
    children: import_prop_types10.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types10.default.object,
    /**
     * @ignore
     */
    className: import_prop_types10.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
     * @default 'inherit'
     */
    color: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types10.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types10.default.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types10.default.string]),
    /**
     * Applies a color attribute to the SVG element.
     */
    htmlColor: import_prop_types10.default.string,
    /**
     * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
     * prop will be ignored.
     * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
     * `component`'s viewBox to the root node.
     * @default false
     */
    inheritViewBox: import_prop_types10.default.bool,
    /**
     * The shape-rendering attribute. The behavior of the different options is described on the
     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
     * If you are having issues with blurry icons you should investigate this prop.
     */
    shapeRendering: import_prop_types10.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object]),
    /**
     * Provides a human-readable title for the element that contains it.
     * https://www.w3.org/TR/SVG-access/#Equivalent
     */
    titleAccess: import_prop_types10.default.string,
    /**
     * Allows you to redefine what the coordinates without units mean inside an SVG element.
     * For example, if the SVG element is 500 (width) by 200 (height),
     * and you pass viewBox="0 0 50 20",
     * this means that the coordinates inside the SVG will go from the top left corner (0,0)
     * to bottom right (50,20) and each unit will be worth 10px.
     * @default '0 0 24 24'
     */
    viewBox: import_prop_types10.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = SvgIcon;

  // node_modules/@mui/material/utils/createSvgIcon.js
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    function Component2(props, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SvgIcon_default, _extends4({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path
      }));
    }
    if (true) {
      Component2.displayName = `${displayName}Icon`;
    }
    Component2.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ React25.memo(/* @__PURE__ */ React25.forwardRef(Component2));
  }

  // node_modules/@mui/material/utils/debounce.js
  var debounce_default = debounce;

  // node_modules/@mui/material/utils/isMuiElement.js
  var isMuiElement_default = isMuiElement;

  // node_modules/@mui/material/utils/ownerDocument.js
  var ownerDocument_default = ownerDocument;

  // node_modules/@mui/material/utils/ownerWindow.js
  var ownerWindow_default = ownerWindow;

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  var useEnhancedEffect_default2 = useEnhancedEffect_default;

  // node_modules/@mui/material/utils/useControlled.js
  var useControlled_default = useControlled;

  // node_modules/@mui/material/utils/useForkRef.js
  var useForkRef_default = useForkRef;

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types12 = __toESM(require_prop_types());
  var import_react5 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types11 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.shape({
    enter: import_prop_types11.default.number,
    exit: import_prop_types11.default.number,
    appear: import_prop_types11.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types11.default.oneOfType([import_prop_types11.default.string, import_prop_types11.default.shape({
    enter: import_prop_types11.default.string,
    exit: import_prop_types11.default.string,
    active: import_prop_types11.default.string
  }), import_prop_types11.default.shape({
    enter: import_prop_types11.default.string,
    enterDone: import_prop_types11.default.string,
    enterActive: import_prop_types11.default.string,
    exit: import_prop_types11.default.string,
    exitDone: import_prop_types11.default.string,
    exitActive: import_prop_types11.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react4 = __toESM(require_react());
  var TransitionGroupContext_default = import_react4.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node2)
              forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react5.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react5.default.cloneElement(import_react5.default.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(import_react5.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types12.default.shape({
      current: typeof Element === "undefined" ? import_prop_types12.default.any : function(propValue, key, componentName, location2, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types12.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location2, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types12.default.oneOfType([import_prop_types12.default.func.isRequired, import_prop_types12.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types12.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types12.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types12.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types12.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types12.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types12.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types12.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types12.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types12.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types12.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types12.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types12.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types12.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/@mui/material/transitions/utils.js
  var reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout2,
      easing: easing2,
      style: style3 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style3.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      easing: (_style$transitionTimi = style3.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style3.transitionDelay
    };
  }

  // node_modules/@mui/material/Paper/Paper.js
  init_extends();
  var React28 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());
  var import_colorManipulator2 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Paper/paperClasses.js
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  var paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);

  // node_modules/@mui/material/Paper/Paper.js
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var _excluded13 = ["className", "component", "elevation", "square", "variant"];
  var useUtilityClasses2 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  var PaperRoot = styled_default("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], !ownerState.square && styles4.rounded, ownerState.variant === "elevation" && styles4[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends4({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      color: (theme.vars || theme).palette.text.primary,
      transition: theme.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme.vars || theme).palette.divider}`
    }, ownerState.variant === "elevation" && _extends4({
      boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
    }, !theme.vars && theme.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${(0, import_colorManipulator2.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))}, ${(0, import_colorManipulator2.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))})`
    }, theme.vars && {
      backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  var Paper = /* @__PURE__ */ React28.forwardRef(function Paper2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded13);
    const ownerState = _extends4({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses2(ownerState);
    if (true) {
      const theme = useTheme6();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(PaperRoot, _extends4({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types13.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types13.default.object,
    /**
     * @ignore
     */
    className: import_prop_types13.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types13.default.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: chainPropTypes(integerPropType_default, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: import_prop_types13.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["elevation", "outlined"]), import_prop_types13.default.string])
  } : void 0;
  var Paper_default = Paper;

  // node_modules/@mui/base/utils/appendOwnerState.js
  init_extends();

  // node_modules/@mui/base/utils/isHostComponent.js
  function isHostComponent(element) {
    return typeof element === "string";
  }

  // node_modules/@mui/base/utils/appendOwnerState.js
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent(elementType)) {
      return otherProps;
    }
    return _extends4({}, otherProps, {
      ownerState: _extends4({}, otherProps.ownerState, ownerState)
    });
  }

  // node_modules/@mui/base/utils/extractEventHandlers.js
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }

  // node_modules/@mui/base/utils/resolveComponentProps.js
  function resolveComponentProps(componentProps, ownerState, slotState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState, slotState);
    }
    return componentProps;
  }

  // node_modules/@mui/base/utils/useSlotProps.js
  init_extends();

  // node_modules/@mui/base/utils/mergeSlotProps.js
  init_extends();

  // node_modules/@mui/base/utils/omitEventHandlers.js
  function omitEventHandlers(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }

  // node_modules/@mui/base/utils/mergeSlotProps.js
  function mergeSlotProps(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle2 = _extends4({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props2 = _extends4({}, additionalProps, externalForwardedProps, externalSlotProps);
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers(_extends4({}, externalForwardedProps, externalSlotProps));
    const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends4({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends4({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }

  // node_modules/@mui/base/utils/useSlotProps.js
  var _excluded14 = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
  function useSlotProps(parameters) {
    var _parameters$additiona;
    const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false
    } = parameters, rest = _objectWithoutPropertiesLoose2(parameters, _excluded14);
    const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps(_extends4({}, rest, {
      externalSlotProps: resolvedComponentsProps
    }));
    const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
    const props = appendOwnerState(elementType, _extends4({}, mergedProps, {
      ref
    }), ownerState);
    return props;
  }

  // node_modules/@mui/base/FocusTrap/FocusTrap.js
  var React29 = __toESM(require_react());
  var import_prop_types14 = __toESM(require_prop_types());
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React29.useRef(false);
    const sentinelStart = React29.useRef(null);
    const sentinelEnd = React29.useRef(null);
    const nodeToRestore = React29.useRef(null);
    const reactFocusEventTarget = React29.useRef(null);
    const activated = React29.useRef(false);
    const rootRef = React29.useRef(null);
    const handleRef = useForkRef(children.ref, rootRef);
    const lastKeydown = React29.useRef(null);
    React29.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React29.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React29.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      const contain = () => {
        const rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootElement.contains(doc.activeElement)) {
          return;
        }
        if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
          return;
        }
        if (doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          var _lastKeydown$current, _lastKeydown$current2;
          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          }
        } else {
          rootElement.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(React29.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), /* @__PURE__ */ React29.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  true ? FocusTrap.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default,
    /**
     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types14.default.bool,
    /**
     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types14.default.bool,
    /**
     * If `true`, the focus trap will not restore focus to previously focused element once
     * focus trap is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types14.default.bool,
    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: import_prop_types14.default.func,
    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple focus trap mounted at the same time.
     * @default function defaultIsEnabled(): boolean {
     *   return true;
     * }
     */
    isEnabled: import_prop_types14.default.func,
    /**
     * If `true`, focus is locked.
     */
    open: import_prop_types14.default.bool.isRequired
  } : void 0;
  if (true) {
    FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
  }

  // node_modules/@mui/base/Portal/Portal.js
  var React30 = __toESM(require_react());
  var ReactDOM3 = __toESM(require_react_dom());
  var import_prop_types15 = __toESM(require_prop_types());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  var Portal = /* @__PURE__ */ React30.forwardRef(function Portal2(props, forwardedRef) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React30.useState(null);
    const handleRef = useForkRef(/* @__PURE__ */ React30.isValidElement(children) ? children.ref : null, forwardedRef);
    useEnhancedEffect_default(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect_default(() => {
      if (mountNode && !disablePortal) {
        setRef(forwardedRef, mountNode);
        return () => {
          setRef(forwardedRef, null);
        };
      }
      return void 0;
    }, [forwardedRef, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React30.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return /* @__PURE__ */ React30.cloneElement(children, newProps);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(React30.Fragment, {
        children
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(React30.Fragment, {
      children: mountNode ? /* @__PURE__ */ ReactDOM3.createPortal(children, mountNode) : mountNode
    });
  });
  true ? Portal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The children to render into the `container`.
     */
    children: import_prop_types15.default.node,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types15.default.oneOfType([HTMLElementType, import_prop_types15.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types15.default.bool
  } : void 0;
  if (true) {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }

  // node_modules/@mui/base/unstable_useModal/useModal.js
  init_extends();
  var React31 = __toESM(require_react());

  // node_modules/@mui/base/unstable_useModal/ModalManager.js
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = blacklist.indexOf(element) === -1;
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = ownerDocument(container).body;
      } else {
        const parent = container.parentElement;
        const containerWindow = ownerWindow(container);
        scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = class {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  };

  // node_modules/@mui/base/unstable_useModal/useModal.js
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  function useModal(parameters) {
    const {
      container,
      disableEscapeKeyDown = false,
      disableScrollLock = false,
      // @ts-ignore internal logic - Base UI supports the manager as a prop too
      manager = defaultManager,
      closeAfterTransition = false,
      onTransitionEnter,
      onTransitionExited,
      children,
      onClose,
      open,
      rootRef
    } = parameters;
    const modal = React31.useRef({});
    const mountNodeRef = React31.useRef(null);
    const modalRef = React31.useRef(null);
    const handleRef = useForkRef(modalRef, rootRef);
    const [exited, setExited] = React31.useState(!open);
    const hasTransition = getHasTransition(children);
    let ariaHiddenProp = true;
    if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
      ariaHiddenProp = false;
    }
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mount = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = useEventCallback_default(() => {
      const resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React31.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback_default((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else if (modalRef.current) {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React31.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [ariaHiddenProp, manager]);
    React31.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React31.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.key !== "Escape" || event.which === 229 || // Wait until IME is settled.
      !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const createHandleBackdropClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters);
      delete propsEventHandlers.onTransitionEnter;
      delete propsEventHandlers.onTransitionExited;
      const externalEventHandlers = _extends4({}, propsEventHandlers, otherHandlers);
      return _extends4({
        role: "presentation"
      }, externalEventHandlers, {
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        ref: handleRef
      });
    };
    const getBackdropProps = (otherHandlers = {}) => {
      const externalEventHandlers = otherHandlers;
      return _extends4({
        "aria-hidden": true
      }, externalEventHandlers, {
        onClick: createHandleBackdropClick(externalEventHandlers),
        open
      });
    };
    const getTransitionProps2 = () => {
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      return {
        onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
        onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
      };
    };
    return {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      rootRef: handleRef,
      portalRef: handlePortalRef,
      isTopModal,
      exited,
      hasTransition
    };
  }

  // node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js
  init_extends();
  var React32 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var _excluded15 = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue2(value) {
    return parseInt(value, 10) || 0;
  }
  var styles = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: "hidden",
      // Remove from the content flow
      position: "absolute",
      // Ignore the scrollbar width
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: "translateZ(0)"
    }
  };
  function isEmpty(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;
  }
  var TextareaAutosize = /* @__PURE__ */ React32.forwardRef(function TextareaAutosize2(props, forwardedRef) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style3,
      value
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded15);
    const {
      current: isControlled
    } = React32.useRef(value != null);
    const inputRef = React32.useRef(null);
    const handleRef = useForkRef(forwardedRef, inputRef);
    const shadowRef = React32.useRef(null);
    const calculateTextareaStyles = React32.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return {
          outerHeightStyle: 0,
          overflowing: false
        };
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing2 = computedStyle.boxSizing;
      const padding2 = getStyleValue2(computedStyle.paddingBottom) + getStyleValue2(computedStyle.paddingTop);
      const border2 = getStyleValue2(computedStyle.borderBottomWidth) + getStyleValue2(computedStyle.borderTopWidth);
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflowing = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflowing
      };
    }, [maxRows, minRows, props.placeholder]);
    const syncHeight = React32.useCallback(() => {
      const textareaStyles = calculateTextareaStyles();
      if (isEmpty(textareaStyles)) {
        return;
      }
      const input = inputRef.current;
      input.style.height = `${textareaStyles.outerHeightStyle}px`;
      input.style.overflow = textareaStyles.overflowing ? "hidden" : "";
    }, [calculateTextareaStyles]);
    useEnhancedEffect_default(() => {
      const handleResize = () => {
        syncHeight();
      };
      let rAF;
      const rAFHandleResize = () => {
        cancelAnimationFrame(rAF);
        rAF = requestAnimationFrame(() => {
          handleResize();
        });
      };
      const debounceHandleResize = debounce(handleResize);
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      containerWindow.addEventListener("resize", debounceHandleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(false ? rAFHandleResize : handleResize);
        resizeObserver.observe(input);
      }
      return () => {
        debounceHandleResize.clear();
        cancelAnimationFrame(rAF);
        containerWindow.removeEventListener("resize", debounceHandleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [calculateTextareaStyles, syncHeight]);
    useEnhancedEffect_default(() => {
      syncHeight();
    });
    const handleChange = (event) => {
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(React32.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime13.jsx)("textarea", _extends4({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: style3
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends4({}, styles.shadow, style3, {
          paddingTop: 0,
          paddingBottom: 0
        })
      })]
    });
  });
  true ? TextareaAutosize.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    className: import_prop_types16.default.string,
    /**
     * Maximum number of rows to display.
     */
    maxRows: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string]),
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string]),
    /**
     * @ignore
     */
    onChange: import_prop_types16.default.func,
    /**
     * @ignore
     */
    placeholder: import_prop_types16.default.string,
    /**
     * @ignore
     */
    style: import_prop_types16.default.object,
    /**
     * @ignore
     */
    value: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.string), import_prop_types16.default.number, import_prop_types16.default.string])
  } : void 0;

  // node_modules/@mui/material/Input/inputClasses.js
  init_extends();

  // node_modules/@mui/material/InputBase/InputBase.js
  init_extends();
  var React36 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/FormControl/FormControlContext.js
  var React33 = __toESM(require_react());
  var FormControlContext = /* @__PURE__ */ React33.createContext(void 0);
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@mui/material/FormControl/useFormControl.js
  var React34 = __toESM(require_react());
  function useFormControl() {
    return React34.useContext(FormControlContext_default);
  }

  // node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  init_extends();
  var React35 = __toESM(require_react());
  var import_prop_types17 = __toESM(require_prop_types());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  function GlobalStyles2(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(GlobalStyles_default, _extends4({}, props, {
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    }));
  }
  true ? GlobalStyles2.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The styles you want to apply globally.
     */
    styles: import_prop_types17.default.oneOfType([import_prop_types17.default.array, import_prop_types17.default.func, import_prop_types17.default.number, import_prop_types17.default.object, import_prop_types17.default.string, import_prop_types17.default.bool])
  } : void 0;
  var GlobalStyles_default2 = GlobalStyles2;

  // node_modules/@mui/material/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@mui/material/InputBase/inputBaseClasses.js
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiInputBase", slot);
  }
  var inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  var inputBaseClasses_default = inputBaseClasses;

  // node_modules/@mui/material/InputBase/InputBase.js
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var _excluded16 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
  var rootOverridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.root, ownerState.formControl && styles4.formControl, ownerState.startAdornment && styles4.adornedStart, ownerState.endAdornment && styles4.adornedEnd, ownerState.error && styles4.error, ownerState.size === "small" && styles4.sizeSmall, ownerState.multiline && styles4.multiline, ownerState.color && styles4[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles4.fullWidth, ownerState.hiddenLabel && styles4.hiddenLabel];
  };
  var inputOverridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.input, ownerState.size === "small" && styles4.inputSizeSmall, ownerState.multiline && styles4.inputMultiline, ownerState.type === "search" && styles4.inputTypeSearch, ownerState.startAdornment && styles4.inputAdornedStart, ownerState.endAdornment && styles4.inputAdornedEnd, ownerState.hiddenLabel && styles4.inputHiddenLabel];
  };
  var useUtilityClasses3 = (ownerState) => {
    const {
      classes,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size && size !== "medium" && `size${capitalize_default(size)}`, multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };
  var InputBaseRoot = styled_default("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends4({}, theme.typography.body1, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "1.4375em",
    // 23px
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends4({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  var InputBaseComponent = styled_default("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = _extends4({
      color: "currentColor"
    }, theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    }, {
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    });
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends4({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: "transparent",
      display: "block",
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: "100%",
      // Fix IE11 width issue
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      // Firefox 19+
      "&:-ms-input-placeholder": placeholder,
      // IE11
      "&::-ms-input-placeholder": placeholder,
      // Edge
      "&:focus": {
        outline: 0
      },
      // Reset Firefox invalid required input style
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        // Remove the padding when type=search.
        WebkitAppearance: "none"
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        // Firefox 19+
        "&:-ms-input-placeholder": placeholderHidden,
        // IE11
        "&::-ms-input-placeholder": placeholderHidden,
        // Edge
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        // Firefox 19+
        "&:focus:-ms-input-placeholder": placeholderVisible,
        // IE11
        "&:focus::-ms-input-placeholder": placeholderVisible
        // Edge
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
        // Fix opacity Safari bug
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      // Improve type search style.
      MozAppearance: "textfield"
    });
  });
  var inputGlobalStyles = /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(GlobalStyles_default2, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  var InputBase = /* @__PURE__ */ React36.forwardRef(function InputBase2(inProps, ref) {
    var _slotProps$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name: name2,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded16);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React36.useRef(value != null);
    const inputRef = React36.useRef();
    const handleInputRefWarning = React36.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef_default(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React36.useState(false);
    const muiFormControl = useFormControl();
    if (true) {
      React36.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React36.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React36.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default2(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, import_formatMuiErrorMessage.default)(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React36.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends4({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends4({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React36.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends4({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses3(ownerState);
    const Root = slots.root || components.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input3 = slots.input || components.Input || InputBaseComponent;
    inputProps = _extends4({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(React36.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Root, _extends4({}, rootProps, !isHostComponent(Root) && {
        ownerState: _extends4({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx_default(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
        children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(FormControlContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Input3, _extends4({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name: name2,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent(Input3) && {
            as: InputComponent,
            ownerState: _extends4({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx_default(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends4({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  true ? InputBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types18.default.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types18.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types18.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types18.default.object,
    /**
     * @ignore
     */
    className: import_prop_types18.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types18.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types18.default.shape({
      Input: import_prop_types18.default.elementType,
      Root: import_prop_types18.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types18.default.shape({
      input: import_prop_types18.default.object,
      root: import_prop_types18.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types18.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types18.default.bool,
    /**
     * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
     * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
     * @default false
     */
    disableInjectingGlobalStyles: import_prop_types18.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types18.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types18.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types18.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types18.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: elementTypeAcceptingRef_default,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types18.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types18.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types18.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types18.default.string,
    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: import_prop_types18.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types18.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types18.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types18.default.func,
    /**
     * Callback fired when the `input` doesn't satisfy its constraints.
     */
    onInvalid: import_prop_types18.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types18.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types18.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types18.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types18.default.bool,
    /**
     * @ignore
     */
    renderSuffix: import_prop_types18.default.func,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types18.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.string]),
    /**
     * The size of the component.
     */
    size: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["medium", "small"]), import_prop_types18.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types18.default.shape({
      input: import_prop_types18.default.object,
      root: import_prop_types18.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types18.default.shape({
      input: import_prop_types18.default.elementType,
      root: import_prop_types18.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types18.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types18.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types18.default.any
  } : void 0;
  var InputBase_default = InputBase;

  // node_modules/@mui/material/Input/inputClasses.js
  function getInputUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  var inputClasses = _extends4({}, inputBaseClasses_default, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
  var inputClasses_default = inputClasses;

  // node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  init_extends();
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiOutlinedInput", slot);
  }
  var outlinedInputClasses = _extends4({}, inputBaseClasses_default, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  var outlinedInputClasses_default = outlinedInputClasses;

  // node_modules/@mui/material/FilledInput/filledInputClasses.js
  init_extends();
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiFilledInput", slot);
  }
  var filledInputClasses = _extends4({}, inputBaseClasses_default, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
  var filledInputClasses_default = filledInputClasses;

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var React37 = __toESM(require_react());
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime18.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@mui/material/Backdrop/Backdrop.js
  init_extends();
  var React39 = __toESM(require_react());
  var import_prop_types20 = __toESM(require_prop_types());

  // node_modules/@mui/material/Fade/Fade.js
  init_extends();
  var React38 = __toESM(require_react());
  var import_prop_types19 = __toESM(require_prop_types());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var _excluded17 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var Fade = /* @__PURE__ */ React38.forwardRef(function Fade2(props, ref) {
    const theme = useTheme6();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style3,
      timeout: timeout2 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded17);
    const enableStrictModeCompat = true;
    const nodeRef = React38.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TransitionComponent, _extends4({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React38.cloneElement(children, _extends4({
          style: _extends4({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles2[state], style3, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Fade.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types19.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types19.default.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types19.default.oneOfType([import_prop_types19.default.shape({
      enter: import_prop_types19.default.string,
      exit: import_prop_types19.default.string
    }), import_prop_types19.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types19.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types19.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types19.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types19.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types19.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types19.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types19.default.func,
    /**
     * @ignore
     */
    style: import_prop_types19.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.shape({
      appear: import_prop_types19.default.number,
      enter: import_prop_types19.default.number,
      exit: import_prop_types19.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@mui/material/Backdrop/backdropClasses.js
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  var backdropClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var _excluded18 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  var useUtilityClasses4 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  var BackdropRoot = styled_default("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.invisible && styles4.invisible];
    }
  })(({
    ownerState
  }) => _extends4({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  var Backdrop = /* @__PURE__ */ React39.forwardRef(function Backdrop2(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade_default,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded18);
    const ownerState = _extends4({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses4(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(TransitionComponent, _extends4({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(BackdropRoot, _extends4({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
        className: clsx_default(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends4({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes,
        ref,
        children
      }))
    }));
  });
  true ? Backdrop.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types20.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types20.default.object,
    /**
     * @ignore
     */
    className: import_prop_types20.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types20.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types20.default.shape({
      Root: import_prop_types20.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types20.default.shape({
      root: import_prop_types20.default.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: import_prop_types20.default.bool,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types20.default.bool.isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types20.default.shape({
      root: import_prop_types20.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types20.default.shape({
      root: import_prop_types20.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: import_prop_types20.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      appear: import_prop_types20.default.number,
      enter: import_prop_types20.default.number,
      exit: import_prop_types20.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // node_modules/@mui/material/Modal/Modal.js
  init_extends();
  var React40 = __toESM(require_react());
  var import_prop_types21 = __toESM(require_prop_types());

  // node_modules/@mui/material/Modal/modalClasses.js
  function getModalUtilityClass(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  var modalClasses = generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);

  // node_modules/@mui/material/Modal/Modal.js
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var _excluded19 = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
  var useUtilityClasses5 = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };
  var ModalRoot = styled_default("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.open && ownerState.exited && styles4.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends4({
    position: "fixed",
    zIndex: (theme.vars || theme).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  var ModalBackdrop = styled_default(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles4) => {
      return styles4.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal = /* @__PURE__ */ React40.forwardRef(function Modal2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
    const props = useThemeProps2({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      className,
      closeAfterTransition = false,
      children,
      container,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps,
      slots
      // eslint-disable-next-line react/prop-types
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded19);
    const propsWithDefaults = _extends4({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    });
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal(_extends4({}, propsWithDefaults, {
      rootRef: ref
    }));
    const ownerState = _extends4({}, propsWithDefaults, {
      exited
    });
    const classes = useUtilityClasses5(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps2();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
    const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      getSlotProps: getRootProps,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_default(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
    });
    const backdropProps = useSlotProps({
      elementType: BackdropSlot,
      externalSlotProps: backdropSlotProps,
      additionalProps: BackdropProps,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps(_extends4({}, otherHandlers, {
          onClick: (e) => {
            if (onBackdropClick) {
              onBackdropClick(e);
            }
            if (otherHandlers != null && otherHandlers.onClick) {
              otherHandlers.onClick(e);
            }
          }
        }));
      },
      className: clsx_default(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Portal, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(RootSlot, _extends4({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(BackdropSlot, _extends4({}, backdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(FocusTrap, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React40.cloneElement(children, childProps)
        })]
      }))
    });
  });
  true ? Modal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types21.default.elementType,
    /**
     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead.
     */
    BackdropProps: import_prop_types21.default.object,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types21.default.object,
    /**
     * @ignore
     */
    className: import_prop_types21.default.string,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: import_prop_types21.default.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types21.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types21.default.shape({
      Backdrop: import_prop_types21.default.elementType,
      Root: import_prop_types21.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types21.default.shape({
      backdrop: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),
      root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types21.default.oneOfType([HTMLElementType, import_prop_types21.default.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types21.default.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types21.default.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types21.default.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types21.default.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types21.default.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types21.default.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types21.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: import_prop_types21.default.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types21.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types21.default.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: import_prop_types21.default.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: import_prop_types21.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types21.default.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: import_prop_types21.default.shape({
      backdrop: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object]),
      root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types21.default.shape({
      backdrop: import_prop_types21.default.elementType,
      root: import_prop_types21.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object])
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  init_extends();
  var React41 = __toESM(require_react());
  var import_deepmerge6 = __toESM(require_deepmerge2());
  var import_prop_types22 = __toESM(require_prop_types());
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var _excluded20 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses6 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return _extends4({}, classes, composedClasses);
  };
  var FilledInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles4), !ownerState.disableUnderline && styles4.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _palette;
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return _extends4({
      position: "relative",
      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2,
      borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
      }
    }, !ownerState.disableUnderline && {
      "&::after": {
        borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${filledInputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses_default.error}`]: {
        "&::before, &::after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&::before": {
        borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${filledInputClasses_default.disabled}, .${filledInputClasses_default.error}):before`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
      },
      [`&.${filledInputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends4({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.hiddenLabel && ownerState.size === "small" && {
      paddingTop: 8,
      paddingBottom: 9
    }));
  });
  var FilledInputInput = styled_default(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends4({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }));
  var FilledInput = /* @__PURE__ */ React41.forwardRef(function FilledInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      // declare here to prevent spreading to DOM
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded20);
    const ownerState = _extends4({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses6(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_deepmerge6.default)(filledInputComponentsProps, slotProps != null ? slotProps : componentsPropsProp) : filledInputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(InputBase_default, _extends4({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? FilledInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types22.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types22.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types22.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["primary", "secondary"]), import_prop_types22.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types22.default.shape({
      Input: import_prop_types22.default.elementType,
      Root: import_prop_types22.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types22.default.shape({
      input: import_prop_types22.default.object,
      root: import_prop_types22.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types22.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types22.default.bool,
    /**
     * If `true`, the input will not have an underline.
     */
    disableUnderline: import_prop_types22.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types22.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types22.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types22.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types22.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types22.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types22.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types22.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types22.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types22.default.oneOfType([import_prop_types22.default.number, import_prop_types22.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types22.default.oneOfType([import_prop_types22.default.number, import_prop_types22.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types22.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types22.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types22.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types22.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types22.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types22.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types22.default.oneOfType([import_prop_types22.default.number, import_prop_types22.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types22.default.shape({
      input: import_prop_types22.default.object,
      root: import_prop_types22.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types22.default.shape({
      input: import_prop_types22.default.elementType,
      root: import_prop_types22.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types22.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types22.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types22.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = FilledInput;

  // node_modules/@mui/material/FormControl/FormControl.js
  init_extends();
  var React42 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormControl/formControlClasses.js
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  var formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);

  // node_modules/@mui/material/FormControl/FormControl.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var _excluded21 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  var useUtilityClasses7 = (ownerState) => {
    const {
      classes,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize_default(margin2)}`, fullWidth && "fullWidth"]
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };
  var FormControlRoot = styled_default("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles4) => {
      return _extends4({}, styles4.root, styles4[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles4.fullWidth);
    }
  })(({
    ownerState
  }) => _extends4({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  var FormControl = /* @__PURE__ */ React42.forwardRef(function FormControl2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded21);
    const ownerState = _extends4({}, props, {
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size,
      variant
    });
    const classes = useUtilityClasses7(ownerState);
    const [adornedStart, setAdornedStart] = React42.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React42.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React42.useState(() => {
      let initialFilled = false;
      if (children) {
        React42.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React42.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (true) {
      const registeredInput = React42.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const childContext = React42.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color: color2,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size,
        onBlur: () => {
          setFocused(false);
        },
        onEmpty: () => {
          setFilled(false);
        },
        onFilled: () => {
          setFilled(true);
        },
        onFocus: () => {
          setFocused(true);
        },
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(FormControlContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(FormControlRoot, _extends4({
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  true ? FormControl.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types23.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types23.default.object,
    /**
     * @ignore
     */
    className: import_prop_types23.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types23.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types23.default.elementType,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: import_prop_types23.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types23.default.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types23.default.bool,
    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types23.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types23.default.bool,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types23.default.oneOf(["dense", "none", "normal"]),
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: import_prop_types23.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["medium", "small"]), import_prop_types23.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types23.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = FormControl;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  init_extends();
  var React43 = __toESM(require_react());
  var import_prop_types24 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass("MuiFormHelperText", slot);
  }
  var formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var formHelperTextClasses_default = formHelperTextClasses;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var _span;
  var _excluded22 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  var useUtilityClasses8 = (ownerState) => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize_default(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };
  var FormHelperTextRoot = styled_default("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.size && styles4[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles4.contained, ownerState.filled && styles4.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends4({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  var FormHelperText = /* @__PURE__ */ React43.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded22);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends4({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses8(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(FormHelperTextRoot, _extends4({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: children === " " ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        _span || (_span = /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("span", {
          className: "notranslate",
          children: "\u200B"
        }))
      ) : children
    }));
  });
  true ? FormHelperText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: import_prop_types24.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types24.default.object,
    /**
     * @ignore
     */
    className: import_prop_types24.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types24.default.elementType,
    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: import_prop_types24.default.bool,
    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: import_prop_types24.default.bool,
    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: import_prop_types24.default.bool,
    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: import_prop_types24.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types24.default.oneOf(["dense"]),
    /**
     * If `true`, the helper text should use required classes key.
     */
    required: import_prop_types24.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["filled", "outlined", "standard"]), import_prop_types24.default.string])
  } : void 0;
  var FormHelperText_default = FormHelperText;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  init_extends();
  var React44 = __toESM(require_react());
  var import_prop_types25 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormLabel/formLabelClasses.js
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormLabel", slot);
  }
  var formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var _excluded23 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  var useUtilityClasses9 = (ownerState) => {
    const {
      classes,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };
  var FormLabelRoot = styled_default("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles4) => {
      return _extends4({}, styles4.root, ownerState.color === "secondary" && styles4.colorSecondary, ownerState.filled && styles4.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends4({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var AsteriskComponent = styled_default("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles4) => styles4.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var FormLabel = /* @__PURE__ */ React44.forwardRef(function FormLabel2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded23);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends4({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses9(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(FormLabelRoot, _extends4({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(AsteriskComponent, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", "*"]
      })]
    }));
  });
  true ? FormLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types25.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types25.default.object,
    /**
     * @ignore
     */
    className: import_prop_types25.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types25.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types25.default.elementType,
    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: import_prop_types25.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types25.default.bool,
    /**
     * If `true`, the label should use filled classes key.
     */
    filled: import_prop_types25.default.bool,
    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: import_prop_types25.default.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types25.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // node_modules/@mui/material/Grow/Grow.js
  init_extends();
  var React45 = __toESM(require_react());
  var import_prop_types26 = __toESM(require_prop_types());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var _excluded24 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${__pow(value, 2)})`;
  }
  var styles3 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  var Grow = /* @__PURE__ */ React45.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style3,
      timeout: timeout2 = "auto",
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded24);
    const timer = useTimeout();
    const autoTimeout = React45.useRef();
    const theme = useTheme6();
    const nodeRef = React45.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.start(autoTimeout.current || 0, next2);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(TransitionComponent, _extends4({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React45.cloneElement(children, _extends4({
          style: _extends4({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles3[state], style3, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Grow.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types26.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types26.default.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      enter: import_prop_types26.default.string,
      exit: import_prop_types26.default.string
    }), import_prop_types26.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types26.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types26.default.func,
    /**
     * @ignore
     */
    style: import_prop_types26.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.number, import_prop_types26.default.shape({
      appear: import_prop_types26.default.number,
      enter: import_prop_types26.default.number,
      exit: import_prop_types26.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@mui/material/Input/Input.js
  init_extends();
  var React46 = __toESM(require_react());
  var import_prop_types27 = __toESM(require_prop_types());
  var import_deepmerge7 = __toESM(require_deepmerge2());
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var _excluded25 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses10 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return _extends4({}, classes, composedClasses);
  };
  var InputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles4), !ownerState.disableUnderline && styles4.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme.vars) {
      bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
    }
    return _extends4({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&::after": {
        borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${inputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses_default.error}`]: {
        "&::before, &::after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&::before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${inputClasses_default.disabled}, .${inputClasses_default.error}):before`]: {
        borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  var InputInput = styled_default(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  var Input = /* @__PURE__ */ React46.forwardRef(function Input2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded25);
    const classes = useUtilityClasses10(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_deepmerge7.default)(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(InputBase_default, _extends4({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? Input.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types27.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types27.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types27.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["primary", "secondary"]), import_prop_types27.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types27.default.shape({
      Input: import_prop_types27.default.elementType,
      Root: import_prop_types27.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types27.default.shape({
      input: import_prop_types27.default.object,
      root: import_prop_types27.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types27.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types27.default.bool,
    /**
     * If `true`, the `input` will not have an underline.
     */
    disableUnderline: import_prop_types27.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types27.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types27.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types27.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types27.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types27.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types27.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types27.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types27.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types27.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types27.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types27.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types27.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types27.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types27.default.shape({
      input: import_prop_types27.default.object,
      root: import_prop_types27.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types27.default.shape({
      input: import_prop_types27.default.elementType,
      root: import_prop_types27.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types27.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object, import_prop_types27.default.bool])), import_prop_types27.default.func, import_prop_types27.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types27.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types27.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = Input;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  init_extends();
  var React47 = __toESM(require_react());
  var import_prop_types28 = __toESM(require_prop_types());

  // node_modules/@mui/material/InputLabel/inputLabelClasses.js
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiInputLabel", slot);
  }
  var inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var _excluded26 = ["disableAnimation", "margin", "shrink", "variant", "className"];
  var useUtilityClasses11 = (ownerState) => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size && size !== "normal" && `size${capitalize_default(size)}`, variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return _extends4({}, classes, composedClasses);
  };
  var InputLabelRoot = styled_default(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles4.asterisk
      }, styles4.root, ownerState.formControl && styles4.formControl, ownerState.size === "small" && styles4.sizeSmall, ownerState.shrink && styles4.shrink, !ownerState.disableAnimation && styles4.animated, ownerState.focused && styles4.focused, styles4[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends4({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    // slight alteration to spec spacing to match visual spec result
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    // Compensation for the `Input.inputSizeSmall` style.
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends4({
    // Chrome's autofill feature gives the input field a yellow background.
    // Since the input field is behind the label in the HTML tree,
    // the input field is drawn last and hides the label with an opaque background color.
    // zIndex: 1 will raise the label above opaque background-colors of input.
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends4({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends4({
    // see comment above on filled.zIndex
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    // Theoretically, we should have (8+5)*2/0.75 = 34px
    // but it feels a better when it bleeds a bit on the left, so 32px.
    maxWidth: "calc(133% - 32px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  var InputLabel = /* @__PURE__ */ React47.forwardRef(function InputLabel2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp,
      className
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded26);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required", "focused"]
    });
    const ownerState = _extends4({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required,
      focused: fcs.focused
    });
    const classes = useUtilityClasses11(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(InputLabelRoot, _extends4({
      "data-shrink": shrink,
      ownerState,
      ref,
      className: clsx_default(classes.root, className)
    }, other, {
      classes
    }));
  });
  true ? InputLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types28.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types28.default.object,
    /**
     * @ignore
     */
    className: import_prop_types28.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types28.default.string]),
    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: import_prop_types28.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types28.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types28.default.bool,
    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: import_prop_types28.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types28.default.oneOf(["dense"]),
    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types28.default.bool,
    /**
     * If `true`, the label is shrunk.
     */
    shrink: import_prop_types28.default.bool,
    /**
     * The size of the component.
     * @default 'normal'
     */
    size: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["normal", "small"]), import_prop_types28.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types28.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = InputLabel;

  // node_modules/@mui/material/List/List.js
  init_extends();
  var React49 = __toESM(require_react());
  var import_prop_types29 = __toESM(require_prop_types());

  // node_modules/@mui/material/List/ListContext.js
  var React48 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React48.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@mui/material/List/listClasses.js
  function getListUtilityClass(slot) {
    return generateUtilityClass("MuiList", slot);
  }
  var listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);

  // node_modules/@mui/material/List/List.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var _excluded27 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  var useUtilityClasses12 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };
  var ListRoot = styled_default("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.disablePadding && styles4.padding, ownerState.dense && styles4.dense, ownerState.subheader && styles4.subheader];
    }
  })(({
    ownerState
  }) => _extends4({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  var List = /* @__PURE__ */ React49.forwardRef(function List2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded27);
    const context = React49.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends4({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses12(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(ListRoot, _extends4({
        as: component,
        className: clsx_default(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  true ? List.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types29.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types29.default.object,
    /**
     * @ignore
     */
    className: import_prop_types29.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types29.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: import_prop_types29.default.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: import_prop_types29.default.bool,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: import_prop_types29.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types29.default.oneOfType([import_prop_types29.default.arrayOf(import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object, import_prop_types29.default.bool])), import_prop_types29.default.func, import_prop_types29.default.object])
  } : void 0;
  var List_default = List;

  // node_modules/@mui/material/Menu/Menu.js
  init_extends();
  var React52 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is3());
  var import_prop_types32 = __toESM(require_prop_types());

  // node_modules/@mui/material/MenuList/MenuList.js
  init_extends();
  var React50 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is3());
  var import_prop_types30 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/getScrollbarSize.js
  var getScrollbarSize_default = getScrollbarSize;

  // node_modules/@mui/material/MenuList/MenuList.js
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var _excluded28 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  var MenuList = /* @__PURE__ */ React50.forwardRef(function MenuList2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded28);
    const listRef = React50.useRef(null);
    const textCriteriaRef = React50.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React50.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, {
        direction
      }) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerDocument_default(containerElement))}px`;
          listRef.current.style[direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React50.Children.forEach(children, (child, index) => {
      if (!/* @__PURE__ */ React50.isValidElement(child)) {
        if (activeItemIndex === index) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
        return;
      }
      if (true) {
        if ((0, import_react_is.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
      if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
        activeItemIndex += 1;
        if (activeItemIndex >= children.length) {
          activeItemIndex = -1;
        }
      }
    });
    const items = React50.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React50.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(List_default, _extends4({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  true ? MenuList.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: import_prop_types30.default.bool,
    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: import_prop_types30.default.bool,
    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: import_prop_types30.default.node,
    /**
     * @ignore
     */
    className: import_prop_types30.default.string,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types30.default.bool,
    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types30.default.bool,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types30.default.func,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: import_prop_types30.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@mui/material/Popover/Popover.js
  init_extends();
  var React51 = __toESM(require_react());
  var import_prop_types31 = __toESM(require_prop_types());

  // node_modules/@mui/material/Popover/popoverClasses.js
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass("MuiPopover", slot);
  }
  var popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);

  // node_modules/@mui/material/Popover/Popover.js
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var _excluded29 = ["onEntering"];
  var _excluded210 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"];
  var _excluded32 = ["slotProps"];
  function getOffsetTop(rect, vertical) {
    let offset = 0;
    if (typeof vertical === "number") {
      offset = vertical;
    } else if (vertical === "center") {
      offset = rect.height / 2;
    } else if (vertical === "bottom") {
      offset = rect.height;
    }
    return offset;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset = 0;
    if (typeof horizontal === "number") {
      offset = horizontal;
    } else if (horizontal === "center") {
      offset = rect.width / 2;
    } else if (horizontal === "right") {
      offset = rect.width;
    }
    return offset;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useUtilityClasses13 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };
  var PopoverRoot = styled_default(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var PopoverPaper = styled_default(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Popover = /* @__PURE__ */ React51.forwardRef(function Popover2(inProps, ref) {
    var _slotProps$paper, _slots$root, _slots$paper;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps: PaperPropsProp = {},
      slots,
      slotProps,
      transformOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {},
      disableScrollLock = false
    } = props, TransitionProps = _objectWithoutPropertiesLoose2(props.TransitionProps, _excluded29), other = _objectWithoutPropertiesLoose2(props, _excluded210);
    const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
    const paperRef = React51.useRef();
    const handlePaperRef = useForkRef_default(paperRef, externalPaperSlotProps.ref);
    const ownerState = _extends4({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      externalPaperSlotProps,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses13(ownerState);
    const getAnchorOffset = React51.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React51.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React51.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top = anchorOffset.top - elemTransformOrigin.vertical;
      let left = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom = top + elemRect.height;
      const right = left + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (marginThreshold !== null && top < marginThreshold) {
        const diff = top - marginThreshold;
        top -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (marginThreshold !== null && bottom > heightThreshold) {
        const diff = bottom - heightThreshold;
        top -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (marginThreshold !== null && left < marginThreshold) {
        const diff = left - marginThreshold;
        left -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right > widthThreshold) {
        const diff = right - widthThreshold;
        left -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top)}px`,
        left: `${Math.round(left)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React51.useState(open);
    const setPositioningStyles = React51.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    React51.useEffect(() => {
      if (disableScrollLock) {
        window.addEventListener("scroll", setPositioningStyles);
      }
      return () => window.removeEventListener("scroll", setPositioningStyles);
    }, [anchorEl, disableScrollLock, setPositioningStyles]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React51.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React51.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React51.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl(anchorEl)).body : void 0);
    const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
    const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
    const paperProps = useSlotProps({
      elementType: PaperSlot,
      externalSlotProps: _extends4({}, externalPaperSlotProps, {
        style: isPositioned ? externalPaperSlotProps.style : _extends4({}, externalPaperSlotProps.style, {
          opacity: 0
        })
      }),
      additionalProps: {
        elevation,
        ref: handlePaperRef
      },
      ownerState,
      className: clsx_default(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
    });
    const _useSlotProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
      externalForwardedProps: other,
      additionalProps: {
        ref,
        slotProps: {
          backdrop: {
            invisible: true
          }
        },
        container,
        open
      },
      ownerState,
      className: clsx_default(classes.root, className)
    }), {
      slotProps: rootSlotPropsProp
    } = _useSlotProps, rootProps = _objectWithoutPropertiesLoose2(_useSlotProps, _excluded32);
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(RootSlot, _extends4({}, rootProps, !isHostComponent(RootSlot) && {
      slotProps: rootSlotPropsProp,
      disableScrollLock
    }, {
      children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(TransitionComponent, _extends4({
        appear: true,
        in: open,
        onEntering: handleEntering,
        onExited: handleExited,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(PaperSlot, _extends4({}, paperProps, {
          children
        }))
      }))
    }));
  });
  true ? Popover.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: refType_default,
    /**
     * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),
     * or a function that returns either.
     * It's used to set the position of the popover.
     */
    anchorEl: chainPropTypes(import_prop_types31.default.oneOfType([HTMLElementType, import_prop_types31.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: import_prop_types31.default.shape({
      horizontal: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["center", "left", "right"]), import_prop_types31.default.number]).isRequired,
      vertical: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["bottom", "center", "top"]), import_prop_types31.default.number]).isRequired
    }),
    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: import_prop_types31.default.shape({
      left: import_prop_types31.default.number.isRequired,
      top: import_prop_types31.default.number.isRequired
    }),
    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: import_prop_types31.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    /**
     * The content of the component.
     */
    children: import_prop_types31.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types31.default.object,
    /**
     * @ignore
     */
    className: import_prop_types31.default.string,
    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types31.default.oneOfType([HTMLElementType, import_prop_types31.default.func]),
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types31.default.bool,
    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: integerPropType_default,
    /**
     * Specifies how close to the edge of the window the popover can appear.
     * If null, the popover will not be constrained by the window.
     * @default 16
     */
    marginThreshold: import_prop_types31.default.number,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: import_prop_types31.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types31.default.bool.isRequired,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     *
     * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.paper` instead.
     *
     * @default {}
     */
    PaperProps: import_prop_types31.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types31.default.shape({
      paper: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object]),
      root: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types31.default.shape({
      paper: import_prop_types31.default.elementType,
      root: import_prop_types31.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object, import_prop_types31.default.bool])), import_prop_types31.default.func, import_prop_types31.default.object]),
    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: import_prop_types31.default.shape({
      horizontal: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["center", "left", "right"]), import_prop_types31.default.number]).isRequired,
      vertical: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["bottom", "center", "top"]), import_prop_types31.default.number]).isRequired
    }),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types31.default.elementType,
    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["auto"]), import_prop_types31.default.number, import_prop_types31.default.shape({
      appear: import_prop_types31.default.number,
      enter: import_prop_types31.default.number,
      exit: import_prop_types31.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types31.default.object
  } : void 0;
  var Popover_default = Popover;

  // node_modules/@mui/material/Menu/menuClasses.js
  function getMenuUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  var menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);

  // node_modules/@mui/material/Menu/Menu.js
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var _excluded30 = ["onEntering"];
  var _excluded211 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var useUtilityClasses14 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };
  var MenuRoot = styled_default(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var MenuPaper = styled_default(PopoverPaper, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tappable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: "calc(100% - 96px)",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch"
  });
  var MenuMenuList = styled_default(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles4) => styles4.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Menu = /* @__PURE__ */ React52.forwardRef(function Menu2(inProps, ref) {
    var _slots$paper, _slotProps$paper;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      className,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu",
      slots = {},
      slotProps = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose2(props.TransitionProps, _excluded30), other = _objectWithoutPropertiesLoose2(props, _excluded211);
    const isRtl = useRtl();
    const ownerState = _extends4({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses14(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React52.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, {
          direction: isRtl ? "rtl" : "ltr"
        });
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React52.Children.map(children, (child, index) => {
      if (!/* @__PURE__ */ React52.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
    const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
    const rootSlotProps = useSlotProps({
      elementType: slots.root,
      externalSlotProps: slotProps.root,
      ownerState,
      className: [classes.root, className]
    });
    const paperSlotProps = useSlotProps({
      elementType: PaperSlot,
      externalSlotProps: paperExternalSlotProps,
      ownerState,
      className: classes.paper
    });
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(MenuRoot, _extends4({
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      slots: {
        paper: PaperSlot,
        root: slots.root
      },
      slotProps: {
        root: rootSlotProps,
        paper: paperSlotProps
      },
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends4({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      classes: PopoverClasses,
      children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(MenuMenuList, _extends4({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx_default(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  true ? Menu.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: import_prop_types32.default.oneOfType([HTMLElementType, import_prop_types32.default.func]),
    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: import_prop_types32.default.bool,
    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: import_prop_types32.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types32.default.object,
    /**
     * @ignore
     */
    className: import_prop_types32.default.string,
    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: import_prop_types32.default.bool,
    /**
     * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
     * @default {}
     */
    MenuListProps: import_prop_types32.default.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: import_prop_types32.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types32.default.bool.isRequired,
    /**
     * @ignore
     */
    PaperProps: import_prop_types32.default.object,
    /**
     * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
     */
    PopoverClasses: import_prop_types32.default.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types32.default.shape({
      paper: import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object]),
      root: import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types32.default.shape({
      paper: import_prop_types32.default.elementType,
      root: import_prop_types32.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types32.default.oneOfType([import_prop_types32.default.arrayOf(import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object, import_prop_types32.default.bool])), import_prop_types32.default.func, import_prop_types32.default.object]),
    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["auto"]), import_prop_types32.default.number, import_prop_types32.default.shape({
      appear: import_prop_types32.default.number,
      enter: import_prop_types32.default.number,
      exit: import_prop_types32.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types32.default.object,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: import_prop_types32.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = Menu;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  init_extends();
  var React53 = __toESM(require_react());
  var import_prop_types33 = __toESM(require_prop_types());

  // node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiNativeSelect", slot);
  }
  var nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var nativeSelectClasses_default = nativeSelectClasses;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var _excluded31 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
  var useUtilityClasses15 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };
  var nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends4({
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: "none",
    borderRadius: 0,
    // Reset
    cursor: "pointer",
    "&:focus": _extends4({}, theme.vars ? {
      backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
    } : {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
    }, {
      borderRadius: 0
      // Reset Chrome style
    }),
    // Remove IE11 arrow
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme.vars || theme).palette.background.paper
    },
    // Bump specificity to allow extending custom inputs
    "&&&": {
      paddingRight: 24,
      minWidth: 16
      // So it doesn't collapse.
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: (theme.vars || theme).shape.borderRadius,
    "&:focus": {
      borderRadius: (theme.vars || theme).shape.borderRadius
      // Reset the reset for Chrome style
    },
    "&&&": {
      paddingRight: 32
    }
  });
  var NativeSelectSelect = styled_default("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp_default,
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.select, styles4[ownerState.variant], ownerState.error && styles4.error, {
        [`&.${nativeSelectClasses_default.multiple}`]: styles4.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  var nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends4({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    // Center vertically, height is 1em
    pointerEvents: "none",
    // Don't block pointer events on the select under the icon.
    color: (theme.vars || theme).palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  var NativeSelectIcon = styled_default("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.icon, ownerState.variant && styles4[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles4.iconOpen];
    }
  })(nativeSelectIconStyles);
  var NativeSelectInput = /* @__PURE__ */ React53.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      error,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded31);
    const ownerState = _extends4({}, props, {
      disabled,
      variant,
      error
    });
    const classes = useUtilityClasses15(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(React53.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime35.jsx)(NativeSelectSelect, _extends4({
        ownerState,
        className: clsx_default(classes.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  true ? NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: import_prop_types33.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types33.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types33.default.string,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types33.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types33.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types33.default.elementType.isRequired,
    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: refType_default,
    /**
     * @ignore
     */
    multiple: import_prop_types33.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types33.default.string,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types33.default.func,
    /**
     * The input value.
     */
    value: import_prop_types33.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types33.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  init_extends();
  var React55 = __toESM(require_react());
  var import_prop_types35 = __toESM(require_prop_types());

  // node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  init_extends();
  var React54 = __toESM(require_react());
  var import_prop_types34 = __toESM(require_prop_types());
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var _span2;
  var _excluded33 = ["children", "classes", "className", "label", "notched"];
  var NotchedOutlineRoot = styled_default("fieldset", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  var NotchedOutlineLegend = styled_default("legend", {
    shouldForwardProp: rootShouldForwardProp_default
  })(({
    ownerState,
    theme
  }) => _extends4({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    // sync with `height` in `legend` styles
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends4({
    display: "block",
    // Fix conflict with normalize.css and sanitize.css
    padding: 0,
    height: 11,
    // sync with `lineHeight` in `legend` styles
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded33);
    const withLabel = label != null && label !== "";
    const ownerState = _extends4({}, props, {
      notched,
      withLabel
    });
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(NotchedOutlineRoot, _extends4({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span2 || (_span2 = /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        )
      })
    }));
  }
  true ? NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types34.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types34.default.object,
    /**
     * @ignore
     */
    className: import_prop_types34.default.string,
    /**
     * The label.
     */
    label: import_prop_types34.default.node,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types34.default.bool.isRequired,
    /**
     * @ignore
     */
    style: import_prop_types34.default.object
  } : void 0;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var _excluded34 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
  var useUtilityClasses16 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return _extends4({}, classes, composedClasses);
  };
  var OutlinedInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends4({
      position: "relative",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.error.main
      },
      [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends4({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  var NotchedOutlineRoot2 = styled_default(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles4) => styles4.notchedOutline
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
    };
  });
  var OutlinedInputInput = styled_default(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends4({
    padding: "16.5px 14px"
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  var OutlinedInput = /* @__PURE__ */ React55.forwardRef(function OutlinedInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded34);
    const classes = useUtilityClasses16(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
    });
    const ownerState = _extends4({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    });
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(InputBase_default, _extends4({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(NotchedOutlineRoot2, {
        ownerState,
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(React55.Fragment, {
          children: [label, "\u2009", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends4({}, classes, {
        notchedOutline: null
      })
    }));
  });
  true ? OutlinedInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types35.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types35.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types35.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types35.default.oneOfType([import_prop_types35.default.oneOf(["primary", "secondary"]), import_prop_types35.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types35.default.shape({
      Input: import_prop_types35.default.elementType,
      Root: import_prop_types35.default.elementType
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types35.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types35.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types35.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types35.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types35.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types35.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types35.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types35.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: import_prop_types35.default.node,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types35.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types35.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types35.default.string,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types35.default.bool,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types35.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types35.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types35.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types35.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types35.default.oneOfType([import_prop_types35.default.number, import_prop_types35.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types35.default.shape({
      input: import_prop_types35.default.elementType,
      root: import_prop_types35.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types35.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object, import_prop_types35.default.bool])), import_prop_types35.default.func, import_prop_types35.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types35.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types35.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = OutlinedInput;

  // node_modules/@mui/material/Select/Select.js
  init_extends();
  var React57 = __toESM(require_react());
  var import_prop_types37 = __toESM(require_prop_types());
  var import_deepmerge8 = __toESM(require_deepmerge2());

  // node_modules/@mui/material/Select/SelectInput.js
  init_extends();
  var React56 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is3());
  var import_prop_types36 = __toESM(require_prop_types());

  // node_modules/@mui/material/Select/selectClasses.js
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  var selectClasses = generateUtilityClasses("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var selectClasses_default = selectClasses;

  // node_modules/@mui/material/Select/SelectInput.js
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var _span3;
  var _excluded35 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  var SelectSelect = styled_default("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [
        // Win specificity over the input base
        {
          [`&.${selectClasses_default.select}`]: styles4.select
        },
        {
          [`&.${selectClasses_default.select}`]: styles4[ownerState.variant]
        },
        {
          [`&.${selectClasses_default.error}`]: styles4.error
        },
        {
          [`&.${selectClasses_default.multiple}`]: styles4.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${selectClasses_default.select}`]: {
      height: "auto",
      // Resets for multiple select with chips
      minHeight: "1.4375em",
      // Required for select\text-field height consistency
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  var SelectIcon = styled_default("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.icon, ownerState.variant && styles4[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles4.iconOpen];
    }
  })(nativeSelectIconStyles);
  var SelectNativeInput = styled_default("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles4) => styles4.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty2(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var useUtilityClasses17 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  var SelectInput = /* @__PURE__ */ React56.forwardRef(function SelectInput2(props, ref) {
    var _MenuProps$slotProps;
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      error = false,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name: name2,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded35);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React56.useRef(null);
    const displayRef = React56.useRef(null);
    const [displayNode, setDisplayNode] = React56.useState(null);
    const {
      current: isOpenControlled
    } = React56.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React56.useState();
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React56.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
    React56.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React56.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React56.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React56.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React56.Children.toArray(children);
    const handleChange = (event) => {
      const child = childrenArray.find((childItem) => childItem.props.value === event.target.value);
      if (child === void 0) {
        return;
      }
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name: name2
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name: name2
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!/* @__PURE__ */ React56.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : (0, import_formatMuiErrorMessage.default)(2));
        }
        selected = value.some((v) => areEqualValues(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React56.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        // The value is most likely not a valid HTML attribute.
        "data-value": child.props.value
        // Instead, we provide it as a data attribute.
      });
    });
    if (true) {
      React56.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values2 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name2 ? `(name="${name2}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values2.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name2, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display = null;
        } else {
          display = displayMultiple.reduce((output, child, index) => {
            output.push(child);
            if (index < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name2 ? `mui-component-select-${name2}` : void 0);
    const ownerState = _extends4({}, props, {
      variant,
      value,
      open,
      error
    });
    const classes = useUtilityClasses17(ownerState);
    const paperProps = _extends4({}, MenuProps.PaperProps, (_MenuProps$slotProps = MenuProps.slotProps) == null ? void 0 : _MenuProps$slotProps.paper);
    const listboxId = useId();
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(React56.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime40.jsx)(SelectSelect, _extends4({
        ref: handleDisplayRef,
        tabIndex,
        role: "combobox",
        "aria-controls": listboxId,
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx_default(SelectDisplayProps.className, classes.select, className),
        id: buttonId,
        children: isEmpty2(display) ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span3 || (_span3 = /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        ) : display
      })), /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(SelectNativeInput, _extends4({
        "aria-invalid": error,
        value: Array.isArray(value) ? value.join(",") : value,
        name: name2,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Menu_default, _extends4({
        id: `menu-${name2 || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends4({
          "aria-labelledby": labelId,
          role: "listbox",
          "aria-multiselectable": multiple ? "true" : void 0,
          disableListWrap: true,
          id: listboxId
        }, MenuProps.MenuListProps),
        slotProps: _extends4({}, MenuProps.slotProps, {
          paper: _extends4({}, paperProps, {
            style: _extends4({
              minWidth: menuMinWidth
            }, paperProps != null ? paperProps.style : null)
          })
        }),
        children: items
      }))]
    });
  });
  true ? SelectInput.propTypes = {
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types36.default.string,
    /**
     * @ignore
     */
    "aria-label": import_prop_types36.default.string,
    /**
     * @ignore
     */
    autoFocus: import_prop_types36.default.bool,
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: import_prop_types36.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: import_prop_types36.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types36.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types36.default.string,
    /**
     * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
     * You can only use it when the `native` prop is `false` (default).
     */
    defaultOpen: import_prop_types36.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types36.default.any,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types36.default.bool,
    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: import_prop_types36.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types36.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types36.default.elementType.isRequired,
    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: refType_default,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types36.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types36.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: import_prop_types36.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types36.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types36.default.func,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: import_prop_types36.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types36.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types36.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types36.default.bool,
    /**
     * @ignore
     */
    readOnly: import_prop_types36.default.bool,
    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types36.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types36.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types36.default.oneOfType([import_prop_types36.default.number, import_prop_types36.default.string]),
    /**
     * @ignore
     */
    type: import_prop_types36.default.any,
    /**
     * The input value.
     */
    value: import_prop_types36.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types36.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@mui/material/Select/Select.js
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var _excluded36 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  var _excluded212 = ["root"];
  var useUtilityClasses18 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  var styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles4) => styles4.root,
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) && prop !== "variant",
    slot: "Root"
  };
  var StyledInput = styled_default(Input_default, styledRootConfig)("");
  var StyledOutlinedInput = styled_default(OutlinedInput_default, styledRootConfig)("");
  var StyledFilledInput = styled_default(FilledInput_default, styledRootConfig)("");
  var Select = /* @__PURE__ */ React57.forwardRef(function Select2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded36);
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "error"]
    });
    const variant = fcs.variant || variantProp;
    const ownerState = _extends4({}, props, {
      variant,
      classes: classesProp
    });
    const classes = useUtilityClasses18(ownerState);
    const restOfClasses = _objectWithoutPropertiesLoose2(classes, _excluded212);
    const InputComponent = input || {
      standard: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(StyledInput, {
        ownerState
      }),
      outlined: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(StyledOutlinedInput, {
        label,
        ownerState
      }),
      filled: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(StyledFilledInput, {
        ownerState
      })
    }[variant];
    const inputComponentRef = useForkRef_default(ref, InputComponent.ref);
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(React57.Fragment, {
      children: /* @__PURE__ */ React57.cloneElement(InputComponent, _extends4({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: _extends4({
          children,
          error: fcs.error,
          IconComponent,
          variant,
          type: void 0,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple
        }, native ? {
          id
        } : {
          autoWidth,
          defaultOpen,
          displayEmpty,
          labelId,
          MenuProps,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps: _extends4({
            id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? (0, import_deepmerge8.default)(restOfClasses, inputProps.classes) : restOfClasses
        }, input ? input.props.inputProps : {})
      }, (multiple && native || displayEmpty) && variant === "outlined" ? {
        notched: true
      } : {}, {
        ref: inputComponentRef,
        className: clsx_default(InputComponent.props.className, className, classes.root)
      }, !input && {
        variant
      }, other))
    });
  });
  true ? Select.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: import_prop_types37.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: import_prop_types37.default.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: import_prop_types37.default.object,
    /**
     * @ignore
     */
    className: import_prop_types37.default.string,
    /**
     * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
     * You can only use it when the `native` prop is `false` (default).
     * @default false
     */
    defaultOpen: import_prop_types37.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types37.default.any,
    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: import_prop_types37.default.bool,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: import_prop_types37.default.elementType,
    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: import_prop_types37.default.string,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: import_prop_types37.default.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: import_prop_types37.default.object,
    /**
     * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
     */
    label: import_prop_types37.default.node,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types37.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types37.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types37.default.bool,
    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: import_prop_types37.default.bool,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<Value>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: import_prop_types37.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types37.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types37.default.func,
    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: import_prop_types37.default.bool,
    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types37.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types37.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf([""]), import_prop_types37.default.any]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types37.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = Select;

  // node_modules/@mui/material/TextField/TextField.js
  init_extends();
  var React58 = __toESM(require_react());
  var import_prop_types38 = __toESM(require_prop_types());

  // node_modules/@mui/material/TextField/textFieldClasses.js
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiTextField", slot);
  }
  var textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);

  // node_modules/@mui/material/TextField/TextField.js
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var _excluded37 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var useUtilityClasses19 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };
  var TextFieldRoot = styled_default(FormControl_default, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var TextField = /* @__PURE__ */ React58.forwardRef(function TextField2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name: name2,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose2(props, _excluded37);
    const ownerState = _extends4({}, props, {
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses19(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = useId(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(InputComponent, _extends4({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name: name2,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(TextFieldRoot, _extends4({
      className: clsx_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(InputLabel_default, _extends4({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Select_default, _extends4({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(FormHelperText_default, _extends4({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  true ? TextField.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types38.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: import_prop_types38.default.bool,
    /**
     * @ignore
     */
    children: import_prop_types38.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types38.default.object,
    /**
     * @ignore
     */
    className: import_prop_types38.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types38.default.string]),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types38.default.any,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types38.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types38.default.bool,
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: import_prop_types38.default.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types38.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types38.default.node,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: import_prop_types38.default.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: import_prop_types38.default.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types38.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: import_prop_types38.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types38.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types38.default.oneOf(["dense", "none", "normal"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: import_prop_types38.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types38.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types38.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types38.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types38.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types38.default.string,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: import_prop_types38.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types38.default.oneOfType([import_prop_types38.default.number, import_prop_types38.default.string]),
    /**
     * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: import_prop_types38.default.bool,
    /**
     * Props applied to the [`Select`](/material-ui/api/select/) element.
     */
    SelectProps: import_prop_types38.default.object,
    /**
     * The size of the component.
     */
    size: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["medium", "small"]), import_prop_types38.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: import_prop_types38.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types38.default.any,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types38.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = TextField;

  // src/landing/landing.js
  var import_react11 = __toESM(require_react());

  // src/landing/fun-background.js
  var import_react10 = __toESM(require_react());

  // node_modules/dexie/import-wrapper.mjs
  var import_dexie = __toESM(require_dexie(), 1);
  var DexieSymbol = Symbol.for("Dexie");
  var Dexie = globalThis[DexieSymbol] || (globalThis[DexieSymbol] = import_dexie.default);
  if (import_dexie.default.semVer !== Dexie.semVer) {
    throw new Error(`Two different versions of Dexie loaded in the same app: ${import_dexie.default.semVer} and ${Dexie.semVer}`);
  }
  var { liveQuery, mergeRanges, rangesOverlap, RangeSet, cmp, Entity, PropModSymbol, PropModification, replacePrefix } = Dexie;
  var import_wrapper_default = Dexie;

  // coldsky/lib/shorten.js
  function likelyDID(text) {
    return text && (!text.trim().indexOf("did:") || text.trim().length === 24 && !/[^\sa-z0-9]/i.test(text));
  }
  function shortenDID(did) {
    return did && /** @type {T} */
    (did.replace(_shortenDID_Regex, "").toLowerCase() || void 0);
  }
  var _shortenDID_Regex = /^did\:plc\:/;
  function unwrapShortDID(shortDID) {
    return !shortDID ? void 0 : shortDID.indexOf(":") < 0 ? "did:plc:" + shortDID.toLowerCase() : shortDID.toLowerCase();
  }
  function shortenHandle(handle) {
    handle = cheapNormalizeHandle(handle);
    return handle && /** @type {T} */
    (handle.replace(_shortenHandle_Regex, "").toLowerCase() || void 0);
  }
  var _shortenHandle_Regex = /\.bsky\.social$/;
  function unwrapShortHandle(shortHandle) {
    if (likelyDID(shortHandle))
      return unwrapShortDID(shortHandle);
    shortHandle = cheapNormalizeHandle(shortHandle);
    return !shortHandle ? void 0 : shortHandle.indexOf(".") < 0 ? shortHandle.toLowerCase() + ".bsky.social" : shortHandle.toLowerCase();
  }
  function cheapNormalizeHandle(handle) {
    handle = handle && handle.trim().toLowerCase();
    if (handle && handle.charCodeAt(0) === 64)
      handle = handle.slice(1);
    const urlprefix = "https://bsky.app/";
    if (handle && handle.lastIndexOf(urlprefix, 0) === 0) {
      const postURL = breakPostURL(handle);
      if (postURL && postURL.shortDID)
        return postURL.shortDID;
    }
    if (handle && handle.lastIndexOf("at:", 0) === 0) {
      const feedUri = breakFeedUri(handle);
      if (feedUri && feedUri.shortDID)
        return feedUri.shortDID;
      if (handle && handle.lastIndexOf("at://", 0) === 0)
        handle = handle.slice(5);
      else
        handle = handle.slice(3);
    }
    return handle || void 0;
  }
  var offsetTooLarge = Date.UTC(2022, 1, 1);
  function breakPostURL(url) {
    if (!url)
      return;
    const match2 = _breakPostURL_Regex.exec(url);
    if (!match2)
      return;
    return { shortDID: match2[1], postID: match2[2] };
  }
  var _breakPostURL_Regex = /^http[s]?\:\/\/bsky\.app\/profile\/([a-z0-9\.\:]+)\/post\/([a-z0-9]+)$/;
  function breakFeedUri(uri) {
    if (!uri)
      return;
    const match2 = _breakFeedUri_Regex.exec(uri);
    if (!match2 || !match2[3])
      return;
    return { shortDID: match2[2], postID: match2[3] };
  }
  var _breakFeedUri_Regex = /^at\:\/\/(did:plc:)?([a-z0-9]+)\/[a-z\.]+\/?(.*)?$/;

  // coldsky/lib/is-promise.js
  function isPromise(x) {
    if (!x || typeof x !== "object")
      return false;
    else
      return typeof x.then === "function";
  }

  // coldsky/lib/coldsky-agent.js
  var import_api = __toESM(require_dist6());

  // coldsky/lib/throttled-async-cache.js
  function throttledAsyncCache(call, { maxConcurrency = 3, interval = 100 } = {}) {
    const cache2 = multikeyMap();
    const outstandingRequests = /* @__PURE__ */ new Set();
    const waitingRequests = /* @__PURE__ */ new Set();
    var scheduleMoreLaterTimeout;
    throttledCall.prepopulate = prepopulate;
    throttledCall.evict = evict;
    return throttledCall;
    function prepopulate(value, ...args) {
      cache2.set(...args, { value });
    }
    function evict(...args) {
      cache2.delete(...args);
    }
    function throttledCall(...args) {
      let result = cache2.get(...args);
      if (result) {
        if (isPromise(result.value))
          result.priority++;
        return result.value;
      }
      let scheduleNow;
      const schedulePromise = new Promise((resolve) => scheduleNow = resolve);
      const entry = {
        priority: 0,
        value: invokeCall(),
        scheduleNow
      };
      cache2.set(...args, entry);
      waitingRequests.add(entry);
      scheduleAsAppropriate();
      return entry.value;
      function invokeCall() {
        return __async(this, null, function* () {
          yield schedulePromise;
          waitingRequests.delete(entry);
          outstandingRequests.add(entry);
          try {
            const result2 = yield call(...args);
            entry.value = result2;
            return result2;
          } finally {
            outstandingRequests.delete(entry);
            scheduleAsAppropriate();
          }
        });
      }
    }
    function scheduleAsAppropriate() {
      return __async(this, null, function* () {
        if (outstandingRequests.size >= maxConcurrency)
          return;
        if (interval) {
          yield new Promise((resolve) => setTimeout(resolve, interval));
          if (outstandingRequests.size >= maxConcurrency)
            return;
        }
        const nextRequest = [...waitingRequests].sort((a, b) => b.priority - a.priority)[0];
        if (!nextRequest)
          return;
        nextRequest.scheduleNow();
        if (outstandingRequests.size < maxConcurrency) {
          clearTimeout(scheduleMoreLaterTimeout);
          scheduleMoreLaterTimeout = setTimeout(scheduleAsAppropriate, interval || 100);
        }
      });
    }
  }
  function multikeyMap() {
    const storeMap = /* @__PURE__ */ new Map();
    const resultMap = {
      get: get2,
      set,
      delete: deleteKeys,
      has,
      clear
    };
    return resultMap;
    function get2(...keys) {
      let entry = storeMap;
      for (const key of keys) {
        entry = entry.get(key);
        if (!entry)
          return;
      }
      return entry._value;
    }
    function set(...keys) {
      let entry = storeMap;
      for (let i = 0; i < keys.length - 1; i++) {
        const key = keys[i];
        entry = entry.get(key) || entry.set(key, /* @__PURE__ */ new Map()).get(key);
      }
      entry._value = keys[keys.length - 1];
      return resultMap;
    }
    function deleteKeys(...keys) {
      let entry = storeMap;
      for (let i = 0; i < keys.length - 1; i++) {
        const key = keys[i];
        entry = entry.get(key);
        if (!entry)
          return false;
      }
      return entry.delete(keys[keys.length - 1]);
    }
    function has(...keys) {
      let entry = storeMap;
      for (const key of keys) {
        entry = entry.get(key);
        if (!entry)
          return false;
      }
      return true;
    }
    function clear() {
      return storeMap.clear();
    }
  }

  // coldsky/lib/coldsky-agent.js
  var BSKY_SOCIAL_URL = "https://bsky.social/";
  var BSKY_NETWORK_URL = "https://bsky.network/";
  var BSKY_PUBLIC_URL = "https://public.api.bsky.app/";
  var ColdskyAgent = class extends import_api.BskyAgent {
    /** @param {ColdskyAgentOptions} args */
    constructor(args) {
      var _a3, _b;
      super(__spreadProps(__spreadValues({}, args), {
        // most of methods work fine on bsky.social
        service: args.service ? args.service : BSKY_SOCIAL_URL
      }));
      for (const key in this.com.atproto) {
        const ns = this.com.atproto[key];
        const baseClient = (_b = (_a3 = ns._service) == null ? void 0 : _a3.xrpc) == null ? void 0 : _b.baseClient;
        if (baseClient)
          this.patchBaseClient(baseClient, !!args.service);
      }
    }
    /**
     * @param {typeof this.com.atproto.sync._service.xrpc.baseClient} baseClient
     * @param {boolean} [serviceDefined] 
     */
    patchBaseClient(baseClient, serviceDefined) {
      baseClient.lex.assertValidXrpcOutput = function(lexUri, value, ...rest) {
        return true;
      };
      if (
        /** @type {*} */
        baseClient.fetch._patchedFetch
      )
        return;
      baseClient.fetch = overrideFetch(baseClient.fetch.bind(baseClient), serviceDefined);
    }
  };
  var typedCaches = {};
  function overrideFetch(baseFetch, serviceDefined) {
    if (baseFetch._patchedFetch)
      return baseFetch;
    fetchOverride._patchedFetch = true;
    return fetchOverride;
    function fetchOverride(httpUri, httpMethod, httpHeaders, httpReqBody) {
      const useBskyNetwork = !serviceDefined && httpUri.indexOf("com.atproto.sync.listRepos") >= 0;
      const useHttpUri = useBskyNetwork ? "https://corsproxy.io/?" + httpUri.replace(BSKY_SOCIAL_URL, BSKY_NETWORK_URL) : httpUri;
      const qPos = useHttpUri.indexOf("?");
      const httpUriKey = qPos >= 0 ? useHttpUri.slice(0, qPos) : useHttpUri;
      const headersUnique = JSON.stringify(httpHeaders);
      const httpReqBodyUnique = JSON.stringify(httpReqBody);
      let cache2 = typedCaches[httpUriKey];
      if (!cache2) {
        cache2 = typedCaches[httpUriKey] = throttledAsyncCache(
          fetchWithBase,
          { maxConcurrency: 2, interval: 100 }
        );
      }
      return cache2(useHttpUri, httpMethod, headersUnique, httpReqBodyUnique);
      function fetchWithBase(httpUri2, httpMethod2, httpHeadersStringified, httpReqBodyStringified) {
        const startFetch = Date.now();
        const httpHeaders2 = typeof httpHeadersStringified === "undefined" ? void 0 : JSON.parse(httpHeadersStringified);
        const httpReqBody2 = typeof httpReqBodyStringified === "undefined" ? void 0 : JSON.parse(httpReqBodyStringified);
        return fetchWithRateHandling();
        function fetchWithRateHandling() {
          return baseFetch(httpUri2, httpMethod2, httpHeaders2, httpReqBody2).then(
            (result) => {
              setTimeout(() => {
                cache2.evict(httpUri2, httpMethod2, headersUnique, httpReqBodyUnique);
              }, httpMethod2 === "GET" ? 1e3 : 100);
              return result;
            },
            handleFetchError
          );
        }
        function handleFetchError(error) {
          if (/\brate\b/i.test(error.message || "")) {
            const waitTime = Math.min(
              Math.max(1e3, (Date.now() - startFetch) / 3),
              1e3
            );
            return new Promise((resolve) => setTimeout(resolve, waitTime)).then(() => fetchWithRateHandling());
          } else {
            setTimeout(() => {
              cache2.evict(httpUri2, httpMethod2, headersUnique, httpReqBodyUnique);
            }, 10);
            throw error;
          }
        }
      }
    }
  }

  // coldsky/node_modules/cbor-x/decode.js
  var decoder;
  try {
    decoder = new TextDecoder();
  } catch (error) {
  }
  var src4;
  var srcEnd;
  var position2 = 0;
  var EMPTY_ARRAY = [];
  var LEGACY_RECORD_INLINE_ID = 105;
  var RECORD_DEFINITIONS_ID = 57342;
  var RECORD_INLINE_ID = 57343;
  var BUNDLED_STRINGS_ID = 57337;
  var PACKED_REFERENCE_TAG_ID = 6;
  var STOP_CODE = {};
  var strings = EMPTY_ARRAY;
  var stringPosition = 0;
  var currentDecoder = {};
  var currentStructures;
  var srcString;
  var srcStringStart = 0;
  var srcStringEnd = 0;
  var bundledStrings;
  var referenceMap;
  var currentExtensions = [];
  var currentExtensionRanges = [];
  var packedValues;
  var dataView;
  var restoreMapsAsObject;
  var defaultOptions = {
    useRecords: false,
    mapsAsObjects: true
  };
  var sequentialMode = false;
  var inlineObjectReadThreshold = 2;
  try {
    new Function("");
  } catch (error) {
    inlineObjectReadThreshold = Infinity;
  }
  var Decoder4 = class _Decoder {
    constructor(options) {
      if (options) {
        if ((options.keyMap || options._keyMap) && !options.useRecords) {
          options.useRecords = false;
          options.mapsAsObjects = true;
        }
        if (options.useRecords === false && options.mapsAsObjects === void 0)
          options.mapsAsObjects = true;
        if (options.getStructures)
          options.getShared = options.getStructures;
        if (options.getShared && !options.structures)
          (options.structures = []).uninitialized = true;
        if (options.keyMap) {
          this.mapKey = /* @__PURE__ */ new Map();
          for (let [k, v] of Object.entries(options.keyMap))
            this.mapKey.set(v, k);
        }
      }
      Object.assign(this, options);
    }
    /*
    decodeKey(key) {
    	return this.keyMap
    		? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key
    		: key
    }
    */
    decodeKey(key) {
      return this.keyMap ? this.mapKey.get(key) || key : key;
    }
    encodeKey(key) {
      return this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key;
    }
    encodeKeys(rec) {
      if (!this._keyMap)
        return rec;
      let map = /* @__PURE__ */ new Map();
      for (let [k, v] of Object.entries(rec))
        map.set(this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k, v);
      return map;
    }
    decodeKeys(map) {
      if (!this._keyMap || map.constructor.name != "Map")
        return map;
      if (!this._mapKey) {
        this._mapKey = /* @__PURE__ */ new Map();
        for (let [k, v] of Object.entries(this._keyMap))
          this._mapKey.set(v, k);
      }
      let res = {};
      map.forEach((v, k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] = v);
      return res;
    }
    mapDecode(source, end) {
      let res = this.decode(source);
      if (this._keyMap) {
        switch (res.constructor.name) {
          case "Array":
            return res.map((r2) => this.decodeKeys(r2));
        }
      }
      return res;
    }
    decode(source, end) {
      if (src4) {
        return saveState(() => {
          clearSource();
          return this ? this.decode(source, end) : _Decoder.prototype.decode.call(defaultOptions, source, end);
        });
      }
      srcEnd = end > -1 ? end : source.length;
      position2 = 0;
      stringPosition = 0;
      srcStringEnd = 0;
      srcString = null;
      strings = EMPTY_ARRAY;
      bundledStrings = null;
      src4 = source;
      try {
        dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));
      } catch (error) {
        src4 = null;
        if (source instanceof Uint8Array)
          throw error;
        throw new Error("Source must be a Uint8Array or Buffer but was a " + (source && typeof source == "object" ? source.constructor.name : typeof source));
      }
      if (this instanceof _Decoder) {
        currentDecoder = this;
        packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);
        if (this.structures) {
          currentStructures = this.structures;
          return checkedRead();
        } else if (!currentStructures || currentStructures.length > 0) {
          currentStructures = [];
        }
      } else {
        currentDecoder = defaultOptions;
        if (!currentStructures || currentStructures.length > 0)
          currentStructures = [];
        packedValues = null;
      }
      return checkedRead();
    }
    decodeMultiple(source, forEach) {
      let values2, lastPosition = 0;
      try {
        let size = source.length;
        sequentialMode = true;
        let value = this ? this.decode(source, size) : defaultDecoder.decode(source, size);
        if (forEach) {
          if (forEach(value) === false) {
            return;
          }
          while (position2 < size) {
            lastPosition = position2;
            if (forEach(checkedRead()) === false) {
              return;
            }
          }
        } else {
          values2 = [value];
          while (position2 < size) {
            lastPosition = position2;
            values2.push(checkedRead());
          }
          return values2;
        }
      } catch (error) {
        error.lastPosition = lastPosition;
        error.values = values2;
        throw error;
      } finally {
        sequentialMode = false;
        clearSource();
      }
    }
  };
  function checkedRead() {
    try {
      let result = read4();
      if (bundledStrings) {
        if (position2 >= bundledStrings.postBundlePosition) {
          let error = new Error("Unexpected bundle position");
          error.incomplete = true;
          throw error;
        }
        position2 = bundledStrings.postBundlePosition;
        bundledStrings = null;
      }
      if (position2 == srcEnd) {
        currentStructures = null;
        src4 = null;
        if (referenceMap)
          referenceMap = null;
      } else if (position2 > srcEnd) {
        let error = new Error("Unexpected end of CBOR data");
        error.incomplete = true;
        throw error;
      } else if (!sequentialMode) {
        throw new Error("Data read, but end of buffer not reached");
      }
      return result;
    } catch (error) {
      clearSource();
      if (error instanceof RangeError || error.message.startsWith("Unexpected end of buffer")) {
        error.incomplete = true;
      }
      throw error;
    }
  }
  function read4() {
    let token2 = src4[position2++];
    let majorType = token2 >> 5;
    token2 = token2 & 31;
    if (token2 > 23) {
      switch (token2) {
        case 24:
          token2 = src4[position2++];
          break;
        case 25:
          if (majorType == 7) {
            return getFloat16();
          }
          token2 = dataView.getUint16(position2);
          position2 += 2;
          break;
        case 26:
          if (majorType == 7) {
            let value = dataView.getFloat32(position2);
            if (currentDecoder.useFloat32 > 2) {
              let multiplier = mult10[(src4[position2] & 127) << 1 | src4[position2 + 1] >> 7];
              position2 += 4;
              return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;
            }
            position2 += 4;
            return value;
          }
          token2 = dataView.getUint32(position2);
          position2 += 4;
          break;
        case 27:
          if (majorType == 7) {
            let value = dataView.getFloat64(position2);
            position2 += 8;
            return value;
          }
          if (majorType > 1) {
            if (dataView.getUint32(position2) > 0)
              throw new Error("JavaScript does not support arrays, maps, or strings with length over 4294967295");
            token2 = dataView.getUint32(position2 + 4);
          } else if (currentDecoder.int64AsNumber) {
            token2 = dataView.getUint32(position2) * 4294967296;
            token2 += dataView.getUint32(position2 + 4);
          } else
            token2 = dataView.getBigUint64(position2);
          position2 += 8;
          break;
        case 31:
          switch (majorType) {
            case 2:
            case 3:
              throw new Error("Indefinite length not supported for byte or text strings");
            case 4:
              let array = [];
              let value, i = 0;
              while ((value = read4()) != STOP_CODE) {
                array[i++] = value;
              }
              return majorType == 4 ? array : majorType == 3 ? array.join("") : Buffer.concat(array);
            case 5:
              let key;
              if (currentDecoder.mapsAsObjects) {
                let object = {};
                if (currentDecoder.keyMap)
                  while ((key = read4()) != STOP_CODE)
                    object[safeKey(currentDecoder.decodeKey(key))] = read4();
                else
                  while ((key = read4()) != STOP_CODE)
                    object[safeKey(key)] = read4();
                return object;
              } else {
                if (restoreMapsAsObject) {
                  currentDecoder.mapsAsObjects = true;
                  restoreMapsAsObject = false;
                }
                let map = /* @__PURE__ */ new Map();
                if (currentDecoder.keyMap)
                  while ((key = read4()) != STOP_CODE)
                    map.set(currentDecoder.decodeKey(key), read4());
                else
                  while ((key = read4()) != STOP_CODE)
                    map.set(key, read4());
                return map;
              }
            case 7:
              return STOP_CODE;
            default:
              throw new Error("Invalid major type for indefinite length " + majorType);
          }
        default:
          throw new Error("Unknown token " + token2);
      }
    }
    switch (majorType) {
      case 0:
        return token2;
      case 1:
        return ~token2;
      case 2:
        return readBin(token2);
      case 3:
        if (srcStringEnd >= position2) {
          return srcString.slice(position2 - srcStringStart, (position2 += token2) - srcStringStart);
        }
        if (srcStringEnd == 0 && srcEnd < 140 && token2 < 32) {
          let string2 = token2 < 16 ? shortStringInJS(token2) : longStringInJS(token2);
          if (string2 != null)
            return string2;
        }
        return readFixedString(token2);
      case 4:
        let array = new Array(token2);
        for (let i = 0; i < token2; i++)
          array[i] = read4();
        return array;
      case 5:
        if (currentDecoder.mapsAsObjects) {
          let object = {};
          if (currentDecoder.keyMap)
            for (let i = 0; i < token2; i++)
              object[safeKey(currentDecoder.decodeKey(read4()))] = read4();
          else
            for (let i = 0; i < token2; i++)
              object[safeKey(read4())] = read4();
          return object;
        } else {
          if (restoreMapsAsObject) {
            currentDecoder.mapsAsObjects = true;
            restoreMapsAsObject = false;
          }
          let map = /* @__PURE__ */ new Map();
          if (currentDecoder.keyMap)
            for (let i = 0; i < token2; i++)
              map.set(currentDecoder.decodeKey(read4()), read4());
          else
            for (let i = 0; i < token2; i++)
              map.set(read4(), read4());
          return map;
        }
      case 6:
        if (token2 >= BUNDLED_STRINGS_ID) {
          let structure = currentStructures[token2 & 8191];
          if (structure) {
            if (!structure.read)
              structure.read = createStructureReader(structure);
            return structure.read();
          }
          if (token2 < 65536) {
            if (token2 == RECORD_INLINE_ID) {
              let length6 = readJustLength();
              let id = read4();
              let structure2 = read4();
              recordDefinition(id, structure2);
              let object = {};
              if (currentDecoder.keyMap)
                for (let i = 2; i < length6; i++) {
                  let key = currentDecoder.decodeKey(structure2[i - 2]);
                  object[safeKey(key)] = read4();
                }
              else
                for (let i = 2; i < length6; i++) {
                  let key = structure2[i - 2];
                  object[safeKey(key)] = read4();
                }
              return object;
            } else if (token2 == RECORD_DEFINITIONS_ID) {
              let length6 = readJustLength();
              let id = read4();
              for (let i = 2; i < length6; i++) {
                recordDefinition(id++, read4());
              }
              return read4();
            } else if (token2 == BUNDLED_STRINGS_ID) {
              return readBundleExt();
            }
            if (currentDecoder.getShared) {
              loadShared();
              structure = currentStructures[token2 & 8191];
              if (structure) {
                if (!structure.read)
                  structure.read = createStructureReader(structure);
                return structure.read();
              }
            }
          }
        }
        let extension = currentExtensions[token2];
        if (extension) {
          if (extension.handlesRead)
            return extension(read4);
          else
            return extension(read4());
        } else {
          let input = read4();
          for (let i = 0; i < currentExtensionRanges.length; i++) {
            let value = currentExtensionRanges[i](token2, input);
            if (value !== void 0)
              return value;
          }
          return new Tag(input, token2);
        }
      case 7:
        switch (token2) {
          case 20:
            return false;
          case 21:
            return true;
          case 22:
            return null;
          case 23:
            return;
          case 31:
          default:
            let packedValue = (packedValues || getPackedValues())[token2];
            if (packedValue !== void 0)
              return packedValue;
            throw new Error("Unknown token " + token2);
        }
      default:
        if (isNaN(token2)) {
          let error = new Error("Unexpected end of CBOR data");
          error.incomplete = true;
          throw error;
        }
        throw new Error("Unknown CBOR token " + token2);
    }
  }
  var validName = /^[a-zA-Z_$][a-zA-Z\d_$]*$/;
  function createStructureReader(structure) {
    function readObject() {
      let length6 = src4[position2++];
      length6 = length6 & 31;
      if (length6 > 23) {
        switch (length6) {
          case 24:
            length6 = src4[position2++];
            break;
          case 25:
            length6 = dataView.getUint16(position2);
            position2 += 2;
            break;
          case 26:
            length6 = dataView.getUint32(position2);
            position2 += 4;
            break;
          default:
            throw new Error("Expected array header, but got " + src4[position2 - 1]);
        }
      }
      let compiledReader = this.compiledReader;
      while (compiledReader) {
        if (compiledReader.propertyCount === length6)
          return compiledReader(read4);
        compiledReader = compiledReader.next;
      }
      if (this.slowReads++ >= inlineObjectReadThreshold) {
        let array = this.length == length6 ? this : this.slice(0, length6);
        compiledReader = currentDecoder.keyMap ? new Function("r", "return {" + array.map((k) => currentDecoder.decodeKey(k)).map((k) => validName.test(k) ? safeKey(k) + ":r()" : "[" + JSON.stringify(k) + "]:r()").join(",") + "}") : new Function("r", "return {" + array.map((key) => validName.test(key) ? safeKey(key) + ":r()" : "[" + JSON.stringify(key) + "]:r()").join(",") + "}");
        if (this.compiledReader)
          compiledReader.next = this.compiledReader;
        compiledReader.propertyCount = length6;
        this.compiledReader = compiledReader;
        return compiledReader(read4);
      }
      let object = {};
      if (currentDecoder.keyMap)
        for (let i = 0; i < length6; i++)
          object[safeKey(currentDecoder.decodeKey(this[i]))] = read4();
      else
        for (let i = 0; i < length6; i++) {
          object[safeKey(this[i])] = read4();
        }
      return object;
    }
    structure.slowReads = 0;
    return readObject;
  }
  function safeKey(key) {
    if (typeof key === "string")
      return key === "__proto__" ? "__proto_" : key;
    if (typeof key === "number" || typeof key === "boolean" || typeof key === "bigint")
      return key.toString();
    if (key == null)
      return key + "";
    throw new Error("Invalid property name type " + typeof key);
  }
  var readFixedString = readStringJS;
  function readStringJS(length6) {
    let result;
    if (length6 < 16) {
      if (result = shortStringInJS(length6))
        return result;
    }
    if (length6 > 64 && decoder)
      return decoder.decode(src4.subarray(position2, position2 += length6));
    const end = position2 + length6;
    const units = [];
    result = "";
    while (position2 < end) {
      const byte1 = src4[position2++];
      if ((byte1 & 128) === 0) {
        units.push(byte1);
      } else if ((byte1 & 224) === 192) {
        const byte2 = src4[position2++] & 63;
        units.push((byte1 & 31) << 6 | byte2);
      } else if ((byte1 & 240) === 224) {
        const byte2 = src4[position2++] & 63;
        const byte3 = src4[position2++] & 63;
        units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
      } else if ((byte1 & 248) === 240) {
        const byte2 = src4[position2++] & 63;
        const byte3 = src4[position2++] & 63;
        const byte4 = src4[position2++] & 63;
        let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
        if (unit > 65535) {
          unit -= 65536;
          units.push(unit >>> 10 & 1023 | 55296);
          unit = 56320 | unit & 1023;
        }
        units.push(unit);
      } else {
        units.push(byte1);
      }
      if (units.length >= 4096) {
        result += fromCharCode.apply(String, units);
        units.length = 0;
      }
    }
    if (units.length > 0) {
      result += fromCharCode.apply(String, units);
    }
    return result;
  }
  var fromCharCode = String.fromCharCode;
  function longStringInJS(length6) {
    let start = position2;
    let bytes = new Array(length6);
    for (let i = 0; i < length6; i++) {
      const byte = src4[position2++];
      if ((byte & 128) > 0) {
        position2 = start;
        return;
      }
      bytes[i] = byte;
    }
    return fromCharCode.apply(String, bytes);
  }
  function shortStringInJS(length6) {
    if (length6 < 4) {
      if (length6 < 2) {
        if (length6 === 0)
          return "";
        else {
          let a = src4[position2++];
          if ((a & 128) > 1) {
            position2 -= 1;
            return;
          }
          return fromCharCode(a);
        }
      } else {
        let a = src4[position2++];
        let b = src4[position2++];
        if ((a & 128) > 0 || (b & 128) > 0) {
          position2 -= 2;
          return;
        }
        if (length6 < 3)
          return fromCharCode(a, b);
        let c = src4[position2++];
        if ((c & 128) > 0) {
          position2 -= 3;
          return;
        }
        return fromCharCode(a, b, c);
      }
    } else {
      let a = src4[position2++];
      let b = src4[position2++];
      let c = src4[position2++];
      let d = src4[position2++];
      if ((a & 128) > 0 || (b & 128) > 0 || (c & 128) > 0 || (d & 128) > 0) {
        position2 -= 4;
        return;
      }
      if (length6 < 6) {
        if (length6 === 4)
          return fromCharCode(a, b, c, d);
        else {
          let e = src4[position2++];
          if ((e & 128) > 0) {
            position2 -= 5;
            return;
          }
          return fromCharCode(a, b, c, d, e);
        }
      } else if (length6 < 8) {
        let e = src4[position2++];
        let f = src4[position2++];
        if ((e & 128) > 0 || (f & 128) > 0) {
          position2 -= 6;
          return;
        }
        if (length6 < 7)
          return fromCharCode(a, b, c, d, e, f);
        let g = src4[position2++];
        if ((g & 128) > 0) {
          position2 -= 7;
          return;
        }
        return fromCharCode(a, b, c, d, e, f, g);
      } else {
        let e = src4[position2++];
        let f = src4[position2++];
        let g = src4[position2++];
        let h = src4[position2++];
        if ((e & 128) > 0 || (f & 128) > 0 || (g & 128) > 0 || (h & 128) > 0) {
          position2 -= 8;
          return;
        }
        if (length6 < 10) {
          if (length6 === 8)
            return fromCharCode(a, b, c, d, e, f, g, h);
          else {
            let i = src4[position2++];
            if ((i & 128) > 0) {
              position2 -= 9;
              return;
            }
            return fromCharCode(a, b, c, d, e, f, g, h, i);
          }
        } else if (length6 < 12) {
          let i = src4[position2++];
          let j = src4[position2++];
          if ((i & 128) > 0 || (j & 128) > 0) {
            position2 -= 10;
            return;
          }
          if (length6 < 11)
            return fromCharCode(a, b, c, d, e, f, g, h, i, j);
          let k = src4[position2++];
          if ((k & 128) > 0) {
            position2 -= 11;
            return;
          }
          return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);
        } else {
          let i = src4[position2++];
          let j = src4[position2++];
          let k = src4[position2++];
          let l = src4[position2++];
          if ((i & 128) > 0 || (j & 128) > 0 || (k & 128) > 0 || (l & 128) > 0) {
            position2 -= 12;
            return;
          }
          if (length6 < 14) {
            if (length6 === 12)
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);
            else {
              let m = src4[position2++];
              if ((m & 128) > 0) {
                position2 -= 13;
                return;
              }
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);
            }
          } else {
            let m = src4[position2++];
            let n = src4[position2++];
            if ((m & 128) > 0 || (n & 128) > 0) {
              position2 -= 14;
              return;
            }
            if (length6 < 15)
              return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);
            let o = src4[position2++];
            if ((o & 128) > 0) {
              position2 -= 15;
              return;
            }
            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
          }
        }
      }
    }
  }
  function readBin(length6) {
    return currentDecoder.copyBuffers ? (
      // specifically use the copying slice (not the node one)
      Uint8Array.prototype.slice.call(src4, position2, position2 += length6)
    ) : src4.subarray(position2, position2 += length6);
  }
  var f32Array = new Float32Array(1);
  var u8Array = new Uint8Array(f32Array.buffer, 0, 4);
  function getFloat16() {
    let byte0 = src4[position2++];
    let byte1 = src4[position2++];
    let exponent = (byte0 & 127) >> 2;
    if (exponent === 31) {
      if (byte1 || byte0 & 3)
        return NaN;
      return byte0 & 128 ? -Infinity : Infinity;
    }
    if (exponent === 0) {
      let abs2 = ((byte0 & 3) << 8 | byte1) / (1 << 24);
      return byte0 & 128 ? -abs2 : abs2;
    }
    u8Array[3] = byte0 & 128 | // sign bit
    (exponent >> 1) + 56;
    u8Array[2] = (byte0 & 7) << 5 | // last exponent bit and first two mantissa bits
    byte1 >> 3;
    u8Array[1] = byte1 << 5;
    u8Array[0] = 0;
    return f32Array[0];
  }
  var keyCache = new Array(4096);
  var Tag = class {
    constructor(value, tag) {
      this.value = value;
      this.tag = tag;
    }
  };
  currentExtensions[0] = (dateString) => {
    return new Date(dateString);
  };
  currentExtensions[1] = (epochSec) => {
    return new Date(Math.round(epochSec * 1e3));
  };
  currentExtensions[2] = (buffer2) => {
    let value = BigInt(0);
    for (let i = 0, l = buffer2.byteLength; i < l; i++) {
      value = BigInt(buffer2[i]) + value << BigInt(8);
    }
    return value;
  };
  currentExtensions[3] = (buffer2) => {
    return BigInt(-1) - currentExtensions[2](buffer2);
  };
  currentExtensions[4] = (fraction) => {
    return +(fraction[1] + "e" + fraction[0]);
  };
  currentExtensions[5] = (fraction) => {
    return fraction[1] * Math.exp(fraction[0] * Math.log(2));
  };
  var recordDefinition = (id, structure) => {
    id = id - 57344;
    let existingStructure = currentStructures[id];
    if (existingStructure && existingStructure.isShared) {
      (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;
    }
    currentStructures[id] = structure;
    structure.read = createStructureReader(structure);
  };
  currentExtensions[LEGACY_RECORD_INLINE_ID] = (data) => {
    let length6 = data.length;
    let structure = data[1];
    recordDefinition(data[0], structure);
    let object = {};
    for (let i = 2; i < length6; i++) {
      let key = structure[i - 2];
      object[safeKey(key)] = data[i];
    }
    return object;
  };
  currentExtensions[14] = (value) => {
    if (bundledStrings)
      return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value);
    return new Tag(value, 14);
  };
  currentExtensions[15] = (value) => {
    if (bundledStrings)
      return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);
    return new Tag(value, 15);
  };
  var glbl = { Error, RegExp };
  currentExtensions[27] = (data) => {
    return (glbl[data[0]] || Error)(data[1], data[2]);
  };
  var packedTable = (read6) => {
    if (src4[position2++] != 132) {
      let error = new Error("Packed values structure must be followed by a 4 element array");
      if (src4.length < position2)
        error.incomplete = true;
      throw error;
    }
    let newPackedValues = read6();
    if (!newPackedValues || !newPackedValues.length) {
      let error = new Error("Packed values structure must be followed by a 4 element array");
      error.incomplete = true;
      throw error;
    }
    packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;
    packedValues.prefixes = read6();
    packedValues.suffixes = read6();
    return read6();
  };
  packedTable.handlesRead = true;
  currentExtensions[51] = packedTable;
  currentExtensions[PACKED_REFERENCE_TAG_ID] = (data) => {
    if (!packedValues) {
      if (currentDecoder.getShared)
        loadShared();
      else
        return new Tag(data, PACKED_REFERENCE_TAG_ID);
    }
    if (typeof data == "number")
      return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];
    let error = new Error("No support for non-integer packed references yet");
    if (data === void 0)
      error.incomplete = true;
    throw error;
  };
  currentExtensions[28] = (read6) => {
    if (!referenceMap) {
      referenceMap = /* @__PURE__ */ new Map();
      referenceMap.id = 0;
    }
    let id = referenceMap.id++;
    let startingPosition = position2;
    let token2 = src4[position2];
    let target2;
    if (token2 >> 5 == 4)
      target2 = [];
    else
      target2 = {};
    let refEntry = { target: target2 };
    referenceMap.set(id, refEntry);
    let targetProperties = read6();
    if (refEntry.used) {
      if (Object.getPrototypeOf(target2) !== Object.getPrototypeOf(targetProperties)) {
        position2 = startingPosition;
        target2 = targetProperties;
        referenceMap.set(id, { target: target2 });
        targetProperties = read6();
      }
      return Object.assign(target2, targetProperties);
    }
    refEntry.target = targetProperties;
    return targetProperties;
  };
  currentExtensions[28].handlesRead = true;
  currentExtensions[29] = (id) => {
    let refEntry = referenceMap.get(id);
    refEntry.used = true;
    return refEntry.target;
  };
  currentExtensions[258] = (array) => new Set(array);
  (currentExtensions[259] = (read6) => {
    if (currentDecoder.mapsAsObjects) {
      currentDecoder.mapsAsObjects = false;
      restoreMapsAsObject = true;
    }
    return read6();
  }).handlesRead = true;
  function combine2(a, b) {
    if (typeof a === "string")
      return a + b;
    if (a instanceof Array)
      return a.concat(b);
    return Object.assign({}, a, b);
  }
  function getPackedValues() {
    if (!packedValues) {
      if (currentDecoder.getShared)
        loadShared();
      else
        throw new Error("No packed values available");
    }
    return packedValues;
  }
  var SHARED_DATA_TAG_ID = 1399353956;
  currentExtensionRanges.push((tag, input) => {
    if (tag >= 225 && tag <= 255)
      return combine2(getPackedValues().prefixes[tag - 224], input);
    if (tag >= 28704 && tag <= 32767)
      return combine2(getPackedValues().prefixes[tag - 28672], input);
    if (tag >= 1879052288 && tag <= 2147483647)
      return combine2(getPackedValues().prefixes[tag - 1879048192], input);
    if (tag >= 216 && tag <= 223)
      return combine2(input, getPackedValues().suffixes[tag - 216]);
    if (tag >= 27647 && tag <= 28671)
      return combine2(input, getPackedValues().suffixes[tag - 27639]);
    if (tag >= 1811940352 && tag <= 1879048191)
      return combine2(input, getPackedValues().suffixes[tag - 1811939328]);
    if (tag == SHARED_DATA_TAG_ID) {
      return {
        packedValues,
        structures: currentStructures.slice(0),
        version: input
      };
    }
    if (tag == 55799)
      return input;
  });
  var isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;
  var typedArrays = [
    Uint8Array,
    Uint8ClampedArray,
    Uint16Array,
    Uint32Array,
    typeof BigUint64Array == "undefined" ? { name: "BigUint64Array" } : BigUint64Array,
    Int8Array,
    Int16Array,
    Int32Array,
    typeof BigInt64Array == "undefined" ? { name: "BigInt64Array" } : BigInt64Array,
    Float32Array,
    Float64Array
  ];
  var typedArrayTags = [64, 68, 69, 70, 71, 72, 77, 78, 79, 85, 86];
  for (let i = 0; i < typedArrays.length; i++) {
    registerTypedArray(typedArrays[i], typedArrayTags[i]);
  }
  function registerTypedArray(TypedArray, tag) {
    let dvMethod = "get" + TypedArray.name.slice(0, -5);
    let bytesPerElement;
    if (typeof TypedArray === "function")
      bytesPerElement = TypedArray.BYTES_PER_ELEMENT;
    else
      TypedArray = null;
    for (let littleEndian = 0; littleEndian < 2; littleEndian++) {
      if (!littleEndian && bytesPerElement == 1)
        continue;
      let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : bytesPerElement == 8 ? 3 : 0;
      currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine ? (buffer2) => {
        if (!TypedArray)
          throw new Error("Could not find typed array for code " + tag);
        if (!currentDecoder.copyBuffers) {
          if (bytesPerElement === 1 || bytesPerElement === 2 && !(buffer2.byteOffset & 1) || bytesPerElement === 4 && !(buffer2.byteOffset & 3) || bytesPerElement === 8 && !(buffer2.byteOffset & 7))
            return new TypedArray(buffer2.buffer, buffer2.byteOffset, buffer2.byteLength >> sizeShift);
        }
        return new TypedArray(Uint8Array.prototype.slice.call(buffer2, 0).buffer);
      } : (buffer2) => {
        if (!TypedArray)
          throw new Error("Could not find typed array for code " + tag);
        let dv = new DataView(buffer2.buffer, buffer2.byteOffset, buffer2.byteLength);
        let elements = buffer2.length >> sizeShift;
        let ta = new TypedArray(elements);
        let method = dv[dvMethod];
        for (let i = 0; i < elements; i++) {
          ta[i] = method.call(dv, i << sizeShift, littleEndian);
        }
        return ta;
      };
    }
  }
  function readBundleExt() {
    let length6 = readJustLength();
    let bundlePosition = position2 + read4();
    for (let i = 2; i < length6; i++) {
      let bundleLength = readJustLength();
      position2 += bundleLength;
    }
    let dataPosition = position2;
    position2 = bundlePosition;
    bundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())];
    bundledStrings.position0 = 0;
    bundledStrings.position1 = 0;
    bundledStrings.postBundlePosition = position2;
    position2 = dataPosition;
    return read4();
  }
  function readJustLength() {
    let token2 = src4[position2++] & 31;
    if (token2 > 23) {
      switch (token2) {
        case 24:
          token2 = src4[position2++];
          break;
        case 25:
          token2 = dataView.getUint16(position2);
          position2 += 2;
          break;
        case 26:
          token2 = dataView.getUint32(position2);
          position2 += 4;
          break;
      }
    }
    return token2;
  }
  function loadShared() {
    if (currentDecoder.getShared) {
      let sharedData = saveState(() => {
        src4 = null;
        return currentDecoder.getShared();
      }) || {};
      let updatedStructures = sharedData.structures || [];
      currentDecoder.sharedVersion = sharedData.version;
      packedValues = currentDecoder.sharedValues = sharedData.packedValues;
      if (currentStructures === true)
        currentDecoder.structures = currentStructures = updatedStructures;
      else
        currentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures));
    }
  }
  function saveState(callback) {
    let savedSrcEnd = srcEnd;
    let savedPosition = position2;
    let savedStringPosition = stringPosition;
    let savedSrcStringStart = srcStringStart;
    let savedSrcStringEnd = srcStringEnd;
    let savedSrcString = srcString;
    let savedStrings = strings;
    let savedReferenceMap = referenceMap;
    let savedBundledStrings = bundledStrings;
    let savedSrc = new Uint8Array(src4.slice(0, srcEnd));
    let savedStructures = currentStructures;
    let savedDecoder = currentDecoder;
    let savedSequentialMode = sequentialMode;
    let value = callback();
    srcEnd = savedSrcEnd;
    position2 = savedPosition;
    stringPosition = savedStringPosition;
    srcStringStart = savedSrcStringStart;
    srcStringEnd = savedSrcStringEnd;
    srcString = savedSrcString;
    strings = savedStrings;
    referenceMap = savedReferenceMap;
    bundledStrings = savedBundledStrings;
    src4 = savedSrc;
    sequentialMode = savedSequentialMode;
    currentStructures = savedStructures;
    currentDecoder = savedDecoder;
    dataView = new DataView(src4.buffer, src4.byteOffset, src4.byteLength);
    return value;
  }
  function clearSource() {
    src4 = null;
    referenceMap = null;
    currentStructures = null;
  }
  function addExtension(extension) {
    currentExtensions[extension.tag] = extension.decode;
  }
  var mult10 = new Array(147);
  for (let i = 0; i < 256; i++) {
    mult10[i] = +("1e" + Math.floor(45.15 - i * 0.30103));
  }
  var defaultDecoder = new Decoder4({ useRecords: false });
  var decode14 = defaultDecoder.decode;
  var decodeMultiple = defaultDecoder.decodeMultiple;
  var FLOAT32_OPTIONS = {
    NEVER: 0,
    ALWAYS: 1,
    DECIMAL_ROUND: 3,
    DECIMAL_FIT: 4
  };

  // coldsky/node_modules/cbor-x/encode.js
  var textEncoder2;
  try {
    textEncoder2 = new TextEncoder();
  } catch (error) {
  }
  var extensions;
  var extensionClasses;
  var Buffer2 = typeof globalThis === "object" && globalThis.Buffer;
  var hasNodeBuffer = typeof Buffer2 !== "undefined";
  var ByteArrayAllocate = hasNodeBuffer ? Buffer2.allocUnsafeSlow : Uint8Array;
  var ByteArray = hasNodeBuffer ? Buffer2 : Uint8Array;
  var MAX_STRUCTURES = 256;
  var MAX_BUFFER_SIZE = hasNodeBuffer ? 4294967296 : 2144337920;
  var throwOnIterable;
  var target;
  var targetView;
  var position3 = 0;
  var safeEnd;
  var bundledStrings2 = null;
  var MAX_BUNDLE_SIZE = 61440;
  var hasNonLatin = /[\u0080-\uFFFF]/;
  var RECORD_SYMBOL = Symbol("record-id");
  var Encoder4 = class extends Decoder4 {
    constructor(options) {
      super(options);
      this.offset = 0;
      let typeBuffer;
      let start;
      let sharedStructures;
      let hasSharedUpdate;
      let structures;
      let referenceMap2;
      options = options || {};
      let encodeUtf8 = ByteArray.prototype.utf8Write ? function(string2, position4, maxBytes) {
        return target.utf8Write(string2, position4, maxBytes);
      } : textEncoder2 && textEncoder2.encodeInto ? function(string2, position4) {
        return textEncoder2.encodeInto(string2, target.subarray(position4)).written;
      } : false;
      let encoder = this;
      let hasSharedStructures = options.structures || options.saveStructures;
      let maxSharedStructures = options.maxSharedStructures;
      if (maxSharedStructures == null)
        maxSharedStructures = hasSharedStructures ? 128 : 0;
      if (maxSharedStructures > 8190)
        throw new Error("Maximum maxSharedStructure is 8190");
      let isSequential = options.sequential;
      if (isSequential) {
        maxSharedStructures = 0;
      }
      if (!this.structures)
        this.structures = [];
      if (this.saveStructures)
        this.saveShared = this.saveStructures;
      let samplingPackedValues, packedObjectMap2, sharedValues = options.sharedValues;
      let sharedPackedObjectMap2;
      if (sharedValues) {
        sharedPackedObjectMap2 = /* @__PURE__ */ Object.create(null);
        for (let i = 0, l = sharedValues.length; i < l; i++) {
          sharedPackedObjectMap2[sharedValues[i]] = i;
        }
      }
      let recordIdsToRemove = [];
      let transitionsCount = 0;
      let serializationsSinceTransitionRebuild = 0;
      this.mapEncode = function(value, encodeOptions2) {
        if (this._keyMap && !this._mapped) {
          switch (value.constructor.name) {
            case "Array":
              value = value.map((r2) => this.encodeKeys(r2));
              break;
          }
        }
        return this.encode(value, encodeOptions2);
      };
      this.encode = function(value, encodeOptions2) {
        if (!target) {
          target = new ByteArrayAllocate(8192);
          targetView = new DataView(target.buffer, 0, 8192);
          position3 = 0;
        }
        safeEnd = target.length - 10;
        if (safeEnd - position3 < 2048) {
          target = new ByteArrayAllocate(target.length);
          targetView = new DataView(target.buffer, 0, target.length);
          safeEnd = target.length - 10;
          position3 = 0;
        } else if (encodeOptions2 === REUSE_BUFFER_MODE)
          position3 = position3 + 7 & 2147483640;
        start = position3;
        if (encoder.useSelfDescribedHeader) {
          targetView.setUint32(position3, 3654940416);
          position3 += 3;
        }
        referenceMap2 = encoder.structuredClone ? /* @__PURE__ */ new Map() : null;
        if (encoder.bundleStrings && typeof value !== "string") {
          bundledStrings2 = [];
          bundledStrings2.size = Infinity;
        } else
          bundledStrings2 = null;
        sharedStructures = encoder.structures;
        if (sharedStructures) {
          if (sharedStructures.uninitialized) {
            let sharedData = encoder.getShared() || {};
            encoder.structures = sharedStructures = sharedData.structures || [];
            encoder.sharedVersion = sharedData.version;
            let sharedValues2 = encoder.sharedValues = sharedData.packedValues;
            if (sharedValues2) {
              sharedPackedObjectMap2 = {};
              for (let i = 0, l = sharedValues2.length; i < l; i++)
                sharedPackedObjectMap2[sharedValues2[i]] = i;
            }
          }
          let sharedStructuresLength = sharedStructures.length;
          if (sharedStructuresLength > maxSharedStructures && !isSequential)
            sharedStructuresLength = maxSharedStructures;
          if (!sharedStructures.transitions) {
            sharedStructures.transitions = /* @__PURE__ */ Object.create(null);
            for (let i = 0; i < sharedStructuresLength; i++) {
              let keys = sharedStructures[i];
              if (!keys)
                continue;
              let nextTransition, transition = sharedStructures.transitions;
              for (let j = 0, l = keys.length; j < l; j++) {
                if (transition[RECORD_SYMBOL] === void 0)
                  transition[RECORD_SYMBOL] = i;
                let key = keys[j];
                nextTransition = transition[key];
                if (!nextTransition) {
                  nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
                }
                transition = nextTransition;
              }
              transition[RECORD_SYMBOL] = i | 1048576;
            }
          }
          if (!isSequential)
            sharedStructures.nextId = sharedStructuresLength;
        }
        if (hasSharedUpdate)
          hasSharedUpdate = false;
        structures = sharedStructures || [];
        packedObjectMap2 = sharedPackedObjectMap2;
        if (options.pack) {
          let packedValues2 = /* @__PURE__ */ new Map();
          packedValues2.values = [];
          packedValues2.encoder = encoder;
          packedValues2.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap2 ? 16 : Infinity);
          packedValues2.objectMap = sharedPackedObjectMap2 || false;
          packedValues2.samplingPackedValues = samplingPackedValues;
          findRepetitiveStrings(value, packedValues2);
          if (packedValues2.values.length > 0) {
            target[position3++] = 216;
            target[position3++] = 51;
            writeArrayHeader(4);
            let valuesArray = packedValues2.values;
            encode13(valuesArray);
            writeArrayHeader(0);
            writeArrayHeader(0);
            packedObjectMap2 = Object.create(sharedPackedObjectMap2 || null);
            for (let i = 0, l = valuesArray.length; i < l; i++) {
              packedObjectMap2[valuesArray[i]] = i;
            }
          }
        }
        throwOnIterable = encodeOptions2 & THROW_ON_ITERABLE;
        try {
          if (throwOnIterable)
            return;
          encode13(value);
          if (bundledStrings2) {
            writeBundles(start, encode13);
          }
          encoder.offset = position3;
          if (referenceMap2 && referenceMap2.idsToInsert) {
            position3 += referenceMap2.idsToInsert.length * 2;
            if (position3 > safeEnd)
              makeRoom(position3);
            encoder.offset = position3;
            let serialized = insertIds(target.subarray(start, position3), referenceMap2.idsToInsert);
            referenceMap2 = null;
            return serialized;
          }
          if (encodeOptions2 & REUSE_BUFFER_MODE) {
            target.start = start;
            target.end = position3;
            return target;
          }
          return target.subarray(start, position3);
        } finally {
          if (sharedStructures) {
            if (serializationsSinceTransitionRebuild < 10)
              serializationsSinceTransitionRebuild++;
            if (sharedStructures.length > maxSharedStructures)
              sharedStructures.length = maxSharedStructures;
            if (transitionsCount > 1e4) {
              sharedStructures.transitions = null;
              serializationsSinceTransitionRebuild = 0;
              transitionsCount = 0;
              if (recordIdsToRemove.length > 0)
                recordIdsToRemove = [];
            } else if (recordIdsToRemove.length > 0 && !isSequential) {
              for (let i = 0, l = recordIdsToRemove.length; i < l; i++) {
                recordIdsToRemove[i][RECORD_SYMBOL] = void 0;
              }
              recordIdsToRemove = [];
            }
          }
          if (hasSharedUpdate && encoder.saveShared) {
            if (encoder.structures.length > maxSharedStructures) {
              encoder.structures = encoder.structures.slice(0, maxSharedStructures);
            }
            let returnBuffer = target.subarray(start, position3);
            if (encoder.updateSharedData() === false)
              return encoder.encode(value);
            return returnBuffer;
          }
          if (encodeOptions2 & RESET_BUFFER_MODE)
            position3 = start;
        }
      };
      this.findCommonStringsToPack = () => {
        samplingPackedValues = /* @__PURE__ */ new Map();
        if (!sharedPackedObjectMap2)
          sharedPackedObjectMap2 = /* @__PURE__ */ Object.create(null);
        return (options2) => {
          let threshold = options2 && options2.threshold || 4;
          let position4 = this.pack ? options2.maxPrivatePackedValues || 16 : 0;
          if (!sharedValues)
            sharedValues = this.sharedValues = [];
          for (let [key, status] of samplingPackedValues) {
            if (status.count > threshold) {
              sharedPackedObjectMap2[key] = position4++;
              sharedValues.push(key);
              hasSharedUpdate = true;
            }
          }
          while (this.saveShared && this.updateSharedData() === false) {
          }
          samplingPackedValues = null;
        };
      };
      const encode13 = (value) => {
        if (position3 > safeEnd)
          target = makeRoom(position3);
        var type = typeof value;
        var length6;
        if (type === "string") {
          if (packedObjectMap2) {
            let packedPosition = packedObjectMap2[value];
            if (packedPosition >= 0) {
              if (packedPosition < 16)
                target[position3++] = packedPosition + 224;
              else {
                target[position3++] = 198;
                if (packedPosition & 1)
                  encode13(15 - packedPosition >> 1);
                else
                  encode13(packedPosition - 16 >> 1);
              }
              return;
            } else if (samplingPackedValues && !options.pack) {
              let status = samplingPackedValues.get(value);
              if (status)
                status.count++;
              else
                samplingPackedValues.set(value, {
                  count: 1
                });
            }
          }
          let strLength = value.length;
          if (bundledStrings2 && strLength >= 4 && strLength < 1024) {
            if ((bundledStrings2.size += strLength) > MAX_BUNDLE_SIZE) {
              let extStart;
              let maxBytes2 = (bundledStrings2[0] ? bundledStrings2[0].length * 3 + bundledStrings2[1].length : 0) + 10;
              if (position3 + maxBytes2 > safeEnd)
                target = makeRoom(position3 + maxBytes2);
              target[position3++] = 217;
              target[position3++] = 223;
              target[position3++] = 249;
              target[position3++] = bundledStrings2.position ? 132 : 130;
              target[position3++] = 26;
              extStart = position3 - start;
              position3 += 4;
              if (bundledStrings2.position) {
                writeBundles(start, encode13);
              }
              bundledStrings2 = ["", ""];
              bundledStrings2.size = 0;
              bundledStrings2.position = extStart;
            }
            let twoByte = hasNonLatin.test(value);
            bundledStrings2[twoByte ? 0 : 1] += value;
            target[position3++] = twoByte ? 206 : 207;
            encode13(strLength);
            return;
          }
          let headerSize;
          if (strLength < 32) {
            headerSize = 1;
          } else if (strLength < 256) {
            headerSize = 2;
          } else if (strLength < 65536) {
            headerSize = 3;
          } else {
            headerSize = 5;
          }
          let maxBytes = strLength * 3;
          if (position3 + maxBytes > safeEnd)
            target = makeRoom(position3 + maxBytes);
          if (strLength < 64 || !encodeUtf8) {
            let i, c1, c2, strPosition = position3 + headerSize;
            for (i = 0; i < strLength; i++) {
              c1 = value.charCodeAt(i);
              if (c1 < 128) {
                target[strPosition++] = c1;
              } else if (c1 < 2048) {
                target[strPosition++] = c1 >> 6 | 192;
                target[strPosition++] = c1 & 63 | 128;
              } else if ((c1 & 64512) === 55296 && ((c2 = value.charCodeAt(i + 1)) & 64512) === 56320) {
                c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
                i++;
                target[strPosition++] = c1 >> 18 | 240;
                target[strPosition++] = c1 >> 12 & 63 | 128;
                target[strPosition++] = c1 >> 6 & 63 | 128;
                target[strPosition++] = c1 & 63 | 128;
              } else {
                target[strPosition++] = c1 >> 12 | 224;
                target[strPosition++] = c1 >> 6 & 63 | 128;
                target[strPosition++] = c1 & 63 | 128;
              }
            }
            length6 = strPosition - position3 - headerSize;
          } else {
            length6 = encodeUtf8(value, position3 + headerSize, maxBytes);
          }
          if (length6 < 24) {
            target[position3++] = 96 | length6;
          } else if (length6 < 256) {
            if (headerSize < 2) {
              target.copyWithin(position3 + 2, position3 + 1, position3 + 1 + length6);
            }
            target[position3++] = 120;
            target[position3++] = length6;
          } else if (length6 < 65536) {
            if (headerSize < 3) {
              target.copyWithin(position3 + 3, position3 + 2, position3 + 2 + length6);
            }
            target[position3++] = 121;
            target[position3++] = length6 >> 8;
            target[position3++] = length6 & 255;
          } else {
            if (headerSize < 5) {
              target.copyWithin(position3 + 5, position3 + 3, position3 + 3 + length6);
            }
            target[position3++] = 122;
            targetView.setUint32(position3, length6);
            position3 += 4;
          }
          position3 += length6;
        } else if (type === "number") {
          if (!this.alwaysUseFloat && value >>> 0 === value) {
            if (value < 24) {
              target[position3++] = value;
            } else if (value < 256) {
              target[position3++] = 24;
              target[position3++] = value;
            } else if (value < 65536) {
              target[position3++] = 25;
              target[position3++] = value >> 8;
              target[position3++] = value & 255;
            } else {
              target[position3++] = 26;
              targetView.setUint32(position3, value);
              position3 += 4;
            }
          } else if (!this.alwaysUseFloat && value >> 0 === value) {
            if (value >= -24) {
              target[position3++] = 31 - value;
            } else if (value >= -256) {
              target[position3++] = 56;
              target[position3++] = ~value;
            } else if (value >= -65536) {
              target[position3++] = 57;
              targetView.setUint16(position3, ~value);
              position3 += 2;
            } else {
              target[position3++] = 58;
              targetView.setUint32(position3, ~value);
              position3 += 4;
            }
          } else {
            let useFloat32;
            if ((useFloat32 = this.useFloat32) > 0 && value < 4294967296 && value >= -2147483648) {
              target[position3++] = 250;
              targetView.setFloat32(position3, value);
              let xShifted;
              if (useFloat32 < 4 || // this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved
              (xShifted = value * mult10[(target[position3] & 127) << 1 | target[position3 + 1] >> 7]) >> 0 === xShifted) {
                position3 += 4;
                return;
              } else
                position3--;
            }
            target[position3++] = 251;
            targetView.setFloat64(position3, value);
            position3 += 8;
          }
        } else if (type === "object") {
          if (!value)
            target[position3++] = 246;
          else {
            if (referenceMap2) {
              let referee = referenceMap2.get(value);
              if (referee) {
                target[position3++] = 216;
                target[position3++] = 29;
                target[position3++] = 25;
                if (!referee.references) {
                  let idsToInsert = referenceMap2.idsToInsert || (referenceMap2.idsToInsert = []);
                  referee.references = [];
                  idsToInsert.push(referee);
                }
                referee.references.push(position3 - start);
                position3 += 2;
                return;
              } else
                referenceMap2.set(value, { offset: position3 - start });
            }
            let constructor = value.constructor;
            if (constructor === Object) {
              writeObject(value);
            } else if (constructor === Array) {
              length6 = value.length;
              if (length6 < 24) {
                target[position3++] = 128 | length6;
              } else {
                writeArrayHeader(length6);
              }
              for (let i = 0; i < length6; i++) {
                encode13(value[i]);
              }
            } else if (constructor === Map) {
              if (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {
                target[position3++] = 217;
                target[position3++] = 1;
                target[position3++] = 3;
              }
              length6 = value.size;
              if (length6 < 24) {
                target[position3++] = 160 | length6;
              } else if (length6 < 256) {
                target[position3++] = 184;
                target[position3++] = length6;
              } else if (length6 < 65536) {
                target[position3++] = 185;
                target[position3++] = length6 >> 8;
                target[position3++] = length6 & 255;
              } else {
                target[position3++] = 186;
                targetView.setUint32(position3, length6);
                position3 += 4;
              }
              if (encoder.keyMap) {
                for (let [key, entryValue] of value) {
                  encode13(encoder.encodeKey(key));
                  encode13(entryValue);
                }
              } else {
                for (let [key, entryValue] of value) {
                  encode13(key);
                  encode13(entryValue);
                }
              }
            } else {
              for (let i = 0, l = extensions.length; i < l; i++) {
                let extensionClass = extensionClasses[i];
                if (value instanceof extensionClass) {
                  let extension = extensions[i];
                  let tag = extension.tag;
                  if (tag == void 0)
                    tag = extension.getTag && extension.getTag.call(this, value);
                  if (tag < 24) {
                    target[position3++] = 192 | tag;
                  } else if (tag < 256) {
                    target[position3++] = 216;
                    target[position3++] = tag;
                  } else if (tag < 65536) {
                    target[position3++] = 217;
                    target[position3++] = tag >> 8;
                    target[position3++] = tag & 255;
                  } else if (tag > -1) {
                    target[position3++] = 218;
                    targetView.setUint32(position3, tag);
                    position3 += 4;
                  }
                  extension.encode.call(this, value, encode13, makeRoom);
                  return;
                }
              }
              if (value[Symbol.iterator]) {
                if (throwOnIterable) {
                  let error = new Error("Iterable should be serialized as iterator");
                  error.iteratorNotHandled = true;
                  throw error;
                }
                target[position3++] = 159;
                for (let entry of value) {
                  encode13(entry);
                }
                target[position3++] = 255;
                return;
              }
              if (value[Symbol.asyncIterator] || isBlob(value)) {
                let error = new Error("Iterable/blob should be serialized as iterator");
                error.iteratorNotHandled = true;
                throw error;
              }
              if (this.useToJSON && value.toJSON) {
                const json2 = value.toJSON();
                if (json2 !== value)
                  return encode13(json2);
              }
              writeObject(value);
            }
          }
        } else if (type === "boolean") {
          target[position3++] = value ? 245 : 244;
        } else if (type === "bigint") {
          if (value < BigInt(1) << BigInt(64) && value >= 0) {
            target[position3++] = 27;
            targetView.setBigUint64(position3, value);
          } else if (value > -(BigInt(1) << BigInt(64)) && value < 0) {
            target[position3++] = 59;
            targetView.setBigUint64(position3, -value - BigInt(1));
          } else {
            if (this.largeBigIntToFloat) {
              target[position3++] = 251;
              targetView.setFloat64(position3, Number(value));
            } else {
              throw new RangeError(value + " was too large to fit in CBOR 64-bit integer format, set largeBigIntToFloat to convert to float-64");
            }
          }
          position3 += 8;
        } else if (type === "undefined") {
          target[position3++] = 247;
        } else {
          throw new Error("Unknown type: " + type);
        }
      };
      const writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {
        let keys = Object.keys(object);
        let vals = Object.values(object);
        let length6 = keys.length;
        if (length6 < 24) {
          target[position3++] = 160 | length6;
        } else if (length6 < 256) {
          target[position3++] = 184;
          target[position3++] = length6;
        } else if (length6 < 65536) {
          target[position3++] = 185;
          target[position3++] = length6 >> 8;
          target[position3++] = length6 & 255;
        } else {
          target[position3++] = 186;
          targetView.setUint32(position3, length6);
          position3 += 4;
        }
        let key;
        if (encoder.keyMap) {
          for (let i = 0; i < length6; i++) {
            encode13(encoder.encodeKey(keys[i]));
            encode13(vals[i]);
          }
        } else {
          for (let i = 0; i < length6; i++) {
            encode13(keys[i]);
            encode13(vals[i]);
          }
        }
      } : (object) => {
        target[position3++] = 185;
        let objectOffset = position3 - start;
        position3 += 2;
        let size = 0;
        if (encoder.keyMap) {
          for (let key in object)
            if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key)) {
              encode13(encoder.encodeKey(key));
              encode13(object[key]);
              size++;
            }
        } else {
          for (let key in object)
            if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key)) {
              encode13(key);
              encode13(object[key]);
              size++;
            }
        }
        target[objectOffset++ + start] = size >> 8;
        target[objectOffset + start] = size & 255;
      } : (object, skipValues) => {
        let nextTransition, transition = structures.transitions || (structures.transitions = /* @__PURE__ */ Object.create(null));
        let newTransitions = 0;
        let length6 = 0;
        let parentRecordId;
        let keys;
        if (this.keyMap) {
          keys = Object.keys(object).map((k) => this.encodeKey(k));
          length6 = keys.length;
          for (let i = 0; i < length6; i++) {
            let key = keys[i];
            nextTransition = transition[key];
            if (!nextTransition) {
              nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
              newTransitions++;
            }
            transition = nextTransition;
          }
        } else {
          for (let key in object)
            if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key)) {
              nextTransition = transition[key];
              if (!nextTransition) {
                if (transition[RECORD_SYMBOL] & 1048576) {
                  parentRecordId = transition[RECORD_SYMBOL] & 65535;
                }
                nextTransition = transition[key] = /* @__PURE__ */ Object.create(null);
                newTransitions++;
              }
              transition = nextTransition;
              length6++;
            }
        }
        let recordId = transition[RECORD_SYMBOL];
        if (recordId !== void 0) {
          recordId &= 65535;
          target[position3++] = 217;
          target[position3++] = recordId >> 8 | 224;
          target[position3++] = recordId & 255;
        } else {
          if (!keys)
            keys = transition.__keys__ || (transition.__keys__ = Object.keys(object));
          if (parentRecordId === void 0) {
            recordId = structures.nextId++;
            if (!recordId) {
              recordId = 0;
              structures.nextId = 1;
            }
            if (recordId >= MAX_STRUCTURES) {
              structures.nextId = (recordId = maxSharedStructures) + 1;
            }
          } else {
            recordId = parentRecordId;
          }
          structures[recordId] = keys;
          if (recordId < maxSharedStructures) {
            target[position3++] = 217;
            target[position3++] = recordId >> 8 | 224;
            target[position3++] = recordId & 255;
            transition = structures.transitions;
            for (let i = 0; i < length6; i++) {
              if (transition[RECORD_SYMBOL] === void 0 || transition[RECORD_SYMBOL] & 1048576)
                transition[RECORD_SYMBOL] = recordId;
              transition = transition[keys[i]];
            }
            transition[RECORD_SYMBOL] = recordId | 1048576;
            hasSharedUpdate = true;
          } else {
            transition[RECORD_SYMBOL] = recordId;
            targetView.setUint32(position3, 3655335680);
            position3 += 3;
            if (newTransitions)
              transitionsCount += serializationsSinceTransitionRebuild * newTransitions;
            if (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures)
              recordIdsToRemove.shift()[RECORD_SYMBOL] = void 0;
            recordIdsToRemove.push(transition);
            writeArrayHeader(length6 + 2);
            encode13(57344 + recordId);
            encode13(keys);
            if (skipValues)
              return;
            for (let key in object)
              if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key))
                encode13(object[key]);
            return;
          }
        }
        if (length6 < 24) {
          target[position3++] = 128 | length6;
        } else {
          writeArrayHeader(length6);
        }
        if (skipValues)
          return;
        for (let key in object)
          if (typeof object.hasOwnProperty !== "function" || object.hasOwnProperty(key))
            encode13(object[key]);
      };
      const makeRoom = (end) => {
        let newSize;
        if (end > 16777216) {
          if (end - start > MAX_BUFFER_SIZE)
            throw new Error("Encoded buffer would be larger than maximum buffer size");
          newSize = Math.min(
            MAX_BUFFER_SIZE,
            Math.round(Math.max((end - start) * (end > 67108864 ? 1.25 : 2), 4194304) / 4096) * 4096
          );
        } else
          newSize = (Math.max(end - start << 2, target.length - 1) >> 12) + 1 << 12;
        let newBuffer = new ByteArrayAllocate(newSize);
        targetView = new DataView(newBuffer.buffer, 0, newSize);
        if (target.copy)
          target.copy(newBuffer, 0, start, end);
        else
          newBuffer.set(target.slice(start, end));
        position3 -= start;
        start = 0;
        safeEnd = newBuffer.length - 10;
        return target = newBuffer;
      };
      let chunkThreshold = 100;
      let continuedChunkThreshold = 1e3;
      this.encodeAsIterable = function(value, options2) {
        return startEncoding(value, options2, encodeObjectAsIterable);
      };
      this.encodeAsAsyncIterable = function(value, options2) {
        return startEncoding(value, options2, encodeObjectAsAsyncIterable);
      };
      function* encodeObjectAsIterable(object, iterateProperties, finalIterable) {
        let constructor = object.constructor;
        if (constructor === Object) {
          let useRecords = encoder.useRecords !== false;
          if (useRecords)
            writeObject(object, true);
          else
            writeEntityLength(Object.keys(object).length, 160);
          for (let key in object) {
            let value = object[key];
            if (!useRecords)
              encode13(key);
            if (value && typeof value === "object") {
              if (iterateProperties[key])
                yield* __yieldStar(encodeObjectAsIterable(value, iterateProperties[key]));
              else
                yield* __yieldStar(tryEncode(value, iterateProperties, key));
            } else
              encode13(value);
          }
        } else if (constructor === Array) {
          let length6 = object.length;
          writeArrayHeader(length6);
          for (let i = 0; i < length6; i++) {
            let value = object[i];
            if (value && (typeof value === "object" || position3 - start > chunkThreshold)) {
              if (iterateProperties.element)
                yield* __yieldStar(encodeObjectAsIterable(value, iterateProperties.element));
              else
                yield* __yieldStar(tryEncode(value, iterateProperties, "element"));
            } else
              encode13(value);
          }
        } else if (object[Symbol.iterator]) {
          target[position3++] = 159;
          for (let value of object) {
            if (value && (typeof value === "object" || position3 - start > chunkThreshold)) {
              if (iterateProperties.element)
                yield* __yieldStar(encodeObjectAsIterable(value, iterateProperties.element));
              else
                yield* __yieldStar(tryEncode(value, iterateProperties, "element"));
            } else
              encode13(value);
          }
          target[position3++] = 255;
        } else if (isBlob(object)) {
          writeEntityLength(object.size, 64);
          yield target.subarray(start, position3);
          yield object;
          restartEncoding();
        } else if (object[Symbol.asyncIterator]) {
          target[position3++] = 159;
          yield target.subarray(start, position3);
          yield object;
          restartEncoding();
          target[position3++] = 255;
        } else {
          encode13(object);
        }
        if (finalIterable && position3 > start)
          yield target.subarray(start, position3);
        else if (position3 - start > chunkThreshold) {
          yield target.subarray(start, position3);
          restartEncoding();
        }
      }
      function* tryEncode(value, iterateProperties, key) {
        let restart = position3 - start;
        try {
          encode13(value);
          if (position3 - start > chunkThreshold) {
            yield target.subarray(start, position3);
            restartEncoding();
          }
        } catch (error) {
          if (error.iteratorNotHandled) {
            iterateProperties[key] = {};
            position3 = start + restart;
            yield* __yieldStar(encodeObjectAsIterable.call(this, value, iterateProperties[key]));
          } else
            throw error;
        }
      }
      function restartEncoding() {
        chunkThreshold = continuedChunkThreshold;
        encoder.encode(null, THROW_ON_ITERABLE);
      }
      function startEncoding(value, options2, encodeIterable) {
        if (options2 && options2.chunkThreshold)
          chunkThreshold = continuedChunkThreshold = options2.chunkThreshold;
        else
          chunkThreshold = 100;
        if (value && typeof value === "object") {
          encoder.encode(null, THROW_ON_ITERABLE);
          return encodeIterable(value, encoder.iterateProperties || (encoder.iterateProperties = {}), true);
        }
        return [encoder.encode(value)];
      }
      function encodeObjectAsAsyncIterable(value, iterateProperties) {
        return __asyncGenerator(this, null, function* () {
          for (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {
            let constructor = encodedValue.constructor;
            if (constructor === ByteArray || constructor === Uint8Array)
              yield encodedValue;
            else if (isBlob(encodedValue)) {
              let reader = encodedValue.stream().getReader();
              let next2;
              while (!(next2 = yield new __await(reader.read())).done) {
                yield next2.value;
              }
            } else if (encodedValue[Symbol.asyncIterator]) {
              try {
                for (var iter = __forAwait(encodedValue), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
                  let asyncValue = temp.value;
                  restartEncoding();
                  if (asyncValue)
                    yield* __yieldStar(encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {})));
                  else
                    yield encoder.encode(asyncValue);
                }
              } catch (temp) {
                error = [temp];
              } finally {
                try {
                  more && (temp = iter.return) && (yield new __await(temp.call(iter)));
                } finally {
                  if (error)
                    throw error[0];
                }
              }
            } else {
              yield encodedValue;
            }
          }
        });
      }
    }
    useBuffer(buffer2) {
      target = buffer2;
      targetView = new DataView(target.buffer, target.byteOffset, target.byteLength);
      position3 = 0;
    }
    clearSharedData() {
      if (this.structures)
        this.structures = [];
      if (this.sharedValues)
        this.sharedValues = void 0;
    }
    updateSharedData() {
      let lastVersion = this.sharedVersion || 0;
      this.sharedVersion = lastVersion + 1;
      let structuresCopy = this.structures.slice(0);
      let sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion);
      let saveResults = this.saveShared(
        sharedData,
        (existingShared) => (existingShared && existingShared.version || 0) == lastVersion
      );
      if (saveResults === false) {
        sharedData = this.getShared() || {};
        this.structures = sharedData.structures || [];
        this.sharedValues = sharedData.packedValues;
        this.sharedVersion = sharedData.version;
        this.structures.nextId = this.structures.length;
      } else {
        structuresCopy.forEach((structure, i) => this.structures[i] = structure);
      }
      return saveResults;
    }
  };
  function writeEntityLength(length6, majorValue) {
    if (length6 < 24)
      target[position3++] = majorValue | length6;
    else if (length6 < 256) {
      target[position3++] = majorValue | 24;
      target[position3++] = length6;
    } else if (length6 < 65536) {
      target[position3++] = majorValue | 25;
      target[position3++] = length6 >> 8;
      target[position3++] = length6 & 255;
    } else {
      target[position3++] = majorValue | 26;
      targetView.setUint32(position3, length6);
      position3 += 4;
    }
  }
  var SharedData = class {
    constructor(structures, values2, version5) {
      this.structures = structures;
      this.packedValues = values2;
      this.version = version5;
    }
  };
  function writeArrayHeader(length6) {
    if (length6 < 24)
      target[position3++] = 128 | length6;
    else if (length6 < 256) {
      target[position3++] = 152;
      target[position3++] = length6;
    } else if (length6 < 65536) {
      target[position3++] = 153;
      target[position3++] = length6 >> 8;
      target[position3++] = length6 & 255;
    } else {
      target[position3++] = 154;
      targetView.setUint32(position3, length6);
      position3 += 4;
    }
  }
  var BlobConstructor = typeof Blob === "undefined" ? function() {
  } : Blob;
  function isBlob(object) {
    if (object instanceof BlobConstructor)
      return true;
    let tag = object[Symbol.toStringTag];
    return tag === "Blob" || tag === "File";
  }
  function findRepetitiveStrings(value, packedValues2) {
    switch (typeof value) {
      case "string":
        if (value.length > 3) {
          if (packedValues2.objectMap[value] > -1 || packedValues2.values.length >= packedValues2.maxValues)
            return;
          let packedStatus = packedValues2.get(value);
          if (packedStatus) {
            if (++packedStatus.count == 2) {
              packedValues2.values.push(value);
            }
          } else {
            packedValues2.set(value, {
              count: 1
            });
            if (packedValues2.samplingPackedValues) {
              let status = packedValues2.samplingPackedValues.get(value);
              if (status)
                status.count++;
              else
                packedValues2.samplingPackedValues.set(value, {
                  count: 1
                });
            }
          }
        }
        break;
      case "object":
        if (value) {
          if (value instanceof Array) {
            for (let i = 0, l = value.length; i < l; i++) {
              findRepetitiveStrings(value[i], packedValues2);
            }
          } else {
            let includeKeys = !packedValues2.encoder.useRecords;
            for (var key in value) {
              if (value.hasOwnProperty(key)) {
                if (includeKeys)
                  findRepetitiveStrings(key, packedValues2);
                findRepetitiveStrings(value[key], packedValues2);
              }
            }
          }
        }
        break;
      case "function":
        console.log(value);
    }
  }
  var isLittleEndianMachine2 = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;
  extensionClasses = [
    Date,
    Set,
    Error,
    RegExp,
    Tag,
    ArrayBuffer,
    Uint8Array,
    Uint8ClampedArray,
    Uint16Array,
    Uint32Array,
    typeof BigUint64Array == "undefined" ? function() {
    } : BigUint64Array,
    Int8Array,
    Int16Array,
    Int32Array,
    typeof BigInt64Array == "undefined" ? function() {
    } : BigInt64Array,
    Float32Array,
    Float64Array,
    SharedData
  ];
  extensions = [
    {
      // Date
      tag: 1,
      encode(date, encode13) {
        let seconds = date.getTime() / 1e3;
        if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 4294967296) {
          target[position3++] = 26;
          targetView.setUint32(position3, seconds);
          position3 += 4;
        } else {
          target[position3++] = 251;
          targetView.setFloat64(position3, seconds);
          position3 += 8;
        }
      }
    },
    {
      // Set
      tag: 258,
      // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md
      encode(set, encode13) {
        let array = Array.from(set);
        encode13(array);
      }
    },
    {
      // Error
      tag: 27,
      // http://cbor.schmorp.de/generic-object
      encode(error, encode13) {
        encode13([error.name, error.message]);
      }
    },
    {
      // RegExp
      tag: 27,
      // http://cbor.schmorp.de/generic-object
      encode(regex, encode13) {
        encode13(["RegExp", regex.source, regex.flags]);
      }
    },
    {
      // Tag
      getTag(tag) {
        return tag.tag;
      },
      encode(tag, encode13) {
        encode13(tag.value);
      }
    },
    {
      // ArrayBuffer
      encode(arrayBuffer, encode13, makeRoom) {
        writeBuffer(arrayBuffer, makeRoom);
      }
    },
    {
      // Uint8Array
      getTag(typedArray) {
        if (typedArray.constructor === Uint8Array) {
          if (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false)
            return 64;
        }
      },
      encode(typedArray, encode13, makeRoom) {
        writeBuffer(typedArray, makeRoom);
      }
    },
    typedArrayEncoder(68, 1),
    typedArrayEncoder(69, 2),
    typedArrayEncoder(70, 4),
    typedArrayEncoder(71, 8),
    typedArrayEncoder(72, 1),
    typedArrayEncoder(77, 2),
    typedArrayEncoder(78, 4),
    typedArrayEncoder(79, 8),
    typedArrayEncoder(85, 4),
    typedArrayEncoder(86, 8),
    {
      encode(sharedData, encode13) {
        let packedValues2 = sharedData.packedValues || [];
        let sharedStructures = sharedData.structures || [];
        if (packedValues2.values.length > 0) {
          target[position3++] = 216;
          target[position3++] = 51;
          writeArrayHeader(4);
          let valuesArray = packedValues2.values;
          encode13(valuesArray);
          writeArrayHeader(0);
          writeArrayHeader(0);
          packedObjectMap = Object.create(sharedPackedObjectMap || null);
          for (let i = 0, l = valuesArray.length; i < l; i++) {
            packedObjectMap[valuesArray[i]] = i;
          }
        }
        if (sharedStructures) {
          targetView.setUint32(position3, 3655335424);
          position3 += 3;
          let definitions = sharedStructures.slice(0);
          definitions.unshift(57344);
          definitions.push(new Tag(sharedData.version, 1399353956));
          encode13(definitions);
        } else
          encode13(new Tag(sharedData.version, 1399353956));
      }
    }
  ];
  function typedArrayEncoder(tag, size) {
    if (!isLittleEndianMachine2 && size > 1)
      tag -= 4;
    return {
      tag,
      encode: function writeExtBuffer(typedArray, encode13) {
        let length6 = typedArray.byteLength;
        let offset = typedArray.byteOffset || 0;
        let buffer2 = typedArray.buffer || typedArray;
        encode13(hasNodeBuffer ? Buffer2.from(buffer2, offset, length6) : new Uint8Array(buffer2, offset, length6));
      }
    };
  }
  function writeBuffer(buffer2, makeRoom) {
    let length6 = buffer2.byteLength;
    if (length6 < 24) {
      target[position3++] = 64 + length6;
    } else if (length6 < 256) {
      target[position3++] = 88;
      target[position3++] = length6;
    } else if (length6 < 65536) {
      target[position3++] = 89;
      target[position3++] = length6 >> 8;
      target[position3++] = length6 & 255;
    } else {
      target[position3++] = 90;
      targetView.setUint32(position3, length6);
      position3 += 4;
    }
    if (position3 + length6 >= target.length) {
      makeRoom(position3 + length6);
    }
    target.set(buffer2.buffer ? buffer2 : new Uint8Array(buffer2), position3);
    position3 += length6;
  }
  function insertIds(serialized, idsToInsert) {
    let nextId;
    let distanceToMove = idsToInsert.length * 2;
    let lastEnd = serialized.length - distanceToMove;
    idsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1);
    for (let id = 0; id < idsToInsert.length; id++) {
      let referee = idsToInsert[id];
      referee.id = id;
      for (let position4 of referee.references) {
        serialized[position4++] = id >> 8;
        serialized[position4] = id & 255;
      }
    }
    while (nextId = idsToInsert.pop()) {
      let offset = nextId.offset;
      serialized.copyWithin(offset + distanceToMove, offset, lastEnd);
      distanceToMove -= 2;
      let position4 = offset + distanceToMove;
      serialized[position4++] = 216;
      serialized[position4++] = 28;
      lastEnd = offset;
    }
    return serialized;
  }
  function writeBundles(start, encode13) {
    targetView.setUint32(bundledStrings2.position + start, position3 - bundledStrings2.position - start + 1);
    let writeStrings = bundledStrings2;
    bundledStrings2 = null;
    encode13(writeStrings[0]);
    encode13(writeStrings[1]);
  }
  function addExtension2(extension) {
    if (extension.Class) {
      if (!extension.encode)
        throw new Error("Extension has no encode function");
      extensionClasses.unshift(extension.Class);
      extensions.unshift(extension);
    }
    addExtension(extension);
  }
  var defaultEncoder = new Encoder4({ useRecords: false });
  var encode9 = defaultEncoder.encode;
  var encodeAsIterable = defaultEncoder.encodeAsIterable;
  var encodeAsAsyncIterable = defaultEncoder.encodeAsAsyncIterable;
  var { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS;
  var REUSE_BUFFER_MODE = 512;
  var RESET_BUFFER_MODE = 1024;
  var THROW_ON_ITERABLE = 2048;

  // coldsky/node_modules/multiformats/dist/src/bytes.js
  var empty4 = new Uint8Array(0);
  function equals8(aa, bb) {
    if (aa === bb)
      return true;
    if (aa.byteLength !== bb.byteLength) {
      return false;
    }
    for (let ii = 0; ii < aa.byteLength; ii++) {
      if (aa[ii] !== bb[ii]) {
        return false;
      }
    }
    return true;
  }
  function coerce4(o) {
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array")
      return o;
    if (o instanceof ArrayBuffer)
      return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) {
      return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    }
    throw new Error("Unknown type, must be binary type");
  }

  // coldsky/node_modules/multiformats/dist/src/vendor/base-x.js
  function base4(ALPHABET, name2) {
    if (ALPHABET.length >= 255) {
      throw new TypeError("Alphabet too long");
    }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + " is ambiguous");
      }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode13(source) {
      if (source instanceof Uint8Array)
        ;
      else if (ArrayBuffer.isView(source)) {
        source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
      } else if (Array.isArray(source)) {
        source = Uint8Array.from(source);
      }
      if (!(source instanceof Uint8Array)) {
        throw new TypeError("Expected Uint8Array");
      }
      if (source.length === 0) {
        return "";
      }
      var zeroes = 0;
      var length6 = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);
      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i2 = 0;
        for (var it1 = size - 1; (carry !== 0 || i2 < length6) && it1 !== -1; it1--, i2++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length6 = i2;
        pbegin++;
      }
      var it2 = size - length6;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }
      return str;
    }
    function decodeUnsafe(source) {
      if (typeof source !== "string") {
        throw new TypeError("Expected String");
      }
      if (source.length === 0) {
        return new Uint8Array();
      }
      var psz = 0;
      if (source[psz] === " ") {
        return;
      }
      var zeroes = 0;
      var length6 = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);
      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];
        if (carry === 255) {
          return;
        }
        var i2 = 0;
        for (var it3 = size - 1; (carry !== 0 || i2 < length6) && it3 !== -1; it3--, i2++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }
        if (carry !== 0) {
          throw new Error("Non-zero carry");
        }
        length6 = i2;
        psz++;
      }
      if (source[psz] === " ") {
        return;
      }
      var it4 = size - length6;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = new Uint8Array(zeroes + (size - it4));
      var j2 = zeroes;
      while (it4 !== size) {
        vch[j2++] = b256[it4++];
      }
      return vch;
    }
    function decode21(string2) {
      var buffer2 = decodeUnsafe(string2);
      if (buffer2) {
        return buffer2;
      }
      throw new Error(`Non-${name2} character`);
    }
    return {
      encode: encode13,
      decodeUnsafe,
      decode: decode21
    };
  }
  var src5 = base4;
  var _brrp__multiformats_scope_baseX4 = src5;
  var base_x_default4 = _brrp__multiformats_scope_baseX4;

  // coldsky/node_modules/multiformats/dist/src/bases/base.js
  var Encoder5 = class {
    constructor(name2, prefix2, baseEncode) {
      __publicField(this, "name");
      __publicField(this, "prefix");
      __publicField(this, "baseEncode");
      this.name = name2;
      this.prefix = prefix2;
      this.baseEncode = baseEncode;
    }
    encode(bytes) {
      if (bytes instanceof Uint8Array) {
        return `${this.prefix}${this.baseEncode(bytes)}`;
      } else {
        throw Error("Unknown type, must be binary type");
      }
    }
  };
  var Decoder5 = class {
    constructor(name2, prefix2, baseDecode) {
      __publicField(this, "name");
      __publicField(this, "prefix");
      __publicField(this, "baseDecode");
      __publicField(this, "prefixCodePoint");
      this.name = name2;
      this.prefix = prefix2;
      if (prefix2.codePointAt(0) === void 0) {
        throw new Error("Invalid prefix character");
      }
      this.prefixCodePoint = prefix2.codePointAt(0);
      this.baseDecode = baseDecode;
    }
    decode(text) {
      if (typeof text === "string") {
        if (text.codePointAt(0) !== this.prefixCodePoint) {
          throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
        }
        return this.baseDecode(text.slice(this.prefix.length));
      } else {
        throw Error("Can only multibase decode strings");
      }
    }
    or(decoder2) {
      return or4(this, decoder2);
    }
  };
  var ComposedDecoder4 = class {
    constructor(decoders) {
      __publicField(this, "decoders");
      this.decoders = decoders;
    }
    or(decoder2) {
      return or4(this, decoder2);
    }
    decode(input) {
      const prefix2 = input[0];
      const decoder2 = this.decoders[prefix2];
      if (decoder2 != null) {
        return decoder2.decode(input);
      } else {
        throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
      }
    }
  };
  function or4(left, right) {
    var _a3, _b;
    return new ComposedDecoder4(__spreadValues(__spreadValues({}, (_a3 = left.decoders) != null ? _a3 : { [left.prefix]: left }), (_b = right.decoders) != null ? _b : { [right.prefix]: right }));
  }
  var Codec4 = class {
    constructor(name2, prefix2, baseEncode, baseDecode) {
      __publicField(this, "name");
      __publicField(this, "prefix");
      __publicField(this, "baseEncode");
      __publicField(this, "baseDecode");
      __publicField(this, "encoder");
      __publicField(this, "decoder");
      this.name = name2;
      this.prefix = prefix2;
      this.baseEncode = baseEncode;
      this.baseDecode = baseDecode;
      this.encoder = new Encoder5(name2, prefix2, baseEncode);
      this.decoder = new Decoder5(name2, prefix2, baseDecode);
    }
    encode(input) {
      return this.encoder.encode(input);
    }
    decode(input) {
      return this.decoder.decode(input);
    }
  };
  function from6({ name: name2, prefix: prefix2, encode: encode13, decode: decode21 }) {
    return new Codec4(name2, prefix2, encode13, decode21);
  }
  function baseX4({ name: name2, prefix: prefix2, alphabet: alphabet2 }) {
    const { encode: encode13, decode: decode21 } = base_x_default4(alphabet2, name2);
    return from6({
      prefix: prefix2,
      name: name2,
      encode: encode13,
      decode: (text) => coerce4(decode21(text))
    });
  }
  function decode15(string2, alphabet2, bitsPerChar, name2) {
    const codes = {};
    for (let i = 0; i < alphabet2.length; ++i) {
      codes[alphabet2[i]] = i;
    }
    let end = string2.length;
    while (string2[end - 1] === "=") {
      --end;
    }
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer2 = 0;
    let written = 0;
    for (let i = 0; i < end; ++i) {
      const value = codes[string2[i]];
      if (value === void 0) {
        throw new SyntaxError(`Non-${name2} character`);
      }
      buffer2 = buffer2 << bitsPerChar | value;
      bits += bitsPerChar;
      if (bits >= 8) {
        bits -= 8;
        out[written++] = 255 & buffer2 >> bits;
      }
    }
    if (bits >= bitsPerChar || (255 & buffer2 << 8 - bits) !== 0) {
      throw new SyntaxError("Unexpected end of data");
    }
    return out;
  }
  function encode10(data, alphabet2, bitsPerChar) {
    const pad = alphabet2[alphabet2.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer2 = 0;
    for (let i = 0; i < data.length; ++i) {
      buffer2 = buffer2 << 8 | data[i];
      bits += 8;
      while (bits > bitsPerChar) {
        bits -= bitsPerChar;
        out += alphabet2[mask & buffer2 >> bits];
      }
    }
    if (bits !== 0) {
      out += alphabet2[mask & buffer2 << bitsPerChar - bits];
    }
    if (pad) {
      while ((out.length * bitsPerChar & 7) !== 0) {
        out += "=";
      }
    }
    return out;
  }
  function rfc46484({ name: name2, prefix: prefix2, bitsPerChar, alphabet: alphabet2 }) {
    return from6({
      prefix: prefix2,
      name: name2,
      encode(input) {
        return encode10(input, alphabet2, bitsPerChar);
      },
      decode(input) {
        return decode15(input, alphabet2, bitsPerChar, name2);
      }
    });
  }

  // coldsky/node_modules/multiformats/dist/src/bases/base32.js
  var base324 = rfc46484({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
  });
  var base32upper4 = rfc46484({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
  });
  var base32pad4 = rfc46484({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
  });
  var base32padupper4 = rfc46484({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
  });
  var base32hex4 = rfc46484({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
  });
  var base32hexupper4 = rfc46484({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
  });
  var base32hexpad4 = rfc46484({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
  });
  var base32hexpadupper4 = rfc46484({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
  });
  var base32z4 = rfc46484({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
  });

  // coldsky/node_modules/multiformats/dist/src/bases/base58.js
  var base58btc4 = baseX4({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
  });
  var base58flickr4 = baseX4({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
  });

  // coldsky/node_modules/multiformats/dist/src/vendor/varint.js
  var encode_14 = encode11;
  var MSB4 = 128;
  var REST4 = 127;
  var MSBALL4 = ~REST4;
  var INT4 = Math.pow(2, 31);
  function encode11(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while (num >= INT4) {
      out[offset++] = num & 255 | MSB4;
      num /= 128;
    }
    while (num & MSBALL4) {
      out[offset++] = num & 255 | MSB4;
      num >>>= 7;
    }
    out[offset] = num | 0;
    encode11.bytes = offset - oldOffset + 1;
    return out;
  }
  var decode16 = read5;
  var MSB$14 = 128;
  var REST$14 = 127;
  function read5(buf2, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf2.length;
    do {
      if (counter >= l) {
        read5.bytes = 0;
        throw new RangeError("Could not decode varint");
      }
      b = buf2[counter++];
      res += shift < 28 ? (b & REST$14) << shift : (b & REST$14) * Math.pow(2, shift);
      shift += 7;
    } while (b >= MSB$14);
    read5.bytes = counter - offset;
    return res;
  }
  var N14 = Math.pow(2, 7);
  var N24 = Math.pow(2, 14);
  var N34 = Math.pow(2, 21);
  var N44 = Math.pow(2, 28);
  var N54 = Math.pow(2, 35);
  var N64 = Math.pow(2, 42);
  var N74 = Math.pow(2, 49);
  var N84 = Math.pow(2, 56);
  var N94 = Math.pow(2, 63);
  var length5 = function(value) {
    return value < N14 ? 1 : value < N24 ? 2 : value < N34 ? 3 : value < N44 ? 4 : value < N54 ? 5 : value < N64 ? 6 : value < N74 ? 7 : value < N84 ? 8 : value < N94 ? 9 : 10;
  };
  var varint4 = {
    encode: encode_14,
    decode: decode16,
    encodingLength: length5
  };
  var _brrp_varint4 = varint4;
  var varint_default4 = _brrp_varint4;

  // coldsky/node_modules/multiformats/dist/src/varint.js
  function decode17(data, offset = 0) {
    const code2 = varint_default4.decode(data, offset);
    return [code2, varint_default4.decode.bytes];
  }
  function encodeTo4(int, target2, offset = 0) {
    varint_default4.encode(int, target2, offset);
    return target2;
  }
  function encodingLength4(int) {
    return varint_default4.encodingLength(int);
  }

  // coldsky/node_modules/multiformats/dist/src/hashes/digest.js
  function create4(code2, digest2) {
    const size = digest2.byteLength;
    const sizeOffset = encodingLength4(code2);
    const digestOffset = sizeOffset + encodingLength4(size);
    const bytes = new Uint8Array(digestOffset + size);
    encodeTo4(code2, bytes, 0);
    encodeTo4(size, bytes, sizeOffset);
    bytes.set(digest2, digestOffset);
    return new Digest4(code2, size, digest2, bytes);
  }
  function decode18(multihash) {
    const bytes = coerce4(multihash);
    const [code2, sizeOffset] = decode17(bytes);
    const [size, digestOffset] = decode17(bytes.subarray(sizeOffset));
    const digest2 = bytes.subarray(sizeOffset + digestOffset);
    if (digest2.byteLength !== size) {
      throw new Error("Incorrect length");
    }
    return new Digest4(code2, size, digest2, bytes);
  }
  function equals9(a, b) {
    if (a === b) {
      return true;
    } else {
      const data = b;
      return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equals8(a.bytes, data.bytes);
    }
  }
  var Digest4 = class {
    /**
     * Creates a multihash digest.
     */
    constructor(code2, size, digest2, bytes) {
      __publicField(this, "code");
      __publicField(this, "size");
      __publicField(this, "digest");
      __publicField(this, "bytes");
      this.code = code2;
      this.size = size;
      this.digest = digest2;
      this.bytes = bytes;
    }
  };

  // coldsky/node_modules/multiformats/dist/src/cid.js
  function format(link, base5) {
    const { bytes, version: version5 } = link;
    switch (version5) {
      case 0:
        return toStringV04(bytes, baseCache(link), base5 != null ? base5 : base58btc4.encoder);
      default:
        return toStringV14(bytes, baseCache(link), base5 != null ? base5 : base324.encoder);
    }
  }
  var cache = /* @__PURE__ */ new WeakMap();
  function baseCache(cid) {
    const baseCache2 = cache.get(cid);
    if (baseCache2 == null) {
      const baseCache3 = /* @__PURE__ */ new Map();
      cache.set(cid, baseCache3);
      return baseCache3;
    }
    return baseCache2;
  }
  var _a;
  var CID4 = class _CID {
    /**
     * @param version - Version of the CID
     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
     * @param multihash - (Multi)hash of the of the content.
     */
    constructor(version5, code2, multihash, bytes) {
      __publicField(this, "code");
      __publicField(this, "version");
      __publicField(this, "multihash");
      __publicField(this, "bytes");
      __publicField(this, "/");
      __publicField(this, _a, "CID");
      this.code = code2;
      this.version = version5;
      this.multihash = multihash;
      this.bytes = bytes;
      this["/"] = bytes;
    }
    /**
     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`
     * please either use `CID.asCID(cid)` or switch to new signalling mechanism
     *
     * @deprecated
     */
    get asCID() {
      return this;
    }
    // ArrayBufferView
    get byteOffset() {
      return this.bytes.byteOffset;
    }
    // ArrayBufferView
    get byteLength() {
      return this.bytes.byteLength;
    }
    toV0() {
      switch (this.version) {
        case 0: {
          return this;
        }
        case 1: {
          const { code: code2, multihash } = this;
          if (code2 !== DAG_PB_CODE4) {
            throw new Error("Cannot convert a non dag-pb CID to CIDv0");
          }
          if (multihash.code !== SHA_256_CODE4) {
            throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
          }
          return _CID.createV0(multihash);
        }
        default: {
          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
      }
    }
    toV1() {
      switch (this.version) {
        case 0: {
          const { code: code2, digest: digest2 } = this.multihash;
          const multihash = create4(code2, digest2);
          return _CID.createV1(this.code, multihash);
        }
        case 1: {
          return this;
        }
        default: {
          throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);
        }
      }
    }
    equals(other) {
      return _CID.equals(this, other);
    }
    static equals(self2, other) {
      const unknown = other;
      return unknown != null && self2.code === unknown.code && self2.version === unknown.version && equals9(self2.multihash, unknown.multihash);
    }
    toString(base5) {
      return format(this, base5);
    }
    toJSON() {
      return { "/": format(this) };
    }
    link() {
      return this;
    }
    // Legacy
    [(_a = Symbol.toStringTag, Symbol.for("nodejs.util.inspect.custom"))]() {
      return `CID(${this.toString()})`;
    }
    /**
     * Takes any input `value` and returns a `CID` instance if it was
     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`
     * it will return value back. If `value` is not instance of this CID
     * class, but is compatible CID it will return new instance of this
     * `CID` class. Otherwise returns null.
     *
     * This allows two different incompatible versions of CID library to
     * co-exist and interop as long as binary interface is compatible.
     */
    static asCID(input) {
      if (input == null) {
        return null;
      }
      const value = input;
      if (value instanceof _CID) {
        return value;
      } else if (value["/"] != null && value["/"] === value.bytes || value.asCID === value) {
        const { version: version5, code: code2, multihash, bytes } = value;
        return new _CID(version5, code2, multihash, bytes != null ? bytes : encodeCID4(version5, code2, multihash.bytes));
      } else if (value[cidSymbol4] === true) {
        const { version: version5, multihash, code: code2 } = value;
        const digest2 = decode18(multihash);
        return _CID.create(version5, code2, digest2);
      } else {
        return null;
      }
    }
    /**
     * @param version - Version of the CID
     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv
     * @param digest - (Multi)hash of the of the content.
     */
    static create(version5, code2, digest2) {
      if (typeof code2 !== "number") {
        throw new Error("String codecs are no longer supported");
      }
      if (!(digest2.bytes instanceof Uint8Array)) {
        throw new Error("Invalid digest");
      }
      switch (version5) {
        case 0: {
          if (code2 !== DAG_PB_CODE4) {
            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE4}) block encoding`);
          } else {
            return new _CID(version5, code2, digest2, digest2.bytes);
          }
        }
        case 1: {
          const bytes = encodeCID4(version5, code2, digest2.bytes);
          return new _CID(version5, code2, digest2, bytes);
        }
        default: {
          throw new Error("Invalid version");
        }
      }
    }
    /**
     * Simplified version of `create` for CIDv0.
     */
    static createV0(digest2) {
      return _CID.create(0, DAG_PB_CODE4, digest2);
    }
    /**
     * Simplified version of `create` for CIDv1.
     *
     * @param code - Content encoding format code.
     * @param digest - Multihash of the content.
     */
    static createV1(code2, digest2) {
      return _CID.create(1, code2, digest2);
    }
    /**
     * Decoded a CID from its binary representation. The byte array must contain
     * only the CID with no additional bytes.
     *
     * An error will be thrown if the bytes provided do not contain a valid
     * binary representation of a CID.
     */
    static decode(bytes) {
      const [cid, remainder] = _CID.decodeFirst(bytes);
      if (remainder.length !== 0) {
        throw new Error("Incorrect length");
      }
      return cid;
    }
    /**
     * Decoded a CID from its binary representation at the beginning of a byte
     * array.
     *
     * Returns an array with the first element containing the CID and the second
     * element containing the remainder of the original byte array. The remainder
     * will be a zero-length byte array if the provided bytes only contained a
     * binary CID representation.
     */
    static decodeFirst(bytes) {
      const specs = _CID.inspectBytes(bytes);
      const prefixSize = specs.size - specs.multihashSize;
      const multihashBytes = coerce4(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
      if (multihashBytes.byteLength !== specs.multihashSize) {
        throw new Error("Incorrect length");
      }
      const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
      const digest2 = new Digest4(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
      const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
      return [cid, bytes.subarray(specs.size)];
    }
    /**
     * Inspect the initial bytes of a CID to determine its properties.
     *
     * Involves decoding up to 4 varints. Typically this will require only 4 to 6
     * bytes but for larger multicodec code values and larger multihash digest
     * lengths these varints can be quite large. It is recommended that at least
     * 10 bytes be made available in the `initialBytes` argument for a complete
     * inspection.
     */
    static inspectBytes(initialBytes) {
      let offset = 0;
      const next2 = () => {
        const [i, length6] = decode17(initialBytes.subarray(offset));
        offset += length6;
        return i;
      };
      let version5 = next2();
      let codec = DAG_PB_CODE4;
      if (version5 === 18) {
        version5 = 0;
        offset = 0;
      } else {
        codec = next2();
      }
      if (version5 !== 0 && version5 !== 1) {
        throw new RangeError(`Invalid CID version ${version5}`);
      }
      const prefixSize = offset;
      const multihashCode = next2();
      const digestSize = next2();
      const size = offset + digestSize;
      const multihashSize = size - prefixSize;
      return { version: version5, codec, multihashCode, digestSize, multihashSize, size };
    }
    /**
     * Takes cid in a string representation and creates an instance. If `base`
     * decoder is not provided will use a default from the configuration. It will
     * throw an error if encoding of the CID is not compatible with supplied (or
     * a default decoder).
     */
    static parse(source, base5) {
      const [prefix2, bytes] = parseCIDtoBytes4(source, base5);
      const cid = _CID.decode(bytes);
      if (cid.version === 0 && source[0] !== "Q") {
        throw Error("Version 0 CID string must not include multibase prefix");
      }
      baseCache(cid).set(prefix2, source);
      return cid;
    }
  };
  function parseCIDtoBytes4(source, base5) {
    switch (source[0]) {
      case "Q": {
        const decoder2 = base5 != null ? base5 : base58btc4;
        return [
          base58btc4.prefix,
          decoder2.decode(`${base58btc4.prefix}${source}`)
        ];
      }
      case base58btc4.prefix: {
        const decoder2 = base5 != null ? base5 : base58btc4;
        return [base58btc4.prefix, decoder2.decode(source)];
      }
      case base324.prefix: {
        const decoder2 = base5 != null ? base5 : base324;
        return [base324.prefix, decoder2.decode(source)];
      }
      default: {
        if (base5 == null) {
          throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
        }
        return [source[0], base5.decode(source)];
      }
    }
  }
  function toStringV04(bytes, cache2, base5) {
    const { prefix: prefix2 } = base5;
    if (prefix2 !== base58btc4.prefix) {
      throw Error(`Cannot string encode V0 in ${base5.name} encoding`);
    }
    const cid = cache2.get(prefix2);
    if (cid == null) {
      const cid2 = base5.encode(bytes).slice(1);
      cache2.set(prefix2, cid2);
      return cid2;
    } else {
      return cid;
    }
  }
  function toStringV14(bytes, cache2, base5) {
    const { prefix: prefix2 } = base5;
    const cid = cache2.get(prefix2);
    if (cid == null) {
      const cid2 = base5.encode(bytes);
      cache2.set(prefix2, cid2);
      return cid2;
    } else {
      return cid;
    }
  }
  var DAG_PB_CODE4 = 112;
  var SHA_256_CODE4 = 18;
  function encodeCID4(version5, code2, multihash) {
    const codeOffset = encodingLength4(version5);
    const hashOffset = codeOffset + encodingLength4(code2);
    const bytes = new Uint8Array(hashOffset + multihash.byteLength);
    encodeTo4(version5, bytes, 0);
    encodeTo4(code2, bytes, codeOffset);
    bytes.set(multihash, hashOffset);
    return bytes;
  }
  var cidSymbol4 = Symbol.for("@ipld/js-cid/CID");

  // coldsky/node_modules/cborg/lib/is.js
  var typeofs = [
    "string",
    "number",
    "bigint",
    "symbol"
  ];
  var objectTypeNames = [
    "Function",
    "Generator",
    "AsyncGenerator",
    "GeneratorFunction",
    "AsyncGeneratorFunction",
    "AsyncFunction",
    "Observable",
    "Array",
    "Buffer",
    "Object",
    "RegExp",
    "Date",
    "Error",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "DataView",
    "Promise",
    "URL",
    "HTMLElement",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Uint16Array",
    "Int32Array",
    "Uint32Array",
    "Float32Array",
    "Float64Array",
    "BigInt64Array",
    "BigUint64Array"
  ];
  function is(value) {
    if (value === null) {
      return "null";
    }
    if (value === void 0) {
      return "undefined";
    }
    if (value === true || value === false) {
      return "boolean";
    }
    const typeOf = typeof value;
    if (typeofs.includes(typeOf)) {
      return typeOf;
    }
    if (typeOf === "function") {
      return "Function";
    }
    if (Array.isArray(value)) {
      return "Array";
    }
    if (isBuffer(value)) {
      return "Buffer";
    }
    const objectType = getObjectType(value);
    if (objectType) {
      return objectType;
    }
    return "Object";
  }
  function isBuffer(value) {
    return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
  }
  function getObjectType(value) {
    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
    if (objectTypeNames.includes(objectTypeName)) {
      return objectTypeName;
    }
    return void 0;
  }

  // coldsky/node_modules/cborg/lib/token.js
  var Type = class {
    /**
     * @param {number} major
     * @param {string} name
     * @param {boolean} terminal
     */
    constructor(major, name2, terminal) {
      this.major = major;
      this.majorEncoded = major << 5;
      this.name = name2;
      this.terminal = terminal;
    }
    /* c8 ignore next 3 */
    toString() {
      return `Type[${this.major}].${this.name}`;
    }
    /**
     * @param {Type} typ
     * @returns {number}
     */
    compare(typ) {
      return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
    }
  };
  Type.uint = new Type(0, "uint", true);
  Type.negint = new Type(1, "negint", true);
  Type.bytes = new Type(2, "bytes", true);
  Type.string = new Type(3, "string", true);
  Type.array = new Type(4, "array", false);
  Type.map = new Type(5, "map", false);
  Type.tag = new Type(6, "tag", false);
  Type.float = new Type(7, "float", true);
  Type.false = new Type(7, "false", true);
  Type.true = new Type(7, "true", true);
  Type.null = new Type(7, "null", true);
  Type.undefined = new Type(7, "undefined", true);
  Type.break = new Type(7, "break", true);
  var Token = class {
    /**
     * @param {Type} type
     * @param {any} [value]
     * @param {number} [encodedLength]
     */
    constructor(type, value, encodedLength) {
      this.type = type;
      this.value = value;
      this.encodedLength = encodedLength;
      this.encodedBytes = void 0;
      this.byteValue = void 0;
    }
    /* c8 ignore next 3 */
    toString() {
      return `Token[${this.type}].${this.value}`;
    }
  };

  // coldsky/node_modules/cborg/lib/byte-utils.js
  var useBuffer = globalThis.process && // @ts-ignore
  !globalThis.process.browser && // @ts-ignore
  globalThis.Buffer && // @ts-ignore
  typeof globalThis.Buffer.isBuffer === "function";
  var textDecoder2 = new TextDecoder();
  var textEncoder3 = new TextEncoder();
  function isBuffer2(buf2) {
    return useBuffer && globalThis.Buffer.isBuffer(buf2);
  }
  function asU8A(buf2) {
    if (!(buf2 instanceof Uint8Array)) {
      return Uint8Array.from(buf2);
    }
    return isBuffer2(buf2) ? new Uint8Array(buf2.buffer, buf2.byteOffset, buf2.byteLength) : buf2;
  }
  var toString3 = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */
    (bytes, start, end) => {
      return end - start > 64 ? (
        // eslint-disable-line operator-linebreak
        // @ts-ignore
        globalThis.Buffer.from(bytes.subarray(start, end)).toString("utf8")
      ) : utf8Slice(bytes, start, end);
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */
    (bytes, start, end) => {
      return end - start > 64 ? textDecoder2.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
    }
  );
  var fromString3 = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {string} string
     */
    (string2) => {
      return string2.length > 64 ? (
        // eslint-disable-line operator-linebreak
        // @ts-ignore
        globalThis.Buffer.from(string2)
      ) : utf8ToBytes(string2);
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {string} string
     */
    (string2) => {
      return string2.length > 64 ? textEncoder3.encode(string2) : utf8ToBytes(string2);
    }
  );
  var slice2 = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */
    (bytes, start, end) => {
      if (isBuffer2(bytes)) {
        return new Uint8Array(bytes.subarray(start, end));
      }
      return bytes.slice(start, end);
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array} bytes
     * @param {number} start
     * @param {number} end
     */
    (bytes, start, end) => {
      return bytes.slice(start, end);
    }
  );
  var concat2 = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array[]} chunks
     * @param {number} length
     * @returns {Uint8Array}
     */
    (chunks, length6) => {
      chunks = chunks.map((c) => c instanceof Uint8Array ? c : (
        // eslint-disable-line operator-linebreak
        // @ts-ignore
        globalThis.Buffer.from(c)
      ));
      return asU8A(globalThis.Buffer.concat(chunks, length6));
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {Uint8Array[]} chunks
     * @param {number} length
     * @returns {Uint8Array}
     */
    (chunks, length6) => {
      const out = new Uint8Array(length6);
      let off = 0;
      for (let b of chunks) {
        if (off + b.length > out.length) {
          b = b.subarray(0, out.length - off);
        }
        out.set(b, off);
        off += b.length;
      }
      return out;
    }
  );
  var alloc2 = useBuffer ? (
    // eslint-disable-line operator-linebreak
    /**
     * @param {number} size
     * @returns {Uint8Array}
     */
    (size) => {
      return globalThis.Buffer.allocUnsafe(size);
    }
  ) : (
    // eslint-disable-line operator-linebreak
    /**
     * @param {number} size
     * @returns {Uint8Array}
     */
    (size) => {
      return new Uint8Array(size);
    }
  );
  function compare2(b1, b2) {
    if (isBuffer2(b1) && isBuffer2(b2)) {
      return b1.compare(b2);
    }
    for (let i = 0; i < b1.length; i++) {
      if (b1[i] === b2[i]) {
        continue;
      }
      return b1[i] < b2[i] ? -1 : 1;
    }
    return 0;
  }
  function utf8ToBytes(str) {
    const out = [];
    let p = 0;
    for (let i = 0; i < str.length; i++) {
      let c = str.charCodeAt(i);
      if (c < 128) {
        out[p++] = c;
      } else if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
        c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
        out[p++] = c >> 18 | 240;
        out[p++] = c >> 12 & 63 | 128;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
    return out;
  }
  function utf8Slice(buf2, offset, end) {
    const res = [];
    while (offset < end) {
      const firstByte = buf2[offset];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (offset + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf2[offset + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf2[offset + 1];
            thirdByte = buf2[offset + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf2[offset + 1];
            thirdByte = buf2[offset + 2];
            fourthByte = buf2[offset + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      offset += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  var MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }

  // coldsky/node_modules/cborg/lib/bl.js
  var defaultChunkSize = 256;
  var Bl = class {
    /**
     * @param {number} [chunkSize]
     */
    constructor(chunkSize = defaultChunkSize) {
      this.chunkSize = chunkSize;
      this.cursor = 0;
      this.maxCursor = -1;
      this.chunks = [];
      this._initReuseChunk = null;
    }
    reset() {
      this.cursor = 0;
      this.maxCursor = -1;
      if (this.chunks.length) {
        this.chunks = [];
      }
      if (this._initReuseChunk !== null) {
        this.chunks.push(this._initReuseChunk);
        this.maxCursor = this._initReuseChunk.length - 1;
      }
    }
    /**
     * @param {Uint8Array|number[]} bytes
     */
    push(bytes) {
      let topChunk = this.chunks[this.chunks.length - 1];
      const newMax = this.cursor + bytes.length;
      if (newMax <= this.maxCursor + 1) {
        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
        topChunk.set(bytes, chunkPos);
      } else {
        if (topChunk) {
          const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
          if (chunkPos < topChunk.length) {
            this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
            this.maxCursor = this.cursor - 1;
          }
        }
        if (bytes.length < 64 && bytes.length < this.chunkSize) {
          topChunk = alloc2(this.chunkSize);
          this.chunks.push(topChunk);
          this.maxCursor += topChunk.length;
          if (this._initReuseChunk === null) {
            this._initReuseChunk = topChunk;
          }
          topChunk.set(bytes, 0);
        } else {
          this.chunks.push(bytes);
          this.maxCursor += bytes.length;
        }
      }
      this.cursor += bytes.length;
    }
    /**
     * @param {boolean} [reset]
     * @returns {Uint8Array}
     */
    toBytes(reset = false) {
      let byts;
      if (this.chunks.length === 1) {
        const chunk = this.chunks[0];
        if (reset && this.cursor > chunk.length / 2) {
          byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
          this._initReuseChunk = null;
          this.chunks = [];
        } else {
          byts = slice2(chunk, 0, this.cursor);
        }
      } else {
        byts = concat2(this.chunks, this.cursor);
      }
      if (reset) {
        this.reset();
      }
      return byts;
    }
  };

  // coldsky/node_modules/cborg/lib/common.js
  var decodeErrPrefix = "CBOR decode error:";
  var encodeErrPrefix = "CBOR encode error:";
  var uintMinorPrefixBytes = [];
  uintMinorPrefixBytes[23] = 1;
  uintMinorPrefixBytes[24] = 2;
  uintMinorPrefixBytes[25] = 3;
  uintMinorPrefixBytes[26] = 5;
  uintMinorPrefixBytes[27] = 9;
  function assertEnoughData(data, pos, need) {
    if (data.length - pos < need) {
      throw new Error(`${decodeErrPrefix} not enough data for type`);
    }
  }

  // coldsky/node_modules/cborg/lib/0uint.js
  var uintBoundaries = [24, 256, 65536, 4294967296, BigInt("18446744073709551616")];
  function readUint8(data, offset, options) {
    assertEnoughData(data, offset, 1);
    const value = data[offset];
    if (options.strict === true && value < uintBoundaries[0]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint16(data, offset, options) {
    assertEnoughData(data, offset, 2);
    const value = data[offset] << 8 | data[offset + 1];
    if (options.strict === true && value < uintBoundaries[1]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint32(data, offset, options) {
    assertEnoughData(data, offset, 4);
    const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    if (options.strict === true && value < uintBoundaries[2]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    return value;
  }
  function readUint64(data, offset, options) {
    assertEnoughData(data, offset, 8);
    const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
    const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
    if (options.strict === true && value < uintBoundaries[3]) {
      throw new Error(`${decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    }
    if (value <= Number.MAX_SAFE_INTEGER) {
      return Number(value);
    }
    if (options.allowBigInt === true) {
      return value;
    }
    throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
  }
  function decodeUint8(data, pos, _minor, options) {
    return new Token(Type.uint, readUint8(data, pos + 1, options), 2);
  }
  function decodeUint16(data, pos, _minor, options) {
    return new Token(Type.uint, readUint16(data, pos + 1, options), 3);
  }
  function decodeUint32(data, pos, _minor, options) {
    return new Token(Type.uint, readUint32(data, pos + 1, options), 5);
  }
  function decodeUint64(data, pos, _minor, options) {
    return new Token(Type.uint, readUint64(data, pos + 1, options), 9);
  }
  function encodeUint(buf2, token2) {
    return encodeUintValue(buf2, 0, token2.value);
  }
  function encodeUintValue(buf2, major, uint) {
    if (uint < uintBoundaries[0]) {
      const nuint = Number(uint);
      buf2.push([major | nuint]);
    } else if (uint < uintBoundaries[1]) {
      const nuint = Number(uint);
      buf2.push([major | 24, nuint]);
    } else if (uint < uintBoundaries[2]) {
      const nuint = Number(uint);
      buf2.push([major | 25, nuint >>> 8, nuint & 255]);
    } else if (uint < uintBoundaries[3]) {
      const nuint = Number(uint);
      buf2.push([major | 26, nuint >>> 24 & 255, nuint >>> 16 & 255, nuint >>> 8 & 255, nuint & 255]);
    } else {
      const buint = BigInt(uint);
      if (buint < uintBoundaries[4]) {
        const set = [major | 27, 0, 0, 0, 0, 0, 0, 0];
        let lo = Number(buint & BigInt(4294967295));
        let hi = Number(buint >> BigInt(32) & BigInt(4294967295));
        set[8] = lo & 255;
        lo = lo >> 8;
        set[7] = lo & 255;
        lo = lo >> 8;
        set[6] = lo & 255;
        lo = lo >> 8;
        set[5] = lo & 255;
        set[4] = hi & 255;
        hi = hi >> 8;
        set[3] = hi & 255;
        hi = hi >> 8;
        set[2] = hi & 255;
        hi = hi >> 8;
        set[1] = hi & 255;
        buf2.push(set);
      } else {
        throw new Error(`${decodeErrPrefix} encountered BigInt larger than allowable range`);
      }
    }
  }
  encodeUint.encodedSize = function encodedSize(token2) {
    return encodeUintValue.encodedSize(token2.value);
  };
  encodeUintValue.encodedSize = function encodedSize2(uint) {
    if (uint < uintBoundaries[0]) {
      return 1;
    }
    if (uint < uintBoundaries[1]) {
      return 2;
    }
    if (uint < uintBoundaries[2]) {
      return 3;
    }
    if (uint < uintBoundaries[3]) {
      return 5;
    }
    return 9;
  };
  encodeUint.compareTokens = function compareTokens(tok1, tok2) {
    return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : (
      /* c8 ignore next */
      0
    );
  };

  // coldsky/node_modules/cborg/lib/1negint.js
  function decodeNegint8(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint8(data, pos + 1, options), 2);
  }
  function decodeNegint16(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint16(data, pos + 1, options), 3);
  }
  function decodeNegint32(data, pos, _minor, options) {
    return new Token(Type.negint, -1 - readUint32(data, pos + 1, options), 5);
  }
  var neg1b = BigInt(-1);
  var pos1b = BigInt(1);
  function decodeNegint64(data, pos, _minor, options) {
    const int = readUint64(data, pos + 1, options);
    if (typeof int !== "bigint") {
      const value = -1 - int;
      if (value >= Number.MIN_SAFE_INTEGER) {
        return new Token(Type.negint, value, 9);
      }
    }
    if (options.allowBigInt !== true) {
      throw new Error(`${decodeErrPrefix} integers outside of the safe integer range are not supported`);
    }
    return new Token(Type.negint, neg1b - BigInt(int), 9);
  }
  function encodeNegint(buf2, token2) {
    const negint = token2.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    encodeUintValue(buf2, token2.type.majorEncoded, unsigned);
  }
  encodeNegint.encodedSize = function encodedSize3(token2) {
    const negint = token2.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    if (unsigned < uintBoundaries[0]) {
      return 1;
    }
    if (unsigned < uintBoundaries[1]) {
      return 2;
    }
    if (unsigned < uintBoundaries[2]) {
      return 3;
    }
    if (unsigned < uintBoundaries[3]) {
      return 5;
    }
    return 9;
  };
  encodeNegint.compareTokens = function compareTokens2(tok1, tok2) {
    return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : (
      /* c8 ignore next */
      0
    );
  };

  // coldsky/node_modules/cborg/lib/2bytes.js
  function toToken(data, pos, prefix2, length6) {
    assertEnoughData(data, pos, prefix2 + length6);
    const buf2 = slice2(data, pos + prefix2, pos + prefix2 + length6);
    return new Token(Type.bytes, buf2, prefix2 + length6);
  }
  function decodeBytesCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
  }
  function decodeBytes8(data, pos, _minor, options) {
    return toToken(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeBytes16(data, pos, _minor, options) {
    return toToken(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeBytes32(data, pos, _minor, options) {
    return toToken(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeBytes64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer bytes lengths not supported`);
    }
    return toToken(data, pos, 9, l);
  }
  function tokenBytes(token2) {
    if (token2.encodedBytes === void 0) {
      token2.encodedBytes = token2.type === Type.string ? fromString3(token2.value) : token2.value;
    }
    return token2.encodedBytes;
  }
  function encodeBytes(buf2, token2) {
    const bytes = tokenBytes(token2);
    encodeUintValue(buf2, token2.type.majorEncoded, bytes.length);
    buf2.push(bytes);
  }
  encodeBytes.encodedSize = function encodedSize4(token2) {
    const bytes = tokenBytes(token2);
    return encodeUintValue.encodedSize(bytes.length) + bytes.length;
  };
  encodeBytes.compareTokens = function compareTokens3(tok1, tok2) {
    return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
  };
  function compareBytes(b1, b2) {
    return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare2(b1, b2);
  }

  // coldsky/node_modules/cborg/lib/3string.js
  function toToken2(data, pos, prefix2, length6, options) {
    const totLength = prefix2 + length6;
    assertEnoughData(data, pos, totLength);
    const tok = new Token(Type.string, toString3(data, pos + prefix2, pos + totLength), totLength);
    if (options.retainStringBytes === true) {
      tok.byteValue = slice2(data, pos + prefix2, pos + totLength);
    }
    return tok;
  }
  function decodeStringCompact(data, pos, minor, options) {
    return toToken2(data, pos, 1, minor, options);
  }
  function decodeString8(data, pos, _minor, options) {
    return toToken2(data, pos, 2, readUint8(data, pos + 1, options), options);
  }
  function decodeString16(data, pos, _minor, options) {
    return toToken2(data, pos, 3, readUint16(data, pos + 1, options), options);
  }
  function decodeString32(data, pos, _minor, options) {
    return toToken2(data, pos, 5, readUint32(data, pos + 1, options), options);
  }
  function decodeString64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);
    }
    return toToken2(data, pos, 9, l, options);
  }
  var encodeString = encodeBytes;

  // coldsky/node_modules/cborg/lib/4array.js
  function toToken3(_data, _pos, prefix2, length6) {
    return new Token(Type.array, length6, prefix2);
  }
  function decodeArrayCompact(data, pos, minor, _options) {
    return toToken3(data, pos, 1, minor);
  }
  function decodeArray8(data, pos, _minor, options) {
    return toToken3(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeArray16(data, pos, _minor, options) {
    return toToken3(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeArray32(data, pos, _minor, options) {
    return toToken3(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeArray64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer array lengths not supported`);
    }
    return toToken3(data, pos, 9, l);
  }
  function decodeArrayIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken3(data, pos, 1, Infinity);
  }
  function encodeArray(buf2, token2) {
    encodeUintValue(buf2, Type.array.majorEncoded, token2.value);
  }
  encodeArray.compareTokens = encodeUint.compareTokens;
  encodeArray.encodedSize = function encodedSize5(token2) {
    return encodeUintValue.encodedSize(token2.value);
  };

  // coldsky/node_modules/cborg/lib/5map.js
  function toToken4(_data, _pos, prefix2, length6) {
    return new Token(Type.map, length6, prefix2);
  }
  function decodeMapCompact(data, pos, minor, _options) {
    return toToken4(data, pos, 1, minor);
  }
  function decodeMap8(data, pos, _minor, options) {
    return toToken4(data, pos, 2, readUint8(data, pos + 1, options));
  }
  function decodeMap16(data, pos, _minor, options) {
    return toToken4(data, pos, 3, readUint16(data, pos + 1, options));
  }
  function decodeMap32(data, pos, _minor, options) {
    return toToken4(data, pos, 5, readUint32(data, pos + 1, options));
  }
  function decodeMap64(data, pos, _minor, options) {
    const l = readUint64(data, pos + 1, options);
    if (typeof l === "bigint") {
      throw new Error(`${decodeErrPrefix} 64-bit integer map lengths not supported`);
    }
    return toToken4(data, pos, 9, l);
  }
  function decodeMapIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return toToken4(data, pos, 1, Infinity);
  }
  function encodeMap(buf2, token2) {
    encodeUintValue(buf2, Type.map.majorEncoded, token2.value);
  }
  encodeMap.compareTokens = encodeUint.compareTokens;
  encodeMap.encodedSize = function encodedSize6(token2) {
    return encodeUintValue.encodedSize(token2.value);
  };

  // coldsky/node_modules/cborg/lib/6tag.js
  function decodeTagCompact(_data, _pos, minor, _options) {
    return new Token(Type.tag, minor, 1);
  }
  function decodeTag8(data, pos, _minor, options) {
    return new Token(Type.tag, readUint8(data, pos + 1, options), 2);
  }
  function decodeTag16(data, pos, _minor, options) {
    return new Token(Type.tag, readUint16(data, pos + 1, options), 3);
  }
  function decodeTag32(data, pos, _minor, options) {
    return new Token(Type.tag, readUint32(data, pos + 1, options), 5);
  }
  function decodeTag64(data, pos, _minor, options) {
    return new Token(Type.tag, readUint64(data, pos + 1, options), 9);
  }
  function encodeTag(buf2, token2) {
    encodeUintValue(buf2, Type.tag.majorEncoded, token2.value);
  }
  encodeTag.compareTokens = encodeUint.compareTokens;
  encodeTag.encodedSize = function encodedSize7(token2) {
    return encodeUintValue.encodedSize(token2.value);
  };

  // coldsky/node_modules/cborg/lib/7float.js
  var MINOR_FALSE = 20;
  var MINOR_TRUE = 21;
  var MINOR_NULL = 22;
  var MINOR_UNDEFINED = 23;
  function decodeUndefined(_data, _pos, _minor, options) {
    if (options.allowUndefined === false) {
      throw new Error(`${decodeErrPrefix} undefined values are not supported`);
    } else if (options.coerceUndefinedToNull === true) {
      return new Token(Type.null, null, 1);
    }
    return new Token(Type.undefined, void 0, 1);
  }
  function decodeBreak(_data, _pos, _minor, options) {
    if (options.allowIndefinite === false) {
      throw new Error(`${decodeErrPrefix} indefinite length items not allowed`);
    }
    return new Token(Type.break, void 0, 1);
  }
  function createToken(value, bytes, options) {
    if (options) {
      if (options.allowNaN === false && Number.isNaN(value)) {
        throw new Error(`${decodeErrPrefix} NaN values are not supported`);
      }
      if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
        throw new Error(`${decodeErrPrefix} Infinity values are not supported`);
      }
    }
    return new Token(Type.float, value, bytes);
  }
  function decodeFloat16(data, pos, _minor, options) {
    return createToken(readFloat16(data, pos + 1), 3, options);
  }
  function decodeFloat32(data, pos, _minor, options) {
    return createToken(readFloat32(data, pos + 1), 5, options);
  }
  function decodeFloat64(data, pos, _minor, options) {
    return createToken(readFloat64(data, pos + 1), 9, options);
  }
  function encodeFloat(buf2, token2, options) {
    const float = token2.value;
    if (float === false) {
      buf2.push([Type.float.majorEncoded | MINOR_FALSE]);
    } else if (float === true) {
      buf2.push([Type.float.majorEncoded | MINOR_TRUE]);
    } else if (float === null) {
      buf2.push([Type.float.majorEncoded | MINOR_NULL]);
    } else if (float === void 0) {
      buf2.push([Type.float.majorEncoded | MINOR_UNDEFINED]);
    } else {
      let decoded;
      let success = false;
      if (!options || options.float64 !== true) {
        encodeFloat16(float);
        decoded = readFloat16(ui8a, 1);
        if (float === decoded || Number.isNaN(float)) {
          ui8a[0] = 249;
          buf2.push(ui8a.slice(0, 3));
          success = true;
        } else {
          encodeFloat32(float);
          decoded = readFloat32(ui8a, 1);
          if (float === decoded) {
            ui8a[0] = 250;
            buf2.push(ui8a.slice(0, 5));
            success = true;
          }
        }
      }
      if (!success) {
        encodeFloat64(float);
        decoded = readFloat64(ui8a, 1);
        ui8a[0] = 251;
        buf2.push(ui8a.slice(0, 9));
      }
    }
  }
  encodeFloat.encodedSize = function encodedSize8(token2, options) {
    const float = token2.value;
    if (float === false || float === true || float === null || float === void 0) {
      return 1;
    }
    if (!options || options.float64 !== true) {
      encodeFloat16(float);
      let decoded = readFloat16(ui8a, 1);
      if (float === decoded || Number.isNaN(float)) {
        return 3;
      }
      encodeFloat32(float);
      decoded = readFloat32(ui8a, 1);
      if (float === decoded) {
        return 5;
      }
    }
    return 9;
  };
  var buffer = new ArrayBuffer(9);
  var dataView2 = new DataView(buffer, 1);
  var ui8a = new Uint8Array(buffer, 0);
  function encodeFloat16(inp) {
    if (inp === Infinity) {
      dataView2.setUint16(0, 31744, false);
    } else if (inp === -Infinity) {
      dataView2.setUint16(0, 64512, false);
    } else if (Number.isNaN(inp)) {
      dataView2.setUint16(0, 32256, false);
    } else {
      dataView2.setFloat32(0, inp);
      const valu32 = dataView2.getUint32(0);
      const exponent = (valu32 & 2139095040) >> 23;
      const mantissa = valu32 & 8388607;
      if (exponent === 255) {
        dataView2.setUint16(0, 31744, false);
      } else if (exponent === 0) {
        dataView2.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);
      } else {
        const logicalExponent = exponent - 127;
        if (logicalExponent < -24) {
          dataView2.setUint16(0, 0);
        } else if (logicalExponent < -14) {
          dataView2.setUint16(0, (valu32 & 2147483648) >> 16 | /* sign bit */
          1 << 24 + logicalExponent, false);
        } else {
          dataView2.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
        }
      }
    }
  }
  function readFloat16(ui8a2, pos) {
    if (ui8a2.length - pos < 2) {
      throw new Error(`${decodeErrPrefix} not enough data for float16`);
    }
    const half = (ui8a2[pos] << 8) + ui8a2[pos + 1];
    if (half === 31744) {
      return Infinity;
    }
    if (half === 64512) {
      return -Infinity;
    }
    if (half === 32256) {
      return NaN;
    }
    const exp = half >> 10 & 31;
    const mant = half & 1023;
    let val;
    if (exp === 0) {
      val = mant * __pow(2, -24);
    } else if (exp !== 31) {
      val = (mant + 1024) * __pow(2, exp - 25);
    } else {
      val = mant === 0 ? Infinity : NaN;
    }
    return half & 32768 ? -val : val;
  }
  function encodeFloat32(inp) {
    dataView2.setFloat32(0, inp, false);
  }
  function readFloat32(ui8a2, pos) {
    if (ui8a2.length - pos < 4) {
      throw new Error(`${decodeErrPrefix} not enough data for float32`);
    }
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 4).getFloat32(0, false);
  }
  function encodeFloat64(inp) {
    dataView2.setFloat64(0, inp, false);
  }
  function readFloat64(ui8a2, pos) {
    if (ui8a2.length - pos < 8) {
      throw new Error(`${decodeErrPrefix} not enough data for float64`);
    }
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 8).getFloat64(0, false);
  }
  encodeFloat.compareTokens = encodeUint.compareTokens;

  // coldsky/node_modules/cborg/lib/jump.js
  function invalidMinor(data, pos, minor) {
    throw new Error(`${decodeErrPrefix} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);
  }
  function errorer(msg) {
    return () => {
      throw new Error(`${decodeErrPrefix} ${msg}`);
    };
  }
  var jump = [];
  for (let i = 0; i <= 23; i++) {
    jump[i] = invalidMinor;
  }
  jump[24] = decodeUint8;
  jump[25] = decodeUint16;
  jump[26] = decodeUint32;
  jump[27] = decodeUint64;
  jump[28] = invalidMinor;
  jump[29] = invalidMinor;
  jump[30] = invalidMinor;
  jump[31] = invalidMinor;
  for (let i = 32; i <= 55; i++) {
    jump[i] = invalidMinor;
  }
  jump[56] = decodeNegint8;
  jump[57] = decodeNegint16;
  jump[58] = decodeNegint32;
  jump[59] = decodeNegint64;
  jump[60] = invalidMinor;
  jump[61] = invalidMinor;
  jump[62] = invalidMinor;
  jump[63] = invalidMinor;
  for (let i = 64; i <= 87; i++) {
    jump[i] = decodeBytesCompact;
  }
  jump[88] = decodeBytes8;
  jump[89] = decodeBytes16;
  jump[90] = decodeBytes32;
  jump[91] = decodeBytes64;
  jump[92] = invalidMinor;
  jump[93] = invalidMinor;
  jump[94] = invalidMinor;
  jump[95] = errorer("indefinite length bytes/strings are not supported");
  for (let i = 96; i <= 119; i++) {
    jump[i] = decodeStringCompact;
  }
  jump[120] = decodeString8;
  jump[121] = decodeString16;
  jump[122] = decodeString32;
  jump[123] = decodeString64;
  jump[124] = invalidMinor;
  jump[125] = invalidMinor;
  jump[126] = invalidMinor;
  jump[127] = errorer("indefinite length bytes/strings are not supported");
  for (let i = 128; i <= 151; i++) {
    jump[i] = decodeArrayCompact;
  }
  jump[152] = decodeArray8;
  jump[153] = decodeArray16;
  jump[154] = decodeArray32;
  jump[155] = decodeArray64;
  jump[156] = invalidMinor;
  jump[157] = invalidMinor;
  jump[158] = invalidMinor;
  jump[159] = decodeArrayIndefinite;
  for (let i = 160; i <= 183; i++) {
    jump[i] = decodeMapCompact;
  }
  jump[184] = decodeMap8;
  jump[185] = decodeMap16;
  jump[186] = decodeMap32;
  jump[187] = decodeMap64;
  jump[188] = invalidMinor;
  jump[189] = invalidMinor;
  jump[190] = invalidMinor;
  jump[191] = decodeMapIndefinite;
  for (let i = 192; i <= 215; i++) {
    jump[i] = decodeTagCompact;
  }
  jump[216] = decodeTag8;
  jump[217] = decodeTag16;
  jump[218] = decodeTag32;
  jump[219] = decodeTag64;
  jump[220] = invalidMinor;
  jump[221] = invalidMinor;
  jump[222] = invalidMinor;
  jump[223] = invalidMinor;
  for (let i = 224; i <= 243; i++) {
    jump[i] = errorer("simple values are not supported");
  }
  jump[244] = invalidMinor;
  jump[245] = invalidMinor;
  jump[246] = invalidMinor;
  jump[247] = decodeUndefined;
  jump[248] = errorer("simple values are not supported");
  jump[249] = decodeFloat16;
  jump[250] = decodeFloat32;
  jump[251] = decodeFloat64;
  jump[252] = invalidMinor;
  jump[253] = invalidMinor;
  jump[254] = invalidMinor;
  jump[255] = decodeBreak;
  var quick = [];
  for (let i = 0; i < 24; i++) {
    quick[i] = new Token(Type.uint, i, 1);
  }
  for (let i = -1; i >= -24; i--) {
    quick[31 - i] = new Token(Type.negint, i, 1);
  }
  quick[64] = new Token(Type.bytes, new Uint8Array(0), 1);
  quick[96] = new Token(Type.string, "", 1);
  quick[128] = new Token(Type.array, 0, 1);
  quick[160] = new Token(Type.map, 0, 1);
  quick[244] = new Token(Type.false, false, 1);
  quick[245] = new Token(Type.true, true, 1);
  quick[246] = new Token(Type.null, null, 1);

  // coldsky/node_modules/cborg/lib/encode.js
  function makeCborEncoders() {
    const encoders = [];
    encoders[Type.uint.major] = encodeUint;
    encoders[Type.negint.major] = encodeNegint;
    encoders[Type.bytes.major] = encodeBytes;
    encoders[Type.string.major] = encodeString;
    encoders[Type.array.major] = encodeArray;
    encoders[Type.map.major] = encodeMap;
    encoders[Type.tag.major] = encodeTag;
    encoders[Type.float.major] = encodeFloat;
    return encoders;
  }
  var cborEncoders = makeCborEncoders();
  var buf = new Bl();
  var Ref = class _Ref {
    /**
     * @param {object|any[]} obj
     * @param {Reference|undefined} parent
     */
    constructor(obj, parent) {
      this.obj = obj;
      this.parent = parent;
    }
    /**
     * @param {object|any[]} obj
     * @returns {boolean}
     */
    includes(obj) {
      let p = this;
      do {
        if (p.obj === obj) {
          return true;
        }
      } while (p = p.parent);
      return false;
    }
    /**
     * @param {Reference|undefined} stack
     * @param {object|any[]} obj
     * @returns {Reference}
     */
    static createCheck(stack, obj) {
      if (stack && stack.includes(obj)) {
        throw new Error(`${encodeErrPrefix} object contains circular references`);
      }
      return new _Ref(obj, stack);
    }
  };
  var simpleTokens = {
    null: new Token(Type.null, null),
    undefined: new Token(Type.undefined, void 0),
    true: new Token(Type.true, true),
    false: new Token(Type.false, false),
    emptyArray: new Token(Type.array, 0),
    emptyMap: new Token(Type.map, 0)
  };
  var typeEncoders = {
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    number(obj, _typ, _options, _refStack) {
      if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
        return new Token(Type.float, obj);
      } else if (obj >= 0) {
        return new Token(Type.uint, obj);
      } else {
        return new Token(Type.negint, obj);
      }
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    bigint(obj, _typ, _options, _refStack) {
      if (obj >= BigInt(0)) {
        return new Token(Type.uint, obj);
      } else {
        return new Token(Type.negint, obj);
      }
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    Uint8Array(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, obj);
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    string(obj, _typ, _options, _refStack) {
      return new Token(Type.string, obj);
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    boolean(obj, _typ, _options, _refStack) {
      return obj ? simpleTokens.true : simpleTokens.false;
    },
    /**
     * @param {any} _obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    null(_obj, _typ, _options, _refStack) {
      return simpleTokens.null;
    },
    /**
     * @param {any} _obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    undefined(_obj, _typ, _options, _refStack) {
      return simpleTokens.undefined;
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    ArrayBuffer(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, new Uint8Array(obj));
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} _options
     * @param {Reference} [_refStack]
     * @returns {TokenOrNestedTokens}
     */
    DataView(obj, _typ, _options, _refStack) {
      return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
    },
    /**
     * @param {any} obj
     * @param {string} _typ
     * @param {EncodeOptions} options
     * @param {Reference} [refStack]
     * @returns {TokenOrNestedTokens}
     */
    Array(obj, _typ, options, refStack) {
      if (!obj.length) {
        if (options.addBreakTokens === true) {
          return [simpleTokens.emptyArray, new Token(Type.break)];
        }
        return simpleTokens.emptyArray;
      }
      refStack = Ref.createCheck(refStack, obj);
      const entries = [];
      let i = 0;
      for (const e of obj) {
        entries[i++] = objectToTokens(e, options, refStack);
      }
      if (options.addBreakTokens) {
        return [new Token(Type.array, obj.length), entries, new Token(Type.break)];
      }
      return [new Token(Type.array, obj.length), entries];
    },
    /**
     * @param {any} obj
     * @param {string} typ
     * @param {EncodeOptions} options
     * @param {Reference} [refStack]
     * @returns {TokenOrNestedTokens}
     */
    Object(obj, typ, options, refStack) {
      const isMap = typ !== "Object";
      const keys = isMap ? obj.keys() : Object.keys(obj);
      const length6 = isMap ? obj.size : keys.length;
      if (!length6) {
        if (options.addBreakTokens === true) {
          return [simpleTokens.emptyMap, new Token(Type.break)];
        }
        return simpleTokens.emptyMap;
      }
      refStack = Ref.createCheck(refStack, obj);
      const entries = [];
      let i = 0;
      for (const key of keys) {
        entries[i++] = [
          objectToTokens(key, options, refStack),
          objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)
        ];
      }
      sortMapEntries(entries, options);
      if (options.addBreakTokens) {
        return [new Token(Type.map, length6), entries, new Token(Type.break)];
      }
      return [new Token(Type.map, length6), entries];
    }
  };
  typeEncoders.Map = typeEncoders.Object;
  typeEncoders.Buffer = typeEncoders.Uint8Array;
  for (const typ of "Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64".split(" ")) {
    typeEncoders[`${typ}Array`] = typeEncoders.DataView;
  }
  function objectToTokens(obj, options = {}, refStack) {
    const typ = is(obj);
    const customTypeEncoder = options && options.typeEncoders && /** @type {OptionalTypeEncoder} */
    options.typeEncoders[typ] || typeEncoders[typ];
    if (typeof customTypeEncoder === "function") {
      const tokens = customTypeEncoder(obj, typ, options, refStack);
      if (tokens != null) {
        return tokens;
      }
    }
    const typeEncoder = typeEncoders[typ];
    if (!typeEncoder) {
      throw new Error(`${encodeErrPrefix} unsupported type: ${typ}`);
    }
    return typeEncoder(obj, typ, options, refStack);
  }
  function sortMapEntries(entries, options) {
    if (options.mapSorter) {
      entries.sort(options.mapSorter);
    }
  }

  // coldsky/node_modules/cborg/lib/decode.js
  var defaultDecodeOptions = {
    strict: false,
    allowIndefinite: true,
    allowUndefined: true,
    allowBigInt: true
  };
  var Tokeniser = class {
    /**
     * @param {Uint8Array} data
     * @param {DecodeOptions} options
     */
    constructor(data, options = {}) {
      this._pos = 0;
      this.data = data;
      this.options = options;
    }
    pos() {
      return this._pos;
    }
    done() {
      return this._pos >= this.data.length;
    }
    next() {
      const byt = this.data[this._pos];
      let token2 = quick[byt];
      if (token2 === void 0) {
        const decoder2 = jump[byt];
        if (!decoder2) {
          throw new Error(`${decodeErrPrefix} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, "0")})`);
        }
        const minor = byt & 31;
        token2 = decoder2(this.data, this._pos, minor, this.options);
      }
      this._pos += token2.encodedLength;
      return token2;
    }
  };
  var DONE = Symbol.for("DONE");
  var BREAK = Symbol.for("BREAK");
  function tokenToArray(token2, tokeniser, options) {
    const arr = [];
    for (let i = 0; i < token2.value; i++) {
      const value = tokensToObject(tokeniser, options);
      if (value === BREAK) {
        if (token2.value === Infinity) {
          break;
        }
        throw new Error(`${decodeErrPrefix} got unexpected break to lengthed array`);
      }
      if (value === DONE) {
        throw new Error(`${decodeErrPrefix} found array but not enough entries (got ${i}, expected ${token2.value})`);
      }
      arr[i] = value;
    }
    return arr;
  }
  function tokenToMap(token2, tokeniser, options) {
    const useMaps = options.useMaps === true;
    const obj = useMaps ? void 0 : {};
    const m = useMaps ? /* @__PURE__ */ new Map() : void 0;
    for (let i = 0; i < token2.value; i++) {
      const key = tokensToObject(tokeniser, options);
      if (key === BREAK) {
        if (token2.value === Infinity) {
          break;
        }
        throw new Error(`${decodeErrPrefix} got unexpected break to lengthed map`);
      }
      if (key === DONE) {
        throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no key], expected ${token2.value})`);
      }
      if (useMaps !== true && typeof key !== "string") {
        throw new Error(`${decodeErrPrefix} non-string keys not supported (got ${typeof key})`);
      }
      if (options.rejectDuplicateMapKeys === true) {
        if (useMaps && m.has(key) || !useMaps && key in obj) {
          throw new Error(`${decodeErrPrefix} found repeat map key "${key}"`);
        }
      }
      const value = tokensToObject(tokeniser, options);
      if (value === DONE) {
        throw new Error(`${decodeErrPrefix} found map but not enough entries (got ${i} [no value], expected ${token2.value})`);
      }
      if (useMaps) {
        m.set(key, value);
      } else {
        obj[key] = value;
      }
    }
    return useMaps ? m : obj;
  }
  function tokensToObject(tokeniser, options) {
    if (tokeniser.done()) {
      return DONE;
    }
    const token2 = tokeniser.next();
    if (token2.type === Type.break) {
      return BREAK;
    }
    if (token2.type.terminal) {
      return token2.value;
    }
    if (token2.type === Type.array) {
      return tokenToArray(token2, tokeniser, options);
    }
    if (token2.type === Type.map) {
      return tokenToMap(token2, tokeniser, options);
    }
    if (token2.type === Type.tag) {
      if (options.tags && typeof options.tags[token2.value] === "function") {
        const tagged = tokensToObject(tokeniser, options);
        return options.tags[token2.value](tagged);
      }
      throw new Error(`${decodeErrPrefix} tag not supported (${token2.value})`);
    }
    throw new Error("unsupported");
  }
  function decodeFirst(data, options) {
    if (!(data instanceof Uint8Array)) {
      throw new Error(`${decodeErrPrefix} data to decode must be a Uint8Array`);
    }
    options = Object.assign({}, defaultDecodeOptions, options);
    const tokeniser = options.tokenizer || new Tokeniser(data, options);
    const decoded = tokensToObject(tokeniser, options);
    if (decoded === DONE) {
      throw new Error(`${decodeErrPrefix} did not find any content to decode`);
    }
    if (decoded === BREAK) {
      throw new Error(`${decodeErrPrefix} got unexpected break`);
    }
    return [decoded, data.subarray(tokeniser.pos())];
  }
  function decode19(data, options) {
    const [decoded, remainder] = decodeFirst(data, options);
    if (remainder.length > 0) {
      throw new Error(`${decodeErrPrefix} too many terminals, data makes no sense`);
    }
    return decoded;
  }

  // coldsky/node_modules/@ipld/dag-cbor/src/index.js
  var CID_CBOR_TAG = 42;
  function toByteView(buf2) {
    if (buf2 instanceof ArrayBuffer) {
      return new Uint8Array(buf2, 0, buf2.byteLength);
    }
    return buf2;
  }
  function cidEncoder(obj) {
    if (obj.asCID !== obj && obj["/"] !== obj.bytes) {
      return null;
    }
    const cid = CID4.asCID(obj);
    if (!cid) {
      return null;
    }
    const bytes = new Uint8Array(cid.bytes.byteLength + 1);
    bytes.set(cid.bytes, 1);
    return [
      new Token(Type.tag, CID_CBOR_TAG),
      new Token(Type.bytes, bytes)
    ];
  }
  function undefinedEncoder() {
    throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded");
  }
  function numberEncoder(num) {
    if (Number.isNaN(num)) {
      throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");
    }
    if (num === Infinity || num === -Infinity) {
      throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");
    }
    return null;
  }
  var _encodeOptions = {
    float64: true,
    typeEncoders: {
      Object: cidEncoder,
      undefined: undefinedEncoder,
      number: numberEncoder
    }
  };
  var encodeOptions = __spreadProps(__spreadValues({}, _encodeOptions), {
    typeEncoders: __spreadValues({}, _encodeOptions.typeEncoders)
  });
  function cidDecoder(bytes) {
    if (bytes[0] !== 0) {
      throw new Error("Invalid CID for CBOR tag 42; expected leading 0x00");
    }
    return CID4.decode(bytes.subarray(1));
  }
  var _decodeOptions = {
    allowIndefinite: false,
    coerceUndefinedToNull: true,
    allowNaN: false,
    allowInfinity: false,
    allowBigInt: true,
    // this will lead to BigInt for ints outside of
    // safe-integer range, which may surprise users
    strict: true,
    useMaps: false,
    rejectDuplicateMapKeys: true,
    /** @type {import('cborg').TagDecoder[]} */
    tags: []
  };
  _decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
  var decodeOptions = __spreadProps(__spreadValues({}, _decodeOptions), {
    tags: _decodeOptions.tags.slice()
  });
  var decode20 = (data) => decode19(toByteView(data), _decodeOptions);

  // coldsky/node_modules/@ipld/car/src/decoder-common.js
  var import_varint5 = __toESM(require_varint(), 1);
  var CIDV0_BYTES = {
    SHA2_256: 18,
    LENGTH: 32,
    DAG_PB: 112
  };
  var V2_HEADER_LENGTH = (
    /* characteristics */
    16 + 8 + 8 + 8
  );
  function decodeVarint(bytes, seeker) {
    if (!bytes.length) {
      throw new Error("Unexpected end of data");
    }
    const i = import_varint5.default.decode(bytes);
    seeker.seek(
      /** @type {number} */
      import_varint5.default.decode.bytes
    );
    return i;
  }
  function decodeV2Header(bytes) {
    const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    let offset = 0;
    const header = {
      version: 2,
      /** @type {[bigint, bigint]} */
      characteristics: [
        dv.getBigUint64(offset, true),
        dv.getBigUint64(offset += 8, true)
      ],
      dataOffset: Number(dv.getBigUint64(offset += 8, true)),
      dataSize: Number(dv.getBigUint64(offset += 8, true)),
      indexOffset: Number(dv.getBigUint64(offset += 8, true))
    };
    return header;
  }
  function getMultihashLength(bytes) {
    import_varint5.default.decode(bytes);
    const codeLength = (
      /** @type {number} */
      import_varint5.default.decode.bytes
    );
    const length6 = import_varint5.default.decode(bytes.subarray(import_varint5.default.decode.bytes));
    const lengthLength = (
      /** @type {number} */
      import_varint5.default.decode.bytes
    );
    const mhLength = codeLength + lengthLength + length6;
    return mhLength;
  }

  // coldsky/node_modules/@ipld/car/src/header-validator.js
  var Kinds = {
    Null: (
      /** @returns {undefined|null} */
      (obj) => obj === null ? obj : void 0
    ),
    Int: (
      /** @returns {undefined|number} */
      (obj) => Number.isInteger(obj) ? obj : void 0
    ),
    Float: (
      /** @returns {undefined|number} */
      (obj) => typeof obj === "number" && Number.isFinite(obj) ? obj : void 0
    ),
    String: (
      /** @returns {undefined|string} */
      (obj) => typeof obj === "string" ? obj : void 0
    ),
    Bool: (
      /** @returns {undefined|boolean} */
      (obj) => typeof obj === "boolean" ? obj : void 0
    ),
    Bytes: (
      /** @returns {undefined|Uint8Array} */
      (obj) => obj instanceof Uint8Array ? obj : void 0
    ),
    Link: (
      /** @returns {undefined|object} */
      (obj) => obj !== null && typeof obj === "object" && obj.asCID === obj ? obj : void 0
    ),
    List: (
      /** @returns {undefined|Array<any>} */
      (obj) => Array.isArray(obj) ? obj : void 0
    ),
    Map: (
      /** @returns {undefined|object} */
      (obj) => obj !== null && typeof obj === "object" && obj.asCID !== obj && !Array.isArray(obj) && !(obj instanceof Uint8Array) ? obj : void 0
    )
  };
  var Types = {
    "CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)": Kinds.Link,
    "CarV1HeaderOrV2Pragma > roots (anon)": (
      /** @returns {undefined|any} */
      (obj) => {
        if (Kinds.List(obj) === void 0) {
          return void 0;
        }
        for (let i = 0; i < obj.length; i++) {
          let v = obj[i];
          v = Types["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v);
          if (v === void 0) {
            return void 0;
          }
          if (v !== obj[i]) {
            const ret = obj.slice(0, i);
            for (let j = i; j < obj.length; j++) {
              let v2 = obj[j];
              v2 = Types["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v2);
              if (v2 === void 0) {
                return void 0;
              }
              ret.push(v2);
            }
            return ret;
          }
        }
        return obj;
      }
    ),
    Int: Kinds.Int,
    CarV1HeaderOrV2Pragma: (
      /** @returns {undefined|any} */
      (obj) => {
        if (Kinds.Map(obj) === void 0) {
          return void 0;
        }
        const entries = Object.entries(obj);
        let ret = obj;
        let requiredCount = 1;
        for (let i = 0; i < entries.length; i++) {
          const [key, value] = entries[i];
          switch (key) {
            case "roots":
              {
                const v = Types["CarV1HeaderOrV2Pragma > roots (anon)"](obj[key]);
                if (v === void 0) {
                  return void 0;
                }
                if (v !== value || ret !== obj) {
                  if (ret === obj) {
                    ret = {};
                    for (let j = 0; j < i; j++) {
                      ret[entries[j][0]] = entries[j][1];
                    }
                  }
                  ret.roots = v;
                }
              }
              break;
            case "version":
              {
                requiredCount--;
                const v = Types.Int(obj[key]);
                if (v === void 0) {
                  return void 0;
                }
                if (v !== value || ret !== obj) {
                  if (ret === obj) {
                    ret = {};
                    for (let j = 0; j < i; j++) {
                      ret[entries[j][0]] = entries[j][1];
                    }
                  }
                  ret.version = v;
                }
              }
              break;
            default:
              return void 0;
          }
        }
        if (requiredCount > 0) {
          return void 0;
        }
        return ret;
      }
    )
  };
  var Reprs = {
    "CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)": Kinds.Link,
    "CarV1HeaderOrV2Pragma > roots (anon)": (
      /** @returns {undefined|any} */
      (obj) => {
        if (Kinds.List(obj) === void 0) {
          return void 0;
        }
        for (let i = 0; i < obj.length; i++) {
          let v = obj[i];
          v = Reprs["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v);
          if (v === void 0) {
            return void 0;
          }
          if (v !== obj[i]) {
            const ret = obj.slice(0, i);
            for (let j = i; j < obj.length; j++) {
              let v2 = obj[j];
              v2 = Reprs["CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)"](v2);
              if (v2 === void 0) {
                return void 0;
              }
              ret.push(v2);
            }
            return ret;
          }
        }
        return obj;
      }
    ),
    Int: Kinds.Int,
    CarV1HeaderOrV2Pragma: (
      /** @returns {undefined|any} */
      (obj) => {
        if (Kinds.Map(obj) === void 0) {
          return void 0;
        }
        const entries = Object.entries(obj);
        let ret = obj;
        let requiredCount = 1;
        for (let i = 0; i < entries.length; i++) {
          const [key, value] = entries[i];
          switch (key) {
            case "roots":
              {
                const v = Reprs["CarV1HeaderOrV2Pragma > roots (anon)"](value);
                if (v === void 0) {
                  return void 0;
                }
                if (v !== value || ret !== obj) {
                  if (ret === obj) {
                    ret = {};
                    for (let j = 0; j < i; j++) {
                      ret[entries[j][0]] = entries[j][1];
                    }
                  }
                  ret.roots = v;
                }
              }
              break;
            case "version":
              {
                requiredCount--;
                const v = Reprs.Int(value);
                if (v === void 0) {
                  return void 0;
                }
                if (v !== value || ret !== obj) {
                  if (ret === obj) {
                    ret = {};
                    for (let j = 0; j < i; j++) {
                      ret[entries[j][0]] = entries[j][1];
                    }
                  }
                  ret.version = v;
                }
              }
              break;
            default:
              return void 0;
          }
        }
        if (requiredCount > 0) {
          return void 0;
        }
        return ret;
      }
    )
  };
  var CarV1HeaderOrV2Pragma = {
    toTyped: Types.CarV1HeaderOrV2Pragma,
    toRepresentation: Reprs.CarV1HeaderOrV2Pragma
  };

  // coldsky/node_modules/@ipld/car/src/decoder.js
  function readHeader(reader, strictVersion) {
    return __async(this, null, function* () {
      const length6 = decodeVarint(yield reader.upTo(8), reader);
      if (length6 === 0) {
        throw new Error("Invalid CAR header (zero length)");
      }
      const header = yield reader.exactly(length6, true);
      const block = decode20(header);
      if (CarV1HeaderOrV2Pragma.toTyped(block) === void 0) {
        throw new Error("Invalid CAR header format");
      }
      if (block.version !== 1 && block.version !== 2 || strictVersion !== void 0 && block.version !== strictVersion) {
        throw new Error(`Invalid CAR version: ${block.version}${strictVersion !== void 0 ? ` (expected ${strictVersion})` : ""}`);
      }
      if (block.version === 1) {
        if (!Array.isArray(block.roots)) {
          throw new Error("Invalid CAR header format");
        }
        return block;
      }
      if (block.roots !== void 0) {
        throw new Error("Invalid CAR header format");
      }
      const v2Header = decodeV2Header(yield reader.exactly(V2_HEADER_LENGTH, true));
      reader.seek(v2Header.dataOffset - reader.pos);
      const v1Header = yield readHeader(reader, 1);
      return Object.assign(v1Header, v2Header);
    });
  }
  function readCid(reader) {
    return __async(this, null, function* () {
      const first = yield reader.exactly(2, false);
      if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {
        const bytes2 = yield reader.exactly(34, true);
        const multihash2 = decode18(bytes2);
        return CID4.create(0, CIDV0_BYTES.DAG_PB, multihash2);
      }
      const version5 = decodeVarint(yield reader.upTo(8), reader);
      if (version5 !== 1) {
        throw new Error(`Unexpected CID version (${version5})`);
      }
      const codec = decodeVarint(yield reader.upTo(8), reader);
      const bytes = yield reader.exactly(getMultihashLength(yield reader.upTo(8)), true);
      const multihash = decode18(bytes);
      return CID4.create(version5, codec, multihash);
    });
  }
  function readBlockHead(reader) {
    return __async(this, null, function* () {
      const start = reader.pos;
      let length6 = decodeVarint(yield reader.upTo(8), reader);
      if (length6 === 0) {
        throw new Error("Invalid CAR section (zero length)");
      }
      length6 += reader.pos - start;
      const cid = yield readCid(reader);
      const blockLength = length6 - Number(reader.pos - start);
      return { cid, length: length6, blockLength };
    });
  }
  function readBlock(reader) {
    return __async(this, null, function* () {
      const { cid, blockLength } = yield readBlockHead(reader);
      const bytes = yield reader.exactly(blockLength, true);
      return { bytes, cid };
    });
  }
  function readBlockIndex(reader) {
    return __async(this, null, function* () {
      const offset = reader.pos;
      const { cid, length: length6, blockLength } = yield readBlockHead(reader);
      const index = { cid, length: length6, blockLength, offset, blockOffset: reader.pos };
      reader.seek(index.blockLength);
      return index;
    });
  }
  function createDecoder(reader) {
    const headerPromise = (() => __async(this, null, function* () {
      const header = yield readHeader(reader);
      if (header.version === 2) {
        const v1length = reader.pos - header.dataOffset;
        reader = limitReader(reader, header.dataSize - v1length);
      }
      return header;
    }))();
    return {
      header: () => headerPromise,
      blocks() {
        return __asyncGenerator(this, null, function* () {
          yield new __await(headerPromise);
          while ((yield new __await(reader.upTo(8))).length > 0) {
            yield yield new __await(readBlock(reader));
          }
        });
      },
      blocksIndex() {
        return __asyncGenerator(this, null, function* () {
          yield new __await(headerPromise);
          while ((yield new __await(reader.upTo(8))).length > 0) {
            yield yield new __await(readBlockIndex(reader));
          }
        });
      }
    };
  }
  function bytesReader(bytes) {
    let pos = 0;
    return {
      upTo(length6) {
        return __async(this, null, function* () {
          const out = bytes.subarray(pos, pos + Math.min(length6, bytes.length - pos));
          return out;
        });
      },
      exactly(length6, seek = false) {
        return __async(this, null, function* () {
          if (length6 > bytes.length - pos) {
            throw new Error("Unexpected end of data");
          }
          const out = bytes.subarray(pos, pos + length6);
          if (seek) {
            pos += length6;
          }
          return out;
        });
      },
      seek(length6) {
        pos += length6;
      },
      get pos() {
        return pos;
      }
    };
  }
  function chunkReader(readChunk) {
    let pos = 0;
    let have = 0;
    let offset = 0;
    let currentChunk = new Uint8Array(0);
    const read6 = (length6) => __async(this, null, function* () {
      have = currentChunk.length - offset;
      const bufa = [currentChunk.subarray(offset)];
      while (have < length6) {
        const chunk = yield readChunk();
        if (chunk == null) {
          break;
        }
        if (have < 0) {
          if (chunk.length > have) {
            bufa.push(chunk.subarray(-have));
          }
        } else {
          bufa.push(chunk);
        }
        have += chunk.length;
      }
      currentChunk = new Uint8Array(bufa.reduce((p, c) => p + c.length, 0));
      let off = 0;
      for (const b of bufa) {
        currentChunk.set(b, off);
        off += b.length;
      }
      offset = 0;
    });
    return {
      upTo(length6) {
        return __async(this, null, function* () {
          if (currentChunk.length - offset < length6) {
            yield read6(length6);
          }
          return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length6));
        });
      },
      exactly(length6, seek = false) {
        return __async(this, null, function* () {
          if (currentChunk.length - offset < length6) {
            yield read6(length6);
          }
          if (currentChunk.length - offset < length6) {
            throw new Error("Unexpected end of data");
          }
          const out = currentChunk.subarray(offset, offset + length6);
          if (seek) {
            pos += length6;
            offset += length6;
          }
          return out;
        });
      },
      seek(length6) {
        pos += length6;
        offset += length6;
      },
      get pos() {
        return pos;
      }
    };
  }
  function asyncIterableReader(asyncIterable) {
    const iterator = asyncIterable[Symbol.asyncIterator]();
    function readChunk() {
      return __async(this, null, function* () {
        const next2 = yield iterator.next();
        if (next2.done) {
          return null;
        }
        return next2.value;
      });
    }
    return chunkReader(readChunk);
  }
  function limitReader(reader, byteLimit) {
    let bytesRead = 0;
    return {
      upTo(length6) {
        return __async(this, null, function* () {
          let bytes = yield reader.upTo(length6);
          if (bytes.length + bytesRead > byteLimit) {
            bytes = bytes.subarray(0, byteLimit - bytesRead);
          }
          return bytes;
        });
      },
      exactly(length6, seek = false) {
        return __async(this, null, function* () {
          const bytes = yield reader.exactly(length6, seek);
          if (bytes.length + bytesRead > byteLimit) {
            throw new Error("Unexpected end of data");
          }
          if (seek) {
            bytesRead += length6;
          }
          return bytes;
        });
      },
      seek(length6) {
        bytesRead += length6;
        reader.seek(length6);
      },
      get pos() {
        return reader.pos;
      }
    };
  }

  // coldsky/node_modules/@ipld/car/src/reader-browser.js
  var CarReader = class {
    /**
     * @constructs CarReader
     * @param {CarHeader|CarV2Header} header
     * @param {Block[]} blocks
     */
    constructor(header, blocks) {
      this._header = header;
      this._blocks = blocks;
      this._keys = blocks.map((b) => b.cid.toString());
    }
    /**
     * @property
     * @memberof CarReader
     * @instance
     */
    get version() {
      return this._header.version;
    }
    /**
     * Get the list of roots defined by the CAR referenced by this reader. May be
     * zero or more `CID`s.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @returns {Promise<CID[]>}
     */
    getRoots() {
      return __async(this, null, function* () {
        return this._header.roots;
      });
    }
    /**
     * Check whether a given `CID` exists within the CAR referenced by this
     * reader.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @param {CID} key
     * @returns {Promise<boolean>}
     */
    has(key) {
      return __async(this, null, function* () {
        return this._keys.indexOf(key.toString()) > -1;
      });
    }
    /**
     * Fetch a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) from the CAR
     * referenced by this reader matching the provided `CID`. In the case where
     * the provided `CID` doesn't exist within the CAR, `undefined` will be
     * returned.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @param {CID} key
     * @returns {Promise<Block | undefined>}
     */
    get(key) {
      return __async(this, null, function* () {
        const index = this._keys.indexOf(key.toString());
        return index > -1 ? this._blocks[index] : void 0;
      });
    }
    /**
     * Returns a `BlockIterator` (`AsyncIterable<Block>`) that iterates over all
     * of the `Block`s (`{ cid:CID, bytes:Uint8Array }` pairs) contained within
     * the CAR referenced by this reader.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @generator
     * @returns {AsyncGenerator<Block>}
     */
    blocks() {
      return __asyncGenerator(this, null, function* () {
        for (const block of this._blocks) {
          yield block;
        }
      });
    }
    /**
     * Returns a `CIDIterator` (`AsyncIterable<CID>`) that iterates over all of
     * the `CID`s contained within the CAR referenced by this reader.
     *
     * @function
     * @memberof CarReader
     * @instance
     * @async
     * @generator
     * @returns {AsyncGenerator<CID>}
     */
    cids() {
      return __asyncGenerator(this, null, function* () {
        for (const block of this._blocks) {
          yield block.cid;
        }
      });
    }
    /**
     * Instantiate a {@link CarReader} from a `Uint8Array` blob. This performs a
     * decode fully in memory and maintains the decoded state in memory for full
     * access to the data via the `CarReader` API.
     *
     * @async
     * @static
     * @memberof CarReader
     * @param {Uint8Array} bytes
     * @returns {Promise<CarReader>}
     */
    static fromBytes(bytes) {
      return __async(this, null, function* () {
        if (!(bytes instanceof Uint8Array)) {
          throw new TypeError("fromBytes() requires a Uint8Array");
        }
        return decodeReaderComplete(bytesReader(bytes));
      });
    }
    /**
     * Instantiate a {@link CarReader} from a `AsyncIterable<Uint8Array>`, such as
     * a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).
     * This performs a decode fully in memory and maintains the decoded state in
     * memory for full access to the data via the `CarReader` API.
     *
     * Care should be taken for large archives; this API may not be appropriate
     * where memory is a concern or the archive is potentially larger than the
     * amount of memory that the runtime can handle.
     *
     * @async
     * @static
     * @memberof CarReader
     * @param {AsyncIterable<Uint8Array>} asyncIterable
     * @returns {Promise<CarReader>}
     */
    static fromIterable(asyncIterable) {
      return __async(this, null, function* () {
        if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === "function")) {
          throw new TypeError("fromIterable() requires an async iterable");
        }
        return decodeReaderComplete(asyncIterableReader(asyncIterable));
      });
    }
  };
  function decodeReaderComplete(reader) {
    return __async(this, null, function* () {
      const decoder2 = createDecoder(reader);
      const header = yield decoder2.header();
      const blocks = [];
      try {
        for (var iter = __forAwait(decoder2.blocks()), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
          const block = temp.value;
          blocks.push(block);
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield temp.call(iter));
        } finally {
          if (error)
            throw error[0];
        }
      }
      return new CarReader(header, blocks);
    });
  }

  // coldsky/lib/firehose.js
  var knownTypes = [
    "app.bsky.feed.like",
    "app.bsky.feed.post",
    "app.bsky.feed.repost",
    "app.bsky.feed.threadgate",
    "app.bsky.graph.follow",
    "app.bsky.graph.block",
    "app.bsky.graph.list",
    "app.bsky.graph.listitem",
    "app.bsky.actor.profile"
  ];
  var cbor_x_extended = false;
  function firehose() {
    return __asyncGenerator(this, null, function* () {
      ensureCborXExtended();
      const WebSocketImpl = typeof WebSocket === "function" ? WebSocket : (
        /** @type {typeof WebSocket} */
        __require("ws")
      );
      const wsAddress = "wss://bsky.network/xrpc/com.atproto.sync.subscribeRepos";
      const ws = new WebSocketImpl(wsAddress);
      ws.addEventListener("message", handleMessage);
      ws.addEventListener("error", handleError);
      ws.addEventListener("close", handleClose);
      let buf2 = createAwaitPromise();
      let closed = false;
      try {
        while (true) {
          yield new __await(buf2.promise);
          const blocks = buf2.blocks;
          buf2 = createAwaitPromise();
          if (closed) {
            if (blocks.length)
              yield blocks;
            break;
          }
          yield blocks;
        }
      } finally {
        if (!closed) {
          try {
            ws.close();
          } catch (error) {
          }
        }
      }
      function handleClose() {
        closed = true;
        buf2.resolve();
      }
      function handleMessage(event) {
        var _a3, _b;
        const receiveTimestamp = Date.now();
        if (typeof ((_a3 = event.data) == null ? void 0 : _a3.arrayBuffer) === "function")
          return event.data.arrayBuffer().then((arrayBuf) => convertMessageBuf(receiveTimestamp, arrayBuf));
        else if (typeof ((_b = event.data) == null ? void 0 : _b.byteLength) === "number")
          return convertMessageBuf(receiveTimestamp, event.data);
      }
      function convertMessageBuf(receiveTimestamp, messageBuf) {
        return __async(this, null, function* () {
          var _a3, _b;
          const entry = (
            /** @type {any[]} */
            decodeMultiple(new Uint8Array(messageBuf))
          );
          if (!entry || ((_a3 = entry[0]) == null ? void 0 : _a3.op) !== 1)
            return;
          const commit = entry[1];
          if (!commit.blocks)
            return;
          if (!((_b = commit.ops) == null ? void 0 : _b.length))
            return;
          const car = yield CarReader.fromBytes(commit.blocks);
          const blockEntry = {
            receiveTimestamp,
            since: commit.since,
            time: commit.time,
            messages: []
          };
          for (const op of commit.ops) {
            const block = op.cid && (yield car.get(
              /** @type {*} */
              op.cid
            ));
            if (!block)
              continue;
            const record = decode14(block.bytes);
            record.repo = commit.repo;
            record.cid = op.cid && String(op.cid);
            record.path = op.path;
            record.action = op.action;
            let unexpected = op.action !== "create" && op.action !== "update" && op.action !== "delete" || knownTypes.indexOf(record.$type) < 0;
            if (unexpected) {
              if (!blockEntry.unexpected)
                blockEntry.unexpected = [];
              blockEntry.unexpected.push(record);
            } else if (op.action === "delete") {
              if (!blockEntry.deletes)
                blockEntry.deletes = [];
              blockEntry.deletes.push(record);
            } else {
              blockEntry.messages.push(record);
            }
          }
          buf2.blocks.push(blockEntry);
          buf2.resolve();
        });
      }
      function handleError(error) {
        console.error(error);
        const errorText = error.message || "WebSocket error " + error;
        buf2.reject(new Error(errorText));
      }
    });
  }
  function createAwaitPromise() {
    const result = { blocks: [] };
    result.promise = new Promise((resolve, reject) => {
      result.resolve = resolve;
      result.reject = reject;
    });
    return (
      /** @type {*} */
      result
    );
  }
  function ensureCborXExtended() {
    if (cbor_x_extended)
      return;
    addExtension2({
      Class: CID4,
      tag: 42,
      encode: () => {
        throw new Error("cannot encode cids");
      },
      decode: (bytes) => {
        if (bytes[0] !== 0)
          throw new Error("invalid cid for cbor tag 42");
        return CID4.decode(bytes.subarray(1));
      }
    });
    cbor_x_extended = true;
  }

  // coldsky/src/api/akpa.js
  function streamBuffer(callback) {
    return __asyncGenerator(this, null, function* () {
      let finallyTrigger = () => {
        args.isEnded = true;
      };
      let stop = false;
      let buffer2;
      let continueTrigger = () => {
      };
      let continuePromise = new Promise((resolve) => continueTrigger = function continueTriggerInitiallySet() {
        resolve();
      });
      let yieldPassedTrigger = () => {
      };
      let yieldPassedPromise = new Promise((resolve) => yieldPassedTrigger = resolve);
      let rejectError;
      const args = {
        yield: yieldFn,
        reject,
        complete,
        isEnded: false,
        finally: new Promise((resolve) => {
          finallyTrigger = () => {
            args.isEnded = true;
            resolve();
          };
        })
      };
      callback(args);
      try {
        while (!stop) {
          yield new __await(continuePromise);
          if (rejectError)
            throw rejectError.error;
          if (stop)
            return;
          continuePromise = new Promise((resolve) => continueTrigger = function continueTriggerSubsequentlySet() {
            resolve();
          });
          const yieldBuffer = buffer2;
          buffer2 = void 0;
          if (yieldBuffer) {
            yield yieldBuffer;
            const yieldCompleted = yieldPassedTrigger;
            yieldPassedPromise = new Promise((resolve) => yieldPassedTrigger = resolve);
            yieldCompleted();
          }
        }
      } finally {
        finallyTrigger();
      }
      function yieldFn(item, combine3) {
        if (stop) {
          console.error("Cannot yield after complete.");
          return (
            /** @type Promise<void> */
            new Promise((resolve) => resolve())
          );
        }
        if (rejectError) {
          console.error("Cannot yield after reject.");
          return (
            /** @type Promise<void> */
            new Promise((resolve) => resolve())
          );
        }
        if (typeof combine3 === "function") {
          buffer2 = combine3(buffer2, item);
        } else {
          if (!buffer2)
            buffer2 = /** @type {TBuffer} */
            [];
          buffer2.push(item);
        }
        continueTrigger();
        return yieldPassedPromise;
      }
      function reject(error) {
        if (stop) {
          console.error("Cannot reject after complete.");
          return;
        }
        if (rejectError) {
          console.error("Cannot reject after reject.");
          return;
        }
        rejectError = { error };
        args.isEnded = true;
      }
      function complete() {
        stop = true;
        args.isEnded = true;
        continueTrigger();
      }
    });
  }

  // node_modules/fuse.js/dist/fuse.esm.js
  function isArray(value) {
    return !Array.isArray ? getTag(value) === "[object Array]" : Array.isArray(value);
  }
  var INFINITY = 1 / 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    let result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  function toString4(value) {
    return value == null ? "" : baseToString(value);
  }
  function isString(value) {
    return typeof value === "string";
  }
  function isNumber(value) {
    return typeof value === "number";
  }
  function isBoolean(value) {
    return value === true || value === false || isObjectLike(value) && getTag(value) == "[object Boolean]";
  }
  function isObject(value) {
    return typeof value === "object";
  }
  function isObjectLike(value) {
    return isObject(value) && value !== null;
  }
  function isDefined(value) {
    return value !== void 0 && value !== null;
  }
  function isBlank(value) {
    return !value.trim().length;
  }
  function getTag(value) {
    return value == null ? value === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(value);
  }
  var INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
  var LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) => `Invalid value for key ${key}`;
  var PATTERN_LENGTH_TOO_LARGE = (max) => `Pattern length exceeds max of ${max}.`;
  var MISSING_KEY_PROPERTY = (name2) => `Missing ${name2} property in key`;
  var INVALID_KEY_WEIGHT_VALUE = (key) => `Property 'weight' in key '${key}' must be a positive integer`;
  var hasOwn2 = Object.prototype.hasOwnProperty;
  var KeyStore = class {
    constructor(keys) {
      this._keys = [];
      this._keyMap = {};
      let totalWeight = 0;
      keys.forEach((key) => {
        let obj = createKey2(key);
        totalWeight += obj.weight;
        this._keys.push(obj);
        this._keyMap[obj.id] = obj;
        totalWeight += obj.weight;
      });
      this._keys.forEach((key) => {
        key.weight /= totalWeight;
      });
    }
    get(keyId) {
      return this._keyMap[keyId];
    }
    keys() {
      return this._keys;
    }
    toJSON() {
      return JSON.stringify(this._keys);
    }
  };
  function createKey2(key) {
    let path = null;
    let id = null;
    let src6 = null;
    let weight = 1;
    let getFn = null;
    if (isString(key) || isArray(key)) {
      src6 = key;
      path = createKeyPath(key);
      id = createKeyId(key);
    } else {
      if (!hasOwn2.call(key, "name")) {
        throw new Error(MISSING_KEY_PROPERTY("name"));
      }
      const name2 = key.name;
      src6 = name2;
      if (hasOwn2.call(key, "weight")) {
        weight = key.weight;
        if (weight <= 0) {
          throw new Error(INVALID_KEY_WEIGHT_VALUE(name2));
        }
      }
      path = createKeyPath(name2);
      id = createKeyId(name2);
      getFn = key.getFn;
    }
    return { path, id, weight, src: src6, getFn };
  }
  function createKeyPath(key) {
    return isArray(key) ? key : key.split(".");
  }
  function createKeyId(key) {
    return isArray(key) ? key.join(".") : key;
  }
  function get(obj, path) {
    let list = [];
    let arr = false;
    const deepGet = (obj2, path2, index) => {
      if (!isDefined(obj2)) {
        return;
      }
      if (!path2[index]) {
        list.push(obj2);
      } else {
        let key = path2[index];
        const value = obj2[key];
        if (!isDefined(value)) {
          return;
        }
        if (index === path2.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {
          list.push(toString4(value));
        } else if (isArray(value)) {
          arr = true;
          for (let i = 0, len = value.length; i < len; i += 1) {
            deepGet(value[i], path2, index + 1);
          }
        } else if (path2.length) {
          deepGet(value, path2, index + 1);
        }
      }
    };
    deepGet(obj, isString(path) ? path.split(".") : path, 0);
    return arr ? list : list[0];
  }
  var MatchOptions = {
    // Whether the matches should be included in the result set. When `true`, each record in the result
    // set will include the indices of the matched characters.
    // These can consequently be used for highlighting purposes.
    includeMatches: false,
    // When `true`, the matching function will continue to the end of a search pattern even if
    // a perfect match has already been located in the string.
    findAllMatches: false,
    // Minimum number of characters that must be matched before a result is considered a match
    minMatchCharLength: 1
  };
  var BasicOptions = {
    // When `true`, the algorithm continues searching to the end of the input even if a perfect
    // match is found before the end of the same input.
    isCaseSensitive: false,
    // When true, the matching function will continue to the end of a search pattern even if
    includeScore: false,
    // List of properties that will be searched. This also supports nested properties.
    keys: [],
    // Whether to sort the result list, by score
    shouldSort: true,
    // Default sort function: sort by ascending score, ascending index
    sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1
  };
  var FuzzyOptions = {
    // Approximately where in the text is the pattern expected to be found?
    location: 0,
    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match
    // (of both letters and location), a threshold of '1.0' would match anything.
    threshold: 0.6,
    // Determines how close the match must be to the fuzzy location (specified above).
    // An exact letter match which is 'distance' characters away from the fuzzy location
    // would score as a complete mismatch. A distance of '0' requires the match be at
    // the exact location specified, a threshold of '1000' would require a perfect match
    // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.
    distance: 100
  };
  var AdvancedOptions = {
    // When `true`, it enables the use of unix-like search commands
    useExtendedSearch: false,
    // The get function to use when fetching an object's properties.
    // The default will search nested paths *ie foo.bar.baz*
    getFn: get,
    // When `true`, search will ignore `location` and `distance`, so it won't matter
    // where in the string the pattern appears.
    // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score
    ignoreLocation: false,
    // When `true`, the calculation for the relevance score (used for sorting) will
    // ignore the field-length norm.
    // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm
    ignoreFieldNorm: false,
    // The weight to determine how much field length norm effects scoring.
    fieldNormWeight: 1
  };
  var Config = __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, BasicOptions), MatchOptions), FuzzyOptions), AdvancedOptions);
  var SPACE = /[^ ]+/g;
  function norm(weight = 1, mantissa = 3) {
    const cache2 = /* @__PURE__ */ new Map();
    const m = Math.pow(10, mantissa);
    return {
      get(value) {
        const numTokens = value.match(SPACE).length;
        if (cache2.has(numTokens)) {
          return cache2.get(numTokens);
        }
        const norm2 = 1 / Math.pow(numTokens, 0.5 * weight);
        const n = parseFloat(Math.round(norm2 * m) / m);
        cache2.set(numTokens, n);
        return n;
      },
      clear() {
        cache2.clear();
      }
    };
  }
  var FuseIndex = class {
    constructor({
      getFn = Config.getFn,
      fieldNormWeight = Config.fieldNormWeight
    } = {}) {
      this.norm = norm(fieldNormWeight, 3);
      this.getFn = getFn;
      this.isCreated = false;
      this.setIndexRecords();
    }
    setSources(docs = []) {
      this.docs = docs;
    }
    setIndexRecords(records = []) {
      this.records = records;
    }
    setKeys(keys = []) {
      this.keys = keys;
      this._keysMap = {};
      keys.forEach((key, idx) => {
        this._keysMap[key.id] = idx;
      });
    }
    create() {
      if (this.isCreated || !this.docs.length) {
        return;
      }
      this.isCreated = true;
      if (isString(this.docs[0])) {
        this.docs.forEach((doc, docIndex) => {
          this._addString(doc, docIndex);
        });
      } else {
        this.docs.forEach((doc, docIndex) => {
          this._addObject(doc, docIndex);
        });
      }
      this.norm.clear();
    }
    // Adds a doc to the end of the index
    add(doc) {
      const idx = this.size();
      if (isString(doc)) {
        this._addString(doc, idx);
      } else {
        this._addObject(doc, idx);
      }
    }
    // Removes the doc at the specified index of the index
    removeAt(idx) {
      this.records.splice(idx, 1);
      for (let i = idx, len = this.size(); i < len; i += 1) {
        this.records[i].i -= 1;
      }
    }
    getValueForItemAtKeyId(item, keyId) {
      return item[this._keysMap[keyId]];
    }
    size() {
      return this.records.length;
    }
    _addString(doc, docIndex) {
      if (!isDefined(doc) || isBlank(doc)) {
        return;
      }
      let record = {
        v: doc,
        i: docIndex,
        n: this.norm.get(doc)
      };
      this.records.push(record);
    }
    _addObject(doc, docIndex) {
      let record = { i: docIndex, $: {} };
      this.keys.forEach((key, keyIndex) => {
        let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);
        if (!isDefined(value)) {
          return;
        }
        if (isArray(value)) {
          let subRecords = [];
          const stack = [{ nestedArrIndex: -1, value }];
          while (stack.length) {
            const { nestedArrIndex, value: value2 } = stack.pop();
            if (!isDefined(value2)) {
              continue;
            }
            if (isString(value2) && !isBlank(value2)) {
              let subRecord = {
                v: value2,
                i: nestedArrIndex,
                n: this.norm.get(value2)
              };
              subRecords.push(subRecord);
            } else if (isArray(value2)) {
              value2.forEach((item, k) => {
                stack.push({
                  nestedArrIndex: k,
                  value: item
                });
              });
            } else
              ;
          }
          record.$[keyIndex] = subRecords;
        } else if (isString(value) && !isBlank(value)) {
          let subRecord = {
            v: value,
            n: this.norm.get(value)
          };
          record.$[keyIndex] = subRecord;
        }
      });
      this.records.push(record);
    }
    toJSON() {
      return {
        keys: this.keys,
        records: this.records
      };
    }
  };
  function createIndex(keys, docs, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
    const myIndex = new FuseIndex({ getFn, fieldNormWeight });
    myIndex.setKeys(keys.map(createKey2));
    myIndex.setSources(docs);
    myIndex.create();
    return myIndex;
  }
  function parseIndex(data, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
    const { keys, records } = data;
    const myIndex = new FuseIndex({ getFn, fieldNormWeight });
    myIndex.setKeys(keys);
    myIndex.setIndexRecords(records);
    return myIndex;
  }
  function computeScore$1(pattern, {
    errors = 0,
    currentLocation = 0,
    expectedLocation = 0,
    distance = Config.distance,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    const accuracy = errors / pattern.length;
    if (ignoreLocation) {
      return accuracy;
    }
    const proximity = Math.abs(expectedLocation - currentLocation);
    if (!distance) {
      return proximity ? 1 : accuracy;
    }
    return accuracy + proximity / distance;
  }
  function convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {
    let indices = [];
    let start = -1;
    let end = -1;
    let i = 0;
    for (let len = matchmask.length; i < len; i += 1) {
      let match2 = matchmask[i];
      if (match2 && start === -1) {
        start = i;
      } else if (!match2 && start !== -1) {
        end = i - 1;
        if (end - start + 1 >= minMatchCharLength) {
          indices.push([start, end]);
        }
        start = -1;
      }
    }
    if (matchmask[i - 1] && i - start >= minMatchCharLength) {
      indices.push([start, i - 1]);
    }
    return indices;
  }
  var MAX_BITS = 32;
  function search(text, pattern, patternAlphabet, {
    location: location2 = Config.location,
    distance = Config.distance,
    threshold = Config.threshold,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    includeMatches = Config.includeMatches,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    if (pattern.length > MAX_BITS) {
      throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
    }
    const patternLen = pattern.length;
    const textLen = text.length;
    const expectedLocation = Math.max(0, Math.min(location2, textLen));
    let currentThreshold = threshold;
    let bestLocation = expectedLocation;
    const computeMatches = minMatchCharLength > 1 || includeMatches;
    const matchMask = computeMatches ? Array(textLen) : [];
    let index;
    while ((index = text.indexOf(pattern, bestLocation)) > -1) {
      let score = computeScore$1(pattern, {
        currentLocation: index,
        expectedLocation,
        distance,
        ignoreLocation
      });
      currentThreshold = Math.min(score, currentThreshold);
      bestLocation = index + patternLen;
      if (computeMatches) {
        let i = 0;
        while (i < patternLen) {
          matchMask[index + i] = 1;
          i += 1;
        }
      }
    }
    bestLocation = -1;
    let lastBitArr = [];
    let finalScore = 1;
    let binMax = patternLen + textLen;
    const mask = 1 << patternLen - 1;
    for (let i = 0; i < patternLen; i += 1) {
      let binMin = 0;
      let binMid = binMax;
      while (binMin < binMid) {
        const score2 = computeScore$1(pattern, {
          errors: i,
          currentLocation: expectedLocation + binMid,
          expectedLocation,
          distance,
          ignoreLocation
        });
        if (score2 <= currentThreshold) {
          binMin = binMid;
        } else {
          binMax = binMid;
        }
        binMid = Math.floor((binMax - binMin) / 2 + binMin);
      }
      binMax = binMid;
      let start = Math.max(1, expectedLocation - binMid + 1);
      let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;
      let bitArr = Array(finish + 2);
      bitArr[finish + 1] = (1 << i) - 1;
      for (let j = finish; j >= start; j -= 1) {
        let currentLocation = j - 1;
        let charMatch = patternAlphabet[text.charAt(currentLocation)];
        if (computeMatches) {
          matchMask[currentLocation] = +!!charMatch;
        }
        bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;
        if (i) {
          bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
        }
        if (bitArr[j] & mask) {
          finalScore = computeScore$1(pattern, {
            errors: i,
            currentLocation,
            expectedLocation,
            distance,
            ignoreLocation
          });
          if (finalScore <= currentThreshold) {
            currentThreshold = finalScore;
            bestLocation = currentLocation;
            if (bestLocation <= expectedLocation) {
              break;
            }
            start = Math.max(1, 2 * expectedLocation - bestLocation);
          }
        }
      }
      const score = computeScore$1(pattern, {
        errors: i + 1,
        currentLocation: expectedLocation,
        expectedLocation,
        distance,
        ignoreLocation
      });
      if (score > currentThreshold) {
        break;
      }
      lastBitArr = bitArr;
    }
    const result = {
      isMatch: bestLocation >= 0,
      // Count exact matches (those with a score of 0) to be "almost" exact
      score: Math.max(1e-3, finalScore)
    };
    if (computeMatches) {
      const indices = convertMaskToIndices(matchMask, minMatchCharLength);
      if (!indices.length) {
        result.isMatch = false;
      } else if (includeMatches) {
        result.indices = indices;
      }
    }
    return result;
  }
  function createPatternAlphabet(pattern) {
    let mask = {};
    for (let i = 0, len = pattern.length; i < len; i += 1) {
      const char2 = pattern.charAt(i);
      mask[char2] = (mask[char2] || 0) | 1 << len - i - 1;
    }
    return mask;
  }
  var BitapSearch = class {
    constructor(pattern, {
      location: location2 = Config.location,
      threshold = Config.threshold,
      distance = Config.distance,
      includeMatches = Config.includeMatches,
      findAllMatches = Config.findAllMatches,
      minMatchCharLength = Config.minMatchCharLength,
      isCaseSensitive = Config.isCaseSensitive,
      ignoreLocation = Config.ignoreLocation
    } = {}) {
      this.options = {
        location: location2,
        threshold,
        distance,
        includeMatches,
        findAllMatches,
        minMatchCharLength,
        isCaseSensitive,
        ignoreLocation
      };
      this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
      this.chunks = [];
      if (!this.pattern.length) {
        return;
      }
      const addChunk = (pattern2, startIndex) => {
        this.chunks.push({
          pattern: pattern2,
          alphabet: createPatternAlphabet(pattern2),
          startIndex
        });
      };
      const len = this.pattern.length;
      if (len > MAX_BITS) {
        let i = 0;
        const remainder = len % MAX_BITS;
        const end = len - remainder;
        while (i < end) {
          addChunk(this.pattern.substr(i, MAX_BITS), i);
          i += MAX_BITS;
        }
        if (remainder) {
          const startIndex = len - MAX_BITS;
          addChunk(this.pattern.substr(startIndex), startIndex);
        }
      } else {
        addChunk(this.pattern, 0);
      }
    }
    searchIn(text) {
      const { isCaseSensitive, includeMatches } = this.options;
      if (!isCaseSensitive) {
        text = text.toLowerCase();
      }
      if (this.pattern === text) {
        let result2 = {
          isMatch: true,
          score: 0
        };
        if (includeMatches) {
          result2.indices = [[0, text.length - 1]];
        }
        return result2;
      }
      const {
        location: location2,
        distance,
        threshold,
        findAllMatches,
        minMatchCharLength,
        ignoreLocation
      } = this.options;
      let allIndices = [];
      let totalScore = 0;
      let hasMatches = false;
      this.chunks.forEach(({ pattern, alphabet: alphabet2, startIndex }) => {
        const { isMatch, score, indices } = search(text, pattern, alphabet2, {
          location: location2 + startIndex,
          distance,
          threshold,
          findAllMatches,
          minMatchCharLength,
          includeMatches,
          ignoreLocation
        });
        if (isMatch) {
          hasMatches = true;
        }
        totalScore += score;
        if (isMatch && indices) {
          allIndices = [...allIndices, ...indices];
        }
      });
      let result = {
        isMatch: hasMatches,
        score: hasMatches ? totalScore / this.chunks.length : 1
      };
      if (hasMatches && includeMatches) {
        result.indices = allIndices;
      }
      return result;
    }
  };
  var BaseMatch = class {
    constructor(pattern) {
      this.pattern = pattern;
    }
    static isMultiMatch(pattern) {
      return getMatch(pattern, this.multiRegex);
    }
    static isSingleMatch(pattern) {
      return getMatch(pattern, this.singleRegex);
    }
    search() {
    }
  };
  function getMatch(pattern, exp) {
    const matches = pattern.match(exp);
    return matches ? matches[1] : null;
  }
  var ExactMatch = class extends BaseMatch {
    constructor(pattern) {
      super(pattern);
    }
    static get type() {
      return "exact";
    }
    static get multiRegex() {
      return /^="(.*)"$/;
    }
    static get singleRegex() {
      return /^=(.*)$/;
    }
    search(text) {
      const isMatch = text === this.pattern;
      return {
        isMatch,
        score: isMatch ? 0 : 1,
        indices: [0, this.pattern.length - 1]
      };
    }
  };
  var InverseExactMatch = class extends BaseMatch {
    constructor(pattern) {
      super(pattern);
    }
    static get type() {
      return "inverse-exact";
    }
    static get multiRegex() {
      return /^!"(.*)"$/;
    }
    static get singleRegex() {
      return /^!(.*)$/;
    }
    search(text) {
      const index = text.indexOf(this.pattern);
      const isMatch = index === -1;
      return {
        isMatch,
        score: isMatch ? 0 : 1,
        indices: [0, text.length - 1]
      };
    }
  };
  var PrefixExactMatch = class extends BaseMatch {
    constructor(pattern) {
      super(pattern);
    }
    static get type() {
      return "prefix-exact";
    }
    static get multiRegex() {
      return /^\^"(.*)"$/;
    }
    static get singleRegex() {
      return /^\^(.*)$/;
    }
    search(text) {
      const isMatch = text.startsWith(this.pattern);
      return {
        isMatch,
        score: isMatch ? 0 : 1,
        indices: [0, this.pattern.length - 1]
      };
    }
  };
  var InversePrefixExactMatch = class extends BaseMatch {
    constructor(pattern) {
      super(pattern);
    }
    static get type() {
      return "inverse-prefix-exact";
    }
    static get multiRegex() {
      return /^!\^"(.*)"$/;
    }
    static get singleRegex() {
      return /^!\^(.*)$/;
    }
    search(text) {
      const isMatch = !text.startsWith(this.pattern);
      return {
        isMatch,
        score: isMatch ? 0 : 1,
        indices: [0, text.length - 1]
      };
    }
  };
  var SuffixExactMatch = class extends BaseMatch {
    constructor(pattern) {
      super(pattern);
    }
    static get type() {
      return "suffix-exact";
    }
    static get multiRegex() {
      return /^"(.*)"\$$/;
    }
    static get singleRegex() {
      return /^(.*)\$$/;
    }
    search(text) {
      const isMatch = text.endsWith(this.pattern);
      return {
        isMatch,
        score: isMatch ? 0 : 1,
        indices: [text.length - this.pattern.length, text.length - 1]
      };
    }
  };
  var InverseSuffixExactMatch = class extends BaseMatch {
    constructor(pattern) {
      super(pattern);
    }
    static get type() {
      return "inverse-suffix-exact";
    }
    static get multiRegex() {
      return /^!"(.*)"\$$/;
    }
    static get singleRegex() {
      return /^!(.*)\$$/;
    }
    search(text) {
      const isMatch = !text.endsWith(this.pattern);
      return {
        isMatch,
        score: isMatch ? 0 : 1,
        indices: [0, text.length - 1]
      };
    }
  };
  var FuzzyMatch = class extends BaseMatch {
    constructor(pattern, {
      location: location2 = Config.location,
      threshold = Config.threshold,
      distance = Config.distance,
      includeMatches = Config.includeMatches,
      findAllMatches = Config.findAllMatches,
      minMatchCharLength = Config.minMatchCharLength,
      isCaseSensitive = Config.isCaseSensitive,
      ignoreLocation = Config.ignoreLocation
    } = {}) {
      super(pattern);
      this._bitapSearch = new BitapSearch(pattern, {
        location: location2,
        threshold,
        distance,
        includeMatches,
        findAllMatches,
        minMatchCharLength,
        isCaseSensitive,
        ignoreLocation
      });
    }
    static get type() {
      return "fuzzy";
    }
    static get multiRegex() {
      return /^"(.*)"$/;
    }
    static get singleRegex() {
      return /^(.*)$/;
    }
    search(text) {
      return this._bitapSearch.searchIn(text);
    }
  };
  var IncludeMatch = class extends BaseMatch {
    constructor(pattern) {
      super(pattern);
    }
    static get type() {
      return "include";
    }
    static get multiRegex() {
      return /^'"(.*)"$/;
    }
    static get singleRegex() {
      return /^'(.*)$/;
    }
    search(text) {
      let location2 = 0;
      let index;
      const indices = [];
      const patternLen = this.pattern.length;
      while ((index = text.indexOf(this.pattern, location2)) > -1) {
        location2 = index + patternLen;
        indices.push([index, location2 - 1]);
      }
      const isMatch = !!indices.length;
      return {
        isMatch,
        score: isMatch ? 0 : 1,
        indices
      };
    }
  };
  var searchers = [
    ExactMatch,
    IncludeMatch,
    PrefixExactMatch,
    InversePrefixExactMatch,
    InverseSuffixExactMatch,
    SuffixExactMatch,
    InverseExactMatch,
    FuzzyMatch
  ];
  var searchersLen = searchers.length;
  var SPACE_RE = / +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;
  var OR_TOKEN = "|";
  function parseQuery(pattern, options = {}) {
    return pattern.split(OR_TOKEN).map((item) => {
      let query = item.trim().split(SPACE_RE).filter((item2) => item2 && !!item2.trim());
      let results = [];
      for (let i = 0, len = query.length; i < len; i += 1) {
        const queryItem = query[i];
        let found = false;
        let idx = -1;
        while (!found && ++idx < searchersLen) {
          const searcher = searchers[idx];
          let token2 = searcher.isMultiMatch(queryItem);
          if (token2) {
            results.push(new searcher(token2, options));
            found = true;
          }
        }
        if (found) {
          continue;
        }
        idx = -1;
        while (++idx < searchersLen) {
          const searcher = searchers[idx];
          let token2 = searcher.isSingleMatch(queryItem);
          if (token2) {
            results.push(new searcher(token2, options));
            break;
          }
        }
      }
      return results;
    });
  }
  var MultiMatchSet = /* @__PURE__ */ new Set([FuzzyMatch.type, IncludeMatch.type]);
  var ExtendedSearch = class {
    constructor(pattern, {
      isCaseSensitive = Config.isCaseSensitive,
      includeMatches = Config.includeMatches,
      minMatchCharLength = Config.minMatchCharLength,
      ignoreLocation = Config.ignoreLocation,
      findAllMatches = Config.findAllMatches,
      location: location2 = Config.location,
      threshold = Config.threshold,
      distance = Config.distance
    } = {}) {
      this.query = null;
      this.options = {
        isCaseSensitive,
        includeMatches,
        minMatchCharLength,
        findAllMatches,
        ignoreLocation,
        location: location2,
        threshold,
        distance
      };
      this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
      this.query = parseQuery(this.pattern, this.options);
    }
    static condition(_, options) {
      return options.useExtendedSearch;
    }
    searchIn(text) {
      const query = this.query;
      if (!query) {
        return {
          isMatch: false,
          score: 1
        };
      }
      const { includeMatches, isCaseSensitive } = this.options;
      text = isCaseSensitive ? text : text.toLowerCase();
      let numMatches = 0;
      let allIndices = [];
      let totalScore = 0;
      for (let i = 0, qLen = query.length; i < qLen; i += 1) {
        const searchers2 = query[i];
        allIndices.length = 0;
        numMatches = 0;
        for (let j = 0, pLen = searchers2.length; j < pLen; j += 1) {
          const searcher = searchers2[j];
          const { isMatch, indices, score } = searcher.search(text);
          if (isMatch) {
            numMatches += 1;
            totalScore += score;
            if (includeMatches) {
              const type = searcher.constructor.type;
              if (MultiMatchSet.has(type)) {
                allIndices = [...allIndices, ...indices];
              } else {
                allIndices.push(indices);
              }
            }
          } else {
            totalScore = 0;
            numMatches = 0;
            allIndices.length = 0;
            break;
          }
        }
        if (numMatches) {
          let result = {
            isMatch: true,
            score: totalScore / numMatches
          };
          if (includeMatches) {
            result.indices = allIndices;
          }
          return result;
        }
      }
      return {
        isMatch: false,
        score: 1
      };
    }
  };
  var registeredSearchers = [];
  function register(...args) {
    registeredSearchers.push(...args);
  }
  function createSearcher(pattern, options) {
    for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {
      let searcherClass = registeredSearchers[i];
      if (searcherClass.condition(pattern, options)) {
        return new searcherClass(pattern, options);
      }
    }
    return new BitapSearch(pattern, options);
  }
  var LogicalOperator = {
    AND: "$and",
    OR: "$or"
  };
  var KeyType = {
    PATH: "$path",
    PATTERN: "$val"
  };
  var isExpression = (query) => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
  var isPath = (query) => !!query[KeyType.PATH];
  var isLeaf = (query) => !isArray(query) && isObject(query) && !isExpression(query);
  var convertToExplicit = (query) => ({
    [LogicalOperator.AND]: Object.keys(query).map((key) => ({
      [key]: query[key]
    }))
  });
  function parse2(query, options, { auto = true } = {}) {
    const next2 = (query2) => {
      let keys = Object.keys(query2);
      const isQueryPath = isPath(query2);
      if (!isQueryPath && keys.length > 1 && !isExpression(query2)) {
        return next2(convertToExplicit(query2));
      }
      if (isLeaf(query2)) {
        const key = isQueryPath ? query2[KeyType.PATH] : keys[0];
        const pattern = isQueryPath ? query2[KeyType.PATTERN] : query2[key];
        if (!isString(pattern)) {
          throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
        }
        const obj = {
          keyId: createKeyId(key),
          pattern
        };
        if (auto) {
          obj.searcher = createSearcher(pattern, options);
        }
        return obj;
      }
      let node2 = {
        children: [],
        operator: keys[0]
      };
      keys.forEach((key) => {
        const value = query2[key];
        if (isArray(value)) {
          value.forEach((item) => {
            node2.children.push(next2(item));
          });
        }
      });
      return node2;
    };
    if (!isExpression(query)) {
      query = convertToExplicit(query);
    }
    return next2(query);
  }
  function computeScore2(results, { ignoreFieldNorm = Config.ignoreFieldNorm }) {
    results.forEach((result) => {
      let totalScore = 1;
      result.matches.forEach(({ key, norm: norm2, score }) => {
        const weight = key ? key.weight : null;
        totalScore *= Math.pow(
          score === 0 && weight ? Number.EPSILON : score,
          (weight || 1) * (ignoreFieldNorm ? 1 : norm2)
        );
      });
      result.score = totalScore;
    });
  }
  function transformMatches(result, data) {
    const matches = result.matches;
    data.matches = [];
    if (!isDefined(matches)) {
      return;
    }
    matches.forEach((match2) => {
      if (!isDefined(match2.indices) || !match2.indices.length) {
        return;
      }
      const { indices, value } = match2;
      let obj = {
        indices,
        value
      };
      if (match2.key) {
        obj.key = match2.key.src;
      }
      if (match2.idx > -1) {
        obj.refIndex = match2.idx;
      }
      data.matches.push(obj);
    });
  }
  function transformScore(result, data) {
    data.score = result.score;
  }
  function format2(results, docs, {
    includeMatches = Config.includeMatches,
    includeScore = Config.includeScore
  } = {}) {
    const transformers = [];
    if (includeMatches)
      transformers.push(transformMatches);
    if (includeScore)
      transformers.push(transformScore);
    return results.map((result) => {
      const { idx } = result;
      const data = {
        item: docs[idx],
        refIndex: idx
      };
      if (transformers.length) {
        transformers.forEach((transformer) => {
          transformer(result, data);
        });
      }
      return data;
    });
  }
  var Fuse = class {
    constructor(docs, options = {}, index) {
      this.options = __spreadValues(__spreadValues({}, Config), options);
      if (this.options.useExtendedSearch && false) {
        throw new Error(EXTENDED_SEARCH_UNAVAILABLE);
      }
      this._keyStore = new KeyStore(this.options.keys);
      this.setCollection(docs, index);
    }
    setCollection(docs, index) {
      this._docs = docs;
      if (index && !(index instanceof FuseIndex)) {
        throw new Error(INCORRECT_INDEX_TYPE);
      }
      this._myIndex = index || createIndex(this.options.keys, this._docs, {
        getFn: this.options.getFn,
        fieldNormWeight: this.options.fieldNormWeight
      });
    }
    add(doc) {
      if (!isDefined(doc)) {
        return;
      }
      this._docs.push(doc);
      this._myIndex.add(doc);
    }
    remove(predicate = () => false) {
      const results = [];
      for (let i = 0, len = this._docs.length; i < len; i += 1) {
        const doc = this._docs[i];
        if (predicate(doc, i)) {
          this.removeAt(i);
          i -= 1;
          len -= 1;
          results.push(doc);
        }
      }
      return results;
    }
    removeAt(idx) {
      this._docs.splice(idx, 1);
      this._myIndex.removeAt(idx);
    }
    getIndex() {
      return this._myIndex;
    }
    search(query, { limit = -1 } = {}) {
      const {
        includeMatches,
        includeScore,
        shouldSort,
        sortFn,
        ignoreFieldNorm
      } = this.options;
      let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
      computeScore2(results, { ignoreFieldNorm });
      if (shouldSort) {
        results.sort(sortFn);
      }
      if (isNumber(limit) && limit > -1) {
        results = results.slice(0, limit);
      }
      return format2(results, this._docs, {
        includeMatches,
        includeScore
      });
    }
    _searchStringList(query) {
      const searcher = createSearcher(query, this.options);
      const { records } = this._myIndex;
      const results = [];
      records.forEach(({ v: text, i: idx, n: norm2 }) => {
        if (!isDefined(text)) {
          return;
        }
        const { isMatch, score, indices } = searcher.searchIn(text);
        if (isMatch) {
          results.push({
            item: text,
            idx,
            matches: [{ score, value: text, norm: norm2, indices }]
          });
        }
      });
      return results;
    }
    _searchLogical(query) {
      const expression = parse2(query, this.options);
      const evaluate = (node2, item, idx) => {
        if (!node2.children) {
          const { keyId, searcher } = node2;
          const matches = this._findMatches({
            key: this._keyStore.get(keyId),
            value: this._myIndex.getValueForItemAtKeyId(item, keyId),
            searcher
          });
          if (matches && matches.length) {
            return [
              {
                idx,
                item,
                matches
              }
            ];
          }
          return [];
        }
        const res = [];
        for (let i = 0, len = node2.children.length; i < len; i += 1) {
          const child = node2.children[i];
          const result = evaluate(child, item, idx);
          if (result.length) {
            res.push(...result);
          } else if (node2.operator === LogicalOperator.AND) {
            return [];
          }
        }
        return res;
      };
      const records = this._myIndex.records;
      const resultMap = {};
      const results = [];
      records.forEach(({ $: item, i: idx }) => {
        if (isDefined(item)) {
          let expResults = evaluate(expression, item, idx);
          if (expResults.length) {
            if (!resultMap[idx]) {
              resultMap[idx] = { idx, item, matches: [] };
              results.push(resultMap[idx]);
            }
            expResults.forEach(({ matches }) => {
              resultMap[idx].matches.push(...matches);
            });
          }
        }
      });
      return results;
    }
    _searchObjectList(query) {
      const searcher = createSearcher(query, this.options);
      const { keys, records } = this._myIndex;
      const results = [];
      records.forEach(({ $: item, i: idx }) => {
        if (!isDefined(item)) {
          return;
        }
        let matches = [];
        keys.forEach((key, keyIndex) => {
          matches.push(
            ...this._findMatches({
              key,
              value: item[keyIndex],
              searcher
            })
          );
        });
        if (matches.length) {
          results.push({
            idx,
            item,
            matches
          });
        }
      });
      return results;
    }
    _findMatches({ key, value, searcher }) {
      if (!isDefined(value)) {
        return [];
      }
      let matches = [];
      if (isArray(value)) {
        value.forEach(({ v: text, i: idx, n: norm2 }) => {
          if (!isDefined(text)) {
            return;
          }
          const { isMatch, score, indices } = searcher.searchIn(text);
          if (isMatch) {
            matches.push({
              score,
              key,
              value: text,
              idx,
              norm: norm2,
              indices
            });
          }
        });
      } else {
        const { v: text, n: norm2 } = value;
        const { isMatch, score, indices } = searcher.searchIn(text);
        if (isMatch) {
          matches.push({ score, key, value: text, norm: norm2, indices });
        }
      }
      return matches;
    }
  };
  Fuse.version = "6.6.2";
  Fuse.createIndex = createIndex;
  Fuse.parseIndex = parseIndex;
  Fuse.config = Config;
  {
    Fuse.parseQuery = parse2;
  }
  {
    register(ExtendedSearch);
  }

  // src/api/record-cache.js
  var db = new import_wrapper_default("atproto-cache");
  db.version(5).stores({
    records: "uri, did, cid, time, *w",
    accounts: "did, handle, *w"
  });
  var publicAgent = new ColdskyAgent({
    service: BSKY_PUBLIC_URL
  });
  function resolveHandleOrDIDToProfile(handleOrDID) {
    return __asyncGenerator(this, null, function* () {
      let fullyResolved = false;
      const resolvedViaRequestPromise = resolveProfileViaRequest(handleOrDID);
      resolvedViaRequestPromise.then(() => fullyResolved = true);
      const cacheByDIDPromise = !likelyDID(handleOrDID) ? void 0 : resolveDIDFromCache(handleOrDID);
      const cacheByHandlePromise = resolveHandleFromCache(handleOrDID);
      const raceCachePromise = !cacheByDIDPromise ? cacheByHandlePromise : new Promise(
        /** @param {(value: ProfileView) => void} resolve */
        (resolve) => {
          cacheByDIDPromise.then(resolve);
          cacheByHandlePromise.then(resolve);
        }
      );
      const fastCacheResponse = yield new __await(Promise.race([
        raceCachePromise,
        resolvedViaRequestPromise,
        new Promise((resolve) => setTimeout(resolve, 100))
      ]));
      if (fastCacheResponse)
        yield fastCacheResponse;
      if (!fullyResolved) {
        const fullResponse = yield new __await(resolvedViaRequestPromise);
        yield fullResponse;
      }
    });
  }
  function resolveProfileViaRequest(handleOrDID) {
    return __async(this, null, function* () {
      const actorParam = likelyDID(handleOrDID) ? unwrapShortDID(handleOrDID) : unwrapShortHandle(handleOrDID);
      const profile = yield fetch(`https://public.api.bsky.app/xrpc/app.bsky.actor.getProfile?actor=${actorParam}`).then((x) => x.json());
      storeAccountToCache(profile);
      return profile;
    });
  }
  function resolveHandleFromCache(handle) {
    return __async(this, null, function* () {
      const matchByHandle = yield db.accounts.where("handle").equals(unwrapShortHandle(handle)).first();
      return matchByHandle;
    });
  }
  function resolveDIDFromCache(did) {
    return __async(this, null, function* () {
      const matchByDID = yield db.accounts.where("did").equals(unwrapShortDID(did)).first();
      return matchByDID;
    });
  }
  function searchAccounts(text) {
    const normalizedText = (text == null ? void 0 : text.trim()) || "";
    if (!normalizedText)
      return function nothing() {
        return __asyncGenerator(this, null, function* () {
        });
      }();
    const wholeTextSearchTypeahedPromise = directSearchAccountsTypeahead(normalizedText);
    const wholeTextSearchFullPromise = directSearchAccountsFull(normalizedText);
    const words = breakIntoWords(normalizedText);
    const wordSearchTypeaheadPromises = words.map((word) => directSearchAccountsTypeahead(word));
    const wordSearchFullPromises = words.map((word) => directSearchAccountsFull(word));
    const cachedResults = searchAccountsFromCache(normalizedText);
    const storeNewAccountsByShortDID = /* @__PURE__ */ new Map();
    let storeNewAccoutsDebounce = 0;
    return streamBuffer(
      /**
       * 
       * @param {import('../../coldsky/src/api/akpa').StreamParameters<
       *  (ProfileView | ProfileViewBasic)[],
       *  (ProfileView | ProfileViewBasic)[]>} streaming 
       */
      (streaming) => __async(this, null, function* () {
        const results = [];
        const byShortDID = {};
        const waitFor = [];
        waitFor.push(awaitPromiseAndMerge(wholeTextSearchTypeahedPromise));
        waitFor.push(awaitPromiseAndMerge(wholeTextSearchFullPromise));
        for (const promise of wordSearchTypeaheadPromises) {
          waitFor.push(awaitPromiseAndMerge(promise));
        }
        for (const promise of wordSearchFullPromises) {
          waitFor.push(awaitPromiseAndMerge(promise));
        }
        for (const promise of cachedResults) {
          waitFor.push(awaitPromiseAndMerge(promise));
        }
        yield Promise.all(waitFor);
        streaming.complete();
        function awaitPromiseAndMerge(promise) {
          return __async(this, null, function* () {
            const result = yield promise;
            let anyNew = false;
            for (const entry of result) {
              const shortDID = shortenDID(entry.did);
              const existing = byShortDID[shortDID];
              if (!existing || !existing.description && entry.description) {
                byShortDID[shortDID] = entry;
                if (!entry.w) {
                  storeNewAccountsByShortDID.set(shortDID, entry);
                  clearTimeout(storeNewAccoutsDebounce);
                  storeNewAccoutsDebounce = setTimeout(propagateStoreNewAccountsToCache, 1e3);
                }
              }
              if (!existing) {
                results.push(entry);
                anyNew = true;
              }
            }
            if (anyNew) {
              sortResultsByText(results, text, words);
            }
            streaming.yield(results, (buf2) => buf2 ? buf2.concat(results) : results);
          });
        }
      })
    );
    function propagateStoreNewAccountsToCache() {
      const accounts = Array.from(storeNewAccountsByShortDID.values()).map((ac) => {
        const wordLeads = populateWordLeads(ac.displayName, []);
        populateWordLeads(ac.handle, wordLeads);
        populateWordLeads(ac.description, wordLeads);
        ac.w = wordLeads;
        return ac;
      });
      storeNewAccountsByShortDID.clear();
      db.accounts.bulkPut(accounts);
      console.log("adding searched accounts ", accounts.length, " to cache ", accounts);
    }
  }
  var accountsToStoreInCacheByShortDID = /* @__PURE__ */ new Map();
  var debounceAccountsToStoreInCache = 0;
  var maxDebounceAccountsToStoreInCache = 0;
  function storeAccountToCache(account) {
    const shortDID = shortenDID(account.did);
    const existing = accountsToStoreInCacheByShortDID.get(shortDID);
    let shouldStore = !existing;
    if (existing) {
      const indexed = account.indexedAt && new Date(account.indexedAt).getTime();
      const existingIndexed = existing.indexedAt && new Date(existing.indexedAt).getTime();
      if (!existingIndexed && indexed)
        shouldStore = true;
      else if (existingIndexed && indexed && indexed > existingIndexed)
        shouldStore = true;
    }
    if (!shouldStore)
      return;
    accountsToStoreInCacheByShortDID.set(shortDID, account);
    if (!maxDebounceAccountsToStoreInCache)
      maxDebounceAccountsToStoreInCache = setTimeout(cacheAccountsNow, 3100);
    clearTimeout(debounceAccountsToStoreInCache);
    debounceAccountsToStoreInCache = setTimeout(cacheAccountsNow, 300);
  }
  var postsToStoreInCacheByURI = /* @__PURE__ */ new Map();
  var debouncePostsToStoreInCache = 0;
  var maxDebouncePostsToStoreInCache = 0;
  function storePostIndexToCache(post) {
    const existing = postsToStoreInCacheByURI.get(post.uri);
    let shouldStore = !existing;
    if (existing) {
      const indexed = post.indexedAt && new Date(post.indexedAt).getTime();
      const existingIndexed = existing.indexedAt && new Date(existing.indexedAt).getTime();
      if (!existingIndexed && indexed)
        shouldStore = true;
      else if (existingIndexed && indexed && indexed > existingIndexed)
        shouldStore = true;
    }
    if (!shouldStore)
      return;
    postsToStoreInCacheByURI.set(post.uri, post);
    if (!maxDebouncePostsToStoreInCache)
      maxDebouncePostsToStoreInCache = setTimeout(cachePostsNow, 3100);
    clearTimeout(debouncePostsToStoreInCache);
    debouncePostsToStoreInCache = setTimeout(cachePostsNow, 300);
  }
  function cachePostsNow() {
    clearTimeout(maxDebouncePostsToStoreInCache);
    maxDebouncePostsToStoreInCache = 0;
    clearTimeout(debouncePostsToStoreInCache);
    debouncePostsToStoreInCache = 0;
    const posts = Array.from(postsToStoreInCacheByURI.values()).map((p) => {
      const wordLeads = [];
      const text = collectPostText(p.record, []);
      for (const textChunk of text) {
        populateWordLeads(textChunk, wordLeads);
      }
      return {
        uri: p.uri,
        did: p.author.did,
        cid: p.cid,
        time: p.record.createdAt && new Date(p.record.createdAt).getTime(),
        text,
        w: wordLeads
      };
    });
    postsToStoreInCacheByURI.clear();
    if (posts.length) {
      db.records.bulkPut(posts);
      console.log("adding records ", posts.length, " to cache ", posts);
    }
  }
  function collectPostText(post, textArray) {
    var _a3, _b, _c;
    if (!post)
      return textArray;
    if (post.text)
      textArray.push(post.text);
    if (post.embed) {
      if ((_a3 = post.embed.images) == null ? void 0 : _a3.length) {
        for (const img of post.embed.images) {
          if (img.alt)
            textArray.push(img.alt);
          if (img.title)
            textArray.push(img.title);
        }
      }
      if ((_c = (_b = post.embed.media) == null ? void 0 : _b.images) == null ? void 0 : _c.length) {
        for (const img of post.embed.media.images) {
          if (img.alt)
            textArray.push(img.alt);
          if (img.title)
            textArray.push(img.title);
        }
      }
    }
    return textArray;
  }
  function cacheAccountsNow() {
    clearTimeout(maxDebounceAccountsToStoreInCache);
    maxDebounceAccountsToStoreInCache = 0;
    clearTimeout(debounceAccountsToStoreInCache);
    debounceAccountsToStoreInCache = 0;
    const accounts = Array.from(accountsToStoreInCacheByShortDID.values()).map((ac) => {
      const wordLeads = [];
      for (const w of breakIntoWords(ac.displayName + " " + ac.handle + " " + ac.description)) {
        const wLead = w.slice(0, 3).toLowerCase();
        if (wordLeads.indexOf(wLead) < 0)
          wordLeads.push(wLead);
      }
      ac.w = wordLeads;
      return ac;
    });
    accountsToStoreInCacheByShortDID.clear();
    if (accounts.length) {
      db.accounts.bulkPut(accounts);
      console.log("adding accounts ", accounts.length, " to cache ", accounts);
    }
  }
  function searchAccountsFromCache(text) {
    const wordLeads = populateWordLeads(text, []);
    return wordLeads.map((wLead) => __async(this, null, function* () {
      const dbMatches = yield db.accounts.where("w").equals(wLead).toArray();
      return dbMatches;
    }));
  }
  function sortResultsByText(results, text, words) {
    const resultsWithHandleJoin = results.map((r2) => {
      const withHandleJoin = __spreadProps(__spreadValues({}, r2), { handlejoin: (r2.handle || "").replace(/[^\w\d]+/g, "").toLowerCase() });
      return withHandleJoin;
    });
    const fuseKeyFields = new Fuse(resultsWithHandleJoin, {
      keys: ["handle", "displayName", "description", "handlejoin"],
      findAllMatches: true,
      includeScore: true
    });
    const fuseAll = new Fuse(results, {
      keys: ["handle", "displayName", "description"],
      findAllMatches: true,
      includeScore: true
    });
    const keyFieldsResults = fuseKeyFields.search(text);
    const allResults = fuseAll.search(text);
    const keyRankByShortDID = {};
    for (const bestResult of keyFieldsResults) {
      if (bestResult.score) {
        const shortDID = shortenDID(bestResult.item.did);
        keyRankByShortDID[shortDID] = bestResult.score;
      }
    }
    const secondaryRankByShortDID = {};
    for (const bestResult of allResults) {
      if (bestResult.score) {
        const shortDID = shortenDID(bestResult.item.did);
        secondaryRankByShortDID[shortDID] = bestResult.score;
      }
    }
    results.sort((p1, p2) => {
      const shortDID1 = shortenDID(p1.did);
      const shortDID2 = shortenDID(p2.did);
      const keyRank1 = keyRankByShortDID[shortDID1];
      const keyRank2 = keyRankByShortDID[shortDID2];
      if (keyRank1 >= 0 && keyRank2 >= 0) {
        if (keyRank1 !== keyRank2)
          return keyRank1 - keyRank2;
      }
      const secondaryRank1 = secondaryRankByShortDID[shortDID1];
      const secondaryRank2 = secondaryRankByShortDID[shortDID2];
      if (secondaryRank1 >= 0 && secondaryRank2 >= 0) {
        if (secondaryRank1 !== secondaryRank2)
          return secondaryRank1 - secondaryRank2;
      }
      const hasRank1 = keyRank1 >= 0 || secondaryRank1 >= 0;
      const hasRank2 = keyRank2 >= 0 || secondaryRank2 >= 0;
      return (hasRank1 ? 0 : 1) - (hasRank2 ? 0 : 1);
    });
  }
  var NOT_WORD_CHARACTERS_REGEX = /[^\w\d]+/g;
  function breakIntoWords(text) {
    const words = text.split(NOT_WORD_CHARACTERS_REGEX);
    const result = [];
    for (const word of words) {
      if (word.length >= 3 && word !== text)
        result.push(word);
    }
    return result;
  }
  function directSearchAccountsTypeahead(searchText) {
    return __async(this, null, function* () {
      var _a3;
      const result = (_a3 = (yield publicAgent.searchActorsTypeahead({
        q: searchText,
        limit: 100
      })).data) == null ? void 0 : _a3.actors;
      return result;
    });
  }
  function directSearchAccountsFull(searchText, limit) {
    return __async(this, null, function* () {
      var _a3;
      const result = (_a3 = (yield publicAgent.searchActors({
        q: searchText,
        limit: limit || 100
      })).data) == null ? void 0 : _a3.actors;
      return result;
    });
  }
  function populateWordLeads(text, result) {
    if (!text)
      return result;
    const words = text.split(NOT_WORD_CHARACTERS_REGEX);
    for (const word of words) {
      if (word.length < 3)
        continue;
      const wLead = word.slice(0, 3).toLowerCase();
      if (result.indexOf(wLead) < 0)
        result.push(wLead);
    }
    return result;
  }

  // src/api/firehose-threads.js
  function firehoseThreads() {
    return streamBuffer(
      /**
       * @param {import('../../coldsky/src/api/akpa').StreamParameters<ThreadViewPost, ThreadViewPost[]>} streaming 
       */
      (streaming) => __async(this, null, function* () {
        const publicAgent2 = new ColdskyAgent({
          service: BSKY_PUBLIC_URL
        });
        const getPostThreadCached = throttledAsyncCache(
          (uri) => {
            if (streaming.isEnded)
              return;
            return publicAgent2.getPostThread({ uri }).then((res) => {
              var _a3;
              return (_a3 = res == null ? void 0 : res.data) == null ? void 0 : _a3.thread;
            });
          }
        );
        keepMonitoringFirehose();
        yield streaming.finally;
        console.log("firehoseThreads ended");
        function keepMonitoringFirehose() {
          return __async(this, null, function* () {
            try {
              for (var iter = __forAwait(firehose()), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
                const chunk = temp.value;
                if (streaming.isEnded)
                  break;
                for (const entry of chunk) {
                  for (const msg of entry.messages) {
                    switch (msg.$type) {
                      case "app.bsky.feed.like":
                        handleLike(msg);
                        continue;
                      case "app.bsky.feed.post":
                        handlePost(msg);
                        continue;
                      case "app.bsky.feed.repost":
                        handleRepost(msg);
                        continue;
                    }
                  }
                }
              }
            } catch (temp) {
              error = [temp];
            } finally {
              try {
                more && (temp = iter.return) && (yield temp.call(iter));
              } finally {
                if (error)
                  throw error[0];
              }
            }
          });
        }
        function yieldThread(thread) {
          cacheAllMentionedAccounts(thread);
          streaming.yield(thread, (buf2) => {
            if (!buf2)
              return [thread];
            buf2.push(thread);
            return buf2;
          });
        }
        function cacheAllMentionedAccounts(thread) {
          const seenPosts = /* @__PURE__ */ new Set();
          walkThread(thread);
          function walkThread(thread2) {
            var _a3;
            if (!(thread2 == null ? void 0 : thread2.post) || seenPosts.has((_a3 = thread2 == null ? void 0 : thread2.post) == null ? void 0 : _a3.uri))
              return;
            storeAccountToCache(thread2.post.author);
            storePostIndexToCache(thread2.post);
            if (thread2.replies) {
              for (const reply of thread2.replies) {
                walkThread(reply);
              }
            }
            if (thread2.parent) {
              walkThread(thread2.parent);
            }
          }
        }
        function handleLike(msg) {
          return __async(this, null, function* () {
            const thread = yield getPostThreadCached(msg.subject.uri);
            if (!thread || thread.blocked || thread.notFound)
              return;
            yieldThread(thread);
          });
        }
        function handlePost(msg) {
          return __async(this, null, function* () {
            const thread = yield getPostThreadCached("at://" + msg.repo + "/" + msg.path);
            if (!thread || thread.blocked || thread.notFound)
              return;
            yieldThread(thread);
          });
        }
        function handleRepost(msg) {
        }
      })
    );
  }

  // src/api/hash.js
  function calcHash(value) {
    if (!value)
      return 13;
    return hashString(String(value));
  }
  function hashString(str) {
    let hash2 = 19;
    for (let i = 0; i < str.length; i++) {
      let char2 = str.charCodeAt(i);
      hash2 = (hash2 << 5) - hash2 + char2;
      hash2 = hash2 & hash2;
    }
    return hash2;
  }
  function nextRandom(rnd) {
    if (!rnd)
      rnd = 251;
    if (rnd > 1)
      rnd = Math.abs(rnd + 1 / rnd);
    if (rnd > 10)
      rnd = (rnd / 10 - Math.floor(rnd / 10)) * 10;
    rnd = Math.pow(10, rnd + 0.3498572938623);
    rnd = rnd - Math.floor(rnd);
    return rnd;
  }

  // node_modules/@mui/icons-material/esm/FavoriteBorder.js
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var FavoriteBorder_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", {
    d: "M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3m-4.4 15.55-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05"
  }), "FavoriteBorder");

  // coldsky/src/api/forAwait.js
  var import_react6 = __toESM(require_react());
  function forAwait(from7, derive) {
    const [state, setState] = (0, import_react6.useState)(initAwaitState);
    state.reactSetState = setState;
    (0, import_react6.useEffect)(state.effectMount, []);
    return (
      /** @type {*} */
      state.hookUse(from7, derive)
    );
  }
  function initAwaitState() {
    return new AwaitState();
  }
  var AwaitState = class _AwaitState {
    constructor() {
      /** @type {TRun<TFrom, TTo>} */
      __publicField(this, "run");
      /** @type {boolean} */
      __publicField(this, "withinHook");
      /** @type {AwaitState | undefined} */
      __publicField(this, "repalcedWith");
      /**
       * @param {TFrom} from
       * @param {TSourceOf<TFrom, TTo>} derive
       * @returns {TTo | undefined}
       */
      __publicField(this, "hookUse", (from7, derive) => {
        this.withinHook = true;
        try {
          if (this.repalcedWith)
            return this.repalcedWith.hookUse(from7, derive);
          if (!this.run || this.run.from !== from7) {
            if (this.run)
              this.finishExistingIteration();
            this.initializeNewValues(from7, derive);
          } else {
            this.nudgeContinuationFromHook();
          }
          return this.run.current;
        } finally {
          this.withinHook = false;
        }
      });
      __publicField(this, "effectMount", () => {
        if (this.repalcedWith)
          return this.repalcedWith.effectMount();
        this.nudgeContinuationFromHook();
        return this.effectUnmount;
      });
      __publicField(this, "effectUnmount", () => {
        if (this.repalcedWith)
          return this.repalcedWith.effectUnmount();
        this.run.finished = true;
        this.finishExistingIteration();
      });
      __publicField(this, "iterationCompletedNaturally", () => {
        this.finishExistingIteration();
      });
    }
    reactSetState(setState) {
    }
    /**
     * @param {TFrom} from
     * @param {TSourceOf<TFrom, TTo>} derive
     */
    initializeNewValues(from7, derive) {
      this.run = {
        from: from7,
        derive,
        iterators: /* @__PURE__ */ new Set()
      };
      this.continueWithChecked(from7, this.run, derive, this.iterationCompletedNaturally);
    }
    finishExistingIteration() {
      var _a3;
      const iterators = Array.from(this.run.iterators);
      this.run.iterators.clear();
      for (const iter of iterators) {
        try {
          (_a3 = iter.return) == null ? void 0 : _a3.call(iter);
        } catch (error) {
          console.warn("DEBUG: error while stopping iterator", error);
        }
      }
    }
    nudgeContinuationFromHook() {
      var _a3;
      if (!((_a3 = this.run.nudgeCallbacks) == null ? void 0 : _a3.length))
        return;
      const nudge = this.run.nudgeCallbacks.pop();
      if (typeof nudge === "function")
        nudge();
      if (!this.run.nudgeCallbacks.length)
        this.run.nudgeCallbacks = void 0;
    }
    /**
     * @param {TFrom} from
     * @param {TRun<TFrom, TTo>} run
     * @param {TSourceOf<TFrom, any>} derive
     * @param {() => void} completedNaturally
     */
    continueWithChecked(from7, run, derive, completedNaturally) {
      if (!this.canContinue(run))
        return;
      if (derive) {
        if (typeof derive === "function")
          return this.continueWithFunction(from7, run, derive, completedNaturally);
        if (isPromise(derive))
          return this.continueWithPromise(from7, run, derive, completedNaturally);
        if (Array.isArray(derive))
          return this.continueWithArray(from7, run, derive, completedNaturally);
        if (isIterable(derive))
          return this.continueWithIterable(from7, run, derive, completedNaturally);
        if (isAsyncIterable(derive))
          return this.continueWithAsyncIterable(from7, run, derive, completedNaturally);
      }
      this.continueWithScalar(from7, run, derive);
      completedNaturally();
    }
    /**
     * @param {TFrom} from
     * @param {TRun<TFrom, TTo>} run
     * @param {TTo} value
     */
    continueWithScalar(from7, run, value) {
      this.run.current = value;
      if (!this.withinHook) {
        this.repalcedWith = new _AwaitState();
        this.repalcedWith.run = this.run;
        this.repalcedWith.reactSetState = this.reactSetState;
        this.reactSetState(this.repalcedWith);
      }
    }
    /**
     * @param {TFrom} from
     * @param {TRun<TFrom, TTo>} run
     * @param {Function} func
     * @param {() => void} completedNaturally
     */
    continueWithFunction(from7, run, func, completedNaturally) {
      try {
        const value = func(from7);
        this.continueWithChecked(from7, run, value, completedNaturally);
      } catch (error) {
        this.continueWithError(error);
      }
    }
    /**
     * @param {Error} error
     */
    continueWithError(error) {
      this.run.error = error;
      this.run.finished = true;
      this.finishExistingIteration();
    }
    /**
     * @param {TFrom} from
     * @param {TRun<TFrom, TTo>} run
     * @param {Promise<any>} promise
     * @param {() => void} completedNaturally
     */
    continueWithPromise(from7, run, promise, completedNaturally) {
      promise.then(
        (result) => {
          if (!this.canContinue(run))
            return;
          this.continueWithChecked(from7, run, result, completedNaturally);
        },
        (error) => {
          if (!this.canContinue(run))
            return;
          this.continueWithError(error);
        }
      );
    }
    /**
    * @param {TFrom} from
    * @param {TRun<TFrom, TTo>} run
    * @param {any[]} array
    * @param {() => void} completedNaturally
    */
    continueWithArray(from7, run, array, completedNaturally) {
      this.continueWithIterable(from7, run, array, completedNaturally);
    }
    /**
     * @param {TFrom} from
     * @param {TRun<TFrom, TTo>} run
     * @param {Iterable<any>} iterable
     * @param {() => void} completedNaturally
     */
    continueWithIterable(from7, run, iterable, completedNaturally) {
      let iterator;
      try {
        iterator = iterable[Symbol.iterator]();
      } catch (error) {
        return this.continueWithError(error);
      }
      if (!iterator)
        return completedNaturally();
      this.run.iterators.add(iterator);
      this.continueWithIterator(from7, run, iterator, () => {
        this.run.iterators.delete(iterator);
        completedNaturally();
      });
    }
    /**
    * @param {TFrom} from
    * @param {TRun<TFrom, TTo>} run
    * @param {Iterator<any>} iterator
    * @param {() => void} completedNaturally
    */
    continueWithIterator(from7, run, iterator, completedNaturally) {
      try {
        const iteratorResult = iterator.next();
        if (iteratorResult.done) {
          if (iteratorResult.value !== void 0)
            this.continueWithChecked(from7, run, iteratorResult.value, completedNaturally);
        } else {
          this.continueWithChecked(
            from7,
            run,
            iteratorResult.value,
            () => {
              this.continueWhenever(() => {
                this.continueWithIterator(from7, run, iterator, completedNaturally);
              });
            }
          );
        }
      } catch (error) {
        this.continueWithError(error);
      }
    }
    /**
     * @param {TFrom} from
     * @param {TRun<TFrom, TTo>} run
     * @param {AsyncIterable<any>} asyncIterable
     * @param {() => void} completedNaturally
     */
    continueWithAsyncIterable(from7, run, asyncIterable, completedNaturally) {
      let asyncIterator;
      try {
        asyncIterator = asyncIterable[Symbol.asyncIterator]();
      } catch (error) {
        return this.continueWithError(error);
      }
      if (!asyncIterator)
        return completedNaturally();
      this.run.iterators.add(asyncIterator);
      this.continueWithAsyncIterator(from7, run, asyncIterator, () => {
        this.run.iterators.delete(asyncIterator);
        completedNaturally();
      });
    }
    /**
    * @param {TFrom} from
    * @param {TRun<TFrom, TTo>} run
    * @param {AsyncIterator<any>} asyncIterator
    * @param {() => void} completedNaturally
    */
    continueWithAsyncIterator(from7, run, asyncIterator, completedNaturally) {
      return __async(this, null, function* () {
        try {
          const iteratorResult = yield asyncIterator.next();
          if (iteratorResult.done) {
            if (iteratorResult.value !== void 0)
              this.continueWithChecked(from7, run, iteratorResult.value, completedNaturally);
          } else {
            this.continueWithChecked(
              from7,
              run,
              iteratorResult.value,
              () => {
                this.continueWhenever(() => {
                  this.continueWithAsyncIterator(from7, run, asyncIterator, completedNaturally);
                });
              }
            );
          }
        } catch (error) {
          this.continueWithError(error);
        }
      });
    }
    canContinue(run) {
      if (run !== this.run) {
        ["DEBUG: activity after stop"].toString();
        return false;
      }
      return true;
    }
    continueWhenever(callback) {
      if (this.withinHook) {
        try {
          callback();
        } catch (error) {
          this.continueWithError(error);
        }
        return;
      }
      if (this.run.nudgeCallbacks) {
        this.run.nudgeCallbacks.push(callback);
        return;
      }
      this.run.nudgeCallbacks = [];
      try {
        callback();
      } catch (error) {
        this.continueWithError(error);
      }
    }
  };
  function isIterable(value) {
    return value && typeof value[Symbol.iterator] === "function";
  }
  function isAsyncIterable(value) {
    return value && typeof value[Symbol.asyncIterator] === "function";
  }

  // src/widgets/account/account-label.js
  var import_react9 = __toESM(require_react());

  // src/widgets/account/full-handle.js
  var import_react8 = __toESM(require_react());

  // src/widgets/account/full-did.js
  var import_react7 = __toESM(require_react());
  function FullDID(_a3) {
    var _b = _a3, { shortDID, Component: Component2 } = _b, rest = __objRest(_b, ["shortDID", "Component"]);
    if (!shortDID)
      return void 0;
    if (!Component2)
      Component2 = "span";
    const fullDID = unwrapShortDID(shortDID);
    const shortDIDNormalized = shortenDID(fullDID);
    if (shortDIDNormalized === fullDID)
      return /* @__PURE__ */ import_react7.default.createElement(Component2, __spreadValues({}, rest), fullDID);
    else
      return /* @__PURE__ */ import_react7.default.createElement(Component2, __spreadValues({}, rest), /* @__PURE__ */ import_react7.default.createElement("span", { className: "did-plc-prefix" }, fullDID.slice(0, -shortDIDNormalized.length)), shortDID);
  }

  // src/widgets/account/full-handle.js
  function FullHandle(_a3) {
    var _b = _a3, { shortHandle, Component: Component2 } = _b, rest = __objRest(_b, ["shortHandle", "Component"]);
    if (!shortHandle)
      return void 0;
    if (!Component2)
      Component2 = "span";
    const { mainText, tldSuffix, bskySocialSuffix, didPrefix, didBody } = breakHandleParts(shortHandle);
    if (didBody)
      return /* @__PURE__ */ import_react8.default.createElement(FullDID, __spreadValues({ shortDID: shortHandle, Component: Component2 }, rest));
    return /* @__PURE__ */ import_react8.default.createElement(Component2, __spreadValues({}, rest), /* @__PURE__ */ import_react8.default.createElement("span", { className: "handle-main-text" }, mainText), tldSuffix && /* @__PURE__ */ import_react8.default.createElement(import_react8.default.Fragment, null, /* @__PURE__ */ import_react8.default.createElement("span", { className: "handle-tld-suffix-dot" }, tldSuffix.charAt(0)), /* @__PURE__ */ import_react8.default.createElement("span", { className: "handle-tld-suffix" }, tldSuffix.slice(1))), bskySocialSuffix && /* @__PURE__ */ import_react8.default.createElement(import_react8.default.Fragment, null, /* @__PURE__ */ import_react8.default.createElement("span", { className: "handle-bsky-social-suffix-dot" }, bskySocialSuffix.charAt(0)), /* @__PURE__ */ import_react8.default.createElement("span", { className: "handle-bsky-social-suffix" }, bskySocialSuffix.slice(1))));
  }
  function breakHandleParts(shortHandle) {
    if (!shortHandle)
      return { mainText: shortHandle };
    if (likelyDID(shortHandle)) {
      const fullDID = unwrapShortDID(shortHandle);
      const shortDID = shortenDID(shortHandle);
      let didBody = shortDID;
      let didPrefix = fullDID.slice(0, -shortDID.length);
      return { mainText: shortHandle, didPrefix, didBody };
    }
    ;
    const fullHandle = unwrapShortHandle(shortHandle);
    shortHandle = shortenHandle(shortHandle);
    let bskySocialSuffix = shortHandle === fullHandle ? void 0 : fullHandle.slice(shortHandle.length);
    let mainText = shortHandle;
    let tldSuffix = void 0;
    if (!bskySocialSuffix) {
      if (shortHandle.endsWith(".bskysoci.al")) {
        mainText = shortHandle.slice(0, -".bskysoci.al".length);
        bskySocialSuffix = ".bskysoci.al";
      } else {
        const lastDot = shortHandle.lastIndexOf(".");
        if (lastDot > 0) {
          mainText = shortHandle.slice(0, lastDot);
          tldSuffix = shortHandle.slice(lastDot);
        }
      }
    }
    return {
      mainText,
      tldSuffix,
      bskySocialSuffix
    };
  }

  // src/widgets/account/account-label.js
  function AccountLabel(_a3) {
    var _b = _a3, { account, withDisplayName, className, Component: Component2 } = _b, rest = __objRest(_b, ["account", "withDisplayName", "className", "Component"]);
    if (!Component2)
      Component2 = "span";
    return /* @__PURE__ */ import_react9.default.createElement(Component2, __spreadValues({ className: "account-label " + (className || "") }, rest), /* @__PURE__ */ import_react9.default.createElement("span", { className: "account-handle" }, /* @__PURE__ */ import_react9.default.createElement(
      "span",
      {
        className: "account-avatar",
        style: !account.avatar ? void 0 : {
          backgroundImage: `url(${account.avatar})`
        }
      },
      "@"
    ), /* @__PURE__ */ import_react9.default.createElement(FullHandle, { shortHandle: account.shortHandle || account.handle }), !withDisplayName || !account.displayName ? void 0 : /* @__PURE__ */ import_react9.default.createElement(import_react9.default.Fragment, null, " ", /* @__PURE__ */ import_react9.default.createElement("span", { className: "account-label-display-name" }, account.displayName))));
  }

  // src/landing/fun-background.js
  var POST_DEBOUNCE_MSEC = 5e3;
  var POST_MAX_AGE = 1e3 * 40;
  var DESIRED_POST_COUNT = 4;
  function FunBackground() {
    const { bestThreads } = forAwait("now", getFirehoseThreads) || {};
    return /* @__PURE__ */ import_react10.default.createElement("div", { className: "fun-background" }, /* @__PURE__ */ import_react10.default.createElement("div", { className: "fun-background-scroller" }, bestThreads && bestThreads.map((thread, i) => {
      var _a3;
      return /* @__PURE__ */ import_react10.default.createElement(
        ThreadBubble,
        {
          key: ((_a3 = thread == null ? void 0 : thread.post) == null ? void 0 : _a3.uri) || "undefined",
          thread
        }
      );
    })));
  }
  function getFirehoseThreads() {
    return __asyncGenerator(this, null, function* () {
      var _a3, _b, _c;
      const seenPostWhen = /* @__PURE__ */ new Map();
      let bestCurrentThreads = [];
      try {
        for (var iter = __forAwait(firehoseThreads()), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
          const chunk = temp.value;
          const bestThreads = [];
          const now = Date.now();
          const threadTooOld = now - POST_MAX_AGE;
          for (const oldThread of bestCurrentThreads) {
            if (seenPostWhen.get(oldThread.post.uri) > threadTooOld) {
              bestThreads.push(oldThread);
            }
          }
          const newThreads = [];
          for (const thread of chunk) {
            if (!((_a3 = thread == null ? void 0 : thread.post) == null ? void 0 : _a3.record.text))
              continue;
            if (seenPostWhen.has((_b = thread == null ? void 0 : thread.post) == null ? void 0 : _b.uri))
              continue;
            seenPostWhen.set((_c = thread == null ? void 0 : thread.post) == null ? void 0 : _c.uri, now);
            newThreads.push(thread);
          }
          newThreads.sort((t1, t2) => {
            var _a4, _b2, _c2, _d, _e, _f;
            const likes1 = (((_a4 = t1.post) == null ? void 0 : _a4.likeCount) || 0) + (((_c2 = (_b2 = t2.parent) == null ? void 0 : _b2.post) == null ? void 0 : _c2.likeCount) || 0);
            const likes2 = (((_d = t2.post) == null ? void 0 : _d.likeCount) || 0) + (((_f = (_e = t1.parent) == null ? void 0 : _e.post) == null ? void 0 : _f.likeCount) || 0);
            return likes2 - likes1;
          });
          for (let i = 0; i < newThreads.length; i++) {
            if (!i || bestThreads.length < DESIRED_POST_COUNT) {
              bestThreads.push(newThreads[i]);
            }
          }
          bestCurrentThreads = bestThreads;
          yield { bestThreads };
          yield new __await(new Promise((resolve) => setTimeout(resolve, POST_DEBOUNCE_MSEC)));
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield new __await(temp.call(iter)));
        } finally {
          if (error)
            throw error[0];
        }
      }
    });
  }
  function ThreadBubble({ thread }) {
    var _a3, _b, _c, _d, _e;
    const hash2 = calcHash((_a3 = thread == null ? void 0 : thread.post) == null ? void 0 : _a3.uri);
    let rnd = nextRandom(Math.abs(hash2 / 1e3 + hash2));
    const slideDuration = 20 + rnd * 30;
    rnd = nextRandom(rnd);
    const rockDuration = 3 + rnd * 12;
    rnd = nextRandom(rnd);
    const left = rnd * 80 - 2;
    return /* @__PURE__ */ import_react10.default.createElement(
      "div",
      {
        className: "fun-background-thread-bubble",
        style: {
          animationDuration: `${slideDuration.toFixed(2)}s`,
          left: `${left.toFixed(2)}%`
        }
      },
      /* @__PURE__ */ import_react10.default.createElement(
        "div",
        {
          className: "fun-background-thread",
          style: {
            animationDuration: `${rockDuration.toFixed(2)}s`
          }
        },
        /* @__PURE__ */ import_react10.default.createElement(AccountLabel, { className: "fun-background-thread-author", account: (_b = thread == null ? void 0 : thread.post) == null ? void 0 : _b.author }),
        /* @__PURE__ */ import_react10.default.createElement("div", { className: "fun-background-thread-content" }, (_c = thread == null ? void 0 : thread.post) == null ? void 0 : _c.record.text),
        /* @__PURE__ */ import_react10.default.createElement("div", { className: "fun-background-thread-likes" }, /* @__PURE__ */ import_react10.default.createElement(FavoriteBorder_default, null), !((_d = thread == null ? void 0 : thread.post) == null ? void 0 : _d.likeCount) ? "" : (_e = thread == null ? void 0 : thread.post) == null ? void 0 : _e.likeCount.toLocaleString())
      )
    );
  }

  // package.json
  var version4 = "0.2.3";

  // src/localise.js
  function localise(english, languageMap) {
    if (!(langs == null ? void 0 : langs.length))
      return english;
    for (const lang of langs) {
      if (languageMap[lang])
        return languageMap[lang];
    }
    for (const lang of langs) {
      if (languageMap[lang])
        return languageMap[lang];
    }
    return english;
  }
  var langSubstitutes = {
    ru: "uk",
    be: "uk"
  };
  var _a2;
  var langs = extendDashLeads(
    !navigator ? void 0 : ((_a2 = navigator.languages) == null ? void 0 : _a2.length) ? navigator.languages.map((lang) => lang.toLowerCase()) : navigator.language ? [navigator.language.toLowerCase()] : void 0
  );
  function extendDashLeads(langs2) {
    if (!langs2)
      return langs2;
    const result = [];
    for (const lang of langs2) {
      result.push(langSubstitutes[lang] || lang);
    }
    for (const lang of langs2) {
      const dashLead = lang.split("-")[0];
      if (dashLead !== lang)
        result.push(langSubstitutes[dashLead] || dashLead);
    }
    return result;
  }

  // src/landing/landing.js
  var uppercase_GIST = localise("\u{1D4D6}\u{1D4D8}\u{1D4E2}\u{1D4E3}", { uk: "\u{1D4F7}\u{1D4EE}\u{1D4F9}\u{1D4EE}\u{1D4EC}\u{1D502}\u{1D4F0}" });
  function Landing() {
    (0, import_react11.useEffect)(() => {
      document.documentElement.classList.remove("account");
      document.title = uppercase_GIST;
    });
    return /* @__PURE__ */ import_react11.default.createElement(LandingCore, null);
  }
  function LandingCore() {
    const [timeout2] = import_react11.default.useState({ timeout: 0, searchText: "" });
    const [searchParams, setSearchParams] = useSearchParams();
    const [searchText, setSearchText] = import_react11.default.useState(searchParams.get("q") || "");
    const [searchResults, setSearchResults] = import_react11.default.useState(
      /** @type {import('@atproto/api/dist/client/types/app/bsky/actor/defs').ProfileViewBasic[]} */
      []
    );
    if (searchText !== timeout2.searchText) {
      clearTimeout(timeout2.timeout);
      timeout2.searchText = searchText;
      if (!/\S/.test(searchText)) {
        setSearchParams({});
        setSearchResults([]);
        return;
      }
      timeout2.timeout = setTimeout(() => __async(this, null, function* () {
        setSearchParams({ q: searchText });
        try {
          for (var iter = __forAwait(searchAccounts(searchText)), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
            const searchResults2 = temp.value;
            if (timeout2.searchText !== searchText)
              return;
            setSearchResults(searchResults2);
          }
        } catch (temp) {
          error = [temp];
        } finally {
          try {
            more && (temp = iter.return) && (yield temp.call(iter));
          } finally {
            if (error)
              throw error[0];
          }
        }
        if (timeout2.searchText === searchText) {
          setSearchResults((r2) => {
            r2 = r2.slice();
            r2.complete = true;
            return r2;
          });
        }
      }), 500);
    }
    return /* @__PURE__ */ import_react11.default.createElement("div", { className: "landing" }, /* @__PURE__ */ import_react11.default.createElement("div", { className: "landing-top-bar" }, /* @__PURE__ */ import_react11.default.createElement("a", { href: "https://bsky.app/profile/gist.ing" }, "Gist")), /* @__PURE__ */ import_react11.default.createElement("div", { className: "landing-handle-band" }, /* @__PURE__ */ import_react11.default.createElement(
      TextField_default,
      {
        id: "handle",
        name: "handle",
        autoComplete: "nickname",
        label: localise(
          "Searching for anything?",
          { uk: "\u0428\u0443\u043A\u0430\u0454\u043C\u043E \u0449\u043E\u0441\u044C, \u0447\u0438 \u0448\u043E?" }
        ),
        variant: "standard",
        value: searchText,
        onChange: (e) => {
          const searchText2 = e.target.value;
          setSearchText(searchText2);
        }
      }
    )), !searchResults.length ? void 0 : /* @__PURE__ */ import_react11.default.createElement("div", { className: "landing-auto-completion-area" }, (searchResults.length < 10 ? searchResults : searchResults.slice(0, 10)).map((profile) => /* @__PURE__ */ import_react11.default.createElement(Link, { key: profile.did, to: `/${profile.handle}`, className: "landing-auto-complete-entry" }, /* @__PURE__ */ import_react11.default.createElement(AccountLabel, { account: profile, Component: "div", withDisplayName: true }))), searchResults.complete ? void 0 : /* @__PURE__ */ import_react11.default.createElement("div", { className: "landing-auto-completion-progress" }, "...")), /* @__PURE__ */ import_react11.default.createElement("div", { className: "landing-bottom-bar" }, "v", version4), /* @__PURE__ */ import_react11.default.createElement(FunBackground, null));
  }

  // src/history/history.js
  var import_react13 = __toESM(require_react());

  // src/api/unicode-styles/sanitize-for-regex.js
  var regex_escapeableRegexChars = /[#-.]|[[-^]|[?|{}]/g;
  function sanitizeForRegex(str) {
    const sanitized = str.replace(regex_escapeableRegexChars, "\\$&");
    return sanitized;
  }

  // src/api/unicode-styles/variants.js
  var variants = {
    bold: { AZ: "\u{1D5D4}\u{1D5D5}\u{1D5D6}\u{1D5D7}\u{1D5D8}\u{1D5D9}\u{1D5DA}\u{1D5DB}\u{1D5DC}\u{1D5DD}\u{1D5DE}\u{1D5DF}\u{1D5E0}\u{1D5E1}\u{1D5E2}\u{1D5E3}\u{1D5E4}\u{1D5E5}\u{1D5E6}\u{1D5E7}\u{1D5E8}\u{1D5E9}\u{1D5EA}\u{1D5EB}\u{1D5EC}\u{1D5ED}", az: "\u{1D5EE}\u{1D5EF}\u{1D5F0}\u{1D5F1}\u{1D5F2}\u{1D5F3}\u{1D5F4}\u{1D5F5}\u{1D5F6}\u{1D5F7}\u{1D5F8}\u{1D5F9}\u{1D5FA}\u{1D5FB}\u{1D5FC}\u{1D5FD}\u{1D5FE}\u{1D5FF}\u{1D600}\u{1D601}\u{1D602}\u{1D603}\u{1D604}\u{1D605}\u{1D606}\u{1D607}", "09": "\u{1D7EC}\u{1D7ED}\u{1D7EE}\u{1D7EF}\u{1D7F0}\u{1D7F1}\u{1D7F2}\u{1D7F3}\u{1D7F4}\u{1D7F5}" },
    italic: { AZ: "\u{1D608}\u{1D609}\u{1D60A}\u{1D60B}\u{1D60C}\u{1D60D}\u{1D60E}\u{1D60F}\u{1D610}\u{1D611}\u{1D612}\u{1D613}\u{1D614}\u{1D615}\u{1D616}\u{1D617}\u{1D618}\u{1D619}\u{1D61A}\u{1D61B}\u{1D61C}\u{1D61D}\u{1D61E}\u{1D61F}\u{1D620}\u{1D621}", az: "\u{1D622}\u{1D623}\u{1D624}\u{1D625}\u{1D626}\u{1D627}\u{1D628}\u{1D629}\u{1D62A}\u{1D62B}\u{1D62C}\u{1D62D}\u{1D62E}\u{1D62F}\u{1D630}\u{1D631}\u{1D632}\u{1D633}\u{1D634}\u{1D635}\u{1D636}\u{1D637}\u{1D638}\u{1D639}\u{1D63A}\u{1D63B}" },
    bolditalic: { AZ: "\u{1D63C}\u{1D63D}\u{1D63E}\u{1D63F}\u{1D640}\u{1D641}\u{1D642}\u{1D643}\u{1D644}\u{1D645}\u{1D646}\u{1D647}\u{1D648}\u{1D649}\u{1D64A}\u{1D64B}\u{1D64C}\u{1D64D}\u{1D64E}\u{1D64F}\u{1D650}\u{1D651}\u{1D652}\u{1D653}\u{1D654}\u{1D655}", az: "\u{1D656}\u{1D657}\u{1D658}\u{1D659}\u{1D65A}\u{1D65B}\u{1D65C}\u{1D65D}\u{1D65E}\u{1D65F}\u{1D660}\u{1D661}\u{1D662}\u{1D663}\u{1D664}\u{1D665}\u{1D666}\u{1D667}\u{1D668}\u{1D669}\u{1D66A}\u{1D66B}\u{1D66C}\u{1D66D}\u{1D66E}\u{1D66F}" },
    fractur: { AB: "\u{1D504}\u{1D505}", C: "\u212D", DG: "\u{1D507}\u{1D508}\u{1D509}\u{1D50A}", HI: "\u210C\u2111", JQ: "\u{1D50D}\u{1D50E}\u{1D50F}\u{1D510}\u{1D511}\u{1D512}\u{1D513}\u{1D514}", R: "\u211C", SY: "\u{1D516}\u{1D517}\u{1D518}\u{1D519}\u{1D51A}\u{1D51B}\u{1D51C}", Z: "\u2128", az: "\u{1D51E}\u{1D51F}\u{1D520}\u{1D521}\u{1D522}\u{1D523}\u{1D524}\u{1D525}\u{1D526}\u{1D527}\u{1D528}\u{1D529}\u{1D52A}\u{1D52B}\u{1D52C}\u{1D52D}\u{1D52E}\u{1D52F}\u{1D530}\u{1D531}\u{1D532}\u{1D533}\u{1D534}\u{1D535}\u{1D536}\u{1D537}" },
    boldfractur: { AZ: "\u{1D56C}\u{1D56D}\u{1D56E}\u{1D56F}\u{1D570}\u{1D571}\u{1D572}\u{1D573}\u{1D574}\u{1D575}\u{1D576}\u{1D577}\u{1D578}\u{1D579}\u{1D57A}\u{1D57B}\u{1D57C}\u{1D57D}\u{1D57E}\u{1D57F}\u{1D580}\u{1D581}\u{1D582}\u{1D583}\u{1D584}\u{1D585}", az: "\u{1D586}\u{1D587}\u{1D588}\u{1D589}\u{1D58A}\u{1D58B}\u{1D58C}\u{1D58D}\u{1D58E}\u{1D58F}\u{1D590}\u{1D591}\u{1D592}\u{1D593}\u{1D594}\u{1D595}\u{1D596}\u{1D597}\u{1D598}\u{1D599}\u{1D59A}\u{1D59B}\u{1D59C}\u{1D59D}\u{1D59E}\u{1D59F}" },
    cursive: { AZ: "\u{1D49C}\u{1D435}\u{1D49E}\u{1D49F}\u{1D438}\u{1D439}\u{1D4A2}\u{1D43B}\u{1D43C}\u{1D4A5}\u{1D4A6}\u{1D43F}\u{1D440}\u{1D4A9}\u{1D4AA}\u{1D4AB}\u{1D4AC}\u{1D445}\u{1D4AE}\u{1D4AF}\u{1D4B0}\u{1D4B1}\u{1D4B2}\u{1D4B3}\u{1D4B4}\u{1D4B5}", az: "\u{1D4B6}\u{1D4B7}\u{1D4B8}\u{1D4B9}\u{1D452}\u{1D4BB}\u{1D454}\u{1D4BD}\u{1D4BE}\u{1D4BF}\u{1D4C0}\u{1D4C1}\u{1D4C2}\u{1D4C3}\u{1D45C}\u{1D4C5}\u{1D4C6}\u{1D4C7}\u{1D4C8}\u{1D4C9}\u{1D4CA}\u{1D4CB}\u{1D4CC}\u{1D4CD}\u{1D4CE}\u{1D4CF}" },
    // TODO: handle cursive B, E, F, H, I, L, M, R
    boldcursive: { AZ: "\u{1D4D0}\u{1D4D1}\u{1D4D2}\u{1D4D3}\u{1D4D4}\u{1D4D5}\u{1D4D6}\u{1D4D7}\u{1D4D8}\u{1D4D9}\u{1D4DA}\u{1D4DB}\u{1D4DC}\u{1D4DD}\u{1D4DE}\u{1D4DF}\u{1D4E0}\u{1D4E1}\u{1D4E2}\u{1D4E3}\u{1D4E4}\u{1D4E5}\u{1D4E6}\u{1D4E7}\u{1D4E8}\u{1D4E9}", az: "\u{1D4EA}\u{1D4EB}\u{1D4EC}\u{1D4ED}\u{1D4EE}\u{1D4EF}\u{1D4F0}\u{1D4F1}\u{1D4F2}\u{1D4F3}\u{1D4F4}\u{1D4F5}\u{1D4F6}\u{1D4F7}\u{1D4F8}\u{1D4F9}\u{1D4FA}\u{1D4FB}\u{1D4FC}\u{1D4FD}\u{1D4FE}\u{1D4FF}\u{1D500}\u{1D501}\u{1D502}\u{1D503}" },
    "super": { AP: "\u1D2C\u1D2E\u1D9C\u1D30\u1D31\u1DA0\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3C\u1D3E", Q: "\u1D3C\u0334", RW: "\u1D3F\u02E2\u1D40\u1D41\u2C7D\u1D42", ap: "\u1D43\u1D47\u1D9C\u1D48\u1D49\u1DA0\u1D4D\u02B0\u2071\u02B2\u1D4F\u02E1\u1D50\u207F\u1D52\u1D56", q: "\u0669", rz: "\u02B3\u02E2\u1D57\u1D58\u1D5B\u02B7\u02E3\u02B8\u1DBB", "09": "\u2070\xB9\xB2\xB3\u2074\u2075\u2076\u2077\u2078\u2079" },
    box: { AZ: "\u{1F130}\u{1F131}\u{1F132}\u{1F133}\u{1F134}\u{1F135}\u{1F136}\u{1F137}\u{1F138}\u{1F139}\u{1F13A}\u{1F13B}\u{1F13C}\u{1F13D}\u{1F13E}\u{1F13F}\u{1F140}\u{1F141}\u{1F142}\u{1F143}\u{1F144}\u{1F145}\u{1F146}\u{1F147}\u{1F148}\u{1F149}" },
    plate: { AZ: "\u{1F170}\u{1F171}\u{1F172}\u{1F173}\u{1F174}\u{1F175}\u{1F176}\u{1F177}\u{1F178}\u{1F179}\u{1F17A}\u{1F17B}\u{1F17C}\u{1F17D}\u{1F17E}\u{1F17F}\u{1F180}\u{1F181}\u{1F182}\u{1F183}\u{1F184}\u{1F185}\u{1F186}\u{1F187}\u{1F188}\u{1F189}" },
    round: { AZ: "\u24B6\u24B7\u24B8\u24B9\u24BA\u24BB\u24BC\u24BD\u24BE\u24BF\u24C0\u24C1\u24C2\u24C3\u24C4\u24C5\u24C6\u24C7\u24C8\u24C9\u24CA\u24CB\u24CC\u24CD\u24CE\u24CF", az: "\u24D0\u24D1\u24D2\u24D3\u24D4\u24D5\u24D6\u24D7\u24D8\u24D9\u24DA\u24DB\u24DC\u24DD\u24DE\u24DF\u24E0\u24E1\u24E2\u24E3\u24E4\u24E5\u24E6\u24E7\u24E8\u24E9", "09": "\u24EA\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468" },
    typewriter: { AZ: "\u{1D670}\u{1D671}\u{1D672}\u{1D673}\u{1D674}\u{1D675}\u{1D676}\u{1D677}\u{1D678}\u{1D679}\u{1D67A}\u{1D67B}\u{1D67C}\u{1D67D}\u{1D67E}\u{1D67F}\u{1D680}\u{1D681}\u{1D682}\u{1D683}\u{1D684}\u{1D685}\u{1D686}\u{1D687}\u{1D688}\u{1D689}", az: "\u{1D68A}\u{1D68B}\u{1D68C}\u{1D68D}\u{1D68E}\u{1D68F}\u{1D690}\u{1D691}\u{1D692}\u{1D693}\u{1D694}\u{1D695}\u{1D696}\u{1D697}\u{1D698}\u{1D699}\u{1D69A}\u{1D69B}\u{1D69C}\u{1D69D}\u{1D69E}\u{1D69F}\u{1D6A0}\u{1D6A1}\u{1D6A2}\u{1D6A3}", "09": "\u{1D7F6}\u{1D7F7}\u{1D7F8}\u{1D7F9}\u{1D7FA}\u{1D7FB}\u{1D7FC}\u{1D7FD}\u{1D7FE}\u{1D7FF}" },
    wide: {
      AB: "\u{1D538}\u{1D539}",
      C: "\u2102",
      DG: "\u{1D53B}\u{1D53C}\u{1D53D}\u{1D53E}",
      H: "\u210D",
      IM: "\u{1D540}\u{1D541}\u{1D542}\u{1D543}\u{1D544}",
      N: "\u2115",
      O: "\u{1D546}",
      PR: "\u2119\u211A\u211D",
      SY: "\u{1D54A}\u{1D54B}\u{1D54C}\u{1D54D}\u{1D54E}\u{1D54F}\u{1D550}",
      Z: "\u2124",
      az: "\u{1D552}\u{1D553}\u{1D554}\u{1D555}\u{1D556}\u{1D557}\u{1D558}\u{1D559}\u{1D55A}\u{1D55B}\u{1D55C}\u{1D55D}\u{1D55E}\u{1D55F}\u{1D560}\u{1D561}\u{1D562}\u{1D563}\u{1D564}\u{1D565}\u{1D566}\u{1D567}\u{1D568}\u{1D569}\u{1D56A}\u{1D56B}",
      "09": "\u{1D7D8}\u{1D7D9}\u{1D7DA}\u{1D7DB}\u{1D7DC}\u{1D7DD}\u{1D7DE}\u{1D7DF}\u{1D7E0}\u{1D7E1}"
    }
  };

  // src/api/unicode-styles/create-unicode-formatter-parser.js
  function createUnicodeFormattedParser() {
    var lookup = {};
    var formattedRegex;
    var regex_underlinedChar = /[^\r\n]\u0332/g;
    function buildLookups() {
      var lookupList = [];
      for (var modKind in variants) {
        var rangeMap = variants[modKind];
        if (!rangeMap || typeof rangeMap !== "object")
          continue;
        var modifiers = modKind === "bold" || modKind.indexOf("bold") ? [modKind] : ["bold", modKind.slice(4)];
        var underlinedModifiers = modifiers.concat(["underlined"]);
        var underlinedFullModifiers = modKind + "underlined";
        for (var rangeDesc in rangeMap) {
          var rangeChars = rangeMap[rangeDesc];
          if (!rangeChars || typeof rangeChars !== "string")
            continue;
          var rangeCount = rangeDesc.length === 1 ? 1 : rangeDesc.charCodeAt(1) - rangeDesc.charCodeAt(0) + 1;
          var formattedWidth = rangeChars.length / rangeCount;
          for (var i = 0; i < rangeCount; i++) {
            var ascii2 = String.fromCharCode(rangeDesc.charCodeAt(0) + i);
            var rangeCh = rangeChars.slice(i * formattedWidth, (i + 1) * formattedWidth);
            var entry = {
              formatted: rangeCh,
              plain: ascii2,
              modifiers,
              underlinedModifiers,
              fullModifiers: modKind,
              underlinedFullModifiers
            };
            lookupList.push(entry);
            lookup[entry.formatted] = entry;
          }
        }
      }
      lookupList.sort(function(entry1, entry2) {
        return -(entry1.formatted.length - entry2.formatted.length);
      });
      formattedRegex = new RegExp(lookupList.map(function(entry2) {
        var sanitizedEntry = sanitizeForRegex(entry2.formatted);
        var underlineEntry = sanitizedEntry + "\u0332";
        return underlineEntry + "|" + sanitizedEntry;
      }).join("|"), "g");
    }
    function parser(text, options) {
      function addUnderlinedsAndPlainTextBetween(start, end) {
        while (start < end) {
          regex_underlinedChar.lastIndex = start;
          var matchUnderlined = regex_underlinedChar.exec(text);
          if (!matchUnderlined || matchUnderlined.index >= end) {
            addFormattedToResult(text.slice(start, end));
            break;
          }
          if (matchUnderlined.index > start)
            addFormattedToResult(text.slice(start, matchUnderlined.index));
          var underlinedText = matchUnderlined[0];
          var plain = underlinedText.slice(0, underlinedText.length - 1);
          var added = false;
          if (!disableCoalescing) {
            var prevEntry = result.length && result[result.length - 1];
            if (prevEntry && typeof prevEntry !== "string" && prevEntry.fullModifiers === "underlined") {
              added = true;
              prevEntry.formatted += underlinedText;
              prevEntry.plain += plain;
              prevEntry.length += underlinedText.length;
            }
          }
          if (!added) {
            addFormattedToResult({
              formatted: underlinedText,
              plain,
              modifiers: ["underlined"],
              fullModifiers: "underlined",
              length: underlinedText.length
            });
          }
          if (result.modifiers.indexOf("underlined") < 0)
            result.modifiers.push("underlined");
          start = matchUnderlined.index + underlinedText.length;
        }
      }
      var regex_formattableCharacters = /[a-z0-9]/;
      function addFormattedToResult(entry2) {
        var prev3 = result.length && result[result.length - 1];
        if (!disableCoalescing) {
          if (typeof entry2 === "string") {
            if (typeof prev3 === "string") {
              result[result.length - 1] = prev3 + entry2;
              return;
            }
          } else if (prev3) {
            if (typeof prev3 === "string") {
              var nextPrev = result.length > 1 && result[result.length - 2];
              if (nextPrev && typeof nextPrev !== "string" && nextPrev.fullModifiers === entry2.fullModifiers && !regex_formattableCharacters.test(prev3) && prev3.indexOf("\n") < 0) {
                nextPrev.formatted += prev3 + entry2.formatted;
                nextPrev.plain += prev3 + entry2.plain;
                nextPrev.length += prev3.length + entry2.length;
                result.pop();
                return;
              }
            } else if (prev3.fullModifiers === entry2.fullModifiers) {
              prev3.formatted += entry2.formatted;
              prev3.plain += entry2.plain;
              prev3.length += entry2.length;
              return;
            }
          }
        }
        if (typeof entry2 !== "string" && (!prev3 || typeof prev3 === "string" || prev3.fullModifiers !== entry2.fullModifiers))
          for (var i = 0; i < entry2.modifiers.length; i++) {
            var mod = entry2.modifiers[i];
            if (!modifierDict[mod]) {
              modifierDict[mod] = true;
              result.modifiers.push(mod);
            }
          }
        result.push(entry2);
      }
      var result = (
        /** @type{*} */
        []
      );
      result.modifiers = [];
      result.fullModifiers = "";
      if (!text)
        return result;
      var disableCoalescing = options && options.disableCoalescing;
      var modifierDict = {};
      formattedRegex.lastIndex = 0;
      var index = 0;
      while (true) {
        formattedRegex.lastIndex = index;
        var match2 = formattedRegex.exec(text);
        if (!match2)
          break;
        if (match2.index > index) {
          addUnderlinedsAndPlainTextBetween(index, match2.index);
        }
        var underlined = false;
        var entryKey = match2[0];
        if (entryKey.charCodeAt(entryKey.length - 1) === "\u0332".charCodeAt(0)) {
          entryKey = entryKey.slice(0, entryKey.length - 1);
          underlined = true;
        }
        var entry = lookup[entryKey];
        var prev2 = result.length && result[result.length - 1];
        var modifiers = !underlined ? entry.modifiers : entry.underlinedModifiers;
        var fullModifiers = !underlined ? entry.fullModifiers : entry.underlinedFullModifiers;
        addFormattedToResult({
          formatted: match2[0],
          plain: entry.plain,
          modifiers,
          fullModifiers,
          length: match2[0].length
        });
        index = match2.index + match2[0].length;
      }
      if (index < text.length) {
        addUnderlinedsAndPlainTextBetween(index, text.length);
      }
      result.modifiers.sort();
      result.fullModifiers = result.modifiers.join("");
      return result;
    }
    buildLookups();
    return parser;
  }

  // src/api/unicode-styles/run-parse-ranges.js
  var _parseRanges;
  function runParseRanges(text, options) {
    if (!_parseRanges) {
      if (!_parseRanges)
        _parseRanges = createUnicodeFormattedParser();
    }
    const parsed = _parseRanges(text, options);
    return parsed;
  }

  // src/api/unicode-styles/apply-modifier.js
  function applyModifier(input, modifier, remove) {
    const parsed = runParseRanges(input, { disableCoalescing: true });
    let text = "";
    for (const range of parsed) {
      if (typeof range === "string") {
        if (remove) {
          text += range;
        } else {
          const rangeMap = variants[modifier];
          if (!rangeMap && modifier !== "underlined") {
            text += range;
          } else {
            for (const ch of range) {
              const formattedCh = applyModifierToPlainCh(ch, [modifier]);
              text += formattedCh;
            }
          }
        }
      } else {
        let applyFullModifiers;
        if (remove) {
          if (range.modifiers.indexOf(modifier) < 0) {
            text += range.formatted;
            continue;
          } else if (range.modifiers.length === 1) {
            text += range.plain;
            continue;
          } else {
            applyFullModifiers = range.modifiers.filter(function(mod) {
              return mod !== modifier;
            }).join("");
          }
        } else {
          applyFullModifiers = range.modifiers.indexOf(modifier) < 0 ? range.modifiers.concat([modifier]).sort().join("") : range.fullModifiers;
        }
        const formattedCh = applyModifierToPlainCh(
          range.plain,
          applyFullModifiers === modifier ? [modifier] : [applyFullModifiers, modifier]
        );
        text += formattedCh;
      }
    }
    return text;
  }
  var regex_underlined = /underlined/g;
  function applyModifierToPlainCh(plainCh, modifierAndFallbacks) {
    if (modifierAndFallbacks.length === 1 && modifierAndFallbacks[0] === "underlined")
      return plainCh + "\u0332";
    for (let mod of modifierAndFallbacks) {
      const underlined = regex_underlined.test(mod);
      if (underlined)
        mod = mod.replace(regex_underlined, "");
      if (!mod && underlined) {
        return plainCh + "\u0332";
      }
      const rangeMap = variants[mod];
      if (!rangeMap)
        continue;
      const formattedRange = rangeMap[plainCh];
      if (formattedRange)
        return formattedRange;
      for (const asciiRange in rangeMap) {
        const formattedRange2 = rangeMap[asciiRange];
        if (typeof formattedRange2 === "string" && plainCh.charCodeAt(0) >= asciiRange.charCodeAt(0) && plainCh.charCodeAt(0) <= asciiRange.charCodeAt(1)) {
          const formattedIndex = plainCh.charCodeAt(0) - asciiRange.charCodeAt(0);
          const formattedUnit = formattedRange2.length / (asciiRange.charCodeAt(1) - asciiRange.charCodeAt(0) + 1);
          let formattedChar = formattedRange2.slice(formattedIndex * formattedUnit, (formattedIndex + 1) * formattedUnit);
          if (underlined)
            formattedChar += "\u0332";
          return formattedChar;
        }
      }
    }
    return plainCh;
  }

  // src/history/timeline.js
  var import_react12 = __toESM(require_react());
  function Timeline() {
    return /* @__PURE__ */ import_react12.default.createElement("button", null, "thread...");
  }

  // src/history/history.js
  var middledot = "\xB7";
  function History() {
    let { handle } = useParams();
    (0, import_react13.useEffect)(() => {
      document.documentElement.classList.add("account");
      if (!handle) {
        document.title = uppercase_GIST;
      } else {
        const { mainText, tldSuffix, bskySocialSuffix, didPrefix, didBody } = breakHandleParts(handle);
        let title;
        if (didBody) {
          title = applyModifier(didPrefix || "", "typewriter") + applyModifier(didBody, "bold");
        } else {
          title = applyModifier(mainText.replace(/\./g, middledot), "boldcursive") + (tldSuffix ? applyModifier(
            tldSuffix.replace(/^\./, " " + middledot + " ").replace(/\./g, middledot),
            "cursive"
          ) : "") + (bskySocialSuffix ? applyModifier(
            bskySocialSuffix.replace(/^\./, " " + middledot + " ").replace(/\./g, middledot),
            "super"
          ) : "");
        }
        document.title = title;
      }
    });
    return /* @__PURE__ */ import_react13.default.createElement(HistoryCore, null);
  }
  function HistoryCore() {
    let { handle } = useParams();
    const resolved = forAwait(
      handle,
      () => resolveHandleOrDIDToProfile(handle)
    ) || {
      did: "did:plc:1234567890",
      handle: localise("loading....bsky.social", { uk: "\u0445\u0432\u0438\u043B\u0438\u043D\u043E\u0447\u043A\u0443....bsky.social" }),
      displayName: localise("Just a moment", { uk: "\u0417\u0430\u0447\u0435\u043A\u0430\u0439\u0442\u0435, \u0437\u0430\u0440\u0430 \u0431\u0443\u0434\u0435" }),
      description: localise("Important announcement", { uk: "\u0426\u044F \u0456\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0456\u044F \u0432\u0430\u0441 \u0437\u0434\u0438\u0432\u0443\u0454" }),
      placeholder: true
    };
    console.log("profile ", resolved);
    return /* @__PURE__ */ import_react13.default.createElement("div", { className: "history-view" }, /* @__PURE__ */ import_react13.default.createElement(
      "div",
      {
        className: suffixClassWhenEmpty("history-account-banner-bg", resolved.banner),
        style: !resolved.banner ? void 0 : { backgroundImage: `url(${resolved.banner})` }
      }
    ), /* @__PURE__ */ import_react13.default.createElement(
      "div",
      {
        className: suffixClassWhenEmpty("history-account-avatar", resolved.avatar),
        style: !resolved.avatar ? void 0 : { backgroundImage: `url(${resolved.avatar})` }
      }
    ), /* @__PURE__ */ import_react13.default.createElement("div", { className: suffixClassWhenEmpty("history-account-displayName-and-handle", resolved.displayName) }, /* @__PURE__ */ import_react13.default.createElement("span", { className: "history-account-displayName" }, resolved.displayName), /* @__PURE__ */ import_react13.default.createElement("div", { className: "history-account-handle" }, /* @__PURE__ */ import_react13.default.createElement("span", { className: "at-sign" }, "@"), /* @__PURE__ */ import_react13.default.createElement(FullHandle, { shortHandle: resolved.handle }))), /* @__PURE__ */ import_react13.default.createElement("div", { className: suffixClassWhenEmpty("history-account-description", resolved.description) }, resolved.description), /* @__PURE__ */ import_react13.default.createElement("div", { className: "timeline-container" }, /* @__PURE__ */ import_react13.default.createElement(Timeline, null), /* @__PURE__ */ import_react13.default.createElement("pre", null, JSON.stringify(resolved, null, 2), /* @__PURE__ */ import_react13.default.createElement("hr", null), /* @__PURE__ */ import_react13.default.createElement("div", { style: { opacity: 0.6 } }, JSON.stringify(resolved, null, 2)), /* @__PURE__ */ import_react13.default.createElement("br", null), /* @__PURE__ */ import_react13.default.createElement("br", null), /* @__PURE__ */ import_react13.default.createElement("hr", null), JSON.stringify(resolved, null, 2))));
  }
  function suffixClassWhenEmpty(className, value) {
    return value ? className : className + " " + className + "-empty";
  }

  // src/index.js
  function runApp() {
    const basename = /file/i.test(location.protocol) ? void 0 : /oyin\.bo|mihailik/i.test(location.hostname) ? "/receipts" : "/";
    const useRouter = /file/i.test(location.protocol) ? createHashRouter : createBrowserRouter;
    const router = useRouter(
      [
        { path: "/", element: /* @__PURE__ */ import_react14.default.createElement(Landing, null) },
        { path: "/index.html", element: /* @__PURE__ */ import_react14.default.createElement(Landing, null) },
        { path: "/:handle", element: /* @__PURE__ */ import_react14.default.createElement(History, null) }
      ],
      {
        basename
      }
    );
    const root = document.createElement("div");
    root.id = "root";
    root.style.cssText = `
    min-height: 100%;
    display: grid;
  `;
    document.body.appendChild(root);
    const theme = createTheme_default2({
      components: {
        MuiTooltip: {
          styleOverrides: {
            tooltip: {
              backgroundColor: "white",
              color: "black",
              border: "solid 1px #e8e8e8",
              boxShadow: "3px 3px 8px rgba(0, 0, 0, 12%)",
              fontSize: "90%",
              // maxWidth: '40em',
              padding: "0.7em",
              paddingRight: "0.2em"
            }
          }
        }
      }
    });
    (0, import_client.createRoot)(root).render(
      /* @__PURE__ */ import_react14.default.createElement(ThemeProvider5, { theme }, /* @__PURE__ */ import_react14.default.createElement(import_react14.default.Fragment, null, /* @__PURE__ */ import_react14.default.createElement(RouterProvider, { router })))
    );
  }
  runApp();
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/node/index.js:
  (**
   * @mui/styled-engine v5.15.14
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

dexie/dist/dexie.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.15.3
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.22.3
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.22.3
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@mui/utils/index.js:
  (**
   * @mui/utils v5.15.14
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/private-theming/index.js:
  (**
   * @mui/private-theming v5.15.14
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/base/index.js:
  (**
   * @mui/base v5.0.0-beta.40
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/material/index.js:
  (**
   * @mui/material v5.15.14
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=index.js.map
